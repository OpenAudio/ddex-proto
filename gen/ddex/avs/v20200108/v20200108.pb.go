// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: ddex/avs/v20200108/v20200108.proto

package avsv20200108

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccessLimitation int32

const (
	AccessLimitation_ACCESS_LIMITATION_UNSPECIFIED       AccessLimitation = 0
	AccessLimitation_ACCESS_LIMITATION_NOLIMITATION      AccessLimitation = 1
	AccessLimitation_ACCESS_LIMITATION_PRIVATEACCESSONLY AccessLimitation = 2
)

// Enum value maps for AccessLimitation.
var (
	AccessLimitation_name = map[int32]string{
		0: "ACCESS_LIMITATION_UNSPECIFIED",
		1: "ACCESS_LIMITATION_NOLIMITATION",
		2: "ACCESS_LIMITATION_PRIVATEACCESSONLY",
	}
	AccessLimitation_value = map[string]int32{
		"ACCESS_LIMITATION_UNSPECIFIED":       0,
		"ACCESS_LIMITATION_NOLIMITATION":      1,
		"ACCESS_LIMITATION_PRIVATEACCESSONLY": 2,
	}
)

func (x AccessLimitation) Enum() *AccessLimitation {
	p := new(AccessLimitation)
	*p = x
	return p
}

func (x AccessLimitation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLimitation) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[0].Descriptor()
}

func (AccessLimitation) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[0]
}

func (x AccessLimitation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLimitation.Descriptor instead.
func (AccessLimitation) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{0}
}

type AdministratingRecordCompanyRole int32

const (
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED                   AdministratingRecordCompanyRole = 0
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT AdministratingRecordCompanyRole = 1
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR           AdministratingRecordCompanyRole = 2
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR          AdministratingRecordCompanyRole = 3
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN                       AdministratingRecordCompanyRole = 4
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED                   AdministratingRecordCompanyRole = 5
)

// Enum value maps for AdministratingRecordCompanyRole.
var (
	AdministratingRecordCompanyRole_name = map[int32]string{
		0: "ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED",
		1: "ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT",
		2: "ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR",
		3: "ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR",
		4: "ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN",
		5: "ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED",
	}
	AdministratingRecordCompanyRole_value = map[string]int32{
		"ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED":                   0,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT": 1,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR":           2,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR":          3,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN":                       4,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED":                   5,
	}
)

func (x AdministratingRecordCompanyRole) Enum() *AdministratingRecordCompanyRole {
	p := new(AdministratingRecordCompanyRole)
	*p = x
	return p
}

func (x AdministratingRecordCompanyRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdministratingRecordCompanyRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[1].Descriptor()
}

func (AdministratingRecordCompanyRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[1]
}

func (x AdministratingRecordCompanyRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdministratingRecordCompanyRole.Descriptor instead.
func (AdministratingRecordCompanyRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{1}
}

type AllTerritoryCode int32

const (
	AllTerritoryCode_ALL_TERRITORY_CODE_UNSPECIFIED AllTerritoryCode = 0
	AllTerritoryCode_ALL_TERRITORY_CODE_AD          AllTerritoryCode = 1
	AllTerritoryCode_ALL_TERRITORY_CODE_AE          AllTerritoryCode = 2
	AllTerritoryCode_ALL_TERRITORY_CODE_AF          AllTerritoryCode = 3
	AllTerritoryCode_ALL_TERRITORY_CODE_AG          AllTerritoryCode = 4
	AllTerritoryCode_ALL_TERRITORY_CODE_AI          AllTerritoryCode = 5
	AllTerritoryCode_ALL_TERRITORY_CODE_AL          AllTerritoryCode = 6
	AllTerritoryCode_ALL_TERRITORY_CODE_AM          AllTerritoryCode = 7
	AllTerritoryCode_ALL_TERRITORY_CODE_AN          AllTerritoryCode = 8
	AllTerritoryCode_ALL_TERRITORY_CODE_AO          AllTerritoryCode = 9
	AllTerritoryCode_ALL_TERRITORY_CODE_AQ          AllTerritoryCode = 10
	AllTerritoryCode_ALL_TERRITORY_CODE_AR          AllTerritoryCode = 11
	AllTerritoryCode_ALL_TERRITORY_CODE_AS          AllTerritoryCode = 12
	AllTerritoryCode_ALL_TERRITORY_CODE_AT          AllTerritoryCode = 13
	AllTerritoryCode_ALL_TERRITORY_CODE_AU          AllTerritoryCode = 14
	AllTerritoryCode_ALL_TERRITORY_CODE_AW          AllTerritoryCode = 15
	AllTerritoryCode_ALL_TERRITORY_CODE_AX          AllTerritoryCode = 16
	AllTerritoryCode_ALL_TERRITORY_CODE_AZ          AllTerritoryCode = 17
	AllTerritoryCode_ALL_TERRITORY_CODE_BA          AllTerritoryCode = 18
	AllTerritoryCode_ALL_TERRITORY_CODE_BB          AllTerritoryCode = 19
	AllTerritoryCode_ALL_TERRITORY_CODE_BD          AllTerritoryCode = 20
	AllTerritoryCode_ALL_TERRITORY_CODE_BE          AllTerritoryCode = 21
	AllTerritoryCode_ALL_TERRITORY_CODE_BF          AllTerritoryCode = 22
	AllTerritoryCode_ALL_TERRITORY_CODE_BG          AllTerritoryCode = 23
	AllTerritoryCode_ALL_TERRITORY_CODE_BH          AllTerritoryCode = 24
	AllTerritoryCode_ALL_TERRITORY_CODE_BI          AllTerritoryCode = 25
	AllTerritoryCode_ALL_TERRITORY_CODE_BJ          AllTerritoryCode = 26
	AllTerritoryCode_ALL_TERRITORY_CODE_BL          AllTerritoryCode = 27
	AllTerritoryCode_ALL_TERRITORY_CODE_BM          AllTerritoryCode = 28
	AllTerritoryCode_ALL_TERRITORY_CODE_BN          AllTerritoryCode = 29
	AllTerritoryCode_ALL_TERRITORY_CODE_BO          AllTerritoryCode = 30
	AllTerritoryCode_ALL_TERRITORY_CODE_BQ          AllTerritoryCode = 31
	AllTerritoryCode_ALL_TERRITORY_CODE_BR          AllTerritoryCode = 32
	AllTerritoryCode_ALL_TERRITORY_CODE_BS          AllTerritoryCode = 33
	AllTerritoryCode_ALL_TERRITORY_CODE_BT          AllTerritoryCode = 34
	AllTerritoryCode_ALL_TERRITORY_CODE_BV          AllTerritoryCode = 35
	AllTerritoryCode_ALL_TERRITORY_CODE_BW          AllTerritoryCode = 36
	AllTerritoryCode_ALL_TERRITORY_CODE_BY          AllTerritoryCode = 37
	AllTerritoryCode_ALL_TERRITORY_CODE_BZ          AllTerritoryCode = 38
	AllTerritoryCode_ALL_TERRITORY_CODE_CA          AllTerritoryCode = 39
	AllTerritoryCode_ALL_TERRITORY_CODE_CC          AllTerritoryCode = 40
	AllTerritoryCode_ALL_TERRITORY_CODE_CD          AllTerritoryCode = 41
	AllTerritoryCode_ALL_TERRITORY_CODE_CF          AllTerritoryCode = 42
	AllTerritoryCode_ALL_TERRITORY_CODE_CG          AllTerritoryCode = 43
	AllTerritoryCode_ALL_TERRITORY_CODE_CH          AllTerritoryCode = 44
	AllTerritoryCode_ALL_TERRITORY_CODE_CI          AllTerritoryCode = 45
	AllTerritoryCode_ALL_TERRITORY_CODE_CK          AllTerritoryCode = 46
	AllTerritoryCode_ALL_TERRITORY_CODE_CL          AllTerritoryCode = 47
	AllTerritoryCode_ALL_TERRITORY_CODE_CM          AllTerritoryCode = 48
	AllTerritoryCode_ALL_TERRITORY_CODE_CN          AllTerritoryCode = 49
	AllTerritoryCode_ALL_TERRITORY_CODE_CO          AllTerritoryCode = 50
	AllTerritoryCode_ALL_TERRITORY_CODE_CR          AllTerritoryCode = 51
	AllTerritoryCode_ALL_TERRITORY_CODE_CS          AllTerritoryCode = 52
	AllTerritoryCode_ALL_TERRITORY_CODE_CU          AllTerritoryCode = 53
	AllTerritoryCode_ALL_TERRITORY_CODE_CV          AllTerritoryCode = 54
	AllTerritoryCode_ALL_TERRITORY_CODE_CW          AllTerritoryCode = 55
	AllTerritoryCode_ALL_TERRITORY_CODE_CX          AllTerritoryCode = 56
	AllTerritoryCode_ALL_TERRITORY_CODE_CY          AllTerritoryCode = 57
	AllTerritoryCode_ALL_TERRITORY_CODE_CZ          AllTerritoryCode = 58
	AllTerritoryCode_ALL_TERRITORY_CODE_DE          AllTerritoryCode = 59
	AllTerritoryCode_ALL_TERRITORY_CODE_DJ          AllTerritoryCode = 60
	AllTerritoryCode_ALL_TERRITORY_CODE_DK          AllTerritoryCode = 61
	AllTerritoryCode_ALL_TERRITORY_CODE_DM          AllTerritoryCode = 62
	AllTerritoryCode_ALL_TERRITORY_CODE_DO          AllTerritoryCode = 63
	AllTerritoryCode_ALL_TERRITORY_CODE_DZ          AllTerritoryCode = 64
	AllTerritoryCode_ALL_TERRITORY_CODE_EC          AllTerritoryCode = 65
	AllTerritoryCode_ALL_TERRITORY_CODE_EE          AllTerritoryCode = 66
	AllTerritoryCode_ALL_TERRITORY_CODE_EG          AllTerritoryCode = 67
	AllTerritoryCode_ALL_TERRITORY_CODE_EH          AllTerritoryCode = 68
	AllTerritoryCode_ALL_TERRITORY_CODE_ER          AllTerritoryCode = 69
	AllTerritoryCode_ALL_TERRITORY_CODE_ES          AllTerritoryCode = 70
	AllTerritoryCode_ALL_TERRITORY_CODE_ES_CE       AllTerritoryCode = 71
	AllTerritoryCode_ALL_TERRITORY_CODE_ES_CN       AllTerritoryCode = 72
	AllTerritoryCode_ALL_TERRITORY_CODE_ES_ML       AllTerritoryCode = 73
	AllTerritoryCode_ALL_TERRITORY_CODE_ET          AllTerritoryCode = 74
	AllTerritoryCode_ALL_TERRITORY_CODE_FI          AllTerritoryCode = 75
	AllTerritoryCode_ALL_TERRITORY_CODE_FJ          AllTerritoryCode = 76
	AllTerritoryCode_ALL_TERRITORY_CODE_FK          AllTerritoryCode = 77
	AllTerritoryCode_ALL_TERRITORY_CODE_FM          AllTerritoryCode = 78
	AllTerritoryCode_ALL_TERRITORY_CODE_FO          AllTerritoryCode = 79
	AllTerritoryCode_ALL_TERRITORY_CODE_FR          AllTerritoryCode = 80
	AllTerritoryCode_ALL_TERRITORY_CODE_GA          AllTerritoryCode = 81
	AllTerritoryCode_ALL_TERRITORY_CODE_GB          AllTerritoryCode = 82
	AllTerritoryCode_ALL_TERRITORY_CODE_GD          AllTerritoryCode = 83
	AllTerritoryCode_ALL_TERRITORY_CODE_GE          AllTerritoryCode = 84
	AllTerritoryCode_ALL_TERRITORY_CODE_GF          AllTerritoryCode = 85
	AllTerritoryCode_ALL_TERRITORY_CODE_GG          AllTerritoryCode = 86
	AllTerritoryCode_ALL_TERRITORY_CODE_GH          AllTerritoryCode = 87
	AllTerritoryCode_ALL_TERRITORY_CODE_GI          AllTerritoryCode = 88
	AllTerritoryCode_ALL_TERRITORY_CODE_GL          AllTerritoryCode = 89
	AllTerritoryCode_ALL_TERRITORY_CODE_GM          AllTerritoryCode = 90
	AllTerritoryCode_ALL_TERRITORY_CODE_GN          AllTerritoryCode = 91
	AllTerritoryCode_ALL_TERRITORY_CODE_GP          AllTerritoryCode = 92
	AllTerritoryCode_ALL_TERRITORY_CODE_GQ          AllTerritoryCode = 93
	AllTerritoryCode_ALL_TERRITORY_CODE_GR          AllTerritoryCode = 94
	AllTerritoryCode_ALL_TERRITORY_CODE_GS          AllTerritoryCode = 95
	AllTerritoryCode_ALL_TERRITORY_CODE_GT          AllTerritoryCode = 96
	AllTerritoryCode_ALL_TERRITORY_CODE_GU          AllTerritoryCode = 97
	AllTerritoryCode_ALL_TERRITORY_CODE_GW          AllTerritoryCode = 98
	AllTerritoryCode_ALL_TERRITORY_CODE_GY          AllTerritoryCode = 99
	AllTerritoryCode_ALL_TERRITORY_CODE_HK          AllTerritoryCode = 100
	AllTerritoryCode_ALL_TERRITORY_CODE_HM          AllTerritoryCode = 101
	AllTerritoryCode_ALL_TERRITORY_CODE_HN          AllTerritoryCode = 102
	AllTerritoryCode_ALL_TERRITORY_CODE_HR          AllTerritoryCode = 103
	AllTerritoryCode_ALL_TERRITORY_CODE_HT          AllTerritoryCode = 104
	AllTerritoryCode_ALL_TERRITORY_CODE_HU          AllTerritoryCode = 105
	AllTerritoryCode_ALL_TERRITORY_CODE_ID          AllTerritoryCode = 106
	AllTerritoryCode_ALL_TERRITORY_CODE_IE          AllTerritoryCode = 107
	AllTerritoryCode_ALL_TERRITORY_CODE_IL          AllTerritoryCode = 108
	AllTerritoryCode_ALL_TERRITORY_CODE_IM          AllTerritoryCode = 109
	AllTerritoryCode_ALL_TERRITORY_CODE_IN          AllTerritoryCode = 110
	AllTerritoryCode_ALL_TERRITORY_CODE_IO          AllTerritoryCode = 111
	AllTerritoryCode_ALL_TERRITORY_CODE_IQ          AllTerritoryCode = 112
	AllTerritoryCode_ALL_TERRITORY_CODE_IR          AllTerritoryCode = 113
	AllTerritoryCode_ALL_TERRITORY_CODE_IS          AllTerritoryCode = 114
	AllTerritoryCode_ALL_TERRITORY_CODE_IT          AllTerritoryCode = 115
	AllTerritoryCode_ALL_TERRITORY_CODE_JE          AllTerritoryCode = 116
	AllTerritoryCode_ALL_TERRITORY_CODE_JM          AllTerritoryCode = 117
	AllTerritoryCode_ALL_TERRITORY_CODE_JO          AllTerritoryCode = 118
	AllTerritoryCode_ALL_TERRITORY_CODE_JP          AllTerritoryCode = 119
	AllTerritoryCode_ALL_TERRITORY_CODE_KE          AllTerritoryCode = 120
	AllTerritoryCode_ALL_TERRITORY_CODE_KG          AllTerritoryCode = 121
	AllTerritoryCode_ALL_TERRITORY_CODE_KH          AllTerritoryCode = 122
	AllTerritoryCode_ALL_TERRITORY_CODE_KI          AllTerritoryCode = 123
	AllTerritoryCode_ALL_TERRITORY_CODE_KM          AllTerritoryCode = 124
	AllTerritoryCode_ALL_TERRITORY_CODE_KN          AllTerritoryCode = 125
	AllTerritoryCode_ALL_TERRITORY_CODE_KP          AllTerritoryCode = 126
	AllTerritoryCode_ALL_TERRITORY_CODE_KR          AllTerritoryCode = 127
	AllTerritoryCode_ALL_TERRITORY_CODE_KW          AllTerritoryCode = 128
	AllTerritoryCode_ALL_TERRITORY_CODE_KY          AllTerritoryCode = 129
	AllTerritoryCode_ALL_TERRITORY_CODE_KZ          AllTerritoryCode = 130
	AllTerritoryCode_ALL_TERRITORY_CODE_LA          AllTerritoryCode = 131
	AllTerritoryCode_ALL_TERRITORY_CODE_LB          AllTerritoryCode = 132
	AllTerritoryCode_ALL_TERRITORY_CODE_LC          AllTerritoryCode = 133
	AllTerritoryCode_ALL_TERRITORY_CODE_LI          AllTerritoryCode = 134
	AllTerritoryCode_ALL_TERRITORY_CODE_LK          AllTerritoryCode = 135
	AllTerritoryCode_ALL_TERRITORY_CODE_LR          AllTerritoryCode = 136
	AllTerritoryCode_ALL_TERRITORY_CODE_LS          AllTerritoryCode = 137
	AllTerritoryCode_ALL_TERRITORY_CODE_LT          AllTerritoryCode = 138
	AllTerritoryCode_ALL_TERRITORY_CODE_LU          AllTerritoryCode = 139
	AllTerritoryCode_ALL_TERRITORY_CODE_LV          AllTerritoryCode = 140
	AllTerritoryCode_ALL_TERRITORY_CODE_LY          AllTerritoryCode = 141
	AllTerritoryCode_ALL_TERRITORY_CODE_MA          AllTerritoryCode = 142
	AllTerritoryCode_ALL_TERRITORY_CODE_MC          AllTerritoryCode = 143
	AllTerritoryCode_ALL_TERRITORY_CODE_MD          AllTerritoryCode = 144
	AllTerritoryCode_ALL_TERRITORY_CODE_ME          AllTerritoryCode = 145
	AllTerritoryCode_ALL_TERRITORY_CODE_MF          AllTerritoryCode = 146
	AllTerritoryCode_ALL_TERRITORY_CODE_MG          AllTerritoryCode = 147
	AllTerritoryCode_ALL_TERRITORY_CODE_MH          AllTerritoryCode = 148
	AllTerritoryCode_ALL_TERRITORY_CODE_MK          AllTerritoryCode = 149
	AllTerritoryCode_ALL_TERRITORY_CODE_ML          AllTerritoryCode = 150
	AllTerritoryCode_ALL_TERRITORY_CODE_MM          AllTerritoryCode = 151
	AllTerritoryCode_ALL_TERRITORY_CODE_MN          AllTerritoryCode = 152
	AllTerritoryCode_ALL_TERRITORY_CODE_MO          AllTerritoryCode = 153
	AllTerritoryCode_ALL_TERRITORY_CODE_MP          AllTerritoryCode = 154
	AllTerritoryCode_ALL_TERRITORY_CODE_MQ          AllTerritoryCode = 155
	AllTerritoryCode_ALL_TERRITORY_CODE_MR          AllTerritoryCode = 156
	AllTerritoryCode_ALL_TERRITORY_CODE_MS          AllTerritoryCode = 157
	AllTerritoryCode_ALL_TERRITORY_CODE_MT          AllTerritoryCode = 158
	AllTerritoryCode_ALL_TERRITORY_CODE_MU          AllTerritoryCode = 159
	AllTerritoryCode_ALL_TERRITORY_CODE_MV          AllTerritoryCode = 160
	AllTerritoryCode_ALL_TERRITORY_CODE_MW          AllTerritoryCode = 161
	AllTerritoryCode_ALL_TERRITORY_CODE_MX          AllTerritoryCode = 162
	AllTerritoryCode_ALL_TERRITORY_CODE_MY          AllTerritoryCode = 163
	AllTerritoryCode_ALL_TERRITORY_CODE_MZ          AllTerritoryCode = 164
	AllTerritoryCode_ALL_TERRITORY_CODE_NA          AllTerritoryCode = 165
	AllTerritoryCode_ALL_TERRITORY_CODE_NC          AllTerritoryCode = 166
	AllTerritoryCode_ALL_TERRITORY_CODE_NE          AllTerritoryCode = 167
	AllTerritoryCode_ALL_TERRITORY_CODE_NF          AllTerritoryCode = 168
	AllTerritoryCode_ALL_TERRITORY_CODE_NG          AllTerritoryCode = 169
	AllTerritoryCode_ALL_TERRITORY_CODE_NI          AllTerritoryCode = 170
	AllTerritoryCode_ALL_TERRITORY_CODE_NL          AllTerritoryCode = 171
	AllTerritoryCode_ALL_TERRITORY_CODE_NO          AllTerritoryCode = 172
	AllTerritoryCode_ALL_TERRITORY_CODE_NP          AllTerritoryCode = 173
	AllTerritoryCode_ALL_TERRITORY_CODE_NR          AllTerritoryCode = 174
	AllTerritoryCode_ALL_TERRITORY_CODE_NU          AllTerritoryCode = 175
	AllTerritoryCode_ALL_TERRITORY_CODE_NZ          AllTerritoryCode = 176
	AllTerritoryCode_ALL_TERRITORY_CODE_OM          AllTerritoryCode = 177
	AllTerritoryCode_ALL_TERRITORY_CODE_PA          AllTerritoryCode = 178
	AllTerritoryCode_ALL_TERRITORY_CODE_PE          AllTerritoryCode = 179
	AllTerritoryCode_ALL_TERRITORY_CODE_PF          AllTerritoryCode = 180
	AllTerritoryCode_ALL_TERRITORY_CODE_PG          AllTerritoryCode = 181
	AllTerritoryCode_ALL_TERRITORY_CODE_PH          AllTerritoryCode = 182
	AllTerritoryCode_ALL_TERRITORY_CODE_PK          AllTerritoryCode = 183
	AllTerritoryCode_ALL_TERRITORY_CODE_PL          AllTerritoryCode = 184
	AllTerritoryCode_ALL_TERRITORY_CODE_PM          AllTerritoryCode = 185
	AllTerritoryCode_ALL_TERRITORY_CODE_PN          AllTerritoryCode = 186
	AllTerritoryCode_ALL_TERRITORY_CODE_PR          AllTerritoryCode = 187
	AllTerritoryCode_ALL_TERRITORY_CODE_PS          AllTerritoryCode = 188
	AllTerritoryCode_ALL_TERRITORY_CODE_PT          AllTerritoryCode = 189
	AllTerritoryCode_ALL_TERRITORY_CODE_PW          AllTerritoryCode = 190
	AllTerritoryCode_ALL_TERRITORY_CODE_PY          AllTerritoryCode = 191
	AllTerritoryCode_ALL_TERRITORY_CODE_QA          AllTerritoryCode = 192
	AllTerritoryCode_ALL_TERRITORY_CODE_RE          AllTerritoryCode = 193
	AllTerritoryCode_ALL_TERRITORY_CODE_RO          AllTerritoryCode = 194
	AllTerritoryCode_ALL_TERRITORY_CODE_RS          AllTerritoryCode = 195
	AllTerritoryCode_ALL_TERRITORY_CODE_RU          AllTerritoryCode = 196
	AllTerritoryCode_ALL_TERRITORY_CODE_RW          AllTerritoryCode = 197
	AllTerritoryCode_ALL_TERRITORY_CODE_SA          AllTerritoryCode = 198
	AllTerritoryCode_ALL_TERRITORY_CODE_SB          AllTerritoryCode = 199
	AllTerritoryCode_ALL_TERRITORY_CODE_SC          AllTerritoryCode = 200
	AllTerritoryCode_ALL_TERRITORY_CODE_SD          AllTerritoryCode = 201
	AllTerritoryCode_ALL_TERRITORY_CODE_SE          AllTerritoryCode = 202
	AllTerritoryCode_ALL_TERRITORY_CODE_SG          AllTerritoryCode = 203
	AllTerritoryCode_ALL_TERRITORY_CODE_SH          AllTerritoryCode = 204
	AllTerritoryCode_ALL_TERRITORY_CODE_SI          AllTerritoryCode = 205
	AllTerritoryCode_ALL_TERRITORY_CODE_SJ          AllTerritoryCode = 206
	AllTerritoryCode_ALL_TERRITORY_CODE_SK          AllTerritoryCode = 207
	AllTerritoryCode_ALL_TERRITORY_CODE_SL          AllTerritoryCode = 208
	AllTerritoryCode_ALL_TERRITORY_CODE_SM          AllTerritoryCode = 209
	AllTerritoryCode_ALL_TERRITORY_CODE_SN          AllTerritoryCode = 210
	AllTerritoryCode_ALL_TERRITORY_CODE_SO          AllTerritoryCode = 211
	AllTerritoryCode_ALL_TERRITORY_CODE_SR          AllTerritoryCode = 212
	AllTerritoryCode_ALL_TERRITORY_CODE_SS          AllTerritoryCode = 213
	AllTerritoryCode_ALL_TERRITORY_CODE_ST          AllTerritoryCode = 214
	AllTerritoryCode_ALL_TERRITORY_CODE_SV          AllTerritoryCode = 215
	AllTerritoryCode_ALL_TERRITORY_CODE_SX          AllTerritoryCode = 216
	AllTerritoryCode_ALL_TERRITORY_CODE_SY          AllTerritoryCode = 217
	AllTerritoryCode_ALL_TERRITORY_CODE_SZ          AllTerritoryCode = 218
	AllTerritoryCode_ALL_TERRITORY_CODE_TC          AllTerritoryCode = 219
	AllTerritoryCode_ALL_TERRITORY_CODE_TD          AllTerritoryCode = 220
	AllTerritoryCode_ALL_TERRITORY_CODE_TF          AllTerritoryCode = 221
	AllTerritoryCode_ALL_TERRITORY_CODE_TG          AllTerritoryCode = 222
	AllTerritoryCode_ALL_TERRITORY_CODE_TH          AllTerritoryCode = 223
	AllTerritoryCode_ALL_TERRITORY_CODE_TJ          AllTerritoryCode = 224
	AllTerritoryCode_ALL_TERRITORY_CODE_TK          AllTerritoryCode = 225
	AllTerritoryCode_ALL_TERRITORY_CODE_TL          AllTerritoryCode = 226
	AllTerritoryCode_ALL_TERRITORY_CODE_TM          AllTerritoryCode = 227
	AllTerritoryCode_ALL_TERRITORY_CODE_TN          AllTerritoryCode = 228
	AllTerritoryCode_ALL_TERRITORY_CODE_TO          AllTerritoryCode = 229
	AllTerritoryCode_ALL_TERRITORY_CODE_TR          AllTerritoryCode = 230
	AllTerritoryCode_ALL_TERRITORY_CODE_TT          AllTerritoryCode = 231
	AllTerritoryCode_ALL_TERRITORY_CODE_TV          AllTerritoryCode = 232
	AllTerritoryCode_ALL_TERRITORY_CODE_TW          AllTerritoryCode = 233
	AllTerritoryCode_ALL_TERRITORY_CODE_TZ          AllTerritoryCode = 234
	AllTerritoryCode_ALL_TERRITORY_CODE_UA          AllTerritoryCode = 235
	AllTerritoryCode_ALL_TERRITORY_CODE_UG          AllTerritoryCode = 236
	AllTerritoryCode_ALL_TERRITORY_CODE_UM          AllTerritoryCode = 237
	AllTerritoryCode_ALL_TERRITORY_CODE_US          AllTerritoryCode = 238
	AllTerritoryCode_ALL_TERRITORY_CODE_UY          AllTerritoryCode = 239
	AllTerritoryCode_ALL_TERRITORY_CODE_UZ          AllTerritoryCode = 240
	AllTerritoryCode_ALL_TERRITORY_CODE_VA          AllTerritoryCode = 241
	AllTerritoryCode_ALL_TERRITORY_CODE_VC          AllTerritoryCode = 242
	AllTerritoryCode_ALL_TERRITORY_CODE_VE          AllTerritoryCode = 243
	AllTerritoryCode_ALL_TERRITORY_CODE_VG          AllTerritoryCode = 244
	AllTerritoryCode_ALL_TERRITORY_CODE_VI          AllTerritoryCode = 245
	AllTerritoryCode_ALL_TERRITORY_CODE_VN          AllTerritoryCode = 246
	AllTerritoryCode_ALL_TERRITORY_CODE_VU          AllTerritoryCode = 247
	AllTerritoryCode_ALL_TERRITORY_CODE_WF          AllTerritoryCode = 248
	AllTerritoryCode_ALL_TERRITORY_CODE_WS          AllTerritoryCode = 249
	AllTerritoryCode_ALL_TERRITORY_CODE_YE          AllTerritoryCode = 250
	AllTerritoryCode_ALL_TERRITORY_CODE_YT          AllTerritoryCode = 251
	AllTerritoryCode_ALL_TERRITORY_CODE_ZA          AllTerritoryCode = 252
	AllTerritoryCode_ALL_TERRITORY_CODE_ZM          AllTerritoryCode = 253
	AllTerritoryCode_ALL_TERRITORY_CODE_ZW          AllTerritoryCode = 254
	AllTerritoryCode_ALL_TERRITORY_CODE_E_4         AllTerritoryCode = 255
	AllTerritoryCode_ALL_TERRITORY_CODE_E_8         AllTerritoryCode = 256
	AllTerritoryCode_ALL_TERRITORY_CODE_E_12        AllTerritoryCode = 257
	AllTerritoryCode_ALL_TERRITORY_CODE_E_20        AllTerritoryCode = 258
	AllTerritoryCode_ALL_TERRITORY_CODE_E_24        AllTerritoryCode = 259
	AllTerritoryCode_ALL_TERRITORY_CODE_E_28        AllTerritoryCode = 260
	AllTerritoryCode_ALL_TERRITORY_CODE_E_31        AllTerritoryCode = 261
	AllTerritoryCode_ALL_TERRITORY_CODE_E_32        AllTerritoryCode = 262
	AllTerritoryCode_ALL_TERRITORY_CODE_E_36        AllTerritoryCode = 263
	AllTerritoryCode_ALL_TERRITORY_CODE_E_40        AllTerritoryCode = 264
	AllTerritoryCode_ALL_TERRITORY_CODE_E_44        AllTerritoryCode = 265
	AllTerritoryCode_ALL_TERRITORY_CODE_E_48        AllTerritoryCode = 266
	AllTerritoryCode_ALL_TERRITORY_CODE_E_50        AllTerritoryCode = 267
	AllTerritoryCode_ALL_TERRITORY_CODE_E_51        AllTerritoryCode = 268
	AllTerritoryCode_ALL_TERRITORY_CODE_E_52        AllTerritoryCode = 269
	AllTerritoryCode_ALL_TERRITORY_CODE_E_56        AllTerritoryCode = 270
	AllTerritoryCode_ALL_TERRITORY_CODE_E_64        AllTerritoryCode = 271
	AllTerritoryCode_ALL_TERRITORY_CODE_E_68        AllTerritoryCode = 272
	AllTerritoryCode_ALL_TERRITORY_CODE_E_70        AllTerritoryCode = 273
	AllTerritoryCode_ALL_TERRITORY_CODE_E_72        AllTerritoryCode = 274
	AllTerritoryCode_ALL_TERRITORY_CODE_E_76        AllTerritoryCode = 275
	AllTerritoryCode_ALL_TERRITORY_CODE_E_84        AllTerritoryCode = 276
	AllTerritoryCode_ALL_TERRITORY_CODE_E_90        AllTerritoryCode = 277
	AllTerritoryCode_ALL_TERRITORY_CODE_E_96        AllTerritoryCode = 278
	AllTerritoryCode_ALL_TERRITORY_CODE_E_100       AllTerritoryCode = 279
	AllTerritoryCode_ALL_TERRITORY_CODE_E_104       AllTerritoryCode = 280
	AllTerritoryCode_ALL_TERRITORY_CODE_E_108       AllTerritoryCode = 281
	AllTerritoryCode_ALL_TERRITORY_CODE_E_112       AllTerritoryCode = 282
	AllTerritoryCode_ALL_TERRITORY_CODE_E_116       AllTerritoryCode = 283
	AllTerritoryCode_ALL_TERRITORY_CODE_E_120       AllTerritoryCode = 284
	AllTerritoryCode_ALL_TERRITORY_CODE_E_124       AllTerritoryCode = 285
	AllTerritoryCode_ALL_TERRITORY_CODE_E_132       AllTerritoryCode = 286
	AllTerritoryCode_ALL_TERRITORY_CODE_E_140       AllTerritoryCode = 287
	AllTerritoryCode_ALL_TERRITORY_CODE_E_144       AllTerritoryCode = 288
	AllTerritoryCode_ALL_TERRITORY_CODE_E_148       AllTerritoryCode = 289
	AllTerritoryCode_ALL_TERRITORY_CODE_E_152       AllTerritoryCode = 290
	AllTerritoryCode_ALL_TERRITORY_CODE_E_156       AllTerritoryCode = 291
	AllTerritoryCode_ALL_TERRITORY_CODE_E_158       AllTerritoryCode = 292
	AllTerritoryCode_ALL_TERRITORY_CODE_E_170       AllTerritoryCode = 293
	AllTerritoryCode_ALL_TERRITORY_CODE_E_174       AllTerritoryCode = 294
	AllTerritoryCode_ALL_TERRITORY_CODE_E_178       AllTerritoryCode = 295
	AllTerritoryCode_ALL_TERRITORY_CODE_E_180       AllTerritoryCode = 296
	AllTerritoryCode_ALL_TERRITORY_CODE_E_188       AllTerritoryCode = 297
	AllTerritoryCode_ALL_TERRITORY_CODE_E_191       AllTerritoryCode = 298
	AllTerritoryCode_ALL_TERRITORY_CODE_E_192       AllTerritoryCode = 299
	AllTerritoryCode_ALL_TERRITORY_CODE_E_196       AllTerritoryCode = 300
	AllTerritoryCode_ALL_TERRITORY_CODE_E_200       AllTerritoryCode = 301
	AllTerritoryCode_ALL_TERRITORY_CODE_E_203       AllTerritoryCode = 302
	AllTerritoryCode_ALL_TERRITORY_CODE_E_204       AllTerritoryCode = 303
	AllTerritoryCode_ALL_TERRITORY_CODE_E_208       AllTerritoryCode = 304
	AllTerritoryCode_ALL_TERRITORY_CODE_E_212       AllTerritoryCode = 305
	AllTerritoryCode_ALL_TERRITORY_CODE_E_214       AllTerritoryCode = 306
	AllTerritoryCode_ALL_TERRITORY_CODE_E_218       AllTerritoryCode = 307
	AllTerritoryCode_ALL_TERRITORY_CODE_E_222       AllTerritoryCode = 308
	AllTerritoryCode_ALL_TERRITORY_CODE_E_226       AllTerritoryCode = 309
	AllTerritoryCode_ALL_TERRITORY_CODE_E_230       AllTerritoryCode = 310
	AllTerritoryCode_ALL_TERRITORY_CODE_E_231       AllTerritoryCode = 311
	AllTerritoryCode_ALL_TERRITORY_CODE_E_232       AllTerritoryCode = 312
	AllTerritoryCode_ALL_TERRITORY_CODE_E_233       AllTerritoryCode = 313
	AllTerritoryCode_ALL_TERRITORY_CODE_E_242       AllTerritoryCode = 314
	AllTerritoryCode_ALL_TERRITORY_CODE_E_246       AllTerritoryCode = 315
	AllTerritoryCode_ALL_TERRITORY_CODE_E_250       AllTerritoryCode = 316
	AllTerritoryCode_ALL_TERRITORY_CODE_E_258       AllTerritoryCode = 317
	AllTerritoryCode_ALL_TERRITORY_CODE_E_262       AllTerritoryCode = 318
	AllTerritoryCode_ALL_TERRITORY_CODE_E_266       AllTerritoryCode = 319
	AllTerritoryCode_ALL_TERRITORY_CODE_E_268       AllTerritoryCode = 320
	AllTerritoryCode_ALL_TERRITORY_CODE_E_270       AllTerritoryCode = 321
	AllTerritoryCode_ALL_TERRITORY_CODE_E_276       AllTerritoryCode = 322
	AllTerritoryCode_ALL_TERRITORY_CODE_E_278       AllTerritoryCode = 323
	AllTerritoryCode_ALL_TERRITORY_CODE_E_280       AllTerritoryCode = 324
	AllTerritoryCode_ALL_TERRITORY_CODE_E_288       AllTerritoryCode = 325
	AllTerritoryCode_ALL_TERRITORY_CODE_E_296       AllTerritoryCode = 326
	AllTerritoryCode_ALL_TERRITORY_CODE_E_300       AllTerritoryCode = 327
	AllTerritoryCode_ALL_TERRITORY_CODE_E_308       AllTerritoryCode = 328
	AllTerritoryCode_ALL_TERRITORY_CODE_E_320       AllTerritoryCode = 329
	AllTerritoryCode_ALL_TERRITORY_CODE_E_324       AllTerritoryCode = 330
	AllTerritoryCode_ALL_TERRITORY_CODE_E_328       AllTerritoryCode = 331
	AllTerritoryCode_ALL_TERRITORY_CODE_E_332       AllTerritoryCode = 332
	AllTerritoryCode_ALL_TERRITORY_CODE_E_336       AllTerritoryCode = 333
	AllTerritoryCode_ALL_TERRITORY_CODE_E_340       AllTerritoryCode = 334
	AllTerritoryCode_ALL_TERRITORY_CODE_E_344       AllTerritoryCode = 335
	AllTerritoryCode_ALL_TERRITORY_CODE_E_348       AllTerritoryCode = 336
	AllTerritoryCode_ALL_TERRITORY_CODE_E_352       AllTerritoryCode = 337
	AllTerritoryCode_ALL_TERRITORY_CODE_E_356       AllTerritoryCode = 338
	AllTerritoryCode_ALL_TERRITORY_CODE_E_360       AllTerritoryCode = 339
	AllTerritoryCode_ALL_TERRITORY_CODE_E_364       AllTerritoryCode = 340
	AllTerritoryCode_ALL_TERRITORY_CODE_E_368       AllTerritoryCode = 341
	AllTerritoryCode_ALL_TERRITORY_CODE_E_372       AllTerritoryCode = 342
	AllTerritoryCode_ALL_TERRITORY_CODE_E_376       AllTerritoryCode = 343
	AllTerritoryCode_ALL_TERRITORY_CODE_E_380       AllTerritoryCode = 344
	AllTerritoryCode_ALL_TERRITORY_CODE_E_384       AllTerritoryCode = 345
	AllTerritoryCode_ALL_TERRITORY_CODE_E_388       AllTerritoryCode = 346
	AllTerritoryCode_ALL_TERRITORY_CODE_E_392       AllTerritoryCode = 347
	AllTerritoryCode_ALL_TERRITORY_CODE_E_398       AllTerritoryCode = 348
	AllTerritoryCode_ALL_TERRITORY_CODE_E_400       AllTerritoryCode = 349
	AllTerritoryCode_ALL_TERRITORY_CODE_E_404       AllTerritoryCode = 350
	AllTerritoryCode_ALL_TERRITORY_CODE_E_408       AllTerritoryCode = 351
	AllTerritoryCode_ALL_TERRITORY_CODE_E_410       AllTerritoryCode = 352
	AllTerritoryCode_ALL_TERRITORY_CODE_E_414       AllTerritoryCode = 353
	AllTerritoryCode_ALL_TERRITORY_CODE_E_417       AllTerritoryCode = 354
	AllTerritoryCode_ALL_TERRITORY_CODE_E_418       AllTerritoryCode = 355
	AllTerritoryCode_ALL_TERRITORY_CODE_E_422       AllTerritoryCode = 356
	AllTerritoryCode_ALL_TERRITORY_CODE_E_426       AllTerritoryCode = 357
	AllTerritoryCode_ALL_TERRITORY_CODE_E_428       AllTerritoryCode = 358
	AllTerritoryCode_ALL_TERRITORY_CODE_E_430       AllTerritoryCode = 359
	AllTerritoryCode_ALL_TERRITORY_CODE_E_434       AllTerritoryCode = 360
	AllTerritoryCode_ALL_TERRITORY_CODE_E_438       AllTerritoryCode = 361
	AllTerritoryCode_ALL_TERRITORY_CODE_E_440       AllTerritoryCode = 362
	AllTerritoryCode_ALL_TERRITORY_CODE_E_442       AllTerritoryCode = 363
	AllTerritoryCode_ALL_TERRITORY_CODE_E_446       AllTerritoryCode = 364
	AllTerritoryCode_ALL_TERRITORY_CODE_E_450       AllTerritoryCode = 365
	AllTerritoryCode_ALL_TERRITORY_CODE_E_454       AllTerritoryCode = 366
	AllTerritoryCode_ALL_TERRITORY_CODE_E_458       AllTerritoryCode = 367
	AllTerritoryCode_ALL_TERRITORY_CODE_E_462       AllTerritoryCode = 368
	AllTerritoryCode_ALL_TERRITORY_CODE_E_466       AllTerritoryCode = 369
	AllTerritoryCode_ALL_TERRITORY_CODE_E_470       AllTerritoryCode = 370
	AllTerritoryCode_ALL_TERRITORY_CODE_E_478       AllTerritoryCode = 371
	AllTerritoryCode_ALL_TERRITORY_CODE_E_480       AllTerritoryCode = 372
	AllTerritoryCode_ALL_TERRITORY_CODE_E_484       AllTerritoryCode = 373
	AllTerritoryCode_ALL_TERRITORY_CODE_E_492       AllTerritoryCode = 374
	AllTerritoryCode_ALL_TERRITORY_CODE_E_496       AllTerritoryCode = 375
	AllTerritoryCode_ALL_TERRITORY_CODE_E_498       AllTerritoryCode = 376
	AllTerritoryCode_ALL_TERRITORY_CODE_E_499       AllTerritoryCode = 377
	AllTerritoryCode_ALL_TERRITORY_CODE_E_504       AllTerritoryCode = 378
	AllTerritoryCode_ALL_TERRITORY_CODE_E_508       AllTerritoryCode = 379
	AllTerritoryCode_ALL_TERRITORY_CODE_E_512       AllTerritoryCode = 380
	AllTerritoryCode_ALL_TERRITORY_CODE_E_516       AllTerritoryCode = 381
	AllTerritoryCode_ALL_TERRITORY_CODE_E_520       AllTerritoryCode = 382
	AllTerritoryCode_ALL_TERRITORY_CODE_E_524       AllTerritoryCode = 383
	AllTerritoryCode_ALL_TERRITORY_CODE_E_528       AllTerritoryCode = 384
	AllTerritoryCode_ALL_TERRITORY_CODE_E_540       AllTerritoryCode = 385
	AllTerritoryCode_ALL_TERRITORY_CODE_E_548       AllTerritoryCode = 386
	AllTerritoryCode_ALL_TERRITORY_CODE_E_554       AllTerritoryCode = 387
	AllTerritoryCode_ALL_TERRITORY_CODE_E_558       AllTerritoryCode = 388
	AllTerritoryCode_ALL_TERRITORY_CODE_E_562       AllTerritoryCode = 389
	AllTerritoryCode_ALL_TERRITORY_CODE_E_566       AllTerritoryCode = 390
	AllTerritoryCode_ALL_TERRITORY_CODE_E_578       AllTerritoryCode = 391
	AllTerritoryCode_ALL_TERRITORY_CODE_E_583       AllTerritoryCode = 392
	AllTerritoryCode_ALL_TERRITORY_CODE_E_584       AllTerritoryCode = 393
	AllTerritoryCode_ALL_TERRITORY_CODE_E_585       AllTerritoryCode = 394
	AllTerritoryCode_ALL_TERRITORY_CODE_E_586       AllTerritoryCode = 395
	AllTerritoryCode_ALL_TERRITORY_CODE_E_591       AllTerritoryCode = 396
	AllTerritoryCode_ALL_TERRITORY_CODE_E_598       AllTerritoryCode = 397
	AllTerritoryCode_ALL_TERRITORY_CODE_E_600       AllTerritoryCode = 398
	AllTerritoryCode_ALL_TERRITORY_CODE_E_604       AllTerritoryCode = 399
	AllTerritoryCode_ALL_TERRITORY_CODE_E_608       AllTerritoryCode = 400
	AllTerritoryCode_ALL_TERRITORY_CODE_E_616       AllTerritoryCode = 401
	AllTerritoryCode_ALL_TERRITORY_CODE_E_620       AllTerritoryCode = 402
	AllTerritoryCode_ALL_TERRITORY_CODE_E_624       AllTerritoryCode = 403
	AllTerritoryCode_ALL_TERRITORY_CODE_E_626       AllTerritoryCode = 404
	AllTerritoryCode_ALL_TERRITORY_CODE_E_630       AllTerritoryCode = 405
	AllTerritoryCode_ALL_TERRITORY_CODE_E_634       AllTerritoryCode = 406
	AllTerritoryCode_ALL_TERRITORY_CODE_E_642       AllTerritoryCode = 407
	AllTerritoryCode_ALL_TERRITORY_CODE_E_643       AllTerritoryCode = 408
	AllTerritoryCode_ALL_TERRITORY_CODE_E_646       AllTerritoryCode = 409
	AllTerritoryCode_ALL_TERRITORY_CODE_E_659       AllTerritoryCode = 410
	AllTerritoryCode_ALL_TERRITORY_CODE_E_662       AllTerritoryCode = 411
	AllTerritoryCode_ALL_TERRITORY_CODE_E_670       AllTerritoryCode = 412
	AllTerritoryCode_ALL_TERRITORY_CODE_E_674       AllTerritoryCode = 413
	AllTerritoryCode_ALL_TERRITORY_CODE_E_678       AllTerritoryCode = 414
	AllTerritoryCode_ALL_TERRITORY_CODE_E_682       AllTerritoryCode = 415
	AllTerritoryCode_ALL_TERRITORY_CODE_E_686       AllTerritoryCode = 416
	AllTerritoryCode_ALL_TERRITORY_CODE_E_688       AllTerritoryCode = 417
	AllTerritoryCode_ALL_TERRITORY_CODE_E_690       AllTerritoryCode = 418
	AllTerritoryCode_ALL_TERRITORY_CODE_E_694       AllTerritoryCode = 419
	AllTerritoryCode_ALL_TERRITORY_CODE_E_702       AllTerritoryCode = 420
	AllTerritoryCode_ALL_TERRITORY_CODE_E_703       AllTerritoryCode = 421
	AllTerritoryCode_ALL_TERRITORY_CODE_E_704       AllTerritoryCode = 422
	AllTerritoryCode_ALL_TERRITORY_CODE_E_705       AllTerritoryCode = 423
	AllTerritoryCode_ALL_TERRITORY_CODE_E_706       AllTerritoryCode = 424
	AllTerritoryCode_ALL_TERRITORY_CODE_E_710       AllTerritoryCode = 425
	AllTerritoryCode_ALL_TERRITORY_CODE_E_716       AllTerritoryCode = 426
	AllTerritoryCode_ALL_TERRITORY_CODE_E_720       AllTerritoryCode = 427
	AllTerritoryCode_ALL_TERRITORY_CODE_E_724       AllTerritoryCode = 428
	AllTerritoryCode_ALL_TERRITORY_CODE_E_728       AllTerritoryCode = 429
	AllTerritoryCode_ALL_TERRITORY_CODE_E_729       AllTerritoryCode = 430
	AllTerritoryCode_ALL_TERRITORY_CODE_E_732       AllTerritoryCode = 431
	AllTerritoryCode_ALL_TERRITORY_CODE_E_736       AllTerritoryCode = 432
	AllTerritoryCode_ALL_TERRITORY_CODE_E_740       AllTerritoryCode = 433
	AllTerritoryCode_ALL_TERRITORY_CODE_E_748       AllTerritoryCode = 434
	AllTerritoryCode_ALL_TERRITORY_CODE_E_752       AllTerritoryCode = 435
	AllTerritoryCode_ALL_TERRITORY_CODE_E_756       AllTerritoryCode = 436
	AllTerritoryCode_ALL_TERRITORY_CODE_E_760       AllTerritoryCode = 437
	AllTerritoryCode_ALL_TERRITORY_CODE_E_762       AllTerritoryCode = 438
	AllTerritoryCode_ALL_TERRITORY_CODE_E_764       AllTerritoryCode = 439
	AllTerritoryCode_ALL_TERRITORY_CODE_E_768       AllTerritoryCode = 440
	AllTerritoryCode_ALL_TERRITORY_CODE_E_776       AllTerritoryCode = 441
	AllTerritoryCode_ALL_TERRITORY_CODE_E_780       AllTerritoryCode = 442
	AllTerritoryCode_ALL_TERRITORY_CODE_E_784       AllTerritoryCode = 443
	AllTerritoryCode_ALL_TERRITORY_CODE_E_788       AllTerritoryCode = 444
	AllTerritoryCode_ALL_TERRITORY_CODE_E_792       AllTerritoryCode = 445
	AllTerritoryCode_ALL_TERRITORY_CODE_E_795       AllTerritoryCode = 446
	AllTerritoryCode_ALL_TERRITORY_CODE_E_798       AllTerritoryCode = 447
	AllTerritoryCode_ALL_TERRITORY_CODE_E_800       AllTerritoryCode = 448
	AllTerritoryCode_ALL_TERRITORY_CODE_E_804       AllTerritoryCode = 449
	AllTerritoryCode_ALL_TERRITORY_CODE_E_807       AllTerritoryCode = 450
	AllTerritoryCode_ALL_TERRITORY_CODE_E_810       AllTerritoryCode = 451
	AllTerritoryCode_ALL_TERRITORY_CODE_E_818       AllTerritoryCode = 452
	AllTerritoryCode_ALL_TERRITORY_CODE_E_826       AllTerritoryCode = 453
	AllTerritoryCode_ALL_TERRITORY_CODE_E_834       AllTerritoryCode = 454
	AllTerritoryCode_ALL_TERRITORY_CODE_E_840       AllTerritoryCode = 455
	AllTerritoryCode_ALL_TERRITORY_CODE_E_854       AllTerritoryCode = 456
	AllTerritoryCode_ALL_TERRITORY_CODE_E_858       AllTerritoryCode = 457
	AllTerritoryCode_ALL_TERRITORY_CODE_E_860       AllTerritoryCode = 458
	AllTerritoryCode_ALL_TERRITORY_CODE_E_862       AllTerritoryCode = 459
	AllTerritoryCode_ALL_TERRITORY_CODE_E_882       AllTerritoryCode = 460
	AllTerritoryCode_ALL_TERRITORY_CODE_E_886       AllTerritoryCode = 461
	AllTerritoryCode_ALL_TERRITORY_CODE_E_887       AllTerritoryCode = 462
	AllTerritoryCode_ALL_TERRITORY_CODE_E_890       AllTerritoryCode = 463
	AllTerritoryCode_ALL_TERRITORY_CODE_E_891       AllTerritoryCode = 464
	AllTerritoryCode_ALL_TERRITORY_CODE_E_894       AllTerritoryCode = 465
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2100      AllTerritoryCode = 466
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2101      AllTerritoryCode = 467
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2102      AllTerritoryCode = 468
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2103      AllTerritoryCode = 469
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2104      AllTerritoryCode = 470
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2105      AllTerritoryCode = 471
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2106      AllTerritoryCode = 472
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2107      AllTerritoryCode = 473
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2108      AllTerritoryCode = 474
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2109      AllTerritoryCode = 475
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2110      AllTerritoryCode = 476
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2111      AllTerritoryCode = 477
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2112      AllTerritoryCode = 478
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2113      AllTerritoryCode = 479
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2114      AllTerritoryCode = 480
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2115      AllTerritoryCode = 481
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2116      AllTerritoryCode = 482
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2117      AllTerritoryCode = 483
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2118      AllTerritoryCode = 484
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2119      AllTerritoryCode = 485
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2120      AllTerritoryCode = 486
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2121      AllTerritoryCode = 487
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2122      AllTerritoryCode = 488
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2123      AllTerritoryCode = 489
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2124      AllTerritoryCode = 490
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2125      AllTerritoryCode = 491
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2126      AllTerritoryCode = 492
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2127      AllTerritoryCode = 493
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2128      AllTerritoryCode = 494
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2129      AllTerritoryCode = 495
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2130      AllTerritoryCode = 496
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2131      AllTerritoryCode = 497
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2132      AllTerritoryCode = 498
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2133      AllTerritoryCode = 499
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2134      AllTerritoryCode = 500
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2136      AllTerritoryCode = 501
	AllTerritoryCode_ALL_TERRITORY_CODE_XK          AllTerritoryCode = 502
	AllTerritoryCode_ALL_TERRITORY_CODE_WORLDWIDE   AllTerritoryCode = 503
	AllTerritoryCode_ALL_TERRITORY_CODE_AIDJ        AllTerritoryCode = 504
	AllTerritoryCode_ALL_TERRITORY_CODE_ANHH        AllTerritoryCode = 505
	AllTerritoryCode_ALL_TERRITORY_CODE_BQAQ        AllTerritoryCode = 506
	AllTerritoryCode_ALL_TERRITORY_CODE_BUMM        AllTerritoryCode = 507
	AllTerritoryCode_ALL_TERRITORY_CODE_BYAA        AllTerritoryCode = 508
	AllTerritoryCode_ALL_TERRITORY_CODE_CSHH        AllTerritoryCode = 509
	AllTerritoryCode_ALL_TERRITORY_CODE_CSXX        AllTerritoryCode = 510
	AllTerritoryCode_ALL_TERRITORY_CODE_CTKI        AllTerritoryCode = 511
	AllTerritoryCode_ALL_TERRITORY_CODE_DDDE        AllTerritoryCode = 512
	AllTerritoryCode_ALL_TERRITORY_CODE_DYBJ        AllTerritoryCode = 513
	AllTerritoryCode_ALL_TERRITORY_CODE_FQHH        AllTerritoryCode = 514
	AllTerritoryCode_ALL_TERRITORY_CODE_FXFR        AllTerritoryCode = 515
	AllTerritoryCode_ALL_TERRITORY_CODE_GEHH        AllTerritoryCode = 516
	AllTerritoryCode_ALL_TERRITORY_CODE_HVBF        AllTerritoryCode = 517
	AllTerritoryCode_ALL_TERRITORY_CODE_JTUM        AllTerritoryCode = 518
	AllTerritoryCode_ALL_TERRITORY_CODE_MIUM        AllTerritoryCode = 519
	AllTerritoryCode_ALL_TERRITORY_CODE_NHVU        AllTerritoryCode = 520
	AllTerritoryCode_ALL_TERRITORY_CODE_NQAQ        AllTerritoryCode = 521
	AllTerritoryCode_ALL_TERRITORY_CODE_NTHH        AllTerritoryCode = 522
	AllTerritoryCode_ALL_TERRITORY_CODE_PCHH        AllTerritoryCode = 523
	AllTerritoryCode_ALL_TERRITORY_CODE_PUUM        AllTerritoryCode = 524
	AllTerritoryCode_ALL_TERRITORY_CODE_PZPA        AllTerritoryCode = 525
	AllTerritoryCode_ALL_TERRITORY_CODE_RHZW        AllTerritoryCode = 526
	AllTerritoryCode_ALL_TERRITORY_CODE_SKIN        AllTerritoryCode = 527
	AllTerritoryCode_ALL_TERRITORY_CODE_SUHH        AllTerritoryCode = 528
	AllTerritoryCode_ALL_TERRITORY_CODE_TPTL        AllTerritoryCode = 529
	AllTerritoryCode_ALL_TERRITORY_CODE_VDVN        AllTerritoryCode = 530
	AllTerritoryCode_ALL_TERRITORY_CODE_WKUM        AllTerritoryCode = 531
	AllTerritoryCode_ALL_TERRITORY_CODE_YDYE        AllTerritoryCode = 532
	AllTerritoryCode_ALL_TERRITORY_CODE_YUCS        AllTerritoryCode = 533
	AllTerritoryCode_ALL_TERRITORY_CODE_ZRCD        AllTerritoryCode = 534
)

// Enum value maps for AllTerritoryCode.
var (
	AllTerritoryCode_name = map[int32]string{
		0:   "ALL_TERRITORY_CODE_UNSPECIFIED",
		1:   "ALL_TERRITORY_CODE_AD",
		2:   "ALL_TERRITORY_CODE_AE",
		3:   "ALL_TERRITORY_CODE_AF",
		4:   "ALL_TERRITORY_CODE_AG",
		5:   "ALL_TERRITORY_CODE_AI",
		6:   "ALL_TERRITORY_CODE_AL",
		7:   "ALL_TERRITORY_CODE_AM",
		8:   "ALL_TERRITORY_CODE_AN",
		9:   "ALL_TERRITORY_CODE_AO",
		10:  "ALL_TERRITORY_CODE_AQ",
		11:  "ALL_TERRITORY_CODE_AR",
		12:  "ALL_TERRITORY_CODE_AS",
		13:  "ALL_TERRITORY_CODE_AT",
		14:  "ALL_TERRITORY_CODE_AU",
		15:  "ALL_TERRITORY_CODE_AW",
		16:  "ALL_TERRITORY_CODE_AX",
		17:  "ALL_TERRITORY_CODE_AZ",
		18:  "ALL_TERRITORY_CODE_BA",
		19:  "ALL_TERRITORY_CODE_BB",
		20:  "ALL_TERRITORY_CODE_BD",
		21:  "ALL_TERRITORY_CODE_BE",
		22:  "ALL_TERRITORY_CODE_BF",
		23:  "ALL_TERRITORY_CODE_BG",
		24:  "ALL_TERRITORY_CODE_BH",
		25:  "ALL_TERRITORY_CODE_BI",
		26:  "ALL_TERRITORY_CODE_BJ",
		27:  "ALL_TERRITORY_CODE_BL",
		28:  "ALL_TERRITORY_CODE_BM",
		29:  "ALL_TERRITORY_CODE_BN",
		30:  "ALL_TERRITORY_CODE_BO",
		31:  "ALL_TERRITORY_CODE_BQ",
		32:  "ALL_TERRITORY_CODE_BR",
		33:  "ALL_TERRITORY_CODE_BS",
		34:  "ALL_TERRITORY_CODE_BT",
		35:  "ALL_TERRITORY_CODE_BV",
		36:  "ALL_TERRITORY_CODE_BW",
		37:  "ALL_TERRITORY_CODE_BY",
		38:  "ALL_TERRITORY_CODE_BZ",
		39:  "ALL_TERRITORY_CODE_CA",
		40:  "ALL_TERRITORY_CODE_CC",
		41:  "ALL_TERRITORY_CODE_CD",
		42:  "ALL_TERRITORY_CODE_CF",
		43:  "ALL_TERRITORY_CODE_CG",
		44:  "ALL_TERRITORY_CODE_CH",
		45:  "ALL_TERRITORY_CODE_CI",
		46:  "ALL_TERRITORY_CODE_CK",
		47:  "ALL_TERRITORY_CODE_CL",
		48:  "ALL_TERRITORY_CODE_CM",
		49:  "ALL_TERRITORY_CODE_CN",
		50:  "ALL_TERRITORY_CODE_CO",
		51:  "ALL_TERRITORY_CODE_CR",
		52:  "ALL_TERRITORY_CODE_CS",
		53:  "ALL_TERRITORY_CODE_CU",
		54:  "ALL_TERRITORY_CODE_CV",
		55:  "ALL_TERRITORY_CODE_CW",
		56:  "ALL_TERRITORY_CODE_CX",
		57:  "ALL_TERRITORY_CODE_CY",
		58:  "ALL_TERRITORY_CODE_CZ",
		59:  "ALL_TERRITORY_CODE_DE",
		60:  "ALL_TERRITORY_CODE_DJ",
		61:  "ALL_TERRITORY_CODE_DK",
		62:  "ALL_TERRITORY_CODE_DM",
		63:  "ALL_TERRITORY_CODE_DO",
		64:  "ALL_TERRITORY_CODE_DZ",
		65:  "ALL_TERRITORY_CODE_EC",
		66:  "ALL_TERRITORY_CODE_EE",
		67:  "ALL_TERRITORY_CODE_EG",
		68:  "ALL_TERRITORY_CODE_EH",
		69:  "ALL_TERRITORY_CODE_ER",
		70:  "ALL_TERRITORY_CODE_ES",
		71:  "ALL_TERRITORY_CODE_ES_CE",
		72:  "ALL_TERRITORY_CODE_ES_CN",
		73:  "ALL_TERRITORY_CODE_ES_ML",
		74:  "ALL_TERRITORY_CODE_ET",
		75:  "ALL_TERRITORY_CODE_FI",
		76:  "ALL_TERRITORY_CODE_FJ",
		77:  "ALL_TERRITORY_CODE_FK",
		78:  "ALL_TERRITORY_CODE_FM",
		79:  "ALL_TERRITORY_CODE_FO",
		80:  "ALL_TERRITORY_CODE_FR",
		81:  "ALL_TERRITORY_CODE_GA",
		82:  "ALL_TERRITORY_CODE_GB",
		83:  "ALL_TERRITORY_CODE_GD",
		84:  "ALL_TERRITORY_CODE_GE",
		85:  "ALL_TERRITORY_CODE_GF",
		86:  "ALL_TERRITORY_CODE_GG",
		87:  "ALL_TERRITORY_CODE_GH",
		88:  "ALL_TERRITORY_CODE_GI",
		89:  "ALL_TERRITORY_CODE_GL",
		90:  "ALL_TERRITORY_CODE_GM",
		91:  "ALL_TERRITORY_CODE_GN",
		92:  "ALL_TERRITORY_CODE_GP",
		93:  "ALL_TERRITORY_CODE_GQ",
		94:  "ALL_TERRITORY_CODE_GR",
		95:  "ALL_TERRITORY_CODE_GS",
		96:  "ALL_TERRITORY_CODE_GT",
		97:  "ALL_TERRITORY_CODE_GU",
		98:  "ALL_TERRITORY_CODE_GW",
		99:  "ALL_TERRITORY_CODE_GY",
		100: "ALL_TERRITORY_CODE_HK",
		101: "ALL_TERRITORY_CODE_HM",
		102: "ALL_TERRITORY_CODE_HN",
		103: "ALL_TERRITORY_CODE_HR",
		104: "ALL_TERRITORY_CODE_HT",
		105: "ALL_TERRITORY_CODE_HU",
		106: "ALL_TERRITORY_CODE_ID",
		107: "ALL_TERRITORY_CODE_IE",
		108: "ALL_TERRITORY_CODE_IL",
		109: "ALL_TERRITORY_CODE_IM",
		110: "ALL_TERRITORY_CODE_IN",
		111: "ALL_TERRITORY_CODE_IO",
		112: "ALL_TERRITORY_CODE_IQ",
		113: "ALL_TERRITORY_CODE_IR",
		114: "ALL_TERRITORY_CODE_IS",
		115: "ALL_TERRITORY_CODE_IT",
		116: "ALL_TERRITORY_CODE_JE",
		117: "ALL_TERRITORY_CODE_JM",
		118: "ALL_TERRITORY_CODE_JO",
		119: "ALL_TERRITORY_CODE_JP",
		120: "ALL_TERRITORY_CODE_KE",
		121: "ALL_TERRITORY_CODE_KG",
		122: "ALL_TERRITORY_CODE_KH",
		123: "ALL_TERRITORY_CODE_KI",
		124: "ALL_TERRITORY_CODE_KM",
		125: "ALL_TERRITORY_CODE_KN",
		126: "ALL_TERRITORY_CODE_KP",
		127: "ALL_TERRITORY_CODE_KR",
		128: "ALL_TERRITORY_CODE_KW",
		129: "ALL_TERRITORY_CODE_KY",
		130: "ALL_TERRITORY_CODE_KZ",
		131: "ALL_TERRITORY_CODE_LA",
		132: "ALL_TERRITORY_CODE_LB",
		133: "ALL_TERRITORY_CODE_LC",
		134: "ALL_TERRITORY_CODE_LI",
		135: "ALL_TERRITORY_CODE_LK",
		136: "ALL_TERRITORY_CODE_LR",
		137: "ALL_TERRITORY_CODE_LS",
		138: "ALL_TERRITORY_CODE_LT",
		139: "ALL_TERRITORY_CODE_LU",
		140: "ALL_TERRITORY_CODE_LV",
		141: "ALL_TERRITORY_CODE_LY",
		142: "ALL_TERRITORY_CODE_MA",
		143: "ALL_TERRITORY_CODE_MC",
		144: "ALL_TERRITORY_CODE_MD",
		145: "ALL_TERRITORY_CODE_ME",
		146: "ALL_TERRITORY_CODE_MF",
		147: "ALL_TERRITORY_CODE_MG",
		148: "ALL_TERRITORY_CODE_MH",
		149: "ALL_TERRITORY_CODE_MK",
		150: "ALL_TERRITORY_CODE_ML",
		151: "ALL_TERRITORY_CODE_MM",
		152: "ALL_TERRITORY_CODE_MN",
		153: "ALL_TERRITORY_CODE_MO",
		154: "ALL_TERRITORY_CODE_MP",
		155: "ALL_TERRITORY_CODE_MQ",
		156: "ALL_TERRITORY_CODE_MR",
		157: "ALL_TERRITORY_CODE_MS",
		158: "ALL_TERRITORY_CODE_MT",
		159: "ALL_TERRITORY_CODE_MU",
		160: "ALL_TERRITORY_CODE_MV",
		161: "ALL_TERRITORY_CODE_MW",
		162: "ALL_TERRITORY_CODE_MX",
		163: "ALL_TERRITORY_CODE_MY",
		164: "ALL_TERRITORY_CODE_MZ",
		165: "ALL_TERRITORY_CODE_NA",
		166: "ALL_TERRITORY_CODE_NC",
		167: "ALL_TERRITORY_CODE_NE",
		168: "ALL_TERRITORY_CODE_NF",
		169: "ALL_TERRITORY_CODE_NG",
		170: "ALL_TERRITORY_CODE_NI",
		171: "ALL_TERRITORY_CODE_NL",
		172: "ALL_TERRITORY_CODE_NO",
		173: "ALL_TERRITORY_CODE_NP",
		174: "ALL_TERRITORY_CODE_NR",
		175: "ALL_TERRITORY_CODE_NU",
		176: "ALL_TERRITORY_CODE_NZ",
		177: "ALL_TERRITORY_CODE_OM",
		178: "ALL_TERRITORY_CODE_PA",
		179: "ALL_TERRITORY_CODE_PE",
		180: "ALL_TERRITORY_CODE_PF",
		181: "ALL_TERRITORY_CODE_PG",
		182: "ALL_TERRITORY_CODE_PH",
		183: "ALL_TERRITORY_CODE_PK",
		184: "ALL_TERRITORY_CODE_PL",
		185: "ALL_TERRITORY_CODE_PM",
		186: "ALL_TERRITORY_CODE_PN",
		187: "ALL_TERRITORY_CODE_PR",
		188: "ALL_TERRITORY_CODE_PS",
		189: "ALL_TERRITORY_CODE_PT",
		190: "ALL_TERRITORY_CODE_PW",
		191: "ALL_TERRITORY_CODE_PY",
		192: "ALL_TERRITORY_CODE_QA",
		193: "ALL_TERRITORY_CODE_RE",
		194: "ALL_TERRITORY_CODE_RO",
		195: "ALL_TERRITORY_CODE_RS",
		196: "ALL_TERRITORY_CODE_RU",
		197: "ALL_TERRITORY_CODE_RW",
		198: "ALL_TERRITORY_CODE_SA",
		199: "ALL_TERRITORY_CODE_SB",
		200: "ALL_TERRITORY_CODE_SC",
		201: "ALL_TERRITORY_CODE_SD",
		202: "ALL_TERRITORY_CODE_SE",
		203: "ALL_TERRITORY_CODE_SG",
		204: "ALL_TERRITORY_CODE_SH",
		205: "ALL_TERRITORY_CODE_SI",
		206: "ALL_TERRITORY_CODE_SJ",
		207: "ALL_TERRITORY_CODE_SK",
		208: "ALL_TERRITORY_CODE_SL",
		209: "ALL_TERRITORY_CODE_SM",
		210: "ALL_TERRITORY_CODE_SN",
		211: "ALL_TERRITORY_CODE_SO",
		212: "ALL_TERRITORY_CODE_SR",
		213: "ALL_TERRITORY_CODE_SS",
		214: "ALL_TERRITORY_CODE_ST",
		215: "ALL_TERRITORY_CODE_SV",
		216: "ALL_TERRITORY_CODE_SX",
		217: "ALL_TERRITORY_CODE_SY",
		218: "ALL_TERRITORY_CODE_SZ",
		219: "ALL_TERRITORY_CODE_TC",
		220: "ALL_TERRITORY_CODE_TD",
		221: "ALL_TERRITORY_CODE_TF",
		222: "ALL_TERRITORY_CODE_TG",
		223: "ALL_TERRITORY_CODE_TH",
		224: "ALL_TERRITORY_CODE_TJ",
		225: "ALL_TERRITORY_CODE_TK",
		226: "ALL_TERRITORY_CODE_TL",
		227: "ALL_TERRITORY_CODE_TM",
		228: "ALL_TERRITORY_CODE_TN",
		229: "ALL_TERRITORY_CODE_TO",
		230: "ALL_TERRITORY_CODE_TR",
		231: "ALL_TERRITORY_CODE_TT",
		232: "ALL_TERRITORY_CODE_TV",
		233: "ALL_TERRITORY_CODE_TW",
		234: "ALL_TERRITORY_CODE_TZ",
		235: "ALL_TERRITORY_CODE_UA",
		236: "ALL_TERRITORY_CODE_UG",
		237: "ALL_TERRITORY_CODE_UM",
		238: "ALL_TERRITORY_CODE_US",
		239: "ALL_TERRITORY_CODE_UY",
		240: "ALL_TERRITORY_CODE_UZ",
		241: "ALL_TERRITORY_CODE_VA",
		242: "ALL_TERRITORY_CODE_VC",
		243: "ALL_TERRITORY_CODE_VE",
		244: "ALL_TERRITORY_CODE_VG",
		245: "ALL_TERRITORY_CODE_VI",
		246: "ALL_TERRITORY_CODE_VN",
		247: "ALL_TERRITORY_CODE_VU",
		248: "ALL_TERRITORY_CODE_WF",
		249: "ALL_TERRITORY_CODE_WS",
		250: "ALL_TERRITORY_CODE_YE",
		251: "ALL_TERRITORY_CODE_YT",
		252: "ALL_TERRITORY_CODE_ZA",
		253: "ALL_TERRITORY_CODE_ZM",
		254: "ALL_TERRITORY_CODE_ZW",
		255: "ALL_TERRITORY_CODE_E_4",
		256: "ALL_TERRITORY_CODE_E_8",
		257: "ALL_TERRITORY_CODE_E_12",
		258: "ALL_TERRITORY_CODE_E_20",
		259: "ALL_TERRITORY_CODE_E_24",
		260: "ALL_TERRITORY_CODE_E_28",
		261: "ALL_TERRITORY_CODE_E_31",
		262: "ALL_TERRITORY_CODE_E_32",
		263: "ALL_TERRITORY_CODE_E_36",
		264: "ALL_TERRITORY_CODE_E_40",
		265: "ALL_TERRITORY_CODE_E_44",
		266: "ALL_TERRITORY_CODE_E_48",
		267: "ALL_TERRITORY_CODE_E_50",
		268: "ALL_TERRITORY_CODE_E_51",
		269: "ALL_TERRITORY_CODE_E_52",
		270: "ALL_TERRITORY_CODE_E_56",
		271: "ALL_TERRITORY_CODE_E_64",
		272: "ALL_TERRITORY_CODE_E_68",
		273: "ALL_TERRITORY_CODE_E_70",
		274: "ALL_TERRITORY_CODE_E_72",
		275: "ALL_TERRITORY_CODE_E_76",
		276: "ALL_TERRITORY_CODE_E_84",
		277: "ALL_TERRITORY_CODE_E_90",
		278: "ALL_TERRITORY_CODE_E_96",
		279: "ALL_TERRITORY_CODE_E_100",
		280: "ALL_TERRITORY_CODE_E_104",
		281: "ALL_TERRITORY_CODE_E_108",
		282: "ALL_TERRITORY_CODE_E_112",
		283: "ALL_TERRITORY_CODE_E_116",
		284: "ALL_TERRITORY_CODE_E_120",
		285: "ALL_TERRITORY_CODE_E_124",
		286: "ALL_TERRITORY_CODE_E_132",
		287: "ALL_TERRITORY_CODE_E_140",
		288: "ALL_TERRITORY_CODE_E_144",
		289: "ALL_TERRITORY_CODE_E_148",
		290: "ALL_TERRITORY_CODE_E_152",
		291: "ALL_TERRITORY_CODE_E_156",
		292: "ALL_TERRITORY_CODE_E_158",
		293: "ALL_TERRITORY_CODE_E_170",
		294: "ALL_TERRITORY_CODE_E_174",
		295: "ALL_TERRITORY_CODE_E_178",
		296: "ALL_TERRITORY_CODE_E_180",
		297: "ALL_TERRITORY_CODE_E_188",
		298: "ALL_TERRITORY_CODE_E_191",
		299: "ALL_TERRITORY_CODE_E_192",
		300: "ALL_TERRITORY_CODE_E_196",
		301: "ALL_TERRITORY_CODE_E_200",
		302: "ALL_TERRITORY_CODE_E_203",
		303: "ALL_TERRITORY_CODE_E_204",
		304: "ALL_TERRITORY_CODE_E_208",
		305: "ALL_TERRITORY_CODE_E_212",
		306: "ALL_TERRITORY_CODE_E_214",
		307: "ALL_TERRITORY_CODE_E_218",
		308: "ALL_TERRITORY_CODE_E_222",
		309: "ALL_TERRITORY_CODE_E_226",
		310: "ALL_TERRITORY_CODE_E_230",
		311: "ALL_TERRITORY_CODE_E_231",
		312: "ALL_TERRITORY_CODE_E_232",
		313: "ALL_TERRITORY_CODE_E_233",
		314: "ALL_TERRITORY_CODE_E_242",
		315: "ALL_TERRITORY_CODE_E_246",
		316: "ALL_TERRITORY_CODE_E_250",
		317: "ALL_TERRITORY_CODE_E_258",
		318: "ALL_TERRITORY_CODE_E_262",
		319: "ALL_TERRITORY_CODE_E_266",
		320: "ALL_TERRITORY_CODE_E_268",
		321: "ALL_TERRITORY_CODE_E_270",
		322: "ALL_TERRITORY_CODE_E_276",
		323: "ALL_TERRITORY_CODE_E_278",
		324: "ALL_TERRITORY_CODE_E_280",
		325: "ALL_TERRITORY_CODE_E_288",
		326: "ALL_TERRITORY_CODE_E_296",
		327: "ALL_TERRITORY_CODE_E_300",
		328: "ALL_TERRITORY_CODE_E_308",
		329: "ALL_TERRITORY_CODE_E_320",
		330: "ALL_TERRITORY_CODE_E_324",
		331: "ALL_TERRITORY_CODE_E_328",
		332: "ALL_TERRITORY_CODE_E_332",
		333: "ALL_TERRITORY_CODE_E_336",
		334: "ALL_TERRITORY_CODE_E_340",
		335: "ALL_TERRITORY_CODE_E_344",
		336: "ALL_TERRITORY_CODE_E_348",
		337: "ALL_TERRITORY_CODE_E_352",
		338: "ALL_TERRITORY_CODE_E_356",
		339: "ALL_TERRITORY_CODE_E_360",
		340: "ALL_TERRITORY_CODE_E_364",
		341: "ALL_TERRITORY_CODE_E_368",
		342: "ALL_TERRITORY_CODE_E_372",
		343: "ALL_TERRITORY_CODE_E_376",
		344: "ALL_TERRITORY_CODE_E_380",
		345: "ALL_TERRITORY_CODE_E_384",
		346: "ALL_TERRITORY_CODE_E_388",
		347: "ALL_TERRITORY_CODE_E_392",
		348: "ALL_TERRITORY_CODE_E_398",
		349: "ALL_TERRITORY_CODE_E_400",
		350: "ALL_TERRITORY_CODE_E_404",
		351: "ALL_TERRITORY_CODE_E_408",
		352: "ALL_TERRITORY_CODE_E_410",
		353: "ALL_TERRITORY_CODE_E_414",
		354: "ALL_TERRITORY_CODE_E_417",
		355: "ALL_TERRITORY_CODE_E_418",
		356: "ALL_TERRITORY_CODE_E_422",
		357: "ALL_TERRITORY_CODE_E_426",
		358: "ALL_TERRITORY_CODE_E_428",
		359: "ALL_TERRITORY_CODE_E_430",
		360: "ALL_TERRITORY_CODE_E_434",
		361: "ALL_TERRITORY_CODE_E_438",
		362: "ALL_TERRITORY_CODE_E_440",
		363: "ALL_TERRITORY_CODE_E_442",
		364: "ALL_TERRITORY_CODE_E_446",
		365: "ALL_TERRITORY_CODE_E_450",
		366: "ALL_TERRITORY_CODE_E_454",
		367: "ALL_TERRITORY_CODE_E_458",
		368: "ALL_TERRITORY_CODE_E_462",
		369: "ALL_TERRITORY_CODE_E_466",
		370: "ALL_TERRITORY_CODE_E_470",
		371: "ALL_TERRITORY_CODE_E_478",
		372: "ALL_TERRITORY_CODE_E_480",
		373: "ALL_TERRITORY_CODE_E_484",
		374: "ALL_TERRITORY_CODE_E_492",
		375: "ALL_TERRITORY_CODE_E_496",
		376: "ALL_TERRITORY_CODE_E_498",
		377: "ALL_TERRITORY_CODE_E_499",
		378: "ALL_TERRITORY_CODE_E_504",
		379: "ALL_TERRITORY_CODE_E_508",
		380: "ALL_TERRITORY_CODE_E_512",
		381: "ALL_TERRITORY_CODE_E_516",
		382: "ALL_TERRITORY_CODE_E_520",
		383: "ALL_TERRITORY_CODE_E_524",
		384: "ALL_TERRITORY_CODE_E_528",
		385: "ALL_TERRITORY_CODE_E_540",
		386: "ALL_TERRITORY_CODE_E_548",
		387: "ALL_TERRITORY_CODE_E_554",
		388: "ALL_TERRITORY_CODE_E_558",
		389: "ALL_TERRITORY_CODE_E_562",
		390: "ALL_TERRITORY_CODE_E_566",
		391: "ALL_TERRITORY_CODE_E_578",
		392: "ALL_TERRITORY_CODE_E_583",
		393: "ALL_TERRITORY_CODE_E_584",
		394: "ALL_TERRITORY_CODE_E_585",
		395: "ALL_TERRITORY_CODE_E_586",
		396: "ALL_TERRITORY_CODE_E_591",
		397: "ALL_TERRITORY_CODE_E_598",
		398: "ALL_TERRITORY_CODE_E_600",
		399: "ALL_TERRITORY_CODE_E_604",
		400: "ALL_TERRITORY_CODE_E_608",
		401: "ALL_TERRITORY_CODE_E_616",
		402: "ALL_TERRITORY_CODE_E_620",
		403: "ALL_TERRITORY_CODE_E_624",
		404: "ALL_TERRITORY_CODE_E_626",
		405: "ALL_TERRITORY_CODE_E_630",
		406: "ALL_TERRITORY_CODE_E_634",
		407: "ALL_TERRITORY_CODE_E_642",
		408: "ALL_TERRITORY_CODE_E_643",
		409: "ALL_TERRITORY_CODE_E_646",
		410: "ALL_TERRITORY_CODE_E_659",
		411: "ALL_TERRITORY_CODE_E_662",
		412: "ALL_TERRITORY_CODE_E_670",
		413: "ALL_TERRITORY_CODE_E_674",
		414: "ALL_TERRITORY_CODE_E_678",
		415: "ALL_TERRITORY_CODE_E_682",
		416: "ALL_TERRITORY_CODE_E_686",
		417: "ALL_TERRITORY_CODE_E_688",
		418: "ALL_TERRITORY_CODE_E_690",
		419: "ALL_TERRITORY_CODE_E_694",
		420: "ALL_TERRITORY_CODE_E_702",
		421: "ALL_TERRITORY_CODE_E_703",
		422: "ALL_TERRITORY_CODE_E_704",
		423: "ALL_TERRITORY_CODE_E_705",
		424: "ALL_TERRITORY_CODE_E_706",
		425: "ALL_TERRITORY_CODE_E_710",
		426: "ALL_TERRITORY_CODE_E_716",
		427: "ALL_TERRITORY_CODE_E_720",
		428: "ALL_TERRITORY_CODE_E_724",
		429: "ALL_TERRITORY_CODE_E_728",
		430: "ALL_TERRITORY_CODE_E_729",
		431: "ALL_TERRITORY_CODE_E_732",
		432: "ALL_TERRITORY_CODE_E_736",
		433: "ALL_TERRITORY_CODE_E_740",
		434: "ALL_TERRITORY_CODE_E_748",
		435: "ALL_TERRITORY_CODE_E_752",
		436: "ALL_TERRITORY_CODE_E_756",
		437: "ALL_TERRITORY_CODE_E_760",
		438: "ALL_TERRITORY_CODE_E_762",
		439: "ALL_TERRITORY_CODE_E_764",
		440: "ALL_TERRITORY_CODE_E_768",
		441: "ALL_TERRITORY_CODE_E_776",
		442: "ALL_TERRITORY_CODE_E_780",
		443: "ALL_TERRITORY_CODE_E_784",
		444: "ALL_TERRITORY_CODE_E_788",
		445: "ALL_TERRITORY_CODE_E_792",
		446: "ALL_TERRITORY_CODE_E_795",
		447: "ALL_TERRITORY_CODE_E_798",
		448: "ALL_TERRITORY_CODE_E_800",
		449: "ALL_TERRITORY_CODE_E_804",
		450: "ALL_TERRITORY_CODE_E_807",
		451: "ALL_TERRITORY_CODE_E_810",
		452: "ALL_TERRITORY_CODE_E_818",
		453: "ALL_TERRITORY_CODE_E_826",
		454: "ALL_TERRITORY_CODE_E_834",
		455: "ALL_TERRITORY_CODE_E_840",
		456: "ALL_TERRITORY_CODE_E_854",
		457: "ALL_TERRITORY_CODE_E_858",
		458: "ALL_TERRITORY_CODE_E_860",
		459: "ALL_TERRITORY_CODE_E_862",
		460: "ALL_TERRITORY_CODE_E_882",
		461: "ALL_TERRITORY_CODE_E_886",
		462: "ALL_TERRITORY_CODE_E_887",
		463: "ALL_TERRITORY_CODE_E_890",
		464: "ALL_TERRITORY_CODE_E_891",
		465: "ALL_TERRITORY_CODE_E_894",
		466: "ALL_TERRITORY_CODE_E_2100",
		467: "ALL_TERRITORY_CODE_E_2101",
		468: "ALL_TERRITORY_CODE_E_2102",
		469: "ALL_TERRITORY_CODE_E_2103",
		470: "ALL_TERRITORY_CODE_E_2104",
		471: "ALL_TERRITORY_CODE_E_2105",
		472: "ALL_TERRITORY_CODE_E_2106",
		473: "ALL_TERRITORY_CODE_E_2107",
		474: "ALL_TERRITORY_CODE_E_2108",
		475: "ALL_TERRITORY_CODE_E_2109",
		476: "ALL_TERRITORY_CODE_E_2110",
		477: "ALL_TERRITORY_CODE_E_2111",
		478: "ALL_TERRITORY_CODE_E_2112",
		479: "ALL_TERRITORY_CODE_E_2113",
		480: "ALL_TERRITORY_CODE_E_2114",
		481: "ALL_TERRITORY_CODE_E_2115",
		482: "ALL_TERRITORY_CODE_E_2116",
		483: "ALL_TERRITORY_CODE_E_2117",
		484: "ALL_TERRITORY_CODE_E_2118",
		485: "ALL_TERRITORY_CODE_E_2119",
		486: "ALL_TERRITORY_CODE_E_2120",
		487: "ALL_TERRITORY_CODE_E_2121",
		488: "ALL_TERRITORY_CODE_E_2122",
		489: "ALL_TERRITORY_CODE_E_2123",
		490: "ALL_TERRITORY_CODE_E_2124",
		491: "ALL_TERRITORY_CODE_E_2125",
		492: "ALL_TERRITORY_CODE_E_2126",
		493: "ALL_TERRITORY_CODE_E_2127",
		494: "ALL_TERRITORY_CODE_E_2128",
		495: "ALL_TERRITORY_CODE_E_2129",
		496: "ALL_TERRITORY_CODE_E_2130",
		497: "ALL_TERRITORY_CODE_E_2131",
		498: "ALL_TERRITORY_CODE_E_2132",
		499: "ALL_TERRITORY_CODE_E_2133",
		500: "ALL_TERRITORY_CODE_E_2134",
		501: "ALL_TERRITORY_CODE_E_2136",
		502: "ALL_TERRITORY_CODE_XK",
		503: "ALL_TERRITORY_CODE_WORLDWIDE",
		504: "ALL_TERRITORY_CODE_AIDJ",
		505: "ALL_TERRITORY_CODE_ANHH",
		506: "ALL_TERRITORY_CODE_BQAQ",
		507: "ALL_TERRITORY_CODE_BUMM",
		508: "ALL_TERRITORY_CODE_BYAA",
		509: "ALL_TERRITORY_CODE_CSHH",
		510: "ALL_TERRITORY_CODE_CSXX",
		511: "ALL_TERRITORY_CODE_CTKI",
		512: "ALL_TERRITORY_CODE_DDDE",
		513: "ALL_TERRITORY_CODE_DYBJ",
		514: "ALL_TERRITORY_CODE_FQHH",
		515: "ALL_TERRITORY_CODE_FXFR",
		516: "ALL_TERRITORY_CODE_GEHH",
		517: "ALL_TERRITORY_CODE_HVBF",
		518: "ALL_TERRITORY_CODE_JTUM",
		519: "ALL_TERRITORY_CODE_MIUM",
		520: "ALL_TERRITORY_CODE_NHVU",
		521: "ALL_TERRITORY_CODE_NQAQ",
		522: "ALL_TERRITORY_CODE_NTHH",
		523: "ALL_TERRITORY_CODE_PCHH",
		524: "ALL_TERRITORY_CODE_PUUM",
		525: "ALL_TERRITORY_CODE_PZPA",
		526: "ALL_TERRITORY_CODE_RHZW",
		527: "ALL_TERRITORY_CODE_SKIN",
		528: "ALL_TERRITORY_CODE_SUHH",
		529: "ALL_TERRITORY_CODE_TPTL",
		530: "ALL_TERRITORY_CODE_VDVN",
		531: "ALL_TERRITORY_CODE_WKUM",
		532: "ALL_TERRITORY_CODE_YDYE",
		533: "ALL_TERRITORY_CODE_YUCS",
		534: "ALL_TERRITORY_CODE_ZRCD",
	}
	AllTerritoryCode_value = map[string]int32{
		"ALL_TERRITORY_CODE_UNSPECIFIED": 0,
		"ALL_TERRITORY_CODE_AD":          1,
		"ALL_TERRITORY_CODE_AE":          2,
		"ALL_TERRITORY_CODE_AF":          3,
		"ALL_TERRITORY_CODE_AG":          4,
		"ALL_TERRITORY_CODE_AI":          5,
		"ALL_TERRITORY_CODE_AL":          6,
		"ALL_TERRITORY_CODE_AM":          7,
		"ALL_TERRITORY_CODE_AN":          8,
		"ALL_TERRITORY_CODE_AO":          9,
		"ALL_TERRITORY_CODE_AQ":          10,
		"ALL_TERRITORY_CODE_AR":          11,
		"ALL_TERRITORY_CODE_AS":          12,
		"ALL_TERRITORY_CODE_AT":          13,
		"ALL_TERRITORY_CODE_AU":          14,
		"ALL_TERRITORY_CODE_AW":          15,
		"ALL_TERRITORY_CODE_AX":          16,
		"ALL_TERRITORY_CODE_AZ":          17,
		"ALL_TERRITORY_CODE_BA":          18,
		"ALL_TERRITORY_CODE_BB":          19,
		"ALL_TERRITORY_CODE_BD":          20,
		"ALL_TERRITORY_CODE_BE":          21,
		"ALL_TERRITORY_CODE_BF":          22,
		"ALL_TERRITORY_CODE_BG":          23,
		"ALL_TERRITORY_CODE_BH":          24,
		"ALL_TERRITORY_CODE_BI":          25,
		"ALL_TERRITORY_CODE_BJ":          26,
		"ALL_TERRITORY_CODE_BL":          27,
		"ALL_TERRITORY_CODE_BM":          28,
		"ALL_TERRITORY_CODE_BN":          29,
		"ALL_TERRITORY_CODE_BO":          30,
		"ALL_TERRITORY_CODE_BQ":          31,
		"ALL_TERRITORY_CODE_BR":          32,
		"ALL_TERRITORY_CODE_BS":          33,
		"ALL_TERRITORY_CODE_BT":          34,
		"ALL_TERRITORY_CODE_BV":          35,
		"ALL_TERRITORY_CODE_BW":          36,
		"ALL_TERRITORY_CODE_BY":          37,
		"ALL_TERRITORY_CODE_BZ":          38,
		"ALL_TERRITORY_CODE_CA":          39,
		"ALL_TERRITORY_CODE_CC":          40,
		"ALL_TERRITORY_CODE_CD":          41,
		"ALL_TERRITORY_CODE_CF":          42,
		"ALL_TERRITORY_CODE_CG":          43,
		"ALL_TERRITORY_CODE_CH":          44,
		"ALL_TERRITORY_CODE_CI":          45,
		"ALL_TERRITORY_CODE_CK":          46,
		"ALL_TERRITORY_CODE_CL":          47,
		"ALL_TERRITORY_CODE_CM":          48,
		"ALL_TERRITORY_CODE_CN":          49,
		"ALL_TERRITORY_CODE_CO":          50,
		"ALL_TERRITORY_CODE_CR":          51,
		"ALL_TERRITORY_CODE_CS":          52,
		"ALL_TERRITORY_CODE_CU":          53,
		"ALL_TERRITORY_CODE_CV":          54,
		"ALL_TERRITORY_CODE_CW":          55,
		"ALL_TERRITORY_CODE_CX":          56,
		"ALL_TERRITORY_CODE_CY":          57,
		"ALL_TERRITORY_CODE_CZ":          58,
		"ALL_TERRITORY_CODE_DE":          59,
		"ALL_TERRITORY_CODE_DJ":          60,
		"ALL_TERRITORY_CODE_DK":          61,
		"ALL_TERRITORY_CODE_DM":          62,
		"ALL_TERRITORY_CODE_DO":          63,
		"ALL_TERRITORY_CODE_DZ":          64,
		"ALL_TERRITORY_CODE_EC":          65,
		"ALL_TERRITORY_CODE_EE":          66,
		"ALL_TERRITORY_CODE_EG":          67,
		"ALL_TERRITORY_CODE_EH":          68,
		"ALL_TERRITORY_CODE_ER":          69,
		"ALL_TERRITORY_CODE_ES":          70,
		"ALL_TERRITORY_CODE_ES_CE":       71,
		"ALL_TERRITORY_CODE_ES_CN":       72,
		"ALL_TERRITORY_CODE_ES_ML":       73,
		"ALL_TERRITORY_CODE_ET":          74,
		"ALL_TERRITORY_CODE_FI":          75,
		"ALL_TERRITORY_CODE_FJ":          76,
		"ALL_TERRITORY_CODE_FK":          77,
		"ALL_TERRITORY_CODE_FM":          78,
		"ALL_TERRITORY_CODE_FO":          79,
		"ALL_TERRITORY_CODE_FR":          80,
		"ALL_TERRITORY_CODE_GA":          81,
		"ALL_TERRITORY_CODE_GB":          82,
		"ALL_TERRITORY_CODE_GD":          83,
		"ALL_TERRITORY_CODE_GE":          84,
		"ALL_TERRITORY_CODE_GF":          85,
		"ALL_TERRITORY_CODE_GG":          86,
		"ALL_TERRITORY_CODE_GH":          87,
		"ALL_TERRITORY_CODE_GI":          88,
		"ALL_TERRITORY_CODE_GL":          89,
		"ALL_TERRITORY_CODE_GM":          90,
		"ALL_TERRITORY_CODE_GN":          91,
		"ALL_TERRITORY_CODE_GP":          92,
		"ALL_TERRITORY_CODE_GQ":          93,
		"ALL_TERRITORY_CODE_GR":          94,
		"ALL_TERRITORY_CODE_GS":          95,
		"ALL_TERRITORY_CODE_GT":          96,
		"ALL_TERRITORY_CODE_GU":          97,
		"ALL_TERRITORY_CODE_GW":          98,
		"ALL_TERRITORY_CODE_GY":          99,
		"ALL_TERRITORY_CODE_HK":          100,
		"ALL_TERRITORY_CODE_HM":          101,
		"ALL_TERRITORY_CODE_HN":          102,
		"ALL_TERRITORY_CODE_HR":          103,
		"ALL_TERRITORY_CODE_HT":          104,
		"ALL_TERRITORY_CODE_HU":          105,
		"ALL_TERRITORY_CODE_ID":          106,
		"ALL_TERRITORY_CODE_IE":          107,
		"ALL_TERRITORY_CODE_IL":          108,
		"ALL_TERRITORY_CODE_IM":          109,
		"ALL_TERRITORY_CODE_IN":          110,
		"ALL_TERRITORY_CODE_IO":          111,
		"ALL_TERRITORY_CODE_IQ":          112,
		"ALL_TERRITORY_CODE_IR":          113,
		"ALL_TERRITORY_CODE_IS":          114,
		"ALL_TERRITORY_CODE_IT":          115,
		"ALL_TERRITORY_CODE_JE":          116,
		"ALL_TERRITORY_CODE_JM":          117,
		"ALL_TERRITORY_CODE_JO":          118,
		"ALL_TERRITORY_CODE_JP":          119,
		"ALL_TERRITORY_CODE_KE":          120,
		"ALL_TERRITORY_CODE_KG":          121,
		"ALL_TERRITORY_CODE_KH":          122,
		"ALL_TERRITORY_CODE_KI":          123,
		"ALL_TERRITORY_CODE_KM":          124,
		"ALL_TERRITORY_CODE_KN":          125,
		"ALL_TERRITORY_CODE_KP":          126,
		"ALL_TERRITORY_CODE_KR":          127,
		"ALL_TERRITORY_CODE_KW":          128,
		"ALL_TERRITORY_CODE_KY":          129,
		"ALL_TERRITORY_CODE_KZ":          130,
		"ALL_TERRITORY_CODE_LA":          131,
		"ALL_TERRITORY_CODE_LB":          132,
		"ALL_TERRITORY_CODE_LC":          133,
		"ALL_TERRITORY_CODE_LI":          134,
		"ALL_TERRITORY_CODE_LK":          135,
		"ALL_TERRITORY_CODE_LR":          136,
		"ALL_TERRITORY_CODE_LS":          137,
		"ALL_TERRITORY_CODE_LT":          138,
		"ALL_TERRITORY_CODE_LU":          139,
		"ALL_TERRITORY_CODE_LV":          140,
		"ALL_TERRITORY_CODE_LY":          141,
		"ALL_TERRITORY_CODE_MA":          142,
		"ALL_TERRITORY_CODE_MC":          143,
		"ALL_TERRITORY_CODE_MD":          144,
		"ALL_TERRITORY_CODE_ME":          145,
		"ALL_TERRITORY_CODE_MF":          146,
		"ALL_TERRITORY_CODE_MG":          147,
		"ALL_TERRITORY_CODE_MH":          148,
		"ALL_TERRITORY_CODE_MK":          149,
		"ALL_TERRITORY_CODE_ML":          150,
		"ALL_TERRITORY_CODE_MM":          151,
		"ALL_TERRITORY_CODE_MN":          152,
		"ALL_TERRITORY_CODE_MO":          153,
		"ALL_TERRITORY_CODE_MP":          154,
		"ALL_TERRITORY_CODE_MQ":          155,
		"ALL_TERRITORY_CODE_MR":          156,
		"ALL_TERRITORY_CODE_MS":          157,
		"ALL_TERRITORY_CODE_MT":          158,
		"ALL_TERRITORY_CODE_MU":          159,
		"ALL_TERRITORY_CODE_MV":          160,
		"ALL_TERRITORY_CODE_MW":          161,
		"ALL_TERRITORY_CODE_MX":          162,
		"ALL_TERRITORY_CODE_MY":          163,
		"ALL_TERRITORY_CODE_MZ":          164,
		"ALL_TERRITORY_CODE_NA":          165,
		"ALL_TERRITORY_CODE_NC":          166,
		"ALL_TERRITORY_CODE_NE":          167,
		"ALL_TERRITORY_CODE_NF":          168,
		"ALL_TERRITORY_CODE_NG":          169,
		"ALL_TERRITORY_CODE_NI":          170,
		"ALL_TERRITORY_CODE_NL":          171,
		"ALL_TERRITORY_CODE_NO":          172,
		"ALL_TERRITORY_CODE_NP":          173,
		"ALL_TERRITORY_CODE_NR":          174,
		"ALL_TERRITORY_CODE_NU":          175,
		"ALL_TERRITORY_CODE_NZ":          176,
		"ALL_TERRITORY_CODE_OM":          177,
		"ALL_TERRITORY_CODE_PA":          178,
		"ALL_TERRITORY_CODE_PE":          179,
		"ALL_TERRITORY_CODE_PF":          180,
		"ALL_TERRITORY_CODE_PG":          181,
		"ALL_TERRITORY_CODE_PH":          182,
		"ALL_TERRITORY_CODE_PK":          183,
		"ALL_TERRITORY_CODE_PL":          184,
		"ALL_TERRITORY_CODE_PM":          185,
		"ALL_TERRITORY_CODE_PN":          186,
		"ALL_TERRITORY_CODE_PR":          187,
		"ALL_TERRITORY_CODE_PS":          188,
		"ALL_TERRITORY_CODE_PT":          189,
		"ALL_TERRITORY_CODE_PW":          190,
		"ALL_TERRITORY_CODE_PY":          191,
		"ALL_TERRITORY_CODE_QA":          192,
		"ALL_TERRITORY_CODE_RE":          193,
		"ALL_TERRITORY_CODE_RO":          194,
		"ALL_TERRITORY_CODE_RS":          195,
		"ALL_TERRITORY_CODE_RU":          196,
		"ALL_TERRITORY_CODE_RW":          197,
		"ALL_TERRITORY_CODE_SA":          198,
		"ALL_TERRITORY_CODE_SB":          199,
		"ALL_TERRITORY_CODE_SC":          200,
		"ALL_TERRITORY_CODE_SD":          201,
		"ALL_TERRITORY_CODE_SE":          202,
		"ALL_TERRITORY_CODE_SG":          203,
		"ALL_TERRITORY_CODE_SH":          204,
		"ALL_TERRITORY_CODE_SI":          205,
		"ALL_TERRITORY_CODE_SJ":          206,
		"ALL_TERRITORY_CODE_SK":          207,
		"ALL_TERRITORY_CODE_SL":          208,
		"ALL_TERRITORY_CODE_SM":          209,
		"ALL_TERRITORY_CODE_SN":          210,
		"ALL_TERRITORY_CODE_SO":          211,
		"ALL_TERRITORY_CODE_SR":          212,
		"ALL_TERRITORY_CODE_SS":          213,
		"ALL_TERRITORY_CODE_ST":          214,
		"ALL_TERRITORY_CODE_SV":          215,
		"ALL_TERRITORY_CODE_SX":          216,
		"ALL_TERRITORY_CODE_SY":          217,
		"ALL_TERRITORY_CODE_SZ":          218,
		"ALL_TERRITORY_CODE_TC":          219,
		"ALL_TERRITORY_CODE_TD":          220,
		"ALL_TERRITORY_CODE_TF":          221,
		"ALL_TERRITORY_CODE_TG":          222,
		"ALL_TERRITORY_CODE_TH":          223,
		"ALL_TERRITORY_CODE_TJ":          224,
		"ALL_TERRITORY_CODE_TK":          225,
		"ALL_TERRITORY_CODE_TL":          226,
		"ALL_TERRITORY_CODE_TM":          227,
		"ALL_TERRITORY_CODE_TN":          228,
		"ALL_TERRITORY_CODE_TO":          229,
		"ALL_TERRITORY_CODE_TR":          230,
		"ALL_TERRITORY_CODE_TT":          231,
		"ALL_TERRITORY_CODE_TV":          232,
		"ALL_TERRITORY_CODE_TW":          233,
		"ALL_TERRITORY_CODE_TZ":          234,
		"ALL_TERRITORY_CODE_UA":          235,
		"ALL_TERRITORY_CODE_UG":          236,
		"ALL_TERRITORY_CODE_UM":          237,
		"ALL_TERRITORY_CODE_US":          238,
		"ALL_TERRITORY_CODE_UY":          239,
		"ALL_TERRITORY_CODE_UZ":          240,
		"ALL_TERRITORY_CODE_VA":          241,
		"ALL_TERRITORY_CODE_VC":          242,
		"ALL_TERRITORY_CODE_VE":          243,
		"ALL_TERRITORY_CODE_VG":          244,
		"ALL_TERRITORY_CODE_VI":          245,
		"ALL_TERRITORY_CODE_VN":          246,
		"ALL_TERRITORY_CODE_VU":          247,
		"ALL_TERRITORY_CODE_WF":          248,
		"ALL_TERRITORY_CODE_WS":          249,
		"ALL_TERRITORY_CODE_YE":          250,
		"ALL_TERRITORY_CODE_YT":          251,
		"ALL_TERRITORY_CODE_ZA":          252,
		"ALL_TERRITORY_CODE_ZM":          253,
		"ALL_TERRITORY_CODE_ZW":          254,
		"ALL_TERRITORY_CODE_E_4":         255,
		"ALL_TERRITORY_CODE_E_8":         256,
		"ALL_TERRITORY_CODE_E_12":        257,
		"ALL_TERRITORY_CODE_E_20":        258,
		"ALL_TERRITORY_CODE_E_24":        259,
		"ALL_TERRITORY_CODE_E_28":        260,
		"ALL_TERRITORY_CODE_E_31":        261,
		"ALL_TERRITORY_CODE_E_32":        262,
		"ALL_TERRITORY_CODE_E_36":        263,
		"ALL_TERRITORY_CODE_E_40":        264,
		"ALL_TERRITORY_CODE_E_44":        265,
		"ALL_TERRITORY_CODE_E_48":        266,
		"ALL_TERRITORY_CODE_E_50":        267,
		"ALL_TERRITORY_CODE_E_51":        268,
		"ALL_TERRITORY_CODE_E_52":        269,
		"ALL_TERRITORY_CODE_E_56":        270,
		"ALL_TERRITORY_CODE_E_64":        271,
		"ALL_TERRITORY_CODE_E_68":        272,
		"ALL_TERRITORY_CODE_E_70":        273,
		"ALL_TERRITORY_CODE_E_72":        274,
		"ALL_TERRITORY_CODE_E_76":        275,
		"ALL_TERRITORY_CODE_E_84":        276,
		"ALL_TERRITORY_CODE_E_90":        277,
		"ALL_TERRITORY_CODE_E_96":        278,
		"ALL_TERRITORY_CODE_E_100":       279,
		"ALL_TERRITORY_CODE_E_104":       280,
		"ALL_TERRITORY_CODE_E_108":       281,
		"ALL_TERRITORY_CODE_E_112":       282,
		"ALL_TERRITORY_CODE_E_116":       283,
		"ALL_TERRITORY_CODE_E_120":       284,
		"ALL_TERRITORY_CODE_E_124":       285,
		"ALL_TERRITORY_CODE_E_132":       286,
		"ALL_TERRITORY_CODE_E_140":       287,
		"ALL_TERRITORY_CODE_E_144":       288,
		"ALL_TERRITORY_CODE_E_148":       289,
		"ALL_TERRITORY_CODE_E_152":       290,
		"ALL_TERRITORY_CODE_E_156":       291,
		"ALL_TERRITORY_CODE_E_158":       292,
		"ALL_TERRITORY_CODE_E_170":       293,
		"ALL_TERRITORY_CODE_E_174":       294,
		"ALL_TERRITORY_CODE_E_178":       295,
		"ALL_TERRITORY_CODE_E_180":       296,
		"ALL_TERRITORY_CODE_E_188":       297,
		"ALL_TERRITORY_CODE_E_191":       298,
		"ALL_TERRITORY_CODE_E_192":       299,
		"ALL_TERRITORY_CODE_E_196":       300,
		"ALL_TERRITORY_CODE_E_200":       301,
		"ALL_TERRITORY_CODE_E_203":       302,
		"ALL_TERRITORY_CODE_E_204":       303,
		"ALL_TERRITORY_CODE_E_208":       304,
		"ALL_TERRITORY_CODE_E_212":       305,
		"ALL_TERRITORY_CODE_E_214":       306,
		"ALL_TERRITORY_CODE_E_218":       307,
		"ALL_TERRITORY_CODE_E_222":       308,
		"ALL_TERRITORY_CODE_E_226":       309,
		"ALL_TERRITORY_CODE_E_230":       310,
		"ALL_TERRITORY_CODE_E_231":       311,
		"ALL_TERRITORY_CODE_E_232":       312,
		"ALL_TERRITORY_CODE_E_233":       313,
		"ALL_TERRITORY_CODE_E_242":       314,
		"ALL_TERRITORY_CODE_E_246":       315,
		"ALL_TERRITORY_CODE_E_250":       316,
		"ALL_TERRITORY_CODE_E_258":       317,
		"ALL_TERRITORY_CODE_E_262":       318,
		"ALL_TERRITORY_CODE_E_266":       319,
		"ALL_TERRITORY_CODE_E_268":       320,
		"ALL_TERRITORY_CODE_E_270":       321,
		"ALL_TERRITORY_CODE_E_276":       322,
		"ALL_TERRITORY_CODE_E_278":       323,
		"ALL_TERRITORY_CODE_E_280":       324,
		"ALL_TERRITORY_CODE_E_288":       325,
		"ALL_TERRITORY_CODE_E_296":       326,
		"ALL_TERRITORY_CODE_E_300":       327,
		"ALL_TERRITORY_CODE_E_308":       328,
		"ALL_TERRITORY_CODE_E_320":       329,
		"ALL_TERRITORY_CODE_E_324":       330,
		"ALL_TERRITORY_CODE_E_328":       331,
		"ALL_TERRITORY_CODE_E_332":       332,
		"ALL_TERRITORY_CODE_E_336":       333,
		"ALL_TERRITORY_CODE_E_340":       334,
		"ALL_TERRITORY_CODE_E_344":       335,
		"ALL_TERRITORY_CODE_E_348":       336,
		"ALL_TERRITORY_CODE_E_352":       337,
		"ALL_TERRITORY_CODE_E_356":       338,
		"ALL_TERRITORY_CODE_E_360":       339,
		"ALL_TERRITORY_CODE_E_364":       340,
		"ALL_TERRITORY_CODE_E_368":       341,
		"ALL_TERRITORY_CODE_E_372":       342,
		"ALL_TERRITORY_CODE_E_376":       343,
		"ALL_TERRITORY_CODE_E_380":       344,
		"ALL_TERRITORY_CODE_E_384":       345,
		"ALL_TERRITORY_CODE_E_388":       346,
		"ALL_TERRITORY_CODE_E_392":       347,
		"ALL_TERRITORY_CODE_E_398":       348,
		"ALL_TERRITORY_CODE_E_400":       349,
		"ALL_TERRITORY_CODE_E_404":       350,
		"ALL_TERRITORY_CODE_E_408":       351,
		"ALL_TERRITORY_CODE_E_410":       352,
		"ALL_TERRITORY_CODE_E_414":       353,
		"ALL_TERRITORY_CODE_E_417":       354,
		"ALL_TERRITORY_CODE_E_418":       355,
		"ALL_TERRITORY_CODE_E_422":       356,
		"ALL_TERRITORY_CODE_E_426":       357,
		"ALL_TERRITORY_CODE_E_428":       358,
		"ALL_TERRITORY_CODE_E_430":       359,
		"ALL_TERRITORY_CODE_E_434":       360,
		"ALL_TERRITORY_CODE_E_438":       361,
		"ALL_TERRITORY_CODE_E_440":       362,
		"ALL_TERRITORY_CODE_E_442":       363,
		"ALL_TERRITORY_CODE_E_446":       364,
		"ALL_TERRITORY_CODE_E_450":       365,
		"ALL_TERRITORY_CODE_E_454":       366,
		"ALL_TERRITORY_CODE_E_458":       367,
		"ALL_TERRITORY_CODE_E_462":       368,
		"ALL_TERRITORY_CODE_E_466":       369,
		"ALL_TERRITORY_CODE_E_470":       370,
		"ALL_TERRITORY_CODE_E_478":       371,
		"ALL_TERRITORY_CODE_E_480":       372,
		"ALL_TERRITORY_CODE_E_484":       373,
		"ALL_TERRITORY_CODE_E_492":       374,
		"ALL_TERRITORY_CODE_E_496":       375,
		"ALL_TERRITORY_CODE_E_498":       376,
		"ALL_TERRITORY_CODE_E_499":       377,
		"ALL_TERRITORY_CODE_E_504":       378,
		"ALL_TERRITORY_CODE_E_508":       379,
		"ALL_TERRITORY_CODE_E_512":       380,
		"ALL_TERRITORY_CODE_E_516":       381,
		"ALL_TERRITORY_CODE_E_520":       382,
		"ALL_TERRITORY_CODE_E_524":       383,
		"ALL_TERRITORY_CODE_E_528":       384,
		"ALL_TERRITORY_CODE_E_540":       385,
		"ALL_TERRITORY_CODE_E_548":       386,
		"ALL_TERRITORY_CODE_E_554":       387,
		"ALL_TERRITORY_CODE_E_558":       388,
		"ALL_TERRITORY_CODE_E_562":       389,
		"ALL_TERRITORY_CODE_E_566":       390,
		"ALL_TERRITORY_CODE_E_578":       391,
		"ALL_TERRITORY_CODE_E_583":       392,
		"ALL_TERRITORY_CODE_E_584":       393,
		"ALL_TERRITORY_CODE_E_585":       394,
		"ALL_TERRITORY_CODE_E_586":       395,
		"ALL_TERRITORY_CODE_E_591":       396,
		"ALL_TERRITORY_CODE_E_598":       397,
		"ALL_TERRITORY_CODE_E_600":       398,
		"ALL_TERRITORY_CODE_E_604":       399,
		"ALL_TERRITORY_CODE_E_608":       400,
		"ALL_TERRITORY_CODE_E_616":       401,
		"ALL_TERRITORY_CODE_E_620":       402,
		"ALL_TERRITORY_CODE_E_624":       403,
		"ALL_TERRITORY_CODE_E_626":       404,
		"ALL_TERRITORY_CODE_E_630":       405,
		"ALL_TERRITORY_CODE_E_634":       406,
		"ALL_TERRITORY_CODE_E_642":       407,
		"ALL_TERRITORY_CODE_E_643":       408,
		"ALL_TERRITORY_CODE_E_646":       409,
		"ALL_TERRITORY_CODE_E_659":       410,
		"ALL_TERRITORY_CODE_E_662":       411,
		"ALL_TERRITORY_CODE_E_670":       412,
		"ALL_TERRITORY_CODE_E_674":       413,
		"ALL_TERRITORY_CODE_E_678":       414,
		"ALL_TERRITORY_CODE_E_682":       415,
		"ALL_TERRITORY_CODE_E_686":       416,
		"ALL_TERRITORY_CODE_E_688":       417,
		"ALL_TERRITORY_CODE_E_690":       418,
		"ALL_TERRITORY_CODE_E_694":       419,
		"ALL_TERRITORY_CODE_E_702":       420,
		"ALL_TERRITORY_CODE_E_703":       421,
		"ALL_TERRITORY_CODE_E_704":       422,
		"ALL_TERRITORY_CODE_E_705":       423,
		"ALL_TERRITORY_CODE_E_706":       424,
		"ALL_TERRITORY_CODE_E_710":       425,
		"ALL_TERRITORY_CODE_E_716":       426,
		"ALL_TERRITORY_CODE_E_720":       427,
		"ALL_TERRITORY_CODE_E_724":       428,
		"ALL_TERRITORY_CODE_E_728":       429,
		"ALL_TERRITORY_CODE_E_729":       430,
		"ALL_TERRITORY_CODE_E_732":       431,
		"ALL_TERRITORY_CODE_E_736":       432,
		"ALL_TERRITORY_CODE_E_740":       433,
		"ALL_TERRITORY_CODE_E_748":       434,
		"ALL_TERRITORY_CODE_E_752":       435,
		"ALL_TERRITORY_CODE_E_756":       436,
		"ALL_TERRITORY_CODE_E_760":       437,
		"ALL_TERRITORY_CODE_E_762":       438,
		"ALL_TERRITORY_CODE_E_764":       439,
		"ALL_TERRITORY_CODE_E_768":       440,
		"ALL_TERRITORY_CODE_E_776":       441,
		"ALL_TERRITORY_CODE_E_780":       442,
		"ALL_TERRITORY_CODE_E_784":       443,
		"ALL_TERRITORY_CODE_E_788":       444,
		"ALL_TERRITORY_CODE_E_792":       445,
		"ALL_TERRITORY_CODE_E_795":       446,
		"ALL_TERRITORY_CODE_E_798":       447,
		"ALL_TERRITORY_CODE_E_800":       448,
		"ALL_TERRITORY_CODE_E_804":       449,
		"ALL_TERRITORY_CODE_E_807":       450,
		"ALL_TERRITORY_CODE_E_810":       451,
		"ALL_TERRITORY_CODE_E_818":       452,
		"ALL_TERRITORY_CODE_E_826":       453,
		"ALL_TERRITORY_CODE_E_834":       454,
		"ALL_TERRITORY_CODE_E_840":       455,
		"ALL_TERRITORY_CODE_E_854":       456,
		"ALL_TERRITORY_CODE_E_858":       457,
		"ALL_TERRITORY_CODE_E_860":       458,
		"ALL_TERRITORY_CODE_E_862":       459,
		"ALL_TERRITORY_CODE_E_882":       460,
		"ALL_TERRITORY_CODE_E_886":       461,
		"ALL_TERRITORY_CODE_E_887":       462,
		"ALL_TERRITORY_CODE_E_890":       463,
		"ALL_TERRITORY_CODE_E_891":       464,
		"ALL_TERRITORY_CODE_E_894":       465,
		"ALL_TERRITORY_CODE_E_2100":      466,
		"ALL_TERRITORY_CODE_E_2101":      467,
		"ALL_TERRITORY_CODE_E_2102":      468,
		"ALL_TERRITORY_CODE_E_2103":      469,
		"ALL_TERRITORY_CODE_E_2104":      470,
		"ALL_TERRITORY_CODE_E_2105":      471,
		"ALL_TERRITORY_CODE_E_2106":      472,
		"ALL_TERRITORY_CODE_E_2107":      473,
		"ALL_TERRITORY_CODE_E_2108":      474,
		"ALL_TERRITORY_CODE_E_2109":      475,
		"ALL_TERRITORY_CODE_E_2110":      476,
		"ALL_TERRITORY_CODE_E_2111":      477,
		"ALL_TERRITORY_CODE_E_2112":      478,
		"ALL_TERRITORY_CODE_E_2113":      479,
		"ALL_TERRITORY_CODE_E_2114":      480,
		"ALL_TERRITORY_CODE_E_2115":      481,
		"ALL_TERRITORY_CODE_E_2116":      482,
		"ALL_TERRITORY_CODE_E_2117":      483,
		"ALL_TERRITORY_CODE_E_2118":      484,
		"ALL_TERRITORY_CODE_E_2119":      485,
		"ALL_TERRITORY_CODE_E_2120":      486,
		"ALL_TERRITORY_CODE_E_2121":      487,
		"ALL_TERRITORY_CODE_E_2122":      488,
		"ALL_TERRITORY_CODE_E_2123":      489,
		"ALL_TERRITORY_CODE_E_2124":      490,
		"ALL_TERRITORY_CODE_E_2125":      491,
		"ALL_TERRITORY_CODE_E_2126":      492,
		"ALL_TERRITORY_CODE_E_2127":      493,
		"ALL_TERRITORY_CODE_E_2128":      494,
		"ALL_TERRITORY_CODE_E_2129":      495,
		"ALL_TERRITORY_CODE_E_2130":      496,
		"ALL_TERRITORY_CODE_E_2131":      497,
		"ALL_TERRITORY_CODE_E_2132":      498,
		"ALL_TERRITORY_CODE_E_2133":      499,
		"ALL_TERRITORY_CODE_E_2134":      500,
		"ALL_TERRITORY_CODE_E_2136":      501,
		"ALL_TERRITORY_CODE_XK":          502,
		"ALL_TERRITORY_CODE_WORLDWIDE":   503,
		"ALL_TERRITORY_CODE_AIDJ":        504,
		"ALL_TERRITORY_CODE_ANHH":        505,
		"ALL_TERRITORY_CODE_BQAQ":        506,
		"ALL_TERRITORY_CODE_BUMM":        507,
		"ALL_TERRITORY_CODE_BYAA":        508,
		"ALL_TERRITORY_CODE_CSHH":        509,
		"ALL_TERRITORY_CODE_CSXX":        510,
		"ALL_TERRITORY_CODE_CTKI":        511,
		"ALL_TERRITORY_CODE_DDDE":        512,
		"ALL_TERRITORY_CODE_DYBJ":        513,
		"ALL_TERRITORY_CODE_FQHH":        514,
		"ALL_TERRITORY_CODE_FXFR":        515,
		"ALL_TERRITORY_CODE_GEHH":        516,
		"ALL_TERRITORY_CODE_HVBF":        517,
		"ALL_TERRITORY_CODE_JTUM":        518,
		"ALL_TERRITORY_CODE_MIUM":        519,
		"ALL_TERRITORY_CODE_NHVU":        520,
		"ALL_TERRITORY_CODE_NQAQ":        521,
		"ALL_TERRITORY_CODE_NTHH":        522,
		"ALL_TERRITORY_CODE_PCHH":        523,
		"ALL_TERRITORY_CODE_PUUM":        524,
		"ALL_TERRITORY_CODE_PZPA":        525,
		"ALL_TERRITORY_CODE_RHZW":        526,
		"ALL_TERRITORY_CODE_SKIN":        527,
		"ALL_TERRITORY_CODE_SUHH":        528,
		"ALL_TERRITORY_CODE_TPTL":        529,
		"ALL_TERRITORY_CODE_VDVN":        530,
		"ALL_TERRITORY_CODE_WKUM":        531,
		"ALL_TERRITORY_CODE_YDYE":        532,
		"ALL_TERRITORY_CODE_YUCS":        533,
		"ALL_TERRITORY_CODE_ZRCD":        534,
	}
)

func (x AllTerritoryCode) Enum() *AllTerritoryCode {
	p := new(AllTerritoryCode)
	*p = x
	return p
}

func (x AllTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[2].Descriptor()
}

func (AllTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[2]
}

func (x AllTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllTerritoryCode.Descriptor instead.
func (AllTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{2}
}

type ArtistRole int32

const (
	ArtistRole_ARTIST_ROLE_UNSPECIFIED            ArtistRole = 0
	ArtistRole_ARTIST_ROLE_ACTOR                  ArtistRole = 1
	ArtistRole_ARTIST_ROLE_ADAPTER                ArtistRole = 2
	ArtistRole_ARTIST_ROLE_ARCHITECT              ArtistRole = 3
	ArtistRole_ARTIST_ROLE_ARRANGER               ArtistRole = 4
	ArtistRole_ARTIST_ROLE_ARTIST                 ArtistRole = 5
	ArtistRole_ARTIST_ROLE_ASSOCIATEDPERFORMER    ArtistRole = 6
	ArtistRole_ARTIST_ROLE_AUTHOR                 ArtistRole = 7
	ArtistRole_ARTIST_ROLE_BAND                   ArtistRole = 8
	ArtistRole_ARTIST_ROLE_CARTOONIST             ArtistRole = 9
	ArtistRole_ARTIST_ROLE_CHOIR                  ArtistRole = 10
	ArtistRole_ARTIST_ROLE_CHOREOGRAPHER          ArtistRole = 11
	ArtistRole_ARTIST_ROLE_COMPOSER               ArtistRole = 12
	ArtistRole_ARTIST_ROLE_COMPOSERLYRICIST       ArtistRole = 13
	ArtistRole_ARTIST_ROLE_COMPUTERGRAPHICCREATOR ArtistRole = 14
	ArtistRole_ARTIST_ROLE_CONDUCTOR              ArtistRole = 15
	ArtistRole_ARTIST_ROLE_CONTRIBUTOR            ArtistRole = 16
	ArtistRole_ARTIST_ROLE_DANCER                 ArtistRole = 17
	ArtistRole_ARTIST_ROLE_DESIGNER               ArtistRole = 18
	ArtistRole_ARTIST_ROLE_DIRECTOR               ArtistRole = 19
	ArtistRole_ARTIST_ROLE_ENSEMBLE               ArtistRole = 20
	ArtistRole_ARTIST_ROLE_FEATUREDARTIST         ArtistRole = 21
	ArtistRole_ARTIST_ROLE_FILMDIRECTOR           ArtistRole = 22
	ArtistRole_ARTIST_ROLE_GRAPHICARTIST          ArtistRole = 23
	ArtistRole_ARTIST_ROLE_GRAPHICDESIGNER        ArtistRole = 24
	ArtistRole_ARTIST_ROLE_JOURNALIST             ArtistRole = 25
	ArtistRole_ARTIST_ROLE_LIBRETTIST             ArtistRole = 26
	ArtistRole_ARTIST_ROLE_LYRICIST               ArtistRole = 27
	ArtistRole_ARTIST_ROLE_MAINARTIST             ArtistRole = 28
	ArtistRole_ARTIST_ROLE_NARRATOR               ArtistRole = 29
	ArtistRole_ARTIST_ROLE_NONLYRICAUTHOR         ArtistRole = 30
	ArtistRole_ARTIST_ROLE_ORCHESTRA              ArtistRole = 31
	ArtistRole_ARTIST_ROLE_ORIGINALPUBLISHER      ArtistRole = 32
	ArtistRole_ARTIST_ROLE_PAINTER                ArtistRole = 33
	ArtistRole_ARTIST_ROLE_PHOTOGRAPHER           ArtistRole = 34
	ArtistRole_ARTIST_ROLE_PHOTOGRAPHYDIRECTOR    ArtistRole = 35
	ArtistRole_ARTIST_ROLE_PLAYWRIGHT             ArtistRole = 36
	ArtistRole_ARTIST_ROLE_PRIMARYMUSICIAN        ArtistRole = 37
	ArtistRole_ARTIST_ROLE_PRODUCER               ArtistRole = 38
	ArtistRole_ARTIST_ROLE_PROGRAMMER             ArtistRole = 39
	ArtistRole_ARTIST_ROLE_SCREENPLAYAUTHOR       ArtistRole = 40
	ArtistRole_ARTIST_ROLE_SOLOIST                ArtistRole = 41
	ArtistRole_ARTIST_ROLE_STUDIOMUSICIAN         ArtistRole = 42
	ArtistRole_ARTIST_ROLE_STUDIOPERSONNEL        ArtistRole = 43
	ArtistRole_ARTIST_ROLE_SUBARRANGER            ArtistRole = 44
	ArtistRole_ARTIST_ROLE_TRANSLATOR             ArtistRole = 45
	ArtistRole_ARTIST_ROLE_UNKNOWN                ArtistRole = 46
	ArtistRole_ARTIST_ROLE_USERDEFINED            ArtistRole = 47
	ArtistRole_ARTIST_ROLE_ARTCOPYIST             ArtistRole = 48
	ArtistRole_ARTIST_ROLE_CALLIGRAPHER           ArtistRole = 49
	ArtistRole_ARTIST_ROLE_CARTOGRAPHER           ArtistRole = 50
	ArtistRole_ARTIST_ROLE_COMPUTERPROGRAMMER     ArtistRole = 51
	ArtistRole_ARTIST_ROLE_DELINEATOR             ArtistRole = 52
	ArtistRole_ARTIST_ROLE_DRAUGHTSMAN            ArtistRole = 53
	ArtistRole_ARTIST_ROLE_FACSIMILIST            ArtistRole = 54
	ArtistRole_ARTIST_ROLE_ILLUSTRATOR            ArtistRole = 55
	ArtistRole_ARTIST_ROLE_MUSICCOPYIST           ArtistRole = 56
	ArtistRole_ARTIST_ROLE_NOTSPECIFIED           ArtistRole = 57
	ArtistRole_ARTIST_ROLE_TYPEDESIGNER           ArtistRole = 58
)

// Enum value maps for ArtistRole.
var (
	ArtistRole_name = map[int32]string{
		0:  "ARTIST_ROLE_UNSPECIFIED",
		1:  "ARTIST_ROLE_ACTOR",
		2:  "ARTIST_ROLE_ADAPTER",
		3:  "ARTIST_ROLE_ARCHITECT",
		4:  "ARTIST_ROLE_ARRANGER",
		5:  "ARTIST_ROLE_ARTIST",
		6:  "ARTIST_ROLE_ASSOCIATEDPERFORMER",
		7:  "ARTIST_ROLE_AUTHOR",
		8:  "ARTIST_ROLE_BAND",
		9:  "ARTIST_ROLE_CARTOONIST",
		10: "ARTIST_ROLE_CHOIR",
		11: "ARTIST_ROLE_CHOREOGRAPHER",
		12: "ARTIST_ROLE_COMPOSER",
		13: "ARTIST_ROLE_COMPOSERLYRICIST",
		14: "ARTIST_ROLE_COMPUTERGRAPHICCREATOR",
		15: "ARTIST_ROLE_CONDUCTOR",
		16: "ARTIST_ROLE_CONTRIBUTOR",
		17: "ARTIST_ROLE_DANCER",
		18: "ARTIST_ROLE_DESIGNER",
		19: "ARTIST_ROLE_DIRECTOR",
		20: "ARTIST_ROLE_ENSEMBLE",
		21: "ARTIST_ROLE_FEATUREDARTIST",
		22: "ARTIST_ROLE_FILMDIRECTOR",
		23: "ARTIST_ROLE_GRAPHICARTIST",
		24: "ARTIST_ROLE_GRAPHICDESIGNER",
		25: "ARTIST_ROLE_JOURNALIST",
		26: "ARTIST_ROLE_LIBRETTIST",
		27: "ARTIST_ROLE_LYRICIST",
		28: "ARTIST_ROLE_MAINARTIST",
		29: "ARTIST_ROLE_NARRATOR",
		30: "ARTIST_ROLE_NONLYRICAUTHOR",
		31: "ARTIST_ROLE_ORCHESTRA",
		32: "ARTIST_ROLE_ORIGINALPUBLISHER",
		33: "ARTIST_ROLE_PAINTER",
		34: "ARTIST_ROLE_PHOTOGRAPHER",
		35: "ARTIST_ROLE_PHOTOGRAPHYDIRECTOR",
		36: "ARTIST_ROLE_PLAYWRIGHT",
		37: "ARTIST_ROLE_PRIMARYMUSICIAN",
		38: "ARTIST_ROLE_PRODUCER",
		39: "ARTIST_ROLE_PROGRAMMER",
		40: "ARTIST_ROLE_SCREENPLAYAUTHOR",
		41: "ARTIST_ROLE_SOLOIST",
		42: "ARTIST_ROLE_STUDIOMUSICIAN",
		43: "ARTIST_ROLE_STUDIOPERSONNEL",
		44: "ARTIST_ROLE_SUBARRANGER",
		45: "ARTIST_ROLE_TRANSLATOR",
		46: "ARTIST_ROLE_UNKNOWN",
		47: "ARTIST_ROLE_USERDEFINED",
		48: "ARTIST_ROLE_ARTCOPYIST",
		49: "ARTIST_ROLE_CALLIGRAPHER",
		50: "ARTIST_ROLE_CARTOGRAPHER",
		51: "ARTIST_ROLE_COMPUTERPROGRAMMER",
		52: "ARTIST_ROLE_DELINEATOR",
		53: "ARTIST_ROLE_DRAUGHTSMAN",
		54: "ARTIST_ROLE_FACSIMILIST",
		55: "ARTIST_ROLE_ILLUSTRATOR",
		56: "ARTIST_ROLE_MUSICCOPYIST",
		57: "ARTIST_ROLE_NOTSPECIFIED",
		58: "ARTIST_ROLE_TYPEDESIGNER",
	}
	ArtistRole_value = map[string]int32{
		"ARTIST_ROLE_UNSPECIFIED":            0,
		"ARTIST_ROLE_ACTOR":                  1,
		"ARTIST_ROLE_ADAPTER":                2,
		"ARTIST_ROLE_ARCHITECT":              3,
		"ARTIST_ROLE_ARRANGER":               4,
		"ARTIST_ROLE_ARTIST":                 5,
		"ARTIST_ROLE_ASSOCIATEDPERFORMER":    6,
		"ARTIST_ROLE_AUTHOR":                 7,
		"ARTIST_ROLE_BAND":                   8,
		"ARTIST_ROLE_CARTOONIST":             9,
		"ARTIST_ROLE_CHOIR":                  10,
		"ARTIST_ROLE_CHOREOGRAPHER":          11,
		"ARTIST_ROLE_COMPOSER":               12,
		"ARTIST_ROLE_COMPOSERLYRICIST":       13,
		"ARTIST_ROLE_COMPUTERGRAPHICCREATOR": 14,
		"ARTIST_ROLE_CONDUCTOR":              15,
		"ARTIST_ROLE_CONTRIBUTOR":            16,
		"ARTIST_ROLE_DANCER":                 17,
		"ARTIST_ROLE_DESIGNER":               18,
		"ARTIST_ROLE_DIRECTOR":               19,
		"ARTIST_ROLE_ENSEMBLE":               20,
		"ARTIST_ROLE_FEATUREDARTIST":         21,
		"ARTIST_ROLE_FILMDIRECTOR":           22,
		"ARTIST_ROLE_GRAPHICARTIST":          23,
		"ARTIST_ROLE_GRAPHICDESIGNER":        24,
		"ARTIST_ROLE_JOURNALIST":             25,
		"ARTIST_ROLE_LIBRETTIST":             26,
		"ARTIST_ROLE_LYRICIST":               27,
		"ARTIST_ROLE_MAINARTIST":             28,
		"ARTIST_ROLE_NARRATOR":               29,
		"ARTIST_ROLE_NONLYRICAUTHOR":         30,
		"ARTIST_ROLE_ORCHESTRA":              31,
		"ARTIST_ROLE_ORIGINALPUBLISHER":      32,
		"ARTIST_ROLE_PAINTER":                33,
		"ARTIST_ROLE_PHOTOGRAPHER":           34,
		"ARTIST_ROLE_PHOTOGRAPHYDIRECTOR":    35,
		"ARTIST_ROLE_PLAYWRIGHT":             36,
		"ARTIST_ROLE_PRIMARYMUSICIAN":        37,
		"ARTIST_ROLE_PRODUCER":               38,
		"ARTIST_ROLE_PROGRAMMER":             39,
		"ARTIST_ROLE_SCREENPLAYAUTHOR":       40,
		"ARTIST_ROLE_SOLOIST":                41,
		"ARTIST_ROLE_STUDIOMUSICIAN":         42,
		"ARTIST_ROLE_STUDIOPERSONNEL":        43,
		"ARTIST_ROLE_SUBARRANGER":            44,
		"ARTIST_ROLE_TRANSLATOR":             45,
		"ARTIST_ROLE_UNKNOWN":                46,
		"ARTIST_ROLE_USERDEFINED":            47,
		"ARTIST_ROLE_ARTCOPYIST":             48,
		"ARTIST_ROLE_CALLIGRAPHER":           49,
		"ARTIST_ROLE_CARTOGRAPHER":           50,
		"ARTIST_ROLE_COMPUTERPROGRAMMER":     51,
		"ARTIST_ROLE_DELINEATOR":             52,
		"ARTIST_ROLE_DRAUGHTSMAN":            53,
		"ARTIST_ROLE_FACSIMILIST":            54,
		"ARTIST_ROLE_ILLUSTRATOR":            55,
		"ARTIST_ROLE_MUSICCOPYIST":           56,
		"ARTIST_ROLE_NOTSPECIFIED":           57,
		"ARTIST_ROLE_TYPEDESIGNER":           58,
	}
)

func (x ArtistRole) Enum() *ArtistRole {
	p := new(ArtistRole)
	*p = x
	return p
}

func (x ArtistRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtistRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[3].Descriptor()
}

func (ArtistRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[3]
}

func (x ArtistRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtistRole.Descriptor instead.
func (ArtistRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{3}
}

type AudioCodecType int32

const (
	AudioCodecType_AUDIO_CODEC_TYPE_UNSPECIFIED AudioCodecType = 0
	AudioCodecType_AUDIO_CODEC_TYPE_AAC         AudioCodecType = 1
	AudioCodecType_AUDIO_CODEC_TYPE_ADPCM       AudioCodecType = 2
	AudioCodecType_AUDIO_CODEC_TYPE_ALAW        AudioCodecType = 3
	AudioCodecType_AUDIO_CODEC_TYPE_AMR_NB      AudioCodecType = 4
	AudioCodecType_AUDIO_CODEC_TYPE_AMR_WB      AudioCodecType = 5
	AudioCodecType_AUDIO_CODEC_TYPE_FLAC        AudioCodecType = 6
	AudioCodecType_AUDIO_CODEC_TYPE_MP2         AudioCodecType = 7
	AudioCodecType_AUDIO_CODEC_TYPE_MP3         AudioCodecType = 8
	AudioCodecType_AUDIO_CODEC_TYPE_MULAW       AudioCodecType = 9
	AudioCodecType_AUDIO_CODEC_TYPE_PCM         AudioCodecType = 10
	AudioCodecType_AUDIO_CODEC_TYPE_PDM         AudioCodecType = 11
	AudioCodecType_AUDIO_CODEC_TYPE_QCELP       AudioCodecType = 12
	AudioCodecType_AUDIO_CODEC_TYPE_REALAUDIO   AudioCodecType = 13
	AudioCodecType_AUDIO_CODEC_TYPE_SHOCKWAVE   AudioCodecType = 14
	AudioCodecType_AUDIO_CODEC_TYPE_UNKNOWN     AudioCodecType = 15
	AudioCodecType_AUDIO_CODEC_TYPE_USERDEFINED AudioCodecType = 16
	AudioCodecType_AUDIO_CODEC_TYPE_VORBIS      AudioCodecType = 17
	AudioCodecType_AUDIO_CODEC_TYPE_WMA         AudioCodecType = 18
	AudioCodecType_AUDIO_CODEC_TYPE_AMR         AudioCodecType = 19
	AudioCodecType_AUDIO_CODEC_TYPE_ATMOS       AudioCodecType = 20
	AudioCodecType_AUDIO_CODEC_TYPE_MP          AudioCodecType = 21
	AudioCodecType_AUDIO_CODEC_TYPE_MQA         AudioCodecType = 22
)

// Enum value maps for AudioCodecType.
var (
	AudioCodecType_name = map[int32]string{
		0:  "AUDIO_CODEC_TYPE_UNSPECIFIED",
		1:  "AUDIO_CODEC_TYPE_AAC",
		2:  "AUDIO_CODEC_TYPE_ADPCM",
		3:  "AUDIO_CODEC_TYPE_ALAW",
		4:  "AUDIO_CODEC_TYPE_AMR_NB",
		5:  "AUDIO_CODEC_TYPE_AMR_WB",
		6:  "AUDIO_CODEC_TYPE_FLAC",
		7:  "AUDIO_CODEC_TYPE_MP2",
		8:  "AUDIO_CODEC_TYPE_MP3",
		9:  "AUDIO_CODEC_TYPE_MULAW",
		10: "AUDIO_CODEC_TYPE_PCM",
		11: "AUDIO_CODEC_TYPE_PDM",
		12: "AUDIO_CODEC_TYPE_QCELP",
		13: "AUDIO_CODEC_TYPE_REALAUDIO",
		14: "AUDIO_CODEC_TYPE_SHOCKWAVE",
		15: "AUDIO_CODEC_TYPE_UNKNOWN",
		16: "AUDIO_CODEC_TYPE_USERDEFINED",
		17: "AUDIO_CODEC_TYPE_VORBIS",
		18: "AUDIO_CODEC_TYPE_WMA",
		19: "AUDIO_CODEC_TYPE_AMR",
		20: "AUDIO_CODEC_TYPE_ATMOS",
		21: "AUDIO_CODEC_TYPE_MP",
		22: "AUDIO_CODEC_TYPE_MQA",
	}
	AudioCodecType_value = map[string]int32{
		"AUDIO_CODEC_TYPE_UNSPECIFIED": 0,
		"AUDIO_CODEC_TYPE_AAC":         1,
		"AUDIO_CODEC_TYPE_ADPCM":       2,
		"AUDIO_CODEC_TYPE_ALAW":        3,
		"AUDIO_CODEC_TYPE_AMR_NB":      4,
		"AUDIO_CODEC_TYPE_AMR_WB":      5,
		"AUDIO_CODEC_TYPE_FLAC":        6,
		"AUDIO_CODEC_TYPE_MP2":         7,
		"AUDIO_CODEC_TYPE_MP3":         8,
		"AUDIO_CODEC_TYPE_MULAW":       9,
		"AUDIO_CODEC_TYPE_PCM":         10,
		"AUDIO_CODEC_TYPE_PDM":         11,
		"AUDIO_CODEC_TYPE_QCELP":       12,
		"AUDIO_CODEC_TYPE_REALAUDIO":   13,
		"AUDIO_CODEC_TYPE_SHOCKWAVE":   14,
		"AUDIO_CODEC_TYPE_UNKNOWN":     15,
		"AUDIO_CODEC_TYPE_USERDEFINED": 16,
		"AUDIO_CODEC_TYPE_VORBIS":      17,
		"AUDIO_CODEC_TYPE_WMA":         18,
		"AUDIO_CODEC_TYPE_AMR":         19,
		"AUDIO_CODEC_TYPE_ATMOS":       20,
		"AUDIO_CODEC_TYPE_MP":          21,
		"AUDIO_CODEC_TYPE_MQA":         22,
	}
)

func (x AudioCodecType) Enum() *AudioCodecType {
	p := new(AudioCodecType)
	*p = x
	return p
}

func (x AudioCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[4].Descriptor()
}

func (AudioCodecType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[4]
}

func (x AudioCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCodecType.Descriptor instead.
func (AudioCodecType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{4}
}

type BinaryDataType int32

const (
	BinaryDataType_BINARY_DATA_TYPE_UNSPECIFIED BinaryDataType = 0
	BinaryDataType_BINARY_DATA_TYPE_BINARY64    BinaryDataType = 1
	BinaryDataType_BINARY_DATA_TYPE_HEXBINARY   BinaryDataType = 2
)

// Enum value maps for BinaryDataType.
var (
	BinaryDataType_name = map[int32]string{
		0: "BINARY_DATA_TYPE_UNSPECIFIED",
		1: "BINARY_DATA_TYPE_BINARY64",
		2: "BINARY_DATA_TYPE_HEXBINARY",
	}
	BinaryDataType_value = map[string]int32{
		"BINARY_DATA_TYPE_UNSPECIFIED": 0,
		"BINARY_DATA_TYPE_BINARY64":    1,
		"BINARY_DATA_TYPE_HEXBINARY":   2,
	}
)

func (x BinaryDataType) Enum() *BinaryDataType {
	p := new(BinaryDataType)
	*p = x
	return p
}

func (x BinaryDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[5].Descriptor()
}

func (BinaryDataType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[5]
}

func (x BinaryDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryDataType.Descriptor instead.
func (BinaryDataType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{5}
}

type BusinessContributorRole int32

const (
	BusinessContributorRole_BUSINESS_CONTRIBUTOR_ROLE_UNSPECIFIED          BusinessContributorRole = 0
	BusinessContributorRole_BUSINESS_CONTRIBUTOR_ROLE_CONTRIBUTOR          BusinessContributorRole = 1
	BusinessContributorRole_BUSINESS_CONTRIBUTOR_ROLE_MUSICPUBLISHER       BusinessContributorRole = 2
	BusinessContributorRole_BUSINESS_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER    BusinessContributorRole = 3
	BusinessContributorRole_BUSINESS_CONTRIBUTOR_ROLE_SUBPUBLISHER         BusinessContributorRole = 4
	BusinessContributorRole_BUSINESS_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER BusinessContributorRole = 5
	BusinessContributorRole_BUSINESS_CONTRIBUTOR_ROLE_UNKNOWN              BusinessContributorRole = 6
	BusinessContributorRole_BUSINESS_CONTRIBUTOR_ROLE_USERDEFINED          BusinessContributorRole = 7
)

// Enum value maps for BusinessContributorRole.
var (
	BusinessContributorRole_name = map[int32]string{
		0: "BUSINESS_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1: "BUSINESS_CONTRIBUTOR_ROLE_CONTRIBUTOR",
		2: "BUSINESS_CONTRIBUTOR_ROLE_MUSICPUBLISHER",
		3: "BUSINESS_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER",
		4: "BUSINESS_CONTRIBUTOR_ROLE_SUBPUBLISHER",
		5: "BUSINESS_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER",
		6: "BUSINESS_CONTRIBUTOR_ROLE_UNKNOWN",
		7: "BUSINESS_CONTRIBUTOR_ROLE_USERDEFINED",
	}
	BusinessContributorRole_value = map[string]int32{
		"BUSINESS_CONTRIBUTOR_ROLE_UNSPECIFIED":          0,
		"BUSINESS_CONTRIBUTOR_ROLE_CONTRIBUTOR":          1,
		"BUSINESS_CONTRIBUTOR_ROLE_MUSICPUBLISHER":       2,
		"BUSINESS_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER":    3,
		"BUSINESS_CONTRIBUTOR_ROLE_SUBPUBLISHER":         4,
		"BUSINESS_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER": 5,
		"BUSINESS_CONTRIBUTOR_ROLE_UNKNOWN":              6,
		"BUSINESS_CONTRIBUTOR_ROLE_USERDEFINED":          7,
	}
)

func (x BusinessContributorRole) Enum() *BusinessContributorRole {
	p := new(BusinessContributorRole)
	*p = x
	return p
}

func (x BusinessContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[6].Descriptor()
}

func (BusinessContributorRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[6]
}

func (x BusinessContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessContributorRole.Descriptor instead.
func (BusinessContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{6}
}

type CarrierType int32

const (
	CarrierType_CARRIER_TYPE_UNSPECIFIED                  CarrierType = 0
	CarrierType_CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX     CarrierType = 1
	CarrierType_CARRIER_TYPE_E_33RPM10INCHLP              CarrierType = 2
	CarrierType_CARRIER_TYPE_E_33RPM10INCHSINGLE          CarrierType = 3
	CarrierType_CARRIER_TYPE_E_33RPM12INCHLP              CarrierType = 4
	CarrierType_CARRIER_TYPE_E_33RPM12INCHLP20TRACKS      CarrierType = 5
	CarrierType_CARRIER_TYPE_E_33RPM12INCHMAXISINGLE      CarrierType = 6
	CarrierType_CARRIER_TYPE_E_33RPM12INCHSINGLE          CarrierType = 7
	CarrierType_CARRIER_TYPE_E_33RPM7INCHLP               CarrierType = 8
	CarrierType_CARRIER_TYPE_E_33RPM7INCHSINGLE           CarrierType = 9
	CarrierType_CARRIER_TYPE_E_45RPM10INCHLP              CarrierType = 10
	CarrierType_CARRIER_TYPE_E_45RPM10INCHMAXISINGLE      CarrierType = 11
	CarrierType_CARRIER_TYPE_E_45RPM10INCHSINGLE          CarrierType = 12
	CarrierType_CARRIER_TYPE_E_45RPM12INCHLP              CarrierType = 13
	CarrierType_CARRIER_TYPE_E_45RPM12INCHMAXISINGLE      CarrierType = 14
	CarrierType_CARRIER_TYPE_E_45RPM12INCHSINGLE          CarrierType = 15
	CarrierType_CARRIER_TYPE_E_45RPM7INCHEP               CarrierType = 16
	CarrierType_CARRIER_TYPE_E_45RPM7INCHSINGLE           CarrierType = 17
	CarrierType_CARRIER_TYPE_E_7INCHMAXISINGLEREMIX       CarrierType = 18
	CarrierType_CARRIER_TYPE_BLURAY                       CarrierType = 19
	CarrierType_CARRIER_TYPE_CD                           CarrierType = 20
	CarrierType_CARRIER_TYPE_CDCOMPILATION                CarrierType = 21
	CarrierType_CARRIER_TYPE_CDEP                         CarrierType = 22
	CarrierType_CARRIER_TYPE_CDEPENHANCED                 CarrierType = 23
	CarrierType_CARRIER_TYPE_CDEXTRACOMPILATION           CarrierType = 24
	CarrierType_CARRIER_TYPE_CDEXTRAEP                    CarrierType = 25
	CarrierType_CARRIER_TYPE_CDEXTRALP                    CarrierType = 26
	CarrierType_CARRIER_TYPE_CDEXTRAMAXIREMIX             CarrierType = 27
	CarrierType_CARRIER_TYPE_CDEXTRAMAXISINGLE            CarrierType = 28
	CarrierType_CARRIER_TYPE_CDEXTRASINGLE                CarrierType = 29
	CarrierType_CARRIER_TYPE_CDEXTRASINGLE2TRACKS         CarrierType = 30
	CarrierType_CARRIER_TYPE_CDLP                         CarrierType = 31
	CarrierType_CARRIER_TYPE_CDLP5INCH                    CarrierType = 32
	CarrierType_CARRIER_TYPE_CDLPENHANCED                 CarrierType = 33
	CarrierType_CARRIER_TYPE_CDLPPLUSCDVIDEO              CarrierType = 34
	CarrierType_CARRIER_TYPE_CDLPPLUSDVDAUDIO             CarrierType = 35
	CarrierType_CARRIER_TYPE_CDLPPLUSDVDVIDEO             CarrierType = 36
	CarrierType_CARRIER_TYPE_CDLPPLUSWEB                  CarrierType = 37
	CarrierType_CARRIER_TYPE_CDMAXISINGLE                 CarrierType = 38
	CarrierType_CARRIER_TYPE_CDMAXISINGLE3INCH            CarrierType = 39
	CarrierType_CARRIER_TYPE_CDMAXISINGLEENHANCED         CarrierType = 40
	CarrierType_CARRIER_TYPE_CDMAXISINGLEREMIX            CarrierType = 41
	CarrierType_CARRIER_TYPE_CDPLUSCDBONUS                CarrierType = 42
	CarrierType_CARRIER_TYPE_CDPLUSDVDBONUS               CarrierType = 43
	CarrierType_CARRIER_TYPE_CDROM                        CarrierType = 44
	CarrierType_CARRIER_TYPE_CDSINGLE                     CarrierType = 45
	CarrierType_CARRIER_TYPE_CDSINGLE3INCH                CarrierType = 46
	CarrierType_CARRIER_TYPE_CDSINGLE5INCH                CarrierType = 47
	CarrierType_CARRIER_TYPE_CDVIDEO5LPNTSC               CarrierType = 48
	CarrierType_CARRIER_TYPE_CDVIDEO5LPPAL                CarrierType = 49
	CarrierType_CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE       CarrierType = 50
	CarrierType_CARRIER_TYPE_COMBIPACK                    CarrierType = 51
	CarrierType_CARRIER_TYPE_DCC                          CarrierType = 52
	CarrierType_CARRIER_TYPE_DCCCOMPILATION               CarrierType = 53
	CarrierType_CARRIER_TYPE_DUALDISC                     CarrierType = 54
	CarrierType_CARRIER_TYPE_DVD                          CarrierType = 55
	CarrierType_CARRIER_TYPE_DVDAUDIO                     CarrierType = 56
	CarrierType_CARRIER_TYPE_DVDAUDIO5MAXISINGLE          CarrierType = 57
	CarrierType_CARRIER_TYPE_DVDAUDIOLP                   CarrierType = 58
	CarrierType_CARRIER_TYPE_DVDAUDIOSINGLE               CarrierType = 59
	CarrierType_CARRIER_TYPE_DVDROM                       CarrierType = 60
	CarrierType_CARRIER_TYPE_DVDSINGLE                    CarrierType = 61
	CarrierType_CARRIER_TYPE_DVDVIDEO                     CarrierType = 62
	CarrierType_CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC      CarrierType = 63
	CarrierType_CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL       CarrierType = 64
	CarrierType_CARRIER_TYPE_DVDVIDEO5SINGLENTSC          CarrierType = 65
	CarrierType_CARRIER_TYPE_DVDVIDEO5SINGLEPAL           CarrierType = 66
	CarrierType_CARRIER_TYPE_DVDVIDEOLPNTSC               CarrierType = 67
	CarrierType_CARRIER_TYPE_DVDVIDEOLPPAL                CarrierType = 68
	CarrierType_CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE CarrierType = 69
	CarrierType_CARRIER_TYPE_FANPACK                      CarrierType = 70
	CarrierType_CARRIER_TYPE_HDDVDVIDEOLP                 CarrierType = 71
	CarrierType_CARRIER_TYPE_LASERDISCLP12INCHNTSC        CarrierType = 72
	CarrierType_CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP      CarrierType = 73
	CarrierType_CARRIER_TYPE_LPCOMPILATION                CarrierType = 74
	CarrierType_CARRIER_TYPE_LPIDENTICALTOCD              CarrierType = 75
	CarrierType_CARRIER_TYPE_MC                           CarrierType = 76
	CarrierType_CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP      CarrierType = 77
	CarrierType_CARRIER_TYPE_MCCOMPILATION                CarrierType = 78
	CarrierType_CARRIER_TYPE_MCDOUBLELP                   CarrierType = 79
	CarrierType_CARRIER_TYPE_MCEP                         CarrierType = 80
	CarrierType_CARRIER_TYPE_MCIDENTICALTOCD              CarrierType = 81
	CarrierType_CARRIER_TYPE_MCLP                         CarrierType = 82
	CarrierType_CARRIER_TYPE_MCMAXISINGLE                 CarrierType = 83
	CarrierType_CARRIER_TYPE_MCREMIX                      CarrierType = 84
	CarrierType_CARRIER_TYPE_MCSINGLE                     CarrierType = 85
	CarrierType_CARRIER_TYPE_MCSINGLEIDENTICALTOCDS       CarrierType = 86
	CarrierType_CARRIER_TYPE_MEMORYDEVICEAUDIOLP          CarrierType = 87
	CarrierType_CARRIER_TYPE_MEMORYDEVICEMIXLP            CarrierType = 88
	CarrierType_CARRIER_TYPE_MEMORYDEVICEVIDEOLP          CarrierType = 89
	CarrierType_CARRIER_TYPE_MERCHANDISE                  CarrierType = 90
	CarrierType_CARRIER_TYPE_MINIDISC                     CarrierType = 91
	CarrierType_CARRIER_TYPE_MINIDISCCOMPILATION          CarrierType = 92
	CarrierType_CARRIER_TYPE_MINIDISCEP                   CarrierType = 93
	CarrierType_CARRIER_TYPE_MINIDISCMAXIREMIX            CarrierType = 94
	CarrierType_CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE     CarrierType = 95
	CarrierType_CARRIER_TYPE_PREPAIDCARD                  CarrierType = 96
	CarrierType_CARRIER_TYPE_SACD                         CarrierType = 97
	CarrierType_CARRIER_TYPE_SACDCOMPILATION              CarrierType = 98
	CarrierType_CARRIER_TYPE_SACDLPSTEREO                 CarrierType = 99
	CarrierType_CARRIER_TYPE_SACDLPSTEREOCDAUDIO          CarrierType = 100
	CarrierType_CARRIER_TYPE_SACDLPSTEREOSURROUND         CarrierType = 101
	CarrierType_CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO  CarrierType = 102
	CarrierType_CARRIER_TYPE_SACDLPSURROUNDCDAUDIO        CarrierType = 103
	CarrierType_CARRIER_TYPE_SACDPLUSDVDVIDEO             CarrierType = 104
	CarrierType_CARRIER_TYPE_USERDEFINED                  CarrierType = 105
	CarrierType_CARRIER_TYPE_VHSNTSC                      CarrierType = 106
	CarrierType_CARRIER_TYPE_VHSPAL                       CarrierType = 107
	CarrierType_CARRIER_TYPE_VHSPLUSCDLP                  CarrierType = 108
	CarrierType_CARRIER_TYPE_VHSSECAM                     CarrierType = 109
	CarrierType_CARRIER_TYPE_FILESYSTEM                   CarrierType = 110
	CarrierType_CARRIER_TYPE_MEMORYDEVICE                 CarrierType = 111
	CarrierType_CARRIER_TYPE_ONLINESYSTEM                 CarrierType = 112
)

// Enum value maps for CarrierType.
var (
	CarrierType_name = map[int32]string{
		0:   "CARRIER_TYPE_UNSPECIFIED",
		1:   "CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX",
		2:   "CARRIER_TYPE_E_33RPM10INCHLP",
		3:   "CARRIER_TYPE_E_33RPM10INCHSINGLE",
		4:   "CARRIER_TYPE_E_33RPM12INCHLP",
		5:   "CARRIER_TYPE_E_33RPM12INCHLP20TRACKS",
		6:   "CARRIER_TYPE_E_33RPM12INCHMAXISINGLE",
		7:   "CARRIER_TYPE_E_33RPM12INCHSINGLE",
		8:   "CARRIER_TYPE_E_33RPM7INCHLP",
		9:   "CARRIER_TYPE_E_33RPM7INCHSINGLE",
		10:  "CARRIER_TYPE_E_45RPM10INCHLP",
		11:  "CARRIER_TYPE_E_45RPM10INCHMAXISINGLE",
		12:  "CARRIER_TYPE_E_45RPM10INCHSINGLE",
		13:  "CARRIER_TYPE_E_45RPM12INCHLP",
		14:  "CARRIER_TYPE_E_45RPM12INCHMAXISINGLE",
		15:  "CARRIER_TYPE_E_45RPM12INCHSINGLE",
		16:  "CARRIER_TYPE_E_45RPM7INCHEP",
		17:  "CARRIER_TYPE_E_45RPM7INCHSINGLE",
		18:  "CARRIER_TYPE_E_7INCHMAXISINGLEREMIX",
		19:  "CARRIER_TYPE_BLURAY",
		20:  "CARRIER_TYPE_CD",
		21:  "CARRIER_TYPE_CDCOMPILATION",
		22:  "CARRIER_TYPE_CDEP",
		23:  "CARRIER_TYPE_CDEPENHANCED",
		24:  "CARRIER_TYPE_CDEXTRACOMPILATION",
		25:  "CARRIER_TYPE_CDEXTRAEP",
		26:  "CARRIER_TYPE_CDEXTRALP",
		27:  "CARRIER_TYPE_CDEXTRAMAXIREMIX",
		28:  "CARRIER_TYPE_CDEXTRAMAXISINGLE",
		29:  "CARRIER_TYPE_CDEXTRASINGLE",
		30:  "CARRIER_TYPE_CDEXTRASINGLE2TRACKS",
		31:  "CARRIER_TYPE_CDLP",
		32:  "CARRIER_TYPE_CDLP5INCH",
		33:  "CARRIER_TYPE_CDLPENHANCED",
		34:  "CARRIER_TYPE_CDLPPLUSCDVIDEO",
		35:  "CARRIER_TYPE_CDLPPLUSDVDAUDIO",
		36:  "CARRIER_TYPE_CDLPPLUSDVDVIDEO",
		37:  "CARRIER_TYPE_CDLPPLUSWEB",
		38:  "CARRIER_TYPE_CDMAXISINGLE",
		39:  "CARRIER_TYPE_CDMAXISINGLE3INCH",
		40:  "CARRIER_TYPE_CDMAXISINGLEENHANCED",
		41:  "CARRIER_TYPE_CDMAXISINGLEREMIX",
		42:  "CARRIER_TYPE_CDPLUSCDBONUS",
		43:  "CARRIER_TYPE_CDPLUSDVDBONUS",
		44:  "CARRIER_TYPE_CDROM",
		45:  "CARRIER_TYPE_CDSINGLE",
		46:  "CARRIER_TYPE_CDSINGLE3INCH",
		47:  "CARRIER_TYPE_CDSINGLE5INCH",
		48:  "CARRIER_TYPE_CDVIDEO5LPNTSC",
		49:  "CARRIER_TYPE_CDVIDEO5LPPAL",
		50:  "CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE",
		51:  "CARRIER_TYPE_COMBIPACK",
		52:  "CARRIER_TYPE_DCC",
		53:  "CARRIER_TYPE_DCCCOMPILATION",
		54:  "CARRIER_TYPE_DUALDISC",
		55:  "CARRIER_TYPE_DVD",
		56:  "CARRIER_TYPE_DVDAUDIO",
		57:  "CARRIER_TYPE_DVDAUDIO5MAXISINGLE",
		58:  "CARRIER_TYPE_DVDAUDIOLP",
		59:  "CARRIER_TYPE_DVDAUDIOSINGLE",
		60:  "CARRIER_TYPE_DVDROM",
		61:  "CARRIER_TYPE_DVDSINGLE",
		62:  "CARRIER_TYPE_DVDVIDEO",
		63:  "CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC",
		64:  "CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL",
		65:  "CARRIER_TYPE_DVDVIDEO5SINGLENTSC",
		66:  "CARRIER_TYPE_DVDVIDEO5SINGLEPAL",
		67:  "CARRIER_TYPE_DVDVIDEOLPNTSC",
		68:  "CARRIER_TYPE_DVDVIDEOLPPAL",
		69:  "CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE",
		70:  "CARRIER_TYPE_FANPACK",
		71:  "CARRIER_TYPE_HDDVDVIDEOLP",
		72:  "CARRIER_TYPE_LASERDISCLP12INCHNTSC",
		73:  "CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP",
		74:  "CARRIER_TYPE_LPCOMPILATION",
		75:  "CARRIER_TYPE_LPIDENTICALTOCD",
		76:  "CARRIER_TYPE_MC",
		77:  "CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP",
		78:  "CARRIER_TYPE_MCCOMPILATION",
		79:  "CARRIER_TYPE_MCDOUBLELP",
		80:  "CARRIER_TYPE_MCEP",
		81:  "CARRIER_TYPE_MCIDENTICALTOCD",
		82:  "CARRIER_TYPE_MCLP",
		83:  "CARRIER_TYPE_MCMAXISINGLE",
		84:  "CARRIER_TYPE_MCREMIX",
		85:  "CARRIER_TYPE_MCSINGLE",
		86:  "CARRIER_TYPE_MCSINGLEIDENTICALTOCDS",
		87:  "CARRIER_TYPE_MEMORYDEVICEAUDIOLP",
		88:  "CARRIER_TYPE_MEMORYDEVICEMIXLP",
		89:  "CARRIER_TYPE_MEMORYDEVICEVIDEOLP",
		90:  "CARRIER_TYPE_MERCHANDISE",
		91:  "CARRIER_TYPE_MINIDISC",
		92:  "CARRIER_TYPE_MINIDISCCOMPILATION",
		93:  "CARRIER_TYPE_MINIDISCEP",
		94:  "CARRIER_TYPE_MINIDISCMAXIREMIX",
		95:  "CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE",
		96:  "CARRIER_TYPE_PREPAIDCARD",
		97:  "CARRIER_TYPE_SACD",
		98:  "CARRIER_TYPE_SACDCOMPILATION",
		99:  "CARRIER_TYPE_SACDLPSTEREO",
		100: "CARRIER_TYPE_SACDLPSTEREOCDAUDIO",
		101: "CARRIER_TYPE_SACDLPSTEREOSURROUND",
		102: "CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO",
		103: "CARRIER_TYPE_SACDLPSURROUNDCDAUDIO",
		104: "CARRIER_TYPE_SACDPLUSDVDVIDEO",
		105: "CARRIER_TYPE_USERDEFINED",
		106: "CARRIER_TYPE_VHSNTSC",
		107: "CARRIER_TYPE_VHSPAL",
		108: "CARRIER_TYPE_VHSPLUSCDLP",
		109: "CARRIER_TYPE_VHSSECAM",
		110: "CARRIER_TYPE_FILESYSTEM",
		111: "CARRIER_TYPE_MEMORYDEVICE",
		112: "CARRIER_TYPE_ONLINESYSTEM",
	}
	CarrierType_value = map[string]int32{
		"CARRIER_TYPE_UNSPECIFIED":                  0,
		"CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX":     1,
		"CARRIER_TYPE_E_33RPM10INCHLP":              2,
		"CARRIER_TYPE_E_33RPM10INCHSINGLE":          3,
		"CARRIER_TYPE_E_33RPM12INCHLP":              4,
		"CARRIER_TYPE_E_33RPM12INCHLP20TRACKS":      5,
		"CARRIER_TYPE_E_33RPM12INCHMAXISINGLE":      6,
		"CARRIER_TYPE_E_33RPM12INCHSINGLE":          7,
		"CARRIER_TYPE_E_33RPM7INCHLP":               8,
		"CARRIER_TYPE_E_33RPM7INCHSINGLE":           9,
		"CARRIER_TYPE_E_45RPM10INCHLP":              10,
		"CARRIER_TYPE_E_45RPM10INCHMAXISINGLE":      11,
		"CARRIER_TYPE_E_45RPM10INCHSINGLE":          12,
		"CARRIER_TYPE_E_45RPM12INCHLP":              13,
		"CARRIER_TYPE_E_45RPM12INCHMAXISINGLE":      14,
		"CARRIER_TYPE_E_45RPM12INCHSINGLE":          15,
		"CARRIER_TYPE_E_45RPM7INCHEP":               16,
		"CARRIER_TYPE_E_45RPM7INCHSINGLE":           17,
		"CARRIER_TYPE_E_7INCHMAXISINGLEREMIX":       18,
		"CARRIER_TYPE_BLURAY":                       19,
		"CARRIER_TYPE_CD":                           20,
		"CARRIER_TYPE_CDCOMPILATION":                21,
		"CARRIER_TYPE_CDEP":                         22,
		"CARRIER_TYPE_CDEPENHANCED":                 23,
		"CARRIER_TYPE_CDEXTRACOMPILATION":           24,
		"CARRIER_TYPE_CDEXTRAEP":                    25,
		"CARRIER_TYPE_CDEXTRALP":                    26,
		"CARRIER_TYPE_CDEXTRAMAXIREMIX":             27,
		"CARRIER_TYPE_CDEXTRAMAXISINGLE":            28,
		"CARRIER_TYPE_CDEXTRASINGLE":                29,
		"CARRIER_TYPE_CDEXTRASINGLE2TRACKS":         30,
		"CARRIER_TYPE_CDLP":                         31,
		"CARRIER_TYPE_CDLP5INCH":                    32,
		"CARRIER_TYPE_CDLPENHANCED":                 33,
		"CARRIER_TYPE_CDLPPLUSCDVIDEO":              34,
		"CARRIER_TYPE_CDLPPLUSDVDAUDIO":             35,
		"CARRIER_TYPE_CDLPPLUSDVDVIDEO":             36,
		"CARRIER_TYPE_CDLPPLUSWEB":                  37,
		"CARRIER_TYPE_CDMAXISINGLE":                 38,
		"CARRIER_TYPE_CDMAXISINGLE3INCH":            39,
		"CARRIER_TYPE_CDMAXISINGLEENHANCED":         40,
		"CARRIER_TYPE_CDMAXISINGLEREMIX":            41,
		"CARRIER_TYPE_CDPLUSCDBONUS":                42,
		"CARRIER_TYPE_CDPLUSDVDBONUS":               43,
		"CARRIER_TYPE_CDROM":                        44,
		"CARRIER_TYPE_CDSINGLE":                     45,
		"CARRIER_TYPE_CDSINGLE3INCH":                46,
		"CARRIER_TYPE_CDSINGLE5INCH":                47,
		"CARRIER_TYPE_CDVIDEO5LPNTSC":               48,
		"CARRIER_TYPE_CDVIDEO5LPPAL":                49,
		"CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE":       50,
		"CARRIER_TYPE_COMBIPACK":                    51,
		"CARRIER_TYPE_DCC":                          52,
		"CARRIER_TYPE_DCCCOMPILATION":               53,
		"CARRIER_TYPE_DUALDISC":                     54,
		"CARRIER_TYPE_DVD":                          55,
		"CARRIER_TYPE_DVDAUDIO":                     56,
		"CARRIER_TYPE_DVDAUDIO5MAXISINGLE":          57,
		"CARRIER_TYPE_DVDAUDIOLP":                   58,
		"CARRIER_TYPE_DVDAUDIOSINGLE":               59,
		"CARRIER_TYPE_DVDROM":                       60,
		"CARRIER_TYPE_DVDSINGLE":                    61,
		"CARRIER_TYPE_DVDVIDEO":                     62,
		"CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC":      63,
		"CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL":       64,
		"CARRIER_TYPE_DVDVIDEO5SINGLENTSC":          65,
		"CARRIER_TYPE_DVDVIDEO5SINGLEPAL":           66,
		"CARRIER_TYPE_DVDVIDEOLPNTSC":               67,
		"CARRIER_TYPE_DVDVIDEOLPPAL":                68,
		"CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE": 69,
		"CARRIER_TYPE_FANPACK":                      70,
		"CARRIER_TYPE_HDDVDVIDEOLP":                 71,
		"CARRIER_TYPE_LASERDISCLP12INCHNTSC":        72,
		"CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP":      73,
		"CARRIER_TYPE_LPCOMPILATION":                74,
		"CARRIER_TYPE_LPIDENTICALTOCD":              75,
		"CARRIER_TYPE_MC":                           76,
		"CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP":      77,
		"CARRIER_TYPE_MCCOMPILATION":                78,
		"CARRIER_TYPE_MCDOUBLELP":                   79,
		"CARRIER_TYPE_MCEP":                         80,
		"CARRIER_TYPE_MCIDENTICALTOCD":              81,
		"CARRIER_TYPE_MCLP":                         82,
		"CARRIER_TYPE_MCMAXISINGLE":                 83,
		"CARRIER_TYPE_MCREMIX":                      84,
		"CARRIER_TYPE_MCSINGLE":                     85,
		"CARRIER_TYPE_MCSINGLEIDENTICALTOCDS":       86,
		"CARRIER_TYPE_MEMORYDEVICEAUDIOLP":          87,
		"CARRIER_TYPE_MEMORYDEVICEMIXLP":            88,
		"CARRIER_TYPE_MEMORYDEVICEVIDEOLP":          89,
		"CARRIER_TYPE_MERCHANDISE":                  90,
		"CARRIER_TYPE_MINIDISC":                     91,
		"CARRIER_TYPE_MINIDISCCOMPILATION":          92,
		"CARRIER_TYPE_MINIDISCEP":                   93,
		"CARRIER_TYPE_MINIDISCMAXIREMIX":            94,
		"CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE":     95,
		"CARRIER_TYPE_PREPAIDCARD":                  96,
		"CARRIER_TYPE_SACD":                         97,
		"CARRIER_TYPE_SACDCOMPILATION":              98,
		"CARRIER_TYPE_SACDLPSTEREO":                 99,
		"CARRIER_TYPE_SACDLPSTEREOCDAUDIO":          100,
		"CARRIER_TYPE_SACDLPSTEREOSURROUND":         101,
		"CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO":  102,
		"CARRIER_TYPE_SACDLPSURROUNDCDAUDIO":        103,
		"CARRIER_TYPE_SACDPLUSDVDVIDEO":             104,
		"CARRIER_TYPE_USERDEFINED":                  105,
		"CARRIER_TYPE_VHSNTSC":                      106,
		"CARRIER_TYPE_VHSPAL":                       107,
		"CARRIER_TYPE_VHSPLUSCDLP":                  108,
		"CARRIER_TYPE_VHSSECAM":                     109,
		"CARRIER_TYPE_FILESYSTEM":                   110,
		"CARRIER_TYPE_MEMORYDEVICE":                 111,
		"CARRIER_TYPE_ONLINESYSTEM":                 112,
	}
)

func (x CarrierType) Enum() *CarrierType {
	p := new(CarrierType)
	*p = x
	return p
}

func (x CarrierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarrierType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[7].Descriptor()
}

func (CarrierType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[7]
}

func (x CarrierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarrierType.Descriptor instead.
func (CarrierType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{7}
}

type CdProtectionType int32

const (
	CdProtectionType_CD_PROTECTION_TYPE_UNSPECIFIED  CdProtectionType = 0
	CdProtectionType_CD_PROTECTION_TYPE_CDS100       CdProtectionType = 1
	CdProtectionType_CD_PROTECTION_TYPE_CDS200       CdProtectionType = 2
	CdProtectionType_CD_PROTECTION_TYPE_CDS300       CdProtectionType = 3
	CdProtectionType_CD_PROTECTION_TYPE_KEY2AUDIO    CdProtectionType = 4
	CdProtectionType_CD_PROTECTION_TYPE_MEDIAMAXCD3  CdProtectionType = 5
	CdProtectionType_CD_PROTECTION_TYPE_NOTPROTECTED CdProtectionType = 6
	CdProtectionType_CD_PROTECTION_TYPE_UNKNOWN      CdProtectionType = 7
	CdProtectionType_CD_PROTECTION_TYPE_USERDEFINED  CdProtectionType = 8
)

// Enum value maps for CdProtectionType.
var (
	CdProtectionType_name = map[int32]string{
		0: "CD_PROTECTION_TYPE_UNSPECIFIED",
		1: "CD_PROTECTION_TYPE_CDS100",
		2: "CD_PROTECTION_TYPE_CDS200",
		3: "CD_PROTECTION_TYPE_CDS300",
		4: "CD_PROTECTION_TYPE_KEY2AUDIO",
		5: "CD_PROTECTION_TYPE_MEDIAMAXCD3",
		6: "CD_PROTECTION_TYPE_NOTPROTECTED",
		7: "CD_PROTECTION_TYPE_UNKNOWN",
		8: "CD_PROTECTION_TYPE_USERDEFINED",
	}
	CdProtectionType_value = map[string]int32{
		"CD_PROTECTION_TYPE_UNSPECIFIED":  0,
		"CD_PROTECTION_TYPE_CDS100":       1,
		"CD_PROTECTION_TYPE_CDS200":       2,
		"CD_PROTECTION_TYPE_CDS300":       3,
		"CD_PROTECTION_TYPE_KEY2AUDIO":    4,
		"CD_PROTECTION_TYPE_MEDIAMAXCD3":  5,
		"CD_PROTECTION_TYPE_NOTPROTECTED": 6,
		"CD_PROTECTION_TYPE_UNKNOWN":      7,
		"CD_PROTECTION_TYPE_USERDEFINED":  8,
	}
)

func (x CdProtectionType) Enum() *CdProtectionType {
	p := new(CdProtectionType)
	*p = x
	return p
}

func (x CdProtectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CdProtectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[8].Descriptor()
}

func (CdProtectionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[8]
}

func (x CdProtectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CdProtectionType.Descriptor instead.
func (CdProtectionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{8}
}

type CharacterType int32

const (
	CharacterType_CHARACTER_TYPE_UNSPECIFIED         CharacterType = 0
	CharacterType_CHARACTER_TYPE_MAINCHARACTER       CharacterType = 1
	CharacterType_CHARACTER_TYPE_OTHERCHARACTER      CharacterType = 2
	CharacterType_CHARACTER_TYPE_SUPPORTINGCHARACTER CharacterType = 3
)

// Enum value maps for CharacterType.
var (
	CharacterType_name = map[int32]string{
		0: "CHARACTER_TYPE_UNSPECIFIED",
		1: "CHARACTER_TYPE_MAINCHARACTER",
		2: "CHARACTER_TYPE_OTHERCHARACTER",
		3: "CHARACTER_TYPE_SUPPORTINGCHARACTER",
	}
	CharacterType_value = map[string]int32{
		"CHARACTER_TYPE_UNSPECIFIED":         0,
		"CHARACTER_TYPE_MAINCHARACTER":       1,
		"CHARACTER_TYPE_OTHERCHARACTER":      2,
		"CHARACTER_TYPE_SUPPORTINGCHARACTER": 3,
	}
)

func (x CharacterType) Enum() *CharacterType {
	p := new(CharacterType)
	*p = x
	return p
}

func (x CharacterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[9].Descriptor()
}

func (CharacterType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[9]
}

func (x CharacterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterType.Descriptor instead.
func (CharacterType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{9}
}

type CodingType int32

const (
	CodingType_CODING_TYPE_UNSPECIFIED CodingType = 0
	CodingType_CODING_TYPE_LOSSLESS    CodingType = 1
	CodingType_CODING_TYPE_LOSSY       CodingType = 2
)

// Enum value maps for CodingType.
var (
	CodingType_name = map[int32]string{
		0: "CODING_TYPE_UNSPECIFIED",
		1: "CODING_TYPE_LOSSLESS",
		2: "CODING_TYPE_LOSSY",
	}
	CodingType_value = map[string]int32{
		"CODING_TYPE_UNSPECIFIED": 0,
		"CODING_TYPE_LOSSLESS":    1,
		"CODING_TYPE_LOSSY":       2,
	}
)

func (x CodingType) Enum() *CodingType {
	p := new(CodingType)
	*p = x
	return p
}

func (x CodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[10].Descriptor()
}

func (CodingType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[10]
}

func (x CodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodingType.Descriptor instead.
func (CodingType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{10}
}

type CollectionType int32

const (
	CollectionType_COLLECTION_TYPE_UNSPECIFIED      CollectionType = 0
	CollectionType_COLLECTION_TYPE_AUDIOCHAPTER     CollectionType = 1
	CollectionType_COLLECTION_TYPE_EPISODE          CollectionType = 2
	CollectionType_COLLECTION_TYPE_FILMBUNDLE       CollectionType = 3
	CollectionType_COLLECTION_TYPE_MEDLEYSEGMENT    CollectionType = 4
	CollectionType_COLLECTION_TYPE_POTPOURRISEGMENT CollectionType = 5
	CollectionType_COLLECTION_TYPE_SEASON           CollectionType = 6
	CollectionType_COLLECTION_TYPE_SERIES           CollectionType = 7
	CollectionType_COLLECTION_TYPE_VIDEOCHAPTER     CollectionType = 8
)

// Enum value maps for CollectionType.
var (
	CollectionType_name = map[int32]string{
		0: "COLLECTION_TYPE_UNSPECIFIED",
		1: "COLLECTION_TYPE_AUDIOCHAPTER",
		2: "COLLECTION_TYPE_EPISODE",
		3: "COLLECTION_TYPE_FILMBUNDLE",
		4: "COLLECTION_TYPE_MEDLEYSEGMENT",
		5: "COLLECTION_TYPE_POTPOURRISEGMENT",
		6: "COLLECTION_TYPE_SEASON",
		7: "COLLECTION_TYPE_SERIES",
		8: "COLLECTION_TYPE_VIDEOCHAPTER",
	}
	CollectionType_value = map[string]int32{
		"COLLECTION_TYPE_UNSPECIFIED":      0,
		"COLLECTION_TYPE_AUDIOCHAPTER":     1,
		"COLLECTION_TYPE_EPISODE":          2,
		"COLLECTION_TYPE_FILMBUNDLE":       3,
		"COLLECTION_TYPE_MEDLEYSEGMENT":    4,
		"COLLECTION_TYPE_POTPOURRISEGMENT": 5,
		"COLLECTION_TYPE_SEASON":           6,
		"COLLECTION_TYPE_SERIES":           7,
		"COLLECTION_TYPE_VIDEOCHAPTER":     8,
	}
)

func (x CollectionType) Enum() *CollectionType {
	p := new(CollectionType)
	*p = x
	return p
}

func (x CollectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[11].Descriptor()
}

func (CollectionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[11]
}

func (x CollectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectionType.Descriptor instead.
func (CollectionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{11}
}

type CommercialModelType int32

const (
	CommercialModelType_COMMERCIAL_MODEL_TYPE_UNSPECIFIED                 CommercialModelType = 0
	CommercialModelType_COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL CommercialModelType = 1
	CommercialModelType_COMMERCIAL_MODEL_TYPE_ASPERCONTRACT               CommercialModelType = 2
	CommercialModelType_COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL              CommercialModelType = 3
	CommercialModelType_COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL           CommercialModelType = 4
	CommercialModelType_COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL             CommercialModelType = 5
	CommercialModelType_COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL   CommercialModelType = 6
	CommercialModelType_COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL            CommercialModelType = 7
	CommercialModelType_COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL           CommercialModelType = 8
	CommercialModelType_COMMERCIAL_MODEL_TYPE_UNKNOWN                     CommercialModelType = 9
	CommercialModelType_COMMERCIAL_MODEL_TYPE_USERDEFINED                 CommercialModelType = 10
)

// Enum value maps for CommercialModelType.
var (
	CommercialModelType_name = map[int32]string{
		0:  "COMMERCIAL_MODEL_TYPE_UNSPECIFIED",
		1:  "COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL",
		2:  "COMMERCIAL_MODEL_TYPE_ASPERCONTRACT",
		3:  "COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL",
		4:  "COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL",
		5:  "COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL",
		6:  "COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL",
		7:  "COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL",
		8:  "COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL",
		9:  "COMMERCIAL_MODEL_TYPE_UNKNOWN",
		10: "COMMERCIAL_MODEL_TYPE_USERDEFINED",
	}
	CommercialModelType_value = map[string]int32{
		"COMMERCIAL_MODEL_TYPE_UNSPECIFIED":                 0,
		"COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL": 1,
		"COMMERCIAL_MODEL_TYPE_ASPERCONTRACT":               2,
		"COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL":              3,
		"COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL":           4,
		"COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL":             5,
		"COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL":   6,
		"COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL":            7,
		"COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL":           8,
		"COMMERCIAL_MODEL_TYPE_UNKNOWN":                     9,
		"COMMERCIAL_MODEL_TYPE_USERDEFINED":                 10,
	}
)

func (x CommercialModelType) Enum() *CommercialModelType {
	p := new(CommercialModelType)
	*p = x
	return p
}

func (x CommercialModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommercialModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[12].Descriptor()
}

func (CommercialModelType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[12]
}

func (x CommercialModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommercialModelType.Descriptor instead.
func (CommercialModelType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{12}
}

type CompilationType int32

const (
	CompilationType_COMPILATION_TYPE_UNSPECIFIED            CompilationType = 0
	CompilationType_COMPILATION_TYPE_INTERNALCOMPILATION    CompilationType = 1
	CompilationType_COMPILATION_TYPE_NONINTERNALCOMPILATION CompilationType = 2
	CompilationType_COMPILATION_TYPE_NOTCOMPILED            CompilationType = 3
)

// Enum value maps for CompilationType.
var (
	CompilationType_name = map[int32]string{
		0: "COMPILATION_TYPE_UNSPECIFIED",
		1: "COMPILATION_TYPE_INTERNALCOMPILATION",
		2: "COMPILATION_TYPE_NONINTERNALCOMPILATION",
		3: "COMPILATION_TYPE_NOTCOMPILED",
	}
	CompilationType_value = map[string]int32{
		"COMPILATION_TYPE_UNSPECIFIED":            0,
		"COMPILATION_TYPE_INTERNALCOMPILATION":    1,
		"COMPILATION_TYPE_NONINTERNALCOMPILATION": 2,
		"COMPILATION_TYPE_NOTCOMPILED":            3,
	}
)

func (x CompilationType) Enum() *CompilationType {
	p := new(CompilationType)
	*p = x
	return p
}

func (x CompilationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompilationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[13].Descriptor()
}

func (CompilationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[13]
}

func (x CompilationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompilationType.Descriptor instead.
func (CompilationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{13}
}

type ContainerFormat int32

const (
	ContainerFormat_CONTAINER_FORMAT_UNSPECIFIED ContainerFormat = 0
	ContainerFormat_CONTAINER_FORMAT_AIFF        ContainerFormat = 1
	ContainerFormat_CONTAINER_FORMAT_AVI         ContainerFormat = 2
	ContainerFormat_CONTAINER_FORMAT_MP4         ContainerFormat = 3
	ContainerFormat_CONTAINER_FORMAT_OGG         ContainerFormat = 4
	ContainerFormat_CONTAINER_FORMAT_QUICKTIME   ContainerFormat = 5
	ContainerFormat_CONTAINER_FORMAT_REALMEDIA   ContainerFormat = 6
	ContainerFormat_CONTAINER_FORMAT_RMF         ContainerFormat = 7
	ContainerFormat_CONTAINER_FORMAT_USERDEFINED ContainerFormat = 8
	ContainerFormat_CONTAINER_FORMAT_WAV         ContainerFormat = 9
)

// Enum value maps for ContainerFormat.
var (
	ContainerFormat_name = map[int32]string{
		0: "CONTAINER_FORMAT_UNSPECIFIED",
		1: "CONTAINER_FORMAT_AIFF",
		2: "CONTAINER_FORMAT_AVI",
		3: "CONTAINER_FORMAT_MP4",
		4: "CONTAINER_FORMAT_OGG",
		5: "CONTAINER_FORMAT_QUICKTIME",
		6: "CONTAINER_FORMAT_REALMEDIA",
		7: "CONTAINER_FORMAT_RMF",
		8: "CONTAINER_FORMAT_USERDEFINED",
		9: "CONTAINER_FORMAT_WAV",
	}
	ContainerFormat_value = map[string]int32{
		"CONTAINER_FORMAT_UNSPECIFIED": 0,
		"CONTAINER_FORMAT_AIFF":        1,
		"CONTAINER_FORMAT_AVI":         2,
		"CONTAINER_FORMAT_MP4":         3,
		"CONTAINER_FORMAT_OGG":         4,
		"CONTAINER_FORMAT_QUICKTIME":   5,
		"CONTAINER_FORMAT_REALMEDIA":   6,
		"CONTAINER_FORMAT_RMF":         7,
		"CONTAINER_FORMAT_USERDEFINED": 8,
		"CONTAINER_FORMAT_WAV":         9,
	}
)

func (x ContainerFormat) Enum() *ContainerFormat {
	p := new(ContainerFormat)
	*p = x
	return p
}

func (x ContainerFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[14].Descriptor()
}

func (ContainerFormat) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[14]
}

func (x ContainerFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerFormat.Descriptor instead.
func (ContainerFormat) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{14}
}

type CreationType int32

const (
	CreationType_CREATION_TYPE_UNSPECIFIED CreationType = 0
	CreationType_CREATION_TYPE_MUSICALWORK CreationType = 1
	CreationType_CREATION_TYPE_RELEASE     CreationType = 2
	CreationType_CREATION_TYPE_RESOURCE    CreationType = 3
)

// Enum value maps for CreationType.
var (
	CreationType_name = map[int32]string{
		0: "CREATION_TYPE_UNSPECIFIED",
		1: "CREATION_TYPE_MUSICALWORK",
		2: "CREATION_TYPE_RELEASE",
		3: "CREATION_TYPE_RESOURCE",
	}
	CreationType_value = map[string]int32{
		"CREATION_TYPE_UNSPECIFIED": 0,
		"CREATION_TYPE_MUSICALWORK": 1,
		"CREATION_TYPE_RELEASE":     2,
		"CREATION_TYPE_RESOURCE":    3,
	}
)

func (x CreationType) Enum() *CreationType {
	p := new(CreationType)
	*p = x
	return p
}

func (x CreationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[15].Descriptor()
}

func (CreationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[15]
}

func (x CreationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreationType.Descriptor instead.
func (CreationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{15}
}

type CreativeContributorRole int32

const (
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_UNSPECIFIED         CreativeContributorRole = 0
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_ADAPTER             CreativeContributorRole = 1
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_ARRANGER            CreativeContributorRole = 2
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER CreativeContributorRole = 3
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_AUTHOR              CreativeContributorRole = 4
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_COMPOSER            CreativeContributorRole = 5
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_COMPOSERLYRICIST    CreativeContributorRole = 6
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_LIBRETTIST          CreativeContributorRole = 7
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_LYRICIST            CreativeContributorRole = 8
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_NONLYRICAUTHOR      CreativeContributorRole = 9
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_SUBARRANGER         CreativeContributorRole = 10
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_SUBLYRICIST         CreativeContributorRole = 11
	CreativeContributorRole_CREATIVE_CONTRIBUTOR_ROLE_TRANSLATOR          CreativeContributorRole = 12
)

// Enum value maps for CreativeContributorRole.
var (
	CreativeContributorRole_name = map[int32]string{
		0:  "CREATIVE_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:  "CREATIVE_CONTRIBUTOR_ROLE_ADAPTER",
		2:  "CREATIVE_CONTRIBUTOR_ROLE_ARRANGER",
		3:  "CREATIVE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER",
		4:  "CREATIVE_CONTRIBUTOR_ROLE_AUTHOR",
		5:  "CREATIVE_CONTRIBUTOR_ROLE_COMPOSER",
		6:  "CREATIVE_CONTRIBUTOR_ROLE_COMPOSERLYRICIST",
		7:  "CREATIVE_CONTRIBUTOR_ROLE_LIBRETTIST",
		8:  "CREATIVE_CONTRIBUTOR_ROLE_LYRICIST",
		9:  "CREATIVE_CONTRIBUTOR_ROLE_NONLYRICAUTHOR",
		10: "CREATIVE_CONTRIBUTOR_ROLE_SUBARRANGER",
		11: "CREATIVE_CONTRIBUTOR_ROLE_SUBLYRICIST",
		12: "CREATIVE_CONTRIBUTOR_ROLE_TRANSLATOR",
	}
	CreativeContributorRole_value = map[string]int32{
		"CREATIVE_CONTRIBUTOR_ROLE_UNSPECIFIED":         0,
		"CREATIVE_CONTRIBUTOR_ROLE_ADAPTER":             1,
		"CREATIVE_CONTRIBUTOR_ROLE_ARRANGER":            2,
		"CREATIVE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER": 3,
		"CREATIVE_CONTRIBUTOR_ROLE_AUTHOR":              4,
		"CREATIVE_CONTRIBUTOR_ROLE_COMPOSER":            5,
		"CREATIVE_CONTRIBUTOR_ROLE_COMPOSERLYRICIST":    6,
		"CREATIVE_CONTRIBUTOR_ROLE_LIBRETTIST":          7,
		"CREATIVE_CONTRIBUTOR_ROLE_LYRICIST":            8,
		"CREATIVE_CONTRIBUTOR_ROLE_NONLYRICAUTHOR":      9,
		"CREATIVE_CONTRIBUTOR_ROLE_SUBARRANGER":         10,
		"CREATIVE_CONTRIBUTOR_ROLE_SUBLYRICIST":         11,
		"CREATIVE_CONTRIBUTOR_ROLE_TRANSLATOR":          12,
	}
)

func (x CreativeContributorRole) Enum() *CreativeContributorRole {
	p := new(CreativeContributorRole)
	*p = x
	return p
}

func (x CreativeContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreativeContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[16].Descriptor()
}

func (CreativeContributorRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[16]
}

func (x CreativeContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreativeContributorRole.Descriptor instead.
func (CreativeContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{16}
}

type CueOrigin int32

const (
	CueOrigin_CUE_ORIGIN_UNSPECIFIED                CueOrigin = 0
	CueOrigin_CUE_ORIGIN_LIBRARYMUSIC               CueOrigin = 1
	CueOrigin_CUE_ORIGIN_PREEXISTINGMUSIC           CueOrigin = 2
	CueOrigin_CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC CueOrigin = 3
	CueOrigin_CUE_ORIGIN_UNKNOWN                    CueOrigin = 4
	CueOrigin_CUE_ORIGIN_USERDEFINED                CueOrigin = 5
)

// Enum value maps for CueOrigin.
var (
	CueOrigin_name = map[int32]string{
		0: "CUE_ORIGIN_UNSPECIFIED",
		1: "CUE_ORIGIN_LIBRARYMUSIC",
		2: "CUE_ORIGIN_PREEXISTINGMUSIC",
		3: "CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC",
		4: "CUE_ORIGIN_UNKNOWN",
		5: "CUE_ORIGIN_USERDEFINED",
	}
	CueOrigin_value = map[string]int32{
		"CUE_ORIGIN_UNSPECIFIED":                0,
		"CUE_ORIGIN_LIBRARYMUSIC":               1,
		"CUE_ORIGIN_PREEXISTINGMUSIC":           2,
		"CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC": 3,
		"CUE_ORIGIN_UNKNOWN":                    4,
		"CUE_ORIGIN_USERDEFINED":                5,
	}
)

func (x CueOrigin) Enum() *CueOrigin {
	p := new(CueOrigin)
	*p = x
	return p
}

func (x CueOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[17].Descriptor()
}

func (CueOrigin) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[17]
}

func (x CueOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueOrigin.Descriptor instead.
func (CueOrigin) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{17}
}

type CueSheetType int32

const (
	CueSheetType_CUE_SHEET_TYPE_UNSPECIFIED        CueSheetType = 0
	CueSheetType_CUE_SHEET_TYPE_AVERAGECUESHEET    CueSheetType = 1
	CueSheetType_CUE_SHEET_TYPE_COMPOSITECUESHEET  CueSheetType = 2
	CueSheetType_CUE_SHEET_TYPE_STANDARDCUESHEET   CueSheetType = 3
	CueSheetType_CUE_SHEET_TYPE_SUMMARISEDCUESHEET CueSheetType = 4
	CueSheetType_CUE_SHEET_TYPE_SURROGATECUESHEET  CueSheetType = 5
)

// Enum value maps for CueSheetType.
var (
	CueSheetType_name = map[int32]string{
		0: "CUE_SHEET_TYPE_UNSPECIFIED",
		1: "CUE_SHEET_TYPE_AVERAGECUESHEET",
		2: "CUE_SHEET_TYPE_COMPOSITECUESHEET",
		3: "CUE_SHEET_TYPE_STANDARDCUESHEET",
		4: "CUE_SHEET_TYPE_SUMMARISEDCUESHEET",
		5: "CUE_SHEET_TYPE_SURROGATECUESHEET",
	}
	CueSheetType_value = map[string]int32{
		"CUE_SHEET_TYPE_UNSPECIFIED":        0,
		"CUE_SHEET_TYPE_AVERAGECUESHEET":    1,
		"CUE_SHEET_TYPE_COMPOSITECUESHEET":  2,
		"CUE_SHEET_TYPE_STANDARDCUESHEET":   3,
		"CUE_SHEET_TYPE_SUMMARISEDCUESHEET": 4,
		"CUE_SHEET_TYPE_SURROGATECUESHEET":  5,
	}
)

func (x CueSheetType) Enum() *CueSheetType {
	p := new(CueSheetType)
	*p = x
	return p
}

func (x CueSheetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueSheetType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[18].Descriptor()
}

func (CueSheetType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[18]
}

func (x CueSheetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueSheetType.Descriptor instead.
func (CueSheetType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{18}
}

type CueUseType int32

const (
	CueUseType_CUE_USE_TYPE_UNSPECIFIED                 CueUseType = 0
	CueUseType_CUE_USE_TYPE_AUDIOLOGO                   CueUseType = 1
	CueUseType_CUE_USE_TYPE_BACKGROUND                  CueUseType = 2
	CueUseType_CUE_USE_TYPE_BUMPER                      CueUseType = 3
	CueUseType_CUE_USE_TYPE_ESSENTIALPART               CueUseType = 4
	CueUseType_CUE_USE_TYPE_FILMTHEME                   CueUseType = 5
	CueUseType_CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND CueUseType = 6
	CueUseType_CUE_USE_TYPE_ONSCREENMUSIC               CueUseType = 7
	CueUseType_CUE_USE_TYPE_ROLLEDUPCUE                 CueUseType = 8
	CueUseType_CUE_USE_TYPE_THEME                       CueUseType = 9
	CueUseType_CUE_USE_TYPE_USERDEFINED                 CueUseType = 10
)

// Enum value maps for CueUseType.
var (
	CueUseType_name = map[int32]string{
		0:  "CUE_USE_TYPE_UNSPECIFIED",
		1:  "CUE_USE_TYPE_AUDIOLOGO",
		2:  "CUE_USE_TYPE_BACKGROUND",
		3:  "CUE_USE_TYPE_BUMPER",
		4:  "CUE_USE_TYPE_ESSENTIALPART",
		5:  "CUE_USE_TYPE_FILMTHEME",
		6:  "CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND",
		7:  "CUE_USE_TYPE_ONSCREENMUSIC",
		8:  "CUE_USE_TYPE_ROLLEDUPCUE",
		9:  "CUE_USE_TYPE_THEME",
		10: "CUE_USE_TYPE_USERDEFINED",
	}
	CueUseType_value = map[string]int32{
		"CUE_USE_TYPE_UNSPECIFIED":                 0,
		"CUE_USE_TYPE_AUDIOLOGO":                   1,
		"CUE_USE_TYPE_BACKGROUND":                  2,
		"CUE_USE_TYPE_BUMPER":                      3,
		"CUE_USE_TYPE_ESSENTIALPART":               4,
		"CUE_USE_TYPE_FILMTHEME":                   5,
		"CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND": 6,
		"CUE_USE_TYPE_ONSCREENMUSIC":               7,
		"CUE_USE_TYPE_ROLLEDUPCUE":                 8,
		"CUE_USE_TYPE_THEME":                       9,
		"CUE_USE_TYPE_USERDEFINED":                 10,
	}
)

func (x CueUseType) Enum() *CueUseType {
	p := new(CueUseType)
	*p = x
	return p
}

func (x CueUseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueUseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[19].Descriptor()
}

func (CueUseType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[19]
}

func (x CueUseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueUseType.Descriptor instead.
func (CueUseType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{19}
}

type CurrencyCode int32

const (
	CurrencyCode_CURRENCY_CODE_UNSPECIFIED CurrencyCode = 0
	CurrencyCode_CURRENCY_CODE_AED         CurrencyCode = 1
	CurrencyCode_CURRENCY_CODE_AFN         CurrencyCode = 2
	CurrencyCode_CURRENCY_CODE_ALL         CurrencyCode = 3
	CurrencyCode_CURRENCY_CODE_AMD         CurrencyCode = 4
	CurrencyCode_CURRENCY_CODE_ANG         CurrencyCode = 5
	CurrencyCode_CURRENCY_CODE_AOA         CurrencyCode = 6
	CurrencyCode_CURRENCY_CODE_ARS         CurrencyCode = 7
	CurrencyCode_CURRENCY_CODE_AUD         CurrencyCode = 8
	CurrencyCode_CURRENCY_CODE_AWG         CurrencyCode = 9
	CurrencyCode_CURRENCY_CODE_AZN         CurrencyCode = 10
	CurrencyCode_CURRENCY_CODE_BAM         CurrencyCode = 11
	CurrencyCode_CURRENCY_CODE_BBD         CurrencyCode = 12
	CurrencyCode_CURRENCY_CODE_BDT         CurrencyCode = 13
	CurrencyCode_CURRENCY_CODE_BGN         CurrencyCode = 14
	CurrencyCode_CURRENCY_CODE_BHD         CurrencyCode = 15
	CurrencyCode_CURRENCY_CODE_BIF         CurrencyCode = 16
	CurrencyCode_CURRENCY_CODE_BMD         CurrencyCode = 17
	CurrencyCode_CURRENCY_CODE_BND         CurrencyCode = 18
	CurrencyCode_CURRENCY_CODE_BOB         CurrencyCode = 19
	CurrencyCode_CURRENCY_CODE_BOV         CurrencyCode = 20
	CurrencyCode_CURRENCY_CODE_BRL         CurrencyCode = 21
	CurrencyCode_CURRENCY_CODE_BSD         CurrencyCode = 22
	CurrencyCode_CURRENCY_CODE_BTN         CurrencyCode = 23
	CurrencyCode_CURRENCY_CODE_BWP         CurrencyCode = 24
	CurrencyCode_CURRENCY_CODE_BYR         CurrencyCode = 25
	CurrencyCode_CURRENCY_CODE_BZD         CurrencyCode = 26
	CurrencyCode_CURRENCY_CODE_CAD         CurrencyCode = 27
	CurrencyCode_CURRENCY_CODE_CDF         CurrencyCode = 28
	CurrencyCode_CURRENCY_CODE_CHF         CurrencyCode = 29
	CurrencyCode_CURRENCY_CODE_CLF         CurrencyCode = 30
	CurrencyCode_CURRENCY_CODE_CLP         CurrencyCode = 31
	CurrencyCode_CURRENCY_CODE_CNY         CurrencyCode = 32
	CurrencyCode_CURRENCY_CODE_COP         CurrencyCode = 33
	CurrencyCode_CURRENCY_CODE_COU         CurrencyCode = 34
	CurrencyCode_CURRENCY_CODE_CRC         CurrencyCode = 35
	CurrencyCode_CURRENCY_CODE_CUC         CurrencyCode = 36
	CurrencyCode_CURRENCY_CODE_CUP         CurrencyCode = 37
	CurrencyCode_CURRENCY_CODE_CVE         CurrencyCode = 38
	CurrencyCode_CURRENCY_CODE_CZK         CurrencyCode = 39
	CurrencyCode_CURRENCY_CODE_DJF         CurrencyCode = 40
	CurrencyCode_CURRENCY_CODE_DKK         CurrencyCode = 41
	CurrencyCode_CURRENCY_CODE_DOP         CurrencyCode = 42
	CurrencyCode_CURRENCY_CODE_DZD         CurrencyCode = 43
	CurrencyCode_CURRENCY_CODE_EGP         CurrencyCode = 44
	CurrencyCode_CURRENCY_CODE_ERN         CurrencyCode = 45
	CurrencyCode_CURRENCY_CODE_ETB         CurrencyCode = 46
	CurrencyCode_CURRENCY_CODE_EUR         CurrencyCode = 47
	CurrencyCode_CURRENCY_CODE_FJD         CurrencyCode = 48
	CurrencyCode_CURRENCY_CODE_FKP         CurrencyCode = 49
	CurrencyCode_CURRENCY_CODE_GBP         CurrencyCode = 50
	CurrencyCode_CURRENCY_CODE_GEL         CurrencyCode = 51
	CurrencyCode_CURRENCY_CODE_GHS         CurrencyCode = 52
	CurrencyCode_CURRENCY_CODE_GIP         CurrencyCode = 53
	CurrencyCode_CURRENCY_CODE_GMD         CurrencyCode = 54
	CurrencyCode_CURRENCY_CODE_GNF         CurrencyCode = 55
	CurrencyCode_CURRENCY_CODE_GTQ         CurrencyCode = 56
	CurrencyCode_CURRENCY_CODE_GYD         CurrencyCode = 57
	CurrencyCode_CURRENCY_CODE_HKD         CurrencyCode = 58
	CurrencyCode_CURRENCY_CODE_HNL         CurrencyCode = 59
	CurrencyCode_CURRENCY_CODE_HRK         CurrencyCode = 60
	CurrencyCode_CURRENCY_CODE_HTG         CurrencyCode = 61
	CurrencyCode_CURRENCY_CODE_HUF         CurrencyCode = 62
	CurrencyCode_CURRENCY_CODE_IDR         CurrencyCode = 63
	CurrencyCode_CURRENCY_CODE_ILS         CurrencyCode = 64
	CurrencyCode_CURRENCY_CODE_INR         CurrencyCode = 65
	CurrencyCode_CURRENCY_CODE_IQD         CurrencyCode = 66
	CurrencyCode_CURRENCY_CODE_IRR         CurrencyCode = 67
	CurrencyCode_CURRENCY_CODE_ISK         CurrencyCode = 68
	CurrencyCode_CURRENCY_CODE_JMD         CurrencyCode = 69
	CurrencyCode_CURRENCY_CODE_JOD         CurrencyCode = 70
	CurrencyCode_CURRENCY_CODE_JPY         CurrencyCode = 71
	CurrencyCode_CURRENCY_CODE_KES         CurrencyCode = 72
	CurrencyCode_CURRENCY_CODE_KGS         CurrencyCode = 73
	CurrencyCode_CURRENCY_CODE_KHR         CurrencyCode = 74
	CurrencyCode_CURRENCY_CODE_KMF         CurrencyCode = 75
	CurrencyCode_CURRENCY_CODE_KPW         CurrencyCode = 76
	CurrencyCode_CURRENCY_CODE_KRW         CurrencyCode = 77
	CurrencyCode_CURRENCY_CODE_KWD         CurrencyCode = 78
	CurrencyCode_CURRENCY_CODE_KYD         CurrencyCode = 79
	CurrencyCode_CURRENCY_CODE_KZT         CurrencyCode = 80
	CurrencyCode_CURRENCY_CODE_LAK         CurrencyCode = 81
	CurrencyCode_CURRENCY_CODE_LBP         CurrencyCode = 82
	CurrencyCode_CURRENCY_CODE_LKR         CurrencyCode = 83
	CurrencyCode_CURRENCY_CODE_LRD         CurrencyCode = 84
	CurrencyCode_CURRENCY_CODE_LSL         CurrencyCode = 85
	CurrencyCode_CURRENCY_CODE_LYD         CurrencyCode = 86
	CurrencyCode_CURRENCY_CODE_MAD         CurrencyCode = 87
	CurrencyCode_CURRENCY_CODE_MDL         CurrencyCode = 88
	CurrencyCode_CURRENCY_CODE_MGA         CurrencyCode = 89
	CurrencyCode_CURRENCY_CODE_MKD         CurrencyCode = 90
	CurrencyCode_CURRENCY_CODE_MMK         CurrencyCode = 91
	CurrencyCode_CURRENCY_CODE_MNT         CurrencyCode = 92
	CurrencyCode_CURRENCY_CODE_MOP         CurrencyCode = 93
	CurrencyCode_CURRENCY_CODE_MRU         CurrencyCode = 94
	CurrencyCode_CURRENCY_CODE_MUR         CurrencyCode = 95
	CurrencyCode_CURRENCY_CODE_MVR         CurrencyCode = 96
	CurrencyCode_CURRENCY_CODE_MWK         CurrencyCode = 97
	CurrencyCode_CURRENCY_CODE_MXN         CurrencyCode = 98
	CurrencyCode_CURRENCY_CODE_MXV         CurrencyCode = 99
	CurrencyCode_CURRENCY_CODE_MYR         CurrencyCode = 100
	CurrencyCode_CURRENCY_CODE_MZN         CurrencyCode = 101
	CurrencyCode_CURRENCY_CODE_NAD         CurrencyCode = 102
	CurrencyCode_CURRENCY_CODE_NGN         CurrencyCode = 103
	CurrencyCode_CURRENCY_CODE_NIO         CurrencyCode = 104
	CurrencyCode_CURRENCY_CODE_NOK         CurrencyCode = 105
	CurrencyCode_CURRENCY_CODE_NPR         CurrencyCode = 106
	CurrencyCode_CURRENCY_CODE_NZD         CurrencyCode = 107
	CurrencyCode_CURRENCY_CODE_OMR         CurrencyCode = 108
	CurrencyCode_CURRENCY_CODE_PAB         CurrencyCode = 109
	CurrencyCode_CURRENCY_CODE_PEN         CurrencyCode = 110
	CurrencyCode_CURRENCY_CODE_PGK         CurrencyCode = 111
	CurrencyCode_CURRENCY_CODE_PHP         CurrencyCode = 112
	CurrencyCode_CURRENCY_CODE_PKR         CurrencyCode = 113
	CurrencyCode_CURRENCY_CODE_PLN         CurrencyCode = 114
	CurrencyCode_CURRENCY_CODE_PYG         CurrencyCode = 115
	CurrencyCode_CURRENCY_CODE_QAR         CurrencyCode = 116
	CurrencyCode_CURRENCY_CODE_RON         CurrencyCode = 117
	CurrencyCode_CURRENCY_CODE_RSD         CurrencyCode = 118
	CurrencyCode_CURRENCY_CODE_RUB         CurrencyCode = 119
	CurrencyCode_CURRENCY_CODE_RWF         CurrencyCode = 120
	CurrencyCode_CURRENCY_CODE_SAR         CurrencyCode = 121
	CurrencyCode_CURRENCY_CODE_SBD         CurrencyCode = 122
	CurrencyCode_CURRENCY_CODE_SCR         CurrencyCode = 123
	CurrencyCode_CURRENCY_CODE_SDG         CurrencyCode = 124
	CurrencyCode_CURRENCY_CODE_SEK         CurrencyCode = 125
	CurrencyCode_CURRENCY_CODE_SGD         CurrencyCode = 126
	CurrencyCode_CURRENCY_CODE_SHP         CurrencyCode = 127
	CurrencyCode_CURRENCY_CODE_SLL         CurrencyCode = 128
	CurrencyCode_CURRENCY_CODE_SOS         CurrencyCode = 129
	CurrencyCode_CURRENCY_CODE_SRD         CurrencyCode = 130
	CurrencyCode_CURRENCY_CODE_SSP         CurrencyCode = 131
	CurrencyCode_CURRENCY_CODE_STN         CurrencyCode = 132
	CurrencyCode_CURRENCY_CODE_SVC         CurrencyCode = 133
	CurrencyCode_CURRENCY_CODE_SYP         CurrencyCode = 134
	CurrencyCode_CURRENCY_CODE_SZL         CurrencyCode = 135
	CurrencyCode_CURRENCY_CODE_THB         CurrencyCode = 136
	CurrencyCode_CURRENCY_CODE_TJS         CurrencyCode = 137
	CurrencyCode_CURRENCY_CODE_TMT         CurrencyCode = 138
	CurrencyCode_CURRENCY_CODE_TND         CurrencyCode = 139
	CurrencyCode_CURRENCY_CODE_TOP         CurrencyCode = 140
	CurrencyCode_CURRENCY_CODE_TRY         CurrencyCode = 141
	CurrencyCode_CURRENCY_CODE_TTD         CurrencyCode = 142
	CurrencyCode_CURRENCY_CODE_TWD         CurrencyCode = 143
	CurrencyCode_CURRENCY_CODE_TZS         CurrencyCode = 144
	CurrencyCode_CURRENCY_CODE_UAH         CurrencyCode = 145
	CurrencyCode_CURRENCY_CODE_UGX         CurrencyCode = 146
	CurrencyCode_CURRENCY_CODE_USD         CurrencyCode = 147
	CurrencyCode_CURRENCY_CODE_UYI         CurrencyCode = 148
	CurrencyCode_CURRENCY_CODE_UYU         CurrencyCode = 149
	CurrencyCode_CURRENCY_CODE_UZS         CurrencyCode = 150
	CurrencyCode_CURRENCY_CODE_VES         CurrencyCode = 151
	CurrencyCode_CURRENCY_CODE_VND         CurrencyCode = 152
	CurrencyCode_CURRENCY_CODE_VUV         CurrencyCode = 153
	CurrencyCode_CURRENCY_CODE_WST         CurrencyCode = 154
	CurrencyCode_CURRENCY_CODE_XAF         CurrencyCode = 155
	CurrencyCode_CURRENCY_CODE_XCD         CurrencyCode = 156
	CurrencyCode_CURRENCY_CODE_XOF         CurrencyCode = 157
	CurrencyCode_CURRENCY_CODE_XPF         CurrencyCode = 158
	CurrencyCode_CURRENCY_CODE_YER         CurrencyCode = 159
	CurrencyCode_CURRENCY_CODE_ZAR         CurrencyCode = 160
	CurrencyCode_CURRENCY_CODE_ZMW         CurrencyCode = 161
	CurrencyCode_CURRENCY_CODE_ZWL         CurrencyCode = 162
	CurrencyCode_CURRENCY_CODE_CYP         CurrencyCode = 163
	CurrencyCode_CURRENCY_CODE_EEK         CurrencyCode = 164
	CurrencyCode_CURRENCY_CODE_LTL         CurrencyCode = 165
	CurrencyCode_CURRENCY_CODE_LVL         CurrencyCode = 166
	CurrencyCode_CURRENCY_CODE_MTL         CurrencyCode = 167
	CurrencyCode_CURRENCY_CODE_MRO         CurrencyCode = 168
	CurrencyCode_CURRENCY_CODE_ROL         CurrencyCode = 169
	CurrencyCode_CURRENCY_CODE_SIT         CurrencyCode = 170
	CurrencyCode_CURRENCY_CODE_SKK         CurrencyCode = 171
	CurrencyCode_CURRENCY_CODE_STD         CurrencyCode = 172
	CurrencyCode_CURRENCY_CODE_VEF         CurrencyCode = 173
)

// Enum value maps for CurrencyCode.
var (
	CurrencyCode_name = map[int32]string{
		0:   "CURRENCY_CODE_UNSPECIFIED",
		1:   "CURRENCY_CODE_AED",
		2:   "CURRENCY_CODE_AFN",
		3:   "CURRENCY_CODE_ALL",
		4:   "CURRENCY_CODE_AMD",
		5:   "CURRENCY_CODE_ANG",
		6:   "CURRENCY_CODE_AOA",
		7:   "CURRENCY_CODE_ARS",
		8:   "CURRENCY_CODE_AUD",
		9:   "CURRENCY_CODE_AWG",
		10:  "CURRENCY_CODE_AZN",
		11:  "CURRENCY_CODE_BAM",
		12:  "CURRENCY_CODE_BBD",
		13:  "CURRENCY_CODE_BDT",
		14:  "CURRENCY_CODE_BGN",
		15:  "CURRENCY_CODE_BHD",
		16:  "CURRENCY_CODE_BIF",
		17:  "CURRENCY_CODE_BMD",
		18:  "CURRENCY_CODE_BND",
		19:  "CURRENCY_CODE_BOB",
		20:  "CURRENCY_CODE_BOV",
		21:  "CURRENCY_CODE_BRL",
		22:  "CURRENCY_CODE_BSD",
		23:  "CURRENCY_CODE_BTN",
		24:  "CURRENCY_CODE_BWP",
		25:  "CURRENCY_CODE_BYR",
		26:  "CURRENCY_CODE_BZD",
		27:  "CURRENCY_CODE_CAD",
		28:  "CURRENCY_CODE_CDF",
		29:  "CURRENCY_CODE_CHF",
		30:  "CURRENCY_CODE_CLF",
		31:  "CURRENCY_CODE_CLP",
		32:  "CURRENCY_CODE_CNY",
		33:  "CURRENCY_CODE_COP",
		34:  "CURRENCY_CODE_COU",
		35:  "CURRENCY_CODE_CRC",
		36:  "CURRENCY_CODE_CUC",
		37:  "CURRENCY_CODE_CUP",
		38:  "CURRENCY_CODE_CVE",
		39:  "CURRENCY_CODE_CZK",
		40:  "CURRENCY_CODE_DJF",
		41:  "CURRENCY_CODE_DKK",
		42:  "CURRENCY_CODE_DOP",
		43:  "CURRENCY_CODE_DZD",
		44:  "CURRENCY_CODE_EGP",
		45:  "CURRENCY_CODE_ERN",
		46:  "CURRENCY_CODE_ETB",
		47:  "CURRENCY_CODE_EUR",
		48:  "CURRENCY_CODE_FJD",
		49:  "CURRENCY_CODE_FKP",
		50:  "CURRENCY_CODE_GBP",
		51:  "CURRENCY_CODE_GEL",
		52:  "CURRENCY_CODE_GHS",
		53:  "CURRENCY_CODE_GIP",
		54:  "CURRENCY_CODE_GMD",
		55:  "CURRENCY_CODE_GNF",
		56:  "CURRENCY_CODE_GTQ",
		57:  "CURRENCY_CODE_GYD",
		58:  "CURRENCY_CODE_HKD",
		59:  "CURRENCY_CODE_HNL",
		60:  "CURRENCY_CODE_HRK",
		61:  "CURRENCY_CODE_HTG",
		62:  "CURRENCY_CODE_HUF",
		63:  "CURRENCY_CODE_IDR",
		64:  "CURRENCY_CODE_ILS",
		65:  "CURRENCY_CODE_INR",
		66:  "CURRENCY_CODE_IQD",
		67:  "CURRENCY_CODE_IRR",
		68:  "CURRENCY_CODE_ISK",
		69:  "CURRENCY_CODE_JMD",
		70:  "CURRENCY_CODE_JOD",
		71:  "CURRENCY_CODE_JPY",
		72:  "CURRENCY_CODE_KES",
		73:  "CURRENCY_CODE_KGS",
		74:  "CURRENCY_CODE_KHR",
		75:  "CURRENCY_CODE_KMF",
		76:  "CURRENCY_CODE_KPW",
		77:  "CURRENCY_CODE_KRW",
		78:  "CURRENCY_CODE_KWD",
		79:  "CURRENCY_CODE_KYD",
		80:  "CURRENCY_CODE_KZT",
		81:  "CURRENCY_CODE_LAK",
		82:  "CURRENCY_CODE_LBP",
		83:  "CURRENCY_CODE_LKR",
		84:  "CURRENCY_CODE_LRD",
		85:  "CURRENCY_CODE_LSL",
		86:  "CURRENCY_CODE_LYD",
		87:  "CURRENCY_CODE_MAD",
		88:  "CURRENCY_CODE_MDL",
		89:  "CURRENCY_CODE_MGA",
		90:  "CURRENCY_CODE_MKD",
		91:  "CURRENCY_CODE_MMK",
		92:  "CURRENCY_CODE_MNT",
		93:  "CURRENCY_CODE_MOP",
		94:  "CURRENCY_CODE_MRU",
		95:  "CURRENCY_CODE_MUR",
		96:  "CURRENCY_CODE_MVR",
		97:  "CURRENCY_CODE_MWK",
		98:  "CURRENCY_CODE_MXN",
		99:  "CURRENCY_CODE_MXV",
		100: "CURRENCY_CODE_MYR",
		101: "CURRENCY_CODE_MZN",
		102: "CURRENCY_CODE_NAD",
		103: "CURRENCY_CODE_NGN",
		104: "CURRENCY_CODE_NIO",
		105: "CURRENCY_CODE_NOK",
		106: "CURRENCY_CODE_NPR",
		107: "CURRENCY_CODE_NZD",
		108: "CURRENCY_CODE_OMR",
		109: "CURRENCY_CODE_PAB",
		110: "CURRENCY_CODE_PEN",
		111: "CURRENCY_CODE_PGK",
		112: "CURRENCY_CODE_PHP",
		113: "CURRENCY_CODE_PKR",
		114: "CURRENCY_CODE_PLN",
		115: "CURRENCY_CODE_PYG",
		116: "CURRENCY_CODE_QAR",
		117: "CURRENCY_CODE_RON",
		118: "CURRENCY_CODE_RSD",
		119: "CURRENCY_CODE_RUB",
		120: "CURRENCY_CODE_RWF",
		121: "CURRENCY_CODE_SAR",
		122: "CURRENCY_CODE_SBD",
		123: "CURRENCY_CODE_SCR",
		124: "CURRENCY_CODE_SDG",
		125: "CURRENCY_CODE_SEK",
		126: "CURRENCY_CODE_SGD",
		127: "CURRENCY_CODE_SHP",
		128: "CURRENCY_CODE_SLL",
		129: "CURRENCY_CODE_SOS",
		130: "CURRENCY_CODE_SRD",
		131: "CURRENCY_CODE_SSP",
		132: "CURRENCY_CODE_STN",
		133: "CURRENCY_CODE_SVC",
		134: "CURRENCY_CODE_SYP",
		135: "CURRENCY_CODE_SZL",
		136: "CURRENCY_CODE_THB",
		137: "CURRENCY_CODE_TJS",
		138: "CURRENCY_CODE_TMT",
		139: "CURRENCY_CODE_TND",
		140: "CURRENCY_CODE_TOP",
		141: "CURRENCY_CODE_TRY",
		142: "CURRENCY_CODE_TTD",
		143: "CURRENCY_CODE_TWD",
		144: "CURRENCY_CODE_TZS",
		145: "CURRENCY_CODE_UAH",
		146: "CURRENCY_CODE_UGX",
		147: "CURRENCY_CODE_USD",
		148: "CURRENCY_CODE_UYI",
		149: "CURRENCY_CODE_UYU",
		150: "CURRENCY_CODE_UZS",
		151: "CURRENCY_CODE_VES",
		152: "CURRENCY_CODE_VND",
		153: "CURRENCY_CODE_VUV",
		154: "CURRENCY_CODE_WST",
		155: "CURRENCY_CODE_XAF",
		156: "CURRENCY_CODE_XCD",
		157: "CURRENCY_CODE_XOF",
		158: "CURRENCY_CODE_XPF",
		159: "CURRENCY_CODE_YER",
		160: "CURRENCY_CODE_ZAR",
		161: "CURRENCY_CODE_ZMW",
		162: "CURRENCY_CODE_ZWL",
		163: "CURRENCY_CODE_CYP",
		164: "CURRENCY_CODE_EEK",
		165: "CURRENCY_CODE_LTL",
		166: "CURRENCY_CODE_LVL",
		167: "CURRENCY_CODE_MTL",
		168: "CURRENCY_CODE_MRO",
		169: "CURRENCY_CODE_ROL",
		170: "CURRENCY_CODE_SIT",
		171: "CURRENCY_CODE_SKK",
		172: "CURRENCY_CODE_STD",
		173: "CURRENCY_CODE_VEF",
	}
	CurrencyCode_value = map[string]int32{
		"CURRENCY_CODE_UNSPECIFIED": 0,
		"CURRENCY_CODE_AED":         1,
		"CURRENCY_CODE_AFN":         2,
		"CURRENCY_CODE_ALL":         3,
		"CURRENCY_CODE_AMD":         4,
		"CURRENCY_CODE_ANG":         5,
		"CURRENCY_CODE_AOA":         6,
		"CURRENCY_CODE_ARS":         7,
		"CURRENCY_CODE_AUD":         8,
		"CURRENCY_CODE_AWG":         9,
		"CURRENCY_CODE_AZN":         10,
		"CURRENCY_CODE_BAM":         11,
		"CURRENCY_CODE_BBD":         12,
		"CURRENCY_CODE_BDT":         13,
		"CURRENCY_CODE_BGN":         14,
		"CURRENCY_CODE_BHD":         15,
		"CURRENCY_CODE_BIF":         16,
		"CURRENCY_CODE_BMD":         17,
		"CURRENCY_CODE_BND":         18,
		"CURRENCY_CODE_BOB":         19,
		"CURRENCY_CODE_BOV":         20,
		"CURRENCY_CODE_BRL":         21,
		"CURRENCY_CODE_BSD":         22,
		"CURRENCY_CODE_BTN":         23,
		"CURRENCY_CODE_BWP":         24,
		"CURRENCY_CODE_BYR":         25,
		"CURRENCY_CODE_BZD":         26,
		"CURRENCY_CODE_CAD":         27,
		"CURRENCY_CODE_CDF":         28,
		"CURRENCY_CODE_CHF":         29,
		"CURRENCY_CODE_CLF":         30,
		"CURRENCY_CODE_CLP":         31,
		"CURRENCY_CODE_CNY":         32,
		"CURRENCY_CODE_COP":         33,
		"CURRENCY_CODE_COU":         34,
		"CURRENCY_CODE_CRC":         35,
		"CURRENCY_CODE_CUC":         36,
		"CURRENCY_CODE_CUP":         37,
		"CURRENCY_CODE_CVE":         38,
		"CURRENCY_CODE_CZK":         39,
		"CURRENCY_CODE_DJF":         40,
		"CURRENCY_CODE_DKK":         41,
		"CURRENCY_CODE_DOP":         42,
		"CURRENCY_CODE_DZD":         43,
		"CURRENCY_CODE_EGP":         44,
		"CURRENCY_CODE_ERN":         45,
		"CURRENCY_CODE_ETB":         46,
		"CURRENCY_CODE_EUR":         47,
		"CURRENCY_CODE_FJD":         48,
		"CURRENCY_CODE_FKP":         49,
		"CURRENCY_CODE_GBP":         50,
		"CURRENCY_CODE_GEL":         51,
		"CURRENCY_CODE_GHS":         52,
		"CURRENCY_CODE_GIP":         53,
		"CURRENCY_CODE_GMD":         54,
		"CURRENCY_CODE_GNF":         55,
		"CURRENCY_CODE_GTQ":         56,
		"CURRENCY_CODE_GYD":         57,
		"CURRENCY_CODE_HKD":         58,
		"CURRENCY_CODE_HNL":         59,
		"CURRENCY_CODE_HRK":         60,
		"CURRENCY_CODE_HTG":         61,
		"CURRENCY_CODE_HUF":         62,
		"CURRENCY_CODE_IDR":         63,
		"CURRENCY_CODE_ILS":         64,
		"CURRENCY_CODE_INR":         65,
		"CURRENCY_CODE_IQD":         66,
		"CURRENCY_CODE_IRR":         67,
		"CURRENCY_CODE_ISK":         68,
		"CURRENCY_CODE_JMD":         69,
		"CURRENCY_CODE_JOD":         70,
		"CURRENCY_CODE_JPY":         71,
		"CURRENCY_CODE_KES":         72,
		"CURRENCY_CODE_KGS":         73,
		"CURRENCY_CODE_KHR":         74,
		"CURRENCY_CODE_KMF":         75,
		"CURRENCY_CODE_KPW":         76,
		"CURRENCY_CODE_KRW":         77,
		"CURRENCY_CODE_KWD":         78,
		"CURRENCY_CODE_KYD":         79,
		"CURRENCY_CODE_KZT":         80,
		"CURRENCY_CODE_LAK":         81,
		"CURRENCY_CODE_LBP":         82,
		"CURRENCY_CODE_LKR":         83,
		"CURRENCY_CODE_LRD":         84,
		"CURRENCY_CODE_LSL":         85,
		"CURRENCY_CODE_LYD":         86,
		"CURRENCY_CODE_MAD":         87,
		"CURRENCY_CODE_MDL":         88,
		"CURRENCY_CODE_MGA":         89,
		"CURRENCY_CODE_MKD":         90,
		"CURRENCY_CODE_MMK":         91,
		"CURRENCY_CODE_MNT":         92,
		"CURRENCY_CODE_MOP":         93,
		"CURRENCY_CODE_MRU":         94,
		"CURRENCY_CODE_MUR":         95,
		"CURRENCY_CODE_MVR":         96,
		"CURRENCY_CODE_MWK":         97,
		"CURRENCY_CODE_MXN":         98,
		"CURRENCY_CODE_MXV":         99,
		"CURRENCY_CODE_MYR":         100,
		"CURRENCY_CODE_MZN":         101,
		"CURRENCY_CODE_NAD":         102,
		"CURRENCY_CODE_NGN":         103,
		"CURRENCY_CODE_NIO":         104,
		"CURRENCY_CODE_NOK":         105,
		"CURRENCY_CODE_NPR":         106,
		"CURRENCY_CODE_NZD":         107,
		"CURRENCY_CODE_OMR":         108,
		"CURRENCY_CODE_PAB":         109,
		"CURRENCY_CODE_PEN":         110,
		"CURRENCY_CODE_PGK":         111,
		"CURRENCY_CODE_PHP":         112,
		"CURRENCY_CODE_PKR":         113,
		"CURRENCY_CODE_PLN":         114,
		"CURRENCY_CODE_PYG":         115,
		"CURRENCY_CODE_QAR":         116,
		"CURRENCY_CODE_RON":         117,
		"CURRENCY_CODE_RSD":         118,
		"CURRENCY_CODE_RUB":         119,
		"CURRENCY_CODE_RWF":         120,
		"CURRENCY_CODE_SAR":         121,
		"CURRENCY_CODE_SBD":         122,
		"CURRENCY_CODE_SCR":         123,
		"CURRENCY_CODE_SDG":         124,
		"CURRENCY_CODE_SEK":         125,
		"CURRENCY_CODE_SGD":         126,
		"CURRENCY_CODE_SHP":         127,
		"CURRENCY_CODE_SLL":         128,
		"CURRENCY_CODE_SOS":         129,
		"CURRENCY_CODE_SRD":         130,
		"CURRENCY_CODE_SSP":         131,
		"CURRENCY_CODE_STN":         132,
		"CURRENCY_CODE_SVC":         133,
		"CURRENCY_CODE_SYP":         134,
		"CURRENCY_CODE_SZL":         135,
		"CURRENCY_CODE_THB":         136,
		"CURRENCY_CODE_TJS":         137,
		"CURRENCY_CODE_TMT":         138,
		"CURRENCY_CODE_TND":         139,
		"CURRENCY_CODE_TOP":         140,
		"CURRENCY_CODE_TRY":         141,
		"CURRENCY_CODE_TTD":         142,
		"CURRENCY_CODE_TWD":         143,
		"CURRENCY_CODE_TZS":         144,
		"CURRENCY_CODE_UAH":         145,
		"CURRENCY_CODE_UGX":         146,
		"CURRENCY_CODE_USD":         147,
		"CURRENCY_CODE_UYI":         148,
		"CURRENCY_CODE_UYU":         149,
		"CURRENCY_CODE_UZS":         150,
		"CURRENCY_CODE_VES":         151,
		"CURRENCY_CODE_VND":         152,
		"CURRENCY_CODE_VUV":         153,
		"CURRENCY_CODE_WST":         154,
		"CURRENCY_CODE_XAF":         155,
		"CURRENCY_CODE_XCD":         156,
		"CURRENCY_CODE_XOF":         157,
		"CURRENCY_CODE_XPF":         158,
		"CURRENCY_CODE_YER":         159,
		"CURRENCY_CODE_ZAR":         160,
		"CURRENCY_CODE_ZMW":         161,
		"CURRENCY_CODE_ZWL":         162,
		"CURRENCY_CODE_CYP":         163,
		"CURRENCY_CODE_EEK":         164,
		"CURRENCY_CODE_LTL":         165,
		"CURRENCY_CODE_LVL":         166,
		"CURRENCY_CODE_MTL":         167,
		"CURRENCY_CODE_MRO":         168,
		"CURRENCY_CODE_ROL":         169,
		"CURRENCY_CODE_SIT":         170,
		"CURRENCY_CODE_SKK":         171,
		"CURRENCY_CODE_STD":         172,
		"CURRENCY_CODE_VEF":         173,
	}
)

func (x CurrencyCode) Enum() *CurrencyCode {
	p := new(CurrencyCode)
	*p = x
	return p
}

func (x CurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[20].Descriptor()
}

func (CurrencyCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[20]
}

func (x CurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyCode.Descriptor instead.
func (CurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{20}
}

type CurrentTerritoryCode int32

const (
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UNSPECIFIED CurrentTerritoryCode = 0
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AD          CurrentTerritoryCode = 1
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AE          CurrentTerritoryCode = 2
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AF          CurrentTerritoryCode = 3
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AG          CurrentTerritoryCode = 4
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AI          CurrentTerritoryCode = 5
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AL          CurrentTerritoryCode = 6
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AM          CurrentTerritoryCode = 7
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AN          CurrentTerritoryCode = 8
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AO          CurrentTerritoryCode = 9
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AQ          CurrentTerritoryCode = 10
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AR          CurrentTerritoryCode = 11
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AS          CurrentTerritoryCode = 12
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AT          CurrentTerritoryCode = 13
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AU          CurrentTerritoryCode = 14
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AW          CurrentTerritoryCode = 15
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AX          CurrentTerritoryCode = 16
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AZ          CurrentTerritoryCode = 17
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BA          CurrentTerritoryCode = 18
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BB          CurrentTerritoryCode = 19
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BD          CurrentTerritoryCode = 20
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BE          CurrentTerritoryCode = 21
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BF          CurrentTerritoryCode = 22
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BG          CurrentTerritoryCode = 23
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BH          CurrentTerritoryCode = 24
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BI          CurrentTerritoryCode = 25
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BJ          CurrentTerritoryCode = 26
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BL          CurrentTerritoryCode = 27
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BM          CurrentTerritoryCode = 28
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BN          CurrentTerritoryCode = 29
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BO          CurrentTerritoryCode = 30
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BQ          CurrentTerritoryCode = 31
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BR          CurrentTerritoryCode = 32
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BS          CurrentTerritoryCode = 33
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BT          CurrentTerritoryCode = 34
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BV          CurrentTerritoryCode = 35
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BW          CurrentTerritoryCode = 36
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BY          CurrentTerritoryCode = 37
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BZ          CurrentTerritoryCode = 38
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CA          CurrentTerritoryCode = 39
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CC          CurrentTerritoryCode = 40
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CD          CurrentTerritoryCode = 41
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CF          CurrentTerritoryCode = 42
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CG          CurrentTerritoryCode = 43
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CH          CurrentTerritoryCode = 44
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CI          CurrentTerritoryCode = 45
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CK          CurrentTerritoryCode = 46
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CL          CurrentTerritoryCode = 47
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CM          CurrentTerritoryCode = 48
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CN          CurrentTerritoryCode = 49
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CO          CurrentTerritoryCode = 50
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CR          CurrentTerritoryCode = 51
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CS          CurrentTerritoryCode = 52
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CU          CurrentTerritoryCode = 53
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CV          CurrentTerritoryCode = 54
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CW          CurrentTerritoryCode = 55
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CX          CurrentTerritoryCode = 56
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CY          CurrentTerritoryCode = 57
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CZ          CurrentTerritoryCode = 58
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DE          CurrentTerritoryCode = 59
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DJ          CurrentTerritoryCode = 60
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DK          CurrentTerritoryCode = 61
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DM          CurrentTerritoryCode = 62
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DO          CurrentTerritoryCode = 63
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DZ          CurrentTerritoryCode = 64
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_EC          CurrentTerritoryCode = 65
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_EE          CurrentTerritoryCode = 66
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_EG          CurrentTerritoryCode = 67
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_EH          CurrentTerritoryCode = 68
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ER          CurrentTerritoryCode = 69
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ES          CurrentTerritoryCode = 70
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ES_CE       CurrentTerritoryCode = 71
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ES_CN       CurrentTerritoryCode = 72
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ES_ML       CurrentTerritoryCode = 73
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ET          CurrentTerritoryCode = 74
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FI          CurrentTerritoryCode = 75
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FJ          CurrentTerritoryCode = 76
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FK          CurrentTerritoryCode = 77
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FM          CurrentTerritoryCode = 78
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FO          CurrentTerritoryCode = 79
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FR          CurrentTerritoryCode = 80
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GA          CurrentTerritoryCode = 81
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GB          CurrentTerritoryCode = 82
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GD          CurrentTerritoryCode = 83
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GE          CurrentTerritoryCode = 84
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GF          CurrentTerritoryCode = 85
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GG          CurrentTerritoryCode = 86
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GH          CurrentTerritoryCode = 87
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GI          CurrentTerritoryCode = 88
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GL          CurrentTerritoryCode = 89
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GM          CurrentTerritoryCode = 90
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GN          CurrentTerritoryCode = 91
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GP          CurrentTerritoryCode = 92
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GQ          CurrentTerritoryCode = 93
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GR          CurrentTerritoryCode = 94
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GS          CurrentTerritoryCode = 95
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GT          CurrentTerritoryCode = 96
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GU          CurrentTerritoryCode = 97
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GW          CurrentTerritoryCode = 98
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GY          CurrentTerritoryCode = 99
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HK          CurrentTerritoryCode = 100
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HM          CurrentTerritoryCode = 101
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HN          CurrentTerritoryCode = 102
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HR          CurrentTerritoryCode = 103
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HT          CurrentTerritoryCode = 104
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HU          CurrentTerritoryCode = 105
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ID          CurrentTerritoryCode = 106
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IE          CurrentTerritoryCode = 107
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IL          CurrentTerritoryCode = 108
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IM          CurrentTerritoryCode = 109
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IN          CurrentTerritoryCode = 110
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IO          CurrentTerritoryCode = 111
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IQ          CurrentTerritoryCode = 112
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IR          CurrentTerritoryCode = 113
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IS          CurrentTerritoryCode = 114
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IT          CurrentTerritoryCode = 115
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_JE          CurrentTerritoryCode = 116
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_JM          CurrentTerritoryCode = 117
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_JO          CurrentTerritoryCode = 118
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_JP          CurrentTerritoryCode = 119
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KE          CurrentTerritoryCode = 120
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KG          CurrentTerritoryCode = 121
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KH          CurrentTerritoryCode = 122
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KI          CurrentTerritoryCode = 123
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KM          CurrentTerritoryCode = 124
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KN          CurrentTerritoryCode = 125
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KP          CurrentTerritoryCode = 126
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KR          CurrentTerritoryCode = 127
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KW          CurrentTerritoryCode = 128
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KY          CurrentTerritoryCode = 129
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KZ          CurrentTerritoryCode = 130
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LA          CurrentTerritoryCode = 131
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LB          CurrentTerritoryCode = 132
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LC          CurrentTerritoryCode = 133
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LI          CurrentTerritoryCode = 134
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LK          CurrentTerritoryCode = 135
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LR          CurrentTerritoryCode = 136
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LS          CurrentTerritoryCode = 137
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LT          CurrentTerritoryCode = 138
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LU          CurrentTerritoryCode = 139
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LV          CurrentTerritoryCode = 140
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LY          CurrentTerritoryCode = 141
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MA          CurrentTerritoryCode = 142
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MC          CurrentTerritoryCode = 143
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MD          CurrentTerritoryCode = 144
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ME          CurrentTerritoryCode = 145
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MF          CurrentTerritoryCode = 146
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MG          CurrentTerritoryCode = 147
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MH          CurrentTerritoryCode = 148
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MK          CurrentTerritoryCode = 149
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ML          CurrentTerritoryCode = 150
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MM          CurrentTerritoryCode = 151
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MN          CurrentTerritoryCode = 152
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MO          CurrentTerritoryCode = 153
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MP          CurrentTerritoryCode = 154
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MQ          CurrentTerritoryCode = 155
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MR          CurrentTerritoryCode = 156
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MS          CurrentTerritoryCode = 157
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MT          CurrentTerritoryCode = 158
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MU          CurrentTerritoryCode = 159
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MV          CurrentTerritoryCode = 160
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MW          CurrentTerritoryCode = 161
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MX          CurrentTerritoryCode = 162
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MY          CurrentTerritoryCode = 163
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MZ          CurrentTerritoryCode = 164
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NA          CurrentTerritoryCode = 165
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NC          CurrentTerritoryCode = 166
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NE          CurrentTerritoryCode = 167
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NF          CurrentTerritoryCode = 168
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NG          CurrentTerritoryCode = 169
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NI          CurrentTerritoryCode = 170
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NL          CurrentTerritoryCode = 171
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NO          CurrentTerritoryCode = 172
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NP          CurrentTerritoryCode = 173
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NR          CurrentTerritoryCode = 174
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NU          CurrentTerritoryCode = 175
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NZ          CurrentTerritoryCode = 176
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_OM          CurrentTerritoryCode = 177
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PA          CurrentTerritoryCode = 178
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PE          CurrentTerritoryCode = 179
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PF          CurrentTerritoryCode = 180
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PG          CurrentTerritoryCode = 181
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PH          CurrentTerritoryCode = 182
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PK          CurrentTerritoryCode = 183
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PL          CurrentTerritoryCode = 184
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PM          CurrentTerritoryCode = 185
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PN          CurrentTerritoryCode = 186
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PR          CurrentTerritoryCode = 187
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PS          CurrentTerritoryCode = 188
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PT          CurrentTerritoryCode = 189
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PW          CurrentTerritoryCode = 190
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PY          CurrentTerritoryCode = 191
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_QA          CurrentTerritoryCode = 192
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RE          CurrentTerritoryCode = 193
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RO          CurrentTerritoryCode = 194
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RS          CurrentTerritoryCode = 195
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RU          CurrentTerritoryCode = 196
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RW          CurrentTerritoryCode = 197
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SA          CurrentTerritoryCode = 198
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SB          CurrentTerritoryCode = 199
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SC          CurrentTerritoryCode = 200
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SD          CurrentTerritoryCode = 201
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SE          CurrentTerritoryCode = 202
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SG          CurrentTerritoryCode = 203
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SH          CurrentTerritoryCode = 204
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SI          CurrentTerritoryCode = 205
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SJ          CurrentTerritoryCode = 206
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SK          CurrentTerritoryCode = 207
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SL          CurrentTerritoryCode = 208
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SM          CurrentTerritoryCode = 209
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SN          CurrentTerritoryCode = 210
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SO          CurrentTerritoryCode = 211
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SR          CurrentTerritoryCode = 212
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SS          CurrentTerritoryCode = 213
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ST          CurrentTerritoryCode = 214
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SV          CurrentTerritoryCode = 215
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SX          CurrentTerritoryCode = 216
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SY          CurrentTerritoryCode = 217
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SZ          CurrentTerritoryCode = 218
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TC          CurrentTerritoryCode = 219
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TD          CurrentTerritoryCode = 220
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TF          CurrentTerritoryCode = 221
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TG          CurrentTerritoryCode = 222
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TH          CurrentTerritoryCode = 223
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TJ          CurrentTerritoryCode = 224
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TK          CurrentTerritoryCode = 225
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TL          CurrentTerritoryCode = 226
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TM          CurrentTerritoryCode = 227
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TN          CurrentTerritoryCode = 228
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TO          CurrentTerritoryCode = 229
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TR          CurrentTerritoryCode = 230
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TT          CurrentTerritoryCode = 231
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TV          CurrentTerritoryCode = 232
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TW          CurrentTerritoryCode = 233
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TZ          CurrentTerritoryCode = 234
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UA          CurrentTerritoryCode = 235
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UG          CurrentTerritoryCode = 236
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UM          CurrentTerritoryCode = 237
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_US          CurrentTerritoryCode = 238
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UY          CurrentTerritoryCode = 239
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UZ          CurrentTerritoryCode = 240
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VA          CurrentTerritoryCode = 241
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VC          CurrentTerritoryCode = 242
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VE          CurrentTerritoryCode = 243
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VG          CurrentTerritoryCode = 244
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VI          CurrentTerritoryCode = 245
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VN          CurrentTerritoryCode = 246
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VU          CurrentTerritoryCode = 247
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_WF          CurrentTerritoryCode = 248
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_WS          CurrentTerritoryCode = 249
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_YE          CurrentTerritoryCode = 250
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_YT          CurrentTerritoryCode = 251
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ZA          CurrentTerritoryCode = 252
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ZM          CurrentTerritoryCode = 253
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ZW          CurrentTerritoryCode = 254
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_4         CurrentTerritoryCode = 255
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_8         CurrentTerritoryCode = 256
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_12        CurrentTerritoryCode = 257
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_20        CurrentTerritoryCode = 258
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_24        CurrentTerritoryCode = 259
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_28        CurrentTerritoryCode = 260
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_31        CurrentTerritoryCode = 261
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_32        CurrentTerritoryCode = 262
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_36        CurrentTerritoryCode = 263
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_40        CurrentTerritoryCode = 264
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_44        CurrentTerritoryCode = 265
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_48        CurrentTerritoryCode = 266
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_50        CurrentTerritoryCode = 267
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_51        CurrentTerritoryCode = 268
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_52        CurrentTerritoryCode = 269
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_56        CurrentTerritoryCode = 270
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_64        CurrentTerritoryCode = 271
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_68        CurrentTerritoryCode = 272
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_70        CurrentTerritoryCode = 273
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_72        CurrentTerritoryCode = 274
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_76        CurrentTerritoryCode = 275
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_84        CurrentTerritoryCode = 276
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_90        CurrentTerritoryCode = 277
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_96        CurrentTerritoryCode = 278
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_100       CurrentTerritoryCode = 279
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_104       CurrentTerritoryCode = 280
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_108       CurrentTerritoryCode = 281
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_112       CurrentTerritoryCode = 282
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_116       CurrentTerritoryCode = 283
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_120       CurrentTerritoryCode = 284
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_124       CurrentTerritoryCode = 285
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_132       CurrentTerritoryCode = 286
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_140       CurrentTerritoryCode = 287
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_144       CurrentTerritoryCode = 288
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_148       CurrentTerritoryCode = 289
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_152       CurrentTerritoryCode = 290
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_156       CurrentTerritoryCode = 291
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_158       CurrentTerritoryCode = 292
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_170       CurrentTerritoryCode = 293
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_174       CurrentTerritoryCode = 294
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_178       CurrentTerritoryCode = 295
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_180       CurrentTerritoryCode = 296
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_188       CurrentTerritoryCode = 297
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_191       CurrentTerritoryCode = 298
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_192       CurrentTerritoryCode = 299
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_196       CurrentTerritoryCode = 300
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_200       CurrentTerritoryCode = 301
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_203       CurrentTerritoryCode = 302
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_204       CurrentTerritoryCode = 303
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_208       CurrentTerritoryCode = 304
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_212       CurrentTerritoryCode = 305
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_214       CurrentTerritoryCode = 306
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_218       CurrentTerritoryCode = 307
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_222       CurrentTerritoryCode = 308
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_226       CurrentTerritoryCode = 309
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_230       CurrentTerritoryCode = 310
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_231       CurrentTerritoryCode = 311
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_232       CurrentTerritoryCode = 312
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_233       CurrentTerritoryCode = 313
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_242       CurrentTerritoryCode = 314
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_246       CurrentTerritoryCode = 315
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_250       CurrentTerritoryCode = 316
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_258       CurrentTerritoryCode = 317
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_262       CurrentTerritoryCode = 318
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_266       CurrentTerritoryCode = 319
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_268       CurrentTerritoryCode = 320
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_270       CurrentTerritoryCode = 321
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_276       CurrentTerritoryCode = 322
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_278       CurrentTerritoryCode = 323
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_280       CurrentTerritoryCode = 324
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_288       CurrentTerritoryCode = 325
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_296       CurrentTerritoryCode = 326
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_300       CurrentTerritoryCode = 327
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_308       CurrentTerritoryCode = 328
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_320       CurrentTerritoryCode = 329
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_324       CurrentTerritoryCode = 330
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_328       CurrentTerritoryCode = 331
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_332       CurrentTerritoryCode = 332
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_336       CurrentTerritoryCode = 333
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_340       CurrentTerritoryCode = 334
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_344       CurrentTerritoryCode = 335
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_348       CurrentTerritoryCode = 336
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_352       CurrentTerritoryCode = 337
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_356       CurrentTerritoryCode = 338
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_360       CurrentTerritoryCode = 339
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_364       CurrentTerritoryCode = 340
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_368       CurrentTerritoryCode = 341
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_372       CurrentTerritoryCode = 342
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_376       CurrentTerritoryCode = 343
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_380       CurrentTerritoryCode = 344
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_384       CurrentTerritoryCode = 345
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_388       CurrentTerritoryCode = 346
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_392       CurrentTerritoryCode = 347
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_398       CurrentTerritoryCode = 348
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_400       CurrentTerritoryCode = 349
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_404       CurrentTerritoryCode = 350
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_408       CurrentTerritoryCode = 351
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_410       CurrentTerritoryCode = 352
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_414       CurrentTerritoryCode = 353
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_417       CurrentTerritoryCode = 354
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_418       CurrentTerritoryCode = 355
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_422       CurrentTerritoryCode = 356
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_426       CurrentTerritoryCode = 357
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_428       CurrentTerritoryCode = 358
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_430       CurrentTerritoryCode = 359
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_434       CurrentTerritoryCode = 360
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_438       CurrentTerritoryCode = 361
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_440       CurrentTerritoryCode = 362
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_442       CurrentTerritoryCode = 363
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_446       CurrentTerritoryCode = 364
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_450       CurrentTerritoryCode = 365
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_454       CurrentTerritoryCode = 366
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_458       CurrentTerritoryCode = 367
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_462       CurrentTerritoryCode = 368
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_466       CurrentTerritoryCode = 369
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_470       CurrentTerritoryCode = 370
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_478       CurrentTerritoryCode = 371
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_480       CurrentTerritoryCode = 372
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_484       CurrentTerritoryCode = 373
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_492       CurrentTerritoryCode = 374
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_496       CurrentTerritoryCode = 375
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_498       CurrentTerritoryCode = 376
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_499       CurrentTerritoryCode = 377
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_504       CurrentTerritoryCode = 378
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_508       CurrentTerritoryCode = 379
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_512       CurrentTerritoryCode = 380
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_516       CurrentTerritoryCode = 381
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_520       CurrentTerritoryCode = 382
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_524       CurrentTerritoryCode = 383
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_528       CurrentTerritoryCode = 384
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_540       CurrentTerritoryCode = 385
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_548       CurrentTerritoryCode = 386
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_554       CurrentTerritoryCode = 387
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_558       CurrentTerritoryCode = 388
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_562       CurrentTerritoryCode = 389
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_566       CurrentTerritoryCode = 390
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_578       CurrentTerritoryCode = 391
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_583       CurrentTerritoryCode = 392
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_584       CurrentTerritoryCode = 393
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_585       CurrentTerritoryCode = 394
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_586       CurrentTerritoryCode = 395
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_591       CurrentTerritoryCode = 396
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_598       CurrentTerritoryCode = 397
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_600       CurrentTerritoryCode = 398
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_604       CurrentTerritoryCode = 399
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_608       CurrentTerritoryCode = 400
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_616       CurrentTerritoryCode = 401
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_620       CurrentTerritoryCode = 402
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_624       CurrentTerritoryCode = 403
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_626       CurrentTerritoryCode = 404
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_630       CurrentTerritoryCode = 405
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_634       CurrentTerritoryCode = 406
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_642       CurrentTerritoryCode = 407
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_643       CurrentTerritoryCode = 408
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_646       CurrentTerritoryCode = 409
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_659       CurrentTerritoryCode = 410
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_662       CurrentTerritoryCode = 411
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_670       CurrentTerritoryCode = 412
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_674       CurrentTerritoryCode = 413
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_678       CurrentTerritoryCode = 414
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_682       CurrentTerritoryCode = 415
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_686       CurrentTerritoryCode = 416
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_688       CurrentTerritoryCode = 417
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_690       CurrentTerritoryCode = 418
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_694       CurrentTerritoryCode = 419
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_702       CurrentTerritoryCode = 420
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_703       CurrentTerritoryCode = 421
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_704       CurrentTerritoryCode = 422
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_705       CurrentTerritoryCode = 423
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_706       CurrentTerritoryCode = 424
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_710       CurrentTerritoryCode = 425
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_716       CurrentTerritoryCode = 426
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_720       CurrentTerritoryCode = 427
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_724       CurrentTerritoryCode = 428
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_728       CurrentTerritoryCode = 429
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_729       CurrentTerritoryCode = 430
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_732       CurrentTerritoryCode = 431
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_736       CurrentTerritoryCode = 432
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_740       CurrentTerritoryCode = 433
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_748       CurrentTerritoryCode = 434
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_752       CurrentTerritoryCode = 435
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_756       CurrentTerritoryCode = 436
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_760       CurrentTerritoryCode = 437
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_762       CurrentTerritoryCode = 438
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_764       CurrentTerritoryCode = 439
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_768       CurrentTerritoryCode = 440
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_776       CurrentTerritoryCode = 441
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_780       CurrentTerritoryCode = 442
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_784       CurrentTerritoryCode = 443
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_788       CurrentTerritoryCode = 444
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_792       CurrentTerritoryCode = 445
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_795       CurrentTerritoryCode = 446
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_798       CurrentTerritoryCode = 447
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_800       CurrentTerritoryCode = 448
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_804       CurrentTerritoryCode = 449
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_807       CurrentTerritoryCode = 450
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_810       CurrentTerritoryCode = 451
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_818       CurrentTerritoryCode = 452
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_826       CurrentTerritoryCode = 453
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_834       CurrentTerritoryCode = 454
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_840       CurrentTerritoryCode = 455
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_854       CurrentTerritoryCode = 456
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_858       CurrentTerritoryCode = 457
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_860       CurrentTerritoryCode = 458
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_862       CurrentTerritoryCode = 459
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_882       CurrentTerritoryCode = 460
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_886       CurrentTerritoryCode = 461
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_887       CurrentTerritoryCode = 462
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_890       CurrentTerritoryCode = 463
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_891       CurrentTerritoryCode = 464
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_894       CurrentTerritoryCode = 465
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2100      CurrentTerritoryCode = 466
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2101      CurrentTerritoryCode = 467
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2102      CurrentTerritoryCode = 468
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2103      CurrentTerritoryCode = 469
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2104      CurrentTerritoryCode = 470
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2105      CurrentTerritoryCode = 471
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2106      CurrentTerritoryCode = 472
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2107      CurrentTerritoryCode = 473
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2108      CurrentTerritoryCode = 474
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2109      CurrentTerritoryCode = 475
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2110      CurrentTerritoryCode = 476
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2111      CurrentTerritoryCode = 477
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2112      CurrentTerritoryCode = 478
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2113      CurrentTerritoryCode = 479
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2114      CurrentTerritoryCode = 480
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2115      CurrentTerritoryCode = 481
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2116      CurrentTerritoryCode = 482
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2117      CurrentTerritoryCode = 483
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2118      CurrentTerritoryCode = 484
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2119      CurrentTerritoryCode = 485
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2120      CurrentTerritoryCode = 486
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2121      CurrentTerritoryCode = 487
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2122      CurrentTerritoryCode = 488
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2123      CurrentTerritoryCode = 489
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2124      CurrentTerritoryCode = 490
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2125      CurrentTerritoryCode = 491
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2126      CurrentTerritoryCode = 492
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2127      CurrentTerritoryCode = 493
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2128      CurrentTerritoryCode = 494
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2129      CurrentTerritoryCode = 495
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2130      CurrentTerritoryCode = 496
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2131      CurrentTerritoryCode = 497
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2132      CurrentTerritoryCode = 498
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2133      CurrentTerritoryCode = 499
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2134      CurrentTerritoryCode = 500
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2136      CurrentTerritoryCode = 501
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_XK          CurrentTerritoryCode = 502
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_WORLDWIDE   CurrentTerritoryCode = 503
)

// Enum value maps for CurrentTerritoryCode.
var (
	CurrentTerritoryCode_name = map[int32]string{
		0:   "CURRENT_TERRITORY_CODE_UNSPECIFIED",
		1:   "CURRENT_TERRITORY_CODE_AD",
		2:   "CURRENT_TERRITORY_CODE_AE",
		3:   "CURRENT_TERRITORY_CODE_AF",
		4:   "CURRENT_TERRITORY_CODE_AG",
		5:   "CURRENT_TERRITORY_CODE_AI",
		6:   "CURRENT_TERRITORY_CODE_AL",
		7:   "CURRENT_TERRITORY_CODE_AM",
		8:   "CURRENT_TERRITORY_CODE_AN",
		9:   "CURRENT_TERRITORY_CODE_AO",
		10:  "CURRENT_TERRITORY_CODE_AQ",
		11:  "CURRENT_TERRITORY_CODE_AR",
		12:  "CURRENT_TERRITORY_CODE_AS",
		13:  "CURRENT_TERRITORY_CODE_AT",
		14:  "CURRENT_TERRITORY_CODE_AU",
		15:  "CURRENT_TERRITORY_CODE_AW",
		16:  "CURRENT_TERRITORY_CODE_AX",
		17:  "CURRENT_TERRITORY_CODE_AZ",
		18:  "CURRENT_TERRITORY_CODE_BA",
		19:  "CURRENT_TERRITORY_CODE_BB",
		20:  "CURRENT_TERRITORY_CODE_BD",
		21:  "CURRENT_TERRITORY_CODE_BE",
		22:  "CURRENT_TERRITORY_CODE_BF",
		23:  "CURRENT_TERRITORY_CODE_BG",
		24:  "CURRENT_TERRITORY_CODE_BH",
		25:  "CURRENT_TERRITORY_CODE_BI",
		26:  "CURRENT_TERRITORY_CODE_BJ",
		27:  "CURRENT_TERRITORY_CODE_BL",
		28:  "CURRENT_TERRITORY_CODE_BM",
		29:  "CURRENT_TERRITORY_CODE_BN",
		30:  "CURRENT_TERRITORY_CODE_BO",
		31:  "CURRENT_TERRITORY_CODE_BQ",
		32:  "CURRENT_TERRITORY_CODE_BR",
		33:  "CURRENT_TERRITORY_CODE_BS",
		34:  "CURRENT_TERRITORY_CODE_BT",
		35:  "CURRENT_TERRITORY_CODE_BV",
		36:  "CURRENT_TERRITORY_CODE_BW",
		37:  "CURRENT_TERRITORY_CODE_BY",
		38:  "CURRENT_TERRITORY_CODE_BZ",
		39:  "CURRENT_TERRITORY_CODE_CA",
		40:  "CURRENT_TERRITORY_CODE_CC",
		41:  "CURRENT_TERRITORY_CODE_CD",
		42:  "CURRENT_TERRITORY_CODE_CF",
		43:  "CURRENT_TERRITORY_CODE_CG",
		44:  "CURRENT_TERRITORY_CODE_CH",
		45:  "CURRENT_TERRITORY_CODE_CI",
		46:  "CURRENT_TERRITORY_CODE_CK",
		47:  "CURRENT_TERRITORY_CODE_CL",
		48:  "CURRENT_TERRITORY_CODE_CM",
		49:  "CURRENT_TERRITORY_CODE_CN",
		50:  "CURRENT_TERRITORY_CODE_CO",
		51:  "CURRENT_TERRITORY_CODE_CR",
		52:  "CURRENT_TERRITORY_CODE_CS",
		53:  "CURRENT_TERRITORY_CODE_CU",
		54:  "CURRENT_TERRITORY_CODE_CV",
		55:  "CURRENT_TERRITORY_CODE_CW",
		56:  "CURRENT_TERRITORY_CODE_CX",
		57:  "CURRENT_TERRITORY_CODE_CY",
		58:  "CURRENT_TERRITORY_CODE_CZ",
		59:  "CURRENT_TERRITORY_CODE_DE",
		60:  "CURRENT_TERRITORY_CODE_DJ",
		61:  "CURRENT_TERRITORY_CODE_DK",
		62:  "CURRENT_TERRITORY_CODE_DM",
		63:  "CURRENT_TERRITORY_CODE_DO",
		64:  "CURRENT_TERRITORY_CODE_DZ",
		65:  "CURRENT_TERRITORY_CODE_EC",
		66:  "CURRENT_TERRITORY_CODE_EE",
		67:  "CURRENT_TERRITORY_CODE_EG",
		68:  "CURRENT_TERRITORY_CODE_EH",
		69:  "CURRENT_TERRITORY_CODE_ER",
		70:  "CURRENT_TERRITORY_CODE_ES",
		71:  "CURRENT_TERRITORY_CODE_ES_CE",
		72:  "CURRENT_TERRITORY_CODE_ES_CN",
		73:  "CURRENT_TERRITORY_CODE_ES_ML",
		74:  "CURRENT_TERRITORY_CODE_ET",
		75:  "CURRENT_TERRITORY_CODE_FI",
		76:  "CURRENT_TERRITORY_CODE_FJ",
		77:  "CURRENT_TERRITORY_CODE_FK",
		78:  "CURRENT_TERRITORY_CODE_FM",
		79:  "CURRENT_TERRITORY_CODE_FO",
		80:  "CURRENT_TERRITORY_CODE_FR",
		81:  "CURRENT_TERRITORY_CODE_GA",
		82:  "CURRENT_TERRITORY_CODE_GB",
		83:  "CURRENT_TERRITORY_CODE_GD",
		84:  "CURRENT_TERRITORY_CODE_GE",
		85:  "CURRENT_TERRITORY_CODE_GF",
		86:  "CURRENT_TERRITORY_CODE_GG",
		87:  "CURRENT_TERRITORY_CODE_GH",
		88:  "CURRENT_TERRITORY_CODE_GI",
		89:  "CURRENT_TERRITORY_CODE_GL",
		90:  "CURRENT_TERRITORY_CODE_GM",
		91:  "CURRENT_TERRITORY_CODE_GN",
		92:  "CURRENT_TERRITORY_CODE_GP",
		93:  "CURRENT_TERRITORY_CODE_GQ",
		94:  "CURRENT_TERRITORY_CODE_GR",
		95:  "CURRENT_TERRITORY_CODE_GS",
		96:  "CURRENT_TERRITORY_CODE_GT",
		97:  "CURRENT_TERRITORY_CODE_GU",
		98:  "CURRENT_TERRITORY_CODE_GW",
		99:  "CURRENT_TERRITORY_CODE_GY",
		100: "CURRENT_TERRITORY_CODE_HK",
		101: "CURRENT_TERRITORY_CODE_HM",
		102: "CURRENT_TERRITORY_CODE_HN",
		103: "CURRENT_TERRITORY_CODE_HR",
		104: "CURRENT_TERRITORY_CODE_HT",
		105: "CURRENT_TERRITORY_CODE_HU",
		106: "CURRENT_TERRITORY_CODE_ID",
		107: "CURRENT_TERRITORY_CODE_IE",
		108: "CURRENT_TERRITORY_CODE_IL",
		109: "CURRENT_TERRITORY_CODE_IM",
		110: "CURRENT_TERRITORY_CODE_IN",
		111: "CURRENT_TERRITORY_CODE_IO",
		112: "CURRENT_TERRITORY_CODE_IQ",
		113: "CURRENT_TERRITORY_CODE_IR",
		114: "CURRENT_TERRITORY_CODE_IS",
		115: "CURRENT_TERRITORY_CODE_IT",
		116: "CURRENT_TERRITORY_CODE_JE",
		117: "CURRENT_TERRITORY_CODE_JM",
		118: "CURRENT_TERRITORY_CODE_JO",
		119: "CURRENT_TERRITORY_CODE_JP",
		120: "CURRENT_TERRITORY_CODE_KE",
		121: "CURRENT_TERRITORY_CODE_KG",
		122: "CURRENT_TERRITORY_CODE_KH",
		123: "CURRENT_TERRITORY_CODE_KI",
		124: "CURRENT_TERRITORY_CODE_KM",
		125: "CURRENT_TERRITORY_CODE_KN",
		126: "CURRENT_TERRITORY_CODE_KP",
		127: "CURRENT_TERRITORY_CODE_KR",
		128: "CURRENT_TERRITORY_CODE_KW",
		129: "CURRENT_TERRITORY_CODE_KY",
		130: "CURRENT_TERRITORY_CODE_KZ",
		131: "CURRENT_TERRITORY_CODE_LA",
		132: "CURRENT_TERRITORY_CODE_LB",
		133: "CURRENT_TERRITORY_CODE_LC",
		134: "CURRENT_TERRITORY_CODE_LI",
		135: "CURRENT_TERRITORY_CODE_LK",
		136: "CURRENT_TERRITORY_CODE_LR",
		137: "CURRENT_TERRITORY_CODE_LS",
		138: "CURRENT_TERRITORY_CODE_LT",
		139: "CURRENT_TERRITORY_CODE_LU",
		140: "CURRENT_TERRITORY_CODE_LV",
		141: "CURRENT_TERRITORY_CODE_LY",
		142: "CURRENT_TERRITORY_CODE_MA",
		143: "CURRENT_TERRITORY_CODE_MC",
		144: "CURRENT_TERRITORY_CODE_MD",
		145: "CURRENT_TERRITORY_CODE_ME",
		146: "CURRENT_TERRITORY_CODE_MF",
		147: "CURRENT_TERRITORY_CODE_MG",
		148: "CURRENT_TERRITORY_CODE_MH",
		149: "CURRENT_TERRITORY_CODE_MK",
		150: "CURRENT_TERRITORY_CODE_ML",
		151: "CURRENT_TERRITORY_CODE_MM",
		152: "CURRENT_TERRITORY_CODE_MN",
		153: "CURRENT_TERRITORY_CODE_MO",
		154: "CURRENT_TERRITORY_CODE_MP",
		155: "CURRENT_TERRITORY_CODE_MQ",
		156: "CURRENT_TERRITORY_CODE_MR",
		157: "CURRENT_TERRITORY_CODE_MS",
		158: "CURRENT_TERRITORY_CODE_MT",
		159: "CURRENT_TERRITORY_CODE_MU",
		160: "CURRENT_TERRITORY_CODE_MV",
		161: "CURRENT_TERRITORY_CODE_MW",
		162: "CURRENT_TERRITORY_CODE_MX",
		163: "CURRENT_TERRITORY_CODE_MY",
		164: "CURRENT_TERRITORY_CODE_MZ",
		165: "CURRENT_TERRITORY_CODE_NA",
		166: "CURRENT_TERRITORY_CODE_NC",
		167: "CURRENT_TERRITORY_CODE_NE",
		168: "CURRENT_TERRITORY_CODE_NF",
		169: "CURRENT_TERRITORY_CODE_NG",
		170: "CURRENT_TERRITORY_CODE_NI",
		171: "CURRENT_TERRITORY_CODE_NL",
		172: "CURRENT_TERRITORY_CODE_NO",
		173: "CURRENT_TERRITORY_CODE_NP",
		174: "CURRENT_TERRITORY_CODE_NR",
		175: "CURRENT_TERRITORY_CODE_NU",
		176: "CURRENT_TERRITORY_CODE_NZ",
		177: "CURRENT_TERRITORY_CODE_OM",
		178: "CURRENT_TERRITORY_CODE_PA",
		179: "CURRENT_TERRITORY_CODE_PE",
		180: "CURRENT_TERRITORY_CODE_PF",
		181: "CURRENT_TERRITORY_CODE_PG",
		182: "CURRENT_TERRITORY_CODE_PH",
		183: "CURRENT_TERRITORY_CODE_PK",
		184: "CURRENT_TERRITORY_CODE_PL",
		185: "CURRENT_TERRITORY_CODE_PM",
		186: "CURRENT_TERRITORY_CODE_PN",
		187: "CURRENT_TERRITORY_CODE_PR",
		188: "CURRENT_TERRITORY_CODE_PS",
		189: "CURRENT_TERRITORY_CODE_PT",
		190: "CURRENT_TERRITORY_CODE_PW",
		191: "CURRENT_TERRITORY_CODE_PY",
		192: "CURRENT_TERRITORY_CODE_QA",
		193: "CURRENT_TERRITORY_CODE_RE",
		194: "CURRENT_TERRITORY_CODE_RO",
		195: "CURRENT_TERRITORY_CODE_RS",
		196: "CURRENT_TERRITORY_CODE_RU",
		197: "CURRENT_TERRITORY_CODE_RW",
		198: "CURRENT_TERRITORY_CODE_SA",
		199: "CURRENT_TERRITORY_CODE_SB",
		200: "CURRENT_TERRITORY_CODE_SC",
		201: "CURRENT_TERRITORY_CODE_SD",
		202: "CURRENT_TERRITORY_CODE_SE",
		203: "CURRENT_TERRITORY_CODE_SG",
		204: "CURRENT_TERRITORY_CODE_SH",
		205: "CURRENT_TERRITORY_CODE_SI",
		206: "CURRENT_TERRITORY_CODE_SJ",
		207: "CURRENT_TERRITORY_CODE_SK",
		208: "CURRENT_TERRITORY_CODE_SL",
		209: "CURRENT_TERRITORY_CODE_SM",
		210: "CURRENT_TERRITORY_CODE_SN",
		211: "CURRENT_TERRITORY_CODE_SO",
		212: "CURRENT_TERRITORY_CODE_SR",
		213: "CURRENT_TERRITORY_CODE_SS",
		214: "CURRENT_TERRITORY_CODE_ST",
		215: "CURRENT_TERRITORY_CODE_SV",
		216: "CURRENT_TERRITORY_CODE_SX",
		217: "CURRENT_TERRITORY_CODE_SY",
		218: "CURRENT_TERRITORY_CODE_SZ",
		219: "CURRENT_TERRITORY_CODE_TC",
		220: "CURRENT_TERRITORY_CODE_TD",
		221: "CURRENT_TERRITORY_CODE_TF",
		222: "CURRENT_TERRITORY_CODE_TG",
		223: "CURRENT_TERRITORY_CODE_TH",
		224: "CURRENT_TERRITORY_CODE_TJ",
		225: "CURRENT_TERRITORY_CODE_TK",
		226: "CURRENT_TERRITORY_CODE_TL",
		227: "CURRENT_TERRITORY_CODE_TM",
		228: "CURRENT_TERRITORY_CODE_TN",
		229: "CURRENT_TERRITORY_CODE_TO",
		230: "CURRENT_TERRITORY_CODE_TR",
		231: "CURRENT_TERRITORY_CODE_TT",
		232: "CURRENT_TERRITORY_CODE_TV",
		233: "CURRENT_TERRITORY_CODE_TW",
		234: "CURRENT_TERRITORY_CODE_TZ",
		235: "CURRENT_TERRITORY_CODE_UA",
		236: "CURRENT_TERRITORY_CODE_UG",
		237: "CURRENT_TERRITORY_CODE_UM",
		238: "CURRENT_TERRITORY_CODE_US",
		239: "CURRENT_TERRITORY_CODE_UY",
		240: "CURRENT_TERRITORY_CODE_UZ",
		241: "CURRENT_TERRITORY_CODE_VA",
		242: "CURRENT_TERRITORY_CODE_VC",
		243: "CURRENT_TERRITORY_CODE_VE",
		244: "CURRENT_TERRITORY_CODE_VG",
		245: "CURRENT_TERRITORY_CODE_VI",
		246: "CURRENT_TERRITORY_CODE_VN",
		247: "CURRENT_TERRITORY_CODE_VU",
		248: "CURRENT_TERRITORY_CODE_WF",
		249: "CURRENT_TERRITORY_CODE_WS",
		250: "CURRENT_TERRITORY_CODE_YE",
		251: "CURRENT_TERRITORY_CODE_YT",
		252: "CURRENT_TERRITORY_CODE_ZA",
		253: "CURRENT_TERRITORY_CODE_ZM",
		254: "CURRENT_TERRITORY_CODE_ZW",
		255: "CURRENT_TERRITORY_CODE_E_4",
		256: "CURRENT_TERRITORY_CODE_E_8",
		257: "CURRENT_TERRITORY_CODE_E_12",
		258: "CURRENT_TERRITORY_CODE_E_20",
		259: "CURRENT_TERRITORY_CODE_E_24",
		260: "CURRENT_TERRITORY_CODE_E_28",
		261: "CURRENT_TERRITORY_CODE_E_31",
		262: "CURRENT_TERRITORY_CODE_E_32",
		263: "CURRENT_TERRITORY_CODE_E_36",
		264: "CURRENT_TERRITORY_CODE_E_40",
		265: "CURRENT_TERRITORY_CODE_E_44",
		266: "CURRENT_TERRITORY_CODE_E_48",
		267: "CURRENT_TERRITORY_CODE_E_50",
		268: "CURRENT_TERRITORY_CODE_E_51",
		269: "CURRENT_TERRITORY_CODE_E_52",
		270: "CURRENT_TERRITORY_CODE_E_56",
		271: "CURRENT_TERRITORY_CODE_E_64",
		272: "CURRENT_TERRITORY_CODE_E_68",
		273: "CURRENT_TERRITORY_CODE_E_70",
		274: "CURRENT_TERRITORY_CODE_E_72",
		275: "CURRENT_TERRITORY_CODE_E_76",
		276: "CURRENT_TERRITORY_CODE_E_84",
		277: "CURRENT_TERRITORY_CODE_E_90",
		278: "CURRENT_TERRITORY_CODE_E_96",
		279: "CURRENT_TERRITORY_CODE_E_100",
		280: "CURRENT_TERRITORY_CODE_E_104",
		281: "CURRENT_TERRITORY_CODE_E_108",
		282: "CURRENT_TERRITORY_CODE_E_112",
		283: "CURRENT_TERRITORY_CODE_E_116",
		284: "CURRENT_TERRITORY_CODE_E_120",
		285: "CURRENT_TERRITORY_CODE_E_124",
		286: "CURRENT_TERRITORY_CODE_E_132",
		287: "CURRENT_TERRITORY_CODE_E_140",
		288: "CURRENT_TERRITORY_CODE_E_144",
		289: "CURRENT_TERRITORY_CODE_E_148",
		290: "CURRENT_TERRITORY_CODE_E_152",
		291: "CURRENT_TERRITORY_CODE_E_156",
		292: "CURRENT_TERRITORY_CODE_E_158",
		293: "CURRENT_TERRITORY_CODE_E_170",
		294: "CURRENT_TERRITORY_CODE_E_174",
		295: "CURRENT_TERRITORY_CODE_E_178",
		296: "CURRENT_TERRITORY_CODE_E_180",
		297: "CURRENT_TERRITORY_CODE_E_188",
		298: "CURRENT_TERRITORY_CODE_E_191",
		299: "CURRENT_TERRITORY_CODE_E_192",
		300: "CURRENT_TERRITORY_CODE_E_196",
		301: "CURRENT_TERRITORY_CODE_E_200",
		302: "CURRENT_TERRITORY_CODE_E_203",
		303: "CURRENT_TERRITORY_CODE_E_204",
		304: "CURRENT_TERRITORY_CODE_E_208",
		305: "CURRENT_TERRITORY_CODE_E_212",
		306: "CURRENT_TERRITORY_CODE_E_214",
		307: "CURRENT_TERRITORY_CODE_E_218",
		308: "CURRENT_TERRITORY_CODE_E_222",
		309: "CURRENT_TERRITORY_CODE_E_226",
		310: "CURRENT_TERRITORY_CODE_E_230",
		311: "CURRENT_TERRITORY_CODE_E_231",
		312: "CURRENT_TERRITORY_CODE_E_232",
		313: "CURRENT_TERRITORY_CODE_E_233",
		314: "CURRENT_TERRITORY_CODE_E_242",
		315: "CURRENT_TERRITORY_CODE_E_246",
		316: "CURRENT_TERRITORY_CODE_E_250",
		317: "CURRENT_TERRITORY_CODE_E_258",
		318: "CURRENT_TERRITORY_CODE_E_262",
		319: "CURRENT_TERRITORY_CODE_E_266",
		320: "CURRENT_TERRITORY_CODE_E_268",
		321: "CURRENT_TERRITORY_CODE_E_270",
		322: "CURRENT_TERRITORY_CODE_E_276",
		323: "CURRENT_TERRITORY_CODE_E_278",
		324: "CURRENT_TERRITORY_CODE_E_280",
		325: "CURRENT_TERRITORY_CODE_E_288",
		326: "CURRENT_TERRITORY_CODE_E_296",
		327: "CURRENT_TERRITORY_CODE_E_300",
		328: "CURRENT_TERRITORY_CODE_E_308",
		329: "CURRENT_TERRITORY_CODE_E_320",
		330: "CURRENT_TERRITORY_CODE_E_324",
		331: "CURRENT_TERRITORY_CODE_E_328",
		332: "CURRENT_TERRITORY_CODE_E_332",
		333: "CURRENT_TERRITORY_CODE_E_336",
		334: "CURRENT_TERRITORY_CODE_E_340",
		335: "CURRENT_TERRITORY_CODE_E_344",
		336: "CURRENT_TERRITORY_CODE_E_348",
		337: "CURRENT_TERRITORY_CODE_E_352",
		338: "CURRENT_TERRITORY_CODE_E_356",
		339: "CURRENT_TERRITORY_CODE_E_360",
		340: "CURRENT_TERRITORY_CODE_E_364",
		341: "CURRENT_TERRITORY_CODE_E_368",
		342: "CURRENT_TERRITORY_CODE_E_372",
		343: "CURRENT_TERRITORY_CODE_E_376",
		344: "CURRENT_TERRITORY_CODE_E_380",
		345: "CURRENT_TERRITORY_CODE_E_384",
		346: "CURRENT_TERRITORY_CODE_E_388",
		347: "CURRENT_TERRITORY_CODE_E_392",
		348: "CURRENT_TERRITORY_CODE_E_398",
		349: "CURRENT_TERRITORY_CODE_E_400",
		350: "CURRENT_TERRITORY_CODE_E_404",
		351: "CURRENT_TERRITORY_CODE_E_408",
		352: "CURRENT_TERRITORY_CODE_E_410",
		353: "CURRENT_TERRITORY_CODE_E_414",
		354: "CURRENT_TERRITORY_CODE_E_417",
		355: "CURRENT_TERRITORY_CODE_E_418",
		356: "CURRENT_TERRITORY_CODE_E_422",
		357: "CURRENT_TERRITORY_CODE_E_426",
		358: "CURRENT_TERRITORY_CODE_E_428",
		359: "CURRENT_TERRITORY_CODE_E_430",
		360: "CURRENT_TERRITORY_CODE_E_434",
		361: "CURRENT_TERRITORY_CODE_E_438",
		362: "CURRENT_TERRITORY_CODE_E_440",
		363: "CURRENT_TERRITORY_CODE_E_442",
		364: "CURRENT_TERRITORY_CODE_E_446",
		365: "CURRENT_TERRITORY_CODE_E_450",
		366: "CURRENT_TERRITORY_CODE_E_454",
		367: "CURRENT_TERRITORY_CODE_E_458",
		368: "CURRENT_TERRITORY_CODE_E_462",
		369: "CURRENT_TERRITORY_CODE_E_466",
		370: "CURRENT_TERRITORY_CODE_E_470",
		371: "CURRENT_TERRITORY_CODE_E_478",
		372: "CURRENT_TERRITORY_CODE_E_480",
		373: "CURRENT_TERRITORY_CODE_E_484",
		374: "CURRENT_TERRITORY_CODE_E_492",
		375: "CURRENT_TERRITORY_CODE_E_496",
		376: "CURRENT_TERRITORY_CODE_E_498",
		377: "CURRENT_TERRITORY_CODE_E_499",
		378: "CURRENT_TERRITORY_CODE_E_504",
		379: "CURRENT_TERRITORY_CODE_E_508",
		380: "CURRENT_TERRITORY_CODE_E_512",
		381: "CURRENT_TERRITORY_CODE_E_516",
		382: "CURRENT_TERRITORY_CODE_E_520",
		383: "CURRENT_TERRITORY_CODE_E_524",
		384: "CURRENT_TERRITORY_CODE_E_528",
		385: "CURRENT_TERRITORY_CODE_E_540",
		386: "CURRENT_TERRITORY_CODE_E_548",
		387: "CURRENT_TERRITORY_CODE_E_554",
		388: "CURRENT_TERRITORY_CODE_E_558",
		389: "CURRENT_TERRITORY_CODE_E_562",
		390: "CURRENT_TERRITORY_CODE_E_566",
		391: "CURRENT_TERRITORY_CODE_E_578",
		392: "CURRENT_TERRITORY_CODE_E_583",
		393: "CURRENT_TERRITORY_CODE_E_584",
		394: "CURRENT_TERRITORY_CODE_E_585",
		395: "CURRENT_TERRITORY_CODE_E_586",
		396: "CURRENT_TERRITORY_CODE_E_591",
		397: "CURRENT_TERRITORY_CODE_E_598",
		398: "CURRENT_TERRITORY_CODE_E_600",
		399: "CURRENT_TERRITORY_CODE_E_604",
		400: "CURRENT_TERRITORY_CODE_E_608",
		401: "CURRENT_TERRITORY_CODE_E_616",
		402: "CURRENT_TERRITORY_CODE_E_620",
		403: "CURRENT_TERRITORY_CODE_E_624",
		404: "CURRENT_TERRITORY_CODE_E_626",
		405: "CURRENT_TERRITORY_CODE_E_630",
		406: "CURRENT_TERRITORY_CODE_E_634",
		407: "CURRENT_TERRITORY_CODE_E_642",
		408: "CURRENT_TERRITORY_CODE_E_643",
		409: "CURRENT_TERRITORY_CODE_E_646",
		410: "CURRENT_TERRITORY_CODE_E_659",
		411: "CURRENT_TERRITORY_CODE_E_662",
		412: "CURRENT_TERRITORY_CODE_E_670",
		413: "CURRENT_TERRITORY_CODE_E_674",
		414: "CURRENT_TERRITORY_CODE_E_678",
		415: "CURRENT_TERRITORY_CODE_E_682",
		416: "CURRENT_TERRITORY_CODE_E_686",
		417: "CURRENT_TERRITORY_CODE_E_688",
		418: "CURRENT_TERRITORY_CODE_E_690",
		419: "CURRENT_TERRITORY_CODE_E_694",
		420: "CURRENT_TERRITORY_CODE_E_702",
		421: "CURRENT_TERRITORY_CODE_E_703",
		422: "CURRENT_TERRITORY_CODE_E_704",
		423: "CURRENT_TERRITORY_CODE_E_705",
		424: "CURRENT_TERRITORY_CODE_E_706",
		425: "CURRENT_TERRITORY_CODE_E_710",
		426: "CURRENT_TERRITORY_CODE_E_716",
		427: "CURRENT_TERRITORY_CODE_E_720",
		428: "CURRENT_TERRITORY_CODE_E_724",
		429: "CURRENT_TERRITORY_CODE_E_728",
		430: "CURRENT_TERRITORY_CODE_E_729",
		431: "CURRENT_TERRITORY_CODE_E_732",
		432: "CURRENT_TERRITORY_CODE_E_736",
		433: "CURRENT_TERRITORY_CODE_E_740",
		434: "CURRENT_TERRITORY_CODE_E_748",
		435: "CURRENT_TERRITORY_CODE_E_752",
		436: "CURRENT_TERRITORY_CODE_E_756",
		437: "CURRENT_TERRITORY_CODE_E_760",
		438: "CURRENT_TERRITORY_CODE_E_762",
		439: "CURRENT_TERRITORY_CODE_E_764",
		440: "CURRENT_TERRITORY_CODE_E_768",
		441: "CURRENT_TERRITORY_CODE_E_776",
		442: "CURRENT_TERRITORY_CODE_E_780",
		443: "CURRENT_TERRITORY_CODE_E_784",
		444: "CURRENT_TERRITORY_CODE_E_788",
		445: "CURRENT_TERRITORY_CODE_E_792",
		446: "CURRENT_TERRITORY_CODE_E_795",
		447: "CURRENT_TERRITORY_CODE_E_798",
		448: "CURRENT_TERRITORY_CODE_E_800",
		449: "CURRENT_TERRITORY_CODE_E_804",
		450: "CURRENT_TERRITORY_CODE_E_807",
		451: "CURRENT_TERRITORY_CODE_E_810",
		452: "CURRENT_TERRITORY_CODE_E_818",
		453: "CURRENT_TERRITORY_CODE_E_826",
		454: "CURRENT_TERRITORY_CODE_E_834",
		455: "CURRENT_TERRITORY_CODE_E_840",
		456: "CURRENT_TERRITORY_CODE_E_854",
		457: "CURRENT_TERRITORY_CODE_E_858",
		458: "CURRENT_TERRITORY_CODE_E_860",
		459: "CURRENT_TERRITORY_CODE_E_862",
		460: "CURRENT_TERRITORY_CODE_E_882",
		461: "CURRENT_TERRITORY_CODE_E_886",
		462: "CURRENT_TERRITORY_CODE_E_887",
		463: "CURRENT_TERRITORY_CODE_E_890",
		464: "CURRENT_TERRITORY_CODE_E_891",
		465: "CURRENT_TERRITORY_CODE_E_894",
		466: "CURRENT_TERRITORY_CODE_E_2100",
		467: "CURRENT_TERRITORY_CODE_E_2101",
		468: "CURRENT_TERRITORY_CODE_E_2102",
		469: "CURRENT_TERRITORY_CODE_E_2103",
		470: "CURRENT_TERRITORY_CODE_E_2104",
		471: "CURRENT_TERRITORY_CODE_E_2105",
		472: "CURRENT_TERRITORY_CODE_E_2106",
		473: "CURRENT_TERRITORY_CODE_E_2107",
		474: "CURRENT_TERRITORY_CODE_E_2108",
		475: "CURRENT_TERRITORY_CODE_E_2109",
		476: "CURRENT_TERRITORY_CODE_E_2110",
		477: "CURRENT_TERRITORY_CODE_E_2111",
		478: "CURRENT_TERRITORY_CODE_E_2112",
		479: "CURRENT_TERRITORY_CODE_E_2113",
		480: "CURRENT_TERRITORY_CODE_E_2114",
		481: "CURRENT_TERRITORY_CODE_E_2115",
		482: "CURRENT_TERRITORY_CODE_E_2116",
		483: "CURRENT_TERRITORY_CODE_E_2117",
		484: "CURRENT_TERRITORY_CODE_E_2118",
		485: "CURRENT_TERRITORY_CODE_E_2119",
		486: "CURRENT_TERRITORY_CODE_E_2120",
		487: "CURRENT_TERRITORY_CODE_E_2121",
		488: "CURRENT_TERRITORY_CODE_E_2122",
		489: "CURRENT_TERRITORY_CODE_E_2123",
		490: "CURRENT_TERRITORY_CODE_E_2124",
		491: "CURRENT_TERRITORY_CODE_E_2125",
		492: "CURRENT_TERRITORY_CODE_E_2126",
		493: "CURRENT_TERRITORY_CODE_E_2127",
		494: "CURRENT_TERRITORY_CODE_E_2128",
		495: "CURRENT_TERRITORY_CODE_E_2129",
		496: "CURRENT_TERRITORY_CODE_E_2130",
		497: "CURRENT_TERRITORY_CODE_E_2131",
		498: "CURRENT_TERRITORY_CODE_E_2132",
		499: "CURRENT_TERRITORY_CODE_E_2133",
		500: "CURRENT_TERRITORY_CODE_E_2134",
		501: "CURRENT_TERRITORY_CODE_E_2136",
		502: "CURRENT_TERRITORY_CODE_XK",
		503: "CURRENT_TERRITORY_CODE_WORLDWIDE",
	}
	CurrentTerritoryCode_value = map[string]int32{
		"CURRENT_TERRITORY_CODE_UNSPECIFIED": 0,
		"CURRENT_TERRITORY_CODE_AD":          1,
		"CURRENT_TERRITORY_CODE_AE":          2,
		"CURRENT_TERRITORY_CODE_AF":          3,
		"CURRENT_TERRITORY_CODE_AG":          4,
		"CURRENT_TERRITORY_CODE_AI":          5,
		"CURRENT_TERRITORY_CODE_AL":          6,
		"CURRENT_TERRITORY_CODE_AM":          7,
		"CURRENT_TERRITORY_CODE_AN":          8,
		"CURRENT_TERRITORY_CODE_AO":          9,
		"CURRENT_TERRITORY_CODE_AQ":          10,
		"CURRENT_TERRITORY_CODE_AR":          11,
		"CURRENT_TERRITORY_CODE_AS":          12,
		"CURRENT_TERRITORY_CODE_AT":          13,
		"CURRENT_TERRITORY_CODE_AU":          14,
		"CURRENT_TERRITORY_CODE_AW":          15,
		"CURRENT_TERRITORY_CODE_AX":          16,
		"CURRENT_TERRITORY_CODE_AZ":          17,
		"CURRENT_TERRITORY_CODE_BA":          18,
		"CURRENT_TERRITORY_CODE_BB":          19,
		"CURRENT_TERRITORY_CODE_BD":          20,
		"CURRENT_TERRITORY_CODE_BE":          21,
		"CURRENT_TERRITORY_CODE_BF":          22,
		"CURRENT_TERRITORY_CODE_BG":          23,
		"CURRENT_TERRITORY_CODE_BH":          24,
		"CURRENT_TERRITORY_CODE_BI":          25,
		"CURRENT_TERRITORY_CODE_BJ":          26,
		"CURRENT_TERRITORY_CODE_BL":          27,
		"CURRENT_TERRITORY_CODE_BM":          28,
		"CURRENT_TERRITORY_CODE_BN":          29,
		"CURRENT_TERRITORY_CODE_BO":          30,
		"CURRENT_TERRITORY_CODE_BQ":          31,
		"CURRENT_TERRITORY_CODE_BR":          32,
		"CURRENT_TERRITORY_CODE_BS":          33,
		"CURRENT_TERRITORY_CODE_BT":          34,
		"CURRENT_TERRITORY_CODE_BV":          35,
		"CURRENT_TERRITORY_CODE_BW":          36,
		"CURRENT_TERRITORY_CODE_BY":          37,
		"CURRENT_TERRITORY_CODE_BZ":          38,
		"CURRENT_TERRITORY_CODE_CA":          39,
		"CURRENT_TERRITORY_CODE_CC":          40,
		"CURRENT_TERRITORY_CODE_CD":          41,
		"CURRENT_TERRITORY_CODE_CF":          42,
		"CURRENT_TERRITORY_CODE_CG":          43,
		"CURRENT_TERRITORY_CODE_CH":          44,
		"CURRENT_TERRITORY_CODE_CI":          45,
		"CURRENT_TERRITORY_CODE_CK":          46,
		"CURRENT_TERRITORY_CODE_CL":          47,
		"CURRENT_TERRITORY_CODE_CM":          48,
		"CURRENT_TERRITORY_CODE_CN":          49,
		"CURRENT_TERRITORY_CODE_CO":          50,
		"CURRENT_TERRITORY_CODE_CR":          51,
		"CURRENT_TERRITORY_CODE_CS":          52,
		"CURRENT_TERRITORY_CODE_CU":          53,
		"CURRENT_TERRITORY_CODE_CV":          54,
		"CURRENT_TERRITORY_CODE_CW":          55,
		"CURRENT_TERRITORY_CODE_CX":          56,
		"CURRENT_TERRITORY_CODE_CY":          57,
		"CURRENT_TERRITORY_CODE_CZ":          58,
		"CURRENT_TERRITORY_CODE_DE":          59,
		"CURRENT_TERRITORY_CODE_DJ":          60,
		"CURRENT_TERRITORY_CODE_DK":          61,
		"CURRENT_TERRITORY_CODE_DM":          62,
		"CURRENT_TERRITORY_CODE_DO":          63,
		"CURRENT_TERRITORY_CODE_DZ":          64,
		"CURRENT_TERRITORY_CODE_EC":          65,
		"CURRENT_TERRITORY_CODE_EE":          66,
		"CURRENT_TERRITORY_CODE_EG":          67,
		"CURRENT_TERRITORY_CODE_EH":          68,
		"CURRENT_TERRITORY_CODE_ER":          69,
		"CURRENT_TERRITORY_CODE_ES":          70,
		"CURRENT_TERRITORY_CODE_ES_CE":       71,
		"CURRENT_TERRITORY_CODE_ES_CN":       72,
		"CURRENT_TERRITORY_CODE_ES_ML":       73,
		"CURRENT_TERRITORY_CODE_ET":          74,
		"CURRENT_TERRITORY_CODE_FI":          75,
		"CURRENT_TERRITORY_CODE_FJ":          76,
		"CURRENT_TERRITORY_CODE_FK":          77,
		"CURRENT_TERRITORY_CODE_FM":          78,
		"CURRENT_TERRITORY_CODE_FO":          79,
		"CURRENT_TERRITORY_CODE_FR":          80,
		"CURRENT_TERRITORY_CODE_GA":          81,
		"CURRENT_TERRITORY_CODE_GB":          82,
		"CURRENT_TERRITORY_CODE_GD":          83,
		"CURRENT_TERRITORY_CODE_GE":          84,
		"CURRENT_TERRITORY_CODE_GF":          85,
		"CURRENT_TERRITORY_CODE_GG":          86,
		"CURRENT_TERRITORY_CODE_GH":          87,
		"CURRENT_TERRITORY_CODE_GI":          88,
		"CURRENT_TERRITORY_CODE_GL":          89,
		"CURRENT_TERRITORY_CODE_GM":          90,
		"CURRENT_TERRITORY_CODE_GN":          91,
		"CURRENT_TERRITORY_CODE_GP":          92,
		"CURRENT_TERRITORY_CODE_GQ":          93,
		"CURRENT_TERRITORY_CODE_GR":          94,
		"CURRENT_TERRITORY_CODE_GS":          95,
		"CURRENT_TERRITORY_CODE_GT":          96,
		"CURRENT_TERRITORY_CODE_GU":          97,
		"CURRENT_TERRITORY_CODE_GW":          98,
		"CURRENT_TERRITORY_CODE_GY":          99,
		"CURRENT_TERRITORY_CODE_HK":          100,
		"CURRENT_TERRITORY_CODE_HM":          101,
		"CURRENT_TERRITORY_CODE_HN":          102,
		"CURRENT_TERRITORY_CODE_HR":          103,
		"CURRENT_TERRITORY_CODE_HT":          104,
		"CURRENT_TERRITORY_CODE_HU":          105,
		"CURRENT_TERRITORY_CODE_ID":          106,
		"CURRENT_TERRITORY_CODE_IE":          107,
		"CURRENT_TERRITORY_CODE_IL":          108,
		"CURRENT_TERRITORY_CODE_IM":          109,
		"CURRENT_TERRITORY_CODE_IN":          110,
		"CURRENT_TERRITORY_CODE_IO":          111,
		"CURRENT_TERRITORY_CODE_IQ":          112,
		"CURRENT_TERRITORY_CODE_IR":          113,
		"CURRENT_TERRITORY_CODE_IS":          114,
		"CURRENT_TERRITORY_CODE_IT":          115,
		"CURRENT_TERRITORY_CODE_JE":          116,
		"CURRENT_TERRITORY_CODE_JM":          117,
		"CURRENT_TERRITORY_CODE_JO":          118,
		"CURRENT_TERRITORY_CODE_JP":          119,
		"CURRENT_TERRITORY_CODE_KE":          120,
		"CURRENT_TERRITORY_CODE_KG":          121,
		"CURRENT_TERRITORY_CODE_KH":          122,
		"CURRENT_TERRITORY_CODE_KI":          123,
		"CURRENT_TERRITORY_CODE_KM":          124,
		"CURRENT_TERRITORY_CODE_KN":          125,
		"CURRENT_TERRITORY_CODE_KP":          126,
		"CURRENT_TERRITORY_CODE_KR":          127,
		"CURRENT_TERRITORY_CODE_KW":          128,
		"CURRENT_TERRITORY_CODE_KY":          129,
		"CURRENT_TERRITORY_CODE_KZ":          130,
		"CURRENT_TERRITORY_CODE_LA":          131,
		"CURRENT_TERRITORY_CODE_LB":          132,
		"CURRENT_TERRITORY_CODE_LC":          133,
		"CURRENT_TERRITORY_CODE_LI":          134,
		"CURRENT_TERRITORY_CODE_LK":          135,
		"CURRENT_TERRITORY_CODE_LR":          136,
		"CURRENT_TERRITORY_CODE_LS":          137,
		"CURRENT_TERRITORY_CODE_LT":          138,
		"CURRENT_TERRITORY_CODE_LU":          139,
		"CURRENT_TERRITORY_CODE_LV":          140,
		"CURRENT_TERRITORY_CODE_LY":          141,
		"CURRENT_TERRITORY_CODE_MA":          142,
		"CURRENT_TERRITORY_CODE_MC":          143,
		"CURRENT_TERRITORY_CODE_MD":          144,
		"CURRENT_TERRITORY_CODE_ME":          145,
		"CURRENT_TERRITORY_CODE_MF":          146,
		"CURRENT_TERRITORY_CODE_MG":          147,
		"CURRENT_TERRITORY_CODE_MH":          148,
		"CURRENT_TERRITORY_CODE_MK":          149,
		"CURRENT_TERRITORY_CODE_ML":          150,
		"CURRENT_TERRITORY_CODE_MM":          151,
		"CURRENT_TERRITORY_CODE_MN":          152,
		"CURRENT_TERRITORY_CODE_MO":          153,
		"CURRENT_TERRITORY_CODE_MP":          154,
		"CURRENT_TERRITORY_CODE_MQ":          155,
		"CURRENT_TERRITORY_CODE_MR":          156,
		"CURRENT_TERRITORY_CODE_MS":          157,
		"CURRENT_TERRITORY_CODE_MT":          158,
		"CURRENT_TERRITORY_CODE_MU":          159,
		"CURRENT_TERRITORY_CODE_MV":          160,
		"CURRENT_TERRITORY_CODE_MW":          161,
		"CURRENT_TERRITORY_CODE_MX":          162,
		"CURRENT_TERRITORY_CODE_MY":          163,
		"CURRENT_TERRITORY_CODE_MZ":          164,
		"CURRENT_TERRITORY_CODE_NA":          165,
		"CURRENT_TERRITORY_CODE_NC":          166,
		"CURRENT_TERRITORY_CODE_NE":          167,
		"CURRENT_TERRITORY_CODE_NF":          168,
		"CURRENT_TERRITORY_CODE_NG":          169,
		"CURRENT_TERRITORY_CODE_NI":          170,
		"CURRENT_TERRITORY_CODE_NL":          171,
		"CURRENT_TERRITORY_CODE_NO":          172,
		"CURRENT_TERRITORY_CODE_NP":          173,
		"CURRENT_TERRITORY_CODE_NR":          174,
		"CURRENT_TERRITORY_CODE_NU":          175,
		"CURRENT_TERRITORY_CODE_NZ":          176,
		"CURRENT_TERRITORY_CODE_OM":          177,
		"CURRENT_TERRITORY_CODE_PA":          178,
		"CURRENT_TERRITORY_CODE_PE":          179,
		"CURRENT_TERRITORY_CODE_PF":          180,
		"CURRENT_TERRITORY_CODE_PG":          181,
		"CURRENT_TERRITORY_CODE_PH":          182,
		"CURRENT_TERRITORY_CODE_PK":          183,
		"CURRENT_TERRITORY_CODE_PL":          184,
		"CURRENT_TERRITORY_CODE_PM":          185,
		"CURRENT_TERRITORY_CODE_PN":          186,
		"CURRENT_TERRITORY_CODE_PR":          187,
		"CURRENT_TERRITORY_CODE_PS":          188,
		"CURRENT_TERRITORY_CODE_PT":          189,
		"CURRENT_TERRITORY_CODE_PW":          190,
		"CURRENT_TERRITORY_CODE_PY":          191,
		"CURRENT_TERRITORY_CODE_QA":          192,
		"CURRENT_TERRITORY_CODE_RE":          193,
		"CURRENT_TERRITORY_CODE_RO":          194,
		"CURRENT_TERRITORY_CODE_RS":          195,
		"CURRENT_TERRITORY_CODE_RU":          196,
		"CURRENT_TERRITORY_CODE_RW":          197,
		"CURRENT_TERRITORY_CODE_SA":          198,
		"CURRENT_TERRITORY_CODE_SB":          199,
		"CURRENT_TERRITORY_CODE_SC":          200,
		"CURRENT_TERRITORY_CODE_SD":          201,
		"CURRENT_TERRITORY_CODE_SE":          202,
		"CURRENT_TERRITORY_CODE_SG":          203,
		"CURRENT_TERRITORY_CODE_SH":          204,
		"CURRENT_TERRITORY_CODE_SI":          205,
		"CURRENT_TERRITORY_CODE_SJ":          206,
		"CURRENT_TERRITORY_CODE_SK":          207,
		"CURRENT_TERRITORY_CODE_SL":          208,
		"CURRENT_TERRITORY_CODE_SM":          209,
		"CURRENT_TERRITORY_CODE_SN":          210,
		"CURRENT_TERRITORY_CODE_SO":          211,
		"CURRENT_TERRITORY_CODE_SR":          212,
		"CURRENT_TERRITORY_CODE_SS":          213,
		"CURRENT_TERRITORY_CODE_ST":          214,
		"CURRENT_TERRITORY_CODE_SV":          215,
		"CURRENT_TERRITORY_CODE_SX":          216,
		"CURRENT_TERRITORY_CODE_SY":          217,
		"CURRENT_TERRITORY_CODE_SZ":          218,
		"CURRENT_TERRITORY_CODE_TC":          219,
		"CURRENT_TERRITORY_CODE_TD":          220,
		"CURRENT_TERRITORY_CODE_TF":          221,
		"CURRENT_TERRITORY_CODE_TG":          222,
		"CURRENT_TERRITORY_CODE_TH":          223,
		"CURRENT_TERRITORY_CODE_TJ":          224,
		"CURRENT_TERRITORY_CODE_TK":          225,
		"CURRENT_TERRITORY_CODE_TL":          226,
		"CURRENT_TERRITORY_CODE_TM":          227,
		"CURRENT_TERRITORY_CODE_TN":          228,
		"CURRENT_TERRITORY_CODE_TO":          229,
		"CURRENT_TERRITORY_CODE_TR":          230,
		"CURRENT_TERRITORY_CODE_TT":          231,
		"CURRENT_TERRITORY_CODE_TV":          232,
		"CURRENT_TERRITORY_CODE_TW":          233,
		"CURRENT_TERRITORY_CODE_TZ":          234,
		"CURRENT_TERRITORY_CODE_UA":          235,
		"CURRENT_TERRITORY_CODE_UG":          236,
		"CURRENT_TERRITORY_CODE_UM":          237,
		"CURRENT_TERRITORY_CODE_US":          238,
		"CURRENT_TERRITORY_CODE_UY":          239,
		"CURRENT_TERRITORY_CODE_UZ":          240,
		"CURRENT_TERRITORY_CODE_VA":          241,
		"CURRENT_TERRITORY_CODE_VC":          242,
		"CURRENT_TERRITORY_CODE_VE":          243,
		"CURRENT_TERRITORY_CODE_VG":          244,
		"CURRENT_TERRITORY_CODE_VI":          245,
		"CURRENT_TERRITORY_CODE_VN":          246,
		"CURRENT_TERRITORY_CODE_VU":          247,
		"CURRENT_TERRITORY_CODE_WF":          248,
		"CURRENT_TERRITORY_CODE_WS":          249,
		"CURRENT_TERRITORY_CODE_YE":          250,
		"CURRENT_TERRITORY_CODE_YT":          251,
		"CURRENT_TERRITORY_CODE_ZA":          252,
		"CURRENT_TERRITORY_CODE_ZM":          253,
		"CURRENT_TERRITORY_CODE_ZW":          254,
		"CURRENT_TERRITORY_CODE_E_4":         255,
		"CURRENT_TERRITORY_CODE_E_8":         256,
		"CURRENT_TERRITORY_CODE_E_12":        257,
		"CURRENT_TERRITORY_CODE_E_20":        258,
		"CURRENT_TERRITORY_CODE_E_24":        259,
		"CURRENT_TERRITORY_CODE_E_28":        260,
		"CURRENT_TERRITORY_CODE_E_31":        261,
		"CURRENT_TERRITORY_CODE_E_32":        262,
		"CURRENT_TERRITORY_CODE_E_36":        263,
		"CURRENT_TERRITORY_CODE_E_40":        264,
		"CURRENT_TERRITORY_CODE_E_44":        265,
		"CURRENT_TERRITORY_CODE_E_48":        266,
		"CURRENT_TERRITORY_CODE_E_50":        267,
		"CURRENT_TERRITORY_CODE_E_51":        268,
		"CURRENT_TERRITORY_CODE_E_52":        269,
		"CURRENT_TERRITORY_CODE_E_56":        270,
		"CURRENT_TERRITORY_CODE_E_64":        271,
		"CURRENT_TERRITORY_CODE_E_68":        272,
		"CURRENT_TERRITORY_CODE_E_70":        273,
		"CURRENT_TERRITORY_CODE_E_72":        274,
		"CURRENT_TERRITORY_CODE_E_76":        275,
		"CURRENT_TERRITORY_CODE_E_84":        276,
		"CURRENT_TERRITORY_CODE_E_90":        277,
		"CURRENT_TERRITORY_CODE_E_96":        278,
		"CURRENT_TERRITORY_CODE_E_100":       279,
		"CURRENT_TERRITORY_CODE_E_104":       280,
		"CURRENT_TERRITORY_CODE_E_108":       281,
		"CURRENT_TERRITORY_CODE_E_112":       282,
		"CURRENT_TERRITORY_CODE_E_116":       283,
		"CURRENT_TERRITORY_CODE_E_120":       284,
		"CURRENT_TERRITORY_CODE_E_124":       285,
		"CURRENT_TERRITORY_CODE_E_132":       286,
		"CURRENT_TERRITORY_CODE_E_140":       287,
		"CURRENT_TERRITORY_CODE_E_144":       288,
		"CURRENT_TERRITORY_CODE_E_148":       289,
		"CURRENT_TERRITORY_CODE_E_152":       290,
		"CURRENT_TERRITORY_CODE_E_156":       291,
		"CURRENT_TERRITORY_CODE_E_158":       292,
		"CURRENT_TERRITORY_CODE_E_170":       293,
		"CURRENT_TERRITORY_CODE_E_174":       294,
		"CURRENT_TERRITORY_CODE_E_178":       295,
		"CURRENT_TERRITORY_CODE_E_180":       296,
		"CURRENT_TERRITORY_CODE_E_188":       297,
		"CURRENT_TERRITORY_CODE_E_191":       298,
		"CURRENT_TERRITORY_CODE_E_192":       299,
		"CURRENT_TERRITORY_CODE_E_196":       300,
		"CURRENT_TERRITORY_CODE_E_200":       301,
		"CURRENT_TERRITORY_CODE_E_203":       302,
		"CURRENT_TERRITORY_CODE_E_204":       303,
		"CURRENT_TERRITORY_CODE_E_208":       304,
		"CURRENT_TERRITORY_CODE_E_212":       305,
		"CURRENT_TERRITORY_CODE_E_214":       306,
		"CURRENT_TERRITORY_CODE_E_218":       307,
		"CURRENT_TERRITORY_CODE_E_222":       308,
		"CURRENT_TERRITORY_CODE_E_226":       309,
		"CURRENT_TERRITORY_CODE_E_230":       310,
		"CURRENT_TERRITORY_CODE_E_231":       311,
		"CURRENT_TERRITORY_CODE_E_232":       312,
		"CURRENT_TERRITORY_CODE_E_233":       313,
		"CURRENT_TERRITORY_CODE_E_242":       314,
		"CURRENT_TERRITORY_CODE_E_246":       315,
		"CURRENT_TERRITORY_CODE_E_250":       316,
		"CURRENT_TERRITORY_CODE_E_258":       317,
		"CURRENT_TERRITORY_CODE_E_262":       318,
		"CURRENT_TERRITORY_CODE_E_266":       319,
		"CURRENT_TERRITORY_CODE_E_268":       320,
		"CURRENT_TERRITORY_CODE_E_270":       321,
		"CURRENT_TERRITORY_CODE_E_276":       322,
		"CURRENT_TERRITORY_CODE_E_278":       323,
		"CURRENT_TERRITORY_CODE_E_280":       324,
		"CURRENT_TERRITORY_CODE_E_288":       325,
		"CURRENT_TERRITORY_CODE_E_296":       326,
		"CURRENT_TERRITORY_CODE_E_300":       327,
		"CURRENT_TERRITORY_CODE_E_308":       328,
		"CURRENT_TERRITORY_CODE_E_320":       329,
		"CURRENT_TERRITORY_CODE_E_324":       330,
		"CURRENT_TERRITORY_CODE_E_328":       331,
		"CURRENT_TERRITORY_CODE_E_332":       332,
		"CURRENT_TERRITORY_CODE_E_336":       333,
		"CURRENT_TERRITORY_CODE_E_340":       334,
		"CURRENT_TERRITORY_CODE_E_344":       335,
		"CURRENT_TERRITORY_CODE_E_348":       336,
		"CURRENT_TERRITORY_CODE_E_352":       337,
		"CURRENT_TERRITORY_CODE_E_356":       338,
		"CURRENT_TERRITORY_CODE_E_360":       339,
		"CURRENT_TERRITORY_CODE_E_364":       340,
		"CURRENT_TERRITORY_CODE_E_368":       341,
		"CURRENT_TERRITORY_CODE_E_372":       342,
		"CURRENT_TERRITORY_CODE_E_376":       343,
		"CURRENT_TERRITORY_CODE_E_380":       344,
		"CURRENT_TERRITORY_CODE_E_384":       345,
		"CURRENT_TERRITORY_CODE_E_388":       346,
		"CURRENT_TERRITORY_CODE_E_392":       347,
		"CURRENT_TERRITORY_CODE_E_398":       348,
		"CURRENT_TERRITORY_CODE_E_400":       349,
		"CURRENT_TERRITORY_CODE_E_404":       350,
		"CURRENT_TERRITORY_CODE_E_408":       351,
		"CURRENT_TERRITORY_CODE_E_410":       352,
		"CURRENT_TERRITORY_CODE_E_414":       353,
		"CURRENT_TERRITORY_CODE_E_417":       354,
		"CURRENT_TERRITORY_CODE_E_418":       355,
		"CURRENT_TERRITORY_CODE_E_422":       356,
		"CURRENT_TERRITORY_CODE_E_426":       357,
		"CURRENT_TERRITORY_CODE_E_428":       358,
		"CURRENT_TERRITORY_CODE_E_430":       359,
		"CURRENT_TERRITORY_CODE_E_434":       360,
		"CURRENT_TERRITORY_CODE_E_438":       361,
		"CURRENT_TERRITORY_CODE_E_440":       362,
		"CURRENT_TERRITORY_CODE_E_442":       363,
		"CURRENT_TERRITORY_CODE_E_446":       364,
		"CURRENT_TERRITORY_CODE_E_450":       365,
		"CURRENT_TERRITORY_CODE_E_454":       366,
		"CURRENT_TERRITORY_CODE_E_458":       367,
		"CURRENT_TERRITORY_CODE_E_462":       368,
		"CURRENT_TERRITORY_CODE_E_466":       369,
		"CURRENT_TERRITORY_CODE_E_470":       370,
		"CURRENT_TERRITORY_CODE_E_478":       371,
		"CURRENT_TERRITORY_CODE_E_480":       372,
		"CURRENT_TERRITORY_CODE_E_484":       373,
		"CURRENT_TERRITORY_CODE_E_492":       374,
		"CURRENT_TERRITORY_CODE_E_496":       375,
		"CURRENT_TERRITORY_CODE_E_498":       376,
		"CURRENT_TERRITORY_CODE_E_499":       377,
		"CURRENT_TERRITORY_CODE_E_504":       378,
		"CURRENT_TERRITORY_CODE_E_508":       379,
		"CURRENT_TERRITORY_CODE_E_512":       380,
		"CURRENT_TERRITORY_CODE_E_516":       381,
		"CURRENT_TERRITORY_CODE_E_520":       382,
		"CURRENT_TERRITORY_CODE_E_524":       383,
		"CURRENT_TERRITORY_CODE_E_528":       384,
		"CURRENT_TERRITORY_CODE_E_540":       385,
		"CURRENT_TERRITORY_CODE_E_548":       386,
		"CURRENT_TERRITORY_CODE_E_554":       387,
		"CURRENT_TERRITORY_CODE_E_558":       388,
		"CURRENT_TERRITORY_CODE_E_562":       389,
		"CURRENT_TERRITORY_CODE_E_566":       390,
		"CURRENT_TERRITORY_CODE_E_578":       391,
		"CURRENT_TERRITORY_CODE_E_583":       392,
		"CURRENT_TERRITORY_CODE_E_584":       393,
		"CURRENT_TERRITORY_CODE_E_585":       394,
		"CURRENT_TERRITORY_CODE_E_586":       395,
		"CURRENT_TERRITORY_CODE_E_591":       396,
		"CURRENT_TERRITORY_CODE_E_598":       397,
		"CURRENT_TERRITORY_CODE_E_600":       398,
		"CURRENT_TERRITORY_CODE_E_604":       399,
		"CURRENT_TERRITORY_CODE_E_608":       400,
		"CURRENT_TERRITORY_CODE_E_616":       401,
		"CURRENT_TERRITORY_CODE_E_620":       402,
		"CURRENT_TERRITORY_CODE_E_624":       403,
		"CURRENT_TERRITORY_CODE_E_626":       404,
		"CURRENT_TERRITORY_CODE_E_630":       405,
		"CURRENT_TERRITORY_CODE_E_634":       406,
		"CURRENT_TERRITORY_CODE_E_642":       407,
		"CURRENT_TERRITORY_CODE_E_643":       408,
		"CURRENT_TERRITORY_CODE_E_646":       409,
		"CURRENT_TERRITORY_CODE_E_659":       410,
		"CURRENT_TERRITORY_CODE_E_662":       411,
		"CURRENT_TERRITORY_CODE_E_670":       412,
		"CURRENT_TERRITORY_CODE_E_674":       413,
		"CURRENT_TERRITORY_CODE_E_678":       414,
		"CURRENT_TERRITORY_CODE_E_682":       415,
		"CURRENT_TERRITORY_CODE_E_686":       416,
		"CURRENT_TERRITORY_CODE_E_688":       417,
		"CURRENT_TERRITORY_CODE_E_690":       418,
		"CURRENT_TERRITORY_CODE_E_694":       419,
		"CURRENT_TERRITORY_CODE_E_702":       420,
		"CURRENT_TERRITORY_CODE_E_703":       421,
		"CURRENT_TERRITORY_CODE_E_704":       422,
		"CURRENT_TERRITORY_CODE_E_705":       423,
		"CURRENT_TERRITORY_CODE_E_706":       424,
		"CURRENT_TERRITORY_CODE_E_710":       425,
		"CURRENT_TERRITORY_CODE_E_716":       426,
		"CURRENT_TERRITORY_CODE_E_720":       427,
		"CURRENT_TERRITORY_CODE_E_724":       428,
		"CURRENT_TERRITORY_CODE_E_728":       429,
		"CURRENT_TERRITORY_CODE_E_729":       430,
		"CURRENT_TERRITORY_CODE_E_732":       431,
		"CURRENT_TERRITORY_CODE_E_736":       432,
		"CURRENT_TERRITORY_CODE_E_740":       433,
		"CURRENT_TERRITORY_CODE_E_748":       434,
		"CURRENT_TERRITORY_CODE_E_752":       435,
		"CURRENT_TERRITORY_CODE_E_756":       436,
		"CURRENT_TERRITORY_CODE_E_760":       437,
		"CURRENT_TERRITORY_CODE_E_762":       438,
		"CURRENT_TERRITORY_CODE_E_764":       439,
		"CURRENT_TERRITORY_CODE_E_768":       440,
		"CURRENT_TERRITORY_CODE_E_776":       441,
		"CURRENT_TERRITORY_CODE_E_780":       442,
		"CURRENT_TERRITORY_CODE_E_784":       443,
		"CURRENT_TERRITORY_CODE_E_788":       444,
		"CURRENT_TERRITORY_CODE_E_792":       445,
		"CURRENT_TERRITORY_CODE_E_795":       446,
		"CURRENT_TERRITORY_CODE_E_798":       447,
		"CURRENT_TERRITORY_CODE_E_800":       448,
		"CURRENT_TERRITORY_CODE_E_804":       449,
		"CURRENT_TERRITORY_CODE_E_807":       450,
		"CURRENT_TERRITORY_CODE_E_810":       451,
		"CURRENT_TERRITORY_CODE_E_818":       452,
		"CURRENT_TERRITORY_CODE_E_826":       453,
		"CURRENT_TERRITORY_CODE_E_834":       454,
		"CURRENT_TERRITORY_CODE_E_840":       455,
		"CURRENT_TERRITORY_CODE_E_854":       456,
		"CURRENT_TERRITORY_CODE_E_858":       457,
		"CURRENT_TERRITORY_CODE_E_860":       458,
		"CURRENT_TERRITORY_CODE_E_862":       459,
		"CURRENT_TERRITORY_CODE_E_882":       460,
		"CURRENT_TERRITORY_CODE_E_886":       461,
		"CURRENT_TERRITORY_CODE_E_887":       462,
		"CURRENT_TERRITORY_CODE_E_890":       463,
		"CURRENT_TERRITORY_CODE_E_891":       464,
		"CURRENT_TERRITORY_CODE_E_894":       465,
		"CURRENT_TERRITORY_CODE_E_2100":      466,
		"CURRENT_TERRITORY_CODE_E_2101":      467,
		"CURRENT_TERRITORY_CODE_E_2102":      468,
		"CURRENT_TERRITORY_CODE_E_2103":      469,
		"CURRENT_TERRITORY_CODE_E_2104":      470,
		"CURRENT_TERRITORY_CODE_E_2105":      471,
		"CURRENT_TERRITORY_CODE_E_2106":      472,
		"CURRENT_TERRITORY_CODE_E_2107":      473,
		"CURRENT_TERRITORY_CODE_E_2108":      474,
		"CURRENT_TERRITORY_CODE_E_2109":      475,
		"CURRENT_TERRITORY_CODE_E_2110":      476,
		"CURRENT_TERRITORY_CODE_E_2111":      477,
		"CURRENT_TERRITORY_CODE_E_2112":      478,
		"CURRENT_TERRITORY_CODE_E_2113":      479,
		"CURRENT_TERRITORY_CODE_E_2114":      480,
		"CURRENT_TERRITORY_CODE_E_2115":      481,
		"CURRENT_TERRITORY_CODE_E_2116":      482,
		"CURRENT_TERRITORY_CODE_E_2117":      483,
		"CURRENT_TERRITORY_CODE_E_2118":      484,
		"CURRENT_TERRITORY_CODE_E_2119":      485,
		"CURRENT_TERRITORY_CODE_E_2120":      486,
		"CURRENT_TERRITORY_CODE_E_2121":      487,
		"CURRENT_TERRITORY_CODE_E_2122":      488,
		"CURRENT_TERRITORY_CODE_E_2123":      489,
		"CURRENT_TERRITORY_CODE_E_2124":      490,
		"CURRENT_TERRITORY_CODE_E_2125":      491,
		"CURRENT_TERRITORY_CODE_E_2126":      492,
		"CURRENT_TERRITORY_CODE_E_2127":      493,
		"CURRENT_TERRITORY_CODE_E_2128":      494,
		"CURRENT_TERRITORY_CODE_E_2129":      495,
		"CURRENT_TERRITORY_CODE_E_2130":      496,
		"CURRENT_TERRITORY_CODE_E_2131":      497,
		"CURRENT_TERRITORY_CODE_E_2132":      498,
		"CURRENT_TERRITORY_CODE_E_2133":      499,
		"CURRENT_TERRITORY_CODE_E_2134":      500,
		"CURRENT_TERRITORY_CODE_E_2136":      501,
		"CURRENT_TERRITORY_CODE_XK":          502,
		"CURRENT_TERRITORY_CODE_WORLDWIDE":   503,
	}
)

func (x CurrentTerritoryCode) Enum() *CurrentTerritoryCode {
	p := new(CurrentTerritoryCode)
	*p = x
	return p
}

func (x CurrentTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[21].Descriptor()
}

func (CurrentTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[21]
}

func (x CurrentTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentTerritoryCode.Descriptor instead.
func (CurrentTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{21}
}

type DataMismatchResponseType int32

const (
	DataMismatchResponseType_DATA_MISMATCH_RESPONSE_TYPE_UNSPECIFIED                         DataMismatchResponseType = 0
	DataMismatchResponseType_DATA_MISMATCH_RESPONSE_TYPE_ADDITIONALINFORMATIONONLY           DataMismatchResponseType = 1
	DataMismatchResponseType_DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHCONFIRMATION            DataMismatchResponseType = 2
	DataMismatchResponseType_DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHOUTOFSCOPE              DataMismatchResponseType = 3
	DataMismatchResponseType_DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHRAISEDCOMMERCIALDISPUTE DataMismatchResponseType = 4
	DataMismatchResponseType_DATA_MISMATCH_RESPONSE_TYPE_NOREACTION                          DataMismatchResponseType = 5
	DataMismatchResponseType_DATA_MISMATCH_RESPONSE_TYPE_USERDEFINED                         DataMismatchResponseType = 6
)

// Enum value maps for DataMismatchResponseType.
var (
	DataMismatchResponseType_name = map[int32]string{
		0: "DATA_MISMATCH_RESPONSE_TYPE_UNSPECIFIED",
		1: "DATA_MISMATCH_RESPONSE_TYPE_ADDITIONALINFORMATIONONLY",
		2: "DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHCONFIRMATION",
		3: "DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHOUTOFSCOPE",
		4: "DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHRAISEDCOMMERCIALDISPUTE",
		5: "DATA_MISMATCH_RESPONSE_TYPE_NOREACTION",
		6: "DATA_MISMATCH_RESPONSE_TYPE_USERDEFINED",
	}
	DataMismatchResponseType_value = map[string]int32{
		"DATA_MISMATCH_RESPONSE_TYPE_UNSPECIFIED":                         0,
		"DATA_MISMATCH_RESPONSE_TYPE_ADDITIONALINFORMATIONONLY":           1,
		"DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHCONFIRMATION":            2,
		"DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHOUTOFSCOPE":              3,
		"DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHRAISEDCOMMERCIALDISPUTE": 4,
		"DATA_MISMATCH_RESPONSE_TYPE_NOREACTION":                          5,
		"DATA_MISMATCH_RESPONSE_TYPE_USERDEFINED":                         6,
	}
)

func (x DataMismatchResponseType) Enum() *DataMismatchResponseType {
	p := new(DataMismatchResponseType)
	*p = x
	return p
}

func (x DataMismatchResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataMismatchResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[22].Descriptor()
}

func (DataMismatchResponseType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[22]
}

func (x DataMismatchResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataMismatchResponseType.Descriptor instead.
func (DataMismatchResponseType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{22}
}

type DataMismatchStatus int32

const (
	DataMismatchStatus_DATA_MISMATCH_STATUS_UNSPECIFIED               DataMismatchStatus = 0
	DataMismatchStatus_DATA_MISMATCH_STATUS_ADDITIONALINFORMATIONONLY DataMismatchStatus = 1
	DataMismatchStatus_DATA_MISMATCH_STATUS_CORRECTED                 DataMismatchStatus = 2
	DataMismatchStatus_DATA_MISMATCH_STATUS_FATAL                     DataMismatchStatus = 3
	DataMismatchStatus_DATA_MISMATCH_STATUS_NOTCORRECTED              DataMismatchStatus = 4
	DataMismatchStatus_DATA_MISMATCH_STATUS_USERDEFINED               DataMismatchStatus = 5
)

// Enum value maps for DataMismatchStatus.
var (
	DataMismatchStatus_name = map[int32]string{
		0: "DATA_MISMATCH_STATUS_UNSPECIFIED",
		1: "DATA_MISMATCH_STATUS_ADDITIONALINFORMATIONONLY",
		2: "DATA_MISMATCH_STATUS_CORRECTED",
		3: "DATA_MISMATCH_STATUS_FATAL",
		4: "DATA_MISMATCH_STATUS_NOTCORRECTED",
		5: "DATA_MISMATCH_STATUS_USERDEFINED",
	}
	DataMismatchStatus_value = map[string]int32{
		"DATA_MISMATCH_STATUS_UNSPECIFIED":               0,
		"DATA_MISMATCH_STATUS_ADDITIONALINFORMATIONONLY": 1,
		"DATA_MISMATCH_STATUS_CORRECTED":                 2,
		"DATA_MISMATCH_STATUS_FATAL":                     3,
		"DATA_MISMATCH_STATUS_NOTCORRECTED":              4,
		"DATA_MISMATCH_STATUS_USERDEFINED":               5,
	}
)

func (x DataMismatchStatus) Enum() *DataMismatchStatus {
	p := new(DataMismatchStatus)
	*p = x
	return p
}

func (x DataMismatchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataMismatchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[23].Descriptor()
}

func (DataMismatchStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[23]
}

func (x DataMismatchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataMismatchStatus.Descriptor instead.
func (DataMismatchStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{23}
}

type DataMismatchType int32

const (
	DataMismatchType_DATA_MISMATCH_TYPE_UNSPECIFIED                                         DataMismatchType = 0
	DataMismatchType_DATA_MISMATCH_TYPE_ADDITIONALINFORMATIONONLY                           DataMismatchType = 1
	DataMismatchType_DATA_MISMATCH_TYPE_CHOREOGRAPHYCONFLICT                                DataMismatchType = 2
	DataMismatchType_DATA_MISMATCH_TYPE_CONTRADICTORYDATA                                   DataMismatchType = 3
	DataMismatchType_DATA_MISMATCH_TYPE_DUPLICATEDDATA                                      DataMismatchType = 4
	DataMismatchType_DATA_MISMATCH_TYPE_IDENTIFIERSYNTAXMISMATCH                            DataMismatchType = 5
	DataMismatchType_DATA_MISMATCH_TYPE_MATHEMATICALINCONSISTENCY                           DataMismatchType = 6
	DataMismatchType_DATA_MISMATCH_TYPE_MISSINGCONTRACTUALLYMANDATORYINFORMATION            DataMismatchType = 7
	DataMismatchType_DATA_MISMATCH_TYPE_MISSINGMANDATORYINFORMATION                         DataMismatchType = 8
	DataMismatchType_DATA_MISMATCH_TYPE_MISSINGREFERENCEDMUSICALWORKINFORMATION             DataMismatchType = 9
	DataMismatchType_DATA_MISMATCH_TYPE_MISSINGREFERENCEDRELEASEINFORMATION                 DataMismatchType = 10
	DataMismatchType_DATA_MISMATCH_TYPE_MISSINGREFERENCEDRESOURCEINFORMATION                DataMismatchType = 11
	DataMismatchType_DATA_MISMATCH_TYPE_MISSINGREFERENCEDTECHNICALRESOURCEDETAILINFORMATION DataMismatchType = 12
	DataMismatchType_DATA_MISMATCH_TYPE_MISSINGRESOURCEFILE                                 DataMismatchType = 13
	DataMismatchType_DATA_MISMATCH_TYPE_TYPOGRAPHICMISMATCH                                 DataMismatchType = 14
	DataMismatchType_DATA_MISMATCH_TYPE_UNEXPECTEDALLOWEDVALUE                              DataMismatchType = 15
	DataMismatchType_DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGEINTERMEDIARY                       DataMismatchType = 16
	DataMismatchType_DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGERECIPIENT                          DataMismatchType = 17
	DataMismatchType_DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGESENDER                             DataMismatchType = 18
	DataMismatchType_DATA_MISMATCH_TYPE_USERDEFINED                                         DataMismatchType = 19
	DataMismatchType_DATA_MISMATCH_TYPE_XMLFORMATERROR                                      DataMismatchType = 20
	DataMismatchType_DATA_MISMATCH_TYPE_XMLRANGEERROR                                       DataMismatchType = 21
)

// Enum value maps for DataMismatchType.
var (
	DataMismatchType_name = map[int32]string{
		0:  "DATA_MISMATCH_TYPE_UNSPECIFIED",
		1:  "DATA_MISMATCH_TYPE_ADDITIONALINFORMATIONONLY",
		2:  "DATA_MISMATCH_TYPE_CHOREOGRAPHYCONFLICT",
		3:  "DATA_MISMATCH_TYPE_CONTRADICTORYDATA",
		4:  "DATA_MISMATCH_TYPE_DUPLICATEDDATA",
		5:  "DATA_MISMATCH_TYPE_IDENTIFIERSYNTAXMISMATCH",
		6:  "DATA_MISMATCH_TYPE_MATHEMATICALINCONSISTENCY",
		7:  "DATA_MISMATCH_TYPE_MISSINGCONTRACTUALLYMANDATORYINFORMATION",
		8:  "DATA_MISMATCH_TYPE_MISSINGMANDATORYINFORMATION",
		9:  "DATA_MISMATCH_TYPE_MISSINGREFERENCEDMUSICALWORKINFORMATION",
		10: "DATA_MISMATCH_TYPE_MISSINGREFERENCEDRELEASEINFORMATION",
		11: "DATA_MISMATCH_TYPE_MISSINGREFERENCEDRESOURCEINFORMATION",
		12: "DATA_MISMATCH_TYPE_MISSINGREFERENCEDTECHNICALRESOURCEDETAILINFORMATION",
		13: "DATA_MISMATCH_TYPE_MISSINGRESOURCEFILE",
		14: "DATA_MISMATCH_TYPE_TYPOGRAPHICMISMATCH",
		15: "DATA_MISMATCH_TYPE_UNEXPECTEDALLOWEDVALUE",
		16: "DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGEINTERMEDIARY",
		17: "DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGERECIPIENT",
		18: "DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGESENDER",
		19: "DATA_MISMATCH_TYPE_USERDEFINED",
		20: "DATA_MISMATCH_TYPE_XMLFORMATERROR",
		21: "DATA_MISMATCH_TYPE_XMLRANGEERROR",
	}
	DataMismatchType_value = map[string]int32{
		"DATA_MISMATCH_TYPE_UNSPECIFIED":                                         0,
		"DATA_MISMATCH_TYPE_ADDITIONALINFORMATIONONLY":                           1,
		"DATA_MISMATCH_TYPE_CHOREOGRAPHYCONFLICT":                                2,
		"DATA_MISMATCH_TYPE_CONTRADICTORYDATA":                                   3,
		"DATA_MISMATCH_TYPE_DUPLICATEDDATA":                                      4,
		"DATA_MISMATCH_TYPE_IDENTIFIERSYNTAXMISMATCH":                            5,
		"DATA_MISMATCH_TYPE_MATHEMATICALINCONSISTENCY":                           6,
		"DATA_MISMATCH_TYPE_MISSINGCONTRACTUALLYMANDATORYINFORMATION":            7,
		"DATA_MISMATCH_TYPE_MISSINGMANDATORYINFORMATION":                         8,
		"DATA_MISMATCH_TYPE_MISSINGREFERENCEDMUSICALWORKINFORMATION":             9,
		"DATA_MISMATCH_TYPE_MISSINGREFERENCEDRELEASEINFORMATION":                 10,
		"DATA_MISMATCH_TYPE_MISSINGREFERENCEDRESOURCEINFORMATION":                11,
		"DATA_MISMATCH_TYPE_MISSINGREFERENCEDTECHNICALRESOURCEDETAILINFORMATION": 12,
		"DATA_MISMATCH_TYPE_MISSINGRESOURCEFILE":                                 13,
		"DATA_MISMATCH_TYPE_TYPOGRAPHICMISMATCH":                                 14,
		"DATA_MISMATCH_TYPE_UNEXPECTEDALLOWEDVALUE":                              15,
		"DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGEINTERMEDIARY":                       16,
		"DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGERECIPIENT":                          17,
		"DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGESENDER":                             18,
		"DATA_MISMATCH_TYPE_USERDEFINED":                                         19,
		"DATA_MISMATCH_TYPE_XMLFORMATERROR":                                      20,
		"DATA_MISMATCH_TYPE_XMLRANGEERROR":                                       21,
	}
)

func (x DataMismatchType) Enum() *DataMismatchType {
	p := new(DataMismatchType)
	*p = x
	return p
}

func (x DataMismatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataMismatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[24].Descriptor()
}

func (DataMismatchType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[24]
}

func (x DataMismatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataMismatchType.Descriptor instead.
func (DataMismatchType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{24}
}

type DdexTerritoryCode int32

const (
	DdexTerritoryCode_DDEX_TERRITORY_CODE_UNSPECIFIED DdexTerritoryCode = 0
	DdexTerritoryCode_DDEX_TERRITORY_CODE_XK          DdexTerritoryCode = 1
	DdexTerritoryCode_DDEX_TERRITORY_CODE_WORLDWIDE   DdexTerritoryCode = 2
)

// Enum value maps for DdexTerritoryCode.
var (
	DdexTerritoryCode_name = map[int32]string{
		0: "DDEX_TERRITORY_CODE_UNSPECIFIED",
		1: "DDEX_TERRITORY_CODE_XK",
		2: "DDEX_TERRITORY_CODE_WORLDWIDE",
	}
	DdexTerritoryCode_value = map[string]int32{
		"DDEX_TERRITORY_CODE_UNSPECIFIED": 0,
		"DDEX_TERRITORY_CODE_XK":          1,
		"DDEX_TERRITORY_CODE_WORLDWIDE":   2,
	}
)

func (x DdexTerritoryCode) Enum() *DdexTerritoryCode {
	p := new(DdexTerritoryCode)
	*p = x
	return p
}

func (x DdexTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DdexTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[25].Descriptor()
}

func (DdexTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[25]
}

func (x DdexTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DdexTerritoryCode.Descriptor instead.
func (DdexTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{25}
}

type DeductionRateType int32

const (
	DeductionRateType_DEDUCTION_RATE_TYPE_UNSPECIFIED    DeductionRateType = 0
	DeductionRateType_DEDUCTION_RATE_TYPE_PENNYRATE      DeductionRateType = 1
	DeductionRateType_DEDUCTION_RATE_TYPE_PERCENTAGERATE DeductionRateType = 2
	DeductionRateType_DEDUCTION_RATE_TYPE_USERDEFINED    DeductionRateType = 3
)

// Enum value maps for DeductionRateType.
var (
	DeductionRateType_name = map[int32]string{
		0: "DEDUCTION_RATE_TYPE_UNSPECIFIED",
		1: "DEDUCTION_RATE_TYPE_PENNYRATE",
		2: "DEDUCTION_RATE_TYPE_PERCENTAGERATE",
		3: "DEDUCTION_RATE_TYPE_USERDEFINED",
	}
	DeductionRateType_value = map[string]int32{
		"DEDUCTION_RATE_TYPE_UNSPECIFIED":    0,
		"DEDUCTION_RATE_TYPE_PENNYRATE":      1,
		"DEDUCTION_RATE_TYPE_PERCENTAGERATE": 2,
		"DEDUCTION_RATE_TYPE_USERDEFINED":    3,
	}
)

func (x DeductionRateType) Enum() *DeductionRateType {
	p := new(DeductionRateType)
	*p = x
	return p
}

func (x DeductionRateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeductionRateType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[26].Descriptor()
}

func (DeductionRateType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[26]
}

func (x DeductionRateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeductionRateType.Descriptor instead.
func (DeductionRateType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{26}
}

type DeliveryActionType int32

const (
	DeliveryActionType_DELIVERY_ACTION_TYPE_UNSPECIFIED                       DeliveryActionType = 0
	DeliveryActionType_DELIVERY_ACTION_TYPE_CHANGEDELIVERYLIMITS              DeliveryActionType = 1
	DeliveryActionType_DELIVERY_ACTION_TYPE_RESTARTDELIVERYWITHLIMITS         DeliveryActionType = 2
	DeliveryActionType_DELIVERY_ACTION_TYPE_RESTARTDELIVERYWITHPREVIOUSLIMITS DeliveryActionType = 3
	DeliveryActionType_DELIVERY_ACTION_TYPE_STOPDELIVERY                      DeliveryActionType = 4
)

// Enum value maps for DeliveryActionType.
var (
	DeliveryActionType_name = map[int32]string{
		0: "DELIVERY_ACTION_TYPE_UNSPECIFIED",
		1: "DELIVERY_ACTION_TYPE_CHANGEDELIVERYLIMITS",
		2: "DELIVERY_ACTION_TYPE_RESTARTDELIVERYWITHLIMITS",
		3: "DELIVERY_ACTION_TYPE_RESTARTDELIVERYWITHPREVIOUSLIMITS",
		4: "DELIVERY_ACTION_TYPE_STOPDELIVERY",
	}
	DeliveryActionType_value = map[string]int32{
		"DELIVERY_ACTION_TYPE_UNSPECIFIED":                       0,
		"DELIVERY_ACTION_TYPE_CHANGEDELIVERYLIMITS":              1,
		"DELIVERY_ACTION_TYPE_RESTARTDELIVERYWITHLIMITS":         2,
		"DELIVERY_ACTION_TYPE_RESTARTDELIVERYWITHPREVIOUSLIMITS": 3,
		"DELIVERY_ACTION_TYPE_STOPDELIVERY":                      4,
	}
)

func (x DeliveryActionType) Enum() *DeliveryActionType {
	p := new(DeliveryActionType)
	*p = x
	return p
}

func (x DeliveryActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[27].Descriptor()
}

func (DeliveryActionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[27]
}

func (x DeliveryActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryActionType.Descriptor instead.
func (DeliveryActionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{27}
}

type DeliveryMessageType int32

const (
	DeliveryMessageType_DELIVERY_MESSAGE_TYPE_UNSPECIFIED       DeliveryMessageType = 0
	DeliveryMessageType_DELIVERY_MESSAGE_TYPE_NEWRELEASEMESSAGE DeliveryMessageType = 1
	DeliveryMessageType_DELIVERY_MESSAGE_TYPE_NONDDEXMESSAGE    DeliveryMessageType = 2
	DeliveryMessageType_DELIVERY_MESSAGE_TYPE_UNKNOWN           DeliveryMessageType = 3
)

// Enum value maps for DeliveryMessageType.
var (
	DeliveryMessageType_name = map[int32]string{
		0: "DELIVERY_MESSAGE_TYPE_UNSPECIFIED",
		1: "DELIVERY_MESSAGE_TYPE_NEWRELEASEMESSAGE",
		2: "DELIVERY_MESSAGE_TYPE_NONDDEXMESSAGE",
		3: "DELIVERY_MESSAGE_TYPE_UNKNOWN",
	}
	DeliveryMessageType_value = map[string]int32{
		"DELIVERY_MESSAGE_TYPE_UNSPECIFIED":       0,
		"DELIVERY_MESSAGE_TYPE_NEWRELEASEMESSAGE": 1,
		"DELIVERY_MESSAGE_TYPE_NONDDEXMESSAGE":    2,
		"DELIVERY_MESSAGE_TYPE_UNKNOWN":           3,
	}
)

func (x DeliveryMessageType) Enum() *DeliveryMessageType {
	p := new(DeliveryMessageType)
	*p = x
	return p
}

func (x DeliveryMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[28].Descriptor()
}

func (DeliveryMessageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[28]
}

func (x DeliveryMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryMessageType.Descriptor instead.
func (DeliveryMessageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{28}
}

type DeprecatedCurrencyCode int32

const (
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_UNSPECIFIED DeprecatedCurrencyCode = 0
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_CYP         DeprecatedCurrencyCode = 1
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_EEK         DeprecatedCurrencyCode = 2
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_MTL         DeprecatedCurrencyCode = 3
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_ROL         DeprecatedCurrencyCode = 4
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_SIT         DeprecatedCurrencyCode = 5
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_SKK         DeprecatedCurrencyCode = 6
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_LTL         DeprecatedCurrencyCode = 7
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_LVL         DeprecatedCurrencyCode = 8
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_MRO         DeprecatedCurrencyCode = 9
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_STD         DeprecatedCurrencyCode = 10
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_VEF         DeprecatedCurrencyCode = 11
)

// Enum value maps for DeprecatedCurrencyCode.
var (
	DeprecatedCurrencyCode_name = map[int32]string{
		0:  "DEPRECATED_CURRENCY_CODE_UNSPECIFIED",
		1:  "DEPRECATED_CURRENCY_CODE_CYP",
		2:  "DEPRECATED_CURRENCY_CODE_EEK",
		3:  "DEPRECATED_CURRENCY_CODE_MTL",
		4:  "DEPRECATED_CURRENCY_CODE_ROL",
		5:  "DEPRECATED_CURRENCY_CODE_SIT",
		6:  "DEPRECATED_CURRENCY_CODE_SKK",
		7:  "DEPRECATED_CURRENCY_CODE_LTL",
		8:  "DEPRECATED_CURRENCY_CODE_LVL",
		9:  "DEPRECATED_CURRENCY_CODE_MRO",
		10: "DEPRECATED_CURRENCY_CODE_STD",
		11: "DEPRECATED_CURRENCY_CODE_VEF",
	}
	DeprecatedCurrencyCode_value = map[string]int32{
		"DEPRECATED_CURRENCY_CODE_UNSPECIFIED": 0,
		"DEPRECATED_CURRENCY_CODE_CYP":         1,
		"DEPRECATED_CURRENCY_CODE_EEK":         2,
		"DEPRECATED_CURRENCY_CODE_MTL":         3,
		"DEPRECATED_CURRENCY_CODE_ROL":         4,
		"DEPRECATED_CURRENCY_CODE_SIT":         5,
		"DEPRECATED_CURRENCY_CODE_SKK":         6,
		"DEPRECATED_CURRENCY_CODE_LTL":         7,
		"DEPRECATED_CURRENCY_CODE_LVL":         8,
		"DEPRECATED_CURRENCY_CODE_MRO":         9,
		"DEPRECATED_CURRENCY_CODE_STD":         10,
		"DEPRECATED_CURRENCY_CODE_VEF":         11,
	}
)

func (x DeprecatedCurrencyCode) Enum() *DeprecatedCurrencyCode {
	p := new(DeprecatedCurrencyCode)
	*p = x
	return p
}

func (x DeprecatedCurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedCurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[29].Descriptor()
}

func (DeprecatedCurrencyCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[29]
}

func (x DeprecatedCurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedCurrencyCode.Descriptor instead.
func (DeprecatedCurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{29}
}

type DeprecatedIsoTerritoryCode int32

const (
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED DeprecatedIsoTerritoryCode = 0
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_AIDJ        DeprecatedIsoTerritoryCode = 1
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_ANHH        DeprecatedIsoTerritoryCode = 2
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_BQAQ        DeprecatedIsoTerritoryCode = 3
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_BUMM        DeprecatedIsoTerritoryCode = 4
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_BYAA        DeprecatedIsoTerritoryCode = 5
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_CSHH        DeprecatedIsoTerritoryCode = 6
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_CSXX        DeprecatedIsoTerritoryCode = 7
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_CTKI        DeprecatedIsoTerritoryCode = 8
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_DDDE        DeprecatedIsoTerritoryCode = 9
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_DYBJ        DeprecatedIsoTerritoryCode = 10
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_FQHH        DeprecatedIsoTerritoryCode = 11
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_FXFR        DeprecatedIsoTerritoryCode = 12
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_GEHH        DeprecatedIsoTerritoryCode = 13
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_HVBF        DeprecatedIsoTerritoryCode = 14
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_JTUM        DeprecatedIsoTerritoryCode = 15
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_MIUM        DeprecatedIsoTerritoryCode = 16
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_NHVU        DeprecatedIsoTerritoryCode = 17
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_NQAQ        DeprecatedIsoTerritoryCode = 18
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_NTHH        DeprecatedIsoTerritoryCode = 19
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_PCHH        DeprecatedIsoTerritoryCode = 20
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_PUUM        DeprecatedIsoTerritoryCode = 21
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_PZPA        DeprecatedIsoTerritoryCode = 22
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_RHZW        DeprecatedIsoTerritoryCode = 23
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_SKIN        DeprecatedIsoTerritoryCode = 24
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_SUHH        DeprecatedIsoTerritoryCode = 25
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_TPTL        DeprecatedIsoTerritoryCode = 26
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_VDVN        DeprecatedIsoTerritoryCode = 27
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_WKUM        DeprecatedIsoTerritoryCode = 28
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_YDYE        DeprecatedIsoTerritoryCode = 29
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_YUCS        DeprecatedIsoTerritoryCode = 30
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_ZRCD        DeprecatedIsoTerritoryCode = 31
)

// Enum value maps for DeprecatedIsoTerritoryCode.
var (
	DeprecatedIsoTerritoryCode_name = map[int32]string{
		0:  "DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED",
		1:  "DEPRECATED_ISO_TERRITORY_CODE_AIDJ",
		2:  "DEPRECATED_ISO_TERRITORY_CODE_ANHH",
		3:  "DEPRECATED_ISO_TERRITORY_CODE_BQAQ",
		4:  "DEPRECATED_ISO_TERRITORY_CODE_BUMM",
		5:  "DEPRECATED_ISO_TERRITORY_CODE_BYAA",
		6:  "DEPRECATED_ISO_TERRITORY_CODE_CSHH",
		7:  "DEPRECATED_ISO_TERRITORY_CODE_CSXX",
		8:  "DEPRECATED_ISO_TERRITORY_CODE_CTKI",
		9:  "DEPRECATED_ISO_TERRITORY_CODE_DDDE",
		10: "DEPRECATED_ISO_TERRITORY_CODE_DYBJ",
		11: "DEPRECATED_ISO_TERRITORY_CODE_FQHH",
		12: "DEPRECATED_ISO_TERRITORY_CODE_FXFR",
		13: "DEPRECATED_ISO_TERRITORY_CODE_GEHH",
		14: "DEPRECATED_ISO_TERRITORY_CODE_HVBF",
		15: "DEPRECATED_ISO_TERRITORY_CODE_JTUM",
		16: "DEPRECATED_ISO_TERRITORY_CODE_MIUM",
		17: "DEPRECATED_ISO_TERRITORY_CODE_NHVU",
		18: "DEPRECATED_ISO_TERRITORY_CODE_NQAQ",
		19: "DEPRECATED_ISO_TERRITORY_CODE_NTHH",
		20: "DEPRECATED_ISO_TERRITORY_CODE_PCHH",
		21: "DEPRECATED_ISO_TERRITORY_CODE_PUUM",
		22: "DEPRECATED_ISO_TERRITORY_CODE_PZPA",
		23: "DEPRECATED_ISO_TERRITORY_CODE_RHZW",
		24: "DEPRECATED_ISO_TERRITORY_CODE_SKIN",
		25: "DEPRECATED_ISO_TERRITORY_CODE_SUHH",
		26: "DEPRECATED_ISO_TERRITORY_CODE_TPTL",
		27: "DEPRECATED_ISO_TERRITORY_CODE_VDVN",
		28: "DEPRECATED_ISO_TERRITORY_CODE_WKUM",
		29: "DEPRECATED_ISO_TERRITORY_CODE_YDYE",
		30: "DEPRECATED_ISO_TERRITORY_CODE_YUCS",
		31: "DEPRECATED_ISO_TERRITORY_CODE_ZRCD",
	}
	DeprecatedIsoTerritoryCode_value = map[string]int32{
		"DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED": 0,
		"DEPRECATED_ISO_TERRITORY_CODE_AIDJ":        1,
		"DEPRECATED_ISO_TERRITORY_CODE_ANHH":        2,
		"DEPRECATED_ISO_TERRITORY_CODE_BQAQ":        3,
		"DEPRECATED_ISO_TERRITORY_CODE_BUMM":        4,
		"DEPRECATED_ISO_TERRITORY_CODE_BYAA":        5,
		"DEPRECATED_ISO_TERRITORY_CODE_CSHH":        6,
		"DEPRECATED_ISO_TERRITORY_CODE_CSXX":        7,
		"DEPRECATED_ISO_TERRITORY_CODE_CTKI":        8,
		"DEPRECATED_ISO_TERRITORY_CODE_DDDE":        9,
		"DEPRECATED_ISO_TERRITORY_CODE_DYBJ":        10,
		"DEPRECATED_ISO_TERRITORY_CODE_FQHH":        11,
		"DEPRECATED_ISO_TERRITORY_CODE_FXFR":        12,
		"DEPRECATED_ISO_TERRITORY_CODE_GEHH":        13,
		"DEPRECATED_ISO_TERRITORY_CODE_HVBF":        14,
		"DEPRECATED_ISO_TERRITORY_CODE_JTUM":        15,
		"DEPRECATED_ISO_TERRITORY_CODE_MIUM":        16,
		"DEPRECATED_ISO_TERRITORY_CODE_NHVU":        17,
		"DEPRECATED_ISO_TERRITORY_CODE_NQAQ":        18,
		"DEPRECATED_ISO_TERRITORY_CODE_NTHH":        19,
		"DEPRECATED_ISO_TERRITORY_CODE_PCHH":        20,
		"DEPRECATED_ISO_TERRITORY_CODE_PUUM":        21,
		"DEPRECATED_ISO_TERRITORY_CODE_PZPA":        22,
		"DEPRECATED_ISO_TERRITORY_CODE_RHZW":        23,
		"DEPRECATED_ISO_TERRITORY_CODE_SKIN":        24,
		"DEPRECATED_ISO_TERRITORY_CODE_SUHH":        25,
		"DEPRECATED_ISO_TERRITORY_CODE_TPTL":        26,
		"DEPRECATED_ISO_TERRITORY_CODE_VDVN":        27,
		"DEPRECATED_ISO_TERRITORY_CODE_WKUM":        28,
		"DEPRECATED_ISO_TERRITORY_CODE_YDYE":        29,
		"DEPRECATED_ISO_TERRITORY_CODE_YUCS":        30,
		"DEPRECATED_ISO_TERRITORY_CODE_ZRCD":        31,
	}
)

func (x DeprecatedIsoTerritoryCode) Enum() *DeprecatedIsoTerritoryCode {
	p := new(DeprecatedIsoTerritoryCode)
	*p = x
	return p
}

func (x DeprecatedIsoTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedIsoTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[30].Descriptor()
}

func (DeprecatedIsoTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[30]
}

func (x DeprecatedIsoTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedIsoTerritoryCode.Descriptor instead.
func (DeprecatedIsoTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{30}
}

type DigitizationMode int32

const (
	DigitizationMode_DIGITIZATION_MODE_UNSPECIFIED DigitizationMode = 0
	DigitizationMode_DIGITIZATION_MODE_AAD         DigitizationMode = 1
	DigitizationMode_DIGITIZATION_MODE_ADD         DigitizationMode = 2
	DigitizationMode_DIGITIZATION_MODE_DDD         DigitizationMode = 3
	DigitizationMode_DIGITIZATION_MODE_UNKNOWN     DigitizationMode = 4
)

// Enum value maps for DigitizationMode.
var (
	DigitizationMode_name = map[int32]string{
		0: "DIGITIZATION_MODE_UNSPECIFIED",
		1: "DIGITIZATION_MODE_AAD",
		2: "DIGITIZATION_MODE_ADD",
		3: "DIGITIZATION_MODE_DDD",
		4: "DIGITIZATION_MODE_UNKNOWN",
	}
	DigitizationMode_value = map[string]int32{
		"DIGITIZATION_MODE_UNSPECIFIED": 0,
		"DIGITIZATION_MODE_AAD":         1,
		"DIGITIZATION_MODE_ADD":         2,
		"DIGITIZATION_MODE_DDD":         3,
		"DIGITIZATION_MODE_UNKNOWN":     4,
	}
)

func (x DigitizationMode) Enum() *DigitizationMode {
	p := new(DigitizationMode)
	*p = x
	return p
}

func (x DigitizationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitizationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[31].Descriptor()
}

func (DigitizationMode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[31]
}

func (x DigitizationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitizationMode.Descriptor instead.
func (DigitizationMode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{31}
}

type DisputeReason int32

const (
	DisputeReason_DISPUTE_REASON_UNSPECIFIED              DisputeReason = 0
	DisputeReason_DISPUTE_REASON_MISSINGINFORMATION       DisputeReason = 1
	DisputeReason_DISPUTE_REASON_NOTPARTOFCATALOGTRANSFER DisputeReason = 2
	DisputeReason_DISPUTE_REASON_MORERESEARCHNEEDED       DisputeReason = 3
	DisputeReason_DISPUTE_REASON_USERDEFINED              DisputeReason = 4
)

// Enum value maps for DisputeReason.
var (
	DisputeReason_name = map[int32]string{
		0: "DISPUTE_REASON_UNSPECIFIED",
		1: "DISPUTE_REASON_MISSINGINFORMATION",
		2: "DISPUTE_REASON_NOTPARTOFCATALOGTRANSFER",
		3: "DISPUTE_REASON_MORERESEARCHNEEDED",
		4: "DISPUTE_REASON_USERDEFINED",
	}
	DisputeReason_value = map[string]int32{
		"DISPUTE_REASON_UNSPECIFIED":              0,
		"DISPUTE_REASON_MISSINGINFORMATION":       1,
		"DISPUTE_REASON_NOTPARTOFCATALOGTRANSFER": 2,
		"DISPUTE_REASON_MORERESEARCHNEEDED":       3,
		"DISPUTE_REASON_USERDEFINED":              4,
	}
)

func (x DisputeReason) Enum() *DisputeReason {
	p := new(DisputeReason)
	*p = x
	return p
}

func (x DisputeReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[32].Descriptor()
}

func (DisputeReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[32]
}

func (x DisputeReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeReason.Descriptor instead.
func (DisputeReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{32}
}

type DistributionChannelType int32

const (
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED       DistributionChannelType = 0
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT     DistributionChannelType = 1
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_BROADCAST         DistributionChannelType = 2
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_CABLE             DistributionChannelType = 3
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_INTERNET          DistributionChannelType = 4
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE DistributionChannelType = 5
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_IPTV              DistributionChannelType = 6
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE   DistributionChannelType = 7
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_NARROWCAST        DistributionChannelType = 8
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM    DistributionChannelType = 9
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER        DistributionChannelType = 10
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_PHYSICAL          DistributionChannelType = 11
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_SATELLITE         DistributionChannelType = 12
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_SIMULCAST         DistributionChannelType = 13
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_UNKNOWN           DistributionChannelType = 14
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_USERDEFINED       DistributionChannelType = 15
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_WEBCAST           DistributionChannelType = 16
)

// Enum value maps for DistributionChannelType.
var (
	DistributionChannelType_name = map[int32]string{
		0:  "DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED",
		1:  "DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT",
		2:  "DISTRIBUTION_CHANNEL_TYPE_BROADCAST",
		3:  "DISTRIBUTION_CHANNEL_TYPE_CABLE",
		4:  "DISTRIBUTION_CHANNEL_TYPE_INTERNET",
		5:  "DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE",
		6:  "DISTRIBUTION_CHANNEL_TYPE_IPTV",
		7:  "DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE",
		8:  "DISTRIBUTION_CHANNEL_TYPE_NARROWCAST",
		9:  "DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM",
		10: "DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER",
		11: "DISTRIBUTION_CHANNEL_TYPE_PHYSICAL",
		12: "DISTRIBUTION_CHANNEL_TYPE_SATELLITE",
		13: "DISTRIBUTION_CHANNEL_TYPE_SIMULCAST",
		14: "DISTRIBUTION_CHANNEL_TYPE_UNKNOWN",
		15: "DISTRIBUTION_CHANNEL_TYPE_USERDEFINED",
		16: "DISTRIBUTION_CHANNEL_TYPE_WEBCAST",
	}
	DistributionChannelType_value = map[string]int32{
		"DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED":       0,
		"DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT":     1,
		"DISTRIBUTION_CHANNEL_TYPE_BROADCAST":         2,
		"DISTRIBUTION_CHANNEL_TYPE_CABLE":             3,
		"DISTRIBUTION_CHANNEL_TYPE_INTERNET":          4,
		"DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE": 5,
		"DISTRIBUTION_CHANNEL_TYPE_IPTV":              6,
		"DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE":   7,
		"DISTRIBUTION_CHANNEL_TYPE_NARROWCAST":        8,
		"DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM":    9,
		"DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER":        10,
		"DISTRIBUTION_CHANNEL_TYPE_PHYSICAL":          11,
		"DISTRIBUTION_CHANNEL_TYPE_SATELLITE":         12,
		"DISTRIBUTION_CHANNEL_TYPE_SIMULCAST":         13,
		"DISTRIBUTION_CHANNEL_TYPE_UNKNOWN":           14,
		"DISTRIBUTION_CHANNEL_TYPE_USERDEFINED":       15,
		"DISTRIBUTION_CHANNEL_TYPE_WEBCAST":           16,
	}
)

func (x DistributionChannelType) Enum() *DistributionChannelType {
	p := new(DistributionChannelType)
	*p = x
	return p
}

func (x DistributionChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DistributionChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[33].Descriptor()
}

func (DistributionChannelType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[33]
}

func (x DistributionChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DistributionChannelType.Descriptor instead.
func (DistributionChannelType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{33}
}

type DpidStatus int32

const (
	DpidStatus_DPID_STATUS_UNSPECIFIED DpidStatus = 0
	DpidStatus_DPID_STATUS_ACTIVE      DpidStatus = 1
	DpidStatus_DPID_STATUS_DELETED     DpidStatus = 2
	DpidStatus_DPID_STATUS_REPLACED    DpidStatus = 3
)

// Enum value maps for DpidStatus.
var (
	DpidStatus_name = map[int32]string{
		0: "DPID_STATUS_UNSPECIFIED",
		1: "DPID_STATUS_ACTIVE",
		2: "DPID_STATUS_DELETED",
		3: "DPID_STATUS_REPLACED",
	}
	DpidStatus_value = map[string]int32{
		"DPID_STATUS_UNSPECIFIED": 0,
		"DPID_STATUS_ACTIVE":      1,
		"DPID_STATUS_DELETED":     2,
		"DPID_STATUS_REPLACED":    3,
	}
)

func (x DpidStatus) Enum() *DpidStatus {
	p := new(DpidStatus)
	*p = x
	return p
}

func (x DpidStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DpidStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[34].Descriptor()
}

func (DpidStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[34]
}

func (x DpidStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DpidStatus.Descriptor instead.
func (DpidStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{34}
}

type DrmEnforcementType int32

const (
	DrmEnforcementType_DRM_ENFORCEMENT_TYPE_UNSPECIFIED    DrmEnforcementType = 0
	DrmEnforcementType_DRM_ENFORCEMENT_TYPE_DRMENFORCED    DrmEnforcementType = 1
	DrmEnforcementType_DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED DrmEnforcementType = 2
)

// Enum value maps for DrmEnforcementType.
var (
	DrmEnforcementType_name = map[int32]string{
		0: "DRM_ENFORCEMENT_TYPE_UNSPECIFIED",
		1: "DRM_ENFORCEMENT_TYPE_DRMENFORCED",
		2: "DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED",
	}
	DrmEnforcementType_value = map[string]int32{
		"DRM_ENFORCEMENT_TYPE_UNSPECIFIED":    0,
		"DRM_ENFORCEMENT_TYPE_DRMENFORCED":    1,
		"DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED": 2,
	}
)

func (x DrmEnforcementType) Enum() *DrmEnforcementType {
	p := new(DrmEnforcementType)
	*p = x
	return p
}

func (x DrmEnforcementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrmEnforcementType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[35].Descriptor()
}

func (DrmEnforcementType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[35]
}

func (x DrmEnforcementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrmEnforcementType.Descriptor instead.
func (DrmEnforcementType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{35}
}

type DrmPlatformType int32

const (
	DrmPlatformType_DRM_PLATFORM_TYPE_UNSPECIFIED     DrmPlatformType = 0
	DrmPlatformType_DRM_PLATFORM_TYPE_E_3DAY          DrmPlatformType = 1
	DrmPlatformType_DRM_PLATFORM_TYPE_FAIRPLAY        DrmPlatformType = 2
	DrmPlatformType_DRM_PLATFORM_TYPE_OMA             DrmPlatformType = 3
	DrmPlatformType_DRM_PLATFORM_TYPE_UNKNOWN         DrmPlatformType = 4
	DrmPlatformType_DRM_PLATFORM_TYPE_USERDEFINED     DrmPlatformType = 5
	DrmPlatformType_DRM_PLATFORM_TYPE_WINDOWSMEDIADRM DrmPlatformType = 6
)

// Enum value maps for DrmPlatformType.
var (
	DrmPlatformType_name = map[int32]string{
		0: "DRM_PLATFORM_TYPE_UNSPECIFIED",
		1: "DRM_PLATFORM_TYPE_E_3DAY",
		2: "DRM_PLATFORM_TYPE_FAIRPLAY",
		3: "DRM_PLATFORM_TYPE_OMA",
		4: "DRM_PLATFORM_TYPE_UNKNOWN",
		5: "DRM_PLATFORM_TYPE_USERDEFINED",
		6: "DRM_PLATFORM_TYPE_WINDOWSMEDIADRM",
	}
	DrmPlatformType_value = map[string]int32{
		"DRM_PLATFORM_TYPE_UNSPECIFIED":     0,
		"DRM_PLATFORM_TYPE_E_3DAY":          1,
		"DRM_PLATFORM_TYPE_FAIRPLAY":        2,
		"DRM_PLATFORM_TYPE_OMA":             3,
		"DRM_PLATFORM_TYPE_UNKNOWN":         4,
		"DRM_PLATFORM_TYPE_USERDEFINED":     5,
		"DRM_PLATFORM_TYPE_WINDOWSMEDIADRM": 6,
	}
)

func (x DrmPlatformType) Enum() *DrmPlatformType {
	p := new(DrmPlatformType)
	*p = x
	return p
}

func (x DrmPlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrmPlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[36].Descriptor()
}

func (DrmPlatformType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[36]
}

func (x DrmPlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrmPlatformType.Descriptor instead.
func (DrmPlatformType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{36}
}

type DsrMessageType int32

const (
	DsrMessageType_DSR_MESSAGE_TYPE_UNSPECIFIED                       DsrMessageType = 0
	DsrMessageType_DSR_MESSAGE_TYPE_SALESREPORTTORECORDCOMPANYMESSAGE DsrMessageType = 1
	DsrMessageType_DSR_MESSAGE_TYPE_SALESREPORTTOSOCIETYMESSAGE       DsrMessageType = 2
)

// Enum value maps for DsrMessageType.
var (
	DsrMessageType_name = map[int32]string{
		0: "DSR_MESSAGE_TYPE_UNSPECIFIED",
		1: "DSR_MESSAGE_TYPE_SALESREPORTTORECORDCOMPANYMESSAGE",
		2: "DSR_MESSAGE_TYPE_SALESREPORTTOSOCIETYMESSAGE",
	}
	DsrMessageType_value = map[string]int32{
		"DSR_MESSAGE_TYPE_UNSPECIFIED":                       0,
		"DSR_MESSAGE_TYPE_SALESREPORTTORECORDCOMPANYMESSAGE": 1,
		"DSR_MESSAGE_TYPE_SALESREPORTTOSOCIETYMESSAGE":       2,
	}
)

func (x DsrMessageType) Enum() *DsrMessageType {
	p := new(DsrMessageType)
	*p = x
	return p
}

func (x DsrMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DsrMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[37].Descriptor()
}

func (DsrMessageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[37]
}

func (x DsrMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DsrMessageType.Descriptor instead.
func (DsrMessageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{37}
}

type EquipmentType int32

const (
	EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED       EquipmentType = 0
	EquipmentType_EQUIPMENT_TYPE_COMPUTER          EquipmentType = 1
	EquipmentType_EQUIPMENT_TYPE_MICROPHONE        EquipmentType = 2
	EquipmentType_EQUIPMENT_TYPE_RECORDER          EquipmentType = 3
	EquipmentType_EQUIPMENT_TYPE_SIGNALPROCESSOR   EquipmentType = 4
	EquipmentType_EQUIPMENT_TYPE_SOFTWARE          EquipmentType = 5
	EquipmentType_EQUIPMENT_TYPE_LOUDSPEAKER       EquipmentType = 6
	EquipmentType_EQUIPMENT_TYPE_MUSICALINSTRUMENT EquipmentType = 7
)

// Enum value maps for EquipmentType.
var (
	EquipmentType_name = map[int32]string{
		0: "EQUIPMENT_TYPE_UNSPECIFIED",
		1: "EQUIPMENT_TYPE_COMPUTER",
		2: "EQUIPMENT_TYPE_MICROPHONE",
		3: "EQUIPMENT_TYPE_RECORDER",
		4: "EQUIPMENT_TYPE_SIGNALPROCESSOR",
		5: "EQUIPMENT_TYPE_SOFTWARE",
		6: "EQUIPMENT_TYPE_LOUDSPEAKER",
		7: "EQUIPMENT_TYPE_MUSICALINSTRUMENT",
	}
	EquipmentType_value = map[string]int32{
		"EQUIPMENT_TYPE_UNSPECIFIED":       0,
		"EQUIPMENT_TYPE_COMPUTER":          1,
		"EQUIPMENT_TYPE_MICROPHONE":        2,
		"EQUIPMENT_TYPE_RECORDER":          3,
		"EQUIPMENT_TYPE_SIGNALPROCESSOR":   4,
		"EQUIPMENT_TYPE_SOFTWARE":          5,
		"EQUIPMENT_TYPE_LOUDSPEAKER":       6,
		"EQUIPMENT_TYPE_MUSICALINSTRUMENT": 7,
	}
)

func (x EquipmentType) Enum() *EquipmentType {
	p := new(EquipmentType)
	*p = x
	return p
}

func (x EquipmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[38].Descriptor()
}

func (EquipmentType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[38]
}

func (x EquipmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentType.Descriptor instead.
func (EquipmentType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{38}
}

type ErnMessageType int32

const (
	ErnMessageType_ERN_MESSAGE_TYPE_UNSPECIFIED       ErnMessageType = 0
	ErnMessageType_ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE ErnMessageType = 1
)

// Enum value maps for ErnMessageType.
var (
	ErnMessageType_name = map[int32]string{
		0: "ERN_MESSAGE_TYPE_UNSPECIFIED",
		1: "ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE",
	}
	ErnMessageType_value = map[string]int32{
		"ERN_MESSAGE_TYPE_UNSPECIFIED":       0,
		"ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE": 1,
	}
)

func (x ErnMessageType) Enum() *ErnMessageType {
	p := new(ErnMessageType)
	*p = x
	return p
}

func (x ErnMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErnMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[39].Descriptor()
}

func (ErnMessageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[39]
}

func (x ErnMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErnMessageType.Descriptor instead.
func (ErnMessageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{39}
}

type ErncFileStatus int32

const (
	ErncFileStatus_ERNC_FILE_STATUS_UNSPECIFIED                             ErncFileStatus = 0
	ErncFileStatus_ERNC_FILE_STATUS_ARTISTROLEUNKNOWN                       ErncFileStatus = 1
	ErncFileStatus_ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID            ErncFileStatus = 2
	ErncFileStatus_ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS          ErncFileStatus = 3
	ErncFileStatus_ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES                ErncFileStatus = 4
	ErncFileStatus_ERNC_FILE_STATUS_ERNMISSING                              ErncFileStatus = 5
	ErncFileStatus_ERNC_FILE_STATUS_FILEOK                                  ErncFileStatus = 6
	ErncFileStatus_ERNC_FILE_STATUS_IDENTIFIERINVALID                       ErncFileStatus = 7
	ErncFileStatus_ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID                 ErncFileStatus = 8
	ErncFileStatus_ERNC_FILE_STATUS_INTERNALERROR                           ErncFileStatus = 9
	ErncFileStatus_ERNC_FILE_STATUS_METADATAMISSING                         ErncFileStatus = 10
	ErncFileStatus_ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID                ErncFileStatus = 11
	ErncFileStatus_ERNC_FILE_STATUS_NODEALFORTRACKRELEASE                   ErncFileStatus = 12
	ErncFileStatus_ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE               ErncFileStatus = 13
	ErncFileStatus_ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE ErncFileStatus = 14
	ErncFileStatus_ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING                ErncFileStatus = 15
	ErncFileStatus_ERNC_FILE_STATUS_RESOURCECORRUPT                         ErncFileStatus = 16
	ErncFileStatus_ERNC_FILE_STATUS_RESOURCEMISSING                         ErncFileStatus = 17
	ErncFileStatus_ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS        ErncFileStatus = 18
	ErncFileStatus_ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING        ErncFileStatus = 19
	ErncFileStatus_ERNC_FILE_STATUS_UNSUPPORTEDUSAGE                        ErncFileStatus = 20
	ErncFileStatus_ERNC_FILE_STATUS_USERDEFINED                             ErncFileStatus = 21
)

// Enum value maps for ErncFileStatus.
var (
	ErncFileStatus_name = map[int32]string{
		0:  "ERNC_FILE_STATUS_UNSPECIFIED",
		1:  "ERNC_FILE_STATUS_ARTISTROLEUNKNOWN",
		2:  "ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID",
		3:  "ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS",
		4:  "ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES",
		5:  "ERNC_FILE_STATUS_ERNMISSING",
		6:  "ERNC_FILE_STATUS_FILEOK",
		7:  "ERNC_FILE_STATUS_IDENTIFIERINVALID",
		8:  "ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID",
		9:  "ERNC_FILE_STATUS_INTERNALERROR",
		10: "ERNC_FILE_STATUS_METADATAMISSING",
		11: "ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID",
		12: "ERNC_FILE_STATUS_NODEALFORTRACKRELEASE",
		13: "ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE",
		14: "ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE",
		15: "ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING",
		16: "ERNC_FILE_STATUS_RESOURCECORRUPT",
		17: "ERNC_FILE_STATUS_RESOURCEMISSING",
		18: "ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS",
		19: "ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING",
		20: "ERNC_FILE_STATUS_UNSUPPORTEDUSAGE",
		21: "ERNC_FILE_STATUS_USERDEFINED",
	}
	ErncFileStatus_value = map[string]int32{
		"ERNC_FILE_STATUS_UNSPECIFIED":                             0,
		"ERNC_FILE_STATUS_ARTISTROLEUNKNOWN":                       1,
		"ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID":            2,
		"ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS":          3,
		"ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES":                4,
		"ERNC_FILE_STATUS_ERNMISSING":                              5,
		"ERNC_FILE_STATUS_FILEOK":                                  6,
		"ERNC_FILE_STATUS_IDENTIFIERINVALID":                       7,
		"ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID":                 8,
		"ERNC_FILE_STATUS_INTERNALERROR":                           9,
		"ERNC_FILE_STATUS_METADATAMISSING":                         10,
		"ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID":                11,
		"ERNC_FILE_STATUS_NODEALFORTRACKRELEASE":                   12,
		"ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE":               13,
		"ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE": 14,
		"ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING":                15,
		"ERNC_FILE_STATUS_RESOURCECORRUPT":                         16,
		"ERNC_FILE_STATUS_RESOURCEMISSING":                         17,
		"ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS":        18,
		"ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING":        19,
		"ERNC_FILE_STATUS_UNSUPPORTEDUSAGE":                        20,
		"ERNC_FILE_STATUS_USERDEFINED":                             21,
	}
)

func (x ErncFileStatus) Enum() *ErncFileStatus {
	p := new(ErncFileStatus)
	*p = x
	return p
}

func (x ErncFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErncFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[40].Descriptor()
}

func (ErncFileStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[40]
}

func (x ErncFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErncFileStatus.Descriptor instead.
func (ErncFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{40}
}

type ErncProposedActionType int32

const (
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED                 ErncProposedActionType = 0
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY               ErncProposedActionType = 1
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES       ErncProposedActionType = 2
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_USERDEFINED                 ErncProposedActionType = 3
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE ErncProposedActionType = 4
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE          ErncProposedActionType = 5
)

// Enum value maps for ErncProposedActionType.
var (
	ErncProposedActionType_name = map[int32]string{
		0: "ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED",
		1: "ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY",
		2: "ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES",
		3: "ERNC_PROPOSED_ACTION_TYPE_USERDEFINED",
		4: "ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE",
		5: "ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE",
	}
	ErncProposedActionType_value = map[string]int32{
		"ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED":                 0,
		"ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY":               1,
		"ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES":       2,
		"ERNC_PROPOSED_ACTION_TYPE_USERDEFINED":                 3,
		"ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE": 4,
		"ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE":          5,
	}
)

func (x ErncProposedActionType) Enum() *ErncProposedActionType {
	p := new(ErncProposedActionType)
	*p = x
	return p
}

func (x ErncProposedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErncProposedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[41].Descriptor()
}

func (ErncProposedActionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[41]
}

func (x ErncProposedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErncProposedActionType.Descriptor instead.
func (ErncProposedActionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{41}
}

type ExpressionType int32

const (
	ExpressionType_EXPRESSION_TYPE_UNSPECIFIED ExpressionType = 0
	ExpressionType_EXPRESSION_TYPE_INFORMATIVE ExpressionType = 1
	ExpressionType_EXPRESSION_TYPE_INSTRUCTIVE ExpressionType = 2
)

// Enum value maps for ExpressionType.
var (
	ExpressionType_name = map[int32]string{
		0: "EXPRESSION_TYPE_UNSPECIFIED",
		1: "EXPRESSION_TYPE_INFORMATIVE",
		2: "EXPRESSION_TYPE_INSTRUCTIVE",
	}
	ExpressionType_value = map[string]int32{
		"EXPRESSION_TYPE_UNSPECIFIED": 0,
		"EXPRESSION_TYPE_INFORMATIVE": 1,
		"EXPRESSION_TYPE_INSTRUCTIVE": 2,
	}
)

func (x ExpressionType) Enum() *ExpressionType {
	p := new(ExpressionType)
	*p = x
	return p
}

func (x ExpressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[42].Descriptor()
}

func (ExpressionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[42]
}

func (x ExpressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressionType.Descriptor instead.
func (ExpressionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{42}
}

type ExternallyLinkedResourceType int32

const (
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED            ExternallyLinkedResourceType = 0
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA     ExternallyLinkedResourceType = 1
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO                   ExternallyLinkedResourceType = 2
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE       ExternallyLinkedResourceType = 3
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION ExternallyLinkedResourceType = 4
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM        ExternallyLinkedResourceType = 5
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN                ExternallyLinkedResourceType = 6
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED            ExternallyLinkedResourceType = 7
)

// Enum value maps for ExternallyLinkedResourceType.
var (
	ExternallyLinkedResourceType_name = map[int32]string{
		0: "EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED",
		1: "EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA",
		2: "EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO",
		3: "EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE",
		4: "EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION",
		5: "EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM",
		6: "EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN",
		7: "EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED",
	}
	ExternallyLinkedResourceType_value = map[string]int32{
		"EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED":            0,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA":     1,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO":                   2,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE":       3,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION": 4,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM":        5,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN":                6,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED":            7,
	}
)

func (x ExternallyLinkedResourceType) Enum() *ExternallyLinkedResourceType {
	p := new(ExternallyLinkedResourceType)
	*p = x
	return p
}

func (x ExternallyLinkedResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternallyLinkedResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[43].Descriptor()
}

func (ExternallyLinkedResourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[43]
}

func (x ExternallyLinkedResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternallyLinkedResourceType.Descriptor instead.
func (ExternallyLinkedResourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{43}
}

type FileStatus int32

const (
	FileStatus_FILE_STATUS_UNSPECIFIED    FileStatus = 0
	FileStatus_FILE_STATUS_FILEMISSING    FileStatus = 1
	FileStatus_FILE_STATUS_FILEOK         FileStatus = 2
	FileStatus_FILE_STATUS_HASHSUMWRONG   FileStatus = 3
	FileStatus_FILE_STATUS_SIGNATUREWRONG FileStatus = 4
)

// Enum value maps for FileStatus.
var (
	FileStatus_name = map[int32]string{
		0: "FILE_STATUS_UNSPECIFIED",
		1: "FILE_STATUS_FILEMISSING",
		2: "FILE_STATUS_FILEOK",
		3: "FILE_STATUS_HASHSUMWRONG",
		4: "FILE_STATUS_SIGNATUREWRONG",
	}
	FileStatus_value = map[string]int32{
		"FILE_STATUS_UNSPECIFIED":    0,
		"FILE_STATUS_FILEMISSING":    1,
		"FILE_STATUS_FILEOK":         2,
		"FILE_STATUS_HASHSUMWRONG":   3,
		"FILE_STATUS_SIGNATUREWRONG": 4,
	}
)

func (x FileStatus) Enum() *FileStatus {
	p := new(FileStatus)
	*p = x
	return p
}

func (x FileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[44].Descriptor()
}

func (FileStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[44]
}

func (x FileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileStatus.Descriptor instead.
func (FileStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{44}
}

type FingerprintAlgorithmType int32

const (
	FingerprintAlgorithmType_FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED FingerprintAlgorithmType = 0
	FingerprintAlgorithmType_FINGERPRINT_ALGORITHM_TYPE_USERDEFINED FingerprintAlgorithmType = 1
)

// Enum value maps for FingerprintAlgorithmType.
var (
	FingerprintAlgorithmType_name = map[int32]string{
		0: "FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED",
		1: "FINGERPRINT_ALGORITHM_TYPE_USERDEFINED",
	}
	FingerprintAlgorithmType_value = map[string]int32{
		"FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED": 0,
		"FINGERPRINT_ALGORITHM_TYPE_USERDEFINED": 1,
	}
)

func (x FingerprintAlgorithmType) Enum() *FingerprintAlgorithmType {
	p := new(FingerprintAlgorithmType)
	*p = x
	return p
}

func (x FingerprintAlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FingerprintAlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[45].Descriptor()
}

func (FingerprintAlgorithmType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[45]
}

func (x FingerprintAlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FingerprintAlgorithmType.Descriptor instead.
func (FingerprintAlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{45}
}

type GoverningAgreementType int32

const (
	GoverningAgreementType_GOVERNING_AGREEMENT_TYPE_UNSPECIFIED                GoverningAgreementType = 0
	GoverningAgreementType_GOVERNING_AGREEMENT_TYPE_USERDEFINED                GoverningAgreementType = 1
	GoverningAgreementType_GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT GoverningAgreementType = 2
)

// Enum value maps for GoverningAgreementType.
var (
	GoverningAgreementType_name = map[int32]string{
		0: "GOVERNING_AGREEMENT_TYPE_UNSPECIFIED",
		1: "GOVERNING_AGREEMENT_TYPE_USERDEFINED",
		2: "GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT",
	}
	GoverningAgreementType_value = map[string]int32{
		"GOVERNING_AGREEMENT_TYPE_UNSPECIFIED":                0,
		"GOVERNING_AGREEMENT_TYPE_USERDEFINED":                1,
		"GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT": 2,
	}
)

func (x GoverningAgreementType) Enum() *GoverningAgreementType {
	p := new(GoverningAgreementType)
	*p = x
	return p
}

func (x GoverningAgreementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoverningAgreementType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[46].Descriptor()
}

func (GoverningAgreementType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[46]
}

func (x GoverningAgreementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoverningAgreementType.Descriptor instead.
func (GoverningAgreementType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{46}
}

type HashSumAlgorithmType int32

const (
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_UNSPECIFIED HashSumAlgorithmType = 0
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MD4         HashSumAlgorithmType = 1
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MD5         HashSumAlgorithmType = 2
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA         HashSumAlgorithmType = 3
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA1        HashSumAlgorithmType = 4
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_USERDEFINED HashSumAlgorithmType = 5
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_CRC32       HashSumAlgorithmType = 6
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MD2         HashSumAlgorithmType = 7
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MD4_MLNET   HashSumAlgorithmType = 8
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MDC2        HashSumAlgorithmType = 9
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_RMD160      HashSumAlgorithmType = 10
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA2        HashSumAlgorithmType = 11
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA_224     HashSumAlgorithmType = 12
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA_256     HashSumAlgorithmType = 13
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA3        HashSumAlgorithmType = 14
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA_384     HashSumAlgorithmType = 15
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA_512     HashSumAlgorithmType = 16
)

// Enum value maps for HashSumAlgorithmType.
var (
	HashSumAlgorithmType_name = map[int32]string{
		0:  "HASH_SUM_ALGORITHM_TYPE_UNSPECIFIED",
		1:  "HASH_SUM_ALGORITHM_TYPE_MD4",
		2:  "HASH_SUM_ALGORITHM_TYPE_MD5",
		3:  "HASH_SUM_ALGORITHM_TYPE_SHA",
		4:  "HASH_SUM_ALGORITHM_TYPE_SHA1",
		5:  "HASH_SUM_ALGORITHM_TYPE_USERDEFINED",
		6:  "HASH_SUM_ALGORITHM_TYPE_CRC32",
		7:  "HASH_SUM_ALGORITHM_TYPE_MD2",
		8:  "HASH_SUM_ALGORITHM_TYPE_MD4_MLNET",
		9:  "HASH_SUM_ALGORITHM_TYPE_MDC2",
		10: "HASH_SUM_ALGORITHM_TYPE_RMD160",
		11: "HASH_SUM_ALGORITHM_TYPE_SHA2",
		12: "HASH_SUM_ALGORITHM_TYPE_SHA_224",
		13: "HASH_SUM_ALGORITHM_TYPE_SHA_256",
		14: "HASH_SUM_ALGORITHM_TYPE_SHA3",
		15: "HASH_SUM_ALGORITHM_TYPE_SHA_384",
		16: "HASH_SUM_ALGORITHM_TYPE_SHA_512",
	}
	HashSumAlgorithmType_value = map[string]int32{
		"HASH_SUM_ALGORITHM_TYPE_UNSPECIFIED": 0,
		"HASH_SUM_ALGORITHM_TYPE_MD4":         1,
		"HASH_SUM_ALGORITHM_TYPE_MD5":         2,
		"HASH_SUM_ALGORITHM_TYPE_SHA":         3,
		"HASH_SUM_ALGORITHM_TYPE_SHA1":        4,
		"HASH_SUM_ALGORITHM_TYPE_USERDEFINED": 5,
		"HASH_SUM_ALGORITHM_TYPE_CRC32":       6,
		"HASH_SUM_ALGORITHM_TYPE_MD2":         7,
		"HASH_SUM_ALGORITHM_TYPE_MD4_MLNET":   8,
		"HASH_SUM_ALGORITHM_TYPE_MDC2":        9,
		"HASH_SUM_ALGORITHM_TYPE_RMD160":      10,
		"HASH_SUM_ALGORITHM_TYPE_SHA2":        11,
		"HASH_SUM_ALGORITHM_TYPE_SHA_224":     12,
		"HASH_SUM_ALGORITHM_TYPE_SHA_256":     13,
		"HASH_SUM_ALGORITHM_TYPE_SHA3":        14,
		"HASH_SUM_ALGORITHM_TYPE_SHA_384":     15,
		"HASH_SUM_ALGORITHM_TYPE_SHA_512":     16,
	}
)

func (x HashSumAlgorithmType) Enum() *HashSumAlgorithmType {
	p := new(HashSumAlgorithmType)
	*p = x
	return p
}

func (x HashSumAlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashSumAlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[47].Descriptor()
}

func (HashSumAlgorithmType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[47]
}

func (x HashSumAlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashSumAlgorithmType.Descriptor instead.
func (HashSumAlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{47}
}

type ImageCodecType int32

const (
	ImageCodecType_IMAGE_CODEC_TYPE_UNSPECIFIED ImageCodecType = 0
	ImageCodecType_IMAGE_CODEC_TYPE_GIF         ImageCodecType = 1
	ImageCodecType_IMAGE_CODEC_TYPE_JPEG        ImageCodecType = 2
	ImageCodecType_IMAGE_CODEC_TYPE_JPEG2000    ImageCodecType = 3
	ImageCodecType_IMAGE_CODEC_TYPE_PNG         ImageCodecType = 4
	ImageCodecType_IMAGE_CODEC_TYPE_TIFF        ImageCodecType = 5
	ImageCodecType_IMAGE_CODEC_TYPE_UNKNOWN     ImageCodecType = 6
	ImageCodecType_IMAGE_CODEC_TYPE_USERDEFINED ImageCodecType = 7
)

// Enum value maps for ImageCodecType.
var (
	ImageCodecType_name = map[int32]string{
		0: "IMAGE_CODEC_TYPE_UNSPECIFIED",
		1: "IMAGE_CODEC_TYPE_GIF",
		2: "IMAGE_CODEC_TYPE_JPEG",
		3: "IMAGE_CODEC_TYPE_JPEG2000",
		4: "IMAGE_CODEC_TYPE_PNG",
		5: "IMAGE_CODEC_TYPE_TIFF",
		6: "IMAGE_CODEC_TYPE_UNKNOWN",
		7: "IMAGE_CODEC_TYPE_USERDEFINED",
	}
	ImageCodecType_value = map[string]int32{
		"IMAGE_CODEC_TYPE_UNSPECIFIED": 0,
		"IMAGE_CODEC_TYPE_GIF":         1,
		"IMAGE_CODEC_TYPE_JPEG":        2,
		"IMAGE_CODEC_TYPE_JPEG2000":    3,
		"IMAGE_CODEC_TYPE_PNG":         4,
		"IMAGE_CODEC_TYPE_TIFF":        5,
		"IMAGE_CODEC_TYPE_UNKNOWN":     6,
		"IMAGE_CODEC_TYPE_USERDEFINED": 7,
	}
)

func (x ImageCodecType) Enum() *ImageCodecType {
	p := new(ImageCodecType)
	*p = x
	return p
}

func (x ImageCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[48].Descriptor()
}

func (ImageCodecType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[48]
}

func (x ImageCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageCodecType.Descriptor instead.
func (ImageCodecType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{48}
}

type ImageType int32

const (
	ImageType_IMAGE_TYPE_UNSPECIFIED        ImageType = 0
	ImageType_IMAGE_TYPE_BACKCOVERIMAGE     ImageType = 1
	ImageType_IMAGE_TYPE_BOOKLETBACKIMAGE   ImageType = 2
	ImageType_IMAGE_TYPE_BOOKLETFRONTIMAGE  ImageType = 3
	ImageType_IMAGE_TYPE_DOCUMENTIMAGE      ImageType = 4
	ImageType_IMAGE_TYPE_FRONTCOVERIMAGE    ImageType = 5
	ImageType_IMAGE_TYPE_ICON               ImageType = 6
	ImageType_IMAGE_TYPE_LOGO               ImageType = 7
	ImageType_IMAGE_TYPE_PHOTOGRAPH         ImageType = 8
	ImageType_IMAGE_TYPE_POSTER             ImageType = 9
	ImageType_IMAGE_TYPE_TRAYIMAGE          ImageType = 10
	ImageType_IMAGE_TYPE_UNKNOWN            ImageType = 11
	ImageType_IMAGE_TYPE_USERDEFINED        ImageType = 12
	ImageType_IMAGE_TYPE_VIDEOSCREENCAPTURE ImageType = 13
	ImageType_IMAGE_TYPE_WALLPAPER          ImageType = 14
	ImageType_IMAGE_TYPE_PORTRAIT           ImageType = 15
)

// Enum value maps for ImageType.
var (
	ImageType_name = map[int32]string{
		0:  "IMAGE_TYPE_UNSPECIFIED",
		1:  "IMAGE_TYPE_BACKCOVERIMAGE",
		2:  "IMAGE_TYPE_BOOKLETBACKIMAGE",
		3:  "IMAGE_TYPE_BOOKLETFRONTIMAGE",
		4:  "IMAGE_TYPE_DOCUMENTIMAGE",
		5:  "IMAGE_TYPE_FRONTCOVERIMAGE",
		6:  "IMAGE_TYPE_ICON",
		7:  "IMAGE_TYPE_LOGO",
		8:  "IMAGE_TYPE_PHOTOGRAPH",
		9:  "IMAGE_TYPE_POSTER",
		10: "IMAGE_TYPE_TRAYIMAGE",
		11: "IMAGE_TYPE_UNKNOWN",
		12: "IMAGE_TYPE_USERDEFINED",
		13: "IMAGE_TYPE_VIDEOSCREENCAPTURE",
		14: "IMAGE_TYPE_WALLPAPER",
		15: "IMAGE_TYPE_PORTRAIT",
	}
	ImageType_value = map[string]int32{
		"IMAGE_TYPE_UNSPECIFIED":        0,
		"IMAGE_TYPE_BACKCOVERIMAGE":     1,
		"IMAGE_TYPE_BOOKLETBACKIMAGE":   2,
		"IMAGE_TYPE_BOOKLETFRONTIMAGE":  3,
		"IMAGE_TYPE_DOCUMENTIMAGE":      4,
		"IMAGE_TYPE_FRONTCOVERIMAGE":    5,
		"IMAGE_TYPE_ICON":               6,
		"IMAGE_TYPE_LOGO":               7,
		"IMAGE_TYPE_PHOTOGRAPH":         8,
		"IMAGE_TYPE_POSTER":             9,
		"IMAGE_TYPE_TRAYIMAGE":          10,
		"IMAGE_TYPE_UNKNOWN":            11,
		"IMAGE_TYPE_USERDEFINED":        12,
		"IMAGE_TYPE_VIDEOSCREENCAPTURE": 13,
		"IMAGE_TYPE_WALLPAPER":          14,
		"IMAGE_TYPE_PORTRAIT":           15,
	}
)

func (x ImageType) Enum() *ImageType {
	p := new(ImageType)
	*p = x
	return p
}

func (x ImageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[49].Descriptor()
}

func (ImageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[49]
}

func (x ImageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageType.Descriptor instead.
func (ImageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{49}
}

type InvoiceAvailabilityStatus int32

const (
	InvoiceAvailabilityStatus_INVOICE_AVAILABILITY_STATUS_UNSPECIFIED         InvoiceAvailabilityStatus = 0
	InvoiceAvailabilityStatus_INVOICE_AVAILABILITY_STATUS_INVOICEAVAILABLE    InvoiceAvailabilityStatus = 1
	InvoiceAvailabilityStatus_INVOICE_AVAILABILITY_STATUS_INVOICENOTAVAILABLE InvoiceAvailabilityStatus = 2
)

// Enum value maps for InvoiceAvailabilityStatus.
var (
	InvoiceAvailabilityStatus_name = map[int32]string{
		0: "INVOICE_AVAILABILITY_STATUS_UNSPECIFIED",
		1: "INVOICE_AVAILABILITY_STATUS_INVOICEAVAILABLE",
		2: "INVOICE_AVAILABILITY_STATUS_INVOICENOTAVAILABLE",
	}
	InvoiceAvailabilityStatus_value = map[string]int32{
		"INVOICE_AVAILABILITY_STATUS_UNSPECIFIED":         0,
		"INVOICE_AVAILABILITY_STATUS_INVOICEAVAILABLE":    1,
		"INVOICE_AVAILABILITY_STATUS_INVOICENOTAVAILABLE": 2,
	}
)

func (x InvoiceAvailabilityStatus) Enum() *InvoiceAvailabilityStatus {
	p := new(InvoiceAvailabilityStatus)
	*p = x
	return p
}

func (x InvoiceAvailabilityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvoiceAvailabilityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[50].Descriptor()
}

func (InvoiceAvailabilityStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[50]
}

func (x InvoiceAvailabilityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvoiceAvailabilityStatus.Descriptor instead.
func (InvoiceAvailabilityStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{50}
}

type IsoCurrencyCode int32

const (
	IsoCurrencyCode_ISO_CURRENCY_CODE_UNSPECIFIED IsoCurrencyCode = 0
	IsoCurrencyCode_ISO_CURRENCY_CODE_AED         IsoCurrencyCode = 1
	IsoCurrencyCode_ISO_CURRENCY_CODE_AFN         IsoCurrencyCode = 2
	IsoCurrencyCode_ISO_CURRENCY_CODE_ALL         IsoCurrencyCode = 3
	IsoCurrencyCode_ISO_CURRENCY_CODE_AMD         IsoCurrencyCode = 4
	IsoCurrencyCode_ISO_CURRENCY_CODE_ANG         IsoCurrencyCode = 5
	IsoCurrencyCode_ISO_CURRENCY_CODE_AOA         IsoCurrencyCode = 6
	IsoCurrencyCode_ISO_CURRENCY_CODE_ARS         IsoCurrencyCode = 7
	IsoCurrencyCode_ISO_CURRENCY_CODE_AUD         IsoCurrencyCode = 8
	IsoCurrencyCode_ISO_CURRENCY_CODE_AWG         IsoCurrencyCode = 9
	IsoCurrencyCode_ISO_CURRENCY_CODE_AZN         IsoCurrencyCode = 10
	IsoCurrencyCode_ISO_CURRENCY_CODE_BAM         IsoCurrencyCode = 11
	IsoCurrencyCode_ISO_CURRENCY_CODE_BBD         IsoCurrencyCode = 12
	IsoCurrencyCode_ISO_CURRENCY_CODE_BDT         IsoCurrencyCode = 13
	IsoCurrencyCode_ISO_CURRENCY_CODE_BGN         IsoCurrencyCode = 14
	IsoCurrencyCode_ISO_CURRENCY_CODE_BHD         IsoCurrencyCode = 15
	IsoCurrencyCode_ISO_CURRENCY_CODE_BIF         IsoCurrencyCode = 16
	IsoCurrencyCode_ISO_CURRENCY_CODE_BMD         IsoCurrencyCode = 17
	IsoCurrencyCode_ISO_CURRENCY_CODE_BND         IsoCurrencyCode = 18
	IsoCurrencyCode_ISO_CURRENCY_CODE_BOB         IsoCurrencyCode = 19
	IsoCurrencyCode_ISO_CURRENCY_CODE_BOV         IsoCurrencyCode = 20
	IsoCurrencyCode_ISO_CURRENCY_CODE_BRL         IsoCurrencyCode = 21
	IsoCurrencyCode_ISO_CURRENCY_CODE_BSD         IsoCurrencyCode = 22
	IsoCurrencyCode_ISO_CURRENCY_CODE_BTN         IsoCurrencyCode = 23
	IsoCurrencyCode_ISO_CURRENCY_CODE_BWP         IsoCurrencyCode = 24
	IsoCurrencyCode_ISO_CURRENCY_CODE_BYR         IsoCurrencyCode = 25
	IsoCurrencyCode_ISO_CURRENCY_CODE_BZD         IsoCurrencyCode = 26
	IsoCurrencyCode_ISO_CURRENCY_CODE_CAD         IsoCurrencyCode = 27
	IsoCurrencyCode_ISO_CURRENCY_CODE_CDF         IsoCurrencyCode = 28
	IsoCurrencyCode_ISO_CURRENCY_CODE_CHF         IsoCurrencyCode = 29
	IsoCurrencyCode_ISO_CURRENCY_CODE_CLF         IsoCurrencyCode = 30
	IsoCurrencyCode_ISO_CURRENCY_CODE_CLP         IsoCurrencyCode = 31
	IsoCurrencyCode_ISO_CURRENCY_CODE_CNY         IsoCurrencyCode = 32
	IsoCurrencyCode_ISO_CURRENCY_CODE_COP         IsoCurrencyCode = 33
	IsoCurrencyCode_ISO_CURRENCY_CODE_COU         IsoCurrencyCode = 34
	IsoCurrencyCode_ISO_CURRENCY_CODE_CRC         IsoCurrencyCode = 35
	IsoCurrencyCode_ISO_CURRENCY_CODE_CUC         IsoCurrencyCode = 36
	IsoCurrencyCode_ISO_CURRENCY_CODE_CUP         IsoCurrencyCode = 37
	IsoCurrencyCode_ISO_CURRENCY_CODE_CVE         IsoCurrencyCode = 38
	IsoCurrencyCode_ISO_CURRENCY_CODE_CZK         IsoCurrencyCode = 39
	IsoCurrencyCode_ISO_CURRENCY_CODE_DJF         IsoCurrencyCode = 40
	IsoCurrencyCode_ISO_CURRENCY_CODE_DKK         IsoCurrencyCode = 41
	IsoCurrencyCode_ISO_CURRENCY_CODE_DOP         IsoCurrencyCode = 42
	IsoCurrencyCode_ISO_CURRENCY_CODE_DZD         IsoCurrencyCode = 43
	IsoCurrencyCode_ISO_CURRENCY_CODE_EGP         IsoCurrencyCode = 44
	IsoCurrencyCode_ISO_CURRENCY_CODE_ERN         IsoCurrencyCode = 45
	IsoCurrencyCode_ISO_CURRENCY_CODE_ETB         IsoCurrencyCode = 46
	IsoCurrencyCode_ISO_CURRENCY_CODE_EUR         IsoCurrencyCode = 47
	IsoCurrencyCode_ISO_CURRENCY_CODE_FJD         IsoCurrencyCode = 48
	IsoCurrencyCode_ISO_CURRENCY_CODE_FKP         IsoCurrencyCode = 49
	IsoCurrencyCode_ISO_CURRENCY_CODE_GBP         IsoCurrencyCode = 50
	IsoCurrencyCode_ISO_CURRENCY_CODE_GEL         IsoCurrencyCode = 51
	IsoCurrencyCode_ISO_CURRENCY_CODE_GHS         IsoCurrencyCode = 52
	IsoCurrencyCode_ISO_CURRENCY_CODE_GIP         IsoCurrencyCode = 53
	IsoCurrencyCode_ISO_CURRENCY_CODE_GMD         IsoCurrencyCode = 54
	IsoCurrencyCode_ISO_CURRENCY_CODE_GNF         IsoCurrencyCode = 55
	IsoCurrencyCode_ISO_CURRENCY_CODE_GTQ         IsoCurrencyCode = 56
	IsoCurrencyCode_ISO_CURRENCY_CODE_GYD         IsoCurrencyCode = 57
	IsoCurrencyCode_ISO_CURRENCY_CODE_HKD         IsoCurrencyCode = 58
	IsoCurrencyCode_ISO_CURRENCY_CODE_HNL         IsoCurrencyCode = 59
	IsoCurrencyCode_ISO_CURRENCY_CODE_HRK         IsoCurrencyCode = 60
	IsoCurrencyCode_ISO_CURRENCY_CODE_HTG         IsoCurrencyCode = 61
	IsoCurrencyCode_ISO_CURRENCY_CODE_HUF         IsoCurrencyCode = 62
	IsoCurrencyCode_ISO_CURRENCY_CODE_IDR         IsoCurrencyCode = 63
	IsoCurrencyCode_ISO_CURRENCY_CODE_ILS         IsoCurrencyCode = 64
	IsoCurrencyCode_ISO_CURRENCY_CODE_INR         IsoCurrencyCode = 65
	IsoCurrencyCode_ISO_CURRENCY_CODE_IQD         IsoCurrencyCode = 66
	IsoCurrencyCode_ISO_CURRENCY_CODE_IRR         IsoCurrencyCode = 67
	IsoCurrencyCode_ISO_CURRENCY_CODE_ISK         IsoCurrencyCode = 68
	IsoCurrencyCode_ISO_CURRENCY_CODE_JMD         IsoCurrencyCode = 69
	IsoCurrencyCode_ISO_CURRENCY_CODE_JOD         IsoCurrencyCode = 70
	IsoCurrencyCode_ISO_CURRENCY_CODE_JPY         IsoCurrencyCode = 71
	IsoCurrencyCode_ISO_CURRENCY_CODE_KES         IsoCurrencyCode = 72
	IsoCurrencyCode_ISO_CURRENCY_CODE_KGS         IsoCurrencyCode = 73
	IsoCurrencyCode_ISO_CURRENCY_CODE_KHR         IsoCurrencyCode = 74
	IsoCurrencyCode_ISO_CURRENCY_CODE_KMF         IsoCurrencyCode = 75
	IsoCurrencyCode_ISO_CURRENCY_CODE_KPW         IsoCurrencyCode = 76
	IsoCurrencyCode_ISO_CURRENCY_CODE_KRW         IsoCurrencyCode = 77
	IsoCurrencyCode_ISO_CURRENCY_CODE_KWD         IsoCurrencyCode = 78
	IsoCurrencyCode_ISO_CURRENCY_CODE_KYD         IsoCurrencyCode = 79
	IsoCurrencyCode_ISO_CURRENCY_CODE_KZT         IsoCurrencyCode = 80
	IsoCurrencyCode_ISO_CURRENCY_CODE_LAK         IsoCurrencyCode = 81
	IsoCurrencyCode_ISO_CURRENCY_CODE_LBP         IsoCurrencyCode = 82
	IsoCurrencyCode_ISO_CURRENCY_CODE_LKR         IsoCurrencyCode = 83
	IsoCurrencyCode_ISO_CURRENCY_CODE_LRD         IsoCurrencyCode = 84
	IsoCurrencyCode_ISO_CURRENCY_CODE_LSL         IsoCurrencyCode = 85
	IsoCurrencyCode_ISO_CURRENCY_CODE_LTL         IsoCurrencyCode = 86
	IsoCurrencyCode_ISO_CURRENCY_CODE_LVL         IsoCurrencyCode = 87
	IsoCurrencyCode_ISO_CURRENCY_CODE_LYD         IsoCurrencyCode = 88
	IsoCurrencyCode_ISO_CURRENCY_CODE_MAD         IsoCurrencyCode = 89
	IsoCurrencyCode_ISO_CURRENCY_CODE_MDL         IsoCurrencyCode = 90
	IsoCurrencyCode_ISO_CURRENCY_CODE_MGA         IsoCurrencyCode = 91
	IsoCurrencyCode_ISO_CURRENCY_CODE_MKD         IsoCurrencyCode = 92
	IsoCurrencyCode_ISO_CURRENCY_CODE_MMK         IsoCurrencyCode = 93
	IsoCurrencyCode_ISO_CURRENCY_CODE_MNT         IsoCurrencyCode = 94
	IsoCurrencyCode_ISO_CURRENCY_CODE_MOP         IsoCurrencyCode = 95
	IsoCurrencyCode_ISO_CURRENCY_CODE_MRO         IsoCurrencyCode = 96
	IsoCurrencyCode_ISO_CURRENCY_CODE_MUR         IsoCurrencyCode = 97
	IsoCurrencyCode_ISO_CURRENCY_CODE_MVR         IsoCurrencyCode = 98
	IsoCurrencyCode_ISO_CURRENCY_CODE_MWK         IsoCurrencyCode = 99
	IsoCurrencyCode_ISO_CURRENCY_CODE_MXN         IsoCurrencyCode = 100
	IsoCurrencyCode_ISO_CURRENCY_CODE_MXV         IsoCurrencyCode = 101
	IsoCurrencyCode_ISO_CURRENCY_CODE_MYR         IsoCurrencyCode = 102
	IsoCurrencyCode_ISO_CURRENCY_CODE_MZM         IsoCurrencyCode = 103
	IsoCurrencyCode_ISO_CURRENCY_CODE_NAD         IsoCurrencyCode = 104
	IsoCurrencyCode_ISO_CURRENCY_CODE_NGN         IsoCurrencyCode = 105
	IsoCurrencyCode_ISO_CURRENCY_CODE_NIO         IsoCurrencyCode = 106
	IsoCurrencyCode_ISO_CURRENCY_CODE_NOK         IsoCurrencyCode = 107
	IsoCurrencyCode_ISO_CURRENCY_CODE_NPR         IsoCurrencyCode = 108
	IsoCurrencyCode_ISO_CURRENCY_CODE_NZD         IsoCurrencyCode = 109
	IsoCurrencyCode_ISO_CURRENCY_CODE_OMR         IsoCurrencyCode = 110
	IsoCurrencyCode_ISO_CURRENCY_CODE_PAB         IsoCurrencyCode = 111
	IsoCurrencyCode_ISO_CURRENCY_CODE_PEN         IsoCurrencyCode = 112
	IsoCurrencyCode_ISO_CURRENCY_CODE_PGK         IsoCurrencyCode = 113
	IsoCurrencyCode_ISO_CURRENCY_CODE_PHP         IsoCurrencyCode = 114
	IsoCurrencyCode_ISO_CURRENCY_CODE_PKR         IsoCurrencyCode = 115
	IsoCurrencyCode_ISO_CURRENCY_CODE_PLN         IsoCurrencyCode = 116
	IsoCurrencyCode_ISO_CURRENCY_CODE_PYG         IsoCurrencyCode = 117
	IsoCurrencyCode_ISO_CURRENCY_CODE_QAR         IsoCurrencyCode = 118
	IsoCurrencyCode_ISO_CURRENCY_CODE_RON         IsoCurrencyCode = 119
	IsoCurrencyCode_ISO_CURRENCY_CODE_RSD         IsoCurrencyCode = 120
	IsoCurrencyCode_ISO_CURRENCY_CODE_RUB         IsoCurrencyCode = 121
	IsoCurrencyCode_ISO_CURRENCY_CODE_RWF         IsoCurrencyCode = 122
	IsoCurrencyCode_ISO_CURRENCY_CODE_SAR         IsoCurrencyCode = 123
	IsoCurrencyCode_ISO_CURRENCY_CODE_SBD         IsoCurrencyCode = 124
	IsoCurrencyCode_ISO_CURRENCY_CODE_SCR         IsoCurrencyCode = 125
	IsoCurrencyCode_ISO_CURRENCY_CODE_SDG         IsoCurrencyCode = 126
	IsoCurrencyCode_ISO_CURRENCY_CODE_SEK         IsoCurrencyCode = 127
	IsoCurrencyCode_ISO_CURRENCY_CODE_SGD         IsoCurrencyCode = 128
	IsoCurrencyCode_ISO_CURRENCY_CODE_SHP         IsoCurrencyCode = 129
	IsoCurrencyCode_ISO_CURRENCY_CODE_SLL         IsoCurrencyCode = 130
	IsoCurrencyCode_ISO_CURRENCY_CODE_SOS         IsoCurrencyCode = 131
	IsoCurrencyCode_ISO_CURRENCY_CODE_SRD         IsoCurrencyCode = 132
	IsoCurrencyCode_ISO_CURRENCY_CODE_STD         IsoCurrencyCode = 133
	IsoCurrencyCode_ISO_CURRENCY_CODE_SVC         IsoCurrencyCode = 134
	IsoCurrencyCode_ISO_CURRENCY_CODE_SYP         IsoCurrencyCode = 135
	IsoCurrencyCode_ISO_CURRENCY_CODE_SZL         IsoCurrencyCode = 136
	IsoCurrencyCode_ISO_CURRENCY_CODE_THB         IsoCurrencyCode = 137
	IsoCurrencyCode_ISO_CURRENCY_CODE_TJS         IsoCurrencyCode = 138
	IsoCurrencyCode_ISO_CURRENCY_CODE_TMT         IsoCurrencyCode = 139
	IsoCurrencyCode_ISO_CURRENCY_CODE_TND         IsoCurrencyCode = 140
	IsoCurrencyCode_ISO_CURRENCY_CODE_TOP         IsoCurrencyCode = 141
	IsoCurrencyCode_ISO_CURRENCY_CODE_TRY         IsoCurrencyCode = 142
	IsoCurrencyCode_ISO_CURRENCY_CODE_TTD         IsoCurrencyCode = 143
	IsoCurrencyCode_ISO_CURRENCY_CODE_TWD         IsoCurrencyCode = 144
	IsoCurrencyCode_ISO_CURRENCY_CODE_TZS         IsoCurrencyCode = 145
	IsoCurrencyCode_ISO_CURRENCY_CODE_UAH         IsoCurrencyCode = 146
	IsoCurrencyCode_ISO_CURRENCY_CODE_UGX         IsoCurrencyCode = 147
	IsoCurrencyCode_ISO_CURRENCY_CODE_USD         IsoCurrencyCode = 148
	IsoCurrencyCode_ISO_CURRENCY_CODE_UYI         IsoCurrencyCode = 149
	IsoCurrencyCode_ISO_CURRENCY_CODE_UYU         IsoCurrencyCode = 150
	IsoCurrencyCode_ISO_CURRENCY_CODE_UZS         IsoCurrencyCode = 151
	IsoCurrencyCode_ISO_CURRENCY_CODE_VEF         IsoCurrencyCode = 152
	IsoCurrencyCode_ISO_CURRENCY_CODE_VND         IsoCurrencyCode = 153
	IsoCurrencyCode_ISO_CURRENCY_CODE_VUV         IsoCurrencyCode = 154
	IsoCurrencyCode_ISO_CURRENCY_CODE_WST         IsoCurrencyCode = 155
	IsoCurrencyCode_ISO_CURRENCY_CODE_XAF         IsoCurrencyCode = 156
	IsoCurrencyCode_ISO_CURRENCY_CODE_XCD         IsoCurrencyCode = 157
	IsoCurrencyCode_ISO_CURRENCY_CODE_XOF         IsoCurrencyCode = 158
	IsoCurrencyCode_ISO_CURRENCY_CODE_XPF         IsoCurrencyCode = 159
	IsoCurrencyCode_ISO_CURRENCY_CODE_YER         IsoCurrencyCode = 160
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZAR         IsoCurrencyCode = 161
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZMK         IsoCurrencyCode = 162
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZWL         IsoCurrencyCode = 163
	IsoCurrencyCode_ISO_CURRENCY_CODE_MRU         IsoCurrencyCode = 164
	IsoCurrencyCode_ISO_CURRENCY_CODE_MZN         IsoCurrencyCode = 165
	IsoCurrencyCode_ISO_CURRENCY_CODE_SSP         IsoCurrencyCode = 166
	IsoCurrencyCode_ISO_CURRENCY_CODE_STN         IsoCurrencyCode = 167
	IsoCurrencyCode_ISO_CURRENCY_CODE_VES         IsoCurrencyCode = 168
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZMW         IsoCurrencyCode = 169
)

// Enum value maps for IsoCurrencyCode.
var (
	IsoCurrencyCode_name = map[int32]string{
		0:   "ISO_CURRENCY_CODE_UNSPECIFIED",
		1:   "ISO_CURRENCY_CODE_AED",
		2:   "ISO_CURRENCY_CODE_AFN",
		3:   "ISO_CURRENCY_CODE_ALL",
		4:   "ISO_CURRENCY_CODE_AMD",
		5:   "ISO_CURRENCY_CODE_ANG",
		6:   "ISO_CURRENCY_CODE_AOA",
		7:   "ISO_CURRENCY_CODE_ARS",
		8:   "ISO_CURRENCY_CODE_AUD",
		9:   "ISO_CURRENCY_CODE_AWG",
		10:  "ISO_CURRENCY_CODE_AZN",
		11:  "ISO_CURRENCY_CODE_BAM",
		12:  "ISO_CURRENCY_CODE_BBD",
		13:  "ISO_CURRENCY_CODE_BDT",
		14:  "ISO_CURRENCY_CODE_BGN",
		15:  "ISO_CURRENCY_CODE_BHD",
		16:  "ISO_CURRENCY_CODE_BIF",
		17:  "ISO_CURRENCY_CODE_BMD",
		18:  "ISO_CURRENCY_CODE_BND",
		19:  "ISO_CURRENCY_CODE_BOB",
		20:  "ISO_CURRENCY_CODE_BOV",
		21:  "ISO_CURRENCY_CODE_BRL",
		22:  "ISO_CURRENCY_CODE_BSD",
		23:  "ISO_CURRENCY_CODE_BTN",
		24:  "ISO_CURRENCY_CODE_BWP",
		25:  "ISO_CURRENCY_CODE_BYR",
		26:  "ISO_CURRENCY_CODE_BZD",
		27:  "ISO_CURRENCY_CODE_CAD",
		28:  "ISO_CURRENCY_CODE_CDF",
		29:  "ISO_CURRENCY_CODE_CHF",
		30:  "ISO_CURRENCY_CODE_CLF",
		31:  "ISO_CURRENCY_CODE_CLP",
		32:  "ISO_CURRENCY_CODE_CNY",
		33:  "ISO_CURRENCY_CODE_COP",
		34:  "ISO_CURRENCY_CODE_COU",
		35:  "ISO_CURRENCY_CODE_CRC",
		36:  "ISO_CURRENCY_CODE_CUC",
		37:  "ISO_CURRENCY_CODE_CUP",
		38:  "ISO_CURRENCY_CODE_CVE",
		39:  "ISO_CURRENCY_CODE_CZK",
		40:  "ISO_CURRENCY_CODE_DJF",
		41:  "ISO_CURRENCY_CODE_DKK",
		42:  "ISO_CURRENCY_CODE_DOP",
		43:  "ISO_CURRENCY_CODE_DZD",
		44:  "ISO_CURRENCY_CODE_EGP",
		45:  "ISO_CURRENCY_CODE_ERN",
		46:  "ISO_CURRENCY_CODE_ETB",
		47:  "ISO_CURRENCY_CODE_EUR",
		48:  "ISO_CURRENCY_CODE_FJD",
		49:  "ISO_CURRENCY_CODE_FKP",
		50:  "ISO_CURRENCY_CODE_GBP",
		51:  "ISO_CURRENCY_CODE_GEL",
		52:  "ISO_CURRENCY_CODE_GHS",
		53:  "ISO_CURRENCY_CODE_GIP",
		54:  "ISO_CURRENCY_CODE_GMD",
		55:  "ISO_CURRENCY_CODE_GNF",
		56:  "ISO_CURRENCY_CODE_GTQ",
		57:  "ISO_CURRENCY_CODE_GYD",
		58:  "ISO_CURRENCY_CODE_HKD",
		59:  "ISO_CURRENCY_CODE_HNL",
		60:  "ISO_CURRENCY_CODE_HRK",
		61:  "ISO_CURRENCY_CODE_HTG",
		62:  "ISO_CURRENCY_CODE_HUF",
		63:  "ISO_CURRENCY_CODE_IDR",
		64:  "ISO_CURRENCY_CODE_ILS",
		65:  "ISO_CURRENCY_CODE_INR",
		66:  "ISO_CURRENCY_CODE_IQD",
		67:  "ISO_CURRENCY_CODE_IRR",
		68:  "ISO_CURRENCY_CODE_ISK",
		69:  "ISO_CURRENCY_CODE_JMD",
		70:  "ISO_CURRENCY_CODE_JOD",
		71:  "ISO_CURRENCY_CODE_JPY",
		72:  "ISO_CURRENCY_CODE_KES",
		73:  "ISO_CURRENCY_CODE_KGS",
		74:  "ISO_CURRENCY_CODE_KHR",
		75:  "ISO_CURRENCY_CODE_KMF",
		76:  "ISO_CURRENCY_CODE_KPW",
		77:  "ISO_CURRENCY_CODE_KRW",
		78:  "ISO_CURRENCY_CODE_KWD",
		79:  "ISO_CURRENCY_CODE_KYD",
		80:  "ISO_CURRENCY_CODE_KZT",
		81:  "ISO_CURRENCY_CODE_LAK",
		82:  "ISO_CURRENCY_CODE_LBP",
		83:  "ISO_CURRENCY_CODE_LKR",
		84:  "ISO_CURRENCY_CODE_LRD",
		85:  "ISO_CURRENCY_CODE_LSL",
		86:  "ISO_CURRENCY_CODE_LTL",
		87:  "ISO_CURRENCY_CODE_LVL",
		88:  "ISO_CURRENCY_CODE_LYD",
		89:  "ISO_CURRENCY_CODE_MAD",
		90:  "ISO_CURRENCY_CODE_MDL",
		91:  "ISO_CURRENCY_CODE_MGA",
		92:  "ISO_CURRENCY_CODE_MKD",
		93:  "ISO_CURRENCY_CODE_MMK",
		94:  "ISO_CURRENCY_CODE_MNT",
		95:  "ISO_CURRENCY_CODE_MOP",
		96:  "ISO_CURRENCY_CODE_MRO",
		97:  "ISO_CURRENCY_CODE_MUR",
		98:  "ISO_CURRENCY_CODE_MVR",
		99:  "ISO_CURRENCY_CODE_MWK",
		100: "ISO_CURRENCY_CODE_MXN",
		101: "ISO_CURRENCY_CODE_MXV",
		102: "ISO_CURRENCY_CODE_MYR",
		103: "ISO_CURRENCY_CODE_MZM",
		104: "ISO_CURRENCY_CODE_NAD",
		105: "ISO_CURRENCY_CODE_NGN",
		106: "ISO_CURRENCY_CODE_NIO",
		107: "ISO_CURRENCY_CODE_NOK",
		108: "ISO_CURRENCY_CODE_NPR",
		109: "ISO_CURRENCY_CODE_NZD",
		110: "ISO_CURRENCY_CODE_OMR",
		111: "ISO_CURRENCY_CODE_PAB",
		112: "ISO_CURRENCY_CODE_PEN",
		113: "ISO_CURRENCY_CODE_PGK",
		114: "ISO_CURRENCY_CODE_PHP",
		115: "ISO_CURRENCY_CODE_PKR",
		116: "ISO_CURRENCY_CODE_PLN",
		117: "ISO_CURRENCY_CODE_PYG",
		118: "ISO_CURRENCY_CODE_QAR",
		119: "ISO_CURRENCY_CODE_RON",
		120: "ISO_CURRENCY_CODE_RSD",
		121: "ISO_CURRENCY_CODE_RUB",
		122: "ISO_CURRENCY_CODE_RWF",
		123: "ISO_CURRENCY_CODE_SAR",
		124: "ISO_CURRENCY_CODE_SBD",
		125: "ISO_CURRENCY_CODE_SCR",
		126: "ISO_CURRENCY_CODE_SDG",
		127: "ISO_CURRENCY_CODE_SEK",
		128: "ISO_CURRENCY_CODE_SGD",
		129: "ISO_CURRENCY_CODE_SHP",
		130: "ISO_CURRENCY_CODE_SLL",
		131: "ISO_CURRENCY_CODE_SOS",
		132: "ISO_CURRENCY_CODE_SRD",
		133: "ISO_CURRENCY_CODE_STD",
		134: "ISO_CURRENCY_CODE_SVC",
		135: "ISO_CURRENCY_CODE_SYP",
		136: "ISO_CURRENCY_CODE_SZL",
		137: "ISO_CURRENCY_CODE_THB",
		138: "ISO_CURRENCY_CODE_TJS",
		139: "ISO_CURRENCY_CODE_TMT",
		140: "ISO_CURRENCY_CODE_TND",
		141: "ISO_CURRENCY_CODE_TOP",
		142: "ISO_CURRENCY_CODE_TRY",
		143: "ISO_CURRENCY_CODE_TTD",
		144: "ISO_CURRENCY_CODE_TWD",
		145: "ISO_CURRENCY_CODE_TZS",
		146: "ISO_CURRENCY_CODE_UAH",
		147: "ISO_CURRENCY_CODE_UGX",
		148: "ISO_CURRENCY_CODE_USD",
		149: "ISO_CURRENCY_CODE_UYI",
		150: "ISO_CURRENCY_CODE_UYU",
		151: "ISO_CURRENCY_CODE_UZS",
		152: "ISO_CURRENCY_CODE_VEF",
		153: "ISO_CURRENCY_CODE_VND",
		154: "ISO_CURRENCY_CODE_VUV",
		155: "ISO_CURRENCY_CODE_WST",
		156: "ISO_CURRENCY_CODE_XAF",
		157: "ISO_CURRENCY_CODE_XCD",
		158: "ISO_CURRENCY_CODE_XOF",
		159: "ISO_CURRENCY_CODE_XPF",
		160: "ISO_CURRENCY_CODE_YER",
		161: "ISO_CURRENCY_CODE_ZAR",
		162: "ISO_CURRENCY_CODE_ZMK",
		163: "ISO_CURRENCY_CODE_ZWL",
		164: "ISO_CURRENCY_CODE_MRU",
		165: "ISO_CURRENCY_CODE_MZN",
		166: "ISO_CURRENCY_CODE_SSP",
		167: "ISO_CURRENCY_CODE_STN",
		168: "ISO_CURRENCY_CODE_VES",
		169: "ISO_CURRENCY_CODE_ZMW",
	}
	IsoCurrencyCode_value = map[string]int32{
		"ISO_CURRENCY_CODE_UNSPECIFIED": 0,
		"ISO_CURRENCY_CODE_AED":         1,
		"ISO_CURRENCY_CODE_AFN":         2,
		"ISO_CURRENCY_CODE_ALL":         3,
		"ISO_CURRENCY_CODE_AMD":         4,
		"ISO_CURRENCY_CODE_ANG":         5,
		"ISO_CURRENCY_CODE_AOA":         6,
		"ISO_CURRENCY_CODE_ARS":         7,
		"ISO_CURRENCY_CODE_AUD":         8,
		"ISO_CURRENCY_CODE_AWG":         9,
		"ISO_CURRENCY_CODE_AZN":         10,
		"ISO_CURRENCY_CODE_BAM":         11,
		"ISO_CURRENCY_CODE_BBD":         12,
		"ISO_CURRENCY_CODE_BDT":         13,
		"ISO_CURRENCY_CODE_BGN":         14,
		"ISO_CURRENCY_CODE_BHD":         15,
		"ISO_CURRENCY_CODE_BIF":         16,
		"ISO_CURRENCY_CODE_BMD":         17,
		"ISO_CURRENCY_CODE_BND":         18,
		"ISO_CURRENCY_CODE_BOB":         19,
		"ISO_CURRENCY_CODE_BOV":         20,
		"ISO_CURRENCY_CODE_BRL":         21,
		"ISO_CURRENCY_CODE_BSD":         22,
		"ISO_CURRENCY_CODE_BTN":         23,
		"ISO_CURRENCY_CODE_BWP":         24,
		"ISO_CURRENCY_CODE_BYR":         25,
		"ISO_CURRENCY_CODE_BZD":         26,
		"ISO_CURRENCY_CODE_CAD":         27,
		"ISO_CURRENCY_CODE_CDF":         28,
		"ISO_CURRENCY_CODE_CHF":         29,
		"ISO_CURRENCY_CODE_CLF":         30,
		"ISO_CURRENCY_CODE_CLP":         31,
		"ISO_CURRENCY_CODE_CNY":         32,
		"ISO_CURRENCY_CODE_COP":         33,
		"ISO_CURRENCY_CODE_COU":         34,
		"ISO_CURRENCY_CODE_CRC":         35,
		"ISO_CURRENCY_CODE_CUC":         36,
		"ISO_CURRENCY_CODE_CUP":         37,
		"ISO_CURRENCY_CODE_CVE":         38,
		"ISO_CURRENCY_CODE_CZK":         39,
		"ISO_CURRENCY_CODE_DJF":         40,
		"ISO_CURRENCY_CODE_DKK":         41,
		"ISO_CURRENCY_CODE_DOP":         42,
		"ISO_CURRENCY_CODE_DZD":         43,
		"ISO_CURRENCY_CODE_EGP":         44,
		"ISO_CURRENCY_CODE_ERN":         45,
		"ISO_CURRENCY_CODE_ETB":         46,
		"ISO_CURRENCY_CODE_EUR":         47,
		"ISO_CURRENCY_CODE_FJD":         48,
		"ISO_CURRENCY_CODE_FKP":         49,
		"ISO_CURRENCY_CODE_GBP":         50,
		"ISO_CURRENCY_CODE_GEL":         51,
		"ISO_CURRENCY_CODE_GHS":         52,
		"ISO_CURRENCY_CODE_GIP":         53,
		"ISO_CURRENCY_CODE_GMD":         54,
		"ISO_CURRENCY_CODE_GNF":         55,
		"ISO_CURRENCY_CODE_GTQ":         56,
		"ISO_CURRENCY_CODE_GYD":         57,
		"ISO_CURRENCY_CODE_HKD":         58,
		"ISO_CURRENCY_CODE_HNL":         59,
		"ISO_CURRENCY_CODE_HRK":         60,
		"ISO_CURRENCY_CODE_HTG":         61,
		"ISO_CURRENCY_CODE_HUF":         62,
		"ISO_CURRENCY_CODE_IDR":         63,
		"ISO_CURRENCY_CODE_ILS":         64,
		"ISO_CURRENCY_CODE_INR":         65,
		"ISO_CURRENCY_CODE_IQD":         66,
		"ISO_CURRENCY_CODE_IRR":         67,
		"ISO_CURRENCY_CODE_ISK":         68,
		"ISO_CURRENCY_CODE_JMD":         69,
		"ISO_CURRENCY_CODE_JOD":         70,
		"ISO_CURRENCY_CODE_JPY":         71,
		"ISO_CURRENCY_CODE_KES":         72,
		"ISO_CURRENCY_CODE_KGS":         73,
		"ISO_CURRENCY_CODE_KHR":         74,
		"ISO_CURRENCY_CODE_KMF":         75,
		"ISO_CURRENCY_CODE_KPW":         76,
		"ISO_CURRENCY_CODE_KRW":         77,
		"ISO_CURRENCY_CODE_KWD":         78,
		"ISO_CURRENCY_CODE_KYD":         79,
		"ISO_CURRENCY_CODE_KZT":         80,
		"ISO_CURRENCY_CODE_LAK":         81,
		"ISO_CURRENCY_CODE_LBP":         82,
		"ISO_CURRENCY_CODE_LKR":         83,
		"ISO_CURRENCY_CODE_LRD":         84,
		"ISO_CURRENCY_CODE_LSL":         85,
		"ISO_CURRENCY_CODE_LTL":         86,
		"ISO_CURRENCY_CODE_LVL":         87,
		"ISO_CURRENCY_CODE_LYD":         88,
		"ISO_CURRENCY_CODE_MAD":         89,
		"ISO_CURRENCY_CODE_MDL":         90,
		"ISO_CURRENCY_CODE_MGA":         91,
		"ISO_CURRENCY_CODE_MKD":         92,
		"ISO_CURRENCY_CODE_MMK":         93,
		"ISO_CURRENCY_CODE_MNT":         94,
		"ISO_CURRENCY_CODE_MOP":         95,
		"ISO_CURRENCY_CODE_MRO":         96,
		"ISO_CURRENCY_CODE_MUR":         97,
		"ISO_CURRENCY_CODE_MVR":         98,
		"ISO_CURRENCY_CODE_MWK":         99,
		"ISO_CURRENCY_CODE_MXN":         100,
		"ISO_CURRENCY_CODE_MXV":         101,
		"ISO_CURRENCY_CODE_MYR":         102,
		"ISO_CURRENCY_CODE_MZM":         103,
		"ISO_CURRENCY_CODE_NAD":         104,
		"ISO_CURRENCY_CODE_NGN":         105,
		"ISO_CURRENCY_CODE_NIO":         106,
		"ISO_CURRENCY_CODE_NOK":         107,
		"ISO_CURRENCY_CODE_NPR":         108,
		"ISO_CURRENCY_CODE_NZD":         109,
		"ISO_CURRENCY_CODE_OMR":         110,
		"ISO_CURRENCY_CODE_PAB":         111,
		"ISO_CURRENCY_CODE_PEN":         112,
		"ISO_CURRENCY_CODE_PGK":         113,
		"ISO_CURRENCY_CODE_PHP":         114,
		"ISO_CURRENCY_CODE_PKR":         115,
		"ISO_CURRENCY_CODE_PLN":         116,
		"ISO_CURRENCY_CODE_PYG":         117,
		"ISO_CURRENCY_CODE_QAR":         118,
		"ISO_CURRENCY_CODE_RON":         119,
		"ISO_CURRENCY_CODE_RSD":         120,
		"ISO_CURRENCY_CODE_RUB":         121,
		"ISO_CURRENCY_CODE_RWF":         122,
		"ISO_CURRENCY_CODE_SAR":         123,
		"ISO_CURRENCY_CODE_SBD":         124,
		"ISO_CURRENCY_CODE_SCR":         125,
		"ISO_CURRENCY_CODE_SDG":         126,
		"ISO_CURRENCY_CODE_SEK":         127,
		"ISO_CURRENCY_CODE_SGD":         128,
		"ISO_CURRENCY_CODE_SHP":         129,
		"ISO_CURRENCY_CODE_SLL":         130,
		"ISO_CURRENCY_CODE_SOS":         131,
		"ISO_CURRENCY_CODE_SRD":         132,
		"ISO_CURRENCY_CODE_STD":         133,
		"ISO_CURRENCY_CODE_SVC":         134,
		"ISO_CURRENCY_CODE_SYP":         135,
		"ISO_CURRENCY_CODE_SZL":         136,
		"ISO_CURRENCY_CODE_THB":         137,
		"ISO_CURRENCY_CODE_TJS":         138,
		"ISO_CURRENCY_CODE_TMT":         139,
		"ISO_CURRENCY_CODE_TND":         140,
		"ISO_CURRENCY_CODE_TOP":         141,
		"ISO_CURRENCY_CODE_TRY":         142,
		"ISO_CURRENCY_CODE_TTD":         143,
		"ISO_CURRENCY_CODE_TWD":         144,
		"ISO_CURRENCY_CODE_TZS":         145,
		"ISO_CURRENCY_CODE_UAH":         146,
		"ISO_CURRENCY_CODE_UGX":         147,
		"ISO_CURRENCY_CODE_USD":         148,
		"ISO_CURRENCY_CODE_UYI":         149,
		"ISO_CURRENCY_CODE_UYU":         150,
		"ISO_CURRENCY_CODE_UZS":         151,
		"ISO_CURRENCY_CODE_VEF":         152,
		"ISO_CURRENCY_CODE_VND":         153,
		"ISO_CURRENCY_CODE_VUV":         154,
		"ISO_CURRENCY_CODE_WST":         155,
		"ISO_CURRENCY_CODE_XAF":         156,
		"ISO_CURRENCY_CODE_XCD":         157,
		"ISO_CURRENCY_CODE_XOF":         158,
		"ISO_CURRENCY_CODE_XPF":         159,
		"ISO_CURRENCY_CODE_YER":         160,
		"ISO_CURRENCY_CODE_ZAR":         161,
		"ISO_CURRENCY_CODE_ZMK":         162,
		"ISO_CURRENCY_CODE_ZWL":         163,
		"ISO_CURRENCY_CODE_MRU":         164,
		"ISO_CURRENCY_CODE_MZN":         165,
		"ISO_CURRENCY_CODE_SSP":         166,
		"ISO_CURRENCY_CODE_STN":         167,
		"ISO_CURRENCY_CODE_VES":         168,
		"ISO_CURRENCY_CODE_ZMW":         169,
	}
)

func (x IsoCurrencyCode) Enum() *IsoCurrencyCode {
	p := new(IsoCurrencyCode)
	*p = x
	return p
}

func (x IsoCurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoCurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[51].Descriptor()
}

func (IsoCurrencyCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[51]
}

func (x IsoCurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoCurrencyCode.Descriptor instead.
func (IsoCurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{51}
}

type IsoLanguageCode int32

const (
	IsoLanguageCode_ISO_LANGUAGE_CODE_UNSPECIFIED IsoLanguageCode = 0
	IsoLanguageCode_ISO_LANGUAGE_CODE_RAJ         IsoLanguageCode = 1
	IsoLanguageCode_ISO_LANGUAGE_CODE_BHO         IsoLanguageCode = 2
	IsoLanguageCode_ISO_LANGUAGE_CODE_AA          IsoLanguageCode = 3
	IsoLanguageCode_ISO_LANGUAGE_CODE_AB          IsoLanguageCode = 4
	IsoLanguageCode_ISO_LANGUAGE_CODE_AE          IsoLanguageCode = 5
	IsoLanguageCode_ISO_LANGUAGE_CODE_AF          IsoLanguageCode = 6
	IsoLanguageCode_ISO_LANGUAGE_CODE_AK          IsoLanguageCode = 7
	IsoLanguageCode_ISO_LANGUAGE_CODE_AM          IsoLanguageCode = 8
	IsoLanguageCode_ISO_LANGUAGE_CODE_AN          IsoLanguageCode = 9
	IsoLanguageCode_ISO_LANGUAGE_CODE_AR          IsoLanguageCode = 10
	IsoLanguageCode_ISO_LANGUAGE_CODE_AS          IsoLanguageCode = 11
	IsoLanguageCode_ISO_LANGUAGE_CODE_AV          IsoLanguageCode = 12
	IsoLanguageCode_ISO_LANGUAGE_CODE_AY          IsoLanguageCode = 13
	IsoLanguageCode_ISO_LANGUAGE_CODE_AZ          IsoLanguageCode = 14
	IsoLanguageCode_ISO_LANGUAGE_CODE_BA          IsoLanguageCode = 15
	IsoLanguageCode_ISO_LANGUAGE_CODE_BE          IsoLanguageCode = 16
	IsoLanguageCode_ISO_LANGUAGE_CODE_BG          IsoLanguageCode = 17
	IsoLanguageCode_ISO_LANGUAGE_CODE_BH          IsoLanguageCode = 18
	IsoLanguageCode_ISO_LANGUAGE_CODE_BI          IsoLanguageCode = 19
	IsoLanguageCode_ISO_LANGUAGE_CODE_BM          IsoLanguageCode = 20
	IsoLanguageCode_ISO_LANGUAGE_CODE_BN          IsoLanguageCode = 21
	IsoLanguageCode_ISO_LANGUAGE_CODE_BO          IsoLanguageCode = 22
	IsoLanguageCode_ISO_LANGUAGE_CODE_BR          IsoLanguageCode = 23
	IsoLanguageCode_ISO_LANGUAGE_CODE_BS          IsoLanguageCode = 24
	IsoLanguageCode_ISO_LANGUAGE_CODE_CA          IsoLanguageCode = 25
	IsoLanguageCode_ISO_LANGUAGE_CODE_CE          IsoLanguageCode = 26
	IsoLanguageCode_ISO_LANGUAGE_CODE_CH          IsoLanguageCode = 27
	IsoLanguageCode_ISO_LANGUAGE_CODE_CO          IsoLanguageCode = 28
	IsoLanguageCode_ISO_LANGUAGE_CODE_CR          IsoLanguageCode = 29
	IsoLanguageCode_ISO_LANGUAGE_CODE_CS          IsoLanguageCode = 30
	IsoLanguageCode_ISO_LANGUAGE_CODE_CU          IsoLanguageCode = 31
	IsoLanguageCode_ISO_LANGUAGE_CODE_CV          IsoLanguageCode = 32
	IsoLanguageCode_ISO_LANGUAGE_CODE_CY          IsoLanguageCode = 33
	IsoLanguageCode_ISO_LANGUAGE_CODE_DA          IsoLanguageCode = 34
	IsoLanguageCode_ISO_LANGUAGE_CODE_DE          IsoLanguageCode = 35
	IsoLanguageCode_ISO_LANGUAGE_CODE_DV          IsoLanguageCode = 36
	IsoLanguageCode_ISO_LANGUAGE_CODE_DZ          IsoLanguageCode = 37
	IsoLanguageCode_ISO_LANGUAGE_CODE_EE          IsoLanguageCode = 38
	IsoLanguageCode_ISO_LANGUAGE_CODE_EL          IsoLanguageCode = 39
	IsoLanguageCode_ISO_LANGUAGE_CODE_EN          IsoLanguageCode = 40
	IsoLanguageCode_ISO_LANGUAGE_CODE_EO          IsoLanguageCode = 41
	IsoLanguageCode_ISO_LANGUAGE_CODE_ES          IsoLanguageCode = 42
	IsoLanguageCode_ISO_LANGUAGE_CODE_ET          IsoLanguageCode = 43
	IsoLanguageCode_ISO_LANGUAGE_CODE_EU          IsoLanguageCode = 44
	IsoLanguageCode_ISO_LANGUAGE_CODE_FA          IsoLanguageCode = 45
	IsoLanguageCode_ISO_LANGUAGE_CODE_FF          IsoLanguageCode = 46
	IsoLanguageCode_ISO_LANGUAGE_CODE_FI          IsoLanguageCode = 47
	IsoLanguageCode_ISO_LANGUAGE_CODE_FJ          IsoLanguageCode = 48
	IsoLanguageCode_ISO_LANGUAGE_CODE_FO          IsoLanguageCode = 49
	IsoLanguageCode_ISO_LANGUAGE_CODE_FR          IsoLanguageCode = 50
	IsoLanguageCode_ISO_LANGUAGE_CODE_FY          IsoLanguageCode = 51
	IsoLanguageCode_ISO_LANGUAGE_CODE_GA          IsoLanguageCode = 52
	IsoLanguageCode_ISO_LANGUAGE_CODE_GD          IsoLanguageCode = 53
	IsoLanguageCode_ISO_LANGUAGE_CODE_GL          IsoLanguageCode = 54
	IsoLanguageCode_ISO_LANGUAGE_CODE_GN          IsoLanguageCode = 55
	IsoLanguageCode_ISO_LANGUAGE_CODE_GU          IsoLanguageCode = 56
	IsoLanguageCode_ISO_LANGUAGE_CODE_GV          IsoLanguageCode = 57
	IsoLanguageCode_ISO_LANGUAGE_CODE_HA          IsoLanguageCode = 58
	IsoLanguageCode_ISO_LANGUAGE_CODE_HE          IsoLanguageCode = 59
	IsoLanguageCode_ISO_LANGUAGE_CODE_HI          IsoLanguageCode = 60
	IsoLanguageCode_ISO_LANGUAGE_CODE_HO          IsoLanguageCode = 61
	IsoLanguageCode_ISO_LANGUAGE_CODE_HR          IsoLanguageCode = 62
	IsoLanguageCode_ISO_LANGUAGE_CODE_HT          IsoLanguageCode = 63
	IsoLanguageCode_ISO_LANGUAGE_CODE_HU          IsoLanguageCode = 64
	IsoLanguageCode_ISO_LANGUAGE_CODE_HY          IsoLanguageCode = 65
	IsoLanguageCode_ISO_LANGUAGE_CODE_HZ          IsoLanguageCode = 66
	IsoLanguageCode_ISO_LANGUAGE_CODE_IA          IsoLanguageCode = 67
	IsoLanguageCode_ISO_LANGUAGE_CODE_ID          IsoLanguageCode = 68
	IsoLanguageCode_ISO_LANGUAGE_CODE_IE          IsoLanguageCode = 69
	IsoLanguageCode_ISO_LANGUAGE_CODE_IG          IsoLanguageCode = 70
	IsoLanguageCode_ISO_LANGUAGE_CODE_II          IsoLanguageCode = 71
	IsoLanguageCode_ISO_LANGUAGE_CODE_IK          IsoLanguageCode = 72
	IsoLanguageCode_ISO_LANGUAGE_CODE_IO          IsoLanguageCode = 73
	IsoLanguageCode_ISO_LANGUAGE_CODE_IS          IsoLanguageCode = 74
	IsoLanguageCode_ISO_LANGUAGE_CODE_IT          IsoLanguageCode = 75
	IsoLanguageCode_ISO_LANGUAGE_CODE_IU          IsoLanguageCode = 76
	IsoLanguageCode_ISO_LANGUAGE_CODE_JA          IsoLanguageCode = 77
	IsoLanguageCode_ISO_LANGUAGE_CODE_JV          IsoLanguageCode = 78
	IsoLanguageCode_ISO_LANGUAGE_CODE_KA          IsoLanguageCode = 79
	IsoLanguageCode_ISO_LANGUAGE_CODE_KG          IsoLanguageCode = 80
	IsoLanguageCode_ISO_LANGUAGE_CODE_KI          IsoLanguageCode = 81
	IsoLanguageCode_ISO_LANGUAGE_CODE_KJ          IsoLanguageCode = 82
	IsoLanguageCode_ISO_LANGUAGE_CODE_KK          IsoLanguageCode = 83
	IsoLanguageCode_ISO_LANGUAGE_CODE_KL          IsoLanguageCode = 84
	IsoLanguageCode_ISO_LANGUAGE_CODE_KM          IsoLanguageCode = 85
	IsoLanguageCode_ISO_LANGUAGE_CODE_KN          IsoLanguageCode = 86
	IsoLanguageCode_ISO_LANGUAGE_CODE_KO          IsoLanguageCode = 87
	IsoLanguageCode_ISO_LANGUAGE_CODE_KR          IsoLanguageCode = 88
	IsoLanguageCode_ISO_LANGUAGE_CODE_KS          IsoLanguageCode = 89
	IsoLanguageCode_ISO_LANGUAGE_CODE_KU          IsoLanguageCode = 90
	IsoLanguageCode_ISO_LANGUAGE_CODE_KV          IsoLanguageCode = 91
	IsoLanguageCode_ISO_LANGUAGE_CODE_KW          IsoLanguageCode = 92
	IsoLanguageCode_ISO_LANGUAGE_CODE_KY          IsoLanguageCode = 93
	IsoLanguageCode_ISO_LANGUAGE_CODE_LA          IsoLanguageCode = 94
	IsoLanguageCode_ISO_LANGUAGE_CODE_LB          IsoLanguageCode = 95
	IsoLanguageCode_ISO_LANGUAGE_CODE_LG          IsoLanguageCode = 96
	IsoLanguageCode_ISO_LANGUAGE_CODE_LI          IsoLanguageCode = 97
	IsoLanguageCode_ISO_LANGUAGE_CODE_LN          IsoLanguageCode = 98
	IsoLanguageCode_ISO_LANGUAGE_CODE_LO          IsoLanguageCode = 99
	IsoLanguageCode_ISO_LANGUAGE_CODE_LT          IsoLanguageCode = 100
	IsoLanguageCode_ISO_LANGUAGE_CODE_LU          IsoLanguageCode = 101
	IsoLanguageCode_ISO_LANGUAGE_CODE_LV          IsoLanguageCode = 102
	IsoLanguageCode_ISO_LANGUAGE_CODE_MG          IsoLanguageCode = 103
	IsoLanguageCode_ISO_LANGUAGE_CODE_MH          IsoLanguageCode = 104
	IsoLanguageCode_ISO_LANGUAGE_CODE_MI          IsoLanguageCode = 105
	IsoLanguageCode_ISO_LANGUAGE_CODE_MK          IsoLanguageCode = 106
	IsoLanguageCode_ISO_LANGUAGE_CODE_ML          IsoLanguageCode = 107
	IsoLanguageCode_ISO_LANGUAGE_CODE_MN          IsoLanguageCode = 108
	IsoLanguageCode_ISO_LANGUAGE_CODE_MO          IsoLanguageCode = 109
	IsoLanguageCode_ISO_LANGUAGE_CODE_MR          IsoLanguageCode = 110
	IsoLanguageCode_ISO_LANGUAGE_CODE_MS          IsoLanguageCode = 111
	IsoLanguageCode_ISO_LANGUAGE_CODE_MT          IsoLanguageCode = 112
	IsoLanguageCode_ISO_LANGUAGE_CODE_MY          IsoLanguageCode = 113
	IsoLanguageCode_ISO_LANGUAGE_CODE_NA          IsoLanguageCode = 114
	IsoLanguageCode_ISO_LANGUAGE_CODE_NB          IsoLanguageCode = 115
	IsoLanguageCode_ISO_LANGUAGE_CODE_ND          IsoLanguageCode = 116
	IsoLanguageCode_ISO_LANGUAGE_CODE_NE          IsoLanguageCode = 117
	IsoLanguageCode_ISO_LANGUAGE_CODE_NG          IsoLanguageCode = 118
	IsoLanguageCode_ISO_LANGUAGE_CODE_NL          IsoLanguageCode = 119
	IsoLanguageCode_ISO_LANGUAGE_CODE_NN          IsoLanguageCode = 120
	IsoLanguageCode_ISO_LANGUAGE_CODE_NO          IsoLanguageCode = 121
	IsoLanguageCode_ISO_LANGUAGE_CODE_NR          IsoLanguageCode = 122
	IsoLanguageCode_ISO_LANGUAGE_CODE_NV          IsoLanguageCode = 123
	IsoLanguageCode_ISO_LANGUAGE_CODE_NY          IsoLanguageCode = 124
	IsoLanguageCode_ISO_LANGUAGE_CODE_OC          IsoLanguageCode = 125
	IsoLanguageCode_ISO_LANGUAGE_CODE_OJ          IsoLanguageCode = 126
	IsoLanguageCode_ISO_LANGUAGE_CODE_OM          IsoLanguageCode = 127
	IsoLanguageCode_ISO_LANGUAGE_CODE_OR          IsoLanguageCode = 128
	IsoLanguageCode_ISO_LANGUAGE_CODE_OS          IsoLanguageCode = 129
	IsoLanguageCode_ISO_LANGUAGE_CODE_PA          IsoLanguageCode = 130
	IsoLanguageCode_ISO_LANGUAGE_CODE_PI          IsoLanguageCode = 131
	IsoLanguageCode_ISO_LANGUAGE_CODE_PL          IsoLanguageCode = 132
	IsoLanguageCode_ISO_LANGUAGE_CODE_PS          IsoLanguageCode = 133
	IsoLanguageCode_ISO_LANGUAGE_CODE_PT          IsoLanguageCode = 134
	IsoLanguageCode_ISO_LANGUAGE_CODE_QU          IsoLanguageCode = 135
	IsoLanguageCode_ISO_LANGUAGE_CODE_RM          IsoLanguageCode = 136
	IsoLanguageCode_ISO_LANGUAGE_CODE_RN          IsoLanguageCode = 137
	IsoLanguageCode_ISO_LANGUAGE_CODE_RO          IsoLanguageCode = 138
	IsoLanguageCode_ISO_LANGUAGE_CODE_RU          IsoLanguageCode = 139
	IsoLanguageCode_ISO_LANGUAGE_CODE_RW          IsoLanguageCode = 140
	IsoLanguageCode_ISO_LANGUAGE_CODE_SA          IsoLanguageCode = 141
	IsoLanguageCode_ISO_LANGUAGE_CODE_SC          IsoLanguageCode = 142
	IsoLanguageCode_ISO_LANGUAGE_CODE_SD          IsoLanguageCode = 143
	IsoLanguageCode_ISO_LANGUAGE_CODE_SE          IsoLanguageCode = 144
	IsoLanguageCode_ISO_LANGUAGE_CODE_SG          IsoLanguageCode = 145
	IsoLanguageCode_ISO_LANGUAGE_CODE_SI          IsoLanguageCode = 146
	IsoLanguageCode_ISO_LANGUAGE_CODE_SK          IsoLanguageCode = 147
	IsoLanguageCode_ISO_LANGUAGE_CODE_SL          IsoLanguageCode = 148
	IsoLanguageCode_ISO_LANGUAGE_CODE_SM          IsoLanguageCode = 149
	IsoLanguageCode_ISO_LANGUAGE_CODE_SN          IsoLanguageCode = 150
	IsoLanguageCode_ISO_LANGUAGE_CODE_SO          IsoLanguageCode = 151
	IsoLanguageCode_ISO_LANGUAGE_CODE_SQ          IsoLanguageCode = 152
	IsoLanguageCode_ISO_LANGUAGE_CODE_SR          IsoLanguageCode = 153
	IsoLanguageCode_ISO_LANGUAGE_CODE_SS          IsoLanguageCode = 154
	IsoLanguageCode_ISO_LANGUAGE_CODE_ST          IsoLanguageCode = 155
	IsoLanguageCode_ISO_LANGUAGE_CODE_SU          IsoLanguageCode = 156
	IsoLanguageCode_ISO_LANGUAGE_CODE_SV          IsoLanguageCode = 157
	IsoLanguageCode_ISO_LANGUAGE_CODE_SW          IsoLanguageCode = 158
	IsoLanguageCode_ISO_LANGUAGE_CODE_TA          IsoLanguageCode = 159
	IsoLanguageCode_ISO_LANGUAGE_CODE_TE          IsoLanguageCode = 160
	IsoLanguageCode_ISO_LANGUAGE_CODE_TG          IsoLanguageCode = 161
	IsoLanguageCode_ISO_LANGUAGE_CODE_TH          IsoLanguageCode = 162
	IsoLanguageCode_ISO_LANGUAGE_CODE_TI          IsoLanguageCode = 163
	IsoLanguageCode_ISO_LANGUAGE_CODE_TK          IsoLanguageCode = 164
	IsoLanguageCode_ISO_LANGUAGE_CODE_TL          IsoLanguageCode = 165
	IsoLanguageCode_ISO_LANGUAGE_CODE_TN          IsoLanguageCode = 166
	IsoLanguageCode_ISO_LANGUAGE_CODE_TO          IsoLanguageCode = 167
	IsoLanguageCode_ISO_LANGUAGE_CODE_TR          IsoLanguageCode = 168
	IsoLanguageCode_ISO_LANGUAGE_CODE_TS          IsoLanguageCode = 169
	IsoLanguageCode_ISO_LANGUAGE_CODE_TT          IsoLanguageCode = 170
	IsoLanguageCode_ISO_LANGUAGE_CODE_TW          IsoLanguageCode = 171
	IsoLanguageCode_ISO_LANGUAGE_CODE_TY          IsoLanguageCode = 172
	IsoLanguageCode_ISO_LANGUAGE_CODE_UG          IsoLanguageCode = 173
	IsoLanguageCode_ISO_LANGUAGE_CODE_UK          IsoLanguageCode = 174
	IsoLanguageCode_ISO_LANGUAGE_CODE_UR          IsoLanguageCode = 175
	IsoLanguageCode_ISO_LANGUAGE_CODE_UZ          IsoLanguageCode = 176
	IsoLanguageCode_ISO_LANGUAGE_CODE_VE          IsoLanguageCode = 177
	IsoLanguageCode_ISO_LANGUAGE_CODE_VI          IsoLanguageCode = 178
	IsoLanguageCode_ISO_LANGUAGE_CODE_VO          IsoLanguageCode = 179
	IsoLanguageCode_ISO_LANGUAGE_CODE_WA          IsoLanguageCode = 180
	IsoLanguageCode_ISO_LANGUAGE_CODE_WO          IsoLanguageCode = 181
	IsoLanguageCode_ISO_LANGUAGE_CODE_XH          IsoLanguageCode = 182
	IsoLanguageCode_ISO_LANGUAGE_CODE_YI          IsoLanguageCode = 183
	IsoLanguageCode_ISO_LANGUAGE_CODE_YO          IsoLanguageCode = 184
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZA          IsoLanguageCode = 185
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZH          IsoLanguageCode = 186
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZU          IsoLanguageCode = 187
	IsoLanguageCode_ISO_LANGUAGE_CODE_BGC         IsoLanguageCode = 188
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQA         IsoLanguageCode = 189
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQB         IsoLanguageCode = 190
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQC         IsoLanguageCode = 191
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQD         IsoLanguageCode = 192
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQE         IsoLanguageCode = 193
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQF         IsoLanguageCode = 194
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQG         IsoLanguageCode = 195
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQH         IsoLanguageCode = 196
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQI         IsoLanguageCode = 197
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQJ         IsoLanguageCode = 198
	IsoLanguageCode_ISO_LANGUAGE_CODE_AAR         IsoLanguageCode = 199
	IsoLanguageCode_ISO_LANGUAGE_CODE_ABK         IsoLanguageCode = 200
	IsoLanguageCode_ISO_LANGUAGE_CODE_AVE         IsoLanguageCode = 201
	IsoLanguageCode_ISO_LANGUAGE_CODE_AFR         IsoLanguageCode = 202
	IsoLanguageCode_ISO_LANGUAGE_CODE_AKA         IsoLanguageCode = 203
	IsoLanguageCode_ISO_LANGUAGE_CODE_AMH         IsoLanguageCode = 204
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARG         IsoLanguageCode = 205
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARA         IsoLanguageCode = 206
	IsoLanguageCode_ISO_LANGUAGE_CODE_ASM         IsoLanguageCode = 207
	IsoLanguageCode_ISO_LANGUAGE_CODE_AVA         IsoLanguageCode = 208
	IsoLanguageCode_ISO_LANGUAGE_CODE_AYM         IsoLanguageCode = 209
	IsoLanguageCode_ISO_LANGUAGE_CODE_AZE         IsoLanguageCode = 210
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAK         IsoLanguageCode = 211
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEL         IsoLanguageCode = 212
	IsoLanguageCode_ISO_LANGUAGE_CODE_BUL         IsoLanguageCode = 213
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIH         IsoLanguageCode = 214
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIS         IsoLanguageCode = 215
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAM         IsoLanguageCode = 216
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEN         IsoLanguageCode = 217
	IsoLanguageCode_ISO_LANGUAGE_CODE_BOD         IsoLanguageCode = 218
	IsoLanguageCode_ISO_LANGUAGE_CODE_BRE         IsoLanguageCode = 219
	IsoLanguageCode_ISO_LANGUAGE_CODE_BOS         IsoLanguageCode = 220
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAT         IsoLanguageCode = 221
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHE         IsoLanguageCode = 222
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHA         IsoLanguageCode = 223
	IsoLanguageCode_ISO_LANGUAGE_CODE_COS         IsoLanguageCode = 224
	IsoLanguageCode_ISO_LANGUAGE_CODE_CRE         IsoLanguageCode = 225
	IsoLanguageCode_ISO_LANGUAGE_CODE_CES         IsoLanguageCode = 226
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHU         IsoLanguageCode = 227
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHV         IsoLanguageCode = 228
	IsoLanguageCode_ISO_LANGUAGE_CODE_CYM         IsoLanguageCode = 229
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAN         IsoLanguageCode = 230
	IsoLanguageCode_ISO_LANGUAGE_CODE_DEU         IsoLanguageCode = 231
	IsoLanguageCode_ISO_LANGUAGE_CODE_DIV         IsoLanguageCode = 232
	IsoLanguageCode_ISO_LANGUAGE_CODE_DZO         IsoLanguageCode = 233
	IsoLanguageCode_ISO_LANGUAGE_CODE_EWE         IsoLanguageCode = 234
	IsoLanguageCode_ISO_LANGUAGE_CODE_ELL         IsoLanguageCode = 235
	IsoLanguageCode_ISO_LANGUAGE_CODE_ENG         IsoLanguageCode = 236
	IsoLanguageCode_ISO_LANGUAGE_CODE_EPO         IsoLanguageCode = 237
	IsoLanguageCode_ISO_LANGUAGE_CODE_SPA         IsoLanguageCode = 238
	IsoLanguageCode_ISO_LANGUAGE_CODE_EST         IsoLanguageCode = 239
	IsoLanguageCode_ISO_LANGUAGE_CODE_EUS         IsoLanguageCode = 240
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAS         IsoLanguageCode = 241
	IsoLanguageCode_ISO_LANGUAGE_CODE_FUL         IsoLanguageCode = 242
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIN         IsoLanguageCode = 243
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIJ         IsoLanguageCode = 244
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAO         IsoLanguageCode = 245
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRA         IsoLanguageCode = 246
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRY         IsoLanguageCode = 247
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLE         IsoLanguageCode = 248
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLA         IsoLanguageCode = 249
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLG         IsoLanguageCode = 250
	IsoLanguageCode_ISO_LANGUAGE_CODE_GRN         IsoLanguageCode = 251
	IsoLanguageCode_ISO_LANGUAGE_CODE_GUJ         IsoLanguageCode = 252
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLV         IsoLanguageCode = 253
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAU         IsoLanguageCode = 254
	IsoLanguageCode_ISO_LANGUAGE_CODE_HEB         IsoLanguageCode = 255
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIN         IsoLanguageCode = 256
	IsoLanguageCode_ISO_LANGUAGE_CODE_HMO         IsoLanguageCode = 257
	IsoLanguageCode_ISO_LANGUAGE_CODE_HRV         IsoLanguageCode = 258
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAT         IsoLanguageCode = 259
	IsoLanguageCode_ISO_LANGUAGE_CODE_HUN         IsoLanguageCode = 260
	IsoLanguageCode_ISO_LANGUAGE_CODE_HYE         IsoLanguageCode = 261
	IsoLanguageCode_ISO_LANGUAGE_CODE_HER         IsoLanguageCode = 262
	IsoLanguageCode_ISO_LANGUAGE_CODE_INA         IsoLanguageCode = 263
	IsoLanguageCode_ISO_LANGUAGE_CODE_IND         IsoLanguageCode = 264
	IsoLanguageCode_ISO_LANGUAGE_CODE_ILE         IsoLanguageCode = 265
	IsoLanguageCode_ISO_LANGUAGE_CODE_IBO         IsoLanguageCode = 266
	IsoLanguageCode_ISO_LANGUAGE_CODE_III         IsoLanguageCode = 267
	IsoLanguageCode_ISO_LANGUAGE_CODE_IPK         IsoLanguageCode = 268
	IsoLanguageCode_ISO_LANGUAGE_CODE_IDO         IsoLanguageCode = 269
	IsoLanguageCode_ISO_LANGUAGE_CODE_ISL         IsoLanguageCode = 270
	IsoLanguageCode_ISO_LANGUAGE_CODE_ITA         IsoLanguageCode = 271
	IsoLanguageCode_ISO_LANGUAGE_CODE_IKU         IsoLanguageCode = 272
	IsoLanguageCode_ISO_LANGUAGE_CODE_JPN         IsoLanguageCode = 273
	IsoLanguageCode_ISO_LANGUAGE_CODE_JAV         IsoLanguageCode = 274
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAT         IsoLanguageCode = 275
	IsoLanguageCode_ISO_LANGUAGE_CODE_KON         IsoLanguageCode = 276
	IsoLanguageCode_ISO_LANGUAGE_CODE_KIK         IsoLanguageCode = 277
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUA         IsoLanguageCode = 278
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAZ         IsoLanguageCode = 279
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAL         IsoLanguageCode = 280
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHM         IsoLanguageCode = 281
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAN         IsoLanguageCode = 282
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOR         IsoLanguageCode = 283
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAU         IsoLanguageCode = 284
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAS         IsoLanguageCode = 285
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUR         IsoLanguageCode = 286
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOM         IsoLanguageCode = 287
	IsoLanguageCode_ISO_LANGUAGE_CODE_COR         IsoLanguageCode = 288
	IsoLanguageCode_ISO_LANGUAGE_CODE_KIR         IsoLanguageCode = 289
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAT         IsoLanguageCode = 290
	IsoLanguageCode_ISO_LANGUAGE_CODE_LTZ         IsoLanguageCode = 291
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUG         IsoLanguageCode = 292
	IsoLanguageCode_ISO_LANGUAGE_CODE_LIM         IsoLanguageCode = 293
	IsoLanguageCode_ISO_LANGUAGE_CODE_LIN         IsoLanguageCode = 294
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAO         IsoLanguageCode = 295
	IsoLanguageCode_ISO_LANGUAGE_CODE_LIT         IsoLanguageCode = 296
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUB         IsoLanguageCode = 297
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAV         IsoLanguageCode = 298
	IsoLanguageCode_ISO_LANGUAGE_CODE_MLG         IsoLanguageCode = 299
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAH         IsoLanguageCode = 300
	IsoLanguageCode_ISO_LANGUAGE_CODE_MRI         IsoLanguageCode = 301
	IsoLanguageCode_ISO_LANGUAGE_CODE_MKD         IsoLanguageCode = 302
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAL         IsoLanguageCode = 303
	IsoLanguageCode_ISO_LANGUAGE_CODE_MON         IsoLanguageCode = 304
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAR         IsoLanguageCode = 305
	IsoLanguageCode_ISO_LANGUAGE_CODE_MSA         IsoLanguageCode = 306
	IsoLanguageCode_ISO_LANGUAGE_CODE_MLT         IsoLanguageCode = 307
	IsoLanguageCode_ISO_LANGUAGE_CODE_MYA         IsoLanguageCode = 308
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAU         IsoLanguageCode = 309
	IsoLanguageCode_ISO_LANGUAGE_CODE_NOB         IsoLanguageCode = 310
	IsoLanguageCode_ISO_LANGUAGE_CODE_NDE         IsoLanguageCode = 311
	IsoLanguageCode_ISO_LANGUAGE_CODE_NEP         IsoLanguageCode = 312
	IsoLanguageCode_ISO_LANGUAGE_CODE_NDO         IsoLanguageCode = 313
	IsoLanguageCode_ISO_LANGUAGE_CODE_NLD         IsoLanguageCode = 314
	IsoLanguageCode_ISO_LANGUAGE_CODE_NNO         IsoLanguageCode = 315
	IsoLanguageCode_ISO_LANGUAGE_CODE_NOR         IsoLanguageCode = 316
	IsoLanguageCode_ISO_LANGUAGE_CODE_NBL         IsoLanguageCode = 317
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAV         IsoLanguageCode = 318
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYA         IsoLanguageCode = 319
	IsoLanguageCode_ISO_LANGUAGE_CODE_OCI         IsoLanguageCode = 320
	IsoLanguageCode_ISO_LANGUAGE_CODE_OJI         IsoLanguageCode = 321
	IsoLanguageCode_ISO_LANGUAGE_CODE_ORM         IsoLanguageCode = 322
	IsoLanguageCode_ISO_LANGUAGE_CODE_ORI         IsoLanguageCode = 323
	IsoLanguageCode_ISO_LANGUAGE_CODE_OSS         IsoLanguageCode = 324
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAN         IsoLanguageCode = 325
	IsoLanguageCode_ISO_LANGUAGE_CODE_PLI         IsoLanguageCode = 326
	IsoLanguageCode_ISO_LANGUAGE_CODE_POL         IsoLanguageCode = 327
	IsoLanguageCode_ISO_LANGUAGE_CODE_PUS         IsoLanguageCode = 328
	IsoLanguageCode_ISO_LANGUAGE_CODE_POR         IsoLanguageCode = 329
	IsoLanguageCode_ISO_LANGUAGE_CODE_QUE         IsoLanguageCode = 330
	IsoLanguageCode_ISO_LANGUAGE_CODE_ROH         IsoLanguageCode = 331
	IsoLanguageCode_ISO_LANGUAGE_CODE_RUN         IsoLanguageCode = 332
	IsoLanguageCode_ISO_LANGUAGE_CODE_RON         IsoLanguageCode = 333
	IsoLanguageCode_ISO_LANGUAGE_CODE_RUS         IsoLanguageCode = 334
	IsoLanguageCode_ISO_LANGUAGE_CODE_KIN         IsoLanguageCode = 335
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAN         IsoLanguageCode = 336
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRD         IsoLanguageCode = 337
	IsoLanguageCode_ISO_LANGUAGE_CODE_SND         IsoLanguageCode = 338
	IsoLanguageCode_ISO_LANGUAGE_CODE_SME         IsoLanguageCode = 339
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAG         IsoLanguageCode = 340
	IsoLanguageCode_ISO_LANGUAGE_CODE_SIN         IsoLanguageCode = 341
	IsoLanguageCode_ISO_LANGUAGE_CODE_SLK         IsoLanguageCode = 342
	IsoLanguageCode_ISO_LANGUAGE_CODE_SLV         IsoLanguageCode = 343
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMO         IsoLanguageCode = 344
	IsoLanguageCode_ISO_LANGUAGE_CODE_SNA         IsoLanguageCode = 345
	IsoLanguageCode_ISO_LANGUAGE_CODE_SOM         IsoLanguageCode = 346
	IsoLanguageCode_ISO_LANGUAGE_CODE_SQI         IsoLanguageCode = 347
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRP         IsoLanguageCode = 348
	IsoLanguageCode_ISO_LANGUAGE_CODE_SSW         IsoLanguageCode = 349
	IsoLanguageCode_ISO_LANGUAGE_CODE_SOT         IsoLanguageCode = 350
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUN         IsoLanguageCode = 351
	IsoLanguageCode_ISO_LANGUAGE_CODE_SWE         IsoLanguageCode = 352
	IsoLanguageCode_ISO_LANGUAGE_CODE_SWA         IsoLanguageCode = 353
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAM         IsoLanguageCode = 354
	IsoLanguageCode_ISO_LANGUAGE_CODE_TEL         IsoLanguageCode = 355
	IsoLanguageCode_ISO_LANGUAGE_CODE_TGK         IsoLanguageCode = 356
	IsoLanguageCode_ISO_LANGUAGE_CODE_THA         IsoLanguageCode = 357
	IsoLanguageCode_ISO_LANGUAGE_CODE_TIR         IsoLanguageCode = 358
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUK         IsoLanguageCode = 359
	IsoLanguageCode_ISO_LANGUAGE_CODE_TGL         IsoLanguageCode = 360
	IsoLanguageCode_ISO_LANGUAGE_CODE_TSN         IsoLanguageCode = 361
	IsoLanguageCode_ISO_LANGUAGE_CODE_TON         IsoLanguageCode = 362
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUR         IsoLanguageCode = 363
	IsoLanguageCode_ISO_LANGUAGE_CODE_TSO         IsoLanguageCode = 364
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAT         IsoLanguageCode = 365
	IsoLanguageCode_ISO_LANGUAGE_CODE_TWI         IsoLanguageCode = 366
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAH         IsoLanguageCode = 367
	IsoLanguageCode_ISO_LANGUAGE_CODE_UIG         IsoLanguageCode = 368
	IsoLanguageCode_ISO_LANGUAGE_CODE_UKR         IsoLanguageCode = 369
	IsoLanguageCode_ISO_LANGUAGE_CODE_URD         IsoLanguageCode = 370
	IsoLanguageCode_ISO_LANGUAGE_CODE_UZB         IsoLanguageCode = 371
	IsoLanguageCode_ISO_LANGUAGE_CODE_VEN         IsoLanguageCode = 372
	IsoLanguageCode_ISO_LANGUAGE_CODE_VIE         IsoLanguageCode = 373
	IsoLanguageCode_ISO_LANGUAGE_CODE_VOL         IsoLanguageCode = 374
	IsoLanguageCode_ISO_LANGUAGE_CODE_WLN         IsoLanguageCode = 375
	IsoLanguageCode_ISO_LANGUAGE_CODE_WOL         IsoLanguageCode = 376
	IsoLanguageCode_ISO_LANGUAGE_CODE_XHO         IsoLanguageCode = 377
	IsoLanguageCode_ISO_LANGUAGE_CODE_YID         IsoLanguageCode = 378
	IsoLanguageCode_ISO_LANGUAGE_CODE_YOR         IsoLanguageCode = 379
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZHA         IsoLanguageCode = 380
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZHO         IsoLanguageCode = 381
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZUL         IsoLanguageCode = 382
	IsoLanguageCode_ISO_LANGUAGE_CODE_ACE         IsoLanguageCode = 383
	IsoLanguageCode_ISO_LANGUAGE_CODE_ACH         IsoLanguageCode = 384
	IsoLanguageCode_ISO_LANGUAGE_CODE_ADA         IsoLanguageCode = 385
	IsoLanguageCode_ISO_LANGUAGE_CODE_ADY         IsoLanguageCode = 386
	IsoLanguageCode_ISO_LANGUAGE_CODE_AFA         IsoLanguageCode = 387
	IsoLanguageCode_ISO_LANGUAGE_CODE_AFH         IsoLanguageCode = 388
	IsoLanguageCode_ISO_LANGUAGE_CODE_AIN         IsoLanguageCode = 389
	IsoLanguageCode_ISO_LANGUAGE_CODE_AKK         IsoLanguageCode = 390
	IsoLanguageCode_ISO_LANGUAGE_CODE_ALE         IsoLanguageCode = 391
	IsoLanguageCode_ISO_LANGUAGE_CODE_ALG         IsoLanguageCode = 392
	IsoLanguageCode_ISO_LANGUAGE_CODE_ALT         IsoLanguageCode = 393
	IsoLanguageCode_ISO_LANGUAGE_CODE_ANG         IsoLanguageCode = 394
	IsoLanguageCode_ISO_LANGUAGE_CODE_ANP         IsoLanguageCode = 395
	IsoLanguageCode_ISO_LANGUAGE_CODE_APA         IsoLanguageCode = 396
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARC         IsoLanguageCode = 397
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARN         IsoLanguageCode = 398
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARP         IsoLanguageCode = 399
	IsoLanguageCode_ISO_LANGUAGE_CODE_ART         IsoLanguageCode = 400
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARW         IsoLanguageCode = 401
	IsoLanguageCode_ISO_LANGUAGE_CODE_AST         IsoLanguageCode = 402
	IsoLanguageCode_ISO_LANGUAGE_CODE_ATH         IsoLanguageCode = 403
	IsoLanguageCode_ISO_LANGUAGE_CODE_AUS         IsoLanguageCode = 404
	IsoLanguageCode_ISO_LANGUAGE_CODE_AWA         IsoLanguageCode = 405
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAD         IsoLanguageCode = 406
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAI         IsoLanguageCode = 407
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAL         IsoLanguageCode = 408
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAN         IsoLanguageCode = 409
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAS         IsoLanguageCode = 410
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAT         IsoLanguageCode = 411
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEJ         IsoLanguageCode = 412
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEM         IsoLanguageCode = 413
	IsoLanguageCode_ISO_LANGUAGE_CODE_BER         IsoLanguageCode = 414
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIK         IsoLanguageCode = 415
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIN         IsoLanguageCode = 416
	IsoLanguageCode_ISO_LANGUAGE_CODE_BLA         IsoLanguageCode = 417
	IsoLanguageCode_ISO_LANGUAGE_CODE_BNT         IsoLanguageCode = 418
	IsoLanguageCode_ISO_LANGUAGE_CODE_BRA         IsoLanguageCode = 419
	IsoLanguageCode_ISO_LANGUAGE_CODE_BTK         IsoLanguageCode = 420
	IsoLanguageCode_ISO_LANGUAGE_CODE_BUA         IsoLanguageCode = 421
	IsoLanguageCode_ISO_LANGUAGE_CODE_BUG         IsoLanguageCode = 422
	IsoLanguageCode_ISO_LANGUAGE_CODE_BYN         IsoLanguageCode = 423
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAD         IsoLanguageCode = 424
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAI         IsoLanguageCode = 425
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAR         IsoLanguageCode = 426
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAU         IsoLanguageCode = 427
	IsoLanguageCode_ISO_LANGUAGE_CODE_CEB         IsoLanguageCode = 428
	IsoLanguageCode_ISO_LANGUAGE_CODE_CEL         IsoLanguageCode = 429
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHB         IsoLanguageCode = 430
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHG         IsoLanguageCode = 431
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHK         IsoLanguageCode = 432
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHM         IsoLanguageCode = 433
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHN         IsoLanguageCode = 434
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHO         IsoLanguageCode = 435
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHP         IsoLanguageCode = 436
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHR         IsoLanguageCode = 437
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHY         IsoLanguageCode = 438
	IsoLanguageCode_ISO_LANGUAGE_CODE_CMC         IsoLanguageCode = 439
	IsoLanguageCode_ISO_LANGUAGE_CODE_CNR         IsoLanguageCode = 440
	IsoLanguageCode_ISO_LANGUAGE_CODE_COP         IsoLanguageCode = 441
	IsoLanguageCode_ISO_LANGUAGE_CODE_CPE         IsoLanguageCode = 442
	IsoLanguageCode_ISO_LANGUAGE_CODE_CPF         IsoLanguageCode = 443
	IsoLanguageCode_ISO_LANGUAGE_CODE_CPP         IsoLanguageCode = 444
	IsoLanguageCode_ISO_LANGUAGE_CODE_CRH         IsoLanguageCode = 445
	IsoLanguageCode_ISO_LANGUAGE_CODE_CRP         IsoLanguageCode = 446
	IsoLanguageCode_ISO_LANGUAGE_CODE_CSB         IsoLanguageCode = 447
	IsoLanguageCode_ISO_LANGUAGE_CODE_CUS         IsoLanguageCode = 448
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAK         IsoLanguageCode = 449
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAR         IsoLanguageCode = 450
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAY         IsoLanguageCode = 451
	IsoLanguageCode_ISO_LANGUAGE_CODE_DEL         IsoLanguageCode = 452
	IsoLanguageCode_ISO_LANGUAGE_CODE_DEN         IsoLanguageCode = 453
	IsoLanguageCode_ISO_LANGUAGE_CODE_DGR         IsoLanguageCode = 454
	IsoLanguageCode_ISO_LANGUAGE_CODE_DIN         IsoLanguageCode = 455
	IsoLanguageCode_ISO_LANGUAGE_CODE_DOI         IsoLanguageCode = 456
	IsoLanguageCode_ISO_LANGUAGE_CODE_DRA         IsoLanguageCode = 457
	IsoLanguageCode_ISO_LANGUAGE_CODE_DSB         IsoLanguageCode = 458
	IsoLanguageCode_ISO_LANGUAGE_CODE_DUA         IsoLanguageCode = 459
	IsoLanguageCode_ISO_LANGUAGE_CODE_DUM         IsoLanguageCode = 460
	IsoLanguageCode_ISO_LANGUAGE_CODE_DYU         IsoLanguageCode = 461
	IsoLanguageCode_ISO_LANGUAGE_CODE_EFI         IsoLanguageCode = 462
	IsoLanguageCode_ISO_LANGUAGE_CODE_EGY         IsoLanguageCode = 463
	IsoLanguageCode_ISO_LANGUAGE_CODE_EKA         IsoLanguageCode = 464
	IsoLanguageCode_ISO_LANGUAGE_CODE_ELX         IsoLanguageCode = 465
	IsoLanguageCode_ISO_LANGUAGE_CODE_ENM         IsoLanguageCode = 466
	IsoLanguageCode_ISO_LANGUAGE_CODE_EWO         IsoLanguageCode = 467
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAN         IsoLanguageCode = 468
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAT         IsoLanguageCode = 469
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIL         IsoLanguageCode = 470
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIU         IsoLanguageCode = 471
	IsoLanguageCode_ISO_LANGUAGE_CODE_FON         IsoLanguageCode = 472
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRM         IsoLanguageCode = 473
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRO         IsoLanguageCode = 474
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRR         IsoLanguageCode = 475
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRS         IsoLanguageCode = 476
	IsoLanguageCode_ISO_LANGUAGE_CODE_FUR         IsoLanguageCode = 477
	IsoLanguageCode_ISO_LANGUAGE_CODE_GAA         IsoLanguageCode = 478
	IsoLanguageCode_ISO_LANGUAGE_CODE_GAY         IsoLanguageCode = 479
	IsoLanguageCode_ISO_LANGUAGE_CODE_GBA         IsoLanguageCode = 480
	IsoLanguageCode_ISO_LANGUAGE_CODE_GEM         IsoLanguageCode = 481
	IsoLanguageCode_ISO_LANGUAGE_CODE_GEZ         IsoLanguageCode = 482
	IsoLanguageCode_ISO_LANGUAGE_CODE_GIL         IsoLanguageCode = 483
	IsoLanguageCode_ISO_LANGUAGE_CODE_GMH         IsoLanguageCode = 484
	IsoLanguageCode_ISO_LANGUAGE_CODE_GOH         IsoLanguageCode = 485
	IsoLanguageCode_ISO_LANGUAGE_CODE_GON         IsoLanguageCode = 486
	IsoLanguageCode_ISO_LANGUAGE_CODE_GOR         IsoLanguageCode = 487
	IsoLanguageCode_ISO_LANGUAGE_CODE_GOT         IsoLanguageCode = 488
	IsoLanguageCode_ISO_LANGUAGE_CODE_GRB         IsoLanguageCode = 489
	IsoLanguageCode_ISO_LANGUAGE_CODE_GRC         IsoLanguageCode = 490
	IsoLanguageCode_ISO_LANGUAGE_CODE_GSW         IsoLanguageCode = 491
	IsoLanguageCode_ISO_LANGUAGE_CODE_GWI         IsoLanguageCode = 492
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAI         IsoLanguageCode = 493
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAW         IsoLanguageCode = 494
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIL         IsoLanguageCode = 495
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIM         IsoLanguageCode = 496
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIT         IsoLanguageCode = 497
	IsoLanguageCode_ISO_LANGUAGE_CODE_HMN         IsoLanguageCode = 498
	IsoLanguageCode_ISO_LANGUAGE_CODE_HSB         IsoLanguageCode = 499
	IsoLanguageCode_ISO_LANGUAGE_CODE_HUP         IsoLanguageCode = 500
	IsoLanguageCode_ISO_LANGUAGE_CODE_IBA         IsoLanguageCode = 501
	IsoLanguageCode_ISO_LANGUAGE_CODE_IJO         IsoLanguageCode = 502
	IsoLanguageCode_ISO_LANGUAGE_CODE_ILO         IsoLanguageCode = 503
	IsoLanguageCode_ISO_LANGUAGE_CODE_INC         IsoLanguageCode = 504
	IsoLanguageCode_ISO_LANGUAGE_CODE_INE         IsoLanguageCode = 505
	IsoLanguageCode_ISO_LANGUAGE_CODE_INH         IsoLanguageCode = 506
	IsoLanguageCode_ISO_LANGUAGE_CODE_IRA         IsoLanguageCode = 507
	IsoLanguageCode_ISO_LANGUAGE_CODE_IRO         IsoLanguageCode = 508
	IsoLanguageCode_ISO_LANGUAGE_CODE_JBO         IsoLanguageCode = 509
	IsoLanguageCode_ISO_LANGUAGE_CODE_JPR         IsoLanguageCode = 510
	IsoLanguageCode_ISO_LANGUAGE_CODE_JRB         IsoLanguageCode = 511
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAA         IsoLanguageCode = 512
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAB         IsoLanguageCode = 513
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAC         IsoLanguageCode = 514
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAM         IsoLanguageCode = 515
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAR         IsoLanguageCode = 516
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAW         IsoLanguageCode = 517
	IsoLanguageCode_ISO_LANGUAGE_CODE_KBD         IsoLanguageCode = 518
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHA         IsoLanguageCode = 519
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHI         IsoLanguageCode = 520
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHO         IsoLanguageCode = 521
	IsoLanguageCode_ISO_LANGUAGE_CODE_KMB         IsoLanguageCode = 522
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOK         IsoLanguageCode = 523
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOS         IsoLanguageCode = 524
	IsoLanguageCode_ISO_LANGUAGE_CODE_KPE         IsoLanguageCode = 525
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRC         IsoLanguageCode = 526
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRL         IsoLanguageCode = 527
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRO         IsoLanguageCode = 528
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRU         IsoLanguageCode = 529
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUM         IsoLanguageCode = 530
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUT         IsoLanguageCode = 531
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAD         IsoLanguageCode = 532
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAH         IsoLanguageCode = 533
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAM         IsoLanguageCode = 534
	IsoLanguageCode_ISO_LANGUAGE_CODE_LEZ         IsoLanguageCode = 535
	IsoLanguageCode_ISO_LANGUAGE_CODE_LOL         IsoLanguageCode = 536
	IsoLanguageCode_ISO_LANGUAGE_CODE_LOZ         IsoLanguageCode = 537
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUA         IsoLanguageCode = 538
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUI         IsoLanguageCode = 539
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUN         IsoLanguageCode = 540
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUO         IsoLanguageCode = 541
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUS         IsoLanguageCode = 542
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAD         IsoLanguageCode = 543
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAG         IsoLanguageCode = 544
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAI         IsoLanguageCode = 545
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAK         IsoLanguageCode = 546
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAN         IsoLanguageCode = 547
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAP         IsoLanguageCode = 548
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAS         IsoLanguageCode = 549
	IsoLanguageCode_ISO_LANGUAGE_CODE_MDF         IsoLanguageCode = 550
	IsoLanguageCode_ISO_LANGUAGE_CODE_MDR         IsoLanguageCode = 551
	IsoLanguageCode_ISO_LANGUAGE_CODE_MEN         IsoLanguageCode = 552
	IsoLanguageCode_ISO_LANGUAGE_CODE_MGA         IsoLanguageCode = 553
	IsoLanguageCode_ISO_LANGUAGE_CODE_MIC         IsoLanguageCode = 554
	IsoLanguageCode_ISO_LANGUAGE_CODE_MIN         IsoLanguageCode = 555
	IsoLanguageCode_ISO_LANGUAGE_CODE_MIS         IsoLanguageCode = 556
	IsoLanguageCode_ISO_LANGUAGE_CODE_MKH         IsoLanguageCode = 557
	IsoLanguageCode_ISO_LANGUAGE_CODE_MNC         IsoLanguageCode = 558
	IsoLanguageCode_ISO_LANGUAGE_CODE_MNI         IsoLanguageCode = 559
	IsoLanguageCode_ISO_LANGUAGE_CODE_MNO         IsoLanguageCode = 560
	IsoLanguageCode_ISO_LANGUAGE_CODE_MOH         IsoLanguageCode = 561
	IsoLanguageCode_ISO_LANGUAGE_CODE_MOS         IsoLanguageCode = 562
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUL         IsoLanguageCode = 563
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUN         IsoLanguageCode = 564
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUS         IsoLanguageCode = 565
	IsoLanguageCode_ISO_LANGUAGE_CODE_MWL         IsoLanguageCode = 566
	IsoLanguageCode_ISO_LANGUAGE_CODE_MWR         IsoLanguageCode = 567
	IsoLanguageCode_ISO_LANGUAGE_CODE_MYN         IsoLanguageCode = 568
	IsoLanguageCode_ISO_LANGUAGE_CODE_MYV         IsoLanguageCode = 569
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAH         IsoLanguageCode = 570
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAI         IsoLanguageCode = 571
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAP         IsoLanguageCode = 572
	IsoLanguageCode_ISO_LANGUAGE_CODE_NDS         IsoLanguageCode = 573
	IsoLanguageCode_ISO_LANGUAGE_CODE_NEW         IsoLanguageCode = 574
	IsoLanguageCode_ISO_LANGUAGE_CODE_NIA         IsoLanguageCode = 575
	IsoLanguageCode_ISO_LANGUAGE_CODE_NIC         IsoLanguageCode = 576
	IsoLanguageCode_ISO_LANGUAGE_CODE_NIU         IsoLanguageCode = 577
	IsoLanguageCode_ISO_LANGUAGE_CODE_NOG         IsoLanguageCode = 578
	IsoLanguageCode_ISO_LANGUAGE_CODE_NON         IsoLanguageCode = 579
	IsoLanguageCode_ISO_LANGUAGE_CODE_NQO         IsoLanguageCode = 580
	IsoLanguageCode_ISO_LANGUAGE_CODE_NSO         IsoLanguageCode = 581
	IsoLanguageCode_ISO_LANGUAGE_CODE_NUB         IsoLanguageCode = 582
	IsoLanguageCode_ISO_LANGUAGE_CODE_NWC         IsoLanguageCode = 583
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYM         IsoLanguageCode = 584
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYN         IsoLanguageCode = 585
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYO         IsoLanguageCode = 586
	IsoLanguageCode_ISO_LANGUAGE_CODE_NZI         IsoLanguageCode = 587
	IsoLanguageCode_ISO_LANGUAGE_CODE_OSA         IsoLanguageCode = 588
	IsoLanguageCode_ISO_LANGUAGE_CODE_OTA         IsoLanguageCode = 589
	IsoLanguageCode_ISO_LANGUAGE_CODE_OTO         IsoLanguageCode = 590
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAA         IsoLanguageCode = 591
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAG         IsoLanguageCode = 592
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAL         IsoLanguageCode = 593
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAM         IsoLanguageCode = 594
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAP         IsoLanguageCode = 595
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAU         IsoLanguageCode = 596
	IsoLanguageCode_ISO_LANGUAGE_CODE_PEO         IsoLanguageCode = 597
	IsoLanguageCode_ISO_LANGUAGE_CODE_PHI         IsoLanguageCode = 598
	IsoLanguageCode_ISO_LANGUAGE_CODE_PHN         IsoLanguageCode = 599
	IsoLanguageCode_ISO_LANGUAGE_CODE_PON         IsoLanguageCode = 600
	IsoLanguageCode_ISO_LANGUAGE_CODE_PRA         IsoLanguageCode = 601
	IsoLanguageCode_ISO_LANGUAGE_CODE_PRO         IsoLanguageCode = 602
	IsoLanguageCode_ISO_LANGUAGE_CODE_RAP         IsoLanguageCode = 603
	IsoLanguageCode_ISO_LANGUAGE_CODE_RAR         IsoLanguageCode = 604
	IsoLanguageCode_ISO_LANGUAGE_CODE_ROA         IsoLanguageCode = 605
	IsoLanguageCode_ISO_LANGUAGE_CODE_ROM         IsoLanguageCode = 606
	IsoLanguageCode_ISO_LANGUAGE_CODE_RUP         IsoLanguageCode = 607
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAD         IsoLanguageCode = 608
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAH         IsoLanguageCode = 609
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAI         IsoLanguageCode = 610
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAL         IsoLanguageCode = 611
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAM         IsoLanguageCode = 612
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAS         IsoLanguageCode = 613
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAT         IsoLanguageCode = 614
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCN         IsoLanguageCode = 615
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCO         IsoLanguageCode = 616
	IsoLanguageCode_ISO_LANGUAGE_CODE_SEL         IsoLanguageCode = 617
	IsoLanguageCode_ISO_LANGUAGE_CODE_SEM         IsoLanguageCode = 618
	IsoLanguageCode_ISO_LANGUAGE_CODE_SGA         IsoLanguageCode = 619
	IsoLanguageCode_ISO_LANGUAGE_CODE_SGN         IsoLanguageCode = 620
	IsoLanguageCode_ISO_LANGUAGE_CODE_SHN         IsoLanguageCode = 621
	IsoLanguageCode_ISO_LANGUAGE_CODE_SID         IsoLanguageCode = 622
	IsoLanguageCode_ISO_LANGUAGE_CODE_SIO         IsoLanguageCode = 623
	IsoLanguageCode_ISO_LANGUAGE_CODE_SIT         IsoLanguageCode = 624
	IsoLanguageCode_ISO_LANGUAGE_CODE_SLA         IsoLanguageCode = 625
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMA         IsoLanguageCode = 626
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMI         IsoLanguageCode = 627
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMJ         IsoLanguageCode = 628
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMN         IsoLanguageCode = 629
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMS         IsoLanguageCode = 630
	IsoLanguageCode_ISO_LANGUAGE_CODE_SNK         IsoLanguageCode = 631
	IsoLanguageCode_ISO_LANGUAGE_CODE_SOG         IsoLanguageCode = 632
	IsoLanguageCode_ISO_LANGUAGE_CODE_SON         IsoLanguageCode = 633
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRN         IsoLanguageCode = 634
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRR         IsoLanguageCode = 635
	IsoLanguageCode_ISO_LANGUAGE_CODE_SSA         IsoLanguageCode = 636
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUK         IsoLanguageCode = 637
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUS         IsoLanguageCode = 638
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUX         IsoLanguageCode = 639
	IsoLanguageCode_ISO_LANGUAGE_CODE_SYC         IsoLanguageCode = 640
	IsoLanguageCode_ISO_LANGUAGE_CODE_SYR         IsoLanguageCode = 641
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAI         IsoLanguageCode = 642
	IsoLanguageCode_ISO_LANGUAGE_CODE_TEM         IsoLanguageCode = 643
	IsoLanguageCode_ISO_LANGUAGE_CODE_TER         IsoLanguageCode = 644
	IsoLanguageCode_ISO_LANGUAGE_CODE_TET         IsoLanguageCode = 645
	IsoLanguageCode_ISO_LANGUAGE_CODE_TIG         IsoLanguageCode = 646
	IsoLanguageCode_ISO_LANGUAGE_CODE_TIV         IsoLanguageCode = 647
	IsoLanguageCode_ISO_LANGUAGE_CODE_TKL         IsoLanguageCode = 648
	IsoLanguageCode_ISO_LANGUAGE_CODE_TLH         IsoLanguageCode = 649
	IsoLanguageCode_ISO_LANGUAGE_CODE_TLI         IsoLanguageCode = 650
	IsoLanguageCode_ISO_LANGUAGE_CODE_TMH         IsoLanguageCode = 651
	IsoLanguageCode_ISO_LANGUAGE_CODE_TOG         IsoLanguageCode = 652
	IsoLanguageCode_ISO_LANGUAGE_CODE_TPI         IsoLanguageCode = 653
	IsoLanguageCode_ISO_LANGUAGE_CODE_TSI         IsoLanguageCode = 654
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUM         IsoLanguageCode = 655
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUP         IsoLanguageCode = 656
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUT         IsoLanguageCode = 657
	IsoLanguageCode_ISO_LANGUAGE_CODE_TVL         IsoLanguageCode = 658
	IsoLanguageCode_ISO_LANGUAGE_CODE_TYV         IsoLanguageCode = 659
	IsoLanguageCode_ISO_LANGUAGE_CODE_UDM         IsoLanguageCode = 660
	IsoLanguageCode_ISO_LANGUAGE_CODE_UGA         IsoLanguageCode = 661
	IsoLanguageCode_ISO_LANGUAGE_CODE_UMB         IsoLanguageCode = 662
	IsoLanguageCode_ISO_LANGUAGE_CODE_UND         IsoLanguageCode = 663
	IsoLanguageCode_ISO_LANGUAGE_CODE_VAI         IsoLanguageCode = 664
	IsoLanguageCode_ISO_LANGUAGE_CODE_VOT         IsoLanguageCode = 665
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAK         IsoLanguageCode = 666
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAL         IsoLanguageCode = 667
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAR         IsoLanguageCode = 668
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAS         IsoLanguageCode = 669
	IsoLanguageCode_ISO_LANGUAGE_CODE_WEN         IsoLanguageCode = 670
	IsoLanguageCode_ISO_LANGUAGE_CODE_XAL         IsoLanguageCode = 671
	IsoLanguageCode_ISO_LANGUAGE_CODE_YAO         IsoLanguageCode = 672
	IsoLanguageCode_ISO_LANGUAGE_CODE_YAP         IsoLanguageCode = 673
	IsoLanguageCode_ISO_LANGUAGE_CODE_YPK         IsoLanguageCode = 674
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZAP         IsoLanguageCode = 675
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZBL         IsoLanguageCode = 676
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZEN         IsoLanguageCode = 677
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZGH         IsoLanguageCode = 678
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZND         IsoLanguageCode = 679
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZUN         IsoLanguageCode = 680
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZXX         IsoLanguageCode = 681
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZZA         IsoLanguageCode = 682
	IsoLanguageCode_ISO_LANGUAGE_CODE_AAA         IsoLanguageCode = 683
	IsoLanguageCode_ISO_LANGUAGE_CODE_HNE         IsoLanguageCode = 684
	IsoLanguageCode_ISO_LANGUAGE_CODE_GBM         IsoLanguageCode = 685
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHW         IsoLanguageCode = 686
	IsoLanguageCode_ISO_LANGUAGE_CODE_CMN         IsoLanguageCode = 687
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCK         IsoLanguageCode = 688
	IsoLanguageCode_ISO_LANGUAGE_CODE_SPV         IsoLanguageCode = 689
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCL         IsoLanguageCode = 690
	IsoLanguageCode_ISO_LANGUAGE_CODE_YUE         IsoLanguageCode = 691
	IsoLanguageCode_ISO_LANGUAGE_CODE_TCY         IsoLanguageCode = 692
	IsoLanguageCode_ISO_LANGUAGE_CODE_KEY         IsoLanguageCode = 693
	IsoLanguageCode_ISO_LANGUAGE_CODE_GCF         IsoLanguageCode = 694
	IsoLanguageCode_ISO_LANGUAGE_CODE_JAM         IsoLanguageCode = 695
	IsoLanguageCode_ISO_LANGUAGE_CODE_MCM         IsoLanguageCode = 696
)

// Enum value maps for IsoLanguageCode.
var (
	IsoLanguageCode_name = map[int32]string{
		0:   "ISO_LANGUAGE_CODE_UNSPECIFIED",
		1:   "ISO_LANGUAGE_CODE_RAJ",
		2:   "ISO_LANGUAGE_CODE_BHO",
		3:   "ISO_LANGUAGE_CODE_AA",
		4:   "ISO_LANGUAGE_CODE_AB",
		5:   "ISO_LANGUAGE_CODE_AE",
		6:   "ISO_LANGUAGE_CODE_AF",
		7:   "ISO_LANGUAGE_CODE_AK",
		8:   "ISO_LANGUAGE_CODE_AM",
		9:   "ISO_LANGUAGE_CODE_AN",
		10:  "ISO_LANGUAGE_CODE_AR",
		11:  "ISO_LANGUAGE_CODE_AS",
		12:  "ISO_LANGUAGE_CODE_AV",
		13:  "ISO_LANGUAGE_CODE_AY",
		14:  "ISO_LANGUAGE_CODE_AZ",
		15:  "ISO_LANGUAGE_CODE_BA",
		16:  "ISO_LANGUAGE_CODE_BE",
		17:  "ISO_LANGUAGE_CODE_BG",
		18:  "ISO_LANGUAGE_CODE_BH",
		19:  "ISO_LANGUAGE_CODE_BI",
		20:  "ISO_LANGUAGE_CODE_BM",
		21:  "ISO_LANGUAGE_CODE_BN",
		22:  "ISO_LANGUAGE_CODE_BO",
		23:  "ISO_LANGUAGE_CODE_BR",
		24:  "ISO_LANGUAGE_CODE_BS",
		25:  "ISO_LANGUAGE_CODE_CA",
		26:  "ISO_LANGUAGE_CODE_CE",
		27:  "ISO_LANGUAGE_CODE_CH",
		28:  "ISO_LANGUAGE_CODE_CO",
		29:  "ISO_LANGUAGE_CODE_CR",
		30:  "ISO_LANGUAGE_CODE_CS",
		31:  "ISO_LANGUAGE_CODE_CU",
		32:  "ISO_LANGUAGE_CODE_CV",
		33:  "ISO_LANGUAGE_CODE_CY",
		34:  "ISO_LANGUAGE_CODE_DA",
		35:  "ISO_LANGUAGE_CODE_DE",
		36:  "ISO_LANGUAGE_CODE_DV",
		37:  "ISO_LANGUAGE_CODE_DZ",
		38:  "ISO_LANGUAGE_CODE_EE",
		39:  "ISO_LANGUAGE_CODE_EL",
		40:  "ISO_LANGUAGE_CODE_EN",
		41:  "ISO_LANGUAGE_CODE_EO",
		42:  "ISO_LANGUAGE_CODE_ES",
		43:  "ISO_LANGUAGE_CODE_ET",
		44:  "ISO_LANGUAGE_CODE_EU",
		45:  "ISO_LANGUAGE_CODE_FA",
		46:  "ISO_LANGUAGE_CODE_FF",
		47:  "ISO_LANGUAGE_CODE_FI",
		48:  "ISO_LANGUAGE_CODE_FJ",
		49:  "ISO_LANGUAGE_CODE_FO",
		50:  "ISO_LANGUAGE_CODE_FR",
		51:  "ISO_LANGUAGE_CODE_FY",
		52:  "ISO_LANGUAGE_CODE_GA",
		53:  "ISO_LANGUAGE_CODE_GD",
		54:  "ISO_LANGUAGE_CODE_GL",
		55:  "ISO_LANGUAGE_CODE_GN",
		56:  "ISO_LANGUAGE_CODE_GU",
		57:  "ISO_LANGUAGE_CODE_GV",
		58:  "ISO_LANGUAGE_CODE_HA",
		59:  "ISO_LANGUAGE_CODE_HE",
		60:  "ISO_LANGUAGE_CODE_HI",
		61:  "ISO_LANGUAGE_CODE_HO",
		62:  "ISO_LANGUAGE_CODE_HR",
		63:  "ISO_LANGUAGE_CODE_HT",
		64:  "ISO_LANGUAGE_CODE_HU",
		65:  "ISO_LANGUAGE_CODE_HY",
		66:  "ISO_LANGUAGE_CODE_HZ",
		67:  "ISO_LANGUAGE_CODE_IA",
		68:  "ISO_LANGUAGE_CODE_ID",
		69:  "ISO_LANGUAGE_CODE_IE",
		70:  "ISO_LANGUAGE_CODE_IG",
		71:  "ISO_LANGUAGE_CODE_II",
		72:  "ISO_LANGUAGE_CODE_IK",
		73:  "ISO_LANGUAGE_CODE_IO",
		74:  "ISO_LANGUAGE_CODE_IS",
		75:  "ISO_LANGUAGE_CODE_IT",
		76:  "ISO_LANGUAGE_CODE_IU",
		77:  "ISO_LANGUAGE_CODE_JA",
		78:  "ISO_LANGUAGE_CODE_JV",
		79:  "ISO_LANGUAGE_CODE_KA",
		80:  "ISO_LANGUAGE_CODE_KG",
		81:  "ISO_LANGUAGE_CODE_KI",
		82:  "ISO_LANGUAGE_CODE_KJ",
		83:  "ISO_LANGUAGE_CODE_KK",
		84:  "ISO_LANGUAGE_CODE_KL",
		85:  "ISO_LANGUAGE_CODE_KM",
		86:  "ISO_LANGUAGE_CODE_KN",
		87:  "ISO_LANGUAGE_CODE_KO",
		88:  "ISO_LANGUAGE_CODE_KR",
		89:  "ISO_LANGUAGE_CODE_KS",
		90:  "ISO_LANGUAGE_CODE_KU",
		91:  "ISO_LANGUAGE_CODE_KV",
		92:  "ISO_LANGUAGE_CODE_KW",
		93:  "ISO_LANGUAGE_CODE_KY",
		94:  "ISO_LANGUAGE_CODE_LA",
		95:  "ISO_LANGUAGE_CODE_LB",
		96:  "ISO_LANGUAGE_CODE_LG",
		97:  "ISO_LANGUAGE_CODE_LI",
		98:  "ISO_LANGUAGE_CODE_LN",
		99:  "ISO_LANGUAGE_CODE_LO",
		100: "ISO_LANGUAGE_CODE_LT",
		101: "ISO_LANGUAGE_CODE_LU",
		102: "ISO_LANGUAGE_CODE_LV",
		103: "ISO_LANGUAGE_CODE_MG",
		104: "ISO_LANGUAGE_CODE_MH",
		105: "ISO_LANGUAGE_CODE_MI",
		106: "ISO_LANGUAGE_CODE_MK",
		107: "ISO_LANGUAGE_CODE_ML",
		108: "ISO_LANGUAGE_CODE_MN",
		109: "ISO_LANGUAGE_CODE_MO",
		110: "ISO_LANGUAGE_CODE_MR",
		111: "ISO_LANGUAGE_CODE_MS",
		112: "ISO_LANGUAGE_CODE_MT",
		113: "ISO_LANGUAGE_CODE_MY",
		114: "ISO_LANGUAGE_CODE_NA",
		115: "ISO_LANGUAGE_CODE_NB",
		116: "ISO_LANGUAGE_CODE_ND",
		117: "ISO_LANGUAGE_CODE_NE",
		118: "ISO_LANGUAGE_CODE_NG",
		119: "ISO_LANGUAGE_CODE_NL",
		120: "ISO_LANGUAGE_CODE_NN",
		121: "ISO_LANGUAGE_CODE_NO",
		122: "ISO_LANGUAGE_CODE_NR",
		123: "ISO_LANGUAGE_CODE_NV",
		124: "ISO_LANGUAGE_CODE_NY",
		125: "ISO_LANGUAGE_CODE_OC",
		126: "ISO_LANGUAGE_CODE_OJ",
		127: "ISO_LANGUAGE_CODE_OM",
		128: "ISO_LANGUAGE_CODE_OR",
		129: "ISO_LANGUAGE_CODE_OS",
		130: "ISO_LANGUAGE_CODE_PA",
		131: "ISO_LANGUAGE_CODE_PI",
		132: "ISO_LANGUAGE_CODE_PL",
		133: "ISO_LANGUAGE_CODE_PS",
		134: "ISO_LANGUAGE_CODE_PT",
		135: "ISO_LANGUAGE_CODE_QU",
		136: "ISO_LANGUAGE_CODE_RM",
		137: "ISO_LANGUAGE_CODE_RN",
		138: "ISO_LANGUAGE_CODE_RO",
		139: "ISO_LANGUAGE_CODE_RU",
		140: "ISO_LANGUAGE_CODE_RW",
		141: "ISO_LANGUAGE_CODE_SA",
		142: "ISO_LANGUAGE_CODE_SC",
		143: "ISO_LANGUAGE_CODE_SD",
		144: "ISO_LANGUAGE_CODE_SE",
		145: "ISO_LANGUAGE_CODE_SG",
		146: "ISO_LANGUAGE_CODE_SI",
		147: "ISO_LANGUAGE_CODE_SK",
		148: "ISO_LANGUAGE_CODE_SL",
		149: "ISO_LANGUAGE_CODE_SM",
		150: "ISO_LANGUAGE_CODE_SN",
		151: "ISO_LANGUAGE_CODE_SO",
		152: "ISO_LANGUAGE_CODE_SQ",
		153: "ISO_LANGUAGE_CODE_SR",
		154: "ISO_LANGUAGE_CODE_SS",
		155: "ISO_LANGUAGE_CODE_ST",
		156: "ISO_LANGUAGE_CODE_SU",
		157: "ISO_LANGUAGE_CODE_SV",
		158: "ISO_LANGUAGE_CODE_SW",
		159: "ISO_LANGUAGE_CODE_TA",
		160: "ISO_LANGUAGE_CODE_TE",
		161: "ISO_LANGUAGE_CODE_TG",
		162: "ISO_LANGUAGE_CODE_TH",
		163: "ISO_LANGUAGE_CODE_TI",
		164: "ISO_LANGUAGE_CODE_TK",
		165: "ISO_LANGUAGE_CODE_TL",
		166: "ISO_LANGUAGE_CODE_TN",
		167: "ISO_LANGUAGE_CODE_TO",
		168: "ISO_LANGUAGE_CODE_TR",
		169: "ISO_LANGUAGE_CODE_TS",
		170: "ISO_LANGUAGE_CODE_TT",
		171: "ISO_LANGUAGE_CODE_TW",
		172: "ISO_LANGUAGE_CODE_TY",
		173: "ISO_LANGUAGE_CODE_UG",
		174: "ISO_LANGUAGE_CODE_UK",
		175: "ISO_LANGUAGE_CODE_UR",
		176: "ISO_LANGUAGE_CODE_UZ",
		177: "ISO_LANGUAGE_CODE_VE",
		178: "ISO_LANGUAGE_CODE_VI",
		179: "ISO_LANGUAGE_CODE_VO",
		180: "ISO_LANGUAGE_CODE_WA",
		181: "ISO_LANGUAGE_CODE_WO",
		182: "ISO_LANGUAGE_CODE_XH",
		183: "ISO_LANGUAGE_CODE_YI",
		184: "ISO_LANGUAGE_CODE_YO",
		185: "ISO_LANGUAGE_CODE_ZA",
		186: "ISO_LANGUAGE_CODE_ZH",
		187: "ISO_LANGUAGE_CODE_ZU",
		188: "ISO_LANGUAGE_CODE_BGC",
		189: "ISO_LANGUAGE_CODE_QQA",
		190: "ISO_LANGUAGE_CODE_QQB",
		191: "ISO_LANGUAGE_CODE_QQC",
		192: "ISO_LANGUAGE_CODE_QQD",
		193: "ISO_LANGUAGE_CODE_QQE",
		194: "ISO_LANGUAGE_CODE_QQF",
		195: "ISO_LANGUAGE_CODE_QQG",
		196: "ISO_LANGUAGE_CODE_QQH",
		197: "ISO_LANGUAGE_CODE_QQI",
		198: "ISO_LANGUAGE_CODE_QQJ",
		199: "ISO_LANGUAGE_CODE_AAR",
		200: "ISO_LANGUAGE_CODE_ABK",
		201: "ISO_LANGUAGE_CODE_AVE",
		202: "ISO_LANGUAGE_CODE_AFR",
		203: "ISO_LANGUAGE_CODE_AKA",
		204: "ISO_LANGUAGE_CODE_AMH",
		205: "ISO_LANGUAGE_CODE_ARG",
		206: "ISO_LANGUAGE_CODE_ARA",
		207: "ISO_LANGUAGE_CODE_ASM",
		208: "ISO_LANGUAGE_CODE_AVA",
		209: "ISO_LANGUAGE_CODE_AYM",
		210: "ISO_LANGUAGE_CODE_AZE",
		211: "ISO_LANGUAGE_CODE_BAK",
		212: "ISO_LANGUAGE_CODE_BEL",
		213: "ISO_LANGUAGE_CODE_BUL",
		214: "ISO_LANGUAGE_CODE_BIH",
		215: "ISO_LANGUAGE_CODE_BIS",
		216: "ISO_LANGUAGE_CODE_BAM",
		217: "ISO_LANGUAGE_CODE_BEN",
		218: "ISO_LANGUAGE_CODE_BOD",
		219: "ISO_LANGUAGE_CODE_BRE",
		220: "ISO_LANGUAGE_CODE_BOS",
		221: "ISO_LANGUAGE_CODE_CAT",
		222: "ISO_LANGUAGE_CODE_CHE",
		223: "ISO_LANGUAGE_CODE_CHA",
		224: "ISO_LANGUAGE_CODE_COS",
		225: "ISO_LANGUAGE_CODE_CRE",
		226: "ISO_LANGUAGE_CODE_CES",
		227: "ISO_LANGUAGE_CODE_CHU",
		228: "ISO_LANGUAGE_CODE_CHV",
		229: "ISO_LANGUAGE_CODE_CYM",
		230: "ISO_LANGUAGE_CODE_DAN",
		231: "ISO_LANGUAGE_CODE_DEU",
		232: "ISO_LANGUAGE_CODE_DIV",
		233: "ISO_LANGUAGE_CODE_DZO",
		234: "ISO_LANGUAGE_CODE_EWE",
		235: "ISO_LANGUAGE_CODE_ELL",
		236: "ISO_LANGUAGE_CODE_ENG",
		237: "ISO_LANGUAGE_CODE_EPO",
		238: "ISO_LANGUAGE_CODE_SPA",
		239: "ISO_LANGUAGE_CODE_EST",
		240: "ISO_LANGUAGE_CODE_EUS",
		241: "ISO_LANGUAGE_CODE_FAS",
		242: "ISO_LANGUAGE_CODE_FUL",
		243: "ISO_LANGUAGE_CODE_FIN",
		244: "ISO_LANGUAGE_CODE_FIJ",
		245: "ISO_LANGUAGE_CODE_FAO",
		246: "ISO_LANGUAGE_CODE_FRA",
		247: "ISO_LANGUAGE_CODE_FRY",
		248: "ISO_LANGUAGE_CODE_GLE",
		249: "ISO_LANGUAGE_CODE_GLA",
		250: "ISO_LANGUAGE_CODE_GLG",
		251: "ISO_LANGUAGE_CODE_GRN",
		252: "ISO_LANGUAGE_CODE_GUJ",
		253: "ISO_LANGUAGE_CODE_GLV",
		254: "ISO_LANGUAGE_CODE_HAU",
		255: "ISO_LANGUAGE_CODE_HEB",
		256: "ISO_LANGUAGE_CODE_HIN",
		257: "ISO_LANGUAGE_CODE_HMO",
		258: "ISO_LANGUAGE_CODE_HRV",
		259: "ISO_LANGUAGE_CODE_HAT",
		260: "ISO_LANGUAGE_CODE_HUN",
		261: "ISO_LANGUAGE_CODE_HYE",
		262: "ISO_LANGUAGE_CODE_HER",
		263: "ISO_LANGUAGE_CODE_INA",
		264: "ISO_LANGUAGE_CODE_IND",
		265: "ISO_LANGUAGE_CODE_ILE",
		266: "ISO_LANGUAGE_CODE_IBO",
		267: "ISO_LANGUAGE_CODE_III",
		268: "ISO_LANGUAGE_CODE_IPK",
		269: "ISO_LANGUAGE_CODE_IDO",
		270: "ISO_LANGUAGE_CODE_ISL",
		271: "ISO_LANGUAGE_CODE_ITA",
		272: "ISO_LANGUAGE_CODE_IKU",
		273: "ISO_LANGUAGE_CODE_JPN",
		274: "ISO_LANGUAGE_CODE_JAV",
		275: "ISO_LANGUAGE_CODE_KAT",
		276: "ISO_LANGUAGE_CODE_KON",
		277: "ISO_LANGUAGE_CODE_KIK",
		278: "ISO_LANGUAGE_CODE_KUA",
		279: "ISO_LANGUAGE_CODE_KAZ",
		280: "ISO_LANGUAGE_CODE_KAL",
		281: "ISO_LANGUAGE_CODE_KHM",
		282: "ISO_LANGUAGE_CODE_KAN",
		283: "ISO_LANGUAGE_CODE_KOR",
		284: "ISO_LANGUAGE_CODE_KAU",
		285: "ISO_LANGUAGE_CODE_KAS",
		286: "ISO_LANGUAGE_CODE_KUR",
		287: "ISO_LANGUAGE_CODE_KOM",
		288: "ISO_LANGUAGE_CODE_COR",
		289: "ISO_LANGUAGE_CODE_KIR",
		290: "ISO_LANGUAGE_CODE_LAT",
		291: "ISO_LANGUAGE_CODE_LTZ",
		292: "ISO_LANGUAGE_CODE_LUG",
		293: "ISO_LANGUAGE_CODE_LIM",
		294: "ISO_LANGUAGE_CODE_LIN",
		295: "ISO_LANGUAGE_CODE_LAO",
		296: "ISO_LANGUAGE_CODE_LIT",
		297: "ISO_LANGUAGE_CODE_LUB",
		298: "ISO_LANGUAGE_CODE_LAV",
		299: "ISO_LANGUAGE_CODE_MLG",
		300: "ISO_LANGUAGE_CODE_MAH",
		301: "ISO_LANGUAGE_CODE_MRI",
		302: "ISO_LANGUAGE_CODE_MKD",
		303: "ISO_LANGUAGE_CODE_MAL",
		304: "ISO_LANGUAGE_CODE_MON",
		305: "ISO_LANGUAGE_CODE_MAR",
		306: "ISO_LANGUAGE_CODE_MSA",
		307: "ISO_LANGUAGE_CODE_MLT",
		308: "ISO_LANGUAGE_CODE_MYA",
		309: "ISO_LANGUAGE_CODE_NAU",
		310: "ISO_LANGUAGE_CODE_NOB",
		311: "ISO_LANGUAGE_CODE_NDE",
		312: "ISO_LANGUAGE_CODE_NEP",
		313: "ISO_LANGUAGE_CODE_NDO",
		314: "ISO_LANGUAGE_CODE_NLD",
		315: "ISO_LANGUAGE_CODE_NNO",
		316: "ISO_LANGUAGE_CODE_NOR",
		317: "ISO_LANGUAGE_CODE_NBL",
		318: "ISO_LANGUAGE_CODE_NAV",
		319: "ISO_LANGUAGE_CODE_NYA",
		320: "ISO_LANGUAGE_CODE_OCI",
		321: "ISO_LANGUAGE_CODE_OJI",
		322: "ISO_LANGUAGE_CODE_ORM",
		323: "ISO_LANGUAGE_CODE_ORI",
		324: "ISO_LANGUAGE_CODE_OSS",
		325: "ISO_LANGUAGE_CODE_PAN",
		326: "ISO_LANGUAGE_CODE_PLI",
		327: "ISO_LANGUAGE_CODE_POL",
		328: "ISO_LANGUAGE_CODE_PUS",
		329: "ISO_LANGUAGE_CODE_POR",
		330: "ISO_LANGUAGE_CODE_QUE",
		331: "ISO_LANGUAGE_CODE_ROH",
		332: "ISO_LANGUAGE_CODE_RUN",
		333: "ISO_LANGUAGE_CODE_RON",
		334: "ISO_LANGUAGE_CODE_RUS",
		335: "ISO_LANGUAGE_CODE_KIN",
		336: "ISO_LANGUAGE_CODE_SAN",
		337: "ISO_LANGUAGE_CODE_SRD",
		338: "ISO_LANGUAGE_CODE_SND",
		339: "ISO_LANGUAGE_CODE_SME",
		340: "ISO_LANGUAGE_CODE_SAG",
		341: "ISO_LANGUAGE_CODE_SIN",
		342: "ISO_LANGUAGE_CODE_SLK",
		343: "ISO_LANGUAGE_CODE_SLV",
		344: "ISO_LANGUAGE_CODE_SMO",
		345: "ISO_LANGUAGE_CODE_SNA",
		346: "ISO_LANGUAGE_CODE_SOM",
		347: "ISO_LANGUAGE_CODE_SQI",
		348: "ISO_LANGUAGE_CODE_SRP",
		349: "ISO_LANGUAGE_CODE_SSW",
		350: "ISO_LANGUAGE_CODE_SOT",
		351: "ISO_LANGUAGE_CODE_SUN",
		352: "ISO_LANGUAGE_CODE_SWE",
		353: "ISO_LANGUAGE_CODE_SWA",
		354: "ISO_LANGUAGE_CODE_TAM",
		355: "ISO_LANGUAGE_CODE_TEL",
		356: "ISO_LANGUAGE_CODE_TGK",
		357: "ISO_LANGUAGE_CODE_THA",
		358: "ISO_LANGUAGE_CODE_TIR",
		359: "ISO_LANGUAGE_CODE_TUK",
		360: "ISO_LANGUAGE_CODE_TGL",
		361: "ISO_LANGUAGE_CODE_TSN",
		362: "ISO_LANGUAGE_CODE_TON",
		363: "ISO_LANGUAGE_CODE_TUR",
		364: "ISO_LANGUAGE_CODE_TSO",
		365: "ISO_LANGUAGE_CODE_TAT",
		366: "ISO_LANGUAGE_CODE_TWI",
		367: "ISO_LANGUAGE_CODE_TAH",
		368: "ISO_LANGUAGE_CODE_UIG",
		369: "ISO_LANGUAGE_CODE_UKR",
		370: "ISO_LANGUAGE_CODE_URD",
		371: "ISO_LANGUAGE_CODE_UZB",
		372: "ISO_LANGUAGE_CODE_VEN",
		373: "ISO_LANGUAGE_CODE_VIE",
		374: "ISO_LANGUAGE_CODE_VOL",
		375: "ISO_LANGUAGE_CODE_WLN",
		376: "ISO_LANGUAGE_CODE_WOL",
		377: "ISO_LANGUAGE_CODE_XHO",
		378: "ISO_LANGUAGE_CODE_YID",
		379: "ISO_LANGUAGE_CODE_YOR",
		380: "ISO_LANGUAGE_CODE_ZHA",
		381: "ISO_LANGUAGE_CODE_ZHO",
		382: "ISO_LANGUAGE_CODE_ZUL",
		383: "ISO_LANGUAGE_CODE_ACE",
		384: "ISO_LANGUAGE_CODE_ACH",
		385: "ISO_LANGUAGE_CODE_ADA",
		386: "ISO_LANGUAGE_CODE_ADY",
		387: "ISO_LANGUAGE_CODE_AFA",
		388: "ISO_LANGUAGE_CODE_AFH",
		389: "ISO_LANGUAGE_CODE_AIN",
		390: "ISO_LANGUAGE_CODE_AKK",
		391: "ISO_LANGUAGE_CODE_ALE",
		392: "ISO_LANGUAGE_CODE_ALG",
		393: "ISO_LANGUAGE_CODE_ALT",
		394: "ISO_LANGUAGE_CODE_ANG",
		395: "ISO_LANGUAGE_CODE_ANP",
		396: "ISO_LANGUAGE_CODE_APA",
		397: "ISO_LANGUAGE_CODE_ARC",
		398: "ISO_LANGUAGE_CODE_ARN",
		399: "ISO_LANGUAGE_CODE_ARP",
		400: "ISO_LANGUAGE_CODE_ART",
		401: "ISO_LANGUAGE_CODE_ARW",
		402: "ISO_LANGUAGE_CODE_AST",
		403: "ISO_LANGUAGE_CODE_ATH",
		404: "ISO_LANGUAGE_CODE_AUS",
		405: "ISO_LANGUAGE_CODE_AWA",
		406: "ISO_LANGUAGE_CODE_BAD",
		407: "ISO_LANGUAGE_CODE_BAI",
		408: "ISO_LANGUAGE_CODE_BAL",
		409: "ISO_LANGUAGE_CODE_BAN",
		410: "ISO_LANGUAGE_CODE_BAS",
		411: "ISO_LANGUAGE_CODE_BAT",
		412: "ISO_LANGUAGE_CODE_BEJ",
		413: "ISO_LANGUAGE_CODE_BEM",
		414: "ISO_LANGUAGE_CODE_BER",
		415: "ISO_LANGUAGE_CODE_BIK",
		416: "ISO_LANGUAGE_CODE_BIN",
		417: "ISO_LANGUAGE_CODE_BLA",
		418: "ISO_LANGUAGE_CODE_BNT",
		419: "ISO_LANGUAGE_CODE_BRA",
		420: "ISO_LANGUAGE_CODE_BTK",
		421: "ISO_LANGUAGE_CODE_BUA",
		422: "ISO_LANGUAGE_CODE_BUG",
		423: "ISO_LANGUAGE_CODE_BYN",
		424: "ISO_LANGUAGE_CODE_CAD",
		425: "ISO_LANGUAGE_CODE_CAI",
		426: "ISO_LANGUAGE_CODE_CAR",
		427: "ISO_LANGUAGE_CODE_CAU",
		428: "ISO_LANGUAGE_CODE_CEB",
		429: "ISO_LANGUAGE_CODE_CEL",
		430: "ISO_LANGUAGE_CODE_CHB",
		431: "ISO_LANGUAGE_CODE_CHG",
		432: "ISO_LANGUAGE_CODE_CHK",
		433: "ISO_LANGUAGE_CODE_CHM",
		434: "ISO_LANGUAGE_CODE_CHN",
		435: "ISO_LANGUAGE_CODE_CHO",
		436: "ISO_LANGUAGE_CODE_CHP",
		437: "ISO_LANGUAGE_CODE_CHR",
		438: "ISO_LANGUAGE_CODE_CHY",
		439: "ISO_LANGUAGE_CODE_CMC",
		440: "ISO_LANGUAGE_CODE_CNR",
		441: "ISO_LANGUAGE_CODE_COP",
		442: "ISO_LANGUAGE_CODE_CPE",
		443: "ISO_LANGUAGE_CODE_CPF",
		444: "ISO_LANGUAGE_CODE_CPP",
		445: "ISO_LANGUAGE_CODE_CRH",
		446: "ISO_LANGUAGE_CODE_CRP",
		447: "ISO_LANGUAGE_CODE_CSB",
		448: "ISO_LANGUAGE_CODE_CUS",
		449: "ISO_LANGUAGE_CODE_DAK",
		450: "ISO_LANGUAGE_CODE_DAR",
		451: "ISO_LANGUAGE_CODE_DAY",
		452: "ISO_LANGUAGE_CODE_DEL",
		453: "ISO_LANGUAGE_CODE_DEN",
		454: "ISO_LANGUAGE_CODE_DGR",
		455: "ISO_LANGUAGE_CODE_DIN",
		456: "ISO_LANGUAGE_CODE_DOI",
		457: "ISO_LANGUAGE_CODE_DRA",
		458: "ISO_LANGUAGE_CODE_DSB",
		459: "ISO_LANGUAGE_CODE_DUA",
		460: "ISO_LANGUAGE_CODE_DUM",
		461: "ISO_LANGUAGE_CODE_DYU",
		462: "ISO_LANGUAGE_CODE_EFI",
		463: "ISO_LANGUAGE_CODE_EGY",
		464: "ISO_LANGUAGE_CODE_EKA",
		465: "ISO_LANGUAGE_CODE_ELX",
		466: "ISO_LANGUAGE_CODE_ENM",
		467: "ISO_LANGUAGE_CODE_EWO",
		468: "ISO_LANGUAGE_CODE_FAN",
		469: "ISO_LANGUAGE_CODE_FAT",
		470: "ISO_LANGUAGE_CODE_FIL",
		471: "ISO_LANGUAGE_CODE_FIU",
		472: "ISO_LANGUAGE_CODE_FON",
		473: "ISO_LANGUAGE_CODE_FRM",
		474: "ISO_LANGUAGE_CODE_FRO",
		475: "ISO_LANGUAGE_CODE_FRR",
		476: "ISO_LANGUAGE_CODE_FRS",
		477: "ISO_LANGUAGE_CODE_FUR",
		478: "ISO_LANGUAGE_CODE_GAA",
		479: "ISO_LANGUAGE_CODE_GAY",
		480: "ISO_LANGUAGE_CODE_GBA",
		481: "ISO_LANGUAGE_CODE_GEM",
		482: "ISO_LANGUAGE_CODE_GEZ",
		483: "ISO_LANGUAGE_CODE_GIL",
		484: "ISO_LANGUAGE_CODE_GMH",
		485: "ISO_LANGUAGE_CODE_GOH",
		486: "ISO_LANGUAGE_CODE_GON",
		487: "ISO_LANGUAGE_CODE_GOR",
		488: "ISO_LANGUAGE_CODE_GOT",
		489: "ISO_LANGUAGE_CODE_GRB",
		490: "ISO_LANGUAGE_CODE_GRC",
		491: "ISO_LANGUAGE_CODE_GSW",
		492: "ISO_LANGUAGE_CODE_GWI",
		493: "ISO_LANGUAGE_CODE_HAI",
		494: "ISO_LANGUAGE_CODE_HAW",
		495: "ISO_LANGUAGE_CODE_HIL",
		496: "ISO_LANGUAGE_CODE_HIM",
		497: "ISO_LANGUAGE_CODE_HIT",
		498: "ISO_LANGUAGE_CODE_HMN",
		499: "ISO_LANGUAGE_CODE_HSB",
		500: "ISO_LANGUAGE_CODE_HUP",
		501: "ISO_LANGUAGE_CODE_IBA",
		502: "ISO_LANGUAGE_CODE_IJO",
		503: "ISO_LANGUAGE_CODE_ILO",
		504: "ISO_LANGUAGE_CODE_INC",
		505: "ISO_LANGUAGE_CODE_INE",
		506: "ISO_LANGUAGE_CODE_INH",
		507: "ISO_LANGUAGE_CODE_IRA",
		508: "ISO_LANGUAGE_CODE_IRO",
		509: "ISO_LANGUAGE_CODE_JBO",
		510: "ISO_LANGUAGE_CODE_JPR",
		511: "ISO_LANGUAGE_CODE_JRB",
		512: "ISO_LANGUAGE_CODE_KAA",
		513: "ISO_LANGUAGE_CODE_KAB",
		514: "ISO_LANGUAGE_CODE_KAC",
		515: "ISO_LANGUAGE_CODE_KAM",
		516: "ISO_LANGUAGE_CODE_KAR",
		517: "ISO_LANGUAGE_CODE_KAW",
		518: "ISO_LANGUAGE_CODE_KBD",
		519: "ISO_LANGUAGE_CODE_KHA",
		520: "ISO_LANGUAGE_CODE_KHI",
		521: "ISO_LANGUAGE_CODE_KHO",
		522: "ISO_LANGUAGE_CODE_KMB",
		523: "ISO_LANGUAGE_CODE_KOK",
		524: "ISO_LANGUAGE_CODE_KOS",
		525: "ISO_LANGUAGE_CODE_KPE",
		526: "ISO_LANGUAGE_CODE_KRC",
		527: "ISO_LANGUAGE_CODE_KRL",
		528: "ISO_LANGUAGE_CODE_KRO",
		529: "ISO_LANGUAGE_CODE_KRU",
		530: "ISO_LANGUAGE_CODE_KUM",
		531: "ISO_LANGUAGE_CODE_KUT",
		532: "ISO_LANGUAGE_CODE_LAD",
		533: "ISO_LANGUAGE_CODE_LAH",
		534: "ISO_LANGUAGE_CODE_LAM",
		535: "ISO_LANGUAGE_CODE_LEZ",
		536: "ISO_LANGUAGE_CODE_LOL",
		537: "ISO_LANGUAGE_CODE_LOZ",
		538: "ISO_LANGUAGE_CODE_LUA",
		539: "ISO_LANGUAGE_CODE_LUI",
		540: "ISO_LANGUAGE_CODE_LUN",
		541: "ISO_LANGUAGE_CODE_LUO",
		542: "ISO_LANGUAGE_CODE_LUS",
		543: "ISO_LANGUAGE_CODE_MAD",
		544: "ISO_LANGUAGE_CODE_MAG",
		545: "ISO_LANGUAGE_CODE_MAI",
		546: "ISO_LANGUAGE_CODE_MAK",
		547: "ISO_LANGUAGE_CODE_MAN",
		548: "ISO_LANGUAGE_CODE_MAP",
		549: "ISO_LANGUAGE_CODE_MAS",
		550: "ISO_LANGUAGE_CODE_MDF",
		551: "ISO_LANGUAGE_CODE_MDR",
		552: "ISO_LANGUAGE_CODE_MEN",
		553: "ISO_LANGUAGE_CODE_MGA",
		554: "ISO_LANGUAGE_CODE_MIC",
		555: "ISO_LANGUAGE_CODE_MIN",
		556: "ISO_LANGUAGE_CODE_MIS",
		557: "ISO_LANGUAGE_CODE_MKH",
		558: "ISO_LANGUAGE_CODE_MNC",
		559: "ISO_LANGUAGE_CODE_MNI",
		560: "ISO_LANGUAGE_CODE_MNO",
		561: "ISO_LANGUAGE_CODE_MOH",
		562: "ISO_LANGUAGE_CODE_MOS",
		563: "ISO_LANGUAGE_CODE_MUL",
		564: "ISO_LANGUAGE_CODE_MUN",
		565: "ISO_LANGUAGE_CODE_MUS",
		566: "ISO_LANGUAGE_CODE_MWL",
		567: "ISO_LANGUAGE_CODE_MWR",
		568: "ISO_LANGUAGE_CODE_MYN",
		569: "ISO_LANGUAGE_CODE_MYV",
		570: "ISO_LANGUAGE_CODE_NAH",
		571: "ISO_LANGUAGE_CODE_NAI",
		572: "ISO_LANGUAGE_CODE_NAP",
		573: "ISO_LANGUAGE_CODE_NDS",
		574: "ISO_LANGUAGE_CODE_NEW",
		575: "ISO_LANGUAGE_CODE_NIA",
		576: "ISO_LANGUAGE_CODE_NIC",
		577: "ISO_LANGUAGE_CODE_NIU",
		578: "ISO_LANGUAGE_CODE_NOG",
		579: "ISO_LANGUAGE_CODE_NON",
		580: "ISO_LANGUAGE_CODE_NQO",
		581: "ISO_LANGUAGE_CODE_NSO",
		582: "ISO_LANGUAGE_CODE_NUB",
		583: "ISO_LANGUAGE_CODE_NWC",
		584: "ISO_LANGUAGE_CODE_NYM",
		585: "ISO_LANGUAGE_CODE_NYN",
		586: "ISO_LANGUAGE_CODE_NYO",
		587: "ISO_LANGUAGE_CODE_NZI",
		588: "ISO_LANGUAGE_CODE_OSA",
		589: "ISO_LANGUAGE_CODE_OTA",
		590: "ISO_LANGUAGE_CODE_OTO",
		591: "ISO_LANGUAGE_CODE_PAA",
		592: "ISO_LANGUAGE_CODE_PAG",
		593: "ISO_LANGUAGE_CODE_PAL",
		594: "ISO_LANGUAGE_CODE_PAM",
		595: "ISO_LANGUAGE_CODE_PAP",
		596: "ISO_LANGUAGE_CODE_PAU",
		597: "ISO_LANGUAGE_CODE_PEO",
		598: "ISO_LANGUAGE_CODE_PHI",
		599: "ISO_LANGUAGE_CODE_PHN",
		600: "ISO_LANGUAGE_CODE_PON",
		601: "ISO_LANGUAGE_CODE_PRA",
		602: "ISO_LANGUAGE_CODE_PRO",
		603: "ISO_LANGUAGE_CODE_RAP",
		604: "ISO_LANGUAGE_CODE_RAR",
		605: "ISO_LANGUAGE_CODE_ROA",
		606: "ISO_LANGUAGE_CODE_ROM",
		607: "ISO_LANGUAGE_CODE_RUP",
		608: "ISO_LANGUAGE_CODE_SAD",
		609: "ISO_LANGUAGE_CODE_SAH",
		610: "ISO_LANGUAGE_CODE_SAI",
		611: "ISO_LANGUAGE_CODE_SAL",
		612: "ISO_LANGUAGE_CODE_SAM",
		613: "ISO_LANGUAGE_CODE_SAS",
		614: "ISO_LANGUAGE_CODE_SAT",
		615: "ISO_LANGUAGE_CODE_SCN",
		616: "ISO_LANGUAGE_CODE_SCO",
		617: "ISO_LANGUAGE_CODE_SEL",
		618: "ISO_LANGUAGE_CODE_SEM",
		619: "ISO_LANGUAGE_CODE_SGA",
		620: "ISO_LANGUAGE_CODE_SGN",
		621: "ISO_LANGUAGE_CODE_SHN",
		622: "ISO_LANGUAGE_CODE_SID",
		623: "ISO_LANGUAGE_CODE_SIO",
		624: "ISO_LANGUAGE_CODE_SIT",
		625: "ISO_LANGUAGE_CODE_SLA",
		626: "ISO_LANGUAGE_CODE_SMA",
		627: "ISO_LANGUAGE_CODE_SMI",
		628: "ISO_LANGUAGE_CODE_SMJ",
		629: "ISO_LANGUAGE_CODE_SMN",
		630: "ISO_LANGUAGE_CODE_SMS",
		631: "ISO_LANGUAGE_CODE_SNK",
		632: "ISO_LANGUAGE_CODE_SOG",
		633: "ISO_LANGUAGE_CODE_SON",
		634: "ISO_LANGUAGE_CODE_SRN",
		635: "ISO_LANGUAGE_CODE_SRR",
		636: "ISO_LANGUAGE_CODE_SSA",
		637: "ISO_LANGUAGE_CODE_SUK",
		638: "ISO_LANGUAGE_CODE_SUS",
		639: "ISO_LANGUAGE_CODE_SUX",
		640: "ISO_LANGUAGE_CODE_SYC",
		641: "ISO_LANGUAGE_CODE_SYR",
		642: "ISO_LANGUAGE_CODE_TAI",
		643: "ISO_LANGUAGE_CODE_TEM",
		644: "ISO_LANGUAGE_CODE_TER",
		645: "ISO_LANGUAGE_CODE_TET",
		646: "ISO_LANGUAGE_CODE_TIG",
		647: "ISO_LANGUAGE_CODE_TIV",
		648: "ISO_LANGUAGE_CODE_TKL",
		649: "ISO_LANGUAGE_CODE_TLH",
		650: "ISO_LANGUAGE_CODE_TLI",
		651: "ISO_LANGUAGE_CODE_TMH",
		652: "ISO_LANGUAGE_CODE_TOG",
		653: "ISO_LANGUAGE_CODE_TPI",
		654: "ISO_LANGUAGE_CODE_TSI",
		655: "ISO_LANGUAGE_CODE_TUM",
		656: "ISO_LANGUAGE_CODE_TUP",
		657: "ISO_LANGUAGE_CODE_TUT",
		658: "ISO_LANGUAGE_CODE_TVL",
		659: "ISO_LANGUAGE_CODE_TYV",
		660: "ISO_LANGUAGE_CODE_UDM",
		661: "ISO_LANGUAGE_CODE_UGA",
		662: "ISO_LANGUAGE_CODE_UMB",
		663: "ISO_LANGUAGE_CODE_UND",
		664: "ISO_LANGUAGE_CODE_VAI",
		665: "ISO_LANGUAGE_CODE_VOT",
		666: "ISO_LANGUAGE_CODE_WAK",
		667: "ISO_LANGUAGE_CODE_WAL",
		668: "ISO_LANGUAGE_CODE_WAR",
		669: "ISO_LANGUAGE_CODE_WAS",
		670: "ISO_LANGUAGE_CODE_WEN",
		671: "ISO_LANGUAGE_CODE_XAL",
		672: "ISO_LANGUAGE_CODE_YAO",
		673: "ISO_LANGUAGE_CODE_YAP",
		674: "ISO_LANGUAGE_CODE_YPK",
		675: "ISO_LANGUAGE_CODE_ZAP",
		676: "ISO_LANGUAGE_CODE_ZBL",
		677: "ISO_LANGUAGE_CODE_ZEN",
		678: "ISO_LANGUAGE_CODE_ZGH",
		679: "ISO_LANGUAGE_CODE_ZND",
		680: "ISO_LANGUAGE_CODE_ZUN",
		681: "ISO_LANGUAGE_CODE_ZXX",
		682: "ISO_LANGUAGE_CODE_ZZA",
		683: "ISO_LANGUAGE_CODE_AAA",
		684: "ISO_LANGUAGE_CODE_HNE",
		685: "ISO_LANGUAGE_CODE_GBM",
		686: "ISO_LANGUAGE_CODE_KHW",
		687: "ISO_LANGUAGE_CODE_CMN",
		688: "ISO_LANGUAGE_CODE_SCK",
		689: "ISO_LANGUAGE_CODE_SPV",
		690: "ISO_LANGUAGE_CODE_SCL",
		691: "ISO_LANGUAGE_CODE_YUE",
		692: "ISO_LANGUAGE_CODE_TCY",
		693: "ISO_LANGUAGE_CODE_KEY",
		694: "ISO_LANGUAGE_CODE_GCF",
		695: "ISO_LANGUAGE_CODE_JAM",
		696: "ISO_LANGUAGE_CODE_MCM",
	}
	IsoLanguageCode_value = map[string]int32{
		"ISO_LANGUAGE_CODE_UNSPECIFIED": 0,
		"ISO_LANGUAGE_CODE_RAJ":         1,
		"ISO_LANGUAGE_CODE_BHO":         2,
		"ISO_LANGUAGE_CODE_AA":          3,
		"ISO_LANGUAGE_CODE_AB":          4,
		"ISO_LANGUAGE_CODE_AE":          5,
		"ISO_LANGUAGE_CODE_AF":          6,
		"ISO_LANGUAGE_CODE_AK":          7,
		"ISO_LANGUAGE_CODE_AM":          8,
		"ISO_LANGUAGE_CODE_AN":          9,
		"ISO_LANGUAGE_CODE_AR":          10,
		"ISO_LANGUAGE_CODE_AS":          11,
		"ISO_LANGUAGE_CODE_AV":          12,
		"ISO_LANGUAGE_CODE_AY":          13,
		"ISO_LANGUAGE_CODE_AZ":          14,
		"ISO_LANGUAGE_CODE_BA":          15,
		"ISO_LANGUAGE_CODE_BE":          16,
		"ISO_LANGUAGE_CODE_BG":          17,
		"ISO_LANGUAGE_CODE_BH":          18,
		"ISO_LANGUAGE_CODE_BI":          19,
		"ISO_LANGUAGE_CODE_BM":          20,
		"ISO_LANGUAGE_CODE_BN":          21,
		"ISO_LANGUAGE_CODE_BO":          22,
		"ISO_LANGUAGE_CODE_BR":          23,
		"ISO_LANGUAGE_CODE_BS":          24,
		"ISO_LANGUAGE_CODE_CA":          25,
		"ISO_LANGUAGE_CODE_CE":          26,
		"ISO_LANGUAGE_CODE_CH":          27,
		"ISO_LANGUAGE_CODE_CO":          28,
		"ISO_LANGUAGE_CODE_CR":          29,
		"ISO_LANGUAGE_CODE_CS":          30,
		"ISO_LANGUAGE_CODE_CU":          31,
		"ISO_LANGUAGE_CODE_CV":          32,
		"ISO_LANGUAGE_CODE_CY":          33,
		"ISO_LANGUAGE_CODE_DA":          34,
		"ISO_LANGUAGE_CODE_DE":          35,
		"ISO_LANGUAGE_CODE_DV":          36,
		"ISO_LANGUAGE_CODE_DZ":          37,
		"ISO_LANGUAGE_CODE_EE":          38,
		"ISO_LANGUAGE_CODE_EL":          39,
		"ISO_LANGUAGE_CODE_EN":          40,
		"ISO_LANGUAGE_CODE_EO":          41,
		"ISO_LANGUAGE_CODE_ES":          42,
		"ISO_LANGUAGE_CODE_ET":          43,
		"ISO_LANGUAGE_CODE_EU":          44,
		"ISO_LANGUAGE_CODE_FA":          45,
		"ISO_LANGUAGE_CODE_FF":          46,
		"ISO_LANGUAGE_CODE_FI":          47,
		"ISO_LANGUAGE_CODE_FJ":          48,
		"ISO_LANGUAGE_CODE_FO":          49,
		"ISO_LANGUAGE_CODE_FR":          50,
		"ISO_LANGUAGE_CODE_FY":          51,
		"ISO_LANGUAGE_CODE_GA":          52,
		"ISO_LANGUAGE_CODE_GD":          53,
		"ISO_LANGUAGE_CODE_GL":          54,
		"ISO_LANGUAGE_CODE_GN":          55,
		"ISO_LANGUAGE_CODE_GU":          56,
		"ISO_LANGUAGE_CODE_GV":          57,
		"ISO_LANGUAGE_CODE_HA":          58,
		"ISO_LANGUAGE_CODE_HE":          59,
		"ISO_LANGUAGE_CODE_HI":          60,
		"ISO_LANGUAGE_CODE_HO":          61,
		"ISO_LANGUAGE_CODE_HR":          62,
		"ISO_LANGUAGE_CODE_HT":          63,
		"ISO_LANGUAGE_CODE_HU":          64,
		"ISO_LANGUAGE_CODE_HY":          65,
		"ISO_LANGUAGE_CODE_HZ":          66,
		"ISO_LANGUAGE_CODE_IA":          67,
		"ISO_LANGUAGE_CODE_ID":          68,
		"ISO_LANGUAGE_CODE_IE":          69,
		"ISO_LANGUAGE_CODE_IG":          70,
		"ISO_LANGUAGE_CODE_II":          71,
		"ISO_LANGUAGE_CODE_IK":          72,
		"ISO_LANGUAGE_CODE_IO":          73,
		"ISO_LANGUAGE_CODE_IS":          74,
		"ISO_LANGUAGE_CODE_IT":          75,
		"ISO_LANGUAGE_CODE_IU":          76,
		"ISO_LANGUAGE_CODE_JA":          77,
		"ISO_LANGUAGE_CODE_JV":          78,
		"ISO_LANGUAGE_CODE_KA":          79,
		"ISO_LANGUAGE_CODE_KG":          80,
		"ISO_LANGUAGE_CODE_KI":          81,
		"ISO_LANGUAGE_CODE_KJ":          82,
		"ISO_LANGUAGE_CODE_KK":          83,
		"ISO_LANGUAGE_CODE_KL":          84,
		"ISO_LANGUAGE_CODE_KM":          85,
		"ISO_LANGUAGE_CODE_KN":          86,
		"ISO_LANGUAGE_CODE_KO":          87,
		"ISO_LANGUAGE_CODE_KR":          88,
		"ISO_LANGUAGE_CODE_KS":          89,
		"ISO_LANGUAGE_CODE_KU":          90,
		"ISO_LANGUAGE_CODE_KV":          91,
		"ISO_LANGUAGE_CODE_KW":          92,
		"ISO_LANGUAGE_CODE_KY":          93,
		"ISO_LANGUAGE_CODE_LA":          94,
		"ISO_LANGUAGE_CODE_LB":          95,
		"ISO_LANGUAGE_CODE_LG":          96,
		"ISO_LANGUAGE_CODE_LI":          97,
		"ISO_LANGUAGE_CODE_LN":          98,
		"ISO_LANGUAGE_CODE_LO":          99,
		"ISO_LANGUAGE_CODE_LT":          100,
		"ISO_LANGUAGE_CODE_LU":          101,
		"ISO_LANGUAGE_CODE_LV":          102,
		"ISO_LANGUAGE_CODE_MG":          103,
		"ISO_LANGUAGE_CODE_MH":          104,
		"ISO_LANGUAGE_CODE_MI":          105,
		"ISO_LANGUAGE_CODE_MK":          106,
		"ISO_LANGUAGE_CODE_ML":          107,
		"ISO_LANGUAGE_CODE_MN":          108,
		"ISO_LANGUAGE_CODE_MO":          109,
		"ISO_LANGUAGE_CODE_MR":          110,
		"ISO_LANGUAGE_CODE_MS":          111,
		"ISO_LANGUAGE_CODE_MT":          112,
		"ISO_LANGUAGE_CODE_MY":          113,
		"ISO_LANGUAGE_CODE_NA":          114,
		"ISO_LANGUAGE_CODE_NB":          115,
		"ISO_LANGUAGE_CODE_ND":          116,
		"ISO_LANGUAGE_CODE_NE":          117,
		"ISO_LANGUAGE_CODE_NG":          118,
		"ISO_LANGUAGE_CODE_NL":          119,
		"ISO_LANGUAGE_CODE_NN":          120,
		"ISO_LANGUAGE_CODE_NO":          121,
		"ISO_LANGUAGE_CODE_NR":          122,
		"ISO_LANGUAGE_CODE_NV":          123,
		"ISO_LANGUAGE_CODE_NY":          124,
		"ISO_LANGUAGE_CODE_OC":          125,
		"ISO_LANGUAGE_CODE_OJ":          126,
		"ISO_LANGUAGE_CODE_OM":          127,
		"ISO_LANGUAGE_CODE_OR":          128,
		"ISO_LANGUAGE_CODE_OS":          129,
		"ISO_LANGUAGE_CODE_PA":          130,
		"ISO_LANGUAGE_CODE_PI":          131,
		"ISO_LANGUAGE_CODE_PL":          132,
		"ISO_LANGUAGE_CODE_PS":          133,
		"ISO_LANGUAGE_CODE_PT":          134,
		"ISO_LANGUAGE_CODE_QU":          135,
		"ISO_LANGUAGE_CODE_RM":          136,
		"ISO_LANGUAGE_CODE_RN":          137,
		"ISO_LANGUAGE_CODE_RO":          138,
		"ISO_LANGUAGE_CODE_RU":          139,
		"ISO_LANGUAGE_CODE_RW":          140,
		"ISO_LANGUAGE_CODE_SA":          141,
		"ISO_LANGUAGE_CODE_SC":          142,
		"ISO_LANGUAGE_CODE_SD":          143,
		"ISO_LANGUAGE_CODE_SE":          144,
		"ISO_LANGUAGE_CODE_SG":          145,
		"ISO_LANGUAGE_CODE_SI":          146,
		"ISO_LANGUAGE_CODE_SK":          147,
		"ISO_LANGUAGE_CODE_SL":          148,
		"ISO_LANGUAGE_CODE_SM":          149,
		"ISO_LANGUAGE_CODE_SN":          150,
		"ISO_LANGUAGE_CODE_SO":          151,
		"ISO_LANGUAGE_CODE_SQ":          152,
		"ISO_LANGUAGE_CODE_SR":          153,
		"ISO_LANGUAGE_CODE_SS":          154,
		"ISO_LANGUAGE_CODE_ST":          155,
		"ISO_LANGUAGE_CODE_SU":          156,
		"ISO_LANGUAGE_CODE_SV":          157,
		"ISO_LANGUAGE_CODE_SW":          158,
		"ISO_LANGUAGE_CODE_TA":          159,
		"ISO_LANGUAGE_CODE_TE":          160,
		"ISO_LANGUAGE_CODE_TG":          161,
		"ISO_LANGUAGE_CODE_TH":          162,
		"ISO_LANGUAGE_CODE_TI":          163,
		"ISO_LANGUAGE_CODE_TK":          164,
		"ISO_LANGUAGE_CODE_TL":          165,
		"ISO_LANGUAGE_CODE_TN":          166,
		"ISO_LANGUAGE_CODE_TO":          167,
		"ISO_LANGUAGE_CODE_TR":          168,
		"ISO_LANGUAGE_CODE_TS":          169,
		"ISO_LANGUAGE_CODE_TT":          170,
		"ISO_LANGUAGE_CODE_TW":          171,
		"ISO_LANGUAGE_CODE_TY":          172,
		"ISO_LANGUAGE_CODE_UG":          173,
		"ISO_LANGUAGE_CODE_UK":          174,
		"ISO_LANGUAGE_CODE_UR":          175,
		"ISO_LANGUAGE_CODE_UZ":          176,
		"ISO_LANGUAGE_CODE_VE":          177,
		"ISO_LANGUAGE_CODE_VI":          178,
		"ISO_LANGUAGE_CODE_VO":          179,
		"ISO_LANGUAGE_CODE_WA":          180,
		"ISO_LANGUAGE_CODE_WO":          181,
		"ISO_LANGUAGE_CODE_XH":          182,
		"ISO_LANGUAGE_CODE_YI":          183,
		"ISO_LANGUAGE_CODE_YO":          184,
		"ISO_LANGUAGE_CODE_ZA":          185,
		"ISO_LANGUAGE_CODE_ZH":          186,
		"ISO_LANGUAGE_CODE_ZU":          187,
		"ISO_LANGUAGE_CODE_BGC":         188,
		"ISO_LANGUAGE_CODE_QQA":         189,
		"ISO_LANGUAGE_CODE_QQB":         190,
		"ISO_LANGUAGE_CODE_QQC":         191,
		"ISO_LANGUAGE_CODE_QQD":         192,
		"ISO_LANGUAGE_CODE_QQE":         193,
		"ISO_LANGUAGE_CODE_QQF":         194,
		"ISO_LANGUAGE_CODE_QQG":         195,
		"ISO_LANGUAGE_CODE_QQH":         196,
		"ISO_LANGUAGE_CODE_QQI":         197,
		"ISO_LANGUAGE_CODE_QQJ":         198,
		"ISO_LANGUAGE_CODE_AAR":         199,
		"ISO_LANGUAGE_CODE_ABK":         200,
		"ISO_LANGUAGE_CODE_AVE":         201,
		"ISO_LANGUAGE_CODE_AFR":         202,
		"ISO_LANGUAGE_CODE_AKA":         203,
		"ISO_LANGUAGE_CODE_AMH":         204,
		"ISO_LANGUAGE_CODE_ARG":         205,
		"ISO_LANGUAGE_CODE_ARA":         206,
		"ISO_LANGUAGE_CODE_ASM":         207,
		"ISO_LANGUAGE_CODE_AVA":         208,
		"ISO_LANGUAGE_CODE_AYM":         209,
		"ISO_LANGUAGE_CODE_AZE":         210,
		"ISO_LANGUAGE_CODE_BAK":         211,
		"ISO_LANGUAGE_CODE_BEL":         212,
		"ISO_LANGUAGE_CODE_BUL":         213,
		"ISO_LANGUAGE_CODE_BIH":         214,
		"ISO_LANGUAGE_CODE_BIS":         215,
		"ISO_LANGUAGE_CODE_BAM":         216,
		"ISO_LANGUAGE_CODE_BEN":         217,
		"ISO_LANGUAGE_CODE_BOD":         218,
		"ISO_LANGUAGE_CODE_BRE":         219,
		"ISO_LANGUAGE_CODE_BOS":         220,
		"ISO_LANGUAGE_CODE_CAT":         221,
		"ISO_LANGUAGE_CODE_CHE":         222,
		"ISO_LANGUAGE_CODE_CHA":         223,
		"ISO_LANGUAGE_CODE_COS":         224,
		"ISO_LANGUAGE_CODE_CRE":         225,
		"ISO_LANGUAGE_CODE_CES":         226,
		"ISO_LANGUAGE_CODE_CHU":         227,
		"ISO_LANGUAGE_CODE_CHV":         228,
		"ISO_LANGUAGE_CODE_CYM":         229,
		"ISO_LANGUAGE_CODE_DAN":         230,
		"ISO_LANGUAGE_CODE_DEU":         231,
		"ISO_LANGUAGE_CODE_DIV":         232,
		"ISO_LANGUAGE_CODE_DZO":         233,
		"ISO_LANGUAGE_CODE_EWE":         234,
		"ISO_LANGUAGE_CODE_ELL":         235,
		"ISO_LANGUAGE_CODE_ENG":         236,
		"ISO_LANGUAGE_CODE_EPO":         237,
		"ISO_LANGUAGE_CODE_SPA":         238,
		"ISO_LANGUAGE_CODE_EST":         239,
		"ISO_LANGUAGE_CODE_EUS":         240,
		"ISO_LANGUAGE_CODE_FAS":         241,
		"ISO_LANGUAGE_CODE_FUL":         242,
		"ISO_LANGUAGE_CODE_FIN":         243,
		"ISO_LANGUAGE_CODE_FIJ":         244,
		"ISO_LANGUAGE_CODE_FAO":         245,
		"ISO_LANGUAGE_CODE_FRA":         246,
		"ISO_LANGUAGE_CODE_FRY":         247,
		"ISO_LANGUAGE_CODE_GLE":         248,
		"ISO_LANGUAGE_CODE_GLA":         249,
		"ISO_LANGUAGE_CODE_GLG":         250,
		"ISO_LANGUAGE_CODE_GRN":         251,
		"ISO_LANGUAGE_CODE_GUJ":         252,
		"ISO_LANGUAGE_CODE_GLV":         253,
		"ISO_LANGUAGE_CODE_HAU":         254,
		"ISO_LANGUAGE_CODE_HEB":         255,
		"ISO_LANGUAGE_CODE_HIN":         256,
		"ISO_LANGUAGE_CODE_HMO":         257,
		"ISO_LANGUAGE_CODE_HRV":         258,
		"ISO_LANGUAGE_CODE_HAT":         259,
		"ISO_LANGUAGE_CODE_HUN":         260,
		"ISO_LANGUAGE_CODE_HYE":         261,
		"ISO_LANGUAGE_CODE_HER":         262,
		"ISO_LANGUAGE_CODE_INA":         263,
		"ISO_LANGUAGE_CODE_IND":         264,
		"ISO_LANGUAGE_CODE_ILE":         265,
		"ISO_LANGUAGE_CODE_IBO":         266,
		"ISO_LANGUAGE_CODE_III":         267,
		"ISO_LANGUAGE_CODE_IPK":         268,
		"ISO_LANGUAGE_CODE_IDO":         269,
		"ISO_LANGUAGE_CODE_ISL":         270,
		"ISO_LANGUAGE_CODE_ITA":         271,
		"ISO_LANGUAGE_CODE_IKU":         272,
		"ISO_LANGUAGE_CODE_JPN":         273,
		"ISO_LANGUAGE_CODE_JAV":         274,
		"ISO_LANGUAGE_CODE_KAT":         275,
		"ISO_LANGUAGE_CODE_KON":         276,
		"ISO_LANGUAGE_CODE_KIK":         277,
		"ISO_LANGUAGE_CODE_KUA":         278,
		"ISO_LANGUAGE_CODE_KAZ":         279,
		"ISO_LANGUAGE_CODE_KAL":         280,
		"ISO_LANGUAGE_CODE_KHM":         281,
		"ISO_LANGUAGE_CODE_KAN":         282,
		"ISO_LANGUAGE_CODE_KOR":         283,
		"ISO_LANGUAGE_CODE_KAU":         284,
		"ISO_LANGUAGE_CODE_KAS":         285,
		"ISO_LANGUAGE_CODE_KUR":         286,
		"ISO_LANGUAGE_CODE_KOM":         287,
		"ISO_LANGUAGE_CODE_COR":         288,
		"ISO_LANGUAGE_CODE_KIR":         289,
		"ISO_LANGUAGE_CODE_LAT":         290,
		"ISO_LANGUAGE_CODE_LTZ":         291,
		"ISO_LANGUAGE_CODE_LUG":         292,
		"ISO_LANGUAGE_CODE_LIM":         293,
		"ISO_LANGUAGE_CODE_LIN":         294,
		"ISO_LANGUAGE_CODE_LAO":         295,
		"ISO_LANGUAGE_CODE_LIT":         296,
		"ISO_LANGUAGE_CODE_LUB":         297,
		"ISO_LANGUAGE_CODE_LAV":         298,
		"ISO_LANGUAGE_CODE_MLG":         299,
		"ISO_LANGUAGE_CODE_MAH":         300,
		"ISO_LANGUAGE_CODE_MRI":         301,
		"ISO_LANGUAGE_CODE_MKD":         302,
		"ISO_LANGUAGE_CODE_MAL":         303,
		"ISO_LANGUAGE_CODE_MON":         304,
		"ISO_LANGUAGE_CODE_MAR":         305,
		"ISO_LANGUAGE_CODE_MSA":         306,
		"ISO_LANGUAGE_CODE_MLT":         307,
		"ISO_LANGUAGE_CODE_MYA":         308,
		"ISO_LANGUAGE_CODE_NAU":         309,
		"ISO_LANGUAGE_CODE_NOB":         310,
		"ISO_LANGUAGE_CODE_NDE":         311,
		"ISO_LANGUAGE_CODE_NEP":         312,
		"ISO_LANGUAGE_CODE_NDO":         313,
		"ISO_LANGUAGE_CODE_NLD":         314,
		"ISO_LANGUAGE_CODE_NNO":         315,
		"ISO_LANGUAGE_CODE_NOR":         316,
		"ISO_LANGUAGE_CODE_NBL":         317,
		"ISO_LANGUAGE_CODE_NAV":         318,
		"ISO_LANGUAGE_CODE_NYA":         319,
		"ISO_LANGUAGE_CODE_OCI":         320,
		"ISO_LANGUAGE_CODE_OJI":         321,
		"ISO_LANGUAGE_CODE_ORM":         322,
		"ISO_LANGUAGE_CODE_ORI":         323,
		"ISO_LANGUAGE_CODE_OSS":         324,
		"ISO_LANGUAGE_CODE_PAN":         325,
		"ISO_LANGUAGE_CODE_PLI":         326,
		"ISO_LANGUAGE_CODE_POL":         327,
		"ISO_LANGUAGE_CODE_PUS":         328,
		"ISO_LANGUAGE_CODE_POR":         329,
		"ISO_LANGUAGE_CODE_QUE":         330,
		"ISO_LANGUAGE_CODE_ROH":         331,
		"ISO_LANGUAGE_CODE_RUN":         332,
		"ISO_LANGUAGE_CODE_RON":         333,
		"ISO_LANGUAGE_CODE_RUS":         334,
		"ISO_LANGUAGE_CODE_KIN":         335,
		"ISO_LANGUAGE_CODE_SAN":         336,
		"ISO_LANGUAGE_CODE_SRD":         337,
		"ISO_LANGUAGE_CODE_SND":         338,
		"ISO_LANGUAGE_CODE_SME":         339,
		"ISO_LANGUAGE_CODE_SAG":         340,
		"ISO_LANGUAGE_CODE_SIN":         341,
		"ISO_LANGUAGE_CODE_SLK":         342,
		"ISO_LANGUAGE_CODE_SLV":         343,
		"ISO_LANGUAGE_CODE_SMO":         344,
		"ISO_LANGUAGE_CODE_SNA":         345,
		"ISO_LANGUAGE_CODE_SOM":         346,
		"ISO_LANGUAGE_CODE_SQI":         347,
		"ISO_LANGUAGE_CODE_SRP":         348,
		"ISO_LANGUAGE_CODE_SSW":         349,
		"ISO_LANGUAGE_CODE_SOT":         350,
		"ISO_LANGUAGE_CODE_SUN":         351,
		"ISO_LANGUAGE_CODE_SWE":         352,
		"ISO_LANGUAGE_CODE_SWA":         353,
		"ISO_LANGUAGE_CODE_TAM":         354,
		"ISO_LANGUAGE_CODE_TEL":         355,
		"ISO_LANGUAGE_CODE_TGK":         356,
		"ISO_LANGUAGE_CODE_THA":         357,
		"ISO_LANGUAGE_CODE_TIR":         358,
		"ISO_LANGUAGE_CODE_TUK":         359,
		"ISO_LANGUAGE_CODE_TGL":         360,
		"ISO_LANGUAGE_CODE_TSN":         361,
		"ISO_LANGUAGE_CODE_TON":         362,
		"ISO_LANGUAGE_CODE_TUR":         363,
		"ISO_LANGUAGE_CODE_TSO":         364,
		"ISO_LANGUAGE_CODE_TAT":         365,
		"ISO_LANGUAGE_CODE_TWI":         366,
		"ISO_LANGUAGE_CODE_TAH":         367,
		"ISO_LANGUAGE_CODE_UIG":         368,
		"ISO_LANGUAGE_CODE_UKR":         369,
		"ISO_LANGUAGE_CODE_URD":         370,
		"ISO_LANGUAGE_CODE_UZB":         371,
		"ISO_LANGUAGE_CODE_VEN":         372,
		"ISO_LANGUAGE_CODE_VIE":         373,
		"ISO_LANGUAGE_CODE_VOL":         374,
		"ISO_LANGUAGE_CODE_WLN":         375,
		"ISO_LANGUAGE_CODE_WOL":         376,
		"ISO_LANGUAGE_CODE_XHO":         377,
		"ISO_LANGUAGE_CODE_YID":         378,
		"ISO_LANGUAGE_CODE_YOR":         379,
		"ISO_LANGUAGE_CODE_ZHA":         380,
		"ISO_LANGUAGE_CODE_ZHO":         381,
		"ISO_LANGUAGE_CODE_ZUL":         382,
		"ISO_LANGUAGE_CODE_ACE":         383,
		"ISO_LANGUAGE_CODE_ACH":         384,
		"ISO_LANGUAGE_CODE_ADA":         385,
		"ISO_LANGUAGE_CODE_ADY":         386,
		"ISO_LANGUAGE_CODE_AFA":         387,
		"ISO_LANGUAGE_CODE_AFH":         388,
		"ISO_LANGUAGE_CODE_AIN":         389,
		"ISO_LANGUAGE_CODE_AKK":         390,
		"ISO_LANGUAGE_CODE_ALE":         391,
		"ISO_LANGUAGE_CODE_ALG":         392,
		"ISO_LANGUAGE_CODE_ALT":         393,
		"ISO_LANGUAGE_CODE_ANG":         394,
		"ISO_LANGUAGE_CODE_ANP":         395,
		"ISO_LANGUAGE_CODE_APA":         396,
		"ISO_LANGUAGE_CODE_ARC":         397,
		"ISO_LANGUAGE_CODE_ARN":         398,
		"ISO_LANGUAGE_CODE_ARP":         399,
		"ISO_LANGUAGE_CODE_ART":         400,
		"ISO_LANGUAGE_CODE_ARW":         401,
		"ISO_LANGUAGE_CODE_AST":         402,
		"ISO_LANGUAGE_CODE_ATH":         403,
		"ISO_LANGUAGE_CODE_AUS":         404,
		"ISO_LANGUAGE_CODE_AWA":         405,
		"ISO_LANGUAGE_CODE_BAD":         406,
		"ISO_LANGUAGE_CODE_BAI":         407,
		"ISO_LANGUAGE_CODE_BAL":         408,
		"ISO_LANGUAGE_CODE_BAN":         409,
		"ISO_LANGUAGE_CODE_BAS":         410,
		"ISO_LANGUAGE_CODE_BAT":         411,
		"ISO_LANGUAGE_CODE_BEJ":         412,
		"ISO_LANGUAGE_CODE_BEM":         413,
		"ISO_LANGUAGE_CODE_BER":         414,
		"ISO_LANGUAGE_CODE_BIK":         415,
		"ISO_LANGUAGE_CODE_BIN":         416,
		"ISO_LANGUAGE_CODE_BLA":         417,
		"ISO_LANGUAGE_CODE_BNT":         418,
		"ISO_LANGUAGE_CODE_BRA":         419,
		"ISO_LANGUAGE_CODE_BTK":         420,
		"ISO_LANGUAGE_CODE_BUA":         421,
		"ISO_LANGUAGE_CODE_BUG":         422,
		"ISO_LANGUAGE_CODE_BYN":         423,
		"ISO_LANGUAGE_CODE_CAD":         424,
		"ISO_LANGUAGE_CODE_CAI":         425,
		"ISO_LANGUAGE_CODE_CAR":         426,
		"ISO_LANGUAGE_CODE_CAU":         427,
		"ISO_LANGUAGE_CODE_CEB":         428,
		"ISO_LANGUAGE_CODE_CEL":         429,
		"ISO_LANGUAGE_CODE_CHB":         430,
		"ISO_LANGUAGE_CODE_CHG":         431,
		"ISO_LANGUAGE_CODE_CHK":         432,
		"ISO_LANGUAGE_CODE_CHM":         433,
		"ISO_LANGUAGE_CODE_CHN":         434,
		"ISO_LANGUAGE_CODE_CHO":         435,
		"ISO_LANGUAGE_CODE_CHP":         436,
		"ISO_LANGUAGE_CODE_CHR":         437,
		"ISO_LANGUAGE_CODE_CHY":         438,
		"ISO_LANGUAGE_CODE_CMC":         439,
		"ISO_LANGUAGE_CODE_CNR":         440,
		"ISO_LANGUAGE_CODE_COP":         441,
		"ISO_LANGUAGE_CODE_CPE":         442,
		"ISO_LANGUAGE_CODE_CPF":         443,
		"ISO_LANGUAGE_CODE_CPP":         444,
		"ISO_LANGUAGE_CODE_CRH":         445,
		"ISO_LANGUAGE_CODE_CRP":         446,
		"ISO_LANGUAGE_CODE_CSB":         447,
		"ISO_LANGUAGE_CODE_CUS":         448,
		"ISO_LANGUAGE_CODE_DAK":         449,
		"ISO_LANGUAGE_CODE_DAR":         450,
		"ISO_LANGUAGE_CODE_DAY":         451,
		"ISO_LANGUAGE_CODE_DEL":         452,
		"ISO_LANGUAGE_CODE_DEN":         453,
		"ISO_LANGUAGE_CODE_DGR":         454,
		"ISO_LANGUAGE_CODE_DIN":         455,
		"ISO_LANGUAGE_CODE_DOI":         456,
		"ISO_LANGUAGE_CODE_DRA":         457,
		"ISO_LANGUAGE_CODE_DSB":         458,
		"ISO_LANGUAGE_CODE_DUA":         459,
		"ISO_LANGUAGE_CODE_DUM":         460,
		"ISO_LANGUAGE_CODE_DYU":         461,
		"ISO_LANGUAGE_CODE_EFI":         462,
		"ISO_LANGUAGE_CODE_EGY":         463,
		"ISO_LANGUAGE_CODE_EKA":         464,
		"ISO_LANGUAGE_CODE_ELX":         465,
		"ISO_LANGUAGE_CODE_ENM":         466,
		"ISO_LANGUAGE_CODE_EWO":         467,
		"ISO_LANGUAGE_CODE_FAN":         468,
		"ISO_LANGUAGE_CODE_FAT":         469,
		"ISO_LANGUAGE_CODE_FIL":         470,
		"ISO_LANGUAGE_CODE_FIU":         471,
		"ISO_LANGUAGE_CODE_FON":         472,
		"ISO_LANGUAGE_CODE_FRM":         473,
		"ISO_LANGUAGE_CODE_FRO":         474,
		"ISO_LANGUAGE_CODE_FRR":         475,
		"ISO_LANGUAGE_CODE_FRS":         476,
		"ISO_LANGUAGE_CODE_FUR":         477,
		"ISO_LANGUAGE_CODE_GAA":         478,
		"ISO_LANGUAGE_CODE_GAY":         479,
		"ISO_LANGUAGE_CODE_GBA":         480,
		"ISO_LANGUAGE_CODE_GEM":         481,
		"ISO_LANGUAGE_CODE_GEZ":         482,
		"ISO_LANGUAGE_CODE_GIL":         483,
		"ISO_LANGUAGE_CODE_GMH":         484,
		"ISO_LANGUAGE_CODE_GOH":         485,
		"ISO_LANGUAGE_CODE_GON":         486,
		"ISO_LANGUAGE_CODE_GOR":         487,
		"ISO_LANGUAGE_CODE_GOT":         488,
		"ISO_LANGUAGE_CODE_GRB":         489,
		"ISO_LANGUAGE_CODE_GRC":         490,
		"ISO_LANGUAGE_CODE_GSW":         491,
		"ISO_LANGUAGE_CODE_GWI":         492,
		"ISO_LANGUAGE_CODE_HAI":         493,
		"ISO_LANGUAGE_CODE_HAW":         494,
		"ISO_LANGUAGE_CODE_HIL":         495,
		"ISO_LANGUAGE_CODE_HIM":         496,
		"ISO_LANGUAGE_CODE_HIT":         497,
		"ISO_LANGUAGE_CODE_HMN":         498,
		"ISO_LANGUAGE_CODE_HSB":         499,
		"ISO_LANGUAGE_CODE_HUP":         500,
		"ISO_LANGUAGE_CODE_IBA":         501,
		"ISO_LANGUAGE_CODE_IJO":         502,
		"ISO_LANGUAGE_CODE_ILO":         503,
		"ISO_LANGUAGE_CODE_INC":         504,
		"ISO_LANGUAGE_CODE_INE":         505,
		"ISO_LANGUAGE_CODE_INH":         506,
		"ISO_LANGUAGE_CODE_IRA":         507,
		"ISO_LANGUAGE_CODE_IRO":         508,
		"ISO_LANGUAGE_CODE_JBO":         509,
		"ISO_LANGUAGE_CODE_JPR":         510,
		"ISO_LANGUAGE_CODE_JRB":         511,
		"ISO_LANGUAGE_CODE_KAA":         512,
		"ISO_LANGUAGE_CODE_KAB":         513,
		"ISO_LANGUAGE_CODE_KAC":         514,
		"ISO_LANGUAGE_CODE_KAM":         515,
		"ISO_LANGUAGE_CODE_KAR":         516,
		"ISO_LANGUAGE_CODE_KAW":         517,
		"ISO_LANGUAGE_CODE_KBD":         518,
		"ISO_LANGUAGE_CODE_KHA":         519,
		"ISO_LANGUAGE_CODE_KHI":         520,
		"ISO_LANGUAGE_CODE_KHO":         521,
		"ISO_LANGUAGE_CODE_KMB":         522,
		"ISO_LANGUAGE_CODE_KOK":         523,
		"ISO_LANGUAGE_CODE_KOS":         524,
		"ISO_LANGUAGE_CODE_KPE":         525,
		"ISO_LANGUAGE_CODE_KRC":         526,
		"ISO_LANGUAGE_CODE_KRL":         527,
		"ISO_LANGUAGE_CODE_KRO":         528,
		"ISO_LANGUAGE_CODE_KRU":         529,
		"ISO_LANGUAGE_CODE_KUM":         530,
		"ISO_LANGUAGE_CODE_KUT":         531,
		"ISO_LANGUAGE_CODE_LAD":         532,
		"ISO_LANGUAGE_CODE_LAH":         533,
		"ISO_LANGUAGE_CODE_LAM":         534,
		"ISO_LANGUAGE_CODE_LEZ":         535,
		"ISO_LANGUAGE_CODE_LOL":         536,
		"ISO_LANGUAGE_CODE_LOZ":         537,
		"ISO_LANGUAGE_CODE_LUA":         538,
		"ISO_LANGUAGE_CODE_LUI":         539,
		"ISO_LANGUAGE_CODE_LUN":         540,
		"ISO_LANGUAGE_CODE_LUO":         541,
		"ISO_LANGUAGE_CODE_LUS":         542,
		"ISO_LANGUAGE_CODE_MAD":         543,
		"ISO_LANGUAGE_CODE_MAG":         544,
		"ISO_LANGUAGE_CODE_MAI":         545,
		"ISO_LANGUAGE_CODE_MAK":         546,
		"ISO_LANGUAGE_CODE_MAN":         547,
		"ISO_LANGUAGE_CODE_MAP":         548,
		"ISO_LANGUAGE_CODE_MAS":         549,
		"ISO_LANGUAGE_CODE_MDF":         550,
		"ISO_LANGUAGE_CODE_MDR":         551,
		"ISO_LANGUAGE_CODE_MEN":         552,
		"ISO_LANGUAGE_CODE_MGA":         553,
		"ISO_LANGUAGE_CODE_MIC":         554,
		"ISO_LANGUAGE_CODE_MIN":         555,
		"ISO_LANGUAGE_CODE_MIS":         556,
		"ISO_LANGUAGE_CODE_MKH":         557,
		"ISO_LANGUAGE_CODE_MNC":         558,
		"ISO_LANGUAGE_CODE_MNI":         559,
		"ISO_LANGUAGE_CODE_MNO":         560,
		"ISO_LANGUAGE_CODE_MOH":         561,
		"ISO_LANGUAGE_CODE_MOS":         562,
		"ISO_LANGUAGE_CODE_MUL":         563,
		"ISO_LANGUAGE_CODE_MUN":         564,
		"ISO_LANGUAGE_CODE_MUS":         565,
		"ISO_LANGUAGE_CODE_MWL":         566,
		"ISO_LANGUAGE_CODE_MWR":         567,
		"ISO_LANGUAGE_CODE_MYN":         568,
		"ISO_LANGUAGE_CODE_MYV":         569,
		"ISO_LANGUAGE_CODE_NAH":         570,
		"ISO_LANGUAGE_CODE_NAI":         571,
		"ISO_LANGUAGE_CODE_NAP":         572,
		"ISO_LANGUAGE_CODE_NDS":         573,
		"ISO_LANGUAGE_CODE_NEW":         574,
		"ISO_LANGUAGE_CODE_NIA":         575,
		"ISO_LANGUAGE_CODE_NIC":         576,
		"ISO_LANGUAGE_CODE_NIU":         577,
		"ISO_LANGUAGE_CODE_NOG":         578,
		"ISO_LANGUAGE_CODE_NON":         579,
		"ISO_LANGUAGE_CODE_NQO":         580,
		"ISO_LANGUAGE_CODE_NSO":         581,
		"ISO_LANGUAGE_CODE_NUB":         582,
		"ISO_LANGUAGE_CODE_NWC":         583,
		"ISO_LANGUAGE_CODE_NYM":         584,
		"ISO_LANGUAGE_CODE_NYN":         585,
		"ISO_LANGUAGE_CODE_NYO":         586,
		"ISO_LANGUAGE_CODE_NZI":         587,
		"ISO_LANGUAGE_CODE_OSA":         588,
		"ISO_LANGUAGE_CODE_OTA":         589,
		"ISO_LANGUAGE_CODE_OTO":         590,
		"ISO_LANGUAGE_CODE_PAA":         591,
		"ISO_LANGUAGE_CODE_PAG":         592,
		"ISO_LANGUAGE_CODE_PAL":         593,
		"ISO_LANGUAGE_CODE_PAM":         594,
		"ISO_LANGUAGE_CODE_PAP":         595,
		"ISO_LANGUAGE_CODE_PAU":         596,
		"ISO_LANGUAGE_CODE_PEO":         597,
		"ISO_LANGUAGE_CODE_PHI":         598,
		"ISO_LANGUAGE_CODE_PHN":         599,
		"ISO_LANGUAGE_CODE_PON":         600,
		"ISO_LANGUAGE_CODE_PRA":         601,
		"ISO_LANGUAGE_CODE_PRO":         602,
		"ISO_LANGUAGE_CODE_RAP":         603,
		"ISO_LANGUAGE_CODE_RAR":         604,
		"ISO_LANGUAGE_CODE_ROA":         605,
		"ISO_LANGUAGE_CODE_ROM":         606,
		"ISO_LANGUAGE_CODE_RUP":         607,
		"ISO_LANGUAGE_CODE_SAD":         608,
		"ISO_LANGUAGE_CODE_SAH":         609,
		"ISO_LANGUAGE_CODE_SAI":         610,
		"ISO_LANGUAGE_CODE_SAL":         611,
		"ISO_LANGUAGE_CODE_SAM":         612,
		"ISO_LANGUAGE_CODE_SAS":         613,
		"ISO_LANGUAGE_CODE_SAT":         614,
		"ISO_LANGUAGE_CODE_SCN":         615,
		"ISO_LANGUAGE_CODE_SCO":         616,
		"ISO_LANGUAGE_CODE_SEL":         617,
		"ISO_LANGUAGE_CODE_SEM":         618,
		"ISO_LANGUAGE_CODE_SGA":         619,
		"ISO_LANGUAGE_CODE_SGN":         620,
		"ISO_LANGUAGE_CODE_SHN":         621,
		"ISO_LANGUAGE_CODE_SID":         622,
		"ISO_LANGUAGE_CODE_SIO":         623,
		"ISO_LANGUAGE_CODE_SIT":         624,
		"ISO_LANGUAGE_CODE_SLA":         625,
		"ISO_LANGUAGE_CODE_SMA":         626,
		"ISO_LANGUAGE_CODE_SMI":         627,
		"ISO_LANGUAGE_CODE_SMJ":         628,
		"ISO_LANGUAGE_CODE_SMN":         629,
		"ISO_LANGUAGE_CODE_SMS":         630,
		"ISO_LANGUAGE_CODE_SNK":         631,
		"ISO_LANGUAGE_CODE_SOG":         632,
		"ISO_LANGUAGE_CODE_SON":         633,
		"ISO_LANGUAGE_CODE_SRN":         634,
		"ISO_LANGUAGE_CODE_SRR":         635,
		"ISO_LANGUAGE_CODE_SSA":         636,
		"ISO_LANGUAGE_CODE_SUK":         637,
		"ISO_LANGUAGE_CODE_SUS":         638,
		"ISO_LANGUAGE_CODE_SUX":         639,
		"ISO_LANGUAGE_CODE_SYC":         640,
		"ISO_LANGUAGE_CODE_SYR":         641,
		"ISO_LANGUAGE_CODE_TAI":         642,
		"ISO_LANGUAGE_CODE_TEM":         643,
		"ISO_LANGUAGE_CODE_TER":         644,
		"ISO_LANGUAGE_CODE_TET":         645,
		"ISO_LANGUAGE_CODE_TIG":         646,
		"ISO_LANGUAGE_CODE_TIV":         647,
		"ISO_LANGUAGE_CODE_TKL":         648,
		"ISO_LANGUAGE_CODE_TLH":         649,
		"ISO_LANGUAGE_CODE_TLI":         650,
		"ISO_LANGUAGE_CODE_TMH":         651,
		"ISO_LANGUAGE_CODE_TOG":         652,
		"ISO_LANGUAGE_CODE_TPI":         653,
		"ISO_LANGUAGE_CODE_TSI":         654,
		"ISO_LANGUAGE_CODE_TUM":         655,
		"ISO_LANGUAGE_CODE_TUP":         656,
		"ISO_LANGUAGE_CODE_TUT":         657,
		"ISO_LANGUAGE_CODE_TVL":         658,
		"ISO_LANGUAGE_CODE_TYV":         659,
		"ISO_LANGUAGE_CODE_UDM":         660,
		"ISO_LANGUAGE_CODE_UGA":         661,
		"ISO_LANGUAGE_CODE_UMB":         662,
		"ISO_LANGUAGE_CODE_UND":         663,
		"ISO_LANGUAGE_CODE_VAI":         664,
		"ISO_LANGUAGE_CODE_VOT":         665,
		"ISO_LANGUAGE_CODE_WAK":         666,
		"ISO_LANGUAGE_CODE_WAL":         667,
		"ISO_LANGUAGE_CODE_WAR":         668,
		"ISO_LANGUAGE_CODE_WAS":         669,
		"ISO_LANGUAGE_CODE_WEN":         670,
		"ISO_LANGUAGE_CODE_XAL":         671,
		"ISO_LANGUAGE_CODE_YAO":         672,
		"ISO_LANGUAGE_CODE_YAP":         673,
		"ISO_LANGUAGE_CODE_YPK":         674,
		"ISO_LANGUAGE_CODE_ZAP":         675,
		"ISO_LANGUAGE_CODE_ZBL":         676,
		"ISO_LANGUAGE_CODE_ZEN":         677,
		"ISO_LANGUAGE_CODE_ZGH":         678,
		"ISO_LANGUAGE_CODE_ZND":         679,
		"ISO_LANGUAGE_CODE_ZUN":         680,
		"ISO_LANGUAGE_CODE_ZXX":         681,
		"ISO_LANGUAGE_CODE_ZZA":         682,
		"ISO_LANGUAGE_CODE_AAA":         683,
		"ISO_LANGUAGE_CODE_HNE":         684,
		"ISO_LANGUAGE_CODE_GBM":         685,
		"ISO_LANGUAGE_CODE_KHW":         686,
		"ISO_LANGUAGE_CODE_CMN":         687,
		"ISO_LANGUAGE_CODE_SCK":         688,
		"ISO_LANGUAGE_CODE_SPV":         689,
		"ISO_LANGUAGE_CODE_SCL":         690,
		"ISO_LANGUAGE_CODE_YUE":         691,
		"ISO_LANGUAGE_CODE_TCY":         692,
		"ISO_LANGUAGE_CODE_KEY":         693,
		"ISO_LANGUAGE_CODE_GCF":         694,
		"ISO_LANGUAGE_CODE_JAM":         695,
		"ISO_LANGUAGE_CODE_MCM":         696,
	}
)

func (x IsoLanguageCode) Enum() *IsoLanguageCode {
	p := new(IsoLanguageCode)
	*p = x
	return p
}

func (x IsoLanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoLanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[52].Descriptor()
}

func (IsoLanguageCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[52]
}

func (x IsoLanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoLanguageCode.Descriptor instead.
func (IsoLanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{52}
}

type IsoTerritoryCode int32

const (
	IsoTerritoryCode_ISO_TERRITORY_CODE_UNSPECIFIED IsoTerritoryCode = 0
	IsoTerritoryCode_ISO_TERRITORY_CODE_AD          IsoTerritoryCode = 1
	IsoTerritoryCode_ISO_TERRITORY_CODE_AE          IsoTerritoryCode = 2
	IsoTerritoryCode_ISO_TERRITORY_CODE_AF          IsoTerritoryCode = 3
	IsoTerritoryCode_ISO_TERRITORY_CODE_AG          IsoTerritoryCode = 4
	IsoTerritoryCode_ISO_TERRITORY_CODE_AI          IsoTerritoryCode = 5
	IsoTerritoryCode_ISO_TERRITORY_CODE_AL          IsoTerritoryCode = 6
	IsoTerritoryCode_ISO_TERRITORY_CODE_AM          IsoTerritoryCode = 7
	IsoTerritoryCode_ISO_TERRITORY_CODE_AN          IsoTerritoryCode = 8
	IsoTerritoryCode_ISO_TERRITORY_CODE_AO          IsoTerritoryCode = 9
	IsoTerritoryCode_ISO_TERRITORY_CODE_AQ          IsoTerritoryCode = 10
	IsoTerritoryCode_ISO_TERRITORY_CODE_AR          IsoTerritoryCode = 11
	IsoTerritoryCode_ISO_TERRITORY_CODE_AS          IsoTerritoryCode = 12
	IsoTerritoryCode_ISO_TERRITORY_CODE_AT          IsoTerritoryCode = 13
	IsoTerritoryCode_ISO_TERRITORY_CODE_AU          IsoTerritoryCode = 14
	IsoTerritoryCode_ISO_TERRITORY_CODE_AW          IsoTerritoryCode = 15
	IsoTerritoryCode_ISO_TERRITORY_CODE_AX          IsoTerritoryCode = 16
	IsoTerritoryCode_ISO_TERRITORY_CODE_AZ          IsoTerritoryCode = 17
	IsoTerritoryCode_ISO_TERRITORY_CODE_BA          IsoTerritoryCode = 18
	IsoTerritoryCode_ISO_TERRITORY_CODE_BB          IsoTerritoryCode = 19
	IsoTerritoryCode_ISO_TERRITORY_CODE_BD          IsoTerritoryCode = 20
	IsoTerritoryCode_ISO_TERRITORY_CODE_BE          IsoTerritoryCode = 21
	IsoTerritoryCode_ISO_TERRITORY_CODE_BF          IsoTerritoryCode = 22
	IsoTerritoryCode_ISO_TERRITORY_CODE_BG          IsoTerritoryCode = 23
	IsoTerritoryCode_ISO_TERRITORY_CODE_BH          IsoTerritoryCode = 24
	IsoTerritoryCode_ISO_TERRITORY_CODE_BI          IsoTerritoryCode = 25
	IsoTerritoryCode_ISO_TERRITORY_CODE_BJ          IsoTerritoryCode = 26
	IsoTerritoryCode_ISO_TERRITORY_CODE_BL          IsoTerritoryCode = 27
	IsoTerritoryCode_ISO_TERRITORY_CODE_BM          IsoTerritoryCode = 28
	IsoTerritoryCode_ISO_TERRITORY_CODE_BN          IsoTerritoryCode = 29
	IsoTerritoryCode_ISO_TERRITORY_CODE_BO          IsoTerritoryCode = 30
	IsoTerritoryCode_ISO_TERRITORY_CODE_BQ          IsoTerritoryCode = 31
	IsoTerritoryCode_ISO_TERRITORY_CODE_BR          IsoTerritoryCode = 32
	IsoTerritoryCode_ISO_TERRITORY_CODE_BS          IsoTerritoryCode = 33
	IsoTerritoryCode_ISO_TERRITORY_CODE_BT          IsoTerritoryCode = 34
	IsoTerritoryCode_ISO_TERRITORY_CODE_BV          IsoTerritoryCode = 35
	IsoTerritoryCode_ISO_TERRITORY_CODE_BW          IsoTerritoryCode = 36
	IsoTerritoryCode_ISO_TERRITORY_CODE_BY          IsoTerritoryCode = 37
	IsoTerritoryCode_ISO_TERRITORY_CODE_BZ          IsoTerritoryCode = 38
	IsoTerritoryCode_ISO_TERRITORY_CODE_CA          IsoTerritoryCode = 39
	IsoTerritoryCode_ISO_TERRITORY_CODE_CC          IsoTerritoryCode = 40
	IsoTerritoryCode_ISO_TERRITORY_CODE_CD          IsoTerritoryCode = 41
	IsoTerritoryCode_ISO_TERRITORY_CODE_CF          IsoTerritoryCode = 42
	IsoTerritoryCode_ISO_TERRITORY_CODE_CG          IsoTerritoryCode = 43
	IsoTerritoryCode_ISO_TERRITORY_CODE_CH          IsoTerritoryCode = 44
	IsoTerritoryCode_ISO_TERRITORY_CODE_CI          IsoTerritoryCode = 45
	IsoTerritoryCode_ISO_TERRITORY_CODE_CK          IsoTerritoryCode = 46
	IsoTerritoryCode_ISO_TERRITORY_CODE_CL          IsoTerritoryCode = 47
	IsoTerritoryCode_ISO_TERRITORY_CODE_CM          IsoTerritoryCode = 48
	IsoTerritoryCode_ISO_TERRITORY_CODE_CN          IsoTerritoryCode = 49
	IsoTerritoryCode_ISO_TERRITORY_CODE_CO          IsoTerritoryCode = 50
	IsoTerritoryCode_ISO_TERRITORY_CODE_CR          IsoTerritoryCode = 51
	IsoTerritoryCode_ISO_TERRITORY_CODE_CS          IsoTerritoryCode = 52
	IsoTerritoryCode_ISO_TERRITORY_CODE_CU          IsoTerritoryCode = 53
	IsoTerritoryCode_ISO_TERRITORY_CODE_CV          IsoTerritoryCode = 54
	IsoTerritoryCode_ISO_TERRITORY_CODE_CW          IsoTerritoryCode = 55
	IsoTerritoryCode_ISO_TERRITORY_CODE_CX          IsoTerritoryCode = 56
	IsoTerritoryCode_ISO_TERRITORY_CODE_CY          IsoTerritoryCode = 57
	IsoTerritoryCode_ISO_TERRITORY_CODE_CZ          IsoTerritoryCode = 58
	IsoTerritoryCode_ISO_TERRITORY_CODE_DE          IsoTerritoryCode = 59
	IsoTerritoryCode_ISO_TERRITORY_CODE_DJ          IsoTerritoryCode = 60
	IsoTerritoryCode_ISO_TERRITORY_CODE_DK          IsoTerritoryCode = 61
	IsoTerritoryCode_ISO_TERRITORY_CODE_DM          IsoTerritoryCode = 62
	IsoTerritoryCode_ISO_TERRITORY_CODE_DO          IsoTerritoryCode = 63
	IsoTerritoryCode_ISO_TERRITORY_CODE_DZ          IsoTerritoryCode = 64
	IsoTerritoryCode_ISO_TERRITORY_CODE_EC          IsoTerritoryCode = 65
	IsoTerritoryCode_ISO_TERRITORY_CODE_EE          IsoTerritoryCode = 66
	IsoTerritoryCode_ISO_TERRITORY_CODE_EG          IsoTerritoryCode = 67
	IsoTerritoryCode_ISO_TERRITORY_CODE_EH          IsoTerritoryCode = 68
	IsoTerritoryCode_ISO_TERRITORY_CODE_ER          IsoTerritoryCode = 69
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES          IsoTerritoryCode = 70
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES_CE       IsoTerritoryCode = 71
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES_CN       IsoTerritoryCode = 72
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES_ML       IsoTerritoryCode = 73
	IsoTerritoryCode_ISO_TERRITORY_CODE_ET          IsoTerritoryCode = 74
	IsoTerritoryCode_ISO_TERRITORY_CODE_FI          IsoTerritoryCode = 75
	IsoTerritoryCode_ISO_TERRITORY_CODE_FJ          IsoTerritoryCode = 76
	IsoTerritoryCode_ISO_TERRITORY_CODE_FK          IsoTerritoryCode = 77
	IsoTerritoryCode_ISO_TERRITORY_CODE_FM          IsoTerritoryCode = 78
	IsoTerritoryCode_ISO_TERRITORY_CODE_FO          IsoTerritoryCode = 79
	IsoTerritoryCode_ISO_TERRITORY_CODE_FR          IsoTerritoryCode = 80
	IsoTerritoryCode_ISO_TERRITORY_CODE_GA          IsoTerritoryCode = 81
	IsoTerritoryCode_ISO_TERRITORY_CODE_GB          IsoTerritoryCode = 82
	IsoTerritoryCode_ISO_TERRITORY_CODE_GD          IsoTerritoryCode = 83
	IsoTerritoryCode_ISO_TERRITORY_CODE_GE          IsoTerritoryCode = 84
	IsoTerritoryCode_ISO_TERRITORY_CODE_GF          IsoTerritoryCode = 85
	IsoTerritoryCode_ISO_TERRITORY_CODE_GG          IsoTerritoryCode = 86
	IsoTerritoryCode_ISO_TERRITORY_CODE_GH          IsoTerritoryCode = 87
	IsoTerritoryCode_ISO_TERRITORY_CODE_GI          IsoTerritoryCode = 88
	IsoTerritoryCode_ISO_TERRITORY_CODE_GL          IsoTerritoryCode = 89
	IsoTerritoryCode_ISO_TERRITORY_CODE_GM          IsoTerritoryCode = 90
	IsoTerritoryCode_ISO_TERRITORY_CODE_GN          IsoTerritoryCode = 91
	IsoTerritoryCode_ISO_TERRITORY_CODE_GP          IsoTerritoryCode = 92
	IsoTerritoryCode_ISO_TERRITORY_CODE_GQ          IsoTerritoryCode = 93
	IsoTerritoryCode_ISO_TERRITORY_CODE_GR          IsoTerritoryCode = 94
	IsoTerritoryCode_ISO_TERRITORY_CODE_GS          IsoTerritoryCode = 95
	IsoTerritoryCode_ISO_TERRITORY_CODE_GT          IsoTerritoryCode = 96
	IsoTerritoryCode_ISO_TERRITORY_CODE_GU          IsoTerritoryCode = 97
	IsoTerritoryCode_ISO_TERRITORY_CODE_GW          IsoTerritoryCode = 98
	IsoTerritoryCode_ISO_TERRITORY_CODE_GY          IsoTerritoryCode = 99
	IsoTerritoryCode_ISO_TERRITORY_CODE_HK          IsoTerritoryCode = 100
	IsoTerritoryCode_ISO_TERRITORY_CODE_HM          IsoTerritoryCode = 101
	IsoTerritoryCode_ISO_TERRITORY_CODE_HN          IsoTerritoryCode = 102
	IsoTerritoryCode_ISO_TERRITORY_CODE_HR          IsoTerritoryCode = 103
	IsoTerritoryCode_ISO_TERRITORY_CODE_HT          IsoTerritoryCode = 104
	IsoTerritoryCode_ISO_TERRITORY_CODE_HU          IsoTerritoryCode = 105
	IsoTerritoryCode_ISO_TERRITORY_CODE_ID          IsoTerritoryCode = 106
	IsoTerritoryCode_ISO_TERRITORY_CODE_IE          IsoTerritoryCode = 107
	IsoTerritoryCode_ISO_TERRITORY_CODE_IL          IsoTerritoryCode = 108
	IsoTerritoryCode_ISO_TERRITORY_CODE_IM          IsoTerritoryCode = 109
	IsoTerritoryCode_ISO_TERRITORY_CODE_IN          IsoTerritoryCode = 110
	IsoTerritoryCode_ISO_TERRITORY_CODE_IO          IsoTerritoryCode = 111
	IsoTerritoryCode_ISO_TERRITORY_CODE_IQ          IsoTerritoryCode = 112
	IsoTerritoryCode_ISO_TERRITORY_CODE_IR          IsoTerritoryCode = 113
	IsoTerritoryCode_ISO_TERRITORY_CODE_IS          IsoTerritoryCode = 114
	IsoTerritoryCode_ISO_TERRITORY_CODE_IT          IsoTerritoryCode = 115
	IsoTerritoryCode_ISO_TERRITORY_CODE_JE          IsoTerritoryCode = 116
	IsoTerritoryCode_ISO_TERRITORY_CODE_JM          IsoTerritoryCode = 117
	IsoTerritoryCode_ISO_TERRITORY_CODE_JO          IsoTerritoryCode = 118
	IsoTerritoryCode_ISO_TERRITORY_CODE_JP          IsoTerritoryCode = 119
	IsoTerritoryCode_ISO_TERRITORY_CODE_KE          IsoTerritoryCode = 120
	IsoTerritoryCode_ISO_TERRITORY_CODE_KG          IsoTerritoryCode = 121
	IsoTerritoryCode_ISO_TERRITORY_CODE_KH          IsoTerritoryCode = 122
	IsoTerritoryCode_ISO_TERRITORY_CODE_KI          IsoTerritoryCode = 123
	IsoTerritoryCode_ISO_TERRITORY_CODE_KM          IsoTerritoryCode = 124
	IsoTerritoryCode_ISO_TERRITORY_CODE_KN          IsoTerritoryCode = 125
	IsoTerritoryCode_ISO_TERRITORY_CODE_KP          IsoTerritoryCode = 126
	IsoTerritoryCode_ISO_TERRITORY_CODE_KR          IsoTerritoryCode = 127
	IsoTerritoryCode_ISO_TERRITORY_CODE_KW          IsoTerritoryCode = 128
	IsoTerritoryCode_ISO_TERRITORY_CODE_KY          IsoTerritoryCode = 129
	IsoTerritoryCode_ISO_TERRITORY_CODE_KZ          IsoTerritoryCode = 130
	IsoTerritoryCode_ISO_TERRITORY_CODE_LA          IsoTerritoryCode = 131
	IsoTerritoryCode_ISO_TERRITORY_CODE_LB          IsoTerritoryCode = 132
	IsoTerritoryCode_ISO_TERRITORY_CODE_LC          IsoTerritoryCode = 133
	IsoTerritoryCode_ISO_TERRITORY_CODE_LI          IsoTerritoryCode = 134
	IsoTerritoryCode_ISO_TERRITORY_CODE_LK          IsoTerritoryCode = 135
	IsoTerritoryCode_ISO_TERRITORY_CODE_LR          IsoTerritoryCode = 136
	IsoTerritoryCode_ISO_TERRITORY_CODE_LS          IsoTerritoryCode = 137
	IsoTerritoryCode_ISO_TERRITORY_CODE_LT          IsoTerritoryCode = 138
	IsoTerritoryCode_ISO_TERRITORY_CODE_LU          IsoTerritoryCode = 139
	IsoTerritoryCode_ISO_TERRITORY_CODE_LV          IsoTerritoryCode = 140
	IsoTerritoryCode_ISO_TERRITORY_CODE_LY          IsoTerritoryCode = 141
	IsoTerritoryCode_ISO_TERRITORY_CODE_MA          IsoTerritoryCode = 142
	IsoTerritoryCode_ISO_TERRITORY_CODE_MC          IsoTerritoryCode = 143
	IsoTerritoryCode_ISO_TERRITORY_CODE_MD          IsoTerritoryCode = 144
	IsoTerritoryCode_ISO_TERRITORY_CODE_ME          IsoTerritoryCode = 145
	IsoTerritoryCode_ISO_TERRITORY_CODE_MF          IsoTerritoryCode = 146
	IsoTerritoryCode_ISO_TERRITORY_CODE_MG          IsoTerritoryCode = 147
	IsoTerritoryCode_ISO_TERRITORY_CODE_MH          IsoTerritoryCode = 148
	IsoTerritoryCode_ISO_TERRITORY_CODE_MK          IsoTerritoryCode = 149
	IsoTerritoryCode_ISO_TERRITORY_CODE_ML          IsoTerritoryCode = 150
	IsoTerritoryCode_ISO_TERRITORY_CODE_MM          IsoTerritoryCode = 151
	IsoTerritoryCode_ISO_TERRITORY_CODE_MN          IsoTerritoryCode = 152
	IsoTerritoryCode_ISO_TERRITORY_CODE_MO          IsoTerritoryCode = 153
	IsoTerritoryCode_ISO_TERRITORY_CODE_MP          IsoTerritoryCode = 154
	IsoTerritoryCode_ISO_TERRITORY_CODE_MQ          IsoTerritoryCode = 155
	IsoTerritoryCode_ISO_TERRITORY_CODE_MR          IsoTerritoryCode = 156
	IsoTerritoryCode_ISO_TERRITORY_CODE_MS          IsoTerritoryCode = 157
	IsoTerritoryCode_ISO_TERRITORY_CODE_MT          IsoTerritoryCode = 158
	IsoTerritoryCode_ISO_TERRITORY_CODE_MU          IsoTerritoryCode = 159
	IsoTerritoryCode_ISO_TERRITORY_CODE_MV          IsoTerritoryCode = 160
	IsoTerritoryCode_ISO_TERRITORY_CODE_MW          IsoTerritoryCode = 161
	IsoTerritoryCode_ISO_TERRITORY_CODE_MX          IsoTerritoryCode = 162
	IsoTerritoryCode_ISO_TERRITORY_CODE_MY          IsoTerritoryCode = 163
	IsoTerritoryCode_ISO_TERRITORY_CODE_MZ          IsoTerritoryCode = 164
	IsoTerritoryCode_ISO_TERRITORY_CODE_NA          IsoTerritoryCode = 165
	IsoTerritoryCode_ISO_TERRITORY_CODE_NC          IsoTerritoryCode = 166
	IsoTerritoryCode_ISO_TERRITORY_CODE_NE          IsoTerritoryCode = 167
	IsoTerritoryCode_ISO_TERRITORY_CODE_NF          IsoTerritoryCode = 168
	IsoTerritoryCode_ISO_TERRITORY_CODE_NG          IsoTerritoryCode = 169
	IsoTerritoryCode_ISO_TERRITORY_CODE_NI          IsoTerritoryCode = 170
	IsoTerritoryCode_ISO_TERRITORY_CODE_NL          IsoTerritoryCode = 171
	IsoTerritoryCode_ISO_TERRITORY_CODE_NO          IsoTerritoryCode = 172
	IsoTerritoryCode_ISO_TERRITORY_CODE_NP          IsoTerritoryCode = 173
	IsoTerritoryCode_ISO_TERRITORY_CODE_NR          IsoTerritoryCode = 174
	IsoTerritoryCode_ISO_TERRITORY_CODE_NU          IsoTerritoryCode = 175
	IsoTerritoryCode_ISO_TERRITORY_CODE_NZ          IsoTerritoryCode = 176
	IsoTerritoryCode_ISO_TERRITORY_CODE_OM          IsoTerritoryCode = 177
	IsoTerritoryCode_ISO_TERRITORY_CODE_PA          IsoTerritoryCode = 178
	IsoTerritoryCode_ISO_TERRITORY_CODE_PE          IsoTerritoryCode = 179
	IsoTerritoryCode_ISO_TERRITORY_CODE_PF          IsoTerritoryCode = 180
	IsoTerritoryCode_ISO_TERRITORY_CODE_PG          IsoTerritoryCode = 181
	IsoTerritoryCode_ISO_TERRITORY_CODE_PH          IsoTerritoryCode = 182
	IsoTerritoryCode_ISO_TERRITORY_CODE_PK          IsoTerritoryCode = 183
	IsoTerritoryCode_ISO_TERRITORY_CODE_PL          IsoTerritoryCode = 184
	IsoTerritoryCode_ISO_TERRITORY_CODE_PM          IsoTerritoryCode = 185
	IsoTerritoryCode_ISO_TERRITORY_CODE_PN          IsoTerritoryCode = 186
	IsoTerritoryCode_ISO_TERRITORY_CODE_PR          IsoTerritoryCode = 187
	IsoTerritoryCode_ISO_TERRITORY_CODE_PS          IsoTerritoryCode = 188
	IsoTerritoryCode_ISO_TERRITORY_CODE_PT          IsoTerritoryCode = 189
	IsoTerritoryCode_ISO_TERRITORY_CODE_PW          IsoTerritoryCode = 190
	IsoTerritoryCode_ISO_TERRITORY_CODE_PY          IsoTerritoryCode = 191
	IsoTerritoryCode_ISO_TERRITORY_CODE_QA          IsoTerritoryCode = 192
	IsoTerritoryCode_ISO_TERRITORY_CODE_RE          IsoTerritoryCode = 193
	IsoTerritoryCode_ISO_TERRITORY_CODE_RO          IsoTerritoryCode = 194
	IsoTerritoryCode_ISO_TERRITORY_CODE_RS          IsoTerritoryCode = 195
	IsoTerritoryCode_ISO_TERRITORY_CODE_RU          IsoTerritoryCode = 196
	IsoTerritoryCode_ISO_TERRITORY_CODE_RW          IsoTerritoryCode = 197
	IsoTerritoryCode_ISO_TERRITORY_CODE_SA          IsoTerritoryCode = 198
	IsoTerritoryCode_ISO_TERRITORY_CODE_SB          IsoTerritoryCode = 199
	IsoTerritoryCode_ISO_TERRITORY_CODE_SC          IsoTerritoryCode = 200
	IsoTerritoryCode_ISO_TERRITORY_CODE_SD          IsoTerritoryCode = 201
	IsoTerritoryCode_ISO_TERRITORY_CODE_SE          IsoTerritoryCode = 202
	IsoTerritoryCode_ISO_TERRITORY_CODE_SG          IsoTerritoryCode = 203
	IsoTerritoryCode_ISO_TERRITORY_CODE_SH          IsoTerritoryCode = 204
	IsoTerritoryCode_ISO_TERRITORY_CODE_SI          IsoTerritoryCode = 205
	IsoTerritoryCode_ISO_TERRITORY_CODE_SJ          IsoTerritoryCode = 206
	IsoTerritoryCode_ISO_TERRITORY_CODE_SK          IsoTerritoryCode = 207
	IsoTerritoryCode_ISO_TERRITORY_CODE_SL          IsoTerritoryCode = 208
	IsoTerritoryCode_ISO_TERRITORY_CODE_SM          IsoTerritoryCode = 209
	IsoTerritoryCode_ISO_TERRITORY_CODE_SN          IsoTerritoryCode = 210
	IsoTerritoryCode_ISO_TERRITORY_CODE_SO          IsoTerritoryCode = 211
	IsoTerritoryCode_ISO_TERRITORY_CODE_SR          IsoTerritoryCode = 212
	IsoTerritoryCode_ISO_TERRITORY_CODE_SS          IsoTerritoryCode = 213
	IsoTerritoryCode_ISO_TERRITORY_CODE_ST          IsoTerritoryCode = 214
	IsoTerritoryCode_ISO_TERRITORY_CODE_SV          IsoTerritoryCode = 215
	IsoTerritoryCode_ISO_TERRITORY_CODE_SX          IsoTerritoryCode = 216
	IsoTerritoryCode_ISO_TERRITORY_CODE_SY          IsoTerritoryCode = 217
	IsoTerritoryCode_ISO_TERRITORY_CODE_SZ          IsoTerritoryCode = 218
	IsoTerritoryCode_ISO_TERRITORY_CODE_TC          IsoTerritoryCode = 219
	IsoTerritoryCode_ISO_TERRITORY_CODE_TD          IsoTerritoryCode = 220
	IsoTerritoryCode_ISO_TERRITORY_CODE_TF          IsoTerritoryCode = 221
	IsoTerritoryCode_ISO_TERRITORY_CODE_TG          IsoTerritoryCode = 222
	IsoTerritoryCode_ISO_TERRITORY_CODE_TH          IsoTerritoryCode = 223
	IsoTerritoryCode_ISO_TERRITORY_CODE_TJ          IsoTerritoryCode = 224
	IsoTerritoryCode_ISO_TERRITORY_CODE_TK          IsoTerritoryCode = 225
	IsoTerritoryCode_ISO_TERRITORY_CODE_TL          IsoTerritoryCode = 226
	IsoTerritoryCode_ISO_TERRITORY_CODE_TM          IsoTerritoryCode = 227
	IsoTerritoryCode_ISO_TERRITORY_CODE_TN          IsoTerritoryCode = 228
	IsoTerritoryCode_ISO_TERRITORY_CODE_TO          IsoTerritoryCode = 229
	IsoTerritoryCode_ISO_TERRITORY_CODE_TR          IsoTerritoryCode = 230
	IsoTerritoryCode_ISO_TERRITORY_CODE_TT          IsoTerritoryCode = 231
	IsoTerritoryCode_ISO_TERRITORY_CODE_TV          IsoTerritoryCode = 232
	IsoTerritoryCode_ISO_TERRITORY_CODE_TW          IsoTerritoryCode = 233
	IsoTerritoryCode_ISO_TERRITORY_CODE_TZ          IsoTerritoryCode = 234
	IsoTerritoryCode_ISO_TERRITORY_CODE_UA          IsoTerritoryCode = 235
	IsoTerritoryCode_ISO_TERRITORY_CODE_UG          IsoTerritoryCode = 236
	IsoTerritoryCode_ISO_TERRITORY_CODE_UM          IsoTerritoryCode = 237
	IsoTerritoryCode_ISO_TERRITORY_CODE_US          IsoTerritoryCode = 238
	IsoTerritoryCode_ISO_TERRITORY_CODE_UY          IsoTerritoryCode = 239
	IsoTerritoryCode_ISO_TERRITORY_CODE_UZ          IsoTerritoryCode = 240
	IsoTerritoryCode_ISO_TERRITORY_CODE_VA          IsoTerritoryCode = 241
	IsoTerritoryCode_ISO_TERRITORY_CODE_VC          IsoTerritoryCode = 242
	IsoTerritoryCode_ISO_TERRITORY_CODE_VE          IsoTerritoryCode = 243
	IsoTerritoryCode_ISO_TERRITORY_CODE_VG          IsoTerritoryCode = 244
	IsoTerritoryCode_ISO_TERRITORY_CODE_VI          IsoTerritoryCode = 245
	IsoTerritoryCode_ISO_TERRITORY_CODE_VN          IsoTerritoryCode = 246
	IsoTerritoryCode_ISO_TERRITORY_CODE_VU          IsoTerritoryCode = 247
	IsoTerritoryCode_ISO_TERRITORY_CODE_WF          IsoTerritoryCode = 248
	IsoTerritoryCode_ISO_TERRITORY_CODE_WS          IsoTerritoryCode = 249
	IsoTerritoryCode_ISO_TERRITORY_CODE_YE          IsoTerritoryCode = 250
	IsoTerritoryCode_ISO_TERRITORY_CODE_YT          IsoTerritoryCode = 251
	IsoTerritoryCode_ISO_TERRITORY_CODE_ZA          IsoTerritoryCode = 252
	IsoTerritoryCode_ISO_TERRITORY_CODE_ZM          IsoTerritoryCode = 253
	IsoTerritoryCode_ISO_TERRITORY_CODE_ZW          IsoTerritoryCode = 254
)

// Enum value maps for IsoTerritoryCode.
var (
	IsoTerritoryCode_name = map[int32]string{
		0:   "ISO_TERRITORY_CODE_UNSPECIFIED",
		1:   "ISO_TERRITORY_CODE_AD",
		2:   "ISO_TERRITORY_CODE_AE",
		3:   "ISO_TERRITORY_CODE_AF",
		4:   "ISO_TERRITORY_CODE_AG",
		5:   "ISO_TERRITORY_CODE_AI",
		6:   "ISO_TERRITORY_CODE_AL",
		7:   "ISO_TERRITORY_CODE_AM",
		8:   "ISO_TERRITORY_CODE_AN",
		9:   "ISO_TERRITORY_CODE_AO",
		10:  "ISO_TERRITORY_CODE_AQ",
		11:  "ISO_TERRITORY_CODE_AR",
		12:  "ISO_TERRITORY_CODE_AS",
		13:  "ISO_TERRITORY_CODE_AT",
		14:  "ISO_TERRITORY_CODE_AU",
		15:  "ISO_TERRITORY_CODE_AW",
		16:  "ISO_TERRITORY_CODE_AX",
		17:  "ISO_TERRITORY_CODE_AZ",
		18:  "ISO_TERRITORY_CODE_BA",
		19:  "ISO_TERRITORY_CODE_BB",
		20:  "ISO_TERRITORY_CODE_BD",
		21:  "ISO_TERRITORY_CODE_BE",
		22:  "ISO_TERRITORY_CODE_BF",
		23:  "ISO_TERRITORY_CODE_BG",
		24:  "ISO_TERRITORY_CODE_BH",
		25:  "ISO_TERRITORY_CODE_BI",
		26:  "ISO_TERRITORY_CODE_BJ",
		27:  "ISO_TERRITORY_CODE_BL",
		28:  "ISO_TERRITORY_CODE_BM",
		29:  "ISO_TERRITORY_CODE_BN",
		30:  "ISO_TERRITORY_CODE_BO",
		31:  "ISO_TERRITORY_CODE_BQ",
		32:  "ISO_TERRITORY_CODE_BR",
		33:  "ISO_TERRITORY_CODE_BS",
		34:  "ISO_TERRITORY_CODE_BT",
		35:  "ISO_TERRITORY_CODE_BV",
		36:  "ISO_TERRITORY_CODE_BW",
		37:  "ISO_TERRITORY_CODE_BY",
		38:  "ISO_TERRITORY_CODE_BZ",
		39:  "ISO_TERRITORY_CODE_CA",
		40:  "ISO_TERRITORY_CODE_CC",
		41:  "ISO_TERRITORY_CODE_CD",
		42:  "ISO_TERRITORY_CODE_CF",
		43:  "ISO_TERRITORY_CODE_CG",
		44:  "ISO_TERRITORY_CODE_CH",
		45:  "ISO_TERRITORY_CODE_CI",
		46:  "ISO_TERRITORY_CODE_CK",
		47:  "ISO_TERRITORY_CODE_CL",
		48:  "ISO_TERRITORY_CODE_CM",
		49:  "ISO_TERRITORY_CODE_CN",
		50:  "ISO_TERRITORY_CODE_CO",
		51:  "ISO_TERRITORY_CODE_CR",
		52:  "ISO_TERRITORY_CODE_CS",
		53:  "ISO_TERRITORY_CODE_CU",
		54:  "ISO_TERRITORY_CODE_CV",
		55:  "ISO_TERRITORY_CODE_CW",
		56:  "ISO_TERRITORY_CODE_CX",
		57:  "ISO_TERRITORY_CODE_CY",
		58:  "ISO_TERRITORY_CODE_CZ",
		59:  "ISO_TERRITORY_CODE_DE",
		60:  "ISO_TERRITORY_CODE_DJ",
		61:  "ISO_TERRITORY_CODE_DK",
		62:  "ISO_TERRITORY_CODE_DM",
		63:  "ISO_TERRITORY_CODE_DO",
		64:  "ISO_TERRITORY_CODE_DZ",
		65:  "ISO_TERRITORY_CODE_EC",
		66:  "ISO_TERRITORY_CODE_EE",
		67:  "ISO_TERRITORY_CODE_EG",
		68:  "ISO_TERRITORY_CODE_EH",
		69:  "ISO_TERRITORY_CODE_ER",
		70:  "ISO_TERRITORY_CODE_ES",
		71:  "ISO_TERRITORY_CODE_ES_CE",
		72:  "ISO_TERRITORY_CODE_ES_CN",
		73:  "ISO_TERRITORY_CODE_ES_ML",
		74:  "ISO_TERRITORY_CODE_ET",
		75:  "ISO_TERRITORY_CODE_FI",
		76:  "ISO_TERRITORY_CODE_FJ",
		77:  "ISO_TERRITORY_CODE_FK",
		78:  "ISO_TERRITORY_CODE_FM",
		79:  "ISO_TERRITORY_CODE_FO",
		80:  "ISO_TERRITORY_CODE_FR",
		81:  "ISO_TERRITORY_CODE_GA",
		82:  "ISO_TERRITORY_CODE_GB",
		83:  "ISO_TERRITORY_CODE_GD",
		84:  "ISO_TERRITORY_CODE_GE",
		85:  "ISO_TERRITORY_CODE_GF",
		86:  "ISO_TERRITORY_CODE_GG",
		87:  "ISO_TERRITORY_CODE_GH",
		88:  "ISO_TERRITORY_CODE_GI",
		89:  "ISO_TERRITORY_CODE_GL",
		90:  "ISO_TERRITORY_CODE_GM",
		91:  "ISO_TERRITORY_CODE_GN",
		92:  "ISO_TERRITORY_CODE_GP",
		93:  "ISO_TERRITORY_CODE_GQ",
		94:  "ISO_TERRITORY_CODE_GR",
		95:  "ISO_TERRITORY_CODE_GS",
		96:  "ISO_TERRITORY_CODE_GT",
		97:  "ISO_TERRITORY_CODE_GU",
		98:  "ISO_TERRITORY_CODE_GW",
		99:  "ISO_TERRITORY_CODE_GY",
		100: "ISO_TERRITORY_CODE_HK",
		101: "ISO_TERRITORY_CODE_HM",
		102: "ISO_TERRITORY_CODE_HN",
		103: "ISO_TERRITORY_CODE_HR",
		104: "ISO_TERRITORY_CODE_HT",
		105: "ISO_TERRITORY_CODE_HU",
		106: "ISO_TERRITORY_CODE_ID",
		107: "ISO_TERRITORY_CODE_IE",
		108: "ISO_TERRITORY_CODE_IL",
		109: "ISO_TERRITORY_CODE_IM",
		110: "ISO_TERRITORY_CODE_IN",
		111: "ISO_TERRITORY_CODE_IO",
		112: "ISO_TERRITORY_CODE_IQ",
		113: "ISO_TERRITORY_CODE_IR",
		114: "ISO_TERRITORY_CODE_IS",
		115: "ISO_TERRITORY_CODE_IT",
		116: "ISO_TERRITORY_CODE_JE",
		117: "ISO_TERRITORY_CODE_JM",
		118: "ISO_TERRITORY_CODE_JO",
		119: "ISO_TERRITORY_CODE_JP",
		120: "ISO_TERRITORY_CODE_KE",
		121: "ISO_TERRITORY_CODE_KG",
		122: "ISO_TERRITORY_CODE_KH",
		123: "ISO_TERRITORY_CODE_KI",
		124: "ISO_TERRITORY_CODE_KM",
		125: "ISO_TERRITORY_CODE_KN",
		126: "ISO_TERRITORY_CODE_KP",
		127: "ISO_TERRITORY_CODE_KR",
		128: "ISO_TERRITORY_CODE_KW",
		129: "ISO_TERRITORY_CODE_KY",
		130: "ISO_TERRITORY_CODE_KZ",
		131: "ISO_TERRITORY_CODE_LA",
		132: "ISO_TERRITORY_CODE_LB",
		133: "ISO_TERRITORY_CODE_LC",
		134: "ISO_TERRITORY_CODE_LI",
		135: "ISO_TERRITORY_CODE_LK",
		136: "ISO_TERRITORY_CODE_LR",
		137: "ISO_TERRITORY_CODE_LS",
		138: "ISO_TERRITORY_CODE_LT",
		139: "ISO_TERRITORY_CODE_LU",
		140: "ISO_TERRITORY_CODE_LV",
		141: "ISO_TERRITORY_CODE_LY",
		142: "ISO_TERRITORY_CODE_MA",
		143: "ISO_TERRITORY_CODE_MC",
		144: "ISO_TERRITORY_CODE_MD",
		145: "ISO_TERRITORY_CODE_ME",
		146: "ISO_TERRITORY_CODE_MF",
		147: "ISO_TERRITORY_CODE_MG",
		148: "ISO_TERRITORY_CODE_MH",
		149: "ISO_TERRITORY_CODE_MK",
		150: "ISO_TERRITORY_CODE_ML",
		151: "ISO_TERRITORY_CODE_MM",
		152: "ISO_TERRITORY_CODE_MN",
		153: "ISO_TERRITORY_CODE_MO",
		154: "ISO_TERRITORY_CODE_MP",
		155: "ISO_TERRITORY_CODE_MQ",
		156: "ISO_TERRITORY_CODE_MR",
		157: "ISO_TERRITORY_CODE_MS",
		158: "ISO_TERRITORY_CODE_MT",
		159: "ISO_TERRITORY_CODE_MU",
		160: "ISO_TERRITORY_CODE_MV",
		161: "ISO_TERRITORY_CODE_MW",
		162: "ISO_TERRITORY_CODE_MX",
		163: "ISO_TERRITORY_CODE_MY",
		164: "ISO_TERRITORY_CODE_MZ",
		165: "ISO_TERRITORY_CODE_NA",
		166: "ISO_TERRITORY_CODE_NC",
		167: "ISO_TERRITORY_CODE_NE",
		168: "ISO_TERRITORY_CODE_NF",
		169: "ISO_TERRITORY_CODE_NG",
		170: "ISO_TERRITORY_CODE_NI",
		171: "ISO_TERRITORY_CODE_NL",
		172: "ISO_TERRITORY_CODE_NO",
		173: "ISO_TERRITORY_CODE_NP",
		174: "ISO_TERRITORY_CODE_NR",
		175: "ISO_TERRITORY_CODE_NU",
		176: "ISO_TERRITORY_CODE_NZ",
		177: "ISO_TERRITORY_CODE_OM",
		178: "ISO_TERRITORY_CODE_PA",
		179: "ISO_TERRITORY_CODE_PE",
		180: "ISO_TERRITORY_CODE_PF",
		181: "ISO_TERRITORY_CODE_PG",
		182: "ISO_TERRITORY_CODE_PH",
		183: "ISO_TERRITORY_CODE_PK",
		184: "ISO_TERRITORY_CODE_PL",
		185: "ISO_TERRITORY_CODE_PM",
		186: "ISO_TERRITORY_CODE_PN",
		187: "ISO_TERRITORY_CODE_PR",
		188: "ISO_TERRITORY_CODE_PS",
		189: "ISO_TERRITORY_CODE_PT",
		190: "ISO_TERRITORY_CODE_PW",
		191: "ISO_TERRITORY_CODE_PY",
		192: "ISO_TERRITORY_CODE_QA",
		193: "ISO_TERRITORY_CODE_RE",
		194: "ISO_TERRITORY_CODE_RO",
		195: "ISO_TERRITORY_CODE_RS",
		196: "ISO_TERRITORY_CODE_RU",
		197: "ISO_TERRITORY_CODE_RW",
		198: "ISO_TERRITORY_CODE_SA",
		199: "ISO_TERRITORY_CODE_SB",
		200: "ISO_TERRITORY_CODE_SC",
		201: "ISO_TERRITORY_CODE_SD",
		202: "ISO_TERRITORY_CODE_SE",
		203: "ISO_TERRITORY_CODE_SG",
		204: "ISO_TERRITORY_CODE_SH",
		205: "ISO_TERRITORY_CODE_SI",
		206: "ISO_TERRITORY_CODE_SJ",
		207: "ISO_TERRITORY_CODE_SK",
		208: "ISO_TERRITORY_CODE_SL",
		209: "ISO_TERRITORY_CODE_SM",
		210: "ISO_TERRITORY_CODE_SN",
		211: "ISO_TERRITORY_CODE_SO",
		212: "ISO_TERRITORY_CODE_SR",
		213: "ISO_TERRITORY_CODE_SS",
		214: "ISO_TERRITORY_CODE_ST",
		215: "ISO_TERRITORY_CODE_SV",
		216: "ISO_TERRITORY_CODE_SX",
		217: "ISO_TERRITORY_CODE_SY",
		218: "ISO_TERRITORY_CODE_SZ",
		219: "ISO_TERRITORY_CODE_TC",
		220: "ISO_TERRITORY_CODE_TD",
		221: "ISO_TERRITORY_CODE_TF",
		222: "ISO_TERRITORY_CODE_TG",
		223: "ISO_TERRITORY_CODE_TH",
		224: "ISO_TERRITORY_CODE_TJ",
		225: "ISO_TERRITORY_CODE_TK",
		226: "ISO_TERRITORY_CODE_TL",
		227: "ISO_TERRITORY_CODE_TM",
		228: "ISO_TERRITORY_CODE_TN",
		229: "ISO_TERRITORY_CODE_TO",
		230: "ISO_TERRITORY_CODE_TR",
		231: "ISO_TERRITORY_CODE_TT",
		232: "ISO_TERRITORY_CODE_TV",
		233: "ISO_TERRITORY_CODE_TW",
		234: "ISO_TERRITORY_CODE_TZ",
		235: "ISO_TERRITORY_CODE_UA",
		236: "ISO_TERRITORY_CODE_UG",
		237: "ISO_TERRITORY_CODE_UM",
		238: "ISO_TERRITORY_CODE_US",
		239: "ISO_TERRITORY_CODE_UY",
		240: "ISO_TERRITORY_CODE_UZ",
		241: "ISO_TERRITORY_CODE_VA",
		242: "ISO_TERRITORY_CODE_VC",
		243: "ISO_TERRITORY_CODE_VE",
		244: "ISO_TERRITORY_CODE_VG",
		245: "ISO_TERRITORY_CODE_VI",
		246: "ISO_TERRITORY_CODE_VN",
		247: "ISO_TERRITORY_CODE_VU",
		248: "ISO_TERRITORY_CODE_WF",
		249: "ISO_TERRITORY_CODE_WS",
		250: "ISO_TERRITORY_CODE_YE",
		251: "ISO_TERRITORY_CODE_YT",
		252: "ISO_TERRITORY_CODE_ZA",
		253: "ISO_TERRITORY_CODE_ZM",
		254: "ISO_TERRITORY_CODE_ZW",
	}
	IsoTerritoryCode_value = map[string]int32{
		"ISO_TERRITORY_CODE_UNSPECIFIED": 0,
		"ISO_TERRITORY_CODE_AD":          1,
		"ISO_TERRITORY_CODE_AE":          2,
		"ISO_TERRITORY_CODE_AF":          3,
		"ISO_TERRITORY_CODE_AG":          4,
		"ISO_TERRITORY_CODE_AI":          5,
		"ISO_TERRITORY_CODE_AL":          6,
		"ISO_TERRITORY_CODE_AM":          7,
		"ISO_TERRITORY_CODE_AN":          8,
		"ISO_TERRITORY_CODE_AO":          9,
		"ISO_TERRITORY_CODE_AQ":          10,
		"ISO_TERRITORY_CODE_AR":          11,
		"ISO_TERRITORY_CODE_AS":          12,
		"ISO_TERRITORY_CODE_AT":          13,
		"ISO_TERRITORY_CODE_AU":          14,
		"ISO_TERRITORY_CODE_AW":          15,
		"ISO_TERRITORY_CODE_AX":          16,
		"ISO_TERRITORY_CODE_AZ":          17,
		"ISO_TERRITORY_CODE_BA":          18,
		"ISO_TERRITORY_CODE_BB":          19,
		"ISO_TERRITORY_CODE_BD":          20,
		"ISO_TERRITORY_CODE_BE":          21,
		"ISO_TERRITORY_CODE_BF":          22,
		"ISO_TERRITORY_CODE_BG":          23,
		"ISO_TERRITORY_CODE_BH":          24,
		"ISO_TERRITORY_CODE_BI":          25,
		"ISO_TERRITORY_CODE_BJ":          26,
		"ISO_TERRITORY_CODE_BL":          27,
		"ISO_TERRITORY_CODE_BM":          28,
		"ISO_TERRITORY_CODE_BN":          29,
		"ISO_TERRITORY_CODE_BO":          30,
		"ISO_TERRITORY_CODE_BQ":          31,
		"ISO_TERRITORY_CODE_BR":          32,
		"ISO_TERRITORY_CODE_BS":          33,
		"ISO_TERRITORY_CODE_BT":          34,
		"ISO_TERRITORY_CODE_BV":          35,
		"ISO_TERRITORY_CODE_BW":          36,
		"ISO_TERRITORY_CODE_BY":          37,
		"ISO_TERRITORY_CODE_BZ":          38,
		"ISO_TERRITORY_CODE_CA":          39,
		"ISO_TERRITORY_CODE_CC":          40,
		"ISO_TERRITORY_CODE_CD":          41,
		"ISO_TERRITORY_CODE_CF":          42,
		"ISO_TERRITORY_CODE_CG":          43,
		"ISO_TERRITORY_CODE_CH":          44,
		"ISO_TERRITORY_CODE_CI":          45,
		"ISO_TERRITORY_CODE_CK":          46,
		"ISO_TERRITORY_CODE_CL":          47,
		"ISO_TERRITORY_CODE_CM":          48,
		"ISO_TERRITORY_CODE_CN":          49,
		"ISO_TERRITORY_CODE_CO":          50,
		"ISO_TERRITORY_CODE_CR":          51,
		"ISO_TERRITORY_CODE_CS":          52,
		"ISO_TERRITORY_CODE_CU":          53,
		"ISO_TERRITORY_CODE_CV":          54,
		"ISO_TERRITORY_CODE_CW":          55,
		"ISO_TERRITORY_CODE_CX":          56,
		"ISO_TERRITORY_CODE_CY":          57,
		"ISO_TERRITORY_CODE_CZ":          58,
		"ISO_TERRITORY_CODE_DE":          59,
		"ISO_TERRITORY_CODE_DJ":          60,
		"ISO_TERRITORY_CODE_DK":          61,
		"ISO_TERRITORY_CODE_DM":          62,
		"ISO_TERRITORY_CODE_DO":          63,
		"ISO_TERRITORY_CODE_DZ":          64,
		"ISO_TERRITORY_CODE_EC":          65,
		"ISO_TERRITORY_CODE_EE":          66,
		"ISO_TERRITORY_CODE_EG":          67,
		"ISO_TERRITORY_CODE_EH":          68,
		"ISO_TERRITORY_CODE_ER":          69,
		"ISO_TERRITORY_CODE_ES":          70,
		"ISO_TERRITORY_CODE_ES_CE":       71,
		"ISO_TERRITORY_CODE_ES_CN":       72,
		"ISO_TERRITORY_CODE_ES_ML":       73,
		"ISO_TERRITORY_CODE_ET":          74,
		"ISO_TERRITORY_CODE_FI":          75,
		"ISO_TERRITORY_CODE_FJ":          76,
		"ISO_TERRITORY_CODE_FK":          77,
		"ISO_TERRITORY_CODE_FM":          78,
		"ISO_TERRITORY_CODE_FO":          79,
		"ISO_TERRITORY_CODE_FR":          80,
		"ISO_TERRITORY_CODE_GA":          81,
		"ISO_TERRITORY_CODE_GB":          82,
		"ISO_TERRITORY_CODE_GD":          83,
		"ISO_TERRITORY_CODE_GE":          84,
		"ISO_TERRITORY_CODE_GF":          85,
		"ISO_TERRITORY_CODE_GG":          86,
		"ISO_TERRITORY_CODE_GH":          87,
		"ISO_TERRITORY_CODE_GI":          88,
		"ISO_TERRITORY_CODE_GL":          89,
		"ISO_TERRITORY_CODE_GM":          90,
		"ISO_TERRITORY_CODE_GN":          91,
		"ISO_TERRITORY_CODE_GP":          92,
		"ISO_TERRITORY_CODE_GQ":          93,
		"ISO_TERRITORY_CODE_GR":          94,
		"ISO_TERRITORY_CODE_GS":          95,
		"ISO_TERRITORY_CODE_GT":          96,
		"ISO_TERRITORY_CODE_GU":          97,
		"ISO_TERRITORY_CODE_GW":          98,
		"ISO_TERRITORY_CODE_GY":          99,
		"ISO_TERRITORY_CODE_HK":          100,
		"ISO_TERRITORY_CODE_HM":          101,
		"ISO_TERRITORY_CODE_HN":          102,
		"ISO_TERRITORY_CODE_HR":          103,
		"ISO_TERRITORY_CODE_HT":          104,
		"ISO_TERRITORY_CODE_HU":          105,
		"ISO_TERRITORY_CODE_ID":          106,
		"ISO_TERRITORY_CODE_IE":          107,
		"ISO_TERRITORY_CODE_IL":          108,
		"ISO_TERRITORY_CODE_IM":          109,
		"ISO_TERRITORY_CODE_IN":          110,
		"ISO_TERRITORY_CODE_IO":          111,
		"ISO_TERRITORY_CODE_IQ":          112,
		"ISO_TERRITORY_CODE_IR":          113,
		"ISO_TERRITORY_CODE_IS":          114,
		"ISO_TERRITORY_CODE_IT":          115,
		"ISO_TERRITORY_CODE_JE":          116,
		"ISO_TERRITORY_CODE_JM":          117,
		"ISO_TERRITORY_CODE_JO":          118,
		"ISO_TERRITORY_CODE_JP":          119,
		"ISO_TERRITORY_CODE_KE":          120,
		"ISO_TERRITORY_CODE_KG":          121,
		"ISO_TERRITORY_CODE_KH":          122,
		"ISO_TERRITORY_CODE_KI":          123,
		"ISO_TERRITORY_CODE_KM":          124,
		"ISO_TERRITORY_CODE_KN":          125,
		"ISO_TERRITORY_CODE_KP":          126,
		"ISO_TERRITORY_CODE_KR":          127,
		"ISO_TERRITORY_CODE_KW":          128,
		"ISO_TERRITORY_CODE_KY":          129,
		"ISO_TERRITORY_CODE_KZ":          130,
		"ISO_TERRITORY_CODE_LA":          131,
		"ISO_TERRITORY_CODE_LB":          132,
		"ISO_TERRITORY_CODE_LC":          133,
		"ISO_TERRITORY_CODE_LI":          134,
		"ISO_TERRITORY_CODE_LK":          135,
		"ISO_TERRITORY_CODE_LR":          136,
		"ISO_TERRITORY_CODE_LS":          137,
		"ISO_TERRITORY_CODE_LT":          138,
		"ISO_TERRITORY_CODE_LU":          139,
		"ISO_TERRITORY_CODE_LV":          140,
		"ISO_TERRITORY_CODE_LY":          141,
		"ISO_TERRITORY_CODE_MA":          142,
		"ISO_TERRITORY_CODE_MC":          143,
		"ISO_TERRITORY_CODE_MD":          144,
		"ISO_TERRITORY_CODE_ME":          145,
		"ISO_TERRITORY_CODE_MF":          146,
		"ISO_TERRITORY_CODE_MG":          147,
		"ISO_TERRITORY_CODE_MH":          148,
		"ISO_TERRITORY_CODE_MK":          149,
		"ISO_TERRITORY_CODE_ML":          150,
		"ISO_TERRITORY_CODE_MM":          151,
		"ISO_TERRITORY_CODE_MN":          152,
		"ISO_TERRITORY_CODE_MO":          153,
		"ISO_TERRITORY_CODE_MP":          154,
		"ISO_TERRITORY_CODE_MQ":          155,
		"ISO_TERRITORY_CODE_MR":          156,
		"ISO_TERRITORY_CODE_MS":          157,
		"ISO_TERRITORY_CODE_MT":          158,
		"ISO_TERRITORY_CODE_MU":          159,
		"ISO_TERRITORY_CODE_MV":          160,
		"ISO_TERRITORY_CODE_MW":          161,
		"ISO_TERRITORY_CODE_MX":          162,
		"ISO_TERRITORY_CODE_MY":          163,
		"ISO_TERRITORY_CODE_MZ":          164,
		"ISO_TERRITORY_CODE_NA":          165,
		"ISO_TERRITORY_CODE_NC":          166,
		"ISO_TERRITORY_CODE_NE":          167,
		"ISO_TERRITORY_CODE_NF":          168,
		"ISO_TERRITORY_CODE_NG":          169,
		"ISO_TERRITORY_CODE_NI":          170,
		"ISO_TERRITORY_CODE_NL":          171,
		"ISO_TERRITORY_CODE_NO":          172,
		"ISO_TERRITORY_CODE_NP":          173,
		"ISO_TERRITORY_CODE_NR":          174,
		"ISO_TERRITORY_CODE_NU":          175,
		"ISO_TERRITORY_CODE_NZ":          176,
		"ISO_TERRITORY_CODE_OM":          177,
		"ISO_TERRITORY_CODE_PA":          178,
		"ISO_TERRITORY_CODE_PE":          179,
		"ISO_TERRITORY_CODE_PF":          180,
		"ISO_TERRITORY_CODE_PG":          181,
		"ISO_TERRITORY_CODE_PH":          182,
		"ISO_TERRITORY_CODE_PK":          183,
		"ISO_TERRITORY_CODE_PL":          184,
		"ISO_TERRITORY_CODE_PM":          185,
		"ISO_TERRITORY_CODE_PN":          186,
		"ISO_TERRITORY_CODE_PR":          187,
		"ISO_TERRITORY_CODE_PS":          188,
		"ISO_TERRITORY_CODE_PT":          189,
		"ISO_TERRITORY_CODE_PW":          190,
		"ISO_TERRITORY_CODE_PY":          191,
		"ISO_TERRITORY_CODE_QA":          192,
		"ISO_TERRITORY_CODE_RE":          193,
		"ISO_TERRITORY_CODE_RO":          194,
		"ISO_TERRITORY_CODE_RS":          195,
		"ISO_TERRITORY_CODE_RU":          196,
		"ISO_TERRITORY_CODE_RW":          197,
		"ISO_TERRITORY_CODE_SA":          198,
		"ISO_TERRITORY_CODE_SB":          199,
		"ISO_TERRITORY_CODE_SC":          200,
		"ISO_TERRITORY_CODE_SD":          201,
		"ISO_TERRITORY_CODE_SE":          202,
		"ISO_TERRITORY_CODE_SG":          203,
		"ISO_TERRITORY_CODE_SH":          204,
		"ISO_TERRITORY_CODE_SI":          205,
		"ISO_TERRITORY_CODE_SJ":          206,
		"ISO_TERRITORY_CODE_SK":          207,
		"ISO_TERRITORY_CODE_SL":          208,
		"ISO_TERRITORY_CODE_SM":          209,
		"ISO_TERRITORY_CODE_SN":          210,
		"ISO_TERRITORY_CODE_SO":          211,
		"ISO_TERRITORY_CODE_SR":          212,
		"ISO_TERRITORY_CODE_SS":          213,
		"ISO_TERRITORY_CODE_ST":          214,
		"ISO_TERRITORY_CODE_SV":          215,
		"ISO_TERRITORY_CODE_SX":          216,
		"ISO_TERRITORY_CODE_SY":          217,
		"ISO_TERRITORY_CODE_SZ":          218,
		"ISO_TERRITORY_CODE_TC":          219,
		"ISO_TERRITORY_CODE_TD":          220,
		"ISO_TERRITORY_CODE_TF":          221,
		"ISO_TERRITORY_CODE_TG":          222,
		"ISO_TERRITORY_CODE_TH":          223,
		"ISO_TERRITORY_CODE_TJ":          224,
		"ISO_TERRITORY_CODE_TK":          225,
		"ISO_TERRITORY_CODE_TL":          226,
		"ISO_TERRITORY_CODE_TM":          227,
		"ISO_TERRITORY_CODE_TN":          228,
		"ISO_TERRITORY_CODE_TO":          229,
		"ISO_TERRITORY_CODE_TR":          230,
		"ISO_TERRITORY_CODE_TT":          231,
		"ISO_TERRITORY_CODE_TV":          232,
		"ISO_TERRITORY_CODE_TW":          233,
		"ISO_TERRITORY_CODE_TZ":          234,
		"ISO_TERRITORY_CODE_UA":          235,
		"ISO_TERRITORY_CODE_UG":          236,
		"ISO_TERRITORY_CODE_UM":          237,
		"ISO_TERRITORY_CODE_US":          238,
		"ISO_TERRITORY_CODE_UY":          239,
		"ISO_TERRITORY_CODE_UZ":          240,
		"ISO_TERRITORY_CODE_VA":          241,
		"ISO_TERRITORY_CODE_VC":          242,
		"ISO_TERRITORY_CODE_VE":          243,
		"ISO_TERRITORY_CODE_VG":          244,
		"ISO_TERRITORY_CODE_VI":          245,
		"ISO_TERRITORY_CODE_VN":          246,
		"ISO_TERRITORY_CODE_VU":          247,
		"ISO_TERRITORY_CODE_WF":          248,
		"ISO_TERRITORY_CODE_WS":          249,
		"ISO_TERRITORY_CODE_YE":          250,
		"ISO_TERRITORY_CODE_YT":          251,
		"ISO_TERRITORY_CODE_ZA":          252,
		"ISO_TERRITORY_CODE_ZM":          253,
		"ISO_TERRITORY_CODE_ZW":          254,
	}
)

func (x IsoTerritoryCode) Enum() *IsoTerritoryCode {
	p := new(IsoTerritoryCode)
	*p = x
	return p
}

func (x IsoTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[53].Descriptor()
}

func (IsoTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[53]
}

func (x IsoTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoTerritoryCode.Descriptor instead.
func (IsoTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{53}
}

type LabelNameType int32

const (
	LabelNameType_LABEL_NAME_TYPE_UNSPECIFIED      LabelNameType = 0
	LabelNameType_LABEL_NAME_TYPE_DISPLAYLABELNAME LabelNameType = 1
	LabelNameType_LABEL_NAME_TYPE_USERDEFINED      LabelNameType = 2
)

// Enum value maps for LabelNameType.
var (
	LabelNameType_name = map[int32]string{
		0: "LABEL_NAME_TYPE_UNSPECIFIED",
		1: "LABEL_NAME_TYPE_DISPLAYLABELNAME",
		2: "LABEL_NAME_TYPE_USERDEFINED",
	}
	LabelNameType_value = map[string]int32{
		"LABEL_NAME_TYPE_UNSPECIFIED":      0,
		"LABEL_NAME_TYPE_DISPLAYLABELNAME": 1,
		"LABEL_NAME_TYPE_USERDEFINED":      2,
	}
)

func (x LabelNameType) Enum() *LabelNameType {
	p := new(LabelNameType)
	*p = x
	return p
}

func (x LabelNameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelNameType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[54].Descriptor()
}

func (LabelNameType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[54]
}

func (x LabelNameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelNameType.Descriptor instead.
func (LabelNameType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{54}
}

type LicenseOrClaimRefusalReason int32

const (
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_UNSPECIFIED                                   LicenseOrClaimRefusalReason = 0
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_AGREEMENTOFADDITIONALPROVISIONSREQUIRED       LicenseOrClaimRefusalReason = 1
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFADVANCEPAYMENTREQUIRED            LicenseOrClaimRefusalReason = 2
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFGUARANTEEREQUIRED                 LicenseOrClaimRefusalReason = 3
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFLICENSEEREQUIRED                  LicenseOrClaimRefusalReason = 4
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFMOSTFAVOREDNATIONCLAUSEREQUIRED   LicenseOrClaimRefusalReason = 5
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFNUMBEROFRESOURCESREQUIRED         LicenseOrClaimRefusalReason = 6
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPLAYINGTIMEREQUIRED               LicenseOrClaimRefusalReason = 7
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPUBLISHERINFORMATIONREQUIRED      LicenseOrClaimRefusalReason = 8
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPUBLISHERPERCENTAGEREQUIRED       LicenseOrClaimRefusalReason = 9
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRATEREQUIRED                      LicenseOrClaimRefusalReason = 10
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASECREATORINFORMATIONREQUIRED LicenseOrClaimRefusalReason = 11
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASEDATEREQUIRED               LicenseOrClaimRefusalReason = 12
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASETITLEREQUIRED              LicenseOrClaimRefusalReason = 13
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFWORKCONTRIBUTORREQUIRED           LicenseOrClaimRefusalReason = 14
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFWORKTITLEREQUIRED                 LicenseOrClaimRefusalReason = 15
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_DEALEXPIRED                                   LicenseOrClaimRefusalReason = 16
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_DIFFERENTWORK                                 LicenseOrClaimRefusalReason = 17
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_DIRECTLICENSE                                 LicenseOrClaimRefusalReason = 18
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_DUPLICATELICENSE                              LicenseOrClaimRefusalReason = 19
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_DUPLICATEREQUEST                              LicenseOrClaimRefusalReason = 20
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_IMPORTLICENSEEXISTS                           LicenseOrClaimRefusalReason = 21
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_INCORRECTCLAIM                                LicenseOrClaimRefusalReason = 22
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_INCORRECTCONTROLLEDCOMPOSITIONRATE            LicenseOrClaimRefusalReason = 23
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_INHOUSELICENSEEXISTS                          LicenseOrClaimRefusalReason = 24
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_INSUFFICIENTINFORMATION                       LicenseOrClaimRefusalReason = 25
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_LICENSEENOTAUTHORIZED                         LicenseOrClaimRefusalReason = 26
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_MEDLEYREQUEST                                 LicenseOrClaimRefusalReason = 27
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_NOOPTIN                                       LicenseOrClaimRefusalReason = 28
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_NOPUBLISHERCLAIM                              LicenseOrClaimRefusalReason = 29
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_OWNERSHIPUNCONFIRMED                          LicenseOrClaimRefusalReason = 30
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_PRODUCTUNAVAILABLE                            LicenseOrClaimRefusalReason = 31
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_PUBLISHERNOTREPRESENTED                       LicenseOrClaimRefusalReason = 32
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_RELEASEWITHDRAWN                              LicenseOrClaimRefusalReason = 33
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_RELINQUISHEDCLAIM                             LicenseOrClaimRefusalReason = 34
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_USERDEFINED                                   LicenseOrClaimRefusalReason = 35
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_WORKDELETEDFROMRELEASE                        LicenseOrClaimRefusalReason = 36
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_WORKINCORRECTLYIDENTIFIED                     LicenseOrClaimRefusalReason = 37
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_WORKINPUBLICDOMAIN                            LicenseOrClaimRefusalReason = 38
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_WORKNOTUSED                                   LicenseOrClaimRefusalReason = 39
	LicenseOrClaimRefusalReason_LICENSE_OR_CLAIM_REFUSAL_REASON_WORKUNKNOWN                                   LicenseOrClaimRefusalReason = 40
)

// Enum value maps for LicenseOrClaimRefusalReason.
var (
	LicenseOrClaimRefusalReason_name = map[int32]string{
		0:  "LICENSE_OR_CLAIM_REFUSAL_REASON_UNSPECIFIED",
		1:  "LICENSE_OR_CLAIM_REFUSAL_REASON_AGREEMENTOFADDITIONALPROVISIONSREQUIRED",
		2:  "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFADVANCEPAYMENTREQUIRED",
		3:  "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFGUARANTEEREQUIRED",
		4:  "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFLICENSEEREQUIRED",
		5:  "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFMOSTFAVOREDNATIONCLAUSEREQUIRED",
		6:  "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFNUMBEROFRESOURCESREQUIRED",
		7:  "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPLAYINGTIMEREQUIRED",
		8:  "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPUBLISHERINFORMATIONREQUIRED",
		9:  "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPUBLISHERPERCENTAGEREQUIRED",
		10: "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRATEREQUIRED",
		11: "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASECREATORINFORMATIONREQUIRED",
		12: "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASEDATEREQUIRED",
		13: "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASETITLEREQUIRED",
		14: "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFWORKCONTRIBUTORREQUIRED",
		15: "LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFWORKTITLEREQUIRED",
		16: "LICENSE_OR_CLAIM_REFUSAL_REASON_DEALEXPIRED",
		17: "LICENSE_OR_CLAIM_REFUSAL_REASON_DIFFERENTWORK",
		18: "LICENSE_OR_CLAIM_REFUSAL_REASON_DIRECTLICENSE",
		19: "LICENSE_OR_CLAIM_REFUSAL_REASON_DUPLICATELICENSE",
		20: "LICENSE_OR_CLAIM_REFUSAL_REASON_DUPLICATEREQUEST",
		21: "LICENSE_OR_CLAIM_REFUSAL_REASON_IMPORTLICENSEEXISTS",
		22: "LICENSE_OR_CLAIM_REFUSAL_REASON_INCORRECTCLAIM",
		23: "LICENSE_OR_CLAIM_REFUSAL_REASON_INCORRECTCONTROLLEDCOMPOSITIONRATE",
		24: "LICENSE_OR_CLAIM_REFUSAL_REASON_INHOUSELICENSEEXISTS",
		25: "LICENSE_OR_CLAIM_REFUSAL_REASON_INSUFFICIENTINFORMATION",
		26: "LICENSE_OR_CLAIM_REFUSAL_REASON_LICENSEENOTAUTHORIZED",
		27: "LICENSE_OR_CLAIM_REFUSAL_REASON_MEDLEYREQUEST",
		28: "LICENSE_OR_CLAIM_REFUSAL_REASON_NOOPTIN",
		29: "LICENSE_OR_CLAIM_REFUSAL_REASON_NOPUBLISHERCLAIM",
		30: "LICENSE_OR_CLAIM_REFUSAL_REASON_OWNERSHIPUNCONFIRMED",
		31: "LICENSE_OR_CLAIM_REFUSAL_REASON_PRODUCTUNAVAILABLE",
		32: "LICENSE_OR_CLAIM_REFUSAL_REASON_PUBLISHERNOTREPRESENTED",
		33: "LICENSE_OR_CLAIM_REFUSAL_REASON_RELEASEWITHDRAWN",
		34: "LICENSE_OR_CLAIM_REFUSAL_REASON_RELINQUISHEDCLAIM",
		35: "LICENSE_OR_CLAIM_REFUSAL_REASON_USERDEFINED",
		36: "LICENSE_OR_CLAIM_REFUSAL_REASON_WORKDELETEDFROMRELEASE",
		37: "LICENSE_OR_CLAIM_REFUSAL_REASON_WORKINCORRECTLYIDENTIFIED",
		38: "LICENSE_OR_CLAIM_REFUSAL_REASON_WORKINPUBLICDOMAIN",
		39: "LICENSE_OR_CLAIM_REFUSAL_REASON_WORKNOTUSED",
		40: "LICENSE_OR_CLAIM_REFUSAL_REASON_WORKUNKNOWN",
	}
	LicenseOrClaimRefusalReason_value = map[string]int32{
		"LICENSE_OR_CLAIM_REFUSAL_REASON_UNSPECIFIED":                                   0,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_AGREEMENTOFADDITIONALPROVISIONSREQUIRED":       1,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFADVANCEPAYMENTREQUIRED":            2,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFGUARANTEEREQUIRED":                 3,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFLICENSEEREQUIRED":                  4,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFMOSTFAVOREDNATIONCLAUSEREQUIRED":   5,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFNUMBEROFRESOURCESREQUIRED":         6,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPLAYINGTIMEREQUIRED":               7,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPUBLISHERINFORMATIONREQUIRED":      8,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPUBLISHERPERCENTAGEREQUIRED":       9,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRATEREQUIRED":                      10,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASECREATORINFORMATIONREQUIRED": 11,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASEDATEREQUIRED":               12,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASETITLEREQUIRED":              13,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFWORKCONTRIBUTORREQUIRED":           14,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFWORKTITLEREQUIRED":                 15,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_DEALEXPIRED":                                   16,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_DIFFERENTWORK":                                 17,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_DIRECTLICENSE":                                 18,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_DUPLICATELICENSE":                              19,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_DUPLICATEREQUEST":                              20,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_IMPORTLICENSEEXISTS":                           21,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_INCORRECTCLAIM":                                22,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_INCORRECTCONTROLLEDCOMPOSITIONRATE":            23,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_INHOUSELICENSEEXISTS":                          24,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_INSUFFICIENTINFORMATION":                       25,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_LICENSEENOTAUTHORIZED":                         26,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_MEDLEYREQUEST":                                 27,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_NOOPTIN":                                       28,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_NOPUBLISHERCLAIM":                              29,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_OWNERSHIPUNCONFIRMED":                          30,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_PRODUCTUNAVAILABLE":                            31,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_PUBLISHERNOTREPRESENTED":                       32,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_RELEASEWITHDRAWN":                              33,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_RELINQUISHEDCLAIM":                             34,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_USERDEFINED":                                   35,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_WORKDELETEDFROMRELEASE":                        36,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_WORKINCORRECTLYIDENTIFIED":                     37,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_WORKINPUBLICDOMAIN":                            38,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_WORKNOTUSED":                                   39,
		"LICENSE_OR_CLAIM_REFUSAL_REASON_WORKUNKNOWN":                                   40,
	}
)

func (x LicenseOrClaimRefusalReason) Enum() *LicenseOrClaimRefusalReason {
	p := new(LicenseOrClaimRefusalReason)
	*p = x
	return p
}

func (x LicenseOrClaimRefusalReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseOrClaimRefusalReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[55].Descriptor()
}

func (LicenseOrClaimRefusalReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[55]
}

func (x LicenseOrClaimRefusalReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseOrClaimRefusalReason.Descriptor instead.
func (LicenseOrClaimRefusalReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{55}
}

type LicenseOrClaimRequestUpdateReason int32

const (
	LicenseOrClaimRequestUpdateReason_LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_UNSPECIFIED                              LicenseOrClaimRequestUpdateReason = 0
	LicenseOrClaimRequestUpdateReason_LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_ADDITIONALINFORMATIONPROVIDED            LicenseOrClaimRequestUpdateReason = 1
	LicenseOrClaimRequestUpdateReason_LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_ADDITIONALINFORMATIONPROVIDEDASREQUESTED LicenseOrClaimRequestUpdateReason = 2
	LicenseOrClaimRequestUpdateReason_LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_USERDEFINED                              LicenseOrClaimRequestUpdateReason = 3
)

// Enum value maps for LicenseOrClaimRequestUpdateReason.
var (
	LicenseOrClaimRequestUpdateReason_name = map[int32]string{
		0: "LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_UNSPECIFIED",
		1: "LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_ADDITIONALINFORMATIONPROVIDED",
		2: "LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_ADDITIONALINFORMATIONPROVIDEDASREQUESTED",
		3: "LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_USERDEFINED",
	}
	LicenseOrClaimRequestUpdateReason_value = map[string]int32{
		"LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_UNSPECIFIED":                              0,
		"LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_ADDITIONALINFORMATIONPROVIDED":            1,
		"LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_ADDITIONALINFORMATIONPROVIDEDASREQUESTED": 2,
		"LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_USERDEFINED":                              3,
	}
)

func (x LicenseOrClaimRequestUpdateReason) Enum() *LicenseOrClaimRequestUpdateReason {
	p := new(LicenseOrClaimRequestUpdateReason)
	*p = x
	return p
}

func (x LicenseOrClaimRequestUpdateReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseOrClaimRequestUpdateReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[56].Descriptor()
}

func (LicenseOrClaimRequestUpdateReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[56]
}

func (x LicenseOrClaimRequestUpdateReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseOrClaimRequestUpdateReason.Descriptor instead.
func (LicenseOrClaimRequestUpdateReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{56}
}

type LicenseOrClaimUpdateReason int32

const (
	LicenseOrClaimUpdateReason_LICENSE_OR_CLAIM_UPDATE_REASON_UNSPECIFIED               LicenseOrClaimUpdateReason = 0
	LicenseOrClaimUpdateReason_LICENSE_OR_CLAIM_UPDATE_REASON_NEWLICENSEISSUED          LicenseOrClaimUpdateReason = 1
	LicenseOrClaimUpdateReason_LICENSE_OR_CLAIM_UPDATE_REASON_NEWRIGHTSHAREIDENTIFIED   LicenseOrClaimUpdateReason = 2
	LicenseOrClaimUpdateReason_LICENSE_OR_CLAIM_UPDATE_REASON_NEWRIGHTSHOLDERIDENTIFIED LicenseOrClaimUpdateReason = 3
	LicenseOrClaimUpdateReason_LICENSE_OR_CLAIM_UPDATE_REASON_NEWWORKIDENTIFIED         LicenseOrClaimUpdateReason = 4
	LicenseOrClaimUpdateReason_LICENSE_OR_CLAIM_UPDATE_REASON_REVOKED                   LicenseOrClaimUpdateReason = 5
	LicenseOrClaimUpdateReason_LICENSE_OR_CLAIM_UPDATE_REASON_USERDEFINED               LicenseOrClaimUpdateReason = 6
)

// Enum value maps for LicenseOrClaimUpdateReason.
var (
	LicenseOrClaimUpdateReason_name = map[int32]string{
		0: "LICENSE_OR_CLAIM_UPDATE_REASON_UNSPECIFIED",
		1: "LICENSE_OR_CLAIM_UPDATE_REASON_NEWLICENSEISSUED",
		2: "LICENSE_OR_CLAIM_UPDATE_REASON_NEWRIGHTSHAREIDENTIFIED",
		3: "LICENSE_OR_CLAIM_UPDATE_REASON_NEWRIGHTSHOLDERIDENTIFIED",
		4: "LICENSE_OR_CLAIM_UPDATE_REASON_NEWWORKIDENTIFIED",
		5: "LICENSE_OR_CLAIM_UPDATE_REASON_REVOKED",
		6: "LICENSE_OR_CLAIM_UPDATE_REASON_USERDEFINED",
	}
	LicenseOrClaimUpdateReason_value = map[string]int32{
		"LICENSE_OR_CLAIM_UPDATE_REASON_UNSPECIFIED":               0,
		"LICENSE_OR_CLAIM_UPDATE_REASON_NEWLICENSEISSUED":          1,
		"LICENSE_OR_CLAIM_UPDATE_REASON_NEWRIGHTSHAREIDENTIFIED":   2,
		"LICENSE_OR_CLAIM_UPDATE_REASON_NEWRIGHTSHOLDERIDENTIFIED": 3,
		"LICENSE_OR_CLAIM_UPDATE_REASON_NEWWORKIDENTIFIED":         4,
		"LICENSE_OR_CLAIM_UPDATE_REASON_REVOKED":                   5,
		"LICENSE_OR_CLAIM_UPDATE_REASON_USERDEFINED":               6,
	}
)

func (x LicenseOrClaimUpdateReason) Enum() *LicenseOrClaimUpdateReason {
	p := new(LicenseOrClaimUpdateReason)
	*p = x
	return p
}

func (x LicenseOrClaimUpdateReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseOrClaimUpdateReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[57].Descriptor()
}

func (LicenseOrClaimUpdateReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[57]
}

func (x LicenseOrClaimUpdateReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseOrClaimUpdateReason.Descriptor instead.
func (LicenseOrClaimUpdateReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{57}
}

type LicenseRejectionReason int32

const (
	LicenseRejectionReason_LICENSE_REJECTION_REASON_UNSPECIFIED                    LicenseRejectionReason = 0
	LicenseRejectionReason_LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES      LicenseRejectionReason = 1
	LicenseRejectionReason_LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE LicenseRejectionReason = 2
	LicenseRejectionReason_LICENSE_REJECTION_REASON_LICENSEEXISTS                  LicenseRejectionReason = 3
	LicenseRejectionReason_LICENSE_REJECTION_REASON_LICENSENOTNEEDED               LicenseRejectionReason = 4
	LicenseRejectionReason_LICENSE_REJECTION_REASON_WRONGADDRESSEE                 LicenseRejectionReason = 5
	LicenseRejectionReason_LICENSE_REJECTION_REASON_USERDEFINED                    LicenseRejectionReason = 6
	LicenseRejectionReason_LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN             LicenseRejectionReason = 7
	LicenseRejectionReason_LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER  LicenseRejectionReason = 8
	LicenseRejectionReason_LICENSE_REJECTION_REASON_LICENSEBLOCKED                 LicenseRejectionReason = 9
	LicenseRejectionReason_LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING      LicenseRejectionReason = 10
	LicenseRejectionReason_LICENSE_REJECTION_REASON_SHARESPLITSDIFFER              LicenseRejectionReason = 11
	LicenseRejectionReason_LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES          LicenseRejectionReason = 12
)

// Enum value maps for LicenseRejectionReason.
var (
	LicenseRejectionReason_name = map[int32]string{
		0:  "LICENSE_REJECTION_REASON_UNSPECIFIED",
		1:  "LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES",
		2:  "LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE",
		3:  "LICENSE_REJECTION_REASON_LICENSEEXISTS",
		4:  "LICENSE_REJECTION_REASON_LICENSENOTNEEDED",
		5:  "LICENSE_REJECTION_REASON_WRONGADDRESSEE",
		6:  "LICENSE_REJECTION_REASON_USERDEFINED",
		7:  "LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN",
		8:  "LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER",
		9:  "LICENSE_REJECTION_REASON_LICENSEBLOCKED",
		10: "LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING",
		11: "LICENSE_REJECTION_REASON_SHARESPLITSDIFFER",
		12: "LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES",
	}
	LicenseRejectionReason_value = map[string]int32{
		"LICENSE_REJECTION_REASON_UNSPECIFIED":                    0,
		"LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES":      1,
		"LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE": 2,
		"LICENSE_REJECTION_REASON_LICENSEEXISTS":                  3,
		"LICENSE_REJECTION_REASON_LICENSENOTNEEDED":               4,
		"LICENSE_REJECTION_REASON_WRONGADDRESSEE":                 5,
		"LICENSE_REJECTION_REASON_USERDEFINED":                    6,
		"LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN":             7,
		"LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER":  8,
		"LICENSE_REJECTION_REASON_LICENSEBLOCKED":                 9,
		"LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING":      10,
		"LICENSE_REJECTION_REASON_SHARESPLITSDIFFER":              11,
		"LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES":          12,
	}
)

func (x LicenseRejectionReason) Enum() *LicenseRejectionReason {
	p := new(LicenseRejectionReason)
	*p = x
	return p
}

func (x LicenseRejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseRejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[58].Descriptor()
}

func (LicenseRejectionReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[58]
}

func (x LicenseRejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseRejectionReason.Descriptor instead.
func (LicenseRejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{58}
}

type LicenseStatus int32

const (
	LicenseStatus_LICENSE_STATUS_UNSPECIFIED LicenseStatus = 0
	LicenseStatus_LICENSE_STATUS_ACTIVE      LicenseStatus = 1
	LicenseStatus_LICENSE_STATUS_PENDING     LicenseStatus = 2
	LicenseStatus_LICENSE_STATUS_REVOKED     LicenseStatus = 3
)

// Enum value maps for LicenseStatus.
var (
	LicenseStatus_name = map[int32]string{
		0: "LICENSE_STATUS_UNSPECIFIED",
		1: "LICENSE_STATUS_ACTIVE",
		2: "LICENSE_STATUS_PENDING",
		3: "LICENSE_STATUS_REVOKED",
	}
	LicenseStatus_value = map[string]int32{
		"LICENSE_STATUS_UNSPECIFIED": 0,
		"LICENSE_STATUS_ACTIVE":      1,
		"LICENSE_STATUS_PENDING":     2,
		"LICENSE_STATUS_REVOKED":     3,
	}
)

func (x LicenseStatus) Enum() *LicenseStatus {
	p := new(LicenseStatus)
	*p = x
	return p
}

func (x LicenseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[59].Descriptor()
}

func (LicenseStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[59]
}

func (x LicenseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseStatus.Descriptor instead.
func (LicenseStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{59}
}

type LicensingProcessStatus int32

const (
	LicensingProcessStatus_LICENSING_PROCESS_STATUS_UNSPECIFIED                    LicensingProcessStatus = 0
	LicensingProcessStatus_LICENSING_PROCESS_STATUS_PENDING                        LicensingProcessStatus = 1
	LicensingProcessStatus_LICENSING_PROCESS_STATUS_PROCESSED                      LicensingProcessStatus = 2
	LicensingProcessStatus_LICENSING_PROCESS_STATUS_THIRDPARTYINFORMATIONREQUESTED LicensingProcessStatus = 3
)

// Enum value maps for LicensingProcessStatus.
var (
	LicensingProcessStatus_name = map[int32]string{
		0: "LICENSING_PROCESS_STATUS_UNSPECIFIED",
		1: "LICENSING_PROCESS_STATUS_PENDING",
		2: "LICENSING_PROCESS_STATUS_PROCESSED",
		3: "LICENSING_PROCESS_STATUS_THIRDPARTYINFORMATIONREQUESTED",
	}
	LicensingProcessStatus_value = map[string]int32{
		"LICENSING_PROCESS_STATUS_UNSPECIFIED":                    0,
		"LICENSING_PROCESS_STATUS_PENDING":                        1,
		"LICENSING_PROCESS_STATUS_PROCESSED":                      2,
		"LICENSING_PROCESS_STATUS_THIRDPARTYINFORMATIONREQUESTED": 3,
	}
)

func (x LicensingProcessStatus) Enum() *LicensingProcessStatus {
	p := new(LicensingProcessStatus)
	*p = x
	return p
}

func (x LicensingProcessStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicensingProcessStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[60].Descriptor()
}

func (LicensingProcessStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[60]
}

func (x LicensingProcessStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicensingProcessStatus.Descriptor instead.
func (LicensingProcessStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{60}
}

type LodFileStatus int32

const (
	LodFileStatus_LOD_FILE_STATUS_UNSPECIFIED LodFileStatus = 0
	LodFileStatus_LOD_FILE_STATUS_FILEOK      LodFileStatus = 1
)

// Enum value maps for LodFileStatus.
var (
	LodFileStatus_name = map[int32]string{
		0: "LOD_FILE_STATUS_UNSPECIFIED",
		1: "LOD_FILE_STATUS_FILEOK",
	}
	LodFileStatus_value = map[string]int32{
		"LOD_FILE_STATUS_UNSPECIFIED": 0,
		"LOD_FILE_STATUS_FILEOK":      1,
	}
)

func (x LodFileStatus) Enum() *LodFileStatus {
	p := new(LodFileStatus)
	*p = x
	return p
}

func (x LodFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LodFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[61].Descriptor()
}

func (LodFileStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[61]
}

func (x LodFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LodFileStatus.Descriptor instead.
func (LodFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{61}
}

type LodProposedActionType int32

const (
	LodProposedActionType_LOD_PROPOSED_ACTION_TYPE_UNSPECIFIED   LodProposedActionType = 0
	LodProposedActionType_LOD_PROPOSED_ACTION_TYPE_RESENDXMLONLY LodProposedActionType = 1
)

// Enum value maps for LodProposedActionType.
var (
	LodProposedActionType_name = map[int32]string{
		0: "LOD_PROPOSED_ACTION_TYPE_UNSPECIFIED",
		1: "LOD_PROPOSED_ACTION_TYPE_RESENDXMLONLY",
	}
	LodProposedActionType_value = map[string]int32{
		"LOD_PROPOSED_ACTION_TYPE_UNSPECIFIED":   0,
		"LOD_PROPOSED_ACTION_TYPE_RESENDXMLONLY": 1,
	}
)

func (x LodProposedActionType) Enum() *LodProposedActionType {
	p := new(LodProposedActionType)
	*p = x
	return p
}

func (x LodProposedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LodProposedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[62].Descriptor()
}

func (LodProposedActionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[62]
}

func (x LodProposedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LodProposedActionType.Descriptor instead.
func (LodProposedActionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{62}
}

type MembershipType int32

const (
	MembershipType_MEMBERSHIP_TYPE_UNSPECIFIED     MembershipType = 0
	MembershipType_MEMBERSHIP_TYPE_NATIONALMEMBER  MembershipType = 1
	MembershipType_MEMBERSHIP_TYPE_REGIONALMEMBER  MembershipType = 2
	MembershipType_MEMBERSHIP_TYPE_WORLDWIDEMEMBER MembershipType = 3
)

// Enum value maps for MembershipType.
var (
	MembershipType_name = map[int32]string{
		0: "MEMBERSHIP_TYPE_UNSPECIFIED",
		1: "MEMBERSHIP_TYPE_NATIONALMEMBER",
		2: "MEMBERSHIP_TYPE_REGIONALMEMBER",
		3: "MEMBERSHIP_TYPE_WORLDWIDEMEMBER",
	}
	MembershipType_value = map[string]int32{
		"MEMBERSHIP_TYPE_UNSPECIFIED":     0,
		"MEMBERSHIP_TYPE_NATIONALMEMBER":  1,
		"MEMBERSHIP_TYPE_REGIONALMEMBER":  2,
		"MEMBERSHIP_TYPE_WORLDWIDEMEMBER": 3,
	}
)

func (x MembershipType) Enum() *MembershipType {
	p := new(MembershipType)
	*p = x
	return p
}

func (x MembershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[63].Descriptor()
}

func (MembershipType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[63]
}

func (x MembershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipType.Descriptor instead.
func (MembershipType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{63}
}

type MessageActionType int32

const (
	MessageActionType_MESSAGE_ACTION_TYPE_UNSPECIFIED          MessageActionType = 0
	MessageActionType_MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY  MessageActionType = 1
	MessageActionType_MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY MessageActionType = 2
	MessageActionType_MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY   MessageActionType = 3
	MessageActionType_MESSAGE_ACTION_TYPE_REDELIVERY           MessageActionType = 4
	MessageActionType_MESSAGE_ACTION_TYPE_TAKEDOWN             MessageActionType = 5
	MessageActionType_MESSAGE_ACTION_TYPE_USERDEFINED          MessageActionType = 6
)

// Enum value maps for MessageActionType.
var (
	MessageActionType_name = map[int32]string{
		0: "MESSAGE_ACTION_TYPE_UNSPECIFIED",
		1: "MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY",
		2: "MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY",
		3: "MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY",
		4: "MESSAGE_ACTION_TYPE_REDELIVERY",
		5: "MESSAGE_ACTION_TYPE_TAKEDOWN",
		6: "MESSAGE_ACTION_TYPE_USERDEFINED",
	}
	MessageActionType_value = map[string]int32{
		"MESSAGE_ACTION_TYPE_UNSPECIFIED":          0,
		"MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY":  1,
		"MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY": 2,
		"MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY":   3,
		"MESSAGE_ACTION_TYPE_REDELIVERY":           4,
		"MESSAGE_ACTION_TYPE_TAKEDOWN":             5,
		"MESSAGE_ACTION_TYPE_USERDEFINED":          6,
	}
)

func (x MessageActionType) Enum() *MessageActionType {
	p := new(MessageActionType)
	*p = x
	return p
}

func (x MessageActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[64].Descriptor()
}

func (MessageActionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[64]
}

func (x MessageActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageActionType.Descriptor instead.
func (MessageActionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{64}
}

type MessageContentRevenueType int32

const (
	MessageContentRevenueType_MESSAGE_CONTENT_REVENUE_TYPE_UNSPECIFIED             MessageContentRevenueType = 0
	MessageContentRevenueType_MESSAGE_CONTENT_REVENUE_TYPE_NONTRANSACTIONALREVENUE MessageContentRevenueType = 1
	MessageContentRevenueType_MESSAGE_CONTENT_REVENUE_TYPE_TRANSACTIONALREVENUE    MessageContentRevenueType = 2
	MessageContentRevenueType_MESSAGE_CONTENT_REVENUE_TYPE_USERDEFINED             MessageContentRevenueType = 3
)

// Enum value maps for MessageContentRevenueType.
var (
	MessageContentRevenueType_name = map[int32]string{
		0: "MESSAGE_CONTENT_REVENUE_TYPE_UNSPECIFIED",
		1: "MESSAGE_CONTENT_REVENUE_TYPE_NONTRANSACTIONALREVENUE",
		2: "MESSAGE_CONTENT_REVENUE_TYPE_TRANSACTIONALREVENUE",
		3: "MESSAGE_CONTENT_REVENUE_TYPE_USERDEFINED",
	}
	MessageContentRevenueType_value = map[string]int32{
		"MESSAGE_CONTENT_REVENUE_TYPE_UNSPECIFIED":             0,
		"MESSAGE_CONTENT_REVENUE_TYPE_NONTRANSACTIONALREVENUE": 1,
		"MESSAGE_CONTENT_REVENUE_TYPE_TRANSACTIONALREVENUE":    2,
		"MESSAGE_CONTENT_REVENUE_TYPE_USERDEFINED":             3,
	}
)

func (x MessageContentRevenueType) Enum() *MessageContentRevenueType {
	p := new(MessageContentRevenueType)
	*p = x
	return p
}

func (x MessageContentRevenueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageContentRevenueType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[65].Descriptor()
}

func (MessageContentRevenueType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[65]
}

func (x MessageContentRevenueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageContentRevenueType.Descriptor instead.
func (MessageContentRevenueType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{65}
}

type MessageContextType int32

const (
	MessageContextType_MESSAGE_CONTEXT_TYPE_UNSPECIFIED                                                    MessageContextType = 0
	MessageContextType_MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMREQUESTMESSAGEINIDENTIFICATIONCYCLE            MessageContextType = 1
	MessageContextType_MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINIDENTIFICATIONCYCLE       MessageContextType = 2
	MessageContextType_MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMREQUESTMESSAGEINCONFIRMATIONCYCLE              MessageContextType = 3
	MessageContextType_MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINCONFIRMATIONCYCLE         MessageContextType = 4
	MessageContextType_MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINLOCCYCLEASLODMESSAGE      MessageContextType = 5
	MessageContextType_MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINLOCCYCLEASLODCONFIRMATION MessageContextType = 6
)

// Enum value maps for MessageContextType.
var (
	MessageContextType_name = map[int32]string{
		0: "MESSAGE_CONTEXT_TYPE_UNSPECIFIED",
		1: "MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMREQUESTMESSAGEINIDENTIFICATIONCYCLE",
		2: "MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINIDENTIFICATIONCYCLE",
		3: "MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMREQUESTMESSAGEINCONFIRMATIONCYCLE",
		4: "MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINCONFIRMATIONCYCLE",
		5: "MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINLOCCYCLEASLODMESSAGE",
		6: "MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINLOCCYCLEASLODCONFIRMATION",
	}
	MessageContextType_value = map[string]int32{
		"MESSAGE_CONTEXT_TYPE_UNSPECIFIED":                                                    0,
		"MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMREQUESTMESSAGEINIDENTIFICATIONCYCLE":            1,
		"MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINIDENTIFICATIONCYCLE":       2,
		"MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMREQUESTMESSAGEINCONFIRMATIONCYCLE":              3,
		"MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINCONFIRMATIONCYCLE":         4,
		"MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINLOCCYCLEASLODMESSAGE":      5,
		"MESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINLOCCYCLEASLODCONFIRMATION": 6,
	}
)

func (x MessageContextType) Enum() *MessageContextType {
	p := new(MessageContextType)
	*p = x
	return p
}

func (x MessageContextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageContextType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[66].Descriptor()
}

func (MessageContextType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[66]
}

func (x MessageContextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageContextType.Descriptor instead.
func (MessageContextType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{66}
}

type MessageControlType int32

const (
	MessageControlType_MESSAGE_CONTROL_TYPE_UNSPECIFIED MessageControlType = 0
	MessageControlType_MESSAGE_CONTROL_TYPE_LIVEMESSAGE MessageControlType = 1
	MessageControlType_MESSAGE_CONTROL_TYPE_TESTMESSAGE MessageControlType = 2
)

// Enum value maps for MessageControlType.
var (
	MessageControlType_name = map[int32]string{
		0: "MESSAGE_CONTROL_TYPE_UNSPECIFIED",
		1: "MESSAGE_CONTROL_TYPE_LIVEMESSAGE",
		2: "MESSAGE_CONTROL_TYPE_TESTMESSAGE",
	}
	MessageControlType_value = map[string]int32{
		"MESSAGE_CONTROL_TYPE_UNSPECIFIED": 0,
		"MESSAGE_CONTROL_TYPE_LIVEMESSAGE": 1,
		"MESSAGE_CONTROL_TYPE_TESTMESSAGE": 2,
	}
)

func (x MessageControlType) Enum() *MessageControlType {
	p := new(MessageControlType)
	*p = x
	return p
}

func (x MessageControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[67].Descriptor()
}

func (MessageControlType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[67]
}

func (x MessageControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageControlType.Descriptor instead.
func (MessageControlType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{67}
}

type MidiType int32

const (
	MidiType_MIDI_TYPE_UNSPECIFIED    MidiType = 0
	MidiType_MIDI_TYPE_MONOPHONICMIDI MidiType = 1
	MidiType_MIDI_TYPE_POLYPHONICMIDI MidiType = 2
	MidiType_MIDI_TYPE_UNKNOWN        MidiType = 3
	MidiType_MIDI_TYPE_USERDEFINED    MidiType = 4
)

// Enum value maps for MidiType.
var (
	MidiType_name = map[int32]string{
		0: "MIDI_TYPE_UNSPECIFIED",
		1: "MIDI_TYPE_MONOPHONICMIDI",
		2: "MIDI_TYPE_POLYPHONICMIDI",
		3: "MIDI_TYPE_UNKNOWN",
		4: "MIDI_TYPE_USERDEFINED",
	}
	MidiType_value = map[string]int32{
		"MIDI_TYPE_UNSPECIFIED":    0,
		"MIDI_TYPE_MONOPHONICMIDI": 1,
		"MIDI_TYPE_POLYPHONICMIDI": 2,
		"MIDI_TYPE_UNKNOWN":        3,
		"MIDI_TYPE_USERDEFINED":    4,
	}
)

func (x MidiType) Enum() *MidiType {
	p := new(MidiType)
	*p = x
	return p
}

func (x MidiType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MidiType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[68].Descriptor()
}

func (MidiType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[68]
}

func (x MidiType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MidiType.Descriptor instead.
func (MidiType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{68}
}

type MlcMessageType int32

const (
	MlcMessageType_MLC_MESSAGE_TYPE_UNSPECIFIED                                   MlcMessageType = 0
	MlcMessageType_MLC_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE MlcMessageType = 1
	MlcMessageType_MLC_MESSAGE_TYPE_REQUESTSOUNDRECORDINGINFORMATIONMESSAGE       MlcMessageType = 2
	MlcMessageType_MLC_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE        MlcMessageType = 3
	MlcMessageType_MLC_MESSAGE_TYPE_SALESREPORTMESSAGE                            MlcMessageType = 4
	MlcMessageType_MLC_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE                   MlcMessageType = 5
)

// Enum value maps for MlcMessageType.
var (
	MlcMessageType_name = map[int32]string{
		0: "MLC_MESSAGE_TYPE_UNSPECIFIED",
		1: "MLC_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE",
		2: "MLC_MESSAGE_TYPE_REQUESTSOUNDRECORDINGINFORMATIONMESSAGE",
		3: "MLC_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE",
		4: "MLC_MESSAGE_TYPE_SALESREPORTMESSAGE",
		5: "MLC_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE",
	}
	MlcMessageType_value = map[string]int32{
		"MLC_MESSAGE_TYPE_UNSPECIFIED":                                   0,
		"MLC_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE": 1,
		"MLC_MESSAGE_TYPE_REQUESTSOUNDRECORDINGINFORMATIONMESSAGE":       2,
		"MLC_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE":        3,
		"MLC_MESSAGE_TYPE_SALESREPORTMESSAGE":                            4,
		"MLC_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE":                   5,
	}
)

func (x MlcMessageType) Enum() *MlcMessageType {
	p := new(MlcMessageType)
	*p = x
	return p
}

func (x MlcMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MlcMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[69].Descriptor()
}

func (MlcMessageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[69]
}

func (x MlcMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MlcMessageType.Descriptor instead.
func (MlcMessageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{69}
}

type MusicalWorkContributorRole int32

const (
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED                  MusicalWorkContributorRole = 0
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER                      MusicalWorkContributorRole = 1
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT                    MusicalWorkContributorRole = 2
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER                     MusicalWorkContributorRole = 3
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR                       MusicalWorkContributorRole = 4
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS           MusicalWorkContributorRole = 5
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD            MusicalWorkContributorRole = 6
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER                     MusicalWorkContributorRole = 7
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER                     MusicalWorkContributorRole = 8
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST             MusicalWorkContributorRole = 9
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR                    MusicalWorkContributorRole = 10
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR                      MusicalWorkContributorRole = 11
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR               MusicalWorkContributorRole = 12
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT                   MusicalWorkContributorRole = 13
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER                     MusicalWorkContributorRole = 14
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER                       MusicalWorkContributorRole = 15
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST                   MusicalWorkContributorRole = 16
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT           MusicalWorkContributorRole = 17
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST                   MusicalWorkContributorRole = 18
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER                 MusicalWorkContributorRole = 19
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST                     MusicalWorkContributorRole = 20
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER                MusicalWorkContributorRole = 21
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR               MusicalWorkContributorRole = 22
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER                   MusicalWorkContributorRole = 23
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT                   MusicalWorkContributorRole = 24
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER                     MusicalWorkContributorRole = 25
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER                     MusicalWorkContributorRole = 26
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR                   MusicalWorkContributorRole = 27
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR             MusicalWorkContributorRole = 28
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR                     MusicalWorkContributorRole = 29
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER                  MusicalWorkContributorRole = 30
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST                  MusicalWorkContributorRole = 31
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR                   MusicalWorkContributorRole = 32
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER                   MusicalWorkContributorRole = 33
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER                 MusicalWorkContributorRole = 34
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL MusicalWorkContributorRole = 35
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER                MusicalWorkContributorRole = 36
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT            MusicalWorkContributorRole = 37
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER              MusicalWorkContributorRole = 38
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER               MusicalWorkContributorRole = 39
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER           MusicalWorkContributorRole = 40
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER            MusicalWorkContributorRole = 41
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER          MusicalWorkContributorRole = 42
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER                 MusicalWorkContributorRole = 43
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER         MusicalWorkContributorRole = 44
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN                      MusicalWorkContributorRole = 45
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED                  MusicalWorkContributorRole = 46
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER          MusicalWorkContributorRole = 47
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONTRIBUTOR                  MusicalWorkContributorRole = 48
)

// Enum value maps for MusicalWorkContributorRole.
var (
	MusicalWorkContributorRole_name = map[int32]string{
		0:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER",
		2:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT",
		3:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER",
		4:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR",
		5:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS",
		6:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD",
		7:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER",
		8:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER",
		9:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST",
		10: "MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR",
		11: "MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR",
		12: "MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR",
		13: "MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT",
		14: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER",
		15: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER",
		16: "MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST",
		17: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT",
		18: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST",
		19: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER",
		20: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST",
		21: "MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER",
		22: "MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR",
		23: "MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER",
		24: "MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT",
		25: "MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER",
		26: "MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER",
		27: "MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR",
		28: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR",
		29: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR",
		30: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER",
		31: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST",
		32: "MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR",
		33: "MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER",
		34: "MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER",
		35: "MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL",
		36: "MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER",
		37: "MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT",
		38: "MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER",
		39: "MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER",
		40: "MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER",
		41: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER",
		42: "MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER",
		43: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER",
		44: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER",
		45: "MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN",
		46: "MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED",
		47: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER",
		48: "MUSICAL_WORK_CONTRIBUTOR_ROLE_CONTRIBUTOR",
	}
	MusicalWorkContributorRole_value = map[string]int32{
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED":                  0,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER":                      1,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT":                    2,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER":                     3,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR":                       4,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS":           5,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD":            6,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER":                     7,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER":                     8,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST":             9,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR":                    10,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR":                      11,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR":               12,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT":                   13,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER":                     14,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER":                       15,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST":                   16,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT":           17,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST":                   18,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER":                 19,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST":                     20,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER":                21,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR":               22,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER":                   23,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT":                   24,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER":                     25,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER":                     26,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR":                   27,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR":             28,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR":                     29,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER":                  30,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST":                  31,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR":                   32,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER":                   33,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER":                 34,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL": 35,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER":                36,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT":            37,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER":              38,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER":               39,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER":           40,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER":            41,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER":          42,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER":                 43,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER":         44,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN":                      45,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED":                  46,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER":          47,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_CONTRIBUTOR":                  48,
	}
)

func (x MusicalWorkContributorRole) Enum() *MusicalWorkContributorRole {
	p := new(MusicalWorkContributorRole)
	*p = x
	return p
}

func (x MusicalWorkContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MusicalWorkContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[70].Descriptor()
}

func (MusicalWorkContributorRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[70]
}

func (x MusicalWorkContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MusicalWorkContributorRole.Descriptor instead.
func (MusicalWorkContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{70}
}

type MusicalWorkRightsClaimType int32

const (
	MusicalWorkRightsClaimType_MUSICAL_WORK_RIGHTS_CLAIM_TYPE_UNSPECIFIED      MusicalWorkRightsClaimType = 0
	MusicalWorkRightsClaimType_MUSICAL_WORK_RIGHTS_CLAIM_TYPE_COPYRIGHTCONTROL MusicalWorkRightsClaimType = 1
	MusicalWorkRightsClaimType_MUSICAL_WORK_RIGHTS_CLAIM_TYPE_NONMEMBERCLAIM   MusicalWorkRightsClaimType = 2
	MusicalWorkRightsClaimType_MUSICAL_WORK_RIGHTS_CLAIM_TYPE_PUBLICDOMAIN     MusicalWorkRightsClaimType = 3
	MusicalWorkRightsClaimType_MUSICAL_WORK_RIGHTS_CLAIM_TYPE_SOCIETYCLAIM     MusicalWorkRightsClaimType = 4
	MusicalWorkRightsClaimType_MUSICAL_WORK_RIGHTS_CLAIM_TYPE_UNKNOWN          MusicalWorkRightsClaimType = 5
)

// Enum value maps for MusicalWorkRightsClaimType.
var (
	MusicalWorkRightsClaimType_name = map[int32]string{
		0: "MUSICAL_WORK_RIGHTS_CLAIM_TYPE_UNSPECIFIED",
		1: "MUSICAL_WORK_RIGHTS_CLAIM_TYPE_COPYRIGHTCONTROL",
		2: "MUSICAL_WORK_RIGHTS_CLAIM_TYPE_NONMEMBERCLAIM",
		3: "MUSICAL_WORK_RIGHTS_CLAIM_TYPE_PUBLICDOMAIN",
		4: "MUSICAL_WORK_RIGHTS_CLAIM_TYPE_SOCIETYCLAIM",
		5: "MUSICAL_WORK_RIGHTS_CLAIM_TYPE_UNKNOWN",
	}
	MusicalWorkRightsClaimType_value = map[string]int32{
		"MUSICAL_WORK_RIGHTS_CLAIM_TYPE_UNSPECIFIED":      0,
		"MUSICAL_WORK_RIGHTS_CLAIM_TYPE_COPYRIGHTCONTROL": 1,
		"MUSICAL_WORK_RIGHTS_CLAIM_TYPE_NONMEMBERCLAIM":   2,
		"MUSICAL_WORK_RIGHTS_CLAIM_TYPE_PUBLICDOMAIN":     3,
		"MUSICAL_WORK_RIGHTS_CLAIM_TYPE_SOCIETYCLAIM":     4,
		"MUSICAL_WORK_RIGHTS_CLAIM_TYPE_UNKNOWN":          5,
	}
)

func (x MusicalWorkRightsClaimType) Enum() *MusicalWorkRightsClaimType {
	p := new(MusicalWorkRightsClaimType)
	*p = x
	return p
}

func (x MusicalWorkRightsClaimType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MusicalWorkRightsClaimType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[71].Descriptor()
}

func (MusicalWorkRightsClaimType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[71]
}

func (x MusicalWorkRightsClaimType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MusicalWorkRightsClaimType.Descriptor instead.
func (MusicalWorkRightsClaimType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{71}
}

type MusicalWorkType int32

const (
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIED                   MusicalWorkType = 0
	MusicalWorkType_MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE     MusicalWorkType = 1
	MusicalWorkType_MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK       MusicalWorkType = 2
	MusicalWorkType_MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS          MusicalWorkType = 3
	MusicalWorkType_MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC          MusicalWorkType = 4
	MusicalWorkType_MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK          MusicalWorkType = 5
	MusicalWorkType_MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK          MusicalWorkType = 6
	MusicalWorkType_MUSICAL_WORK_TYPE_LYRICREMOVAL                  MusicalWorkType = 7
	MusicalWorkType_MUSICAL_WORK_TYPE_LYRICREPLACEMENT              MusicalWorkType = 8
	MusicalWorkType_MUSICAL_WORK_TYPE_LYRICTRANSLATION              MusicalWorkType = 9
	MusicalWorkType_MUSICAL_WORK_TYPE_MASHUP                        MusicalWorkType = 10
	MusicalWorkType_MUSICAL_WORK_TYPE_MEDLEY                        MusicalWorkType = 11
	MusicalWorkType_MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK      MusicalWorkType = 12
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT           MusicalWorkType = 13
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES        MusicalWorkType = 14
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICARRANGEMENT              MusicalWorkType = 15
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT        MusicalWorkType = 16
	MusicalWorkType_MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT     MusicalWorkType = 17
	MusicalWorkType_MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION       MusicalWorkType = 18
	MusicalWorkType_MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK           MusicalWorkType = 19
	MusicalWorkType_MUSICAL_WORK_TYPE_POTPOURRI                     MusicalWorkType = 20
	MusicalWorkType_MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK    MusicalWorkType = 21
	MusicalWorkType_MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK           MusicalWorkType = 22
	MusicalWorkType_MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK         MusicalWorkType = 23
	MusicalWorkType_MUSICAL_WORK_TYPE_TVPRODUCTIONWORK              MusicalWorkType = 24
	MusicalWorkType_MUSICAL_WORK_TYPE_UNKNOWN                       MusicalWorkType = 25
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT        MusicalWorkType = 26
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT MusicalWorkType = 27
	MusicalWorkType_MUSICAL_WORK_TYPE_USERDEFINED                   MusicalWorkType = 28
	MusicalWorkType_MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK           MusicalWorkType = 29
)

// Enum value maps for MusicalWorkType.
var (
	MusicalWorkType_name = map[int32]string{
		0:  "MUSICAL_WORK_TYPE_UNSPECIFIED",
		1:  "MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE",
		2:  "MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK",
		3:  "MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS",
		4:  "MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC",
		5:  "MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK",
		6:  "MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK",
		7:  "MUSICAL_WORK_TYPE_LYRICREMOVAL",
		8:  "MUSICAL_WORK_TYPE_LYRICREPLACEMENT",
		9:  "MUSICAL_WORK_TYPE_LYRICTRANSLATION",
		10: "MUSICAL_WORK_TYPE_MASHUP",
		11: "MUSICAL_WORK_TYPE_MEDLEY",
		12: "MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK",
		13: "MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT",
		14: "MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES",
		15: "MUSICAL_WORK_TYPE_MUSICARRANGEMENT",
		16: "MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT",
		17: "MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT",
		18: "MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION",
		19: "MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK",
		20: "MUSICAL_WORK_TYPE_POTPOURRI",
		21: "MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK",
		22: "MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK",
		23: "MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK",
		24: "MUSICAL_WORK_TYPE_TVPRODUCTIONWORK",
		25: "MUSICAL_WORK_TYPE_UNKNOWN",
		26: "MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT",
		27: "MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT",
		28: "MUSICAL_WORK_TYPE_USERDEFINED",
		29: "MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK",
	}
	MusicalWorkType_value = map[string]int32{
		"MUSICAL_WORK_TYPE_UNSPECIFIED":                   0,
		"MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE":     1,
		"MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK":       2,
		"MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS":          3,
		"MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC":          4,
		"MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK":          5,
		"MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK":          6,
		"MUSICAL_WORK_TYPE_LYRICREMOVAL":                  7,
		"MUSICAL_WORK_TYPE_LYRICREPLACEMENT":              8,
		"MUSICAL_WORK_TYPE_LYRICTRANSLATION":              9,
		"MUSICAL_WORK_TYPE_MASHUP":                        10,
		"MUSICAL_WORK_TYPE_MEDLEY":                        11,
		"MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK":      12,
		"MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT":           13,
		"MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES":        14,
		"MUSICAL_WORK_TYPE_MUSICARRANGEMENT":              15,
		"MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT":        16,
		"MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT":     17,
		"MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION":       18,
		"MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK":           19,
		"MUSICAL_WORK_TYPE_POTPOURRI":                     20,
		"MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK":    21,
		"MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK":           22,
		"MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK":         23,
		"MUSICAL_WORK_TYPE_TVPRODUCTIONWORK":              24,
		"MUSICAL_WORK_TYPE_UNKNOWN":                       25,
		"MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT":        26,
		"MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT": 27,
		"MUSICAL_WORK_TYPE_USERDEFINED":                   28,
		"MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK":           29,
	}
)

func (x MusicalWorkType) Enum() *MusicalWorkType {
	p := new(MusicalWorkType)
	*p = x
	return p
}

func (x MusicalWorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MusicalWorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[72].Descriptor()
}

func (MusicalWorkType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[72]
}

func (x MusicalWorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MusicalWorkType.Descriptor instead.
func (MusicalWorkType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{72}
}

type MwlCaCMessageInBatchType int32

const (
	MwlCaCMessageInBatchType_MWL_CA_C_MESSAGE_IN_BATCH_TYPE_UNSPECIFIED                        MwlCaCMessageInBatchType = 0
	MwlCaCMessageInBatchType_MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMREQUESTMESSAGE       MwlCaCMessageInBatchType = 1
	MwlCaCMessageInBatchType_MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMMESSAGE              MwlCaCMessageInBatchType = 2
	MwlCaCMessageInBatchType_MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSINGINFORMATIONREQUESTMESSAGE MwlCaCMessageInBatchType = 3
	MwlCaCMessageInBatchType_MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMCONFIRMATIONMESSAGE  MwlCaCMessageInBatchType = 4
	MwlCaCMessageInBatchType_MWL_CA_C_MESSAGE_IN_BATCH_TYPE_NEWRELEASEMESSAGE                  MwlCaCMessageInBatchType = 5
	MwlCaCMessageInBatchType_MWL_CA_C_MESSAGE_IN_BATCH_TYPE_CONTRACTDELIVERYMESSAGE            MwlCaCMessageInBatchType = 6
	MwlCaCMessageInBatchType_MWL_CA_C_MESSAGE_IN_BATCH_TYPE_PRODUCTDELETIONMESSAGE             MwlCaCMessageInBatchType = 7
)

// Enum value maps for MwlCaCMessageInBatchType.
var (
	MwlCaCMessageInBatchType_name = map[int32]string{
		0: "MWL_CA_C_MESSAGE_IN_BATCH_TYPE_UNSPECIFIED",
		1: "MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMREQUESTMESSAGE",
		2: "MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMMESSAGE",
		3: "MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSINGINFORMATIONREQUESTMESSAGE",
		4: "MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMCONFIRMATIONMESSAGE",
		5: "MWL_CA_C_MESSAGE_IN_BATCH_TYPE_NEWRELEASEMESSAGE",
		6: "MWL_CA_C_MESSAGE_IN_BATCH_TYPE_CONTRACTDELIVERYMESSAGE",
		7: "MWL_CA_C_MESSAGE_IN_BATCH_TYPE_PRODUCTDELETIONMESSAGE",
	}
	MwlCaCMessageInBatchType_value = map[string]int32{
		"MWL_CA_C_MESSAGE_IN_BATCH_TYPE_UNSPECIFIED":                        0,
		"MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMREQUESTMESSAGE":       1,
		"MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMMESSAGE":              2,
		"MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSINGINFORMATIONREQUESTMESSAGE": 3,
		"MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMCONFIRMATIONMESSAGE":  4,
		"MWL_CA_C_MESSAGE_IN_BATCH_TYPE_NEWRELEASEMESSAGE":                  5,
		"MWL_CA_C_MESSAGE_IN_BATCH_TYPE_CONTRACTDELIVERYMESSAGE":            6,
		"MWL_CA_C_MESSAGE_IN_BATCH_TYPE_PRODUCTDELETIONMESSAGE":             7,
	}
)

func (x MwlCaCMessageInBatchType) Enum() *MwlCaCMessageInBatchType {
	p := new(MwlCaCMessageInBatchType)
	*p = x
	return p
}

func (x MwlCaCMessageInBatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MwlCaCMessageInBatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[73].Descriptor()
}

func (MwlCaCMessageInBatchType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[73]
}

func (x MwlCaCMessageInBatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MwlCaCMessageInBatchType.Descriptor instead.
func (MwlCaCMessageInBatchType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{73}
}

type MwnMessageType int32

const (
	MwnMessageType_MWN_MESSAGE_TYPE_UNSPECIFIED                                 MwnMessageType = 0
	MwnMessageType_MWN_MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE         MwnMessageType = 1
	MwnMessageType_MWN_MESSAGE_TYPE_MUSICALWORKCLAIMCONFLICTNOTIFICATIONMESSAGE MwnMessageType = 2
	MwnMessageType_MWN_MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE              MwnMessageType = 3
	MwnMessageType_MWN_MESSAGE_TYPE_FTPACKNOWLEDGEMENTMESSAGE                   MwnMessageType = 4
	MwnMessageType_MWN_MESSAGE_TYPE_MANIFESTMESSAGE                             MwnMessageType = 5
)

// Enum value maps for MwnMessageType.
var (
	MwnMessageType_name = map[int32]string{
		0: "MWN_MESSAGE_TYPE_UNSPECIFIED",
		1: "MWN_MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE",
		2: "MWN_MESSAGE_TYPE_MUSICALWORKCLAIMCONFLICTNOTIFICATIONMESSAGE",
		3: "MWN_MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE",
		4: "MWN_MESSAGE_TYPE_FTPACKNOWLEDGEMENTMESSAGE",
		5: "MWN_MESSAGE_TYPE_MANIFESTMESSAGE",
	}
	MwnMessageType_value = map[string]int32{
		"MWN_MESSAGE_TYPE_UNSPECIFIED":                                 0,
		"MWN_MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE":         1,
		"MWN_MESSAGE_TYPE_MUSICALWORKCLAIMCONFLICTNOTIFICATIONMESSAGE": 2,
		"MWN_MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE":              3,
		"MWN_MESSAGE_TYPE_FTPACKNOWLEDGEMENTMESSAGE":                   4,
		"MWN_MESSAGE_TYPE_MANIFESTMESSAGE":                             5,
	}
)

func (x MwnMessageType) Enum() *MwnMessageType {
	p := new(MwnMessageType)
	*p = x
	return p
}

func (x MwnMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MwnMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[74].Descriptor()
}

func (MwnMessageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[74]
}

func (x MwnMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MwnMessageType.Descriptor instead.
func (MwnMessageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{74}
}

type NewReleaseMessageStatus int32

const (
	NewReleaseMessageStatus_NEW_RELEASE_MESSAGE_STATUS_UNSPECIFIED                  NewReleaseMessageStatus = 0
	NewReleaseMessageStatus_NEW_RELEASE_MESSAGE_STATUS_NEWRELEASEMESSAGENOTPROVIDED NewReleaseMessageStatus = 1
	NewReleaseMessageStatus_NEW_RELEASE_MESSAGE_STATUS_NEWRELEASEMESSAGEPROVIDED    NewReleaseMessageStatus = 2
)

// Enum value maps for NewReleaseMessageStatus.
var (
	NewReleaseMessageStatus_name = map[int32]string{
		0: "NEW_RELEASE_MESSAGE_STATUS_UNSPECIFIED",
		1: "NEW_RELEASE_MESSAGE_STATUS_NEWRELEASEMESSAGENOTPROVIDED",
		2: "NEW_RELEASE_MESSAGE_STATUS_NEWRELEASEMESSAGEPROVIDED",
	}
	NewReleaseMessageStatus_value = map[string]int32{
		"NEW_RELEASE_MESSAGE_STATUS_UNSPECIFIED":                  0,
		"NEW_RELEASE_MESSAGE_STATUS_NEWRELEASEMESSAGENOTPROVIDED": 1,
		"NEW_RELEASE_MESSAGE_STATUS_NEWRELEASEMESSAGEPROVIDED":    2,
	}
)

func (x NewReleaseMessageStatus) Enum() *NewReleaseMessageStatus {
	p := new(NewReleaseMessageStatus)
	*p = x
	return p
}

func (x NewReleaseMessageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewReleaseMessageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[75].Descriptor()
}

func (NewReleaseMessageStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[75]
}

func (x NewReleaseMessageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewReleaseMessageStatus.Descriptor instead.
func (NewReleaseMessageStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{75}
}

type OperatingSystemType int32

const (
	OperatingSystemType_OPERATING_SYSTEM_TYPE_UNSPECIFIED OperatingSystemType = 0
	OperatingSystemType_OPERATING_SYSTEM_TYPE_MACOS       OperatingSystemType = 1
	OperatingSystemType_OPERATING_SYSTEM_TYPE_MSWINDOWS   OperatingSystemType = 2
	OperatingSystemType_OPERATING_SYSTEM_TYPE_SYMBIAN     OperatingSystemType = 3
	OperatingSystemType_OPERATING_SYSTEM_TYPE_UNKNOWN     OperatingSystemType = 4
)

// Enum value maps for OperatingSystemType.
var (
	OperatingSystemType_name = map[int32]string{
		0: "OPERATING_SYSTEM_TYPE_UNSPECIFIED",
		1: "OPERATING_SYSTEM_TYPE_MACOS",
		2: "OPERATING_SYSTEM_TYPE_MSWINDOWS",
		3: "OPERATING_SYSTEM_TYPE_SYMBIAN",
		4: "OPERATING_SYSTEM_TYPE_UNKNOWN",
	}
	OperatingSystemType_value = map[string]int32{
		"OPERATING_SYSTEM_TYPE_UNSPECIFIED": 0,
		"OPERATING_SYSTEM_TYPE_MACOS":       1,
		"OPERATING_SYSTEM_TYPE_MSWINDOWS":   2,
		"OPERATING_SYSTEM_TYPE_SYMBIAN":     3,
		"OPERATING_SYSTEM_TYPE_UNKNOWN":     4,
	}
)

func (x OperatingSystemType) Enum() *OperatingSystemType {
	p := new(OperatingSystemType)
	*p = x
	return p
}

func (x OperatingSystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingSystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[76].Descriptor()
}

func (OperatingSystemType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[76]
}

func (x OperatingSystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatingSystemType.Descriptor instead.
func (OperatingSystemType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{76}
}

type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED       OrderType = 0
	OrderType_ORDER_TYPE_BACKCATALOGORDER  OrderType = 1
	OrderType_ORDER_TYPE_EXPRESSORDER      OrderType = 2
	OrderType_ORDER_TYPE_HARDDISKORDER     OrderType = 3
	OrderType_ORDER_TYPE_METADATAONLYORDER OrderType = 4
	OrderType_ORDER_TYPE_NEWRELEASEORDER   OrderType = 5
	OrderType_ORDER_TYPE_OFFCYCLERUSHORDER OrderType = 6
	OrderType_ORDER_TYPE_PREORDER          OrderType = 7
	OrderType_ORDER_TYPE_REDELIVERYORDER   OrderType = 8
	OrderType_ORDER_TYPE_TAKEDOWNORDER     OrderType = 9
	OrderType_ORDER_TYPE_USERDEFINED       OrderType = 10
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0:  "ORDER_TYPE_UNSPECIFIED",
		1:  "ORDER_TYPE_BACKCATALOGORDER",
		2:  "ORDER_TYPE_EXPRESSORDER",
		3:  "ORDER_TYPE_HARDDISKORDER",
		4:  "ORDER_TYPE_METADATAONLYORDER",
		5:  "ORDER_TYPE_NEWRELEASEORDER",
		6:  "ORDER_TYPE_OFFCYCLERUSHORDER",
		7:  "ORDER_TYPE_PREORDER",
		8:  "ORDER_TYPE_REDELIVERYORDER",
		9:  "ORDER_TYPE_TAKEDOWNORDER",
		10: "ORDER_TYPE_USERDEFINED",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED":       0,
		"ORDER_TYPE_BACKCATALOGORDER":  1,
		"ORDER_TYPE_EXPRESSORDER":      2,
		"ORDER_TYPE_HARDDISKORDER":     3,
		"ORDER_TYPE_METADATAONLYORDER": 4,
		"ORDER_TYPE_NEWRELEASEORDER":   5,
		"ORDER_TYPE_OFFCYCLERUSHORDER": 6,
		"ORDER_TYPE_PREORDER":          7,
		"ORDER_TYPE_REDELIVERYORDER":   8,
		"ORDER_TYPE_TAKEDOWNORDER":     9,
		"ORDER_TYPE_USERDEFINED":       10,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[77].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[77]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{77}
}

type PLineType int32

const (
	PLineType_P_LINE_TYPE_UNSPECIFIED      PLineType = 0
	PLineType_P_LINE_TYPE_ORIGINALPLINE    PLineType = 1
	PLineType_P_LINE_TYPE_REMASTERINGPLINE PLineType = 2
)

// Enum value maps for PLineType.
var (
	PLineType_name = map[int32]string{
		0: "P_LINE_TYPE_UNSPECIFIED",
		1: "P_LINE_TYPE_ORIGINALPLINE",
		2: "P_LINE_TYPE_REMASTERINGPLINE",
	}
	PLineType_value = map[string]int32{
		"P_LINE_TYPE_UNSPECIFIED":      0,
		"P_LINE_TYPE_ORIGINALPLINE":    1,
		"P_LINE_TYPE_REMASTERINGPLINE": 2,
	}
)

func (x PLineType) Enum() *PLineType {
	p := new(PLineType)
	*p = x
	return p
}

func (x PLineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLineType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[78].Descriptor()
}

func (PLineType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[78]
}

func (x PLineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PLineType.Descriptor instead.
func (PLineType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{78}
}

type ParentalWarningType int32

const (
	ParentalWarningType_PARENTAL_WARNING_TYPE_UNSPECIFIED           ParentalWarningType = 0
	ParentalWarningType_PARENTAL_WARNING_TYPE_EXPLICIT              ParentalWarningType = 1
	ParentalWarningType_PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED ParentalWarningType = 2
	ParentalWarningType_PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE     ParentalWarningType = 3
	ParentalWarningType_PARENTAL_WARNING_TYPE_NOTEXPLICIT           ParentalWarningType = 4
	ParentalWarningType_PARENTAL_WARNING_TYPE_UNKNOWN               ParentalWarningType = 5
	ParentalWarningType_PARENTAL_WARNING_TYPE_USERDEFINED           ParentalWarningType = 6
)

// Enum value maps for ParentalWarningType.
var (
	ParentalWarningType_name = map[int32]string{
		0: "PARENTAL_WARNING_TYPE_UNSPECIFIED",
		1: "PARENTAL_WARNING_TYPE_EXPLICIT",
		2: "PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED",
		3: "PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE",
		4: "PARENTAL_WARNING_TYPE_NOTEXPLICIT",
		5: "PARENTAL_WARNING_TYPE_UNKNOWN",
		6: "PARENTAL_WARNING_TYPE_USERDEFINED",
	}
	ParentalWarningType_value = map[string]int32{
		"PARENTAL_WARNING_TYPE_UNSPECIFIED":           0,
		"PARENTAL_WARNING_TYPE_EXPLICIT":              1,
		"PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED": 2,
		"PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE":     3,
		"PARENTAL_WARNING_TYPE_NOTEXPLICIT":           4,
		"PARENTAL_WARNING_TYPE_UNKNOWN":               5,
		"PARENTAL_WARNING_TYPE_USERDEFINED":           6,
	}
)

func (x ParentalWarningType) Enum() *ParentalWarningType {
	p := new(ParentalWarningType)
	*p = x
	return p
}

func (x ParentalWarningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentalWarningType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[79].Descriptor()
}

func (ParentalWarningType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[79]
}

func (x ParentalWarningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentalWarningType.Descriptor instead.
func (ParentalWarningType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{79}
}

type PercentageType int32

const (
	PercentageType_PERCENTAGE_TYPE_UNSPECIFIED                      PercentageType = 0
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED   PercentageType = 1
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE         PercentageType = 2
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE           PercentageType = 3
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFNETSALES             PercentageType = 4
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID    PercentageType = 5
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE PercentageType = 6
)

// Enum value maps for PercentageType.
var (
	PercentageType_name = map[int32]string{
		0: "PERCENTAGE_TYPE_UNSPECIFIED",
		1: "PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED",
		2: "PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE",
		3: "PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE",
		4: "PERCENTAGE_TYPE_PERCENTAGEOFNETSALES",
		5: "PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID",
		6: "PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE",
	}
	PercentageType_value = map[string]int32{
		"PERCENTAGE_TYPE_UNSPECIFIED":                      0,
		"PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED":   1,
		"PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE":         2,
		"PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE":           3,
		"PERCENTAGE_TYPE_PERCENTAGEOFNETSALES":             4,
		"PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID":    5,
		"PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE": 6,
	}
)

func (x PercentageType) Enum() *PercentageType {
	p := new(PercentageType)
	*p = x
	return p
}

func (x PercentageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PercentageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[80].Descriptor()
}

func (PercentageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[80]
}

func (x PercentageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PercentageType.Descriptor instead.
func (PercentageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{80}
}

type PriceInformationType int32

const (
	PriceInformationType_PRICE_INFORMATION_TYPE_UNSPECIFIED         PriceInformationType = 0
	PriceInformationType_PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE PriceInformationType = 1
	PriceInformationType_PRICE_INFORMATION_TYPE_PREORDERPRICE       PriceInformationType = 2
	PriceInformationType_PRICE_INFORMATION_TYPE_USERDEFINED         PriceInformationType = 3
)

// Enum value maps for PriceInformationType.
var (
	PriceInformationType_name = map[int32]string{
		0: "PRICE_INFORMATION_TYPE_UNSPECIFIED",
		1: "PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE",
		2: "PRICE_INFORMATION_TYPE_PREORDERPRICE",
		3: "PRICE_INFORMATION_TYPE_USERDEFINED",
	}
	PriceInformationType_value = map[string]int32{
		"PRICE_INFORMATION_TYPE_UNSPECIFIED":         0,
		"PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE": 1,
		"PRICE_INFORMATION_TYPE_PREORDERPRICE":       2,
		"PRICE_INFORMATION_TYPE_USERDEFINED":         3,
	}
)

func (x PriceInformationType) Enum() *PriceInformationType {
	p := new(PriceInformationType)
	*p = x
	return p
}

func (x PriceInformationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceInformationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[81].Descriptor()
}

func (PriceInformationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[81]
}

func (x PriceInformationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceInformationType.Descriptor instead.
func (PriceInformationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{81}
}

type Priority int32

const (
	Priority_PRIORITY_UNSPECIFIED Priority = 0
	Priority_PRIORITY_HIGH        Priority = 1
	Priority_PRIORITY_LOW         Priority = 2
	Priority_PRIORITY_NORMAL      Priority = 3
)

// Enum value maps for Priority.
var (
	Priority_name = map[int32]string{
		0: "PRIORITY_UNSPECIFIED",
		1: "PRIORITY_HIGH",
		2: "PRIORITY_LOW",
		3: "PRIORITY_NORMAL",
	}
	Priority_value = map[string]int32{
		"PRIORITY_UNSPECIFIED": 0,
		"PRIORITY_HIGH":        1,
		"PRIORITY_LOW":         2,
		"PRIORITY_NORMAL":      3,
	}
)

func (x Priority) Enum() *Priority {
	p := new(Priority)
	*p = x
	return p
}

func (x Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[82].Descriptor()
}

func (Priority) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[82]
}

func (x Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Priority.Descriptor instead.
func (Priority) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{82}
}

type ProductType int32

const (
	ProductType_PRODUCT_TYPE_UNSPECIFIED             ProductType = 0
	ProductType_PRODUCT_TYPE_AUDIOPRODUCT            ProductType = 1
	ProductType_PRODUCT_TYPE_GRAPHICSPRODUCT         ProductType = 2
	ProductType_PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT ProductType = 3
	ProductType_PRODUCT_TYPE_MOBILEPRODUCT           ProductType = 4
	ProductType_PRODUCT_TYPE_USERDEFINED             ProductType = 5
	ProductType_PRODUCT_TYPE_VIDEOPRODUCT            ProductType = 6
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_UNSPECIFIED",
		1: "PRODUCT_TYPE_AUDIOPRODUCT",
		2: "PRODUCT_TYPE_GRAPHICSPRODUCT",
		3: "PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT",
		4: "PRODUCT_TYPE_MOBILEPRODUCT",
		5: "PRODUCT_TYPE_USERDEFINED",
		6: "PRODUCT_TYPE_VIDEOPRODUCT",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED":             0,
		"PRODUCT_TYPE_AUDIOPRODUCT":            1,
		"PRODUCT_TYPE_GRAPHICSPRODUCT":         2,
		"PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT": 3,
		"PRODUCT_TYPE_MOBILEPRODUCT":           4,
		"PRODUCT_TYPE_USERDEFINED":             5,
		"PRODUCT_TYPE_VIDEOPRODUCT":            6,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[83].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[83]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{83}
}

type Purpose int32

const (
	Purpose_PURPOSE_UNSPECIFIED         Purpose = 0
	Purpose_PURPOSE_BACKGROUNDMUSIC     Purpose = 1
	Purpose_PURPOSE_CHANNELTRAILERMUSIC Purpose = 2
	Purpose_PURPOSE_EXTRACT             Purpose = 3
	Purpose_PURPOSE_FILMTRAILERMUSIC    Purpose = 4
	Purpose_PURPOSE_FOREGROUNDMUSIC     Purpose = 5
	Purpose_PURPOSE_TRAILERMUSIC        Purpose = 6
	Purpose_PURPOSE_USERDEFINED         Purpose = 7
)

// Enum value maps for Purpose.
var (
	Purpose_name = map[int32]string{
		0: "PURPOSE_UNSPECIFIED",
		1: "PURPOSE_BACKGROUNDMUSIC",
		2: "PURPOSE_CHANNELTRAILERMUSIC",
		3: "PURPOSE_EXTRACT",
		4: "PURPOSE_FILMTRAILERMUSIC",
		5: "PURPOSE_FOREGROUNDMUSIC",
		6: "PURPOSE_TRAILERMUSIC",
		7: "PURPOSE_USERDEFINED",
	}
	Purpose_value = map[string]int32{
		"PURPOSE_UNSPECIFIED":         0,
		"PURPOSE_BACKGROUNDMUSIC":     1,
		"PURPOSE_CHANNELTRAILERMUSIC": 2,
		"PURPOSE_EXTRACT":             3,
		"PURPOSE_FILMTRAILERMUSIC":    4,
		"PURPOSE_FOREGROUNDMUSIC":     5,
		"PURPOSE_TRAILERMUSIC":        6,
		"PURPOSE_USERDEFINED":         7,
	}
)

func (x Purpose) Enum() *Purpose {
	p := new(Purpose)
	*p = x
	return p
}

func (x Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[84].Descriptor()
}

func (Purpose) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[84]
}

func (x Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Purpose.Descriptor instead.
func (Purpose) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{84}
}

type RateModificationType int32

const (
	RateModificationType_RATE_MODIFICATION_TYPE_UNSPECIFIED           RateModificationType = 0
	RateModificationType_RATE_MODIFICATION_TYPE_MULTIPLEDISCPROVISION RateModificationType = 1
	RateModificationType_RATE_MODIFICATION_TYPE_OTHERPROVISION        RateModificationType = 2
	RateModificationType_RATE_MODIFICATION_TYPE_SALESVOLUMEPROVISION  RateModificationType = 3
	RateModificationType_RATE_MODIFICATION_TYPE_VIDEOPROVISION        RateModificationType = 4
)

// Enum value maps for RateModificationType.
var (
	RateModificationType_name = map[int32]string{
		0: "RATE_MODIFICATION_TYPE_UNSPECIFIED",
		1: "RATE_MODIFICATION_TYPE_MULTIPLEDISCPROVISION",
		2: "RATE_MODIFICATION_TYPE_OTHERPROVISION",
		3: "RATE_MODIFICATION_TYPE_SALESVOLUMEPROVISION",
		4: "RATE_MODIFICATION_TYPE_VIDEOPROVISION",
	}
	RateModificationType_value = map[string]int32{
		"RATE_MODIFICATION_TYPE_UNSPECIFIED":           0,
		"RATE_MODIFICATION_TYPE_MULTIPLEDISCPROVISION": 1,
		"RATE_MODIFICATION_TYPE_OTHERPROVISION":        2,
		"RATE_MODIFICATION_TYPE_SALESVOLUMEPROVISION":  3,
		"RATE_MODIFICATION_TYPE_VIDEOPROVISION":        4,
	}
)

func (x RateModificationType) Enum() *RateModificationType {
	p := new(RateModificationType)
	*p = x
	return p
}

func (x RateModificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateModificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[85].Descriptor()
}

func (RateModificationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[85]
}

func (x RateModificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateModificationType.Descriptor instead.
func (RateModificationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{85}
}

type RatingAgency int32

const (
	RatingAgency_RATING_AGENCY_UNSPECIFIED   RatingAgency = 0
	RatingAgency_RATING_AGENCY_AFR           RatingAgency = 1
	RatingAgency_RATING_AGENCY_BBFC          RatingAgency = 2
	RatingAgency_RATING_AGENCY_BFCO          RatingAgency = 3
	RatingAgency_RATING_AGENCY_BFSC          RatingAgency = 4
	RatingAgency_RATING_AGENCY_BMUKK         RatingAgency = 5
	RatingAgency_RATING_AGENCY_CBFC          RatingAgency = 6
	RatingAgency_RATING_AGENCY_CCC           RatingAgency = 7
	RatingAgency_RATING_AGENCY_CCE           RatingAgency = 8
	RatingAgency_RATING_AGENCY_CHVRS         RatingAgency = 9
	RatingAgency_RATING_AGENCY_CNC           RatingAgency = 10
	RatingAgency_RATING_AGENCY_DJCTQ         RatingAgency = 11
	RatingAgency_RATING_AGENCY_EIRIN         RatingAgency = 12
	RatingAgency_RATING_AGENCY_FCB           RatingAgency = 13
	RatingAgency_RATING_AGENCY_FILMTILSYNET  RatingAgency = 14
	RatingAgency_RATING_AGENCY_FPB           RatingAgency = 15
	RatingAgency_RATING_AGENCY_FSK           RatingAgency = 16
	RatingAgency_RATING_AGENCY_IFCO          RatingAgency = 17
	RatingAgency_RATING_AGENCY_INCAA         RatingAgency = 18
	RatingAgency_RATING_AGENCY_KMRB          RatingAgency = 19
	RatingAgency_RATING_AGENCY_KR            RatingAgency = 20
	RatingAgency_RATING_AGENCY_KRRIT         RatingAgency = 21
	RatingAgency_RATING_AGENCY_LSF           RatingAgency = 22
	RatingAgency_RATING_AGENCY_MBU           RatingAgency = 23
	RatingAgency_RATING_AGENCY_MDA           RatingAgency = 24
	RatingAgency_RATING_AGENCY_MDCB          RatingAgency = 25
	RatingAgency_RATING_AGENCY_MFCB          RatingAgency = 26
	RatingAgency_RATING_AGENCY_MIC           RatingAgency = 27
	RatingAgency_RATING_AGENCY_MPAA          RatingAgency = 28
	RatingAgency_RATING_AGENCY_MTRCB         RatingAgency = 29
	RatingAgency_RATING_AGENCY_NBC           RatingAgency = 30
	RatingAgency_RATING_AGENCY_NFVCB         RatingAgency = 31
	RatingAgency_RATING_AGENCY_NICAM         RatingAgency = 32
	RatingAgency_RATING_AGENCY_NKC           RatingAgency = 33
	RatingAgency_RATING_AGENCY_OFLC          RatingAgency = 34
	RatingAgency_RATING_AGENCY_OFLC_NZ       RatingAgency = 35
	RatingAgency_RATING_AGENCY_OFRB          RatingAgency = 36
	RatingAgency_RATING_AGENCY_RDCQ          RatingAgency = 37
	RatingAgency_RATING_AGENCY_RTC           RatingAgency = 38
	RatingAgency_RATING_AGENCY_SBB           RatingAgency = 39
	RatingAgency_RATING_AGENCY_SMAIS         RatingAgency = 40
	RatingAgency_RATING_AGENCY_SPIO_JK       RatingAgency = 41
	RatingAgency_RATING_AGENCY_TELA          RatingAgency = 42
	RatingAgency_RATING_AGENCY_USERDEFINED   RatingAgency = 43
	RatingAgency_RATING_AGENCY_VET           RatingAgency = 44
	RatingAgency_RATING_AGENCY_ACMA          RatingAgency = 45
	RatingAgency_RATING_AGENCY_AGCOM         RatingAgency = 46
	RatingAgency_RATING_AGENCY_ANATEL        RatingAgency = 47
	RatingAgency_RATING_AGENCY_BFVC          RatingAgency = 48
	RatingAgency_RATING_AGENCY_CBSC          RatingAgency = 49
	RatingAgency_RATING_AGENCY_CBSC_F        RatingAgency = 50
	RatingAgency_RATING_AGENCY_CICF          RatingAgency = 51
	RatingAgency_RATING_AGENCY_CNA           RatingAgency = 52
	RatingAgency_RATING_AGENCY_CPBC          RatingAgency = 53
	RatingAgency_RATING_AGENCY_CSA           RatingAgency = 54
	RatingAgency_RATING_AGENCY_CSCF          RatingAgency = 55
	RatingAgency_RATING_AGENCY_ESRB          RatingAgency = 56
	RatingAgency_RATING_AGENCY_FAB           RatingAgency = 57
	RatingAgency_RATING_AGENCY_FCO           RatingAgency = 58
	RatingAgency_RATING_AGENCY_FILM_CH       RatingAgency = 59
	RatingAgency_RATING_AGENCY_FILM_CZ       RatingAgency = 60
	RatingAgency_RATING_AGENCY_FILM_EG       RatingAgency = 61
	RatingAgency_RATING_AGENCY_FILM_EE       RatingAgency = 62
	RatingAgency_RATING_AGENCY_FILM_GR       RatingAgency = 63
	RatingAgency_RATING_AGENCY_FILM_PE       RatingAgency = 64
	RatingAgency_RATING_AGENCY_FILM_SK       RatingAgency = 65
	RatingAgency_RATING_AGENCY_FRB           RatingAgency = 66
	RatingAgency_RATING_AGENCY_ICAA          RatingAgency = 67
	RatingAgency_RATING_AGENCY_IFCOF         RatingAgency = 68
	RatingAgency_RATING_AGENCY_KFCB          RatingAgency = 69
	RatingAgency_RATING_AGENCY_KIJKWIJZER    RatingAgency = 70
	RatingAgency_RATING_AGENCY_MBACT         RatingAgency = 71
	RatingAgency_RATING_AGENCY_MCCAA         RatingAgency = 72
	RatingAgency_RATING_AGENCY_MEDIETILSYNET RatingAgency = 73
	RatingAgency_RATING_AGENCY_MEKU          RatingAgency = 74
	RatingAgency_RATING_AGENCY_MKRF          RatingAgency = 75
	RatingAgency_RATING_AGENCY_MOC           RatingAgency = 76
	RatingAgency_RATING_AGENCY_MOC_TW        RatingAgency = 77
	RatingAgency_RATING_AGENCY_MPAAT         RatingAgency = 78
	RatingAgency_RATING_AGENCY_NCS           RatingAgency = 79
	RatingAgency_RATING_AGENCY_NFRC          RatingAgency = 80
	RatingAgency_RATING_AGENCY_PEGI          RatingAgency = 81
	RatingAgency_RATING_AGENCY_RCNOF         RatingAgency = 82
	RatingAgency_RATING_AGENCY_RIAA          RatingAgency = 83
	RatingAgency_RATING_AGENCY_RTE           RatingAgency = 84
	RatingAgency_RATING_AGENCY_SIBCI         RatingAgency = 85
	RatingAgency_RATING_AGENCY_SM_SA         RatingAgency = 86
	RatingAgency_RATING_AGENCY_USFA          RatingAgency = 87
	RatingAgency_RATING_AGENCY_TVPG          RatingAgency = 88
)

// Enum value maps for RatingAgency.
var (
	RatingAgency_name = map[int32]string{
		0:  "RATING_AGENCY_UNSPECIFIED",
		1:  "RATING_AGENCY_AFR",
		2:  "RATING_AGENCY_BBFC",
		3:  "RATING_AGENCY_BFCO",
		4:  "RATING_AGENCY_BFSC",
		5:  "RATING_AGENCY_BMUKK",
		6:  "RATING_AGENCY_CBFC",
		7:  "RATING_AGENCY_CCC",
		8:  "RATING_AGENCY_CCE",
		9:  "RATING_AGENCY_CHVRS",
		10: "RATING_AGENCY_CNC",
		11: "RATING_AGENCY_DJCTQ",
		12: "RATING_AGENCY_EIRIN",
		13: "RATING_AGENCY_FCB",
		14: "RATING_AGENCY_FILMTILSYNET",
		15: "RATING_AGENCY_FPB",
		16: "RATING_AGENCY_FSK",
		17: "RATING_AGENCY_IFCO",
		18: "RATING_AGENCY_INCAA",
		19: "RATING_AGENCY_KMRB",
		20: "RATING_AGENCY_KR",
		21: "RATING_AGENCY_KRRIT",
		22: "RATING_AGENCY_LSF",
		23: "RATING_AGENCY_MBU",
		24: "RATING_AGENCY_MDA",
		25: "RATING_AGENCY_MDCB",
		26: "RATING_AGENCY_MFCB",
		27: "RATING_AGENCY_MIC",
		28: "RATING_AGENCY_MPAA",
		29: "RATING_AGENCY_MTRCB",
		30: "RATING_AGENCY_NBC",
		31: "RATING_AGENCY_NFVCB",
		32: "RATING_AGENCY_NICAM",
		33: "RATING_AGENCY_NKC",
		34: "RATING_AGENCY_OFLC",
		35: "RATING_AGENCY_OFLC_NZ",
		36: "RATING_AGENCY_OFRB",
		37: "RATING_AGENCY_RDCQ",
		38: "RATING_AGENCY_RTC",
		39: "RATING_AGENCY_SBB",
		40: "RATING_AGENCY_SMAIS",
		41: "RATING_AGENCY_SPIO_JK",
		42: "RATING_AGENCY_TELA",
		43: "RATING_AGENCY_USERDEFINED",
		44: "RATING_AGENCY_VET",
		45: "RATING_AGENCY_ACMA",
		46: "RATING_AGENCY_AGCOM",
		47: "RATING_AGENCY_ANATEL",
		48: "RATING_AGENCY_BFVC",
		49: "RATING_AGENCY_CBSC",
		50: "RATING_AGENCY_CBSC_F",
		51: "RATING_AGENCY_CICF",
		52: "RATING_AGENCY_CNA",
		53: "RATING_AGENCY_CPBC",
		54: "RATING_AGENCY_CSA",
		55: "RATING_AGENCY_CSCF",
		56: "RATING_AGENCY_ESRB",
		57: "RATING_AGENCY_FAB",
		58: "RATING_AGENCY_FCO",
		59: "RATING_AGENCY_FILM_CH",
		60: "RATING_AGENCY_FILM_CZ",
		61: "RATING_AGENCY_FILM_EG",
		62: "RATING_AGENCY_FILM_EE",
		63: "RATING_AGENCY_FILM_GR",
		64: "RATING_AGENCY_FILM_PE",
		65: "RATING_AGENCY_FILM_SK",
		66: "RATING_AGENCY_FRB",
		67: "RATING_AGENCY_ICAA",
		68: "RATING_AGENCY_IFCOF",
		69: "RATING_AGENCY_KFCB",
		70: "RATING_AGENCY_KIJKWIJZER",
		71: "RATING_AGENCY_MBACT",
		72: "RATING_AGENCY_MCCAA",
		73: "RATING_AGENCY_MEDIETILSYNET",
		74: "RATING_AGENCY_MEKU",
		75: "RATING_AGENCY_MKRF",
		76: "RATING_AGENCY_MOC",
		77: "RATING_AGENCY_MOC_TW",
		78: "RATING_AGENCY_MPAAT",
		79: "RATING_AGENCY_NCS",
		80: "RATING_AGENCY_NFRC",
		81: "RATING_AGENCY_PEGI",
		82: "RATING_AGENCY_RCNOF",
		83: "RATING_AGENCY_RIAA",
		84: "RATING_AGENCY_RTE",
		85: "RATING_AGENCY_SIBCI",
		86: "RATING_AGENCY_SM_SA",
		87: "RATING_AGENCY_USFA",
		88: "RATING_AGENCY_TVPG",
	}
	RatingAgency_value = map[string]int32{
		"RATING_AGENCY_UNSPECIFIED":   0,
		"RATING_AGENCY_AFR":           1,
		"RATING_AGENCY_BBFC":          2,
		"RATING_AGENCY_BFCO":          3,
		"RATING_AGENCY_BFSC":          4,
		"RATING_AGENCY_BMUKK":         5,
		"RATING_AGENCY_CBFC":          6,
		"RATING_AGENCY_CCC":           7,
		"RATING_AGENCY_CCE":           8,
		"RATING_AGENCY_CHVRS":         9,
		"RATING_AGENCY_CNC":           10,
		"RATING_AGENCY_DJCTQ":         11,
		"RATING_AGENCY_EIRIN":         12,
		"RATING_AGENCY_FCB":           13,
		"RATING_AGENCY_FILMTILSYNET":  14,
		"RATING_AGENCY_FPB":           15,
		"RATING_AGENCY_FSK":           16,
		"RATING_AGENCY_IFCO":          17,
		"RATING_AGENCY_INCAA":         18,
		"RATING_AGENCY_KMRB":          19,
		"RATING_AGENCY_KR":            20,
		"RATING_AGENCY_KRRIT":         21,
		"RATING_AGENCY_LSF":           22,
		"RATING_AGENCY_MBU":           23,
		"RATING_AGENCY_MDA":           24,
		"RATING_AGENCY_MDCB":          25,
		"RATING_AGENCY_MFCB":          26,
		"RATING_AGENCY_MIC":           27,
		"RATING_AGENCY_MPAA":          28,
		"RATING_AGENCY_MTRCB":         29,
		"RATING_AGENCY_NBC":           30,
		"RATING_AGENCY_NFVCB":         31,
		"RATING_AGENCY_NICAM":         32,
		"RATING_AGENCY_NKC":           33,
		"RATING_AGENCY_OFLC":          34,
		"RATING_AGENCY_OFLC_NZ":       35,
		"RATING_AGENCY_OFRB":          36,
		"RATING_AGENCY_RDCQ":          37,
		"RATING_AGENCY_RTC":           38,
		"RATING_AGENCY_SBB":           39,
		"RATING_AGENCY_SMAIS":         40,
		"RATING_AGENCY_SPIO_JK":       41,
		"RATING_AGENCY_TELA":          42,
		"RATING_AGENCY_USERDEFINED":   43,
		"RATING_AGENCY_VET":           44,
		"RATING_AGENCY_ACMA":          45,
		"RATING_AGENCY_AGCOM":         46,
		"RATING_AGENCY_ANATEL":        47,
		"RATING_AGENCY_BFVC":          48,
		"RATING_AGENCY_CBSC":          49,
		"RATING_AGENCY_CBSC_F":        50,
		"RATING_AGENCY_CICF":          51,
		"RATING_AGENCY_CNA":           52,
		"RATING_AGENCY_CPBC":          53,
		"RATING_AGENCY_CSA":           54,
		"RATING_AGENCY_CSCF":          55,
		"RATING_AGENCY_ESRB":          56,
		"RATING_AGENCY_FAB":           57,
		"RATING_AGENCY_FCO":           58,
		"RATING_AGENCY_FILM_CH":       59,
		"RATING_AGENCY_FILM_CZ":       60,
		"RATING_AGENCY_FILM_EG":       61,
		"RATING_AGENCY_FILM_EE":       62,
		"RATING_AGENCY_FILM_GR":       63,
		"RATING_AGENCY_FILM_PE":       64,
		"RATING_AGENCY_FILM_SK":       65,
		"RATING_AGENCY_FRB":           66,
		"RATING_AGENCY_ICAA":          67,
		"RATING_AGENCY_IFCOF":         68,
		"RATING_AGENCY_KFCB":          69,
		"RATING_AGENCY_KIJKWIJZER":    70,
		"RATING_AGENCY_MBACT":         71,
		"RATING_AGENCY_MCCAA":         72,
		"RATING_AGENCY_MEDIETILSYNET": 73,
		"RATING_AGENCY_MEKU":          74,
		"RATING_AGENCY_MKRF":          75,
		"RATING_AGENCY_MOC":           76,
		"RATING_AGENCY_MOC_TW":        77,
		"RATING_AGENCY_MPAAT":         78,
		"RATING_AGENCY_NCS":           79,
		"RATING_AGENCY_NFRC":          80,
		"RATING_AGENCY_PEGI":          81,
		"RATING_AGENCY_RCNOF":         82,
		"RATING_AGENCY_RIAA":          83,
		"RATING_AGENCY_RTE":           84,
		"RATING_AGENCY_SIBCI":         85,
		"RATING_AGENCY_SM_SA":         86,
		"RATING_AGENCY_USFA":          87,
		"RATING_AGENCY_TVPG":          88,
	}
)

func (x RatingAgency) Enum() *RatingAgency {
	p := new(RatingAgency)
	*p = x
	return p
}

func (x RatingAgency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RatingAgency) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[86].Descriptor()
}

func (RatingAgency) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[86]
}

func (x RatingAgency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RatingAgency.Descriptor instead.
func (RatingAgency) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{86}
}

type ReasonType int32

const (
	ReasonType_REASON_TYPE_UNSPECIFIED      ReasonType = 0
	ReasonType_REASON_TYPE_CHARTREPORTING   ReasonType = 1
	ReasonType_REASON_TYPE_ROYALTYREPORTING ReasonType = 2
	ReasonType_REASON_TYPE_USERDEFINED      ReasonType = 3
)

// Enum value maps for ReasonType.
var (
	ReasonType_name = map[int32]string{
		0: "REASON_TYPE_UNSPECIFIED",
		1: "REASON_TYPE_CHARTREPORTING",
		2: "REASON_TYPE_ROYALTYREPORTING",
		3: "REASON_TYPE_USERDEFINED",
	}
	ReasonType_value = map[string]int32{
		"REASON_TYPE_UNSPECIFIED":      0,
		"REASON_TYPE_CHARTREPORTING":   1,
		"REASON_TYPE_ROYALTYREPORTING": 2,
		"REASON_TYPE_USERDEFINED":      3,
	}
)

func (x ReasonType) Enum() *ReasonType {
	p := new(ReasonType)
	*p = x
	return p
}

func (x ReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[87].Descriptor()
}

func (ReasonType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[87]
}

func (x ReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReasonType.Descriptor instead.
func (ReasonType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{87}
}

type RecipientRevenueType int32

const (
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_UNSPECIFIED                 RecipientRevenueType = 0
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE RecipientRevenueType = 1
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE            RecipientRevenueType = 2
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE             RecipientRevenueType = 3
)

// Enum value maps for RecipientRevenueType.
var (
	RecipientRevenueType_name = map[int32]string{
		0: "RECIPIENT_REVENUE_TYPE_UNSPECIFIED",
		1: "RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE",
		2: "RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE",
		3: "RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE",
	}
	RecipientRevenueType_value = map[string]int32{
		"RECIPIENT_REVENUE_TYPE_UNSPECIFIED":                 0,
		"RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE": 1,
		"RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE":            2,
		"RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE":             3,
	}
)

func (x RecipientRevenueType) Enum() *RecipientRevenueType {
	p := new(RecipientRevenueType)
	*p = x
	return p
}

func (x RecipientRevenueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipientRevenueType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[88].Descriptor()
}

func (RecipientRevenueType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[88]
}

func (x RecipientRevenueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipientRevenueType.Descriptor instead.
func (RecipientRevenueType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{88}
}

type RecordingMode int32

const (
	RecordingMode_RECORDING_MODE_UNSPECIFIED       RecordingMode = 0
	RecordingMode_RECORDING_MODE_MONO              RecordingMode = 1
	RecordingMode_RECORDING_MODE_MULTICHANNELAUDIO RecordingMode = 2
	RecordingMode_RECORDING_MODE_STEREO            RecordingMode = 3
	RecordingMode_RECORDING_MODE_UNKNOWN           RecordingMode = 4
	RecordingMode_RECORDING_MODE_BINAURALAUDIO     RecordingMode = 5
	RecordingMode_RECORDING_MODE_LCR               RecordingMode = 6
	RecordingMode_RECORDING_MODE_MULTITRACK        RecordingMode = 7
	RecordingMode_RECORDING_MODE_QUAD              RecordingMode = 8
	RecordingMode_RECORDING_MODE_STEMS             RecordingMode = 9
	RecordingMode_RECORDING_MODE_SURROUNDSOUND     RecordingMode = 10
)

// Enum value maps for RecordingMode.
var (
	RecordingMode_name = map[int32]string{
		0:  "RECORDING_MODE_UNSPECIFIED",
		1:  "RECORDING_MODE_MONO",
		2:  "RECORDING_MODE_MULTICHANNELAUDIO",
		3:  "RECORDING_MODE_STEREO",
		4:  "RECORDING_MODE_UNKNOWN",
		5:  "RECORDING_MODE_BINAURALAUDIO",
		6:  "RECORDING_MODE_LCR",
		7:  "RECORDING_MODE_MULTITRACK",
		8:  "RECORDING_MODE_QUAD",
		9:  "RECORDING_MODE_STEMS",
		10: "RECORDING_MODE_SURROUNDSOUND",
	}
	RecordingMode_value = map[string]int32{
		"RECORDING_MODE_UNSPECIFIED":       0,
		"RECORDING_MODE_MONO":              1,
		"RECORDING_MODE_MULTICHANNELAUDIO": 2,
		"RECORDING_MODE_STEREO":            3,
		"RECORDING_MODE_UNKNOWN":           4,
		"RECORDING_MODE_BINAURALAUDIO":     5,
		"RECORDING_MODE_LCR":               6,
		"RECORDING_MODE_MULTITRACK":        7,
		"RECORDING_MODE_QUAD":              8,
		"RECORDING_MODE_STEMS":             9,
		"RECORDING_MODE_SURROUNDSOUND":     10,
	}
)

func (x RecordingMode) Enum() *RecordingMode {
	p := new(RecordingMode)
	*p = x
	return p
}

func (x RecordingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[89].Descriptor()
}

func (RecordingMode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[89]
}

func (x RecordingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordingMode.Descriptor instead.
func (RecordingMode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{89}
}

type RedeliveryReasonType int32

const (
	RedeliveryReasonType_REDELIVERY_REASON_TYPE_UNSPECIFIED                         RedeliveryReasonType = 0
	RedeliveryReasonType_REDELIVERY_REASON_TYPE_BINARYCORRUPTED                     RedeliveryReasonType = 1
	RedeliveryReasonType_REDELIVERY_REASON_TYPE_METADATAINADEQUATE                  RedeliveryReasonType = 2
	RedeliveryReasonType_REDELIVERY_REASON_TYPE_PACKAGEINCOMPLETE                   RedeliveryReasonType = 3
	RedeliveryReasonType_REDELIVERY_REASON_TYPE_PROCESSINGERRORATRELEASEDISTRIBUTOR RedeliveryReasonType = 4
	RedeliveryReasonType_REDELIVERY_REASON_TYPE_USERDEFINED                         RedeliveryReasonType = 5
)

// Enum value maps for RedeliveryReasonType.
var (
	RedeliveryReasonType_name = map[int32]string{
		0: "REDELIVERY_REASON_TYPE_UNSPECIFIED",
		1: "REDELIVERY_REASON_TYPE_BINARYCORRUPTED",
		2: "REDELIVERY_REASON_TYPE_METADATAINADEQUATE",
		3: "REDELIVERY_REASON_TYPE_PACKAGEINCOMPLETE",
		4: "REDELIVERY_REASON_TYPE_PROCESSINGERRORATRELEASEDISTRIBUTOR",
		5: "REDELIVERY_REASON_TYPE_USERDEFINED",
	}
	RedeliveryReasonType_value = map[string]int32{
		"REDELIVERY_REASON_TYPE_UNSPECIFIED":                         0,
		"REDELIVERY_REASON_TYPE_BINARYCORRUPTED":                     1,
		"REDELIVERY_REASON_TYPE_METADATAINADEQUATE":                  2,
		"REDELIVERY_REASON_TYPE_PACKAGEINCOMPLETE":                   3,
		"REDELIVERY_REASON_TYPE_PROCESSINGERRORATRELEASEDISTRIBUTOR": 4,
		"REDELIVERY_REASON_TYPE_USERDEFINED":                         5,
	}
)

func (x RedeliveryReasonType) Enum() *RedeliveryReasonType {
	p := new(RedeliveryReasonType)
	*p = x
	return p
}

func (x RedeliveryReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedeliveryReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[90].Descriptor()
}

func (RedeliveryReasonType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[90]
}

func (x RedeliveryReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedeliveryReasonType.Descriptor instead.
func (RedeliveryReasonType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{90}
}

type ReferenceUnit int32

const (
	ReferenceUnit_REFERENCE_UNIT_UNSPECIFIED ReferenceUnit = 0
	ReferenceUnit_REFERENCE_UNIT_PERLICENSE  ReferenceUnit = 1
	ReferenceUnit_REFERENCE_UNIT_PERUSE      ReferenceUnit = 2
)

// Enum value maps for ReferenceUnit.
var (
	ReferenceUnit_name = map[int32]string{
		0: "REFERENCE_UNIT_UNSPECIFIED",
		1: "REFERENCE_UNIT_PERLICENSE",
		2: "REFERENCE_UNIT_PERUSE",
	}
	ReferenceUnit_value = map[string]int32{
		"REFERENCE_UNIT_UNSPECIFIED": 0,
		"REFERENCE_UNIT_PERLICENSE":  1,
		"REFERENCE_UNIT_PERUSE":      2,
	}
)

func (x ReferenceUnit) Enum() *ReferenceUnit {
	p := new(ReferenceUnit)
	*p = x
	return p
}

func (x ReferenceUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[91].Descriptor()
}

func (ReferenceUnit) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[91]
}

func (x ReferenceUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceUnit.Descriptor instead.
func (ReferenceUnit) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{91}
}

type RelationalRelator int32

const (
	RelationalRelator_RELATIONAL_RELATOR_UNSPECIFIED       RelationalRelator = 0
	RelationalRelator_RELATIONAL_RELATOR_EQUALTO           RelationalRelator = 1
	RelationalRelator_RELATIONAL_RELATOR_LESSTHAN          RelationalRelator = 2
	RelationalRelator_RELATIONAL_RELATOR_LESSTHANOREQUALTO RelationalRelator = 3
	RelationalRelator_RELATIONAL_RELATOR_MORETHAN          RelationalRelator = 4
	RelationalRelator_RELATIONAL_RELATOR_MORETHANOREQUALTO RelationalRelator = 5
	RelationalRelator_RELATIONAL_RELATOR_NOTEQUALTO        RelationalRelator = 6
)

// Enum value maps for RelationalRelator.
var (
	RelationalRelator_name = map[int32]string{
		0: "RELATIONAL_RELATOR_UNSPECIFIED",
		1: "RELATIONAL_RELATOR_EQUALTO",
		2: "RELATIONAL_RELATOR_LESSTHAN",
		3: "RELATIONAL_RELATOR_LESSTHANOREQUALTO",
		4: "RELATIONAL_RELATOR_MORETHAN",
		5: "RELATIONAL_RELATOR_MORETHANOREQUALTO",
		6: "RELATIONAL_RELATOR_NOTEQUALTO",
	}
	RelationalRelator_value = map[string]int32{
		"RELATIONAL_RELATOR_UNSPECIFIED":       0,
		"RELATIONAL_RELATOR_EQUALTO":           1,
		"RELATIONAL_RELATOR_LESSTHAN":          2,
		"RELATIONAL_RELATOR_LESSTHANOREQUALTO": 3,
		"RELATIONAL_RELATOR_MORETHAN":          4,
		"RELATIONAL_RELATOR_MORETHANOREQUALTO": 5,
		"RELATIONAL_RELATOR_NOTEQUALTO":        6,
	}
)

func (x RelationalRelator) Enum() *RelationalRelator {
	p := new(RelationalRelator)
	*p = x
	return p
}

func (x RelationalRelator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationalRelator) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[92].Descriptor()
}

func (RelationalRelator) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[92]
}

func (x RelationalRelator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationalRelator.Descriptor instead.
func (RelationalRelator) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{92}
}

type ReleaseAvailabilityStatus int32

const (
	ReleaseAvailabilityStatus_RELEASE_AVAILABILITY_STATUS_UNSPECIFIED            ReleaseAvailabilityStatus = 0
	ReleaseAvailabilityStatus_RELEASE_AVAILABILITY_STATUS_AVAILABLEFORDSP        ReleaseAvailabilityStatus = 1
	ReleaseAvailabilityStatus_RELEASE_AVAILABILITY_STATUS_NOTAVAILABLEFORDSP     ReleaseAvailabilityStatus = 2
	ReleaseAvailabilityStatus_RELEASE_AVAILABILITY_STATUS_NOTCLEAREDFORDSP       ReleaseAvailabilityStatus = 3
	ReleaseAvailabilityStatus_RELEASE_AVAILABILITY_STATUS_NOTCLEAREDFORTERRITORY ReleaseAvailabilityStatus = 4
	ReleaseAvailabilityStatus_RELEASE_AVAILABILITY_STATUS_NOTYETPREPARED         ReleaseAvailabilityStatus = 5
	ReleaseAvailabilityStatus_RELEASE_AVAILABILITY_STATUS_USERDEFINED            ReleaseAvailabilityStatus = 6
)

// Enum value maps for ReleaseAvailabilityStatus.
var (
	ReleaseAvailabilityStatus_name = map[int32]string{
		0: "RELEASE_AVAILABILITY_STATUS_UNSPECIFIED",
		1: "RELEASE_AVAILABILITY_STATUS_AVAILABLEFORDSP",
		2: "RELEASE_AVAILABILITY_STATUS_NOTAVAILABLEFORDSP",
		3: "RELEASE_AVAILABILITY_STATUS_NOTCLEAREDFORDSP",
		4: "RELEASE_AVAILABILITY_STATUS_NOTCLEAREDFORTERRITORY",
		5: "RELEASE_AVAILABILITY_STATUS_NOTYETPREPARED",
		6: "RELEASE_AVAILABILITY_STATUS_USERDEFINED",
	}
	ReleaseAvailabilityStatus_value = map[string]int32{
		"RELEASE_AVAILABILITY_STATUS_UNSPECIFIED":            0,
		"RELEASE_AVAILABILITY_STATUS_AVAILABLEFORDSP":        1,
		"RELEASE_AVAILABILITY_STATUS_NOTAVAILABLEFORDSP":     2,
		"RELEASE_AVAILABILITY_STATUS_NOTCLEAREDFORDSP":       3,
		"RELEASE_AVAILABILITY_STATUS_NOTCLEAREDFORTERRITORY": 4,
		"RELEASE_AVAILABILITY_STATUS_NOTYETPREPARED":         5,
		"RELEASE_AVAILABILITY_STATUS_USERDEFINED":            6,
	}
)

func (x ReleaseAvailabilityStatus) Enum() *ReleaseAvailabilityStatus {
	p := new(ReleaseAvailabilityStatus)
	*p = x
	return p
}

func (x ReleaseAvailabilityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseAvailabilityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[93].Descriptor()
}

func (ReleaseAvailabilityStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[93]
}

func (x ReleaseAvailabilityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseAvailabilityStatus.Descriptor instead.
func (ReleaseAvailabilityStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{93}
}

type ReleaseRelationshipType int32

const (
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED                   ReleaseRelationshipType = 0
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE         ReleaseRelationshipType = 1
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE     ReleaseRelationshipType = 2
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST         ReleaseRelationshipType = 3
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST                 ReleaseRelationshipType = 4
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT       ReleaseRelationshipType = 5
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT             ReleaseRelationshipType = 6
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL ReleaseRelationshipType = 7
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO           ReleaseRelationshipType = 8
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO           ReleaseRelationshipType = 9
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM           ReleaseRelationshipType = 10
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO                   ReleaseRelationshipType = 11
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO                   ReleaseRelationshipType = 12
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE               ReleaseRelationshipType = 13
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL ReleaseRelationshipType = 14
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE          ReleaseRelationshipType = 15
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM          ReleaseRelationshipType = 16
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_UNKNOWN                       ReleaseRelationshipType = 17
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_USERDEFINED                   ReleaseRelationshipType = 18
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING           ReleaseRelationshipType = 19
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM                ReleaseRelationshipType = 20
)

// Enum value maps for ReleaseRelationshipType.
var (
	ReleaseRelationshipType_name = map[int32]string{
		0:  "RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED",
		1:  "RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE",
		2:  "RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE",
		3:  "RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST",
		4:  "RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST",
		5:  "RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT",
		6:  "RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT",
		7:  "RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL",
		8:  "RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO",
		9:  "RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO",
		10: "RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM",
		11: "RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO",
		12: "RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO",
		13: "RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE",
		14: "RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL",
		15: "RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE",
		16: "RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM",
		17: "RELEASE_RELATIONSHIP_TYPE_UNKNOWN",
		18: "RELEASE_RELATIONSHIP_TYPE_USERDEFINED",
		19: "RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING",
		20: "RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM",
	}
	ReleaseRelationshipType_value = map[string]int32{
		"RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED":                   0,
		"RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE":         1,
		"RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE":     2,
		"RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST":         3,
		"RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST":                 4,
		"RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT":       5,
		"RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT":             6,
		"RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL": 7,
		"RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO":           8,
		"RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO":           9,
		"RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM":           10,
		"RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO":                   11,
		"RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO":                   12,
		"RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE":               13,
		"RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL": 14,
		"RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE":          15,
		"RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM":          16,
		"RELEASE_RELATIONSHIP_TYPE_UNKNOWN":                       17,
		"RELEASE_RELATIONSHIP_TYPE_USERDEFINED":                   18,
		"RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING":           19,
		"RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM":                20,
	}
)

func (x ReleaseRelationshipType) Enum() *ReleaseRelationshipType {
	p := new(ReleaseRelationshipType)
	*p = x
	return p
}

func (x ReleaseRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[94].Descriptor()
}

func (ReleaseRelationshipType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[94]
}

func (x ReleaseRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseRelationshipType.Descriptor instead.
func (ReleaseRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{94}
}

type ReleaseResourceType int32

const (
	ReleaseResourceType_RELEASE_RESOURCE_TYPE_UNSPECIFIED       ReleaseResourceType = 0
	ReleaseResourceType_RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE   ReleaseResourceType = 1
	ReleaseResourceType_RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE ReleaseResourceType = 2
)

// Enum value maps for ReleaseResourceType.
var (
	ReleaseResourceType_name = map[int32]string{
		0: "RELEASE_RESOURCE_TYPE_UNSPECIFIED",
		1: "RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE",
		2: "RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE",
	}
	ReleaseResourceType_value = map[string]int32{
		"RELEASE_RESOURCE_TYPE_UNSPECIFIED":       0,
		"RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE":   1,
		"RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE": 2,
	}
)

func (x ReleaseResourceType) Enum() *ReleaseResourceType {
	p := new(ReleaseResourceType)
	*p = x
	return p
}

func (x ReleaseResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[95].Descriptor()
}

func (ReleaseResourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[95]
}

func (x ReleaseResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseResourceType.Descriptor instead.
func (ReleaseResourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{95}
}

type ReleaseType int32

const (
	ReleaseType_RELEASE_TYPE_UNSPECIFIED                         ReleaseType = 0
	ReleaseType_RELEASE_TYPE_ADVERTISEMENTVIDEO                  ReleaseType = 1
	ReleaseType_RELEASE_TYPE_ALBUM                               ReleaseType = 2
	ReleaseType_RELEASE_TYPE_ALERTTONERELEASE                    ReleaseType = 3
	ReleaseType_RELEASE_TYPE_ANIMATION                           ReleaseType = 4
	ReleaseType_RELEASE_TYPE_ASPERCONTRACT                       ReleaseType = 5
	ReleaseType_RELEASE_TYPE_AUDIOCLIPRELEASE                    ReleaseType = 6
	ReleaseType_RELEASE_TYPE_BACKCOVERIMAGERELEASE               ReleaseType = 7
	ReleaseType_RELEASE_TYPE_BOOKLETBACKIMAGERELEASE             ReleaseType = 8
	ReleaseType_RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE            ReleaseType = 9
	ReleaseType_RELEASE_TYPE_BOOKLETRELEASE                      ReleaseType = 10
	ReleaseType_RELEASE_TYPE_BUNDLE                              ReleaseType = 11
	ReleaseType_RELEASE_TYPE_CLASSICALALBUM                      ReleaseType = 12
	ReleaseType_RELEASE_TYPE_CONCERTVIDEO                        ReleaseType = 13
	ReleaseType_RELEASE_TYPE_CORPORATEFILM                       ReleaseType = 14
	ReleaseType_RELEASE_TYPE_DIGITALBOXSETRELEASE                ReleaseType = 15
	ReleaseType_RELEASE_TYPE_DOCUMENTARY                         ReleaseType = 16
	ReleaseType_RELEASE_TYPE_DOCUMENTIMAGERELEASE                ReleaseType = 17
	ReleaseType_RELEASE_TYPE_EBOOKRELEASE                        ReleaseType = 18
	ReleaseType_RELEASE_TYPE_EP                                  ReleaseType = 19
	ReleaseType_RELEASE_TYPE_EPISODE                             ReleaseType = 20
	ReleaseType_RELEASE_TYPE_FEATUREFILM                         ReleaseType = 21
	ReleaseType_RELEASE_TYPE_FILMBUNDLE                          ReleaseType = 22
	ReleaseType_RELEASE_TYPE_FRONTCOVERIMAGERELEASE              ReleaseType = 23
	ReleaseType_RELEASE_TYPE_ICONRELEASE                         ReleaseType = 24
	ReleaseType_RELEASE_TYPE_INFOMERCIALVIDEO                    ReleaseType = 25
	ReleaseType_RELEASE_TYPE_INTERACTIVEBOOKLETRELEASE           ReleaseType = 26
	ReleaseType_RELEASE_TYPE_KARAOKERELEASE                      ReleaseType = 27
	ReleaseType_RELEASE_TYPE_LIVEEVENTVIDEO                      ReleaseType = 28
	ReleaseType_RELEASE_TYPE_LOGORELEASE                         ReleaseType = 29
	ReleaseType_RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE     ReleaseType = 30
	ReleaseType_RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE  ReleaseType = 31
	ReleaseType_RELEASE_TYPE_LYRICSHEETRELEASE                   ReleaseType = 32
	ReleaseType_RELEASE_TYPE_MULTIMEDIAALBUM                     ReleaseType = 33
	ReleaseType_RELEASE_TYPE_MULTIMEDIASINGLE                    ReleaseType = 34
	ReleaseType_RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE         ReleaseType = 35
	ReleaseType_RELEASE_TYPE_MUSICALWORKCLIPRELEASE              ReleaseType = 36
	ReleaseType_RELEASE_TYPE_MUSICALWORKREADALONGVIDEORELEASE    ReleaseType = 37
	ReleaseType_RELEASE_TYPE_MUSICALWORKTRAILERRELEASE           ReleaseType = 38
	ReleaseType_RELEASE_TYPE_MUSICALWORKVIDEOCHAPTERRELEASE      ReleaseType = 39
	ReleaseType_RELEASE_TYPE_NEWS                                ReleaseType = 40
	ReleaseType_RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE      ReleaseType = 41
	ReleaseType_RELEASE_TYPE_NONMUSICALWORKCLIPRELEASE           ReleaseType = 42
	ReleaseType_RELEASE_TYPE_NONMUSICALWORKREADALONGVIDEORELEASE ReleaseType = 43
	ReleaseType_RELEASE_TYPE_NONMUSICALWORKTRAILERRELEASE        ReleaseType = 44
	ReleaseType_RELEASE_TYPE_NONMUSICALWORKVIDEOCHAPTERRELEASE   ReleaseType = 45
	ReleaseType_RELEASE_TYPE_NONSERIALAUDIOVISUALRECORDING       ReleaseType = 46
	ReleaseType_RELEASE_TYPE_PHOTOGRAPHRELEASE                   ReleaseType = 47
	ReleaseType_RELEASE_TYPE_RINGBACKTONERELEASE                 ReleaseType = 48
	ReleaseType_RELEASE_TYPE_RINGTONERELEASE                     ReleaseType = 49
	ReleaseType_RELEASE_TYPE_SCREENSAVERRELEASE                  ReleaseType = 50
	ReleaseType_RELEASE_TYPE_SEASON                              ReleaseType = 51
	ReleaseType_RELEASE_TYPE_SERIES                              ReleaseType = 52
	ReleaseType_RELEASE_TYPE_SHEETMUSICRELEASE                   ReleaseType = 53
	ReleaseType_RELEASE_TYPE_SHORTFORMMUSICALWORKVIDEORELEASE    ReleaseType = 54
	ReleaseType_RELEASE_TYPE_SHORTFORMNONMUSICALWORKVIDEORELEASE ReleaseType = 55
	ReleaseType_RELEASE_TYPE_SINGLE                              ReleaseType = 56
	ReleaseType_RELEASE_TYPE_SINGLERESOURCERELEASE               ReleaseType = 57
	ReleaseType_RELEASE_TYPE_SINGLERESOURCERELEASEWITHCOVERART   ReleaseType = 58
	ReleaseType_RELEASE_TYPE_TRACKRELEASE                        ReleaseType = 59
	ReleaseType_RELEASE_TYPE_TRAILERVIDEO                        ReleaseType = 60
	ReleaseType_RELEASE_TYPE_TRAYIMAGERELEASE                    ReleaseType = 61
	ReleaseType_RELEASE_TYPE_UNKNOWN                             ReleaseType = 62
	ReleaseType_RELEASE_TYPE_USERDEFINED                         ReleaseType = 63
	ReleaseType_RELEASE_TYPE_VIDEOALBUM                          ReleaseType = 64
	ReleaseType_RELEASE_TYPE_VIDEOCHAPTERRELEASE                 ReleaseType = 65
	ReleaseType_RELEASE_TYPE_VIDEOCLIPRELEASE                    ReleaseType = 66
	ReleaseType_RELEASE_TYPE_VIDEOSCREENCAPTURERELEASE           ReleaseType = 67
	ReleaseType_RELEASE_TYPE_VIDEOSINGLE                         ReleaseType = 68
	ReleaseType_RELEASE_TYPE_VIDEOTRACKRELEASE                   ReleaseType = 69
	ReleaseType_RELEASE_TYPE_WALLPAPERRELEASE                    ReleaseType = 70
	ReleaseType_RELEASE_TYPE_AUDIOBOOKRELEASE                    ReleaseType = 71
	ReleaseType_RELEASE_TYPE_AUDIODRAMARELEASE                   ReleaseType = 72
	ReleaseType_RELEASE_TYPE_CLASSICALDIGITALBOXEDSET            ReleaseType = 73
	ReleaseType_RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM            ReleaseType = 74
	ReleaseType_RELEASE_TYPE_DJMIX                               ReleaseType = 75
	ReleaseType_RELEASE_TYPE_DRAMA                               ReleaseType = 76
	ReleaseType_RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE        ReleaseType = 77
	ReleaseType_RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET           ReleaseType = 78
	ReleaseType_RELEASE_TYPE_PLAYLIST                            ReleaseType = 79
	ReleaseType_RELEASE_TYPE_SHORTFILM                           ReleaseType = 80
	ReleaseType_RELEASE_TYPE_STEMBUNDLE                          ReleaseType = 81
	ReleaseType_RELEASE_TYPE_VIDEOMASTERTONERELEASE              ReleaseType = 82
)

// Enum value maps for ReleaseType.
var (
	ReleaseType_name = map[int32]string{
		0:  "RELEASE_TYPE_UNSPECIFIED",
		1:  "RELEASE_TYPE_ADVERTISEMENTVIDEO",
		2:  "RELEASE_TYPE_ALBUM",
		3:  "RELEASE_TYPE_ALERTTONERELEASE",
		4:  "RELEASE_TYPE_ANIMATION",
		5:  "RELEASE_TYPE_ASPERCONTRACT",
		6:  "RELEASE_TYPE_AUDIOCLIPRELEASE",
		7:  "RELEASE_TYPE_BACKCOVERIMAGERELEASE",
		8:  "RELEASE_TYPE_BOOKLETBACKIMAGERELEASE",
		9:  "RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE",
		10: "RELEASE_TYPE_BOOKLETRELEASE",
		11: "RELEASE_TYPE_BUNDLE",
		12: "RELEASE_TYPE_CLASSICALALBUM",
		13: "RELEASE_TYPE_CONCERTVIDEO",
		14: "RELEASE_TYPE_CORPORATEFILM",
		15: "RELEASE_TYPE_DIGITALBOXSETRELEASE",
		16: "RELEASE_TYPE_DOCUMENTARY",
		17: "RELEASE_TYPE_DOCUMENTIMAGERELEASE",
		18: "RELEASE_TYPE_EBOOKRELEASE",
		19: "RELEASE_TYPE_EP",
		20: "RELEASE_TYPE_EPISODE",
		21: "RELEASE_TYPE_FEATUREFILM",
		22: "RELEASE_TYPE_FILMBUNDLE",
		23: "RELEASE_TYPE_FRONTCOVERIMAGERELEASE",
		24: "RELEASE_TYPE_ICONRELEASE",
		25: "RELEASE_TYPE_INFOMERCIALVIDEO",
		26: "RELEASE_TYPE_INTERACTIVEBOOKLETRELEASE",
		27: "RELEASE_TYPE_KARAOKERELEASE",
		28: "RELEASE_TYPE_LIVEEVENTVIDEO",
		29: "RELEASE_TYPE_LOGORELEASE",
		30: "RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE",
		31: "RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE",
		32: "RELEASE_TYPE_LYRICSHEETRELEASE",
		33: "RELEASE_TYPE_MULTIMEDIAALBUM",
		34: "RELEASE_TYPE_MULTIMEDIASINGLE",
		35: "RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE",
		36: "RELEASE_TYPE_MUSICALWORKCLIPRELEASE",
		37: "RELEASE_TYPE_MUSICALWORKREADALONGVIDEORELEASE",
		38: "RELEASE_TYPE_MUSICALWORKTRAILERRELEASE",
		39: "RELEASE_TYPE_MUSICALWORKVIDEOCHAPTERRELEASE",
		40: "RELEASE_TYPE_NEWS",
		41: "RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE",
		42: "RELEASE_TYPE_NONMUSICALWORKCLIPRELEASE",
		43: "RELEASE_TYPE_NONMUSICALWORKREADALONGVIDEORELEASE",
		44: "RELEASE_TYPE_NONMUSICALWORKTRAILERRELEASE",
		45: "RELEASE_TYPE_NONMUSICALWORKVIDEOCHAPTERRELEASE",
		46: "RELEASE_TYPE_NONSERIALAUDIOVISUALRECORDING",
		47: "RELEASE_TYPE_PHOTOGRAPHRELEASE",
		48: "RELEASE_TYPE_RINGBACKTONERELEASE",
		49: "RELEASE_TYPE_RINGTONERELEASE",
		50: "RELEASE_TYPE_SCREENSAVERRELEASE",
		51: "RELEASE_TYPE_SEASON",
		52: "RELEASE_TYPE_SERIES",
		53: "RELEASE_TYPE_SHEETMUSICRELEASE",
		54: "RELEASE_TYPE_SHORTFORMMUSICALWORKVIDEORELEASE",
		55: "RELEASE_TYPE_SHORTFORMNONMUSICALWORKVIDEORELEASE",
		56: "RELEASE_TYPE_SINGLE",
		57: "RELEASE_TYPE_SINGLERESOURCERELEASE",
		58: "RELEASE_TYPE_SINGLERESOURCERELEASEWITHCOVERART",
		59: "RELEASE_TYPE_TRACKRELEASE",
		60: "RELEASE_TYPE_TRAILERVIDEO",
		61: "RELEASE_TYPE_TRAYIMAGERELEASE",
		62: "RELEASE_TYPE_UNKNOWN",
		63: "RELEASE_TYPE_USERDEFINED",
		64: "RELEASE_TYPE_VIDEOALBUM",
		65: "RELEASE_TYPE_VIDEOCHAPTERRELEASE",
		66: "RELEASE_TYPE_VIDEOCLIPRELEASE",
		67: "RELEASE_TYPE_VIDEOSCREENCAPTURERELEASE",
		68: "RELEASE_TYPE_VIDEOSINGLE",
		69: "RELEASE_TYPE_VIDEOTRACKRELEASE",
		70: "RELEASE_TYPE_WALLPAPERRELEASE",
		71: "RELEASE_TYPE_AUDIOBOOKRELEASE",
		72: "RELEASE_TYPE_AUDIODRAMARELEASE",
		73: "RELEASE_TYPE_CLASSICALDIGITALBOXEDSET",
		74: "RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM",
		75: "RELEASE_TYPE_DJMIX",
		76: "RELEASE_TYPE_DRAMA",
		77: "RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE",
		78: "RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET",
		79: "RELEASE_TYPE_PLAYLIST",
		80: "RELEASE_TYPE_SHORTFILM",
		81: "RELEASE_TYPE_STEMBUNDLE",
		82: "RELEASE_TYPE_VIDEOMASTERTONERELEASE",
	}
	ReleaseType_value = map[string]int32{
		"RELEASE_TYPE_UNSPECIFIED":                         0,
		"RELEASE_TYPE_ADVERTISEMENTVIDEO":                  1,
		"RELEASE_TYPE_ALBUM":                               2,
		"RELEASE_TYPE_ALERTTONERELEASE":                    3,
		"RELEASE_TYPE_ANIMATION":                           4,
		"RELEASE_TYPE_ASPERCONTRACT":                       5,
		"RELEASE_TYPE_AUDIOCLIPRELEASE":                    6,
		"RELEASE_TYPE_BACKCOVERIMAGERELEASE":               7,
		"RELEASE_TYPE_BOOKLETBACKIMAGERELEASE":             8,
		"RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE":            9,
		"RELEASE_TYPE_BOOKLETRELEASE":                      10,
		"RELEASE_TYPE_BUNDLE":                              11,
		"RELEASE_TYPE_CLASSICALALBUM":                      12,
		"RELEASE_TYPE_CONCERTVIDEO":                        13,
		"RELEASE_TYPE_CORPORATEFILM":                       14,
		"RELEASE_TYPE_DIGITALBOXSETRELEASE":                15,
		"RELEASE_TYPE_DOCUMENTARY":                         16,
		"RELEASE_TYPE_DOCUMENTIMAGERELEASE":                17,
		"RELEASE_TYPE_EBOOKRELEASE":                        18,
		"RELEASE_TYPE_EP":                                  19,
		"RELEASE_TYPE_EPISODE":                             20,
		"RELEASE_TYPE_FEATUREFILM":                         21,
		"RELEASE_TYPE_FILMBUNDLE":                          22,
		"RELEASE_TYPE_FRONTCOVERIMAGERELEASE":              23,
		"RELEASE_TYPE_ICONRELEASE":                         24,
		"RELEASE_TYPE_INFOMERCIALVIDEO":                    25,
		"RELEASE_TYPE_INTERACTIVEBOOKLETRELEASE":           26,
		"RELEASE_TYPE_KARAOKERELEASE":                      27,
		"RELEASE_TYPE_LIVEEVENTVIDEO":                      28,
		"RELEASE_TYPE_LOGORELEASE":                         29,
		"RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE":     30,
		"RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE":  31,
		"RELEASE_TYPE_LYRICSHEETRELEASE":                   32,
		"RELEASE_TYPE_MULTIMEDIAALBUM":                     33,
		"RELEASE_TYPE_MULTIMEDIASINGLE":                    34,
		"RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE":         35,
		"RELEASE_TYPE_MUSICALWORKCLIPRELEASE":              36,
		"RELEASE_TYPE_MUSICALWORKREADALONGVIDEORELEASE":    37,
		"RELEASE_TYPE_MUSICALWORKTRAILERRELEASE":           38,
		"RELEASE_TYPE_MUSICALWORKVIDEOCHAPTERRELEASE":      39,
		"RELEASE_TYPE_NEWS":                                40,
		"RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE":      41,
		"RELEASE_TYPE_NONMUSICALWORKCLIPRELEASE":           42,
		"RELEASE_TYPE_NONMUSICALWORKREADALONGVIDEORELEASE": 43,
		"RELEASE_TYPE_NONMUSICALWORKTRAILERRELEASE":        44,
		"RELEASE_TYPE_NONMUSICALWORKVIDEOCHAPTERRELEASE":   45,
		"RELEASE_TYPE_NONSERIALAUDIOVISUALRECORDING":       46,
		"RELEASE_TYPE_PHOTOGRAPHRELEASE":                   47,
		"RELEASE_TYPE_RINGBACKTONERELEASE":                 48,
		"RELEASE_TYPE_RINGTONERELEASE":                     49,
		"RELEASE_TYPE_SCREENSAVERRELEASE":                  50,
		"RELEASE_TYPE_SEASON":                              51,
		"RELEASE_TYPE_SERIES":                              52,
		"RELEASE_TYPE_SHEETMUSICRELEASE":                   53,
		"RELEASE_TYPE_SHORTFORMMUSICALWORKVIDEORELEASE":    54,
		"RELEASE_TYPE_SHORTFORMNONMUSICALWORKVIDEORELEASE": 55,
		"RELEASE_TYPE_SINGLE":                              56,
		"RELEASE_TYPE_SINGLERESOURCERELEASE":               57,
		"RELEASE_TYPE_SINGLERESOURCERELEASEWITHCOVERART":   58,
		"RELEASE_TYPE_TRACKRELEASE":                        59,
		"RELEASE_TYPE_TRAILERVIDEO":                        60,
		"RELEASE_TYPE_TRAYIMAGERELEASE":                    61,
		"RELEASE_TYPE_UNKNOWN":                             62,
		"RELEASE_TYPE_USERDEFINED":                         63,
		"RELEASE_TYPE_VIDEOALBUM":                          64,
		"RELEASE_TYPE_VIDEOCHAPTERRELEASE":                 65,
		"RELEASE_TYPE_VIDEOCLIPRELEASE":                    66,
		"RELEASE_TYPE_VIDEOSCREENCAPTURERELEASE":           67,
		"RELEASE_TYPE_VIDEOSINGLE":                         68,
		"RELEASE_TYPE_VIDEOTRACKRELEASE":                   69,
		"RELEASE_TYPE_WALLPAPERRELEASE":                    70,
		"RELEASE_TYPE_AUDIOBOOKRELEASE":                    71,
		"RELEASE_TYPE_AUDIODRAMARELEASE":                   72,
		"RELEASE_TYPE_CLASSICALDIGITALBOXEDSET":            73,
		"RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM":            74,
		"RELEASE_TYPE_DJMIX":                               75,
		"RELEASE_TYPE_DRAMA":                               76,
		"RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE":        77,
		"RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET":           78,
		"RELEASE_TYPE_PLAYLIST":                            79,
		"RELEASE_TYPE_SHORTFILM":                           80,
		"RELEASE_TYPE_STEMBUNDLE":                          81,
		"RELEASE_TYPE_VIDEOMASTERTONERELEASE":              82,
	}
)

func (x ReleaseType) Enum() *ReleaseType {
	p := new(ReleaseType)
	*p = x
	return p
}

func (x ReleaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[96].Descriptor()
}

func (ReleaseType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[96]
}

func (x ReleaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseType.Descriptor instead.
func (ReleaseType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{96}
}

type ReportFormat int32

const (
	ReportFormat_REPORT_FORMAT_UNSPECIFIED ReportFormat = 0
	ReportFormat_REPORT_FORMAT_ASCII       ReportFormat = 1
	ReportFormat_REPORT_FORMAT_CSV         ReportFormat = 2
	ReportFormat_REPORT_FORMAT_EXCEL2000   ReportFormat = 3
	ReportFormat_REPORT_FORMAT_EXCEL2007   ReportFormat = 4
	ReportFormat_REPORT_FORMAT_EXCEL2010   ReportFormat = 5
	ReportFormat_REPORT_FORMAT_USERDEFINED ReportFormat = 6
	ReportFormat_REPORT_FORMAT_XML         ReportFormat = 7
)

// Enum value maps for ReportFormat.
var (
	ReportFormat_name = map[int32]string{
		0: "REPORT_FORMAT_UNSPECIFIED",
		1: "REPORT_FORMAT_ASCII",
		2: "REPORT_FORMAT_CSV",
		3: "REPORT_FORMAT_EXCEL2000",
		4: "REPORT_FORMAT_EXCEL2007",
		5: "REPORT_FORMAT_EXCEL2010",
		6: "REPORT_FORMAT_USERDEFINED",
		7: "REPORT_FORMAT_XML",
	}
	ReportFormat_value = map[string]int32{
		"REPORT_FORMAT_UNSPECIFIED": 0,
		"REPORT_FORMAT_ASCII":       1,
		"REPORT_FORMAT_CSV":         2,
		"REPORT_FORMAT_EXCEL2000":   3,
		"REPORT_FORMAT_EXCEL2007":   4,
		"REPORT_FORMAT_EXCEL2010":   5,
		"REPORT_FORMAT_USERDEFINED": 6,
		"REPORT_FORMAT_XML":         7,
	}
)

func (x ReportFormat) Enum() *ReportFormat {
	p := new(ReportFormat)
	*p = x
	return p
}

func (x ReportFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[97].Descriptor()
}

func (ReportFormat) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[97]
}

func (x ReportFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportFormat.Descriptor instead.
func (ReportFormat) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{97}
}

type ReportType int32

const (
	ReportType_REPORT_TYPE_UNSPECIFIED                                       ReportType = 0
	ReportType_REPORT_TYPE_DELIVERYFREQUENCYREQUESTCALL                      ReportType = 1
	ReportType_REPORT_TYPE_INFORMATIONABOUTDELIVEREDANDAVAILABLERELEASESCALL ReportType = 2
	ReportType_REPORT_TYPE_ORDEREDRELEASESINQUEUEREQUESTCALL                 ReportType = 3
	ReportType_REPORT_TYPE_REDELIVERYREQUESTCALL                             ReportType = 4
	ReportType_REPORT_TYPE_RELEASEAVAILABILITYCALL                           ReportType = 5
	ReportType_REPORT_TYPE_RELEASEAVAILABILITYREQUESTCALL                    ReportType = 6
	ReportType_REPORT_TYPE_RELEASESTATUSINFORMATIONCALL                      ReportType = 7
	ReportType_REPORT_TYPE_RELEASESTATUSREQUESTCALL                          ReportType = 8
	ReportType_REPORT_TYPE_RELEASESUPPLYCHAINREQUESTCALL                     ReportType = 9
	ReportType_REPORT_TYPE_REPORTDELIVERYCALL                                ReportType = 10
	ReportType_REPORT_TYPE_REPORTREQUESTCALL                                 ReportType = 11
	ReportType_REPORT_TYPE_SUPPLYCHAINSTATUSCALL                             ReportType = 12
	ReportType_REPORT_TYPE_USERDEFINED                                       ReportType = 13
)

// Enum value maps for ReportType.
var (
	ReportType_name = map[int32]string{
		0:  "REPORT_TYPE_UNSPECIFIED",
		1:  "REPORT_TYPE_DELIVERYFREQUENCYREQUESTCALL",
		2:  "REPORT_TYPE_INFORMATIONABOUTDELIVEREDANDAVAILABLERELEASESCALL",
		3:  "REPORT_TYPE_ORDEREDRELEASESINQUEUEREQUESTCALL",
		4:  "REPORT_TYPE_REDELIVERYREQUESTCALL",
		5:  "REPORT_TYPE_RELEASEAVAILABILITYCALL",
		6:  "REPORT_TYPE_RELEASEAVAILABILITYREQUESTCALL",
		7:  "REPORT_TYPE_RELEASESTATUSINFORMATIONCALL",
		8:  "REPORT_TYPE_RELEASESTATUSREQUESTCALL",
		9:  "REPORT_TYPE_RELEASESUPPLYCHAINREQUESTCALL",
		10: "REPORT_TYPE_REPORTDELIVERYCALL",
		11: "REPORT_TYPE_REPORTREQUESTCALL",
		12: "REPORT_TYPE_SUPPLYCHAINSTATUSCALL",
		13: "REPORT_TYPE_USERDEFINED",
	}
	ReportType_value = map[string]int32{
		"REPORT_TYPE_UNSPECIFIED":                                       0,
		"REPORT_TYPE_DELIVERYFREQUENCYREQUESTCALL":                      1,
		"REPORT_TYPE_INFORMATIONABOUTDELIVEREDANDAVAILABLERELEASESCALL": 2,
		"REPORT_TYPE_ORDEREDRELEASESINQUEUEREQUESTCALL":                 3,
		"REPORT_TYPE_REDELIVERYREQUESTCALL":                             4,
		"REPORT_TYPE_RELEASEAVAILABILITYCALL":                           5,
		"REPORT_TYPE_RELEASEAVAILABILITYREQUESTCALL":                    6,
		"REPORT_TYPE_RELEASESTATUSINFORMATIONCALL":                      7,
		"REPORT_TYPE_RELEASESTATUSREQUESTCALL":                          8,
		"REPORT_TYPE_RELEASESUPPLYCHAINREQUESTCALL":                     9,
		"REPORT_TYPE_REPORTDELIVERYCALL":                                10,
		"REPORT_TYPE_REPORTREQUESTCALL":                                 11,
		"REPORT_TYPE_SUPPLYCHAINSTATUSCALL":                             12,
		"REPORT_TYPE_USERDEFINED":                                       13,
	}
)

func (x ReportType) Enum() *ReportType {
	p := new(ReportType)
	*p = x
	return p
}

func (x ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[98].Descriptor()
}

func (ReportType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[98]
}

func (x ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportType.Descriptor instead.
func (ReportType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{98}
}

type RequestReason int32

const (
	RequestReason_REQUEST_REASON_UNSPECIFIED              RequestReason = 0
	RequestReason_REQUEST_REASON_USERDEFINED              RequestReason = 1
	RequestReason_REQUEST_REASON_DISPUTERESOLUTIONREQUEST RequestReason = 2
	RequestReason_REQUEST_REASON_GENERALREQUEST           RequestReason = 3
	RequestReason_REQUEST_REASON_PUBLISHERADDITION        RequestReason = 4
	RequestReason_REQUEST_REASON_PUBLISHERCHANGE          RequestReason = 5
	RequestReason_REQUEST_REASON_PUBLISHERREMOVAL         RequestReason = 6
	RequestReason_REQUEST_REASON_RECALL                   RequestReason = 7
	RequestReason_REQUEST_REASON_RELEASELISTUPDATE        RequestReason = 8
	RequestReason_REQUEST_REASON_SPECIFICREQUEST          RequestReason = 9
	RequestReason_REQUEST_REASON_WRITERADDITION           RequestReason = 10
	RequestReason_REQUEST_REASON_WRITERCHANGE             RequestReason = 11
	RequestReason_REQUEST_REASON_WRITERREMOVAL            RequestReason = 12
)

// Enum value maps for RequestReason.
var (
	RequestReason_name = map[int32]string{
		0:  "REQUEST_REASON_UNSPECIFIED",
		1:  "REQUEST_REASON_USERDEFINED",
		2:  "REQUEST_REASON_DISPUTERESOLUTIONREQUEST",
		3:  "REQUEST_REASON_GENERALREQUEST",
		4:  "REQUEST_REASON_PUBLISHERADDITION",
		5:  "REQUEST_REASON_PUBLISHERCHANGE",
		6:  "REQUEST_REASON_PUBLISHERREMOVAL",
		7:  "REQUEST_REASON_RECALL",
		8:  "REQUEST_REASON_RELEASELISTUPDATE",
		9:  "REQUEST_REASON_SPECIFICREQUEST",
		10: "REQUEST_REASON_WRITERADDITION",
		11: "REQUEST_REASON_WRITERCHANGE",
		12: "REQUEST_REASON_WRITERREMOVAL",
	}
	RequestReason_value = map[string]int32{
		"REQUEST_REASON_UNSPECIFIED":              0,
		"REQUEST_REASON_USERDEFINED":              1,
		"REQUEST_REASON_DISPUTERESOLUTIONREQUEST": 2,
		"REQUEST_REASON_GENERALREQUEST":           3,
		"REQUEST_REASON_PUBLISHERADDITION":        4,
		"REQUEST_REASON_PUBLISHERCHANGE":          5,
		"REQUEST_REASON_PUBLISHERREMOVAL":         6,
		"REQUEST_REASON_RECALL":                   7,
		"REQUEST_REASON_RELEASELISTUPDATE":        8,
		"REQUEST_REASON_SPECIFICREQUEST":          9,
		"REQUEST_REASON_WRITERADDITION":           10,
		"REQUEST_REASON_WRITERCHANGE":             11,
		"REQUEST_REASON_WRITERREMOVAL":            12,
	}
)

func (x RequestReason) Enum() *RequestReason {
	p := new(RequestReason)
	*p = x
	return p
}

func (x RequestReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[99].Descriptor()
}

func (RequestReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[99]
}

func (x RequestReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestReason.Descriptor instead.
func (RequestReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{99}
}

type RequestedActionType int32

const (
	RequestedActionType_REQUESTED_ACTION_TYPE_UNSPECIFIED               RequestedActionType = 0
	RequestedActionType_REQUESTED_ACTION_TYPE_ADDITIONALINFORMATIONONLY RequestedActionType = 1
	RequestedActionType_REQUESTED_ACTION_TYPE_CORRECTANDINFORM          RequestedActionType = 2
	RequestedActionType_REQUESTED_ACTION_TYPE_CORRECTANDRESEND          RequestedActionType = 3
	RequestedActionType_REQUESTED_ACTION_TYPE_NOACTION                  RequestedActionType = 4
	RequestedActionType_REQUESTED_ACTION_TYPE_USERDEFINED               RequestedActionType = 5
)

// Enum value maps for RequestedActionType.
var (
	RequestedActionType_name = map[int32]string{
		0: "REQUESTED_ACTION_TYPE_UNSPECIFIED",
		1: "REQUESTED_ACTION_TYPE_ADDITIONALINFORMATIONONLY",
		2: "REQUESTED_ACTION_TYPE_CORRECTANDINFORM",
		3: "REQUESTED_ACTION_TYPE_CORRECTANDRESEND",
		4: "REQUESTED_ACTION_TYPE_NOACTION",
		5: "REQUESTED_ACTION_TYPE_USERDEFINED",
	}
	RequestedActionType_value = map[string]int32{
		"REQUESTED_ACTION_TYPE_UNSPECIFIED":               0,
		"REQUESTED_ACTION_TYPE_ADDITIONALINFORMATIONONLY": 1,
		"REQUESTED_ACTION_TYPE_CORRECTANDINFORM":          2,
		"REQUESTED_ACTION_TYPE_CORRECTANDRESEND":          3,
		"REQUESTED_ACTION_TYPE_NOACTION":                  4,
		"REQUESTED_ACTION_TYPE_USERDEFINED":               5,
	}
)

func (x RequestedActionType) Enum() *RequestedActionType {
	p := new(RequestedActionType)
	*p = x
	return p
}

func (x RequestedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[100].Descriptor()
}

func (RequestedActionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[100]
}

func (x RequestedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestedActionType.Descriptor instead.
func (RequestedActionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{100}
}

type ResourceContributorRole int32

const (
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_UNSPECIFIED                        ResourceContributorRole = 0
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ACCOMPANYIST                       ResourceContributorRole = 1
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ACTOR                              ResourceContributorRole = 2
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALENGINEER                 ResourceContributorRole = 3
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER           ResourceContributorRole = 4
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER                ResourceContributorRole = 5
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER      ResourceContributorRole = 6
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER           ResourceContributorRole = 7
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANCHORPERSON                       ResourceContributorRole = 8
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANIMALTRAINER                      ResourceContributorRole = 9
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANIMATOR                           ResourceContributorRole = 10
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANNOTATOR                          ResourceContributorRole = 11
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANNOUNCER                          ResourceContributorRole = 12
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR                 ResourceContributorRole = 13
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_AANDRCOORDINATOR                   ResourceContributorRole = 14
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARMOURER                           ResourceContributorRole = 15
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTCOPYIST                         ResourceContributorRole = 16
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTDIRECTOR                        ResourceContributorRole = 17
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTIST                             ResourceContributorRole = 18
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER      ResourceContributorRole = 19
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER                ResourceContributorRole = 20
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER          ResourceContributorRole = 21
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR            ResourceContributorRole = 22
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN   ResourceContributorRole = 23
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR                 ResourceContributorRole = 24
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR                  ResourceContributorRole = 25
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTEDITOR                    ResourceContributorRole = 26
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTENGINEER                  ResourceContributorRole = 27
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER                  ResourceContributorRole = 28
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR              ResourceContributorRole = 29
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER                ResourceContributorRole = 30
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER                  ResourceContributorRole = 31
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_AURALTRAINER                       ResourceContributorRole = 32
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST                 ResourceContributorRole = 33
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BALANCEENGINEER                    ResourceContributorRole = 34
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BANDLEADER                         ResourceContributorRole = 35
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BINDER                             ResourceContributorRole = 36
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BINDINGDESIGNER                    ResourceContributorRole = 37
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BOOKDESIGNER                       ResourceContributorRole = 38
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER                   ResourceContributorRole = 39
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER                  ResourceContributorRole = 40
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BOOKPRODUCER                       ResourceContributorRole = 41
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BROADCASTASSISTANT                 ResourceContributorRole = 42
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST                ResourceContributorRole = 43
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CALLIGRAPHER                       ResourceContributorRole = 44
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CAMERAOPERATOR                     ResourceContributorRole = 45
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CARPENTER                          ResourceContributorRole = 46
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CARTOGRAPHER                       ResourceContributorRole = 47
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CARTOONIST                         ResourceContributorRole = 48
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CASTINGDIRECTOR                    ResourceContributorRole = 49
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CAUSEUR                            ResourceContributorRole = 50
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CENSOR                             ResourceContributorRole = 51
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN            ResourceContributorRole = 52
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHOIR                              ResourceContributorRole = 53
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHOIRMEMBER                        ResourceContributorRole = 54
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHOREOGRAPHER                      ResourceContributorRole = 55
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHORUSMASTER                       ResourceContributorRole = 56
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CIRCUSARTIST                       ResourceContributorRole = 57
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CLAPPERLOADER                      ResourceContributorRole = 58
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CLUBDJ                             ResourceContributorRole = 59
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CODIRECTOR                         ResourceContributorRole = 60
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER                ResourceContributorRole = 61
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COLORSEPARATOR                     ResourceContributorRole = 62
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMEDIAN                           ResourceContributorRole = 63
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMIXER                            ResourceContributorRole = 64
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMIXINGENGINEER                   ResourceContributorRole = 65
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMMENTATOR                        ResourceContributorRole = 66
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER           ResourceContributorRole = 67
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER                ResourceContributorRole = 68
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR             ResourceContributorRole = 69
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER                 ResourceContributorRole = 70
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONCERTMASTER                      ResourceContributorRole = 71
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONDUCTOR                          ResourceContributorRole = 72
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONSULTANT                         ResourceContributorRole = 73
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONTINUITYCHECKER                  ResourceContributorRole = 74
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONTRACTOR                         ResourceContributorRole = 75
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COPRODUCER                         ResourceContributorRole = 76
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CORRESPONDENT                      ResourceContributorRole = 77
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COSTUMEDESIGNER                    ResourceContributorRole = 78
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COVERDESIGNER                      ResourceContributorRole = 79
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DANCER                             ResourceContributorRole = 80
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DELINEATOR                         ResourceContributorRole = 81
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DESIGNER                           ResourceContributorRole = 82
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIALOGUECOACH                      ResourceContributorRole = 83
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR                   ResourceContributorRole = 84
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER    ResourceContributorRole = 85
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER             ResourceContributorRole = 86
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER       ResourceContributorRole = 87
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIRECTOR                           ResourceContributorRole = 88
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER        ResourceContributorRole = 89
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY                ResourceContributorRole = 90
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DJ                                 ResourceContributorRole = 91
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DRAUGHTSMAN                        ResourceContributorRole = 92
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DRESSER                            ResourceContributorRole = 93
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DUBBER                             ResourceContributorRole = 94
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EDITOR                             ResourceContributorRole = 95
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EDITORINCHIEF                      ResourceContributorRole = 96
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EDITOROFTHEDAY                     ResourceContributorRole = 97
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ENCODER                            ResourceContributorRole = 98
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ENGINEER                           ResourceContributorRole = 99
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ENSEMBLE                           ResourceContributorRole = 100
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER                  ResourceContributorRole = 101
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EXPERT                             ResourceContributorRole = 102
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FACSIMILIST                        ResourceContributorRole = 103
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FIGHTDIRECTOR                      ResourceContributorRole = 104
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMDIRECTOR                       ResourceContributorRole = 105
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR                    ResourceContributorRole = 106
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMEDITOR                         ResourceContributorRole = 107
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMPRODUCER                       ResourceContributorRole = 108
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER                  ResourceContributorRole = 109
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FLOORMANAGER                       ResourceContributorRole = 110
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FOCUSPULLER                        ResourceContributorRole = 111
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FOLEYARTIST                        ResourceContributorRole = 112
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FOLEYEDITOR                        ResourceContributorRole = 113
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FOLEYMIXER                         ResourceContributorRole = 114
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GRAPHICARTIST                      ResourceContributorRole = 115
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GRAPHICASSISTANT                   ResourceContributorRole = 116
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GRAPHICDESIGNER                    ResourceContributorRole = 117
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GREENSMAN                          ResourceContributorRole = 118
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GRIP                               ResourceContributorRole = 119
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GUESTCONDUCTOR                     ResourceContributorRole = 120
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GROUPMEMBER                        ResourceContributorRole = 121
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_HAIRDRESSER                        ResourceContributorRole = 122
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ILLUSTRATOR                        ResourceContributorRole = 123
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_INITIALPRODUCER                    ResourceContributorRole = 124
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST                   ResourceContributorRole = 125
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWER                        ResourceContributorRole = 126
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_KEYCHARACTER                       ResourceContributorRole = 127
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_KEYGRIP                            ResourceContributorRole = 128
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_KEYTALENT                          ResourceContributorRole = 129
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LEADMAN                            ResourceContributorRole = 130
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LEADPERFORMER                      ResourceContributorRole = 131
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LEADVOCALIST                       ResourceContributorRole = 132
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR                   ResourceContributorRole = 133
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN                 ResourceContributorRole = 134
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LOCATIONMANAGER                    ResourceContributorRole = 135
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MAKEUPARTIST                       ResourceContributorRole = 136
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MANUFACTURER                       ResourceContributorRole = 137
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MASTERINGENGINEER                  ResourceContributorRole = 138
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER            ResourceContributorRole = 139
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MATTEARTIST                        ResourceContributorRole = 140
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MIXER                              ResourceContributorRole = 141
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MIXINGENGINEER                     ResourceContributorRole = 142
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER               ResourceContributorRole = 143
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICARRANGER                      ResourceContributorRole = 144
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICCOPYIST                       ResourceContributorRole = 145
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICDIRECTOR                      ResourceContributorRole = 146
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICGROUP                         ResourceContributorRole = 147
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICIAN                           ResourceContributorRole = 148
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_NARRATOR                           ResourceContributorRole = 149
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_NEWSPRODUCER                       ResourceContributorRole = 150
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_NEWSREADER                         ResourceContributorRole = 151
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_NOTSPECIFIED                       ResourceContributorRole = 152
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRA                          ResourceContributorRole = 153
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER                    ResourceContributorRole = 154
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ORIGINALARTIST                     ResourceContributorRole = 155
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_OVERDUBENGINEER                    ResourceContributorRole = 156
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER              ResourceContributorRole = 157
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PAINTER                            ResourceContributorRole = 158
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PERFORMER                          ResourceContributorRole = 159
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHER                       ResourceContributorRole = 160
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR                ResourceContributorRole = 161
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PLAYBACKSINGER                     ResourceContributorRole = 162
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_POSTPRODUCER                       ResourceContributorRole = 163
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTION                      ResourceContributorRole = 164
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER              ResourceContributorRole = 165
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER        ResourceContributorRole = 166
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN                    ResourceContributorRole = 167
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT                ResourceContributorRole = 168
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY                  ResourceContributorRole = 169
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR              ResourceContributorRole = 170
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT               ResourceContributorRole = 171
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER                  ResourceContributorRole = 172
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY                ResourceContributorRole = 173
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROJECTENGINEER                    ResourceContributorRole = 174
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMER                         ResourceContributorRole = 175
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER                ResourceContributorRole = 176
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROGRAMPRODUCER                    ResourceContributorRole = 177
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROPERTYMANAGER                    ResourceContributorRole = 178
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR                 ResourceContributorRole = 179
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PUPPETEER                          ResourceContributorRole = 180
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PYROTECHNICIAN                     ResourceContributorRole = 181
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RECORDINGENGINEER                  ResourceContributorRole = 182
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER            ResourceContributorRole = 183
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REDACTOR                           ResourceContributorRole = 184
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REISSUEPRODUCER                    ResourceContributorRole = 185
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REMIXEDARTIST                      ResourceContributorRole = 186
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REMIXER                            ResourceContributorRole = 187
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REMIXINGENGINEER                   ResourceContributorRole = 188
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER             ResourceContributorRole = 189
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REPETITEUR                         ResourceContributorRole = 190
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RESEARCHER                         ResourceContributorRole = 191
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD                   ResourceContributorRole = 192
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER                 ResourceContributorRole = 193
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RESTAGER                           ResourceContributorRole = 194
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RIGGER                             ResourceContributorRole = 195
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT          ResourceContributorRole = 196
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RUNNER                             ResourceContributorRole = 197
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SCENICOPERATIVE                    ResourceContributorRole = 198
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR                  ResourceContributorRole = 199
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR                   ResourceContributorRole = 200
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR      ResourceContributorRole = 201
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR            ResourceContributorRole = 202
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDCONDUCTOR                    ResourceContributorRole = 203
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDENGINEER                     ResourceContributorRole = 204
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR                 ResourceContributorRole = 205
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SERIESPRODUCER                     ResourceContributorRole = 206
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SETDESIGNER                        ResourceContributorRole = 207
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SETDRESSER                         ResourceContributorRole = 208
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER            ResourceContributorRole = 209
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOLOIST                            ResourceContributorRole = 210
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOUNDDESIGNER                      ResourceContributorRole = 211
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOUNDMIXER                         ResourceContributorRole = 212
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOUNDRECORDIST                     ResourceContributorRole = 213
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR                    ResourceContributorRole = 214
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SPEAKER                            ResourceContributorRole = 215
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN           ResourceContributorRole = 216
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SPONSOR                            ResourceContributorRole = 217
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER             ResourceContributorRole = 218
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STAGEDIRECTOR                      ResourceContributorRole = 219
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STAGEENGINEER                      ResourceContributorRole = 220
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STORYTELLER                        ResourceContributorRole = 221
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STRINGENGINEER                     ResourceContributorRole = 222
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STRINGPRODUCER                     ResourceContributorRole = 223
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STRINGSDIRECTOR                    ResourceContributorRole = 224
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR                    ResourceContributorRole = 225
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUDIOMUSICIAN                     ResourceContributorRole = 226
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUDIOPERSONNEL                    ResourceContributorRole = 227
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUDIOPRODUCER                     ResourceContributorRole = 228
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUNTS                             ResourceContributorRole = 229
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESEDITOR                    ResourceContributorRole = 230
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR                ResourceContributorRole = 231
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SUPPORTINGACTOR                    ResourceContributorRole = 232
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER             ResourceContributorRole = 233
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER       ResourceContributorRole = 234
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TAPEOPERATOR                       ResourceContributorRole = 235
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR                  ResourceContributorRole = 236
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TONMEISTER                         ResourceContributorRole = 237
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRACKINGENGINEER                   ResourceContributorRole = 238
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER             ResourceContributorRole = 239
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER       ResourceContributorRole = 240
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER ResourceContributorRole = 241
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER              ResourceContributorRole = 242
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL          ResourceContributorRole = 243
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TYPEDESIGNER                       ResourceContributorRole = 244
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_UNKNOWN                            ResourceContributorRole = 245
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_USERDEFINED                        ResourceContributorRole = 246
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VIDEODIRECTOR                      ResourceContributorRole = 247
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VIDEOGRAPHER                       ResourceContributorRole = 248
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR               ResourceContributorRole = 249
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VIDEOPRODUCER                      ResourceContributorRole = 250
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VISIONMIXER                        ResourceContributorRole = 251
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VISUALEDITOR                       ResourceContributorRole = 252
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN            ResourceContributorRole = 253
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALARRANGER                      ResourceContributorRole = 254
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER               ResourceContributorRole = 255
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER         ResourceContributorRole = 256
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALENGINEER                      ResourceContributorRole = 257
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALIST                           ResourceContributorRole = 258
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER                ResourceContributorRole = 259
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALPRODUCER                      ResourceContributorRole = 260
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOICEACTOR                         ResourceContributorRole = 261
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_WARDROBE                           ResourceContributorRole = 262
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BAND                               ResourceContributorRole = 263
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONTRIBUTOR                        ResourceContributorRole = 264
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FEATUREDARTIST                     ResourceContributorRole = 265
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MAINARTIST                         ResourceContributorRole = 266
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MEMBER                             ResourceContributorRole = 267
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCER                           ResourceContributorRole = 268
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER            ResourceContributorRole = 269
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRESENTER                          ResourceContributorRole = 270
)

// Enum value maps for ResourceContributorRole.
var (
	ResourceContributorRole_name = map[int32]string{
		0:   "RESOURCE_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:   "RESOURCE_CONTRIBUTOR_ROLE_ACCOMPANYIST",
		2:   "RESOURCE_CONTRIBUTOR_ROLE_ACTOR",
		3:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALENGINEER",
		4:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER",
		5:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER",
		6:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER",
		7:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER",
		8:   "RESOURCE_CONTRIBUTOR_ROLE_ANCHORPERSON",
		9:   "RESOURCE_CONTRIBUTOR_ROLE_ANIMALTRAINER",
		10:  "RESOURCE_CONTRIBUTOR_ROLE_ANIMATOR",
		11:  "RESOURCE_CONTRIBUTOR_ROLE_ANNOTATOR",
		12:  "RESOURCE_CONTRIBUTOR_ROLE_ANNOUNCER",
		13:  "RESOURCE_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR",
		14:  "RESOURCE_CONTRIBUTOR_ROLE_AANDRCOORDINATOR",
		15:  "RESOURCE_CONTRIBUTOR_ROLE_ARMOURER",
		16:  "RESOURCE_CONTRIBUTOR_ROLE_ARTCOPYIST",
		17:  "RESOURCE_CONTRIBUTOR_ROLE_ARTDIRECTOR",
		18:  "RESOURCE_CONTRIBUTOR_ROLE_ARTIST",
		19:  "RESOURCE_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER",
		20:  "RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER",
		21:  "RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER",
		22:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR",
		23:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN",
		24:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR",
		25:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR",
		26:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTEDITOR",
		27:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTENGINEER",
		28:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER",
		29:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR",
		30:  "RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER",
		31:  "RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER",
		32:  "RESOURCE_CONTRIBUTOR_ROLE_AURALTRAINER",
		33:  "RESOURCE_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST",
		34:  "RESOURCE_CONTRIBUTOR_ROLE_BALANCEENGINEER",
		35:  "RESOURCE_CONTRIBUTOR_ROLE_BANDLEADER",
		36:  "RESOURCE_CONTRIBUTOR_ROLE_BINDER",
		37:  "RESOURCE_CONTRIBUTOR_ROLE_BINDINGDESIGNER",
		38:  "RESOURCE_CONTRIBUTOR_ROLE_BOOKDESIGNER",
		39:  "RESOURCE_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER",
		40:  "RESOURCE_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER",
		41:  "RESOURCE_CONTRIBUTOR_ROLE_BOOKPRODUCER",
		42:  "RESOURCE_CONTRIBUTOR_ROLE_BROADCASTASSISTANT",
		43:  "RESOURCE_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST",
		44:  "RESOURCE_CONTRIBUTOR_ROLE_CALLIGRAPHER",
		45:  "RESOURCE_CONTRIBUTOR_ROLE_CAMERAOPERATOR",
		46:  "RESOURCE_CONTRIBUTOR_ROLE_CARPENTER",
		47:  "RESOURCE_CONTRIBUTOR_ROLE_CARTOGRAPHER",
		48:  "RESOURCE_CONTRIBUTOR_ROLE_CARTOONIST",
		49:  "RESOURCE_CONTRIBUTOR_ROLE_CASTINGDIRECTOR",
		50:  "RESOURCE_CONTRIBUTOR_ROLE_CAUSEUR",
		51:  "RESOURCE_CONTRIBUTOR_ROLE_CENSOR",
		52:  "RESOURCE_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN",
		53:  "RESOURCE_CONTRIBUTOR_ROLE_CHOIR",
		54:  "RESOURCE_CONTRIBUTOR_ROLE_CHOIRMEMBER",
		55:  "RESOURCE_CONTRIBUTOR_ROLE_CHOREOGRAPHER",
		56:  "RESOURCE_CONTRIBUTOR_ROLE_CHORUSMASTER",
		57:  "RESOURCE_CONTRIBUTOR_ROLE_CIRCUSARTIST",
		58:  "RESOURCE_CONTRIBUTOR_ROLE_CLAPPERLOADER",
		59:  "RESOURCE_CONTRIBUTOR_ROLE_CLUBDJ",
		60:  "RESOURCE_CONTRIBUTOR_ROLE_CODIRECTOR",
		61:  "RESOURCE_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER",
		62:  "RESOURCE_CONTRIBUTOR_ROLE_COLORSEPARATOR",
		63:  "RESOURCE_CONTRIBUTOR_ROLE_COMEDIAN",
		64:  "RESOURCE_CONTRIBUTOR_ROLE_COMIXER",
		65:  "RESOURCE_CONTRIBUTOR_ROLE_COMIXINGENGINEER",
		66:  "RESOURCE_CONTRIBUTOR_ROLE_COMMENTATOR",
		67:  "RESOURCE_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER",
		68:  "RESOURCE_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER",
		69:  "RESOURCE_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR",
		70:  "RESOURCE_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER",
		71:  "RESOURCE_CONTRIBUTOR_ROLE_CONCERTMASTER",
		72:  "RESOURCE_CONTRIBUTOR_ROLE_CONDUCTOR",
		73:  "RESOURCE_CONTRIBUTOR_ROLE_CONSULTANT",
		74:  "RESOURCE_CONTRIBUTOR_ROLE_CONTINUITYCHECKER",
		75:  "RESOURCE_CONTRIBUTOR_ROLE_CONTRACTOR",
		76:  "RESOURCE_CONTRIBUTOR_ROLE_COPRODUCER",
		77:  "RESOURCE_CONTRIBUTOR_ROLE_CORRESPONDENT",
		78:  "RESOURCE_CONTRIBUTOR_ROLE_COSTUMEDESIGNER",
		79:  "RESOURCE_CONTRIBUTOR_ROLE_COVERDESIGNER",
		80:  "RESOURCE_CONTRIBUTOR_ROLE_DANCER",
		81:  "RESOURCE_CONTRIBUTOR_ROLE_DELINEATOR",
		82:  "RESOURCE_CONTRIBUTOR_ROLE_DESIGNER",
		83:  "RESOURCE_CONTRIBUTOR_ROLE_DIALOGUECOACH",
		84:  "RESOURCE_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR",
		85:  "RESOURCE_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER",
		86:  "RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER",
		87:  "RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER",
		88:  "RESOURCE_CONTRIBUTOR_ROLE_DIRECTOR",
		89:  "RESOURCE_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER",
		90:  "RESOURCE_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY",
		91:  "RESOURCE_CONTRIBUTOR_ROLE_DJ",
		92:  "RESOURCE_CONTRIBUTOR_ROLE_DRAUGHTSMAN",
		93:  "RESOURCE_CONTRIBUTOR_ROLE_DRESSER",
		94:  "RESOURCE_CONTRIBUTOR_ROLE_DUBBER",
		95:  "RESOURCE_CONTRIBUTOR_ROLE_EDITOR",
		96:  "RESOURCE_CONTRIBUTOR_ROLE_EDITORINCHIEF",
		97:  "RESOURCE_CONTRIBUTOR_ROLE_EDITOROFTHEDAY",
		98:  "RESOURCE_CONTRIBUTOR_ROLE_ENCODER",
		99:  "RESOURCE_CONTRIBUTOR_ROLE_ENGINEER",
		100: "RESOURCE_CONTRIBUTOR_ROLE_ENSEMBLE",
		101: "RESOURCE_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER",
		102: "RESOURCE_CONTRIBUTOR_ROLE_EXPERT",
		103: "RESOURCE_CONTRIBUTOR_ROLE_FACSIMILIST",
		104: "RESOURCE_CONTRIBUTOR_ROLE_FIGHTDIRECTOR",
		105: "RESOURCE_CONTRIBUTOR_ROLE_FILMDIRECTOR",
		106: "RESOURCE_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR",
		107: "RESOURCE_CONTRIBUTOR_ROLE_FILMEDITOR",
		108: "RESOURCE_CONTRIBUTOR_ROLE_FILMPRODUCER",
		109: "RESOURCE_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER",
		110: "RESOURCE_CONTRIBUTOR_ROLE_FLOORMANAGER",
		111: "RESOURCE_CONTRIBUTOR_ROLE_FOCUSPULLER",
		112: "RESOURCE_CONTRIBUTOR_ROLE_FOLEYARTIST",
		113: "RESOURCE_CONTRIBUTOR_ROLE_FOLEYEDITOR",
		114: "RESOURCE_CONTRIBUTOR_ROLE_FOLEYMIXER",
		115: "RESOURCE_CONTRIBUTOR_ROLE_GRAPHICARTIST",
		116: "RESOURCE_CONTRIBUTOR_ROLE_GRAPHICASSISTANT",
		117: "RESOURCE_CONTRIBUTOR_ROLE_GRAPHICDESIGNER",
		118: "RESOURCE_CONTRIBUTOR_ROLE_GREENSMAN",
		119: "RESOURCE_CONTRIBUTOR_ROLE_GRIP",
		120: "RESOURCE_CONTRIBUTOR_ROLE_GUESTCONDUCTOR",
		121: "RESOURCE_CONTRIBUTOR_ROLE_GROUPMEMBER",
		122: "RESOURCE_CONTRIBUTOR_ROLE_HAIRDRESSER",
		123: "RESOURCE_CONTRIBUTOR_ROLE_ILLUSTRATOR",
		124: "RESOURCE_CONTRIBUTOR_ROLE_INITIALPRODUCER",
		125: "RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST",
		126: "RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWER",
		127: "RESOURCE_CONTRIBUTOR_ROLE_KEYCHARACTER",
		128: "RESOURCE_CONTRIBUTOR_ROLE_KEYGRIP",
		129: "RESOURCE_CONTRIBUTOR_ROLE_KEYTALENT",
		130: "RESOURCE_CONTRIBUTOR_ROLE_LEADMAN",
		131: "RESOURCE_CONTRIBUTOR_ROLE_LEADPERFORMER",
		132: "RESOURCE_CONTRIBUTOR_ROLE_LEADVOCALIST",
		133: "RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR",
		134: "RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN",
		135: "RESOURCE_CONTRIBUTOR_ROLE_LOCATIONMANAGER",
		136: "RESOURCE_CONTRIBUTOR_ROLE_MAKEUPARTIST",
		137: "RESOURCE_CONTRIBUTOR_ROLE_MANUFACTURER",
		138: "RESOURCE_CONTRIBUTOR_ROLE_MASTERINGENGINEER",
		139: "RESOURCE_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER",
		140: "RESOURCE_CONTRIBUTOR_ROLE_MATTEARTIST",
		141: "RESOURCE_CONTRIBUTOR_ROLE_MIXER",
		142: "RESOURCE_CONTRIBUTOR_ROLE_MIXINGENGINEER",
		143: "RESOURCE_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER",
		144: "RESOURCE_CONTRIBUTOR_ROLE_MUSICARRANGER",
		145: "RESOURCE_CONTRIBUTOR_ROLE_MUSICCOPYIST",
		146: "RESOURCE_CONTRIBUTOR_ROLE_MUSICDIRECTOR",
		147: "RESOURCE_CONTRIBUTOR_ROLE_MUSICGROUP",
		148: "RESOURCE_CONTRIBUTOR_ROLE_MUSICIAN",
		149: "RESOURCE_CONTRIBUTOR_ROLE_NARRATOR",
		150: "RESOURCE_CONTRIBUTOR_ROLE_NEWSPRODUCER",
		151: "RESOURCE_CONTRIBUTOR_ROLE_NEWSREADER",
		152: "RESOURCE_CONTRIBUTOR_ROLE_NOTSPECIFIED",
		153: "RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRA",
		154: "RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER",
		155: "RESOURCE_CONTRIBUTOR_ROLE_ORIGINALARTIST",
		156: "RESOURCE_CONTRIBUTOR_ROLE_OVERDUBENGINEER",
		157: "RESOURCE_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER",
		158: "RESOURCE_CONTRIBUTOR_ROLE_PAINTER",
		159: "RESOURCE_CONTRIBUTOR_ROLE_PERFORMER",
		160: "RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHER",
		161: "RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR",
		162: "RESOURCE_CONTRIBUTOR_ROLE_PLAYBACKSINGER",
		163: "RESOURCE_CONTRIBUTOR_ROLE_POSTPRODUCER",
		164: "RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTION",
		165: "RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER",
		166: "RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER",
		167: "RESOURCE_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN",
		168: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT",
		169: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY",
		170: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR",
		171: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT",
		172: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER",
		173: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY",
		174: "RESOURCE_CONTRIBUTOR_ROLE_PROJECTENGINEER",
		175: "RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMER",
		176: "RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER",
		177: "RESOURCE_CONTRIBUTOR_ROLE_PROGRAMPRODUCER",
		178: "RESOURCE_CONTRIBUTOR_ROLE_PROPERTYMANAGER",
		179: "RESOURCE_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR",
		180: "RESOURCE_CONTRIBUTOR_ROLE_PUPPETEER",
		181: "RESOURCE_CONTRIBUTOR_ROLE_PYROTECHNICIAN",
		182: "RESOURCE_CONTRIBUTOR_ROLE_RECORDINGENGINEER",
		183: "RESOURCE_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER",
		184: "RESOURCE_CONTRIBUTOR_ROLE_REDACTOR",
		185: "RESOURCE_CONTRIBUTOR_ROLE_REISSUEPRODUCER",
		186: "RESOURCE_CONTRIBUTOR_ROLE_REMIXEDARTIST",
		187: "RESOURCE_CONTRIBUTOR_ROLE_REMIXER",
		188: "RESOURCE_CONTRIBUTOR_ROLE_REMIXINGENGINEER",
		189: "RESOURCE_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER",
		190: "RESOURCE_CONTRIBUTOR_ROLE_REPETITEUR",
		191: "RESOURCE_CONTRIBUTOR_ROLE_RESEARCHER",
		192: "RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD",
		193: "RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER",
		194: "RESOURCE_CONTRIBUTOR_ROLE_RESTAGER",
		195: "RESOURCE_CONTRIBUTOR_ROLE_RIGGER",
		196: "RESOURCE_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT",
		197: "RESOURCE_CONTRIBUTOR_ROLE_RUNNER",
		198: "RESOURCE_CONTRIBUTOR_ROLE_SCENICOPERATIVE",
		199: "RESOURCE_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR",
		200: "RESOURCE_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR",
		201: "RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR",
		202: "RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR",
		203: "RESOURCE_CONTRIBUTOR_ROLE_SECONDCONDUCTOR",
		204: "RESOURCE_CONTRIBUTOR_ROLE_SECONDENGINEER",
		205: "RESOURCE_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR",
		206: "RESOURCE_CONTRIBUTOR_ROLE_SERIESPRODUCER",
		207: "RESOURCE_CONTRIBUTOR_ROLE_SETDESIGNER",
		208: "RESOURCE_CONTRIBUTOR_ROLE_SETDRESSER",
		209: "RESOURCE_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER",
		210: "RESOURCE_CONTRIBUTOR_ROLE_SOLOIST",
		211: "RESOURCE_CONTRIBUTOR_ROLE_SOUNDDESIGNER",
		212: "RESOURCE_CONTRIBUTOR_ROLE_SOUNDMIXER",
		213: "RESOURCE_CONTRIBUTOR_ROLE_SOUNDRECORDIST",
		214: "RESOURCE_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR",
		215: "RESOURCE_CONTRIBUTOR_ROLE_SPEAKER",
		216: "RESOURCE_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN",
		217: "RESOURCE_CONTRIBUTOR_ROLE_SPONSOR",
		218: "RESOURCE_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER",
		219: "RESOURCE_CONTRIBUTOR_ROLE_STAGEDIRECTOR",
		220: "RESOURCE_CONTRIBUTOR_ROLE_STAGEENGINEER",
		221: "RESOURCE_CONTRIBUTOR_ROLE_STORYTELLER",
		222: "RESOURCE_CONTRIBUTOR_ROLE_STRINGENGINEER",
		223: "RESOURCE_CONTRIBUTOR_ROLE_STRINGPRODUCER",
		224: "RESOURCE_CONTRIBUTOR_ROLE_STRINGSDIRECTOR",
		225: "RESOURCE_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR",
		226: "RESOURCE_CONTRIBUTOR_ROLE_STUDIOMUSICIAN",
		227: "RESOURCE_CONTRIBUTOR_ROLE_STUDIOPERSONNEL",
		228: "RESOURCE_CONTRIBUTOR_ROLE_STUDIOPRODUCER",
		229: "RESOURCE_CONTRIBUTOR_ROLE_STUNTS",
		230: "RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESEDITOR",
		231: "RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR",
		232: "RESOURCE_CONTRIBUTOR_ROLE_SUPPORTINGACTOR",
		233: "RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER",
		234: "RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER",
		235: "RESOURCE_CONTRIBUTOR_ROLE_TAPEOPERATOR",
		236: "RESOURCE_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR",
		237: "RESOURCE_CONTRIBUTOR_ROLE_TONMEISTER",
		238: "RESOURCE_CONTRIBUTOR_ROLE_TRACKINGENGINEER",
		239: "RESOURCE_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER",
		240: "RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER",
		241: "RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER",
		242: "RESOURCE_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER",
		243: "RESOURCE_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL",
		244: "RESOURCE_CONTRIBUTOR_ROLE_TYPEDESIGNER",
		245: "RESOURCE_CONTRIBUTOR_ROLE_UNKNOWN",
		246: "RESOURCE_CONTRIBUTOR_ROLE_USERDEFINED",
		247: "RESOURCE_CONTRIBUTOR_ROLE_VIDEODIRECTOR",
		248: "RESOURCE_CONTRIBUTOR_ROLE_VIDEOGRAPHER",
		249: "RESOURCE_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR",
		250: "RESOURCE_CONTRIBUTOR_ROLE_VIDEOPRODUCER",
		251: "RESOURCE_CONTRIBUTOR_ROLE_VISIONMIXER",
		252: "RESOURCE_CONTRIBUTOR_ROLE_VISUALEDITOR",
		253: "RESOURCE_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN",
		254: "RESOURCE_CONTRIBUTOR_ROLE_VOCALARRANGER",
		255: "RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER",
		256: "RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER",
		257: "RESOURCE_CONTRIBUTOR_ROLE_VOCALENGINEER",
		258: "RESOURCE_CONTRIBUTOR_ROLE_VOCALIST",
		259: "RESOURCE_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER",
		260: "RESOURCE_CONTRIBUTOR_ROLE_VOCALPRODUCER",
		261: "RESOURCE_CONTRIBUTOR_ROLE_VOICEACTOR",
		262: "RESOURCE_CONTRIBUTOR_ROLE_WARDROBE",
		263: "RESOURCE_CONTRIBUTOR_ROLE_BAND",
		264: "RESOURCE_CONTRIBUTOR_ROLE_CONTRIBUTOR",
		265: "RESOURCE_CONTRIBUTOR_ROLE_FEATUREDARTIST",
		266: "RESOURCE_CONTRIBUTOR_ROLE_MAINARTIST",
		267: "RESOURCE_CONTRIBUTOR_ROLE_MEMBER",
		268: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCER",
		269: "RESOURCE_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER",
		270: "RESOURCE_CONTRIBUTOR_ROLE_PRESENTER",
	}
	ResourceContributorRole_value = map[string]int32{
		"RESOURCE_CONTRIBUTOR_ROLE_UNSPECIFIED":                        0,
		"RESOURCE_CONTRIBUTOR_ROLE_ACCOMPANYIST":                       1,
		"RESOURCE_CONTRIBUTOR_ROLE_ACTOR":                              2,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALENGINEER":                 3,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER":           4,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER":                5,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER":      6,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER":           7,
		"RESOURCE_CONTRIBUTOR_ROLE_ANCHORPERSON":                       8,
		"RESOURCE_CONTRIBUTOR_ROLE_ANIMALTRAINER":                      9,
		"RESOURCE_CONTRIBUTOR_ROLE_ANIMATOR":                           10,
		"RESOURCE_CONTRIBUTOR_ROLE_ANNOTATOR":                          11,
		"RESOURCE_CONTRIBUTOR_ROLE_ANNOUNCER":                          12,
		"RESOURCE_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR":                 13,
		"RESOURCE_CONTRIBUTOR_ROLE_AANDRCOORDINATOR":                   14,
		"RESOURCE_CONTRIBUTOR_ROLE_ARMOURER":                           15,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTCOPYIST":                         16,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTDIRECTOR":                        17,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTIST":                             18,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER":      19,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER":                20,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER":          21,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR":            22,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN":   23,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR":                 24,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR":                  25,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTEDITOR":                    26,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTENGINEER":                  27,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER":                  28,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR":              29,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER":                30,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER":                  31,
		"RESOURCE_CONTRIBUTOR_ROLE_AURALTRAINER":                       32,
		"RESOURCE_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST":                 33,
		"RESOURCE_CONTRIBUTOR_ROLE_BALANCEENGINEER":                    34,
		"RESOURCE_CONTRIBUTOR_ROLE_BANDLEADER":                         35,
		"RESOURCE_CONTRIBUTOR_ROLE_BINDER":                             36,
		"RESOURCE_CONTRIBUTOR_ROLE_BINDINGDESIGNER":                    37,
		"RESOURCE_CONTRIBUTOR_ROLE_BOOKDESIGNER":                       38,
		"RESOURCE_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER":                   39,
		"RESOURCE_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER":                  40,
		"RESOURCE_CONTRIBUTOR_ROLE_BOOKPRODUCER":                       41,
		"RESOURCE_CONTRIBUTOR_ROLE_BROADCASTASSISTANT":                 42,
		"RESOURCE_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST":                43,
		"RESOURCE_CONTRIBUTOR_ROLE_CALLIGRAPHER":                       44,
		"RESOURCE_CONTRIBUTOR_ROLE_CAMERAOPERATOR":                     45,
		"RESOURCE_CONTRIBUTOR_ROLE_CARPENTER":                          46,
		"RESOURCE_CONTRIBUTOR_ROLE_CARTOGRAPHER":                       47,
		"RESOURCE_CONTRIBUTOR_ROLE_CARTOONIST":                         48,
		"RESOURCE_CONTRIBUTOR_ROLE_CASTINGDIRECTOR":                    49,
		"RESOURCE_CONTRIBUTOR_ROLE_CAUSEUR":                            50,
		"RESOURCE_CONTRIBUTOR_ROLE_CENSOR":                             51,
		"RESOURCE_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN":            52,
		"RESOURCE_CONTRIBUTOR_ROLE_CHOIR":                              53,
		"RESOURCE_CONTRIBUTOR_ROLE_CHOIRMEMBER":                        54,
		"RESOURCE_CONTRIBUTOR_ROLE_CHOREOGRAPHER":                      55,
		"RESOURCE_CONTRIBUTOR_ROLE_CHORUSMASTER":                       56,
		"RESOURCE_CONTRIBUTOR_ROLE_CIRCUSARTIST":                       57,
		"RESOURCE_CONTRIBUTOR_ROLE_CLAPPERLOADER":                      58,
		"RESOURCE_CONTRIBUTOR_ROLE_CLUBDJ":                             59,
		"RESOURCE_CONTRIBUTOR_ROLE_CODIRECTOR":                         60,
		"RESOURCE_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER":                61,
		"RESOURCE_CONTRIBUTOR_ROLE_COLORSEPARATOR":                     62,
		"RESOURCE_CONTRIBUTOR_ROLE_COMEDIAN":                           63,
		"RESOURCE_CONTRIBUTOR_ROLE_COMIXER":                            64,
		"RESOURCE_CONTRIBUTOR_ROLE_COMIXINGENGINEER":                   65,
		"RESOURCE_CONTRIBUTOR_ROLE_COMMENTATOR":                        66,
		"RESOURCE_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER":           67,
		"RESOURCE_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER":                68,
		"RESOURCE_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR":             69,
		"RESOURCE_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER":                 70,
		"RESOURCE_CONTRIBUTOR_ROLE_CONCERTMASTER":                      71,
		"RESOURCE_CONTRIBUTOR_ROLE_CONDUCTOR":                          72,
		"RESOURCE_CONTRIBUTOR_ROLE_CONSULTANT":                         73,
		"RESOURCE_CONTRIBUTOR_ROLE_CONTINUITYCHECKER":                  74,
		"RESOURCE_CONTRIBUTOR_ROLE_CONTRACTOR":                         75,
		"RESOURCE_CONTRIBUTOR_ROLE_COPRODUCER":                         76,
		"RESOURCE_CONTRIBUTOR_ROLE_CORRESPONDENT":                      77,
		"RESOURCE_CONTRIBUTOR_ROLE_COSTUMEDESIGNER":                    78,
		"RESOURCE_CONTRIBUTOR_ROLE_COVERDESIGNER":                      79,
		"RESOURCE_CONTRIBUTOR_ROLE_DANCER":                             80,
		"RESOURCE_CONTRIBUTOR_ROLE_DELINEATOR":                         81,
		"RESOURCE_CONTRIBUTOR_ROLE_DESIGNER":                           82,
		"RESOURCE_CONTRIBUTOR_ROLE_DIALOGUECOACH":                      83,
		"RESOURCE_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR":                   84,
		"RESOURCE_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER":    85,
		"RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER":             86,
		"RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER":       87,
		"RESOURCE_CONTRIBUTOR_ROLE_DIRECTOR":                           88,
		"RESOURCE_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER":        89,
		"RESOURCE_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY":                90,
		"RESOURCE_CONTRIBUTOR_ROLE_DJ":                                 91,
		"RESOURCE_CONTRIBUTOR_ROLE_DRAUGHTSMAN":                        92,
		"RESOURCE_CONTRIBUTOR_ROLE_DRESSER":                            93,
		"RESOURCE_CONTRIBUTOR_ROLE_DUBBER":                             94,
		"RESOURCE_CONTRIBUTOR_ROLE_EDITOR":                             95,
		"RESOURCE_CONTRIBUTOR_ROLE_EDITORINCHIEF":                      96,
		"RESOURCE_CONTRIBUTOR_ROLE_EDITOROFTHEDAY":                     97,
		"RESOURCE_CONTRIBUTOR_ROLE_ENCODER":                            98,
		"RESOURCE_CONTRIBUTOR_ROLE_ENGINEER":                           99,
		"RESOURCE_CONTRIBUTOR_ROLE_ENSEMBLE":                           100,
		"RESOURCE_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER":                  101,
		"RESOURCE_CONTRIBUTOR_ROLE_EXPERT":                             102,
		"RESOURCE_CONTRIBUTOR_ROLE_FACSIMILIST":                        103,
		"RESOURCE_CONTRIBUTOR_ROLE_FIGHTDIRECTOR":                      104,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMDIRECTOR":                       105,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR":                    106,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMEDITOR":                         107,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMPRODUCER":                       108,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER":                  109,
		"RESOURCE_CONTRIBUTOR_ROLE_FLOORMANAGER":                       110,
		"RESOURCE_CONTRIBUTOR_ROLE_FOCUSPULLER":                        111,
		"RESOURCE_CONTRIBUTOR_ROLE_FOLEYARTIST":                        112,
		"RESOURCE_CONTRIBUTOR_ROLE_FOLEYEDITOR":                        113,
		"RESOURCE_CONTRIBUTOR_ROLE_FOLEYMIXER":                         114,
		"RESOURCE_CONTRIBUTOR_ROLE_GRAPHICARTIST":                      115,
		"RESOURCE_CONTRIBUTOR_ROLE_GRAPHICASSISTANT":                   116,
		"RESOURCE_CONTRIBUTOR_ROLE_GRAPHICDESIGNER":                    117,
		"RESOURCE_CONTRIBUTOR_ROLE_GREENSMAN":                          118,
		"RESOURCE_CONTRIBUTOR_ROLE_GRIP":                               119,
		"RESOURCE_CONTRIBUTOR_ROLE_GUESTCONDUCTOR":                     120,
		"RESOURCE_CONTRIBUTOR_ROLE_GROUPMEMBER":                        121,
		"RESOURCE_CONTRIBUTOR_ROLE_HAIRDRESSER":                        122,
		"RESOURCE_CONTRIBUTOR_ROLE_ILLUSTRATOR":                        123,
		"RESOURCE_CONTRIBUTOR_ROLE_INITIALPRODUCER":                    124,
		"RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST":                   125,
		"RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWER":                        126,
		"RESOURCE_CONTRIBUTOR_ROLE_KEYCHARACTER":                       127,
		"RESOURCE_CONTRIBUTOR_ROLE_KEYGRIP":                            128,
		"RESOURCE_CONTRIBUTOR_ROLE_KEYTALENT":                          129,
		"RESOURCE_CONTRIBUTOR_ROLE_LEADMAN":                            130,
		"RESOURCE_CONTRIBUTOR_ROLE_LEADPERFORMER":                      131,
		"RESOURCE_CONTRIBUTOR_ROLE_LEADVOCALIST":                       132,
		"RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR":                   133,
		"RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN":                 134,
		"RESOURCE_CONTRIBUTOR_ROLE_LOCATIONMANAGER":                    135,
		"RESOURCE_CONTRIBUTOR_ROLE_MAKEUPARTIST":                       136,
		"RESOURCE_CONTRIBUTOR_ROLE_MANUFACTURER":                       137,
		"RESOURCE_CONTRIBUTOR_ROLE_MASTERINGENGINEER":                  138,
		"RESOURCE_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER":            139,
		"RESOURCE_CONTRIBUTOR_ROLE_MATTEARTIST":                        140,
		"RESOURCE_CONTRIBUTOR_ROLE_MIXER":                              141,
		"RESOURCE_CONTRIBUTOR_ROLE_MIXINGENGINEER":                     142,
		"RESOURCE_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER":               143,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICARRANGER":                      144,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICCOPYIST":                       145,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICDIRECTOR":                      146,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICGROUP":                         147,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICIAN":                           148,
		"RESOURCE_CONTRIBUTOR_ROLE_NARRATOR":                           149,
		"RESOURCE_CONTRIBUTOR_ROLE_NEWSPRODUCER":                       150,
		"RESOURCE_CONTRIBUTOR_ROLE_NEWSREADER":                         151,
		"RESOURCE_CONTRIBUTOR_ROLE_NOTSPECIFIED":                       152,
		"RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRA":                          153,
		"RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER":                    154,
		"RESOURCE_CONTRIBUTOR_ROLE_ORIGINALARTIST":                     155,
		"RESOURCE_CONTRIBUTOR_ROLE_OVERDUBENGINEER":                    156,
		"RESOURCE_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER":              157,
		"RESOURCE_CONTRIBUTOR_ROLE_PAINTER":                            158,
		"RESOURCE_CONTRIBUTOR_ROLE_PERFORMER":                          159,
		"RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHER":                       160,
		"RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR":                161,
		"RESOURCE_CONTRIBUTOR_ROLE_PLAYBACKSINGER":                     162,
		"RESOURCE_CONTRIBUTOR_ROLE_POSTPRODUCER":                       163,
		"RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTION":                      164,
		"RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER":              165,
		"RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER":        166,
		"RESOURCE_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN":                    167,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT":                168,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY":                  169,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR":              170,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT":               171,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER":                  172,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY":                173,
		"RESOURCE_CONTRIBUTOR_ROLE_PROJECTENGINEER":                    174,
		"RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMER":                         175,
		"RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER":                176,
		"RESOURCE_CONTRIBUTOR_ROLE_PROGRAMPRODUCER":                    177,
		"RESOURCE_CONTRIBUTOR_ROLE_PROPERTYMANAGER":                    178,
		"RESOURCE_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR":                 179,
		"RESOURCE_CONTRIBUTOR_ROLE_PUPPETEER":                          180,
		"RESOURCE_CONTRIBUTOR_ROLE_PYROTECHNICIAN":                     181,
		"RESOURCE_CONTRIBUTOR_ROLE_RECORDINGENGINEER":                  182,
		"RESOURCE_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER":            183,
		"RESOURCE_CONTRIBUTOR_ROLE_REDACTOR":                           184,
		"RESOURCE_CONTRIBUTOR_ROLE_REISSUEPRODUCER":                    185,
		"RESOURCE_CONTRIBUTOR_ROLE_REMIXEDARTIST":                      186,
		"RESOURCE_CONTRIBUTOR_ROLE_REMIXER":                            187,
		"RESOURCE_CONTRIBUTOR_ROLE_REMIXINGENGINEER":                   188,
		"RESOURCE_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER":             189,
		"RESOURCE_CONTRIBUTOR_ROLE_REPETITEUR":                         190,
		"RESOURCE_CONTRIBUTOR_ROLE_RESEARCHER":                         191,
		"RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD":                   192,
		"RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER":                 193,
		"RESOURCE_CONTRIBUTOR_ROLE_RESTAGER":                           194,
		"RESOURCE_CONTRIBUTOR_ROLE_RIGGER":                             195,
		"RESOURCE_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT":          196,
		"RESOURCE_CONTRIBUTOR_ROLE_RUNNER":                             197,
		"RESOURCE_CONTRIBUTOR_ROLE_SCENICOPERATIVE":                    198,
		"RESOURCE_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR":                  199,
		"RESOURCE_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR":                   200,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR":      201,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR":            202,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDCONDUCTOR":                    203,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDENGINEER":                     204,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR":                 205,
		"RESOURCE_CONTRIBUTOR_ROLE_SERIESPRODUCER":                     206,
		"RESOURCE_CONTRIBUTOR_ROLE_SETDESIGNER":                        207,
		"RESOURCE_CONTRIBUTOR_ROLE_SETDRESSER":                         208,
		"RESOURCE_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER":            209,
		"RESOURCE_CONTRIBUTOR_ROLE_SOLOIST":                            210,
		"RESOURCE_CONTRIBUTOR_ROLE_SOUNDDESIGNER":                      211,
		"RESOURCE_CONTRIBUTOR_ROLE_SOUNDMIXER":                         212,
		"RESOURCE_CONTRIBUTOR_ROLE_SOUNDRECORDIST":                     213,
		"RESOURCE_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR":                    214,
		"RESOURCE_CONTRIBUTOR_ROLE_SPEAKER":                            215,
		"RESOURCE_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN":           216,
		"RESOURCE_CONTRIBUTOR_ROLE_SPONSOR":                            217,
		"RESOURCE_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER":             218,
		"RESOURCE_CONTRIBUTOR_ROLE_STAGEDIRECTOR":                      219,
		"RESOURCE_CONTRIBUTOR_ROLE_STAGEENGINEER":                      220,
		"RESOURCE_CONTRIBUTOR_ROLE_STORYTELLER":                        221,
		"RESOURCE_CONTRIBUTOR_ROLE_STRINGENGINEER":                     222,
		"RESOURCE_CONTRIBUTOR_ROLE_STRINGPRODUCER":                     223,
		"RESOURCE_CONTRIBUTOR_ROLE_STRINGSDIRECTOR":                    224,
		"RESOURCE_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR":                    225,
		"RESOURCE_CONTRIBUTOR_ROLE_STUDIOMUSICIAN":                     226,
		"RESOURCE_CONTRIBUTOR_ROLE_STUDIOPERSONNEL":                    227,
		"RESOURCE_CONTRIBUTOR_ROLE_STUDIOPRODUCER":                     228,
		"RESOURCE_CONTRIBUTOR_ROLE_STUNTS":                             229,
		"RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESEDITOR":                    230,
		"RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR":                231,
		"RESOURCE_CONTRIBUTOR_ROLE_SUPPORTINGACTOR":                    232,
		"RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER":             233,
		"RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER":       234,
		"RESOURCE_CONTRIBUTOR_ROLE_TAPEOPERATOR":                       235,
		"RESOURCE_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR":                  236,
		"RESOURCE_CONTRIBUTOR_ROLE_TONMEISTER":                         237,
		"RESOURCE_CONTRIBUTOR_ROLE_TRACKINGENGINEER":                   238,
		"RESOURCE_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER":             239,
		"RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER":       240,
		"RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER": 241,
		"RESOURCE_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER":              242,
		"RESOURCE_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL":          243,
		"RESOURCE_CONTRIBUTOR_ROLE_TYPEDESIGNER":                       244,
		"RESOURCE_CONTRIBUTOR_ROLE_UNKNOWN":                            245,
		"RESOURCE_CONTRIBUTOR_ROLE_USERDEFINED":                        246,
		"RESOURCE_CONTRIBUTOR_ROLE_VIDEODIRECTOR":                      247,
		"RESOURCE_CONTRIBUTOR_ROLE_VIDEOGRAPHER":                       248,
		"RESOURCE_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR":               249,
		"RESOURCE_CONTRIBUTOR_ROLE_VIDEOPRODUCER":                      250,
		"RESOURCE_CONTRIBUTOR_ROLE_VISIONMIXER":                        251,
		"RESOURCE_CONTRIBUTOR_ROLE_VISUALEDITOR":                       252,
		"RESOURCE_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN":            253,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALARRANGER":                      254,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER":               255,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER":         256,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALENGINEER":                      257,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALIST":                           258,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER":                259,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALPRODUCER":                      260,
		"RESOURCE_CONTRIBUTOR_ROLE_VOICEACTOR":                         261,
		"RESOURCE_CONTRIBUTOR_ROLE_WARDROBE":                           262,
		"RESOURCE_CONTRIBUTOR_ROLE_BAND":                               263,
		"RESOURCE_CONTRIBUTOR_ROLE_CONTRIBUTOR":                        264,
		"RESOURCE_CONTRIBUTOR_ROLE_FEATUREDARTIST":                     265,
		"RESOURCE_CONTRIBUTOR_ROLE_MAINARTIST":                         266,
		"RESOURCE_CONTRIBUTOR_ROLE_MEMBER":                             267,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCER":                           268,
		"RESOURCE_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER":            269,
		"RESOURCE_CONTRIBUTOR_ROLE_PRESENTER":                          270,
	}
)

func (x ResourceContributorRole) Enum() *ResourceContributorRole {
	p := new(ResourceContributorRole)
	*p = x
	return p
}

func (x ResourceContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[101].Descriptor()
}

func (ResourceContributorRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[101]
}

func (x ResourceContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceContributorRole.Descriptor instead.
func (ResourceContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{101}
}

type ResourceOmissionReason int32

const (
	ResourceOmissionReason_RESOURCE_OMISSION_REASON_UNSPECIFIED            ResourceOmissionReason = 0
	ResourceOmissionReason_RESOURCE_OMISSION_REASON_PASSPORTSERVICERELEASE ResourceOmissionReason = 1
	ResourceOmissionReason_RESOURCE_OMISSION_REASON_PRERELEASE             ResourceOmissionReason = 2
	ResourceOmissionReason_RESOURCE_OMISSION_REASON_USERDEFINED            ResourceOmissionReason = 3
	ResourceOmissionReason_RESOURCE_OMISSION_REASON_VIRTUALRELEASE         ResourceOmissionReason = 4
)

// Enum value maps for ResourceOmissionReason.
var (
	ResourceOmissionReason_name = map[int32]string{
		0: "RESOURCE_OMISSION_REASON_UNSPECIFIED",
		1: "RESOURCE_OMISSION_REASON_PASSPORTSERVICERELEASE",
		2: "RESOURCE_OMISSION_REASON_PRERELEASE",
		3: "RESOURCE_OMISSION_REASON_USERDEFINED",
		4: "RESOURCE_OMISSION_REASON_VIRTUALRELEASE",
	}
	ResourceOmissionReason_value = map[string]int32{
		"RESOURCE_OMISSION_REASON_UNSPECIFIED":            0,
		"RESOURCE_OMISSION_REASON_PASSPORTSERVICERELEASE": 1,
		"RESOURCE_OMISSION_REASON_PRERELEASE":             2,
		"RESOURCE_OMISSION_REASON_USERDEFINED":            3,
		"RESOURCE_OMISSION_REASON_VIRTUALRELEASE":         4,
	}
)

func (x ResourceOmissionReason) Enum() *ResourceOmissionReason {
	p := new(ResourceOmissionReason)
	*p = x
	return p
}

func (x ResourceOmissionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceOmissionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[102].Descriptor()
}

func (ResourceOmissionReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[102]
}

func (x ResourceOmissionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceOmissionReason.Descriptor instead.
func (ResourceOmissionReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{102}
}

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_UNSPECIFIED         ResourceType = 0
	ResourceType_RESOURCE_TYPE_IMAGE               ResourceType = 1
	ResourceType_RESOURCE_TYPE_MIDI                ResourceType = 2
	ResourceType_RESOURCE_TYPE_SHEETMUSIC          ResourceType = 3
	ResourceType_RESOURCE_TYPE_SOFTWARE            ResourceType = 4
	ResourceType_RESOURCE_TYPE_SOUNDRECORDING      ResourceType = 5
	ResourceType_RESOURCE_TYPE_TEXT                ResourceType = 6
	ResourceType_RESOURCE_TYPE_USERDEFINEDRESOURCE ResourceType = 7
	ResourceType_RESOURCE_TYPE_VIDEO               ResourceType = 8
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_IMAGE",
		2: "RESOURCE_TYPE_MIDI",
		3: "RESOURCE_TYPE_SHEETMUSIC",
		4: "RESOURCE_TYPE_SOFTWARE",
		5: "RESOURCE_TYPE_SOUNDRECORDING",
		6: "RESOURCE_TYPE_TEXT",
		7: "RESOURCE_TYPE_USERDEFINEDRESOURCE",
		8: "RESOURCE_TYPE_VIDEO",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED":         0,
		"RESOURCE_TYPE_IMAGE":               1,
		"RESOURCE_TYPE_MIDI":                2,
		"RESOURCE_TYPE_SHEETMUSIC":          3,
		"RESOURCE_TYPE_SOFTWARE":            4,
		"RESOURCE_TYPE_SOUNDRECORDING":      5,
		"RESOURCE_TYPE_TEXT":                6,
		"RESOURCE_TYPE_USERDEFINEDRESOURCE": 7,
		"RESOURCE_TYPE_VIDEO":               8,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[103].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[103]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{103}
}

type RevenueSourceType int32

const (
	RevenueSourceType_REVENUE_SOURCE_TYPE_UNSPECIFIED      RevenueSourceType = 0
	RevenueSourceType_REVENUE_SOURCE_TYPE_FINANCIALREVENUE RevenueSourceType = 1
	RevenueSourceType_REVENUE_SOURCE_TYPE_INDEMNITYREVENUE RevenueSourceType = 2
	RevenueSourceType_REVENUE_SOURCE_TYPE_ROYALTYREVENUE   RevenueSourceType = 3
)

// Enum value maps for RevenueSourceType.
var (
	RevenueSourceType_name = map[int32]string{
		0: "REVENUE_SOURCE_TYPE_UNSPECIFIED",
		1: "REVENUE_SOURCE_TYPE_FINANCIALREVENUE",
		2: "REVENUE_SOURCE_TYPE_INDEMNITYREVENUE",
		3: "REVENUE_SOURCE_TYPE_ROYALTYREVENUE",
	}
	RevenueSourceType_value = map[string]int32{
		"REVENUE_SOURCE_TYPE_UNSPECIFIED":      0,
		"REVENUE_SOURCE_TYPE_FINANCIALREVENUE": 1,
		"REVENUE_SOURCE_TYPE_INDEMNITYREVENUE": 2,
		"REVENUE_SOURCE_TYPE_ROYALTYREVENUE":   3,
	}
)

func (x RevenueSourceType) Enum() *RevenueSourceType {
	p := new(RevenueSourceType)
	*p = x
	return p
}

func (x RevenueSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevenueSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[104].Descriptor()
}

func (RevenueSourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[104]
}

func (x RevenueSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevenueSourceType.Descriptor instead.
func (RevenueSourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{104}
}

type RightShareType int32

const (
	RightShareType_RIGHT_SHARE_TYPE_UNSPECIFIED                RightShareType = 0
	RightShareType_RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE RightShareType = 1
	RightShareType_RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE RightShareType = 2
	RightShareType_RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE     RightShareType = 3
	RightShareType_RIGHT_SHARE_TYPE_LICENSINGSHARE             RightShareType = 4
)

// Enum value maps for RightShareType.
var (
	RightShareType_name = map[int32]string{
		0: "RIGHT_SHARE_TYPE_UNSPECIFIED",
		1: "RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE",
		2: "RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE",
		3: "RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE",
		4: "RIGHT_SHARE_TYPE_LICENSINGSHARE",
	}
	RightShareType_value = map[string]int32{
		"RIGHT_SHARE_TYPE_UNSPECIFIED":                0,
		"RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE": 1,
		"RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE": 2,
		"RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE":     3,
		"RIGHT_SHARE_TYPE_LICENSINGSHARE":             4,
	}
)

func (x RightShareType) Enum() *RightShareType {
	p := new(RightShareType)
	*p = x
	return p
}

func (x RightShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[105].Descriptor()
}

func (RightShareType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[105]
}

func (x RightShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightShareType.Descriptor instead.
func (RightShareType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{105}
}

type RightsClaimPolicyType int32

const (
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED RightsClaimPolicyType = 0
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE RightsClaimPolicyType = 1
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS RightsClaimPolicyType = 2
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_MONETIZE    RightsClaimPolicyType = 3
)

// Enum value maps for RightsClaimPolicyType.
var (
	RightsClaimPolicyType_name = map[int32]string{
		0: "RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED",
		1: "RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE",
		2: "RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS",
		3: "RIGHTS_CLAIM_POLICY_TYPE_MONETIZE",
	}
	RightsClaimPolicyType_value = map[string]int32{
		"RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED": 0,
		"RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE": 1,
		"RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS": 2,
		"RIGHTS_CLAIM_POLICY_TYPE_MONETIZE":    3,
	}
)

func (x RightsClaimPolicyType) Enum() *RightsClaimPolicyType {
	p := new(RightsClaimPolicyType)
	*p = x
	return p
}

func (x RightsClaimPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsClaimPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[106].Descriptor()
}

func (RightsClaimPolicyType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[106]
}

func (x RightsClaimPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsClaimPolicyType.Descriptor instead.
func (RightsClaimPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{106}
}

type RightsControllerRole int32

const (
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_UNSPECIFIED                 RightsControllerRole = 0
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY RightsControllerRole = 1
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR         RightsControllerRole = 2
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER            RightsControllerRole = 3
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR        RightsControllerRole = 4
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_UNKNOWN                     RightsControllerRole = 5
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_LOCALPAYEE                  RightsControllerRole = 6
)

// Enum value maps for RightsControllerRole.
var (
	RightsControllerRole_name = map[int32]string{
		0: "RIGHTS_CONTROLLER_ROLE_UNSPECIFIED",
		1: "RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY",
		2: "RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR",
		3: "RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER",
		4: "RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR",
		5: "RIGHTS_CONTROLLER_ROLE_UNKNOWN",
		6: "RIGHTS_CONTROLLER_ROLE_LOCALPAYEE",
	}
	RightsControllerRole_value = map[string]int32{
		"RIGHTS_CONTROLLER_ROLE_UNSPECIFIED":                 0,
		"RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY": 1,
		"RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR":         2,
		"RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER":            3,
		"RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR":        4,
		"RIGHTS_CONTROLLER_ROLE_UNKNOWN":                     5,
		"RIGHTS_CONTROLLER_ROLE_LOCALPAYEE":                  6,
	}
)

func (x RightsControllerRole) Enum() *RightsControllerRole {
	p := new(RightsControllerRole)
	*p = x
	return p
}

func (x RightsControllerRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsControllerRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[107].Descriptor()
}

func (RightsControllerRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[107]
}

func (x RightsControllerRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsControllerRole.Descriptor instead.
func (RightsControllerRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{107}
}

type RightsControllerType int32

const (
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_UNSPECIFIED       RightsControllerType = 0
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER     RightsControllerType = 1
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE  RightsControllerType = 2
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE RightsControllerType = 3
)

// Enum value maps for RightsControllerType.
var (
	RightsControllerType_name = map[int32]string{
		0: "RIGHTS_CONTROLLER_TYPE_UNSPECIFIED",
		1: "RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER",
		2: "RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE",
		3: "RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE",
	}
	RightsControllerType_value = map[string]int32{
		"RIGHTS_CONTROLLER_TYPE_UNSPECIFIED":       0,
		"RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER":     1,
		"RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE":  2,
		"RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE": 3,
	}
)

func (x RightsControllerType) Enum() *RightsControllerType {
	p := new(RightsControllerType)
	*p = x
	return p
}

func (x RightsControllerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsControllerType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[108].Descriptor()
}

func (RightsControllerType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[108]
}

func (x RightsControllerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsControllerType.Descriptor instead.
func (RightsControllerType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{108}
}

type RightsCoverage int32

const (
	RightsCoverage_RIGHTS_COVERAGE_UNSPECIFIED          RightsCoverage = 0
	RightsCoverage_RIGHTS_COVERAGE_MAKEAVAILABLERIGHT   RightsCoverage = 1
	RightsCoverage_RIGHTS_COVERAGE_MECHANICALRIGHT      RightsCoverage = 2
	RightsCoverage_RIGHTS_COVERAGE_PERFORMINGRIGHT      RightsCoverage = 3
	RightsCoverage_RIGHTS_COVERAGE_PRINTRIGHT           RightsCoverage = 4
	RightsCoverage_RIGHTS_COVERAGE_REPRODUCTIONRIGHT    RightsCoverage = 5
	RightsCoverage_RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT RightsCoverage = 6
	RightsCoverage_RIGHTS_COVERAGE_USERDEFINED          RightsCoverage = 7
)

// Enum value maps for RightsCoverage.
var (
	RightsCoverage_name = map[int32]string{
		0: "RIGHTS_COVERAGE_UNSPECIFIED",
		1: "RIGHTS_COVERAGE_MAKEAVAILABLERIGHT",
		2: "RIGHTS_COVERAGE_MECHANICALRIGHT",
		3: "RIGHTS_COVERAGE_PERFORMINGRIGHT",
		4: "RIGHTS_COVERAGE_PRINTRIGHT",
		5: "RIGHTS_COVERAGE_REPRODUCTIONRIGHT",
		6: "RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT",
		7: "RIGHTS_COVERAGE_USERDEFINED",
	}
	RightsCoverage_value = map[string]int32{
		"RIGHTS_COVERAGE_UNSPECIFIED":          0,
		"RIGHTS_COVERAGE_MAKEAVAILABLERIGHT":   1,
		"RIGHTS_COVERAGE_MECHANICALRIGHT":      2,
		"RIGHTS_COVERAGE_PERFORMINGRIGHT":      3,
		"RIGHTS_COVERAGE_PRINTRIGHT":           4,
		"RIGHTS_COVERAGE_REPRODUCTIONRIGHT":    5,
		"RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT": 6,
		"RIGHTS_COVERAGE_USERDEFINED":          7,
	}
)

func (x RightsCoverage) Enum() *RightsCoverage {
	p := new(RightsCoverage)
	*p = x
	return p
}

func (x RightsCoverage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsCoverage) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[109].Descriptor()
}

func (RightsCoverage) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[109]
}

func (x RightsCoverage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsCoverage.Descriptor instead.
func (RightsCoverage) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{109}
}

type RoyaltyRateCalculationType int32

const (
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED                      RoyaltyRateCalculationType = 0
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_BUDGETROYALTYRATE                RoyaltyRateCalculationType = 1
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE RoyaltyRateCalculationType = 2
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDSHAREROYALTYRATE       RoyaltyRateCalculationType = 3
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE      RoyaltyRateCalculationType = 4
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE            RoyaltyRateCalculationType = 5
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_REDUCEDROYALTYRATE               RoyaltyRateCalculationType = 6
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE      RoyaltyRateCalculationType = 7
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE             RoyaltyRateCalculationType = 8
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_PPD                              RoyaltyRateCalculationType = 9
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE                      RoyaltyRateCalculationType = 10
)

// Enum value maps for RoyaltyRateCalculationType.
var (
	RoyaltyRateCalculationType_name = map[int32]string{
		0:  "ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED",
		1:  "ROYALTY_RATE_CALCULATION_TYPE_BUDGETROYALTYRATE",
		2:  "ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE",
		3:  "ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDSHAREROYALTYRATE",
		4:  "ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE",
		5:  "ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE",
		6:  "ROYALTY_RATE_CALCULATION_TYPE_REDUCEDROYALTYRATE",
		7:  "ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE",
		8:  "ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE",
		9:  "ROYALTY_RATE_CALCULATION_TYPE_PPD",
		10: "ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE",
	}
	RoyaltyRateCalculationType_value = map[string]int32{
		"ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED":                      0,
		"ROYALTY_RATE_CALCULATION_TYPE_BUDGETROYALTYRATE":                1,
		"ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE": 2,
		"ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDSHAREROYALTYRATE":       3,
		"ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE":      4,
		"ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE":            5,
		"ROYALTY_RATE_CALCULATION_TYPE_REDUCEDROYALTYRATE":               6,
		"ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE":      7,
		"ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE":             8,
		"ROYALTY_RATE_CALCULATION_TYPE_PPD":                              9,
		"ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE":                      10,
	}
)

func (x RoyaltyRateCalculationType) Enum() *RoyaltyRateCalculationType {
	p := new(RoyaltyRateCalculationType)
	*p = x
	return p
}

func (x RoyaltyRateCalculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoyaltyRateCalculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[110].Descriptor()
}

func (RoyaltyRateCalculationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[110]
}

func (x RoyaltyRateCalculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoyaltyRateCalculationType.Descriptor instead.
func (RoyaltyRateCalculationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{110}
}

type RoyaltyRateType int32

const (
	RoyaltyRateType_ROYALTY_RATE_TYPE_UNSPECIFIED           RoyaltyRateType = 0
	RoyaltyRateType_ROYALTY_RATE_TYPE_PENNYRATE             RoyaltyRateType = 1
	RoyaltyRateType_ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE RoyaltyRateType = 2
	RoyaltyRateType_ROYALTY_RATE_TYPE_USERDEFINED           RoyaltyRateType = 3
)

// Enum value maps for RoyaltyRateType.
var (
	RoyaltyRateType_name = map[int32]string{
		0: "ROYALTY_RATE_TYPE_UNSPECIFIED",
		1: "ROYALTY_RATE_TYPE_PENNYRATE",
		2: "ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE",
		3: "ROYALTY_RATE_TYPE_USERDEFINED",
	}
	RoyaltyRateType_value = map[string]int32{
		"ROYALTY_RATE_TYPE_UNSPECIFIED":           0,
		"ROYALTY_RATE_TYPE_PENNYRATE":             1,
		"ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE": 2,
		"ROYALTY_RATE_TYPE_USERDEFINED":           3,
	}
)

func (x RoyaltyRateType) Enum() *RoyaltyRateType {
	p := new(RoyaltyRateType)
	*p = x
	return p
}

func (x RoyaltyRateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoyaltyRateType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[111].Descriptor()
}

func (RoyaltyRateType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[111]
}

func (x RoyaltyRateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoyaltyRateType.Descriptor instead.
func (RoyaltyRateType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{111}
}

type SalesReportAvailabilityStatus int32

const (
	SalesReportAvailabilityStatus_SALES_REPORT_AVAILABILITY_STATUS_UNSPECIFIED             SalesReportAvailabilityStatus = 0
	SalesReportAvailabilityStatus_SALES_REPORT_AVAILABILITY_STATUS_SALESREPORTAVAILABLE    SalesReportAvailabilityStatus = 1
	SalesReportAvailabilityStatus_SALES_REPORT_AVAILABILITY_STATUS_SALESREPORTNOTAVAILABLE SalesReportAvailabilityStatus = 2
)

// Enum value maps for SalesReportAvailabilityStatus.
var (
	SalesReportAvailabilityStatus_name = map[int32]string{
		0: "SALES_REPORT_AVAILABILITY_STATUS_UNSPECIFIED",
		1: "SALES_REPORT_AVAILABILITY_STATUS_SALESREPORTAVAILABLE",
		2: "SALES_REPORT_AVAILABILITY_STATUS_SALESREPORTNOTAVAILABLE",
	}
	SalesReportAvailabilityStatus_value = map[string]int32{
		"SALES_REPORT_AVAILABILITY_STATUS_UNSPECIFIED":             0,
		"SALES_REPORT_AVAILABILITY_STATUS_SALESREPORTAVAILABLE":    1,
		"SALES_REPORT_AVAILABILITY_STATUS_SALESREPORTNOTAVAILABLE": 2,
	}
)

func (x SalesReportAvailabilityStatus) Enum() *SalesReportAvailabilityStatus {
	p := new(SalesReportAvailabilityStatus)
	*p = x
	return p
}

func (x SalesReportAvailabilityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SalesReportAvailabilityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[112].Descriptor()
}

func (SalesReportAvailabilityStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[112]
}

func (x SalesReportAvailabilityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SalesReportAvailabilityStatus.Descriptor instead.
func (SalesReportAvailabilityStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{112}
}

type Sex int32

const (
	Sex_SEX_UNSPECIFIED Sex = 0
	Sex_SEX_FEMALE      Sex = 1
	Sex_SEX_MALE        Sex = 2
	Sex_SEX_UNKNOWN     Sex = 3
)

// Enum value maps for Sex.
var (
	Sex_name = map[int32]string{
		0: "SEX_UNSPECIFIED",
		1: "SEX_FEMALE",
		2: "SEX_MALE",
		3: "SEX_UNKNOWN",
	}
	Sex_value = map[string]int32{
		"SEX_UNSPECIFIED": 0,
		"SEX_FEMALE":      1,
		"SEX_MALE":        2,
		"SEX_UNKNOWN":     3,
	}
)

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}

func (x Sex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sex) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[113].Descriptor()
}

func (Sex) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[113]
}

func (x Sex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sex.Descriptor instead.
func (Sex) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{113}
}

type SoftwareType int32

const (
	SoftwareType_SOFTWARE_TYPE_UNSPECIFIED             SoftwareType = 0
	SoftwareType_SOFTWARE_TYPE_INTERACTIVEBOOKLET      SoftwareType = 1
	SoftwareType_SOFTWARE_TYPE_MUSICALWORKBASEDGAME    SoftwareType = 2
	SoftwareType_SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME SoftwareType = 3
	SoftwareType_SOFTWARE_TYPE_SCREENSAVER             SoftwareType = 4
	SoftwareType_SOFTWARE_TYPE_UNKNOWN                 SoftwareType = 5
	SoftwareType_SOFTWARE_TYPE_USERDEFINED             SoftwareType = 6
)

// Enum value maps for SoftwareType.
var (
	SoftwareType_name = map[int32]string{
		0: "SOFTWARE_TYPE_UNSPECIFIED",
		1: "SOFTWARE_TYPE_INTERACTIVEBOOKLET",
		2: "SOFTWARE_TYPE_MUSICALWORKBASEDGAME",
		3: "SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME",
		4: "SOFTWARE_TYPE_SCREENSAVER",
		5: "SOFTWARE_TYPE_UNKNOWN",
		6: "SOFTWARE_TYPE_USERDEFINED",
	}
	SoftwareType_value = map[string]int32{
		"SOFTWARE_TYPE_UNSPECIFIED":             0,
		"SOFTWARE_TYPE_INTERACTIVEBOOKLET":      1,
		"SOFTWARE_TYPE_MUSICALWORKBASEDGAME":    2,
		"SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME": 3,
		"SOFTWARE_TYPE_SCREENSAVER":             4,
		"SOFTWARE_TYPE_UNKNOWN":                 5,
		"SOFTWARE_TYPE_USERDEFINED":             6,
	}
)

func (x SoftwareType) Enum() *SoftwareType {
	p := new(SoftwareType)
	*p = x
	return p
}

func (x SoftwareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[114].Descriptor()
}

func (SoftwareType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[114]
}

func (x SoftwareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoftwareType.Descriptor instead.
func (SoftwareType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{114}
}

type SoundProcessorType int32

const (
	SoundProcessorType_SOUND_PROCESSOR_TYPE_UNSPECIFIED   SoundProcessorType = 0
	SoundProcessorType_SOUND_PROCESSOR_TYPE_MIDIPROCESSOR SoundProcessorType = 1
	SoundProcessorType_SOUND_PROCESSOR_TYPE_SMAF_MA2      SoundProcessorType = 2
	SoundProcessorType_SOUND_PROCESSOR_TYPE_SMAF_MA3      SoundProcessorType = 3
	SoundProcessorType_SOUND_PROCESSOR_TYPE_UNKNOWN       SoundProcessorType = 4
	SoundProcessorType_SOUND_PROCESSOR_TYPE_USERDEFINED   SoundProcessorType = 5
)

// Enum value maps for SoundProcessorType.
var (
	SoundProcessorType_name = map[int32]string{
		0: "SOUND_PROCESSOR_TYPE_UNSPECIFIED",
		1: "SOUND_PROCESSOR_TYPE_MIDIPROCESSOR",
		2: "SOUND_PROCESSOR_TYPE_SMAF_MA2",
		3: "SOUND_PROCESSOR_TYPE_SMAF_MA3",
		4: "SOUND_PROCESSOR_TYPE_UNKNOWN",
		5: "SOUND_PROCESSOR_TYPE_USERDEFINED",
	}
	SoundProcessorType_value = map[string]int32{
		"SOUND_PROCESSOR_TYPE_UNSPECIFIED":   0,
		"SOUND_PROCESSOR_TYPE_MIDIPROCESSOR": 1,
		"SOUND_PROCESSOR_TYPE_SMAF_MA2":      2,
		"SOUND_PROCESSOR_TYPE_SMAF_MA3":      3,
		"SOUND_PROCESSOR_TYPE_UNKNOWN":       4,
		"SOUND_PROCESSOR_TYPE_USERDEFINED":   5,
	}
)

func (x SoundProcessorType) Enum() *SoundProcessorType {
	p := new(SoundProcessorType)
	*p = x
	return p
}

func (x SoundProcessorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoundProcessorType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[115].Descriptor()
}

func (SoundProcessorType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[115]
}

func (x SoundProcessorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoundProcessorType.Descriptor instead.
func (SoundProcessorType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{115}
}

type SoundRecordingType int32

const (
	SoundRecordingType_SOUND_RECORDING_TYPE_UNSPECIFIED                           SoundRecordingType = 0
	SoundRecordingType_SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING    SoundRecordingType = 1
	SoundRecordingType_SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING             SoundRecordingType = 2
	SoundRecordingType_SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING SoundRecordingType = 3
	SoundRecordingType_SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING          SoundRecordingType = 4
	SoundRecordingType_SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING              SoundRecordingType = 5
	SoundRecordingType_SOUND_RECORDING_TYPE_UNKNOWN                               SoundRecordingType = 6
	SoundRecordingType_SOUND_RECORDING_TYPE_USERDEFINED                           SoundRecordingType = 7
	SoundRecordingType_SOUND_RECORDING_TYPE_AUDIOSTEM                             SoundRecordingType = 8
)

// Enum value maps for SoundRecordingType.
var (
	SoundRecordingType_name = map[int32]string{
		0: "SOUND_RECORDING_TYPE_UNSPECIFIED",
		1: "SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING",
		2: "SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING",
		3: "SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING",
		4: "SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING",
		5: "SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING",
		6: "SOUND_RECORDING_TYPE_UNKNOWN",
		7: "SOUND_RECORDING_TYPE_USERDEFINED",
		8: "SOUND_RECORDING_TYPE_AUDIOSTEM",
	}
	SoundRecordingType_value = map[string]int32{
		"SOUND_RECORDING_TYPE_UNSPECIFIED":                           0,
		"SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING":    1,
		"SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING":             2,
		"SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING": 3,
		"SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING":          4,
		"SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING":              5,
		"SOUND_RECORDING_TYPE_UNKNOWN":                               6,
		"SOUND_RECORDING_TYPE_USERDEFINED":                           7,
		"SOUND_RECORDING_TYPE_AUDIOSTEM":                             8,
	}
)

func (x SoundRecordingType) Enum() *SoundRecordingType {
	p := new(SoundRecordingType)
	*p = x
	return p
}

func (x SoundRecordingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoundRecordingType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[116].Descriptor()
}

func (SoundRecordingType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[116]
}

func (x SoundRecordingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoundRecordingType.Descriptor instead.
func (SoundRecordingType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{116}
}

type SupplyChainStatus int32

const (
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_UNSPECIFIED                                  SupplyChainStatus = 0
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR                SupplyChainStatus = 1
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR               SupplyChainStatus = 2
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR SupplyChainStatus = 3
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR             SupplyChainStatus = 4
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR              SupplyChainStatus = 5
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR          SupplyChainStatus = 6
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS              SupplyChainStatus = 7
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE                          SupplyChainStatus = 8
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR          SupplyChainStatus = 9
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION                  SupplyChainStatus = 10
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR     SupplyChainStatus = 11
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_USERDEFINED                                  SupplyChainStatus = 12
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE                SupplyChainStatus = 13
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT                               SupplyChainStatus = 14
)

// Enum value maps for SupplyChainStatus.
var (
	SupplyChainStatus_name = map[int32]string{
		0:  "SUPPLY_CHAIN_STATUS_UNSPECIFIED",
		1:  "SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR",
		2:  "SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR",
		3:  "SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR",
		4:  "SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR",
		5:  "SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR",
		6:  "SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR",
		7:  "SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS",
		8:  "SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE",
		9:  "SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR",
		10: "SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION",
		11: "SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR",
		12: "SUPPLY_CHAIN_STATUS_USERDEFINED",
		13: "SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE",
		14: "SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT",
	}
	SupplyChainStatus_value = map[string]int32{
		"SUPPLY_CHAIN_STATUS_UNSPECIFIED":                                  0,
		"SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR":                1,
		"SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR":               2,
		"SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR": 3,
		"SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR":             4,
		"SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR":              5,
		"SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR":          6,
		"SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS":              7,
		"SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE":                          8,
		"SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR":          9,
		"SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION":                  10,
		"SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR":     11,
		"SUPPLY_CHAIN_STATUS_USERDEFINED":                                  12,
		"SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE":                13,
		"SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT":                               14,
	}
)

func (x SupplyChainStatus) Enum() *SupplyChainStatus {
	p := new(SupplyChainStatus)
	*p = x
	return p
}

func (x SupplyChainStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyChainStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[117].Descriptor()
}

func (SupplyChainStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[117]
}

func (x SupplyChainStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyChainStatus.Descriptor instead.
func (SupplyChainStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{117}
}

type TaxScope int32

const (
	TaxScope_TAX_SCOPE_UNSPECIFIED   TaxScope = 0
	TaxScope_TAX_SCOPE_COMBINEDTAX   TaxScope = 1
	TaxScope_TAX_SCOPE_FEDERALTAX    TaxScope = 2
	TaxScope_TAX_SCOPE_LOCALTAX      TaxScope = 3
	TaxScope_TAX_SCOPE_PROVINCIALTAX TaxScope = 4
	TaxScope_TAX_SCOPE_STATETAX      TaxScope = 5
	TaxScope_TAX_SCOPE_USERDEFINED   TaxScope = 6
)

// Enum value maps for TaxScope.
var (
	TaxScope_name = map[int32]string{
		0: "TAX_SCOPE_UNSPECIFIED",
		1: "TAX_SCOPE_COMBINEDTAX",
		2: "TAX_SCOPE_FEDERALTAX",
		3: "TAX_SCOPE_LOCALTAX",
		4: "TAX_SCOPE_PROVINCIALTAX",
		5: "TAX_SCOPE_STATETAX",
		6: "TAX_SCOPE_USERDEFINED",
	}
	TaxScope_value = map[string]int32{
		"TAX_SCOPE_UNSPECIFIED":   0,
		"TAX_SCOPE_COMBINEDTAX":   1,
		"TAX_SCOPE_FEDERALTAX":    2,
		"TAX_SCOPE_LOCALTAX":      3,
		"TAX_SCOPE_PROVINCIALTAX": 4,
		"TAX_SCOPE_STATETAX":      5,
		"TAX_SCOPE_USERDEFINED":   6,
	}
)

func (x TaxScope) Enum() *TaxScope {
	p := new(TaxScope)
	*p = x
	return p
}

func (x TaxScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaxScope) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[118].Descriptor()
}

func (TaxScope) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[118]
}

func (x TaxScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaxScope.Descriptor instead.
func (TaxScope) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{118}
}

type TaxType int32

const (
	TaxType_TAX_TYPE_UNSPECIFIED TaxType = 0
	TaxType_TAX_TYPE_COMBINEDTAX TaxType = 1
	TaxType_TAX_TYPE_SALESTAX    TaxType = 2
	TaxType_TAX_TYPE_SERVICETAX  TaxType = 3
	TaxType_TAX_TYPE_SOURCETAX   TaxType = 4
	TaxType_TAX_TYPE_USERDEFINED TaxType = 5
)

// Enum value maps for TaxType.
var (
	TaxType_name = map[int32]string{
		0: "TAX_TYPE_UNSPECIFIED",
		1: "TAX_TYPE_COMBINEDTAX",
		2: "TAX_TYPE_SALESTAX",
		3: "TAX_TYPE_SERVICETAX",
		4: "TAX_TYPE_SOURCETAX",
		5: "TAX_TYPE_USERDEFINED",
	}
	TaxType_value = map[string]int32{
		"TAX_TYPE_UNSPECIFIED": 0,
		"TAX_TYPE_COMBINEDTAX": 1,
		"TAX_TYPE_SALESTAX":    2,
		"TAX_TYPE_SERVICETAX":  3,
		"TAX_TYPE_SOURCETAX":   4,
		"TAX_TYPE_USERDEFINED": 5,
	}
)

func (x TaxType) Enum() *TaxType {
	p := new(TaxType)
	*p = x
	return p
}

func (x TaxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaxType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[119].Descriptor()
}

func (TaxType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[119]
}

func (x TaxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaxType.Descriptor instead.
func (TaxType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{119}
}

type TerritoryCodeType int32

const (
	TerritoryCodeType_TERRITORY_CODE_TYPE_UNSPECIFIED TerritoryCodeType = 0
	TerritoryCodeType_TERRITORY_CODE_TYPE_ISO         TerritoryCodeType = 1
	TerritoryCodeType_TERRITORY_CODE_TYPE_TIS         TerritoryCodeType = 2
)

// Enum value maps for TerritoryCodeType.
var (
	TerritoryCodeType_name = map[int32]string{
		0: "TERRITORY_CODE_TYPE_UNSPECIFIED",
		1: "TERRITORY_CODE_TYPE_ISO",
		2: "TERRITORY_CODE_TYPE_TIS",
	}
	TerritoryCodeType_value = map[string]int32{
		"TERRITORY_CODE_TYPE_UNSPECIFIED": 0,
		"TERRITORY_CODE_TYPE_ISO":         1,
		"TERRITORY_CODE_TYPE_TIS":         2,
	}
)

func (x TerritoryCodeType) Enum() *TerritoryCodeType {
	p := new(TerritoryCodeType)
	*p = x
	return p
}

func (x TerritoryCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerritoryCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[120].Descriptor()
}

func (TerritoryCodeType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[120]
}

func (x TerritoryCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerritoryCodeType.Descriptor instead.
func (TerritoryCodeType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{120}
}

type TerritoryCodeTypeIncludingDeprecatedCodes int32

const (
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED   TerritoryCodeTypeIncludingDeprecatedCodes = 0
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO TerritoryCodeTypeIncludingDeprecatedCodes = 1
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO           TerritoryCodeTypeIncludingDeprecatedCodes = 2
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS           TerritoryCodeTypeIncludingDeprecatedCodes = 3
)

// Enum value maps for TerritoryCodeTypeIncludingDeprecatedCodes.
var (
	TerritoryCodeTypeIncludingDeprecatedCodes_name = map[int32]string{
		0: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED",
		1: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO",
		2: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO",
		3: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS",
	}
	TerritoryCodeTypeIncludingDeprecatedCodes_value = map[string]int32{
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED":   0,
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO": 1,
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO":           2,
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS":           3,
	}
)

func (x TerritoryCodeTypeIncludingDeprecatedCodes) Enum() *TerritoryCodeTypeIncludingDeprecatedCodes {
	p := new(TerritoryCodeTypeIncludingDeprecatedCodes)
	*p = x
	return p
}

func (x TerritoryCodeTypeIncludingDeprecatedCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerritoryCodeTypeIncludingDeprecatedCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[121].Descriptor()
}

func (TerritoryCodeTypeIncludingDeprecatedCodes) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[121]
}

func (x TerritoryCodeTypeIncludingDeprecatedCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerritoryCodeTypeIncludingDeprecatedCodes.Descriptor instead.
func (TerritoryCodeTypeIncludingDeprecatedCodes) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{121}
}

type TextCodecType int32

const (
	TextCodecType_TEXT_CODEC_TYPE_UNSPECIFIED         TextCodecType = 0
	TextCodecType_TEXT_CODEC_TYPE_ASCII               TextCodecType = 1
	TextCodecType_TEXT_CODEC_TYPE_EBU_TT              TextCodecType = 2
	TextCodecType_TEXT_CODEC_TYPE_HTML                TextCodecType = 3
	TextCodecType_TEXT_CODEC_TYPE_OOXML               TextCodecType = 4
	TextCodecType_TEXT_CODEC_TYPE_PDF                 TextCodecType = 5
	TextCodecType_TEXT_CODEC_TYPE_POSTSCRIPT          TextCodecType = 6
	TextCodecType_TEXT_CODEC_TYPE_RTF                 TextCodecType = 7
	TextCodecType_TEXT_CODEC_TYPE_SRT                 TextCodecType = 8
	TextCodecType_TEXT_CODEC_TYPE_TTML                TextCodecType = 9
	TextCodecType_TEXT_CODEC_TYPE_UNKNOWN             TextCodecType = 10
	TextCodecType_TEXT_CODEC_TYPE_USERDEFINED         TextCodecType = 11
	TextCodecType_TEXT_CODEC_TYPE_VTT                 TextCodecType = 12
	TextCodecType_TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT TextCodecType = 13
	TextCodecType_TEXT_CODEC_TYPE_ENHANCEDLRC         TextCodecType = 14
	TextCodecType_TEXT_CODEC_TYPE_EPUB                TextCodecType = 15
	TextCodecType_TEXT_CODEC_TYPE_LRC                 TextCodecType = 16
	TextCodecType_TEXT_CODEC_TYPE_MICROSOFTWORD       TextCodecType = 17
	TextCodecType_TEXT_CODEC_TYPE_OPENDOCUMENTTEXT    TextCodecType = 18
	TextCodecType_TEXT_CODEC_TYPE_SIMPLELRC           TextCodecType = 19
	TextCodecType_TEXT_CODEC_TYPE_UTF8TEXT            TextCodecType = 20
	TextCodecType_TEXT_CODEC_TYPE_WINDOWSTEXT         TextCodecType = 21
	TextCodecType_TEXT_CODEC_TYPE_XHTML               TextCodecType = 22
	TextCodecType_TEXT_CODEC_TYPE_XML                 TextCodecType = 23
)

// Enum value maps for TextCodecType.
var (
	TextCodecType_name = map[int32]string{
		0:  "TEXT_CODEC_TYPE_UNSPECIFIED",
		1:  "TEXT_CODEC_TYPE_ASCII",
		2:  "TEXT_CODEC_TYPE_EBU_TT",
		3:  "TEXT_CODEC_TYPE_HTML",
		4:  "TEXT_CODEC_TYPE_OOXML",
		5:  "TEXT_CODEC_TYPE_PDF",
		6:  "TEXT_CODEC_TYPE_POSTSCRIPT",
		7:  "TEXT_CODEC_TYPE_RTF",
		8:  "TEXT_CODEC_TYPE_SRT",
		9:  "TEXT_CODEC_TYPE_TTML",
		10: "TEXT_CODEC_TYPE_UNKNOWN",
		11: "TEXT_CODEC_TYPE_USERDEFINED",
		12: "TEXT_CODEC_TYPE_VTT",
		13: "TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT",
		14: "TEXT_CODEC_TYPE_ENHANCEDLRC",
		15: "TEXT_CODEC_TYPE_EPUB",
		16: "TEXT_CODEC_TYPE_LRC",
		17: "TEXT_CODEC_TYPE_MICROSOFTWORD",
		18: "TEXT_CODEC_TYPE_OPENDOCUMENTTEXT",
		19: "TEXT_CODEC_TYPE_SIMPLELRC",
		20: "TEXT_CODEC_TYPE_UTF8TEXT",
		21: "TEXT_CODEC_TYPE_WINDOWSTEXT",
		22: "TEXT_CODEC_TYPE_XHTML",
		23: "TEXT_CODEC_TYPE_XML",
	}
	TextCodecType_value = map[string]int32{
		"TEXT_CODEC_TYPE_UNSPECIFIED":         0,
		"TEXT_CODEC_TYPE_ASCII":               1,
		"TEXT_CODEC_TYPE_EBU_TT":              2,
		"TEXT_CODEC_TYPE_HTML":                3,
		"TEXT_CODEC_TYPE_OOXML":               4,
		"TEXT_CODEC_TYPE_PDF":                 5,
		"TEXT_CODEC_TYPE_POSTSCRIPT":          6,
		"TEXT_CODEC_TYPE_RTF":                 7,
		"TEXT_CODEC_TYPE_SRT":                 8,
		"TEXT_CODEC_TYPE_TTML":                9,
		"TEXT_CODEC_TYPE_UNKNOWN":             10,
		"TEXT_CODEC_TYPE_USERDEFINED":         11,
		"TEXT_CODEC_TYPE_VTT":                 12,
		"TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT": 13,
		"TEXT_CODEC_TYPE_ENHANCEDLRC":         14,
		"TEXT_CODEC_TYPE_EPUB":                15,
		"TEXT_CODEC_TYPE_LRC":                 16,
		"TEXT_CODEC_TYPE_MICROSOFTWORD":       17,
		"TEXT_CODEC_TYPE_OPENDOCUMENTTEXT":    18,
		"TEXT_CODEC_TYPE_SIMPLELRC":           19,
		"TEXT_CODEC_TYPE_UTF8TEXT":            20,
		"TEXT_CODEC_TYPE_WINDOWSTEXT":         21,
		"TEXT_CODEC_TYPE_XHTML":               22,
		"TEXT_CODEC_TYPE_XML":                 23,
	}
)

func (x TextCodecType) Enum() *TextCodecType {
	p := new(TextCodecType)
	*p = x
	return p
}

func (x TextCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[122].Descriptor()
}

func (TextCodecType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[122]
}

func (x TextCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextCodecType.Descriptor instead.
func (TextCodecType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{122}
}

type TextType int32

const (
	TextType_TEXT_TYPE_UNSPECIFIED           TextType = 0
	TextType_TEXT_TYPE_CAPTION               TextType = 1
	TextType_TEXT_TYPE_EBOOK                 TextType = 2
	TextType_TEXT_TYPE_LINERNOTES            TextType = 3
	TextType_TEXT_TYPE_LYRICTEXT             TextType = 4
	TextType_TEXT_TYPE_NONINTERACTIVEBOOKLET TextType = 5
	TextType_TEXT_TYPE_TEXTDOCUMENT          TextType = 6
	TextType_TEXT_TYPE_UNKNOWN               TextType = 7
	TextType_TEXT_TYPE_USERDEFINED           TextType = 8
)

// Enum value maps for TextType.
var (
	TextType_name = map[int32]string{
		0: "TEXT_TYPE_UNSPECIFIED",
		1: "TEXT_TYPE_CAPTION",
		2: "TEXT_TYPE_EBOOK",
		3: "TEXT_TYPE_LINERNOTES",
		4: "TEXT_TYPE_LYRICTEXT",
		5: "TEXT_TYPE_NONINTERACTIVEBOOKLET",
		6: "TEXT_TYPE_TEXTDOCUMENT",
		7: "TEXT_TYPE_UNKNOWN",
		8: "TEXT_TYPE_USERDEFINED",
	}
	TextType_value = map[string]int32{
		"TEXT_TYPE_UNSPECIFIED":           0,
		"TEXT_TYPE_CAPTION":               1,
		"TEXT_TYPE_EBOOK":                 2,
		"TEXT_TYPE_LINERNOTES":            3,
		"TEXT_TYPE_LYRICTEXT":             4,
		"TEXT_TYPE_NONINTERACTIVEBOOKLET": 5,
		"TEXT_TYPE_TEXTDOCUMENT":          6,
		"TEXT_TYPE_UNKNOWN":               7,
		"TEXT_TYPE_USERDEFINED":           8,
	}
)

func (x TextType) Enum() *TextType {
	p := new(TextType)
	*p = x
	return p
}

func (x TextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[123].Descriptor()
}

func (TextType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[123]
}

func (x TextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextType.Descriptor instead.
func (TextType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{123}
}

type ThemeType int32

const (
	ThemeType_THEME_TYPE_UNSPECIFIED  ThemeType = 0
	ThemeType_THEME_TYPE_CLOSINGTHEME ThemeType = 1
	ThemeType_THEME_TYPE_MAINTHEME    ThemeType = 2
	ThemeType_THEME_TYPE_OPENINGTHEME ThemeType = 3
	ThemeType_THEME_TYPE_SEGMENTTHEME ThemeType = 4
	ThemeType_THEME_TYPE_TITLETHEME   ThemeType = 5
	ThemeType_THEME_TYPE_USERDEFINED  ThemeType = 6
)

// Enum value maps for ThemeType.
var (
	ThemeType_name = map[int32]string{
		0: "THEME_TYPE_UNSPECIFIED",
		1: "THEME_TYPE_CLOSINGTHEME",
		2: "THEME_TYPE_MAINTHEME",
		3: "THEME_TYPE_OPENINGTHEME",
		4: "THEME_TYPE_SEGMENTTHEME",
		5: "THEME_TYPE_TITLETHEME",
		6: "THEME_TYPE_USERDEFINED",
	}
	ThemeType_value = map[string]int32{
		"THEME_TYPE_UNSPECIFIED":  0,
		"THEME_TYPE_CLOSINGTHEME": 1,
		"THEME_TYPE_MAINTHEME":    2,
		"THEME_TYPE_OPENINGTHEME": 3,
		"THEME_TYPE_SEGMENTTHEME": 4,
		"THEME_TYPE_TITLETHEME":   5,
		"THEME_TYPE_USERDEFINED":  6,
	}
)

func (x ThemeType) Enum() *ThemeType {
	p := new(ThemeType)
	*p = x
	return p
}

func (x ThemeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThemeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[124].Descriptor()
}

func (ThemeType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[124]
}

func (x ThemeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThemeType.Descriptor instead.
func (ThemeType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{124}
}

type TisTerritoryCode int32

const (
	TisTerritoryCode_TIS_TERRITORY_CODE_UNSPECIFIED TisTerritoryCode = 0
	TisTerritoryCode_TIS_TERRITORY_CODE_E_4         TisTerritoryCode = 1
	TisTerritoryCode_TIS_TERRITORY_CODE_E_8         TisTerritoryCode = 2
	TisTerritoryCode_TIS_TERRITORY_CODE_E_12        TisTerritoryCode = 3
	TisTerritoryCode_TIS_TERRITORY_CODE_E_20        TisTerritoryCode = 4
	TisTerritoryCode_TIS_TERRITORY_CODE_E_24        TisTerritoryCode = 5
	TisTerritoryCode_TIS_TERRITORY_CODE_E_28        TisTerritoryCode = 6
	TisTerritoryCode_TIS_TERRITORY_CODE_E_31        TisTerritoryCode = 7
	TisTerritoryCode_TIS_TERRITORY_CODE_E_32        TisTerritoryCode = 8
	TisTerritoryCode_TIS_TERRITORY_CODE_E_36        TisTerritoryCode = 9
	TisTerritoryCode_TIS_TERRITORY_CODE_E_40        TisTerritoryCode = 10
	TisTerritoryCode_TIS_TERRITORY_CODE_E_44        TisTerritoryCode = 11
	TisTerritoryCode_TIS_TERRITORY_CODE_E_48        TisTerritoryCode = 12
	TisTerritoryCode_TIS_TERRITORY_CODE_E_50        TisTerritoryCode = 13
	TisTerritoryCode_TIS_TERRITORY_CODE_E_51        TisTerritoryCode = 14
	TisTerritoryCode_TIS_TERRITORY_CODE_E_52        TisTerritoryCode = 15
	TisTerritoryCode_TIS_TERRITORY_CODE_E_56        TisTerritoryCode = 16
	TisTerritoryCode_TIS_TERRITORY_CODE_E_64        TisTerritoryCode = 17
	TisTerritoryCode_TIS_TERRITORY_CODE_E_68        TisTerritoryCode = 18
	TisTerritoryCode_TIS_TERRITORY_CODE_E_70        TisTerritoryCode = 19
	TisTerritoryCode_TIS_TERRITORY_CODE_E_72        TisTerritoryCode = 20
	TisTerritoryCode_TIS_TERRITORY_CODE_E_76        TisTerritoryCode = 21
	TisTerritoryCode_TIS_TERRITORY_CODE_E_84        TisTerritoryCode = 22
	TisTerritoryCode_TIS_TERRITORY_CODE_E_90        TisTerritoryCode = 23
	TisTerritoryCode_TIS_TERRITORY_CODE_E_96        TisTerritoryCode = 24
	TisTerritoryCode_TIS_TERRITORY_CODE_E_100       TisTerritoryCode = 25
	TisTerritoryCode_TIS_TERRITORY_CODE_E_104       TisTerritoryCode = 26
	TisTerritoryCode_TIS_TERRITORY_CODE_E_108       TisTerritoryCode = 27
	TisTerritoryCode_TIS_TERRITORY_CODE_E_112       TisTerritoryCode = 28
	TisTerritoryCode_TIS_TERRITORY_CODE_E_116       TisTerritoryCode = 29
	TisTerritoryCode_TIS_TERRITORY_CODE_E_120       TisTerritoryCode = 30
	TisTerritoryCode_TIS_TERRITORY_CODE_E_124       TisTerritoryCode = 31
	TisTerritoryCode_TIS_TERRITORY_CODE_E_132       TisTerritoryCode = 32
	TisTerritoryCode_TIS_TERRITORY_CODE_E_140       TisTerritoryCode = 33
	TisTerritoryCode_TIS_TERRITORY_CODE_E_144       TisTerritoryCode = 34
	TisTerritoryCode_TIS_TERRITORY_CODE_E_148       TisTerritoryCode = 35
	TisTerritoryCode_TIS_TERRITORY_CODE_E_152       TisTerritoryCode = 36
	TisTerritoryCode_TIS_TERRITORY_CODE_E_156       TisTerritoryCode = 37
	TisTerritoryCode_TIS_TERRITORY_CODE_E_158       TisTerritoryCode = 38
	TisTerritoryCode_TIS_TERRITORY_CODE_E_170       TisTerritoryCode = 39
	TisTerritoryCode_TIS_TERRITORY_CODE_E_174       TisTerritoryCode = 40
	TisTerritoryCode_TIS_TERRITORY_CODE_E_178       TisTerritoryCode = 41
	TisTerritoryCode_TIS_TERRITORY_CODE_E_180       TisTerritoryCode = 42
	TisTerritoryCode_TIS_TERRITORY_CODE_E_188       TisTerritoryCode = 43
	TisTerritoryCode_TIS_TERRITORY_CODE_E_191       TisTerritoryCode = 44
	TisTerritoryCode_TIS_TERRITORY_CODE_E_192       TisTerritoryCode = 45
	TisTerritoryCode_TIS_TERRITORY_CODE_E_196       TisTerritoryCode = 46
	TisTerritoryCode_TIS_TERRITORY_CODE_E_200       TisTerritoryCode = 47
	TisTerritoryCode_TIS_TERRITORY_CODE_E_203       TisTerritoryCode = 48
	TisTerritoryCode_TIS_TERRITORY_CODE_E_204       TisTerritoryCode = 49
	TisTerritoryCode_TIS_TERRITORY_CODE_E_208       TisTerritoryCode = 50
	TisTerritoryCode_TIS_TERRITORY_CODE_E_212       TisTerritoryCode = 51
	TisTerritoryCode_TIS_TERRITORY_CODE_E_214       TisTerritoryCode = 52
	TisTerritoryCode_TIS_TERRITORY_CODE_E_218       TisTerritoryCode = 53
	TisTerritoryCode_TIS_TERRITORY_CODE_E_222       TisTerritoryCode = 54
	TisTerritoryCode_TIS_TERRITORY_CODE_E_226       TisTerritoryCode = 55
	TisTerritoryCode_TIS_TERRITORY_CODE_E_230       TisTerritoryCode = 56
	TisTerritoryCode_TIS_TERRITORY_CODE_E_231       TisTerritoryCode = 57
	TisTerritoryCode_TIS_TERRITORY_CODE_E_232       TisTerritoryCode = 58
	TisTerritoryCode_TIS_TERRITORY_CODE_E_233       TisTerritoryCode = 59
	TisTerritoryCode_TIS_TERRITORY_CODE_E_242       TisTerritoryCode = 60
	TisTerritoryCode_TIS_TERRITORY_CODE_E_246       TisTerritoryCode = 61
	TisTerritoryCode_TIS_TERRITORY_CODE_E_250       TisTerritoryCode = 62
	TisTerritoryCode_TIS_TERRITORY_CODE_E_258       TisTerritoryCode = 63
	TisTerritoryCode_TIS_TERRITORY_CODE_E_262       TisTerritoryCode = 64
	TisTerritoryCode_TIS_TERRITORY_CODE_E_266       TisTerritoryCode = 65
	TisTerritoryCode_TIS_TERRITORY_CODE_E_268       TisTerritoryCode = 66
	TisTerritoryCode_TIS_TERRITORY_CODE_E_270       TisTerritoryCode = 67
	TisTerritoryCode_TIS_TERRITORY_CODE_E_276       TisTerritoryCode = 68
	TisTerritoryCode_TIS_TERRITORY_CODE_E_278       TisTerritoryCode = 69
	TisTerritoryCode_TIS_TERRITORY_CODE_E_280       TisTerritoryCode = 70
	TisTerritoryCode_TIS_TERRITORY_CODE_E_288       TisTerritoryCode = 71
	TisTerritoryCode_TIS_TERRITORY_CODE_E_296       TisTerritoryCode = 72
	TisTerritoryCode_TIS_TERRITORY_CODE_E_300       TisTerritoryCode = 73
	TisTerritoryCode_TIS_TERRITORY_CODE_E_308       TisTerritoryCode = 74
	TisTerritoryCode_TIS_TERRITORY_CODE_E_320       TisTerritoryCode = 75
	TisTerritoryCode_TIS_TERRITORY_CODE_E_324       TisTerritoryCode = 76
	TisTerritoryCode_TIS_TERRITORY_CODE_E_328       TisTerritoryCode = 77
	TisTerritoryCode_TIS_TERRITORY_CODE_E_332       TisTerritoryCode = 78
	TisTerritoryCode_TIS_TERRITORY_CODE_E_336       TisTerritoryCode = 79
	TisTerritoryCode_TIS_TERRITORY_CODE_E_340       TisTerritoryCode = 80
	TisTerritoryCode_TIS_TERRITORY_CODE_E_344       TisTerritoryCode = 81
	TisTerritoryCode_TIS_TERRITORY_CODE_E_348       TisTerritoryCode = 82
	TisTerritoryCode_TIS_TERRITORY_CODE_E_352       TisTerritoryCode = 83
	TisTerritoryCode_TIS_TERRITORY_CODE_E_356       TisTerritoryCode = 84
	TisTerritoryCode_TIS_TERRITORY_CODE_E_360       TisTerritoryCode = 85
	TisTerritoryCode_TIS_TERRITORY_CODE_E_364       TisTerritoryCode = 86
	TisTerritoryCode_TIS_TERRITORY_CODE_E_368       TisTerritoryCode = 87
	TisTerritoryCode_TIS_TERRITORY_CODE_E_372       TisTerritoryCode = 88
	TisTerritoryCode_TIS_TERRITORY_CODE_E_376       TisTerritoryCode = 89
	TisTerritoryCode_TIS_TERRITORY_CODE_E_380       TisTerritoryCode = 90
	TisTerritoryCode_TIS_TERRITORY_CODE_E_384       TisTerritoryCode = 91
	TisTerritoryCode_TIS_TERRITORY_CODE_E_388       TisTerritoryCode = 92
	TisTerritoryCode_TIS_TERRITORY_CODE_E_392       TisTerritoryCode = 93
	TisTerritoryCode_TIS_TERRITORY_CODE_E_398       TisTerritoryCode = 94
	TisTerritoryCode_TIS_TERRITORY_CODE_E_400       TisTerritoryCode = 95
	TisTerritoryCode_TIS_TERRITORY_CODE_E_404       TisTerritoryCode = 96
	TisTerritoryCode_TIS_TERRITORY_CODE_E_408       TisTerritoryCode = 97
	TisTerritoryCode_TIS_TERRITORY_CODE_E_410       TisTerritoryCode = 98
	TisTerritoryCode_TIS_TERRITORY_CODE_E_414       TisTerritoryCode = 99
	TisTerritoryCode_TIS_TERRITORY_CODE_E_417       TisTerritoryCode = 100
	TisTerritoryCode_TIS_TERRITORY_CODE_E_418       TisTerritoryCode = 101
	TisTerritoryCode_TIS_TERRITORY_CODE_E_422       TisTerritoryCode = 102
	TisTerritoryCode_TIS_TERRITORY_CODE_E_426       TisTerritoryCode = 103
	TisTerritoryCode_TIS_TERRITORY_CODE_E_428       TisTerritoryCode = 104
	TisTerritoryCode_TIS_TERRITORY_CODE_E_430       TisTerritoryCode = 105
	TisTerritoryCode_TIS_TERRITORY_CODE_E_434       TisTerritoryCode = 106
	TisTerritoryCode_TIS_TERRITORY_CODE_E_438       TisTerritoryCode = 107
	TisTerritoryCode_TIS_TERRITORY_CODE_E_440       TisTerritoryCode = 108
	TisTerritoryCode_TIS_TERRITORY_CODE_E_442       TisTerritoryCode = 109
	TisTerritoryCode_TIS_TERRITORY_CODE_E_450       TisTerritoryCode = 110
	TisTerritoryCode_TIS_TERRITORY_CODE_E_454       TisTerritoryCode = 111
	TisTerritoryCode_TIS_TERRITORY_CODE_E_458       TisTerritoryCode = 112
	TisTerritoryCode_TIS_TERRITORY_CODE_E_462       TisTerritoryCode = 113
	TisTerritoryCode_TIS_TERRITORY_CODE_E_466       TisTerritoryCode = 114
	TisTerritoryCode_TIS_TERRITORY_CODE_E_470       TisTerritoryCode = 115
	TisTerritoryCode_TIS_TERRITORY_CODE_E_478       TisTerritoryCode = 116
	TisTerritoryCode_TIS_TERRITORY_CODE_E_480       TisTerritoryCode = 117
	TisTerritoryCode_TIS_TERRITORY_CODE_E_484       TisTerritoryCode = 118
	TisTerritoryCode_TIS_TERRITORY_CODE_E_492       TisTerritoryCode = 119
	TisTerritoryCode_TIS_TERRITORY_CODE_E_496       TisTerritoryCode = 120
	TisTerritoryCode_TIS_TERRITORY_CODE_E_498       TisTerritoryCode = 121
	TisTerritoryCode_TIS_TERRITORY_CODE_E_499       TisTerritoryCode = 122
	TisTerritoryCode_TIS_TERRITORY_CODE_E_504       TisTerritoryCode = 123
	TisTerritoryCode_TIS_TERRITORY_CODE_E_508       TisTerritoryCode = 124
	TisTerritoryCode_TIS_TERRITORY_CODE_E_512       TisTerritoryCode = 125
	TisTerritoryCode_TIS_TERRITORY_CODE_E_516       TisTerritoryCode = 126
	TisTerritoryCode_TIS_TERRITORY_CODE_E_520       TisTerritoryCode = 127
	TisTerritoryCode_TIS_TERRITORY_CODE_E_524       TisTerritoryCode = 128
	TisTerritoryCode_TIS_TERRITORY_CODE_E_528       TisTerritoryCode = 129
	TisTerritoryCode_TIS_TERRITORY_CODE_E_540       TisTerritoryCode = 130
	TisTerritoryCode_TIS_TERRITORY_CODE_E_548       TisTerritoryCode = 131
	TisTerritoryCode_TIS_TERRITORY_CODE_E_554       TisTerritoryCode = 132
	TisTerritoryCode_TIS_TERRITORY_CODE_E_558       TisTerritoryCode = 133
	TisTerritoryCode_TIS_TERRITORY_CODE_E_562       TisTerritoryCode = 134
	TisTerritoryCode_TIS_TERRITORY_CODE_E_566       TisTerritoryCode = 135
	TisTerritoryCode_TIS_TERRITORY_CODE_E_578       TisTerritoryCode = 136
	TisTerritoryCode_TIS_TERRITORY_CODE_E_583       TisTerritoryCode = 137
	TisTerritoryCode_TIS_TERRITORY_CODE_E_584       TisTerritoryCode = 138
	TisTerritoryCode_TIS_TERRITORY_CODE_E_585       TisTerritoryCode = 139
	TisTerritoryCode_TIS_TERRITORY_CODE_E_586       TisTerritoryCode = 140
	TisTerritoryCode_TIS_TERRITORY_CODE_E_591       TisTerritoryCode = 141
	TisTerritoryCode_TIS_TERRITORY_CODE_E_598       TisTerritoryCode = 142
	TisTerritoryCode_TIS_TERRITORY_CODE_E_600       TisTerritoryCode = 143
	TisTerritoryCode_TIS_TERRITORY_CODE_E_604       TisTerritoryCode = 144
	TisTerritoryCode_TIS_TERRITORY_CODE_E_608       TisTerritoryCode = 145
	TisTerritoryCode_TIS_TERRITORY_CODE_E_616       TisTerritoryCode = 146
	TisTerritoryCode_TIS_TERRITORY_CODE_E_620       TisTerritoryCode = 147
	TisTerritoryCode_TIS_TERRITORY_CODE_E_624       TisTerritoryCode = 148
	TisTerritoryCode_TIS_TERRITORY_CODE_E_626       TisTerritoryCode = 149
	TisTerritoryCode_TIS_TERRITORY_CODE_E_630       TisTerritoryCode = 150
	TisTerritoryCode_TIS_TERRITORY_CODE_E_634       TisTerritoryCode = 151
	TisTerritoryCode_TIS_TERRITORY_CODE_E_642       TisTerritoryCode = 152
	TisTerritoryCode_TIS_TERRITORY_CODE_E_643       TisTerritoryCode = 153
	TisTerritoryCode_TIS_TERRITORY_CODE_E_646       TisTerritoryCode = 154
	TisTerritoryCode_TIS_TERRITORY_CODE_E_659       TisTerritoryCode = 155
	TisTerritoryCode_TIS_TERRITORY_CODE_E_662       TisTerritoryCode = 156
	TisTerritoryCode_TIS_TERRITORY_CODE_E_670       TisTerritoryCode = 157
	TisTerritoryCode_TIS_TERRITORY_CODE_E_674       TisTerritoryCode = 158
	TisTerritoryCode_TIS_TERRITORY_CODE_E_678       TisTerritoryCode = 159
	TisTerritoryCode_TIS_TERRITORY_CODE_E_682       TisTerritoryCode = 160
	TisTerritoryCode_TIS_TERRITORY_CODE_E_686       TisTerritoryCode = 161
	TisTerritoryCode_TIS_TERRITORY_CODE_E_688       TisTerritoryCode = 162
	TisTerritoryCode_TIS_TERRITORY_CODE_E_690       TisTerritoryCode = 163
	TisTerritoryCode_TIS_TERRITORY_CODE_E_694       TisTerritoryCode = 164
	TisTerritoryCode_TIS_TERRITORY_CODE_E_702       TisTerritoryCode = 165
	TisTerritoryCode_TIS_TERRITORY_CODE_E_703       TisTerritoryCode = 166
	TisTerritoryCode_TIS_TERRITORY_CODE_E_704       TisTerritoryCode = 167
	TisTerritoryCode_TIS_TERRITORY_CODE_E_705       TisTerritoryCode = 168
	TisTerritoryCode_TIS_TERRITORY_CODE_E_706       TisTerritoryCode = 169
	TisTerritoryCode_TIS_TERRITORY_CODE_E_710       TisTerritoryCode = 170
	TisTerritoryCode_TIS_TERRITORY_CODE_E_716       TisTerritoryCode = 171
	TisTerritoryCode_TIS_TERRITORY_CODE_E_720       TisTerritoryCode = 172
	TisTerritoryCode_TIS_TERRITORY_CODE_E_724       TisTerritoryCode = 173
	TisTerritoryCode_TIS_TERRITORY_CODE_E_728       TisTerritoryCode = 174
	TisTerritoryCode_TIS_TERRITORY_CODE_E_729       TisTerritoryCode = 175
	TisTerritoryCode_TIS_TERRITORY_CODE_E_732       TisTerritoryCode = 176
	TisTerritoryCode_TIS_TERRITORY_CODE_E_736       TisTerritoryCode = 177
	TisTerritoryCode_TIS_TERRITORY_CODE_E_740       TisTerritoryCode = 178
	TisTerritoryCode_TIS_TERRITORY_CODE_E_748       TisTerritoryCode = 179
	TisTerritoryCode_TIS_TERRITORY_CODE_E_752       TisTerritoryCode = 180
	TisTerritoryCode_TIS_TERRITORY_CODE_E_756       TisTerritoryCode = 181
	TisTerritoryCode_TIS_TERRITORY_CODE_E_760       TisTerritoryCode = 182
	TisTerritoryCode_TIS_TERRITORY_CODE_E_762       TisTerritoryCode = 183
	TisTerritoryCode_TIS_TERRITORY_CODE_E_764       TisTerritoryCode = 184
	TisTerritoryCode_TIS_TERRITORY_CODE_E_768       TisTerritoryCode = 185
	TisTerritoryCode_TIS_TERRITORY_CODE_E_776       TisTerritoryCode = 186
	TisTerritoryCode_TIS_TERRITORY_CODE_E_780       TisTerritoryCode = 187
	TisTerritoryCode_TIS_TERRITORY_CODE_E_784       TisTerritoryCode = 188
	TisTerritoryCode_TIS_TERRITORY_CODE_E_788       TisTerritoryCode = 189
	TisTerritoryCode_TIS_TERRITORY_CODE_E_792       TisTerritoryCode = 190
	TisTerritoryCode_TIS_TERRITORY_CODE_E_795       TisTerritoryCode = 191
	TisTerritoryCode_TIS_TERRITORY_CODE_E_798       TisTerritoryCode = 192
	TisTerritoryCode_TIS_TERRITORY_CODE_E_800       TisTerritoryCode = 193
	TisTerritoryCode_TIS_TERRITORY_CODE_E_804       TisTerritoryCode = 194
	TisTerritoryCode_TIS_TERRITORY_CODE_E_807       TisTerritoryCode = 195
	TisTerritoryCode_TIS_TERRITORY_CODE_E_810       TisTerritoryCode = 196
	TisTerritoryCode_TIS_TERRITORY_CODE_E_818       TisTerritoryCode = 197
	TisTerritoryCode_TIS_TERRITORY_CODE_E_826       TisTerritoryCode = 198
	TisTerritoryCode_TIS_TERRITORY_CODE_E_834       TisTerritoryCode = 199
	TisTerritoryCode_TIS_TERRITORY_CODE_E_840       TisTerritoryCode = 200
	TisTerritoryCode_TIS_TERRITORY_CODE_E_854       TisTerritoryCode = 201
	TisTerritoryCode_TIS_TERRITORY_CODE_E_858       TisTerritoryCode = 202
	TisTerritoryCode_TIS_TERRITORY_CODE_E_860       TisTerritoryCode = 203
	TisTerritoryCode_TIS_TERRITORY_CODE_E_862       TisTerritoryCode = 204
	TisTerritoryCode_TIS_TERRITORY_CODE_E_882       TisTerritoryCode = 205
	TisTerritoryCode_TIS_TERRITORY_CODE_E_886       TisTerritoryCode = 206
	TisTerritoryCode_TIS_TERRITORY_CODE_E_887       TisTerritoryCode = 207
	TisTerritoryCode_TIS_TERRITORY_CODE_E_890       TisTerritoryCode = 208
	TisTerritoryCode_TIS_TERRITORY_CODE_E_891       TisTerritoryCode = 209
	TisTerritoryCode_TIS_TERRITORY_CODE_E_894       TisTerritoryCode = 210
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2100      TisTerritoryCode = 211
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2101      TisTerritoryCode = 212
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2102      TisTerritoryCode = 213
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2103      TisTerritoryCode = 214
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2104      TisTerritoryCode = 215
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2105      TisTerritoryCode = 216
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2106      TisTerritoryCode = 217
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2107      TisTerritoryCode = 218
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2108      TisTerritoryCode = 219
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2109      TisTerritoryCode = 220
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2110      TisTerritoryCode = 221
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2111      TisTerritoryCode = 222
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2112      TisTerritoryCode = 223
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2113      TisTerritoryCode = 224
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2114      TisTerritoryCode = 225
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2115      TisTerritoryCode = 226
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2116      TisTerritoryCode = 227
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2117      TisTerritoryCode = 228
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2118      TisTerritoryCode = 229
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2119      TisTerritoryCode = 230
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2120      TisTerritoryCode = 231
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2121      TisTerritoryCode = 232
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2122      TisTerritoryCode = 233
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2123      TisTerritoryCode = 234
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2124      TisTerritoryCode = 235
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2125      TisTerritoryCode = 236
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2126      TisTerritoryCode = 237
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2127      TisTerritoryCode = 238
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2128      TisTerritoryCode = 239
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2129      TisTerritoryCode = 240
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2130      TisTerritoryCode = 241
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2131      TisTerritoryCode = 242
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2132      TisTerritoryCode = 243
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2133      TisTerritoryCode = 244
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2134      TisTerritoryCode = 245
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2136      TisTerritoryCode = 246
	TisTerritoryCode_TIS_TERRITORY_CODE_E_446       TisTerritoryCode = 247
)

// Enum value maps for TisTerritoryCode.
var (
	TisTerritoryCode_name = map[int32]string{
		0:   "TIS_TERRITORY_CODE_UNSPECIFIED",
		1:   "TIS_TERRITORY_CODE_E_4",
		2:   "TIS_TERRITORY_CODE_E_8",
		3:   "TIS_TERRITORY_CODE_E_12",
		4:   "TIS_TERRITORY_CODE_E_20",
		5:   "TIS_TERRITORY_CODE_E_24",
		6:   "TIS_TERRITORY_CODE_E_28",
		7:   "TIS_TERRITORY_CODE_E_31",
		8:   "TIS_TERRITORY_CODE_E_32",
		9:   "TIS_TERRITORY_CODE_E_36",
		10:  "TIS_TERRITORY_CODE_E_40",
		11:  "TIS_TERRITORY_CODE_E_44",
		12:  "TIS_TERRITORY_CODE_E_48",
		13:  "TIS_TERRITORY_CODE_E_50",
		14:  "TIS_TERRITORY_CODE_E_51",
		15:  "TIS_TERRITORY_CODE_E_52",
		16:  "TIS_TERRITORY_CODE_E_56",
		17:  "TIS_TERRITORY_CODE_E_64",
		18:  "TIS_TERRITORY_CODE_E_68",
		19:  "TIS_TERRITORY_CODE_E_70",
		20:  "TIS_TERRITORY_CODE_E_72",
		21:  "TIS_TERRITORY_CODE_E_76",
		22:  "TIS_TERRITORY_CODE_E_84",
		23:  "TIS_TERRITORY_CODE_E_90",
		24:  "TIS_TERRITORY_CODE_E_96",
		25:  "TIS_TERRITORY_CODE_E_100",
		26:  "TIS_TERRITORY_CODE_E_104",
		27:  "TIS_TERRITORY_CODE_E_108",
		28:  "TIS_TERRITORY_CODE_E_112",
		29:  "TIS_TERRITORY_CODE_E_116",
		30:  "TIS_TERRITORY_CODE_E_120",
		31:  "TIS_TERRITORY_CODE_E_124",
		32:  "TIS_TERRITORY_CODE_E_132",
		33:  "TIS_TERRITORY_CODE_E_140",
		34:  "TIS_TERRITORY_CODE_E_144",
		35:  "TIS_TERRITORY_CODE_E_148",
		36:  "TIS_TERRITORY_CODE_E_152",
		37:  "TIS_TERRITORY_CODE_E_156",
		38:  "TIS_TERRITORY_CODE_E_158",
		39:  "TIS_TERRITORY_CODE_E_170",
		40:  "TIS_TERRITORY_CODE_E_174",
		41:  "TIS_TERRITORY_CODE_E_178",
		42:  "TIS_TERRITORY_CODE_E_180",
		43:  "TIS_TERRITORY_CODE_E_188",
		44:  "TIS_TERRITORY_CODE_E_191",
		45:  "TIS_TERRITORY_CODE_E_192",
		46:  "TIS_TERRITORY_CODE_E_196",
		47:  "TIS_TERRITORY_CODE_E_200",
		48:  "TIS_TERRITORY_CODE_E_203",
		49:  "TIS_TERRITORY_CODE_E_204",
		50:  "TIS_TERRITORY_CODE_E_208",
		51:  "TIS_TERRITORY_CODE_E_212",
		52:  "TIS_TERRITORY_CODE_E_214",
		53:  "TIS_TERRITORY_CODE_E_218",
		54:  "TIS_TERRITORY_CODE_E_222",
		55:  "TIS_TERRITORY_CODE_E_226",
		56:  "TIS_TERRITORY_CODE_E_230",
		57:  "TIS_TERRITORY_CODE_E_231",
		58:  "TIS_TERRITORY_CODE_E_232",
		59:  "TIS_TERRITORY_CODE_E_233",
		60:  "TIS_TERRITORY_CODE_E_242",
		61:  "TIS_TERRITORY_CODE_E_246",
		62:  "TIS_TERRITORY_CODE_E_250",
		63:  "TIS_TERRITORY_CODE_E_258",
		64:  "TIS_TERRITORY_CODE_E_262",
		65:  "TIS_TERRITORY_CODE_E_266",
		66:  "TIS_TERRITORY_CODE_E_268",
		67:  "TIS_TERRITORY_CODE_E_270",
		68:  "TIS_TERRITORY_CODE_E_276",
		69:  "TIS_TERRITORY_CODE_E_278",
		70:  "TIS_TERRITORY_CODE_E_280",
		71:  "TIS_TERRITORY_CODE_E_288",
		72:  "TIS_TERRITORY_CODE_E_296",
		73:  "TIS_TERRITORY_CODE_E_300",
		74:  "TIS_TERRITORY_CODE_E_308",
		75:  "TIS_TERRITORY_CODE_E_320",
		76:  "TIS_TERRITORY_CODE_E_324",
		77:  "TIS_TERRITORY_CODE_E_328",
		78:  "TIS_TERRITORY_CODE_E_332",
		79:  "TIS_TERRITORY_CODE_E_336",
		80:  "TIS_TERRITORY_CODE_E_340",
		81:  "TIS_TERRITORY_CODE_E_344",
		82:  "TIS_TERRITORY_CODE_E_348",
		83:  "TIS_TERRITORY_CODE_E_352",
		84:  "TIS_TERRITORY_CODE_E_356",
		85:  "TIS_TERRITORY_CODE_E_360",
		86:  "TIS_TERRITORY_CODE_E_364",
		87:  "TIS_TERRITORY_CODE_E_368",
		88:  "TIS_TERRITORY_CODE_E_372",
		89:  "TIS_TERRITORY_CODE_E_376",
		90:  "TIS_TERRITORY_CODE_E_380",
		91:  "TIS_TERRITORY_CODE_E_384",
		92:  "TIS_TERRITORY_CODE_E_388",
		93:  "TIS_TERRITORY_CODE_E_392",
		94:  "TIS_TERRITORY_CODE_E_398",
		95:  "TIS_TERRITORY_CODE_E_400",
		96:  "TIS_TERRITORY_CODE_E_404",
		97:  "TIS_TERRITORY_CODE_E_408",
		98:  "TIS_TERRITORY_CODE_E_410",
		99:  "TIS_TERRITORY_CODE_E_414",
		100: "TIS_TERRITORY_CODE_E_417",
		101: "TIS_TERRITORY_CODE_E_418",
		102: "TIS_TERRITORY_CODE_E_422",
		103: "TIS_TERRITORY_CODE_E_426",
		104: "TIS_TERRITORY_CODE_E_428",
		105: "TIS_TERRITORY_CODE_E_430",
		106: "TIS_TERRITORY_CODE_E_434",
		107: "TIS_TERRITORY_CODE_E_438",
		108: "TIS_TERRITORY_CODE_E_440",
		109: "TIS_TERRITORY_CODE_E_442",
		110: "TIS_TERRITORY_CODE_E_450",
		111: "TIS_TERRITORY_CODE_E_454",
		112: "TIS_TERRITORY_CODE_E_458",
		113: "TIS_TERRITORY_CODE_E_462",
		114: "TIS_TERRITORY_CODE_E_466",
		115: "TIS_TERRITORY_CODE_E_470",
		116: "TIS_TERRITORY_CODE_E_478",
		117: "TIS_TERRITORY_CODE_E_480",
		118: "TIS_TERRITORY_CODE_E_484",
		119: "TIS_TERRITORY_CODE_E_492",
		120: "TIS_TERRITORY_CODE_E_496",
		121: "TIS_TERRITORY_CODE_E_498",
		122: "TIS_TERRITORY_CODE_E_499",
		123: "TIS_TERRITORY_CODE_E_504",
		124: "TIS_TERRITORY_CODE_E_508",
		125: "TIS_TERRITORY_CODE_E_512",
		126: "TIS_TERRITORY_CODE_E_516",
		127: "TIS_TERRITORY_CODE_E_520",
		128: "TIS_TERRITORY_CODE_E_524",
		129: "TIS_TERRITORY_CODE_E_528",
		130: "TIS_TERRITORY_CODE_E_540",
		131: "TIS_TERRITORY_CODE_E_548",
		132: "TIS_TERRITORY_CODE_E_554",
		133: "TIS_TERRITORY_CODE_E_558",
		134: "TIS_TERRITORY_CODE_E_562",
		135: "TIS_TERRITORY_CODE_E_566",
		136: "TIS_TERRITORY_CODE_E_578",
		137: "TIS_TERRITORY_CODE_E_583",
		138: "TIS_TERRITORY_CODE_E_584",
		139: "TIS_TERRITORY_CODE_E_585",
		140: "TIS_TERRITORY_CODE_E_586",
		141: "TIS_TERRITORY_CODE_E_591",
		142: "TIS_TERRITORY_CODE_E_598",
		143: "TIS_TERRITORY_CODE_E_600",
		144: "TIS_TERRITORY_CODE_E_604",
		145: "TIS_TERRITORY_CODE_E_608",
		146: "TIS_TERRITORY_CODE_E_616",
		147: "TIS_TERRITORY_CODE_E_620",
		148: "TIS_TERRITORY_CODE_E_624",
		149: "TIS_TERRITORY_CODE_E_626",
		150: "TIS_TERRITORY_CODE_E_630",
		151: "TIS_TERRITORY_CODE_E_634",
		152: "TIS_TERRITORY_CODE_E_642",
		153: "TIS_TERRITORY_CODE_E_643",
		154: "TIS_TERRITORY_CODE_E_646",
		155: "TIS_TERRITORY_CODE_E_659",
		156: "TIS_TERRITORY_CODE_E_662",
		157: "TIS_TERRITORY_CODE_E_670",
		158: "TIS_TERRITORY_CODE_E_674",
		159: "TIS_TERRITORY_CODE_E_678",
		160: "TIS_TERRITORY_CODE_E_682",
		161: "TIS_TERRITORY_CODE_E_686",
		162: "TIS_TERRITORY_CODE_E_688",
		163: "TIS_TERRITORY_CODE_E_690",
		164: "TIS_TERRITORY_CODE_E_694",
		165: "TIS_TERRITORY_CODE_E_702",
		166: "TIS_TERRITORY_CODE_E_703",
		167: "TIS_TERRITORY_CODE_E_704",
		168: "TIS_TERRITORY_CODE_E_705",
		169: "TIS_TERRITORY_CODE_E_706",
		170: "TIS_TERRITORY_CODE_E_710",
		171: "TIS_TERRITORY_CODE_E_716",
		172: "TIS_TERRITORY_CODE_E_720",
		173: "TIS_TERRITORY_CODE_E_724",
		174: "TIS_TERRITORY_CODE_E_728",
		175: "TIS_TERRITORY_CODE_E_729",
		176: "TIS_TERRITORY_CODE_E_732",
		177: "TIS_TERRITORY_CODE_E_736",
		178: "TIS_TERRITORY_CODE_E_740",
		179: "TIS_TERRITORY_CODE_E_748",
		180: "TIS_TERRITORY_CODE_E_752",
		181: "TIS_TERRITORY_CODE_E_756",
		182: "TIS_TERRITORY_CODE_E_760",
		183: "TIS_TERRITORY_CODE_E_762",
		184: "TIS_TERRITORY_CODE_E_764",
		185: "TIS_TERRITORY_CODE_E_768",
		186: "TIS_TERRITORY_CODE_E_776",
		187: "TIS_TERRITORY_CODE_E_780",
		188: "TIS_TERRITORY_CODE_E_784",
		189: "TIS_TERRITORY_CODE_E_788",
		190: "TIS_TERRITORY_CODE_E_792",
		191: "TIS_TERRITORY_CODE_E_795",
		192: "TIS_TERRITORY_CODE_E_798",
		193: "TIS_TERRITORY_CODE_E_800",
		194: "TIS_TERRITORY_CODE_E_804",
		195: "TIS_TERRITORY_CODE_E_807",
		196: "TIS_TERRITORY_CODE_E_810",
		197: "TIS_TERRITORY_CODE_E_818",
		198: "TIS_TERRITORY_CODE_E_826",
		199: "TIS_TERRITORY_CODE_E_834",
		200: "TIS_TERRITORY_CODE_E_840",
		201: "TIS_TERRITORY_CODE_E_854",
		202: "TIS_TERRITORY_CODE_E_858",
		203: "TIS_TERRITORY_CODE_E_860",
		204: "TIS_TERRITORY_CODE_E_862",
		205: "TIS_TERRITORY_CODE_E_882",
		206: "TIS_TERRITORY_CODE_E_886",
		207: "TIS_TERRITORY_CODE_E_887",
		208: "TIS_TERRITORY_CODE_E_890",
		209: "TIS_TERRITORY_CODE_E_891",
		210: "TIS_TERRITORY_CODE_E_894",
		211: "TIS_TERRITORY_CODE_E_2100",
		212: "TIS_TERRITORY_CODE_E_2101",
		213: "TIS_TERRITORY_CODE_E_2102",
		214: "TIS_TERRITORY_CODE_E_2103",
		215: "TIS_TERRITORY_CODE_E_2104",
		216: "TIS_TERRITORY_CODE_E_2105",
		217: "TIS_TERRITORY_CODE_E_2106",
		218: "TIS_TERRITORY_CODE_E_2107",
		219: "TIS_TERRITORY_CODE_E_2108",
		220: "TIS_TERRITORY_CODE_E_2109",
		221: "TIS_TERRITORY_CODE_E_2110",
		222: "TIS_TERRITORY_CODE_E_2111",
		223: "TIS_TERRITORY_CODE_E_2112",
		224: "TIS_TERRITORY_CODE_E_2113",
		225: "TIS_TERRITORY_CODE_E_2114",
		226: "TIS_TERRITORY_CODE_E_2115",
		227: "TIS_TERRITORY_CODE_E_2116",
		228: "TIS_TERRITORY_CODE_E_2117",
		229: "TIS_TERRITORY_CODE_E_2118",
		230: "TIS_TERRITORY_CODE_E_2119",
		231: "TIS_TERRITORY_CODE_E_2120",
		232: "TIS_TERRITORY_CODE_E_2121",
		233: "TIS_TERRITORY_CODE_E_2122",
		234: "TIS_TERRITORY_CODE_E_2123",
		235: "TIS_TERRITORY_CODE_E_2124",
		236: "TIS_TERRITORY_CODE_E_2125",
		237: "TIS_TERRITORY_CODE_E_2126",
		238: "TIS_TERRITORY_CODE_E_2127",
		239: "TIS_TERRITORY_CODE_E_2128",
		240: "TIS_TERRITORY_CODE_E_2129",
		241: "TIS_TERRITORY_CODE_E_2130",
		242: "TIS_TERRITORY_CODE_E_2131",
		243: "TIS_TERRITORY_CODE_E_2132",
		244: "TIS_TERRITORY_CODE_E_2133",
		245: "TIS_TERRITORY_CODE_E_2134",
		246: "TIS_TERRITORY_CODE_E_2136",
		247: "TIS_TERRITORY_CODE_E_446",
	}
	TisTerritoryCode_value = map[string]int32{
		"TIS_TERRITORY_CODE_UNSPECIFIED": 0,
		"TIS_TERRITORY_CODE_E_4":         1,
		"TIS_TERRITORY_CODE_E_8":         2,
		"TIS_TERRITORY_CODE_E_12":        3,
		"TIS_TERRITORY_CODE_E_20":        4,
		"TIS_TERRITORY_CODE_E_24":        5,
		"TIS_TERRITORY_CODE_E_28":        6,
		"TIS_TERRITORY_CODE_E_31":        7,
		"TIS_TERRITORY_CODE_E_32":        8,
		"TIS_TERRITORY_CODE_E_36":        9,
		"TIS_TERRITORY_CODE_E_40":        10,
		"TIS_TERRITORY_CODE_E_44":        11,
		"TIS_TERRITORY_CODE_E_48":        12,
		"TIS_TERRITORY_CODE_E_50":        13,
		"TIS_TERRITORY_CODE_E_51":        14,
		"TIS_TERRITORY_CODE_E_52":        15,
		"TIS_TERRITORY_CODE_E_56":        16,
		"TIS_TERRITORY_CODE_E_64":        17,
		"TIS_TERRITORY_CODE_E_68":        18,
		"TIS_TERRITORY_CODE_E_70":        19,
		"TIS_TERRITORY_CODE_E_72":        20,
		"TIS_TERRITORY_CODE_E_76":        21,
		"TIS_TERRITORY_CODE_E_84":        22,
		"TIS_TERRITORY_CODE_E_90":        23,
		"TIS_TERRITORY_CODE_E_96":        24,
		"TIS_TERRITORY_CODE_E_100":       25,
		"TIS_TERRITORY_CODE_E_104":       26,
		"TIS_TERRITORY_CODE_E_108":       27,
		"TIS_TERRITORY_CODE_E_112":       28,
		"TIS_TERRITORY_CODE_E_116":       29,
		"TIS_TERRITORY_CODE_E_120":       30,
		"TIS_TERRITORY_CODE_E_124":       31,
		"TIS_TERRITORY_CODE_E_132":       32,
		"TIS_TERRITORY_CODE_E_140":       33,
		"TIS_TERRITORY_CODE_E_144":       34,
		"TIS_TERRITORY_CODE_E_148":       35,
		"TIS_TERRITORY_CODE_E_152":       36,
		"TIS_TERRITORY_CODE_E_156":       37,
		"TIS_TERRITORY_CODE_E_158":       38,
		"TIS_TERRITORY_CODE_E_170":       39,
		"TIS_TERRITORY_CODE_E_174":       40,
		"TIS_TERRITORY_CODE_E_178":       41,
		"TIS_TERRITORY_CODE_E_180":       42,
		"TIS_TERRITORY_CODE_E_188":       43,
		"TIS_TERRITORY_CODE_E_191":       44,
		"TIS_TERRITORY_CODE_E_192":       45,
		"TIS_TERRITORY_CODE_E_196":       46,
		"TIS_TERRITORY_CODE_E_200":       47,
		"TIS_TERRITORY_CODE_E_203":       48,
		"TIS_TERRITORY_CODE_E_204":       49,
		"TIS_TERRITORY_CODE_E_208":       50,
		"TIS_TERRITORY_CODE_E_212":       51,
		"TIS_TERRITORY_CODE_E_214":       52,
		"TIS_TERRITORY_CODE_E_218":       53,
		"TIS_TERRITORY_CODE_E_222":       54,
		"TIS_TERRITORY_CODE_E_226":       55,
		"TIS_TERRITORY_CODE_E_230":       56,
		"TIS_TERRITORY_CODE_E_231":       57,
		"TIS_TERRITORY_CODE_E_232":       58,
		"TIS_TERRITORY_CODE_E_233":       59,
		"TIS_TERRITORY_CODE_E_242":       60,
		"TIS_TERRITORY_CODE_E_246":       61,
		"TIS_TERRITORY_CODE_E_250":       62,
		"TIS_TERRITORY_CODE_E_258":       63,
		"TIS_TERRITORY_CODE_E_262":       64,
		"TIS_TERRITORY_CODE_E_266":       65,
		"TIS_TERRITORY_CODE_E_268":       66,
		"TIS_TERRITORY_CODE_E_270":       67,
		"TIS_TERRITORY_CODE_E_276":       68,
		"TIS_TERRITORY_CODE_E_278":       69,
		"TIS_TERRITORY_CODE_E_280":       70,
		"TIS_TERRITORY_CODE_E_288":       71,
		"TIS_TERRITORY_CODE_E_296":       72,
		"TIS_TERRITORY_CODE_E_300":       73,
		"TIS_TERRITORY_CODE_E_308":       74,
		"TIS_TERRITORY_CODE_E_320":       75,
		"TIS_TERRITORY_CODE_E_324":       76,
		"TIS_TERRITORY_CODE_E_328":       77,
		"TIS_TERRITORY_CODE_E_332":       78,
		"TIS_TERRITORY_CODE_E_336":       79,
		"TIS_TERRITORY_CODE_E_340":       80,
		"TIS_TERRITORY_CODE_E_344":       81,
		"TIS_TERRITORY_CODE_E_348":       82,
		"TIS_TERRITORY_CODE_E_352":       83,
		"TIS_TERRITORY_CODE_E_356":       84,
		"TIS_TERRITORY_CODE_E_360":       85,
		"TIS_TERRITORY_CODE_E_364":       86,
		"TIS_TERRITORY_CODE_E_368":       87,
		"TIS_TERRITORY_CODE_E_372":       88,
		"TIS_TERRITORY_CODE_E_376":       89,
		"TIS_TERRITORY_CODE_E_380":       90,
		"TIS_TERRITORY_CODE_E_384":       91,
		"TIS_TERRITORY_CODE_E_388":       92,
		"TIS_TERRITORY_CODE_E_392":       93,
		"TIS_TERRITORY_CODE_E_398":       94,
		"TIS_TERRITORY_CODE_E_400":       95,
		"TIS_TERRITORY_CODE_E_404":       96,
		"TIS_TERRITORY_CODE_E_408":       97,
		"TIS_TERRITORY_CODE_E_410":       98,
		"TIS_TERRITORY_CODE_E_414":       99,
		"TIS_TERRITORY_CODE_E_417":       100,
		"TIS_TERRITORY_CODE_E_418":       101,
		"TIS_TERRITORY_CODE_E_422":       102,
		"TIS_TERRITORY_CODE_E_426":       103,
		"TIS_TERRITORY_CODE_E_428":       104,
		"TIS_TERRITORY_CODE_E_430":       105,
		"TIS_TERRITORY_CODE_E_434":       106,
		"TIS_TERRITORY_CODE_E_438":       107,
		"TIS_TERRITORY_CODE_E_440":       108,
		"TIS_TERRITORY_CODE_E_442":       109,
		"TIS_TERRITORY_CODE_E_450":       110,
		"TIS_TERRITORY_CODE_E_454":       111,
		"TIS_TERRITORY_CODE_E_458":       112,
		"TIS_TERRITORY_CODE_E_462":       113,
		"TIS_TERRITORY_CODE_E_466":       114,
		"TIS_TERRITORY_CODE_E_470":       115,
		"TIS_TERRITORY_CODE_E_478":       116,
		"TIS_TERRITORY_CODE_E_480":       117,
		"TIS_TERRITORY_CODE_E_484":       118,
		"TIS_TERRITORY_CODE_E_492":       119,
		"TIS_TERRITORY_CODE_E_496":       120,
		"TIS_TERRITORY_CODE_E_498":       121,
		"TIS_TERRITORY_CODE_E_499":       122,
		"TIS_TERRITORY_CODE_E_504":       123,
		"TIS_TERRITORY_CODE_E_508":       124,
		"TIS_TERRITORY_CODE_E_512":       125,
		"TIS_TERRITORY_CODE_E_516":       126,
		"TIS_TERRITORY_CODE_E_520":       127,
		"TIS_TERRITORY_CODE_E_524":       128,
		"TIS_TERRITORY_CODE_E_528":       129,
		"TIS_TERRITORY_CODE_E_540":       130,
		"TIS_TERRITORY_CODE_E_548":       131,
		"TIS_TERRITORY_CODE_E_554":       132,
		"TIS_TERRITORY_CODE_E_558":       133,
		"TIS_TERRITORY_CODE_E_562":       134,
		"TIS_TERRITORY_CODE_E_566":       135,
		"TIS_TERRITORY_CODE_E_578":       136,
		"TIS_TERRITORY_CODE_E_583":       137,
		"TIS_TERRITORY_CODE_E_584":       138,
		"TIS_TERRITORY_CODE_E_585":       139,
		"TIS_TERRITORY_CODE_E_586":       140,
		"TIS_TERRITORY_CODE_E_591":       141,
		"TIS_TERRITORY_CODE_E_598":       142,
		"TIS_TERRITORY_CODE_E_600":       143,
		"TIS_TERRITORY_CODE_E_604":       144,
		"TIS_TERRITORY_CODE_E_608":       145,
		"TIS_TERRITORY_CODE_E_616":       146,
		"TIS_TERRITORY_CODE_E_620":       147,
		"TIS_TERRITORY_CODE_E_624":       148,
		"TIS_TERRITORY_CODE_E_626":       149,
		"TIS_TERRITORY_CODE_E_630":       150,
		"TIS_TERRITORY_CODE_E_634":       151,
		"TIS_TERRITORY_CODE_E_642":       152,
		"TIS_TERRITORY_CODE_E_643":       153,
		"TIS_TERRITORY_CODE_E_646":       154,
		"TIS_TERRITORY_CODE_E_659":       155,
		"TIS_TERRITORY_CODE_E_662":       156,
		"TIS_TERRITORY_CODE_E_670":       157,
		"TIS_TERRITORY_CODE_E_674":       158,
		"TIS_TERRITORY_CODE_E_678":       159,
		"TIS_TERRITORY_CODE_E_682":       160,
		"TIS_TERRITORY_CODE_E_686":       161,
		"TIS_TERRITORY_CODE_E_688":       162,
		"TIS_TERRITORY_CODE_E_690":       163,
		"TIS_TERRITORY_CODE_E_694":       164,
		"TIS_TERRITORY_CODE_E_702":       165,
		"TIS_TERRITORY_CODE_E_703":       166,
		"TIS_TERRITORY_CODE_E_704":       167,
		"TIS_TERRITORY_CODE_E_705":       168,
		"TIS_TERRITORY_CODE_E_706":       169,
		"TIS_TERRITORY_CODE_E_710":       170,
		"TIS_TERRITORY_CODE_E_716":       171,
		"TIS_TERRITORY_CODE_E_720":       172,
		"TIS_TERRITORY_CODE_E_724":       173,
		"TIS_TERRITORY_CODE_E_728":       174,
		"TIS_TERRITORY_CODE_E_729":       175,
		"TIS_TERRITORY_CODE_E_732":       176,
		"TIS_TERRITORY_CODE_E_736":       177,
		"TIS_TERRITORY_CODE_E_740":       178,
		"TIS_TERRITORY_CODE_E_748":       179,
		"TIS_TERRITORY_CODE_E_752":       180,
		"TIS_TERRITORY_CODE_E_756":       181,
		"TIS_TERRITORY_CODE_E_760":       182,
		"TIS_TERRITORY_CODE_E_762":       183,
		"TIS_TERRITORY_CODE_E_764":       184,
		"TIS_TERRITORY_CODE_E_768":       185,
		"TIS_TERRITORY_CODE_E_776":       186,
		"TIS_TERRITORY_CODE_E_780":       187,
		"TIS_TERRITORY_CODE_E_784":       188,
		"TIS_TERRITORY_CODE_E_788":       189,
		"TIS_TERRITORY_CODE_E_792":       190,
		"TIS_TERRITORY_CODE_E_795":       191,
		"TIS_TERRITORY_CODE_E_798":       192,
		"TIS_TERRITORY_CODE_E_800":       193,
		"TIS_TERRITORY_CODE_E_804":       194,
		"TIS_TERRITORY_CODE_E_807":       195,
		"TIS_TERRITORY_CODE_E_810":       196,
		"TIS_TERRITORY_CODE_E_818":       197,
		"TIS_TERRITORY_CODE_E_826":       198,
		"TIS_TERRITORY_CODE_E_834":       199,
		"TIS_TERRITORY_CODE_E_840":       200,
		"TIS_TERRITORY_CODE_E_854":       201,
		"TIS_TERRITORY_CODE_E_858":       202,
		"TIS_TERRITORY_CODE_E_860":       203,
		"TIS_TERRITORY_CODE_E_862":       204,
		"TIS_TERRITORY_CODE_E_882":       205,
		"TIS_TERRITORY_CODE_E_886":       206,
		"TIS_TERRITORY_CODE_E_887":       207,
		"TIS_TERRITORY_CODE_E_890":       208,
		"TIS_TERRITORY_CODE_E_891":       209,
		"TIS_TERRITORY_CODE_E_894":       210,
		"TIS_TERRITORY_CODE_E_2100":      211,
		"TIS_TERRITORY_CODE_E_2101":      212,
		"TIS_TERRITORY_CODE_E_2102":      213,
		"TIS_TERRITORY_CODE_E_2103":      214,
		"TIS_TERRITORY_CODE_E_2104":      215,
		"TIS_TERRITORY_CODE_E_2105":      216,
		"TIS_TERRITORY_CODE_E_2106":      217,
		"TIS_TERRITORY_CODE_E_2107":      218,
		"TIS_TERRITORY_CODE_E_2108":      219,
		"TIS_TERRITORY_CODE_E_2109":      220,
		"TIS_TERRITORY_CODE_E_2110":      221,
		"TIS_TERRITORY_CODE_E_2111":      222,
		"TIS_TERRITORY_CODE_E_2112":      223,
		"TIS_TERRITORY_CODE_E_2113":      224,
		"TIS_TERRITORY_CODE_E_2114":      225,
		"TIS_TERRITORY_CODE_E_2115":      226,
		"TIS_TERRITORY_CODE_E_2116":      227,
		"TIS_TERRITORY_CODE_E_2117":      228,
		"TIS_TERRITORY_CODE_E_2118":      229,
		"TIS_TERRITORY_CODE_E_2119":      230,
		"TIS_TERRITORY_CODE_E_2120":      231,
		"TIS_TERRITORY_CODE_E_2121":      232,
		"TIS_TERRITORY_CODE_E_2122":      233,
		"TIS_TERRITORY_CODE_E_2123":      234,
		"TIS_TERRITORY_CODE_E_2124":      235,
		"TIS_TERRITORY_CODE_E_2125":      236,
		"TIS_TERRITORY_CODE_E_2126":      237,
		"TIS_TERRITORY_CODE_E_2127":      238,
		"TIS_TERRITORY_CODE_E_2128":      239,
		"TIS_TERRITORY_CODE_E_2129":      240,
		"TIS_TERRITORY_CODE_E_2130":      241,
		"TIS_TERRITORY_CODE_E_2131":      242,
		"TIS_TERRITORY_CODE_E_2132":      243,
		"TIS_TERRITORY_CODE_E_2133":      244,
		"TIS_TERRITORY_CODE_E_2134":      245,
		"TIS_TERRITORY_CODE_E_2136":      246,
		"TIS_TERRITORY_CODE_E_446":       247,
	}
)

func (x TisTerritoryCode) Enum() *TisTerritoryCode {
	p := new(TisTerritoryCode)
	*p = x
	return p
}

func (x TisTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TisTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[125].Descriptor()
}

func (TisTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[125]
}

func (x TisTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TisTerritoryCode.Descriptor instead.
func (TisTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{125}
}

type TitleType int32

const (
	TitleType_TITLE_TYPE_UNSPECIFIED             TitleType = 0
	TitleType_TITLE_TYPE_ABBREVIATEDDISPLAYTITLE TitleType = 1
	TitleType_TITLE_TYPE_ALTERNATIVETITLE        TitleType = 2
	TitleType_TITLE_TYPE_DISPLAYTITLE            TitleType = 3
	TitleType_TITLE_TYPE_FIRSTLINEOFTEXT         TitleType = 4
	TitleType_TITLE_TYPE_FORMALTITLE             TitleType = 5
	TitleType_TITLE_TYPE_GROUPINGTITLE           TitleType = 6
	TitleType_TITLE_TYPE_INCORRECTTITLE          TitleType = 7
	TitleType_TITLE_TYPE_MISSPELLEDTITLE         TitleType = 8
	TitleType_TITLE_TYPE_ORIGINALTITLE           TitleType = 9
	TitleType_TITLE_TYPE_SEARCHTITLE             TitleType = 10
	TitleType_TITLE_TYPE_SORTINGTITLE            TitleType = 11
	TitleType_TITLE_TYPE_TITLEASPART             TitleType = 12
	TitleType_TITLE_TYPE_TITLEWITHOUTPUNCTUATION TitleType = 13
	TitleType_TITLE_TYPE_TRANSLATEDTITLE         TitleType = 14
	TitleType_TITLE_TYPE_UNKNOWN                 TitleType = 15
	TitleType_TITLE_TYPE_USERDEFINED             TitleType = 16
	TitleType_TITLE_TYPE_MUSICALWORKTITLE        TitleType = 17
)

// Enum value maps for TitleType.
var (
	TitleType_name = map[int32]string{
		0:  "TITLE_TYPE_UNSPECIFIED",
		1:  "TITLE_TYPE_ABBREVIATEDDISPLAYTITLE",
		2:  "TITLE_TYPE_ALTERNATIVETITLE",
		3:  "TITLE_TYPE_DISPLAYTITLE",
		4:  "TITLE_TYPE_FIRSTLINEOFTEXT",
		5:  "TITLE_TYPE_FORMALTITLE",
		6:  "TITLE_TYPE_GROUPINGTITLE",
		7:  "TITLE_TYPE_INCORRECTTITLE",
		8:  "TITLE_TYPE_MISSPELLEDTITLE",
		9:  "TITLE_TYPE_ORIGINALTITLE",
		10: "TITLE_TYPE_SEARCHTITLE",
		11: "TITLE_TYPE_SORTINGTITLE",
		12: "TITLE_TYPE_TITLEASPART",
		13: "TITLE_TYPE_TITLEWITHOUTPUNCTUATION",
		14: "TITLE_TYPE_TRANSLATEDTITLE",
		15: "TITLE_TYPE_UNKNOWN",
		16: "TITLE_TYPE_USERDEFINED",
		17: "TITLE_TYPE_MUSICALWORKTITLE",
	}
	TitleType_value = map[string]int32{
		"TITLE_TYPE_UNSPECIFIED":             0,
		"TITLE_TYPE_ABBREVIATEDDISPLAYTITLE": 1,
		"TITLE_TYPE_ALTERNATIVETITLE":        2,
		"TITLE_TYPE_DISPLAYTITLE":            3,
		"TITLE_TYPE_FIRSTLINEOFTEXT":         4,
		"TITLE_TYPE_FORMALTITLE":             5,
		"TITLE_TYPE_GROUPINGTITLE":           6,
		"TITLE_TYPE_INCORRECTTITLE":          7,
		"TITLE_TYPE_MISSPELLEDTITLE":         8,
		"TITLE_TYPE_ORIGINALTITLE":           9,
		"TITLE_TYPE_SEARCHTITLE":             10,
		"TITLE_TYPE_SORTINGTITLE":            11,
		"TITLE_TYPE_TITLEASPART":             12,
		"TITLE_TYPE_TITLEWITHOUTPUNCTUATION": 13,
		"TITLE_TYPE_TRANSLATEDTITLE":         14,
		"TITLE_TYPE_UNKNOWN":                 15,
		"TITLE_TYPE_USERDEFINED":             16,
		"TITLE_TYPE_MUSICALWORKTITLE":        17,
	}
)

func (x TitleType) Enum() *TitleType {
	p := new(TitleType)
	*p = x
	return p
}

func (x TitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[126].Descriptor()
}

func (TitleType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[126]
}

func (x TitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TitleType.Descriptor instead.
func (TitleType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{126}
}

type UnitOfBitRate int32

const (
	UnitOfBitRate_UNIT_OF_BIT_RATE_UNSPECIFIED UnitOfBitRate = 0
	UnitOfBitRate_UNIT_OF_BIT_RATE_BPS         UnitOfBitRate = 1
	UnitOfBitRate_UNIT_OF_BIT_RATE_GBPS        UnitOfBitRate = 2
	UnitOfBitRate_UNIT_OF_BIT_RATE_KBPS        UnitOfBitRate = 3
	UnitOfBitRate_UNIT_OF_BIT_RATE_MBPS        UnitOfBitRate = 4
)

// Enum value maps for UnitOfBitRate.
var (
	UnitOfBitRate_name = map[int32]string{
		0: "UNIT_OF_BIT_RATE_UNSPECIFIED",
		1: "UNIT_OF_BIT_RATE_BPS",
		2: "UNIT_OF_BIT_RATE_GBPS",
		3: "UNIT_OF_BIT_RATE_KBPS",
		4: "UNIT_OF_BIT_RATE_MBPS",
	}
	UnitOfBitRate_value = map[string]int32{
		"UNIT_OF_BIT_RATE_UNSPECIFIED": 0,
		"UNIT_OF_BIT_RATE_BPS":         1,
		"UNIT_OF_BIT_RATE_GBPS":        2,
		"UNIT_OF_BIT_RATE_KBPS":        3,
		"UNIT_OF_BIT_RATE_MBPS":        4,
	}
)

func (x UnitOfBitRate) Enum() *UnitOfBitRate {
	p := new(UnitOfBitRate)
	*p = x
	return p
}

func (x UnitOfBitRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfBitRate) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[127].Descriptor()
}

func (UnitOfBitRate) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[127]
}

func (x UnitOfBitRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfBitRate.Descriptor instead.
func (UnitOfBitRate) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{127}
}

type UnitOfConditionValue int32

const (
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_UNSPECIFIED UnitOfConditionValue = 0
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_MILLISECOND UnitOfConditionValue = 1
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_MINUTE      UnitOfConditionValue = 2
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_PERCENT     UnitOfConditionValue = 3
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_PIXEL       UnitOfConditionValue = 4
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_SECOND      UnitOfConditionValue = 5
)

// Enum value maps for UnitOfConditionValue.
var (
	UnitOfConditionValue_name = map[int32]string{
		0: "UNIT_OF_CONDITION_VALUE_UNSPECIFIED",
		1: "UNIT_OF_CONDITION_VALUE_MILLISECOND",
		2: "UNIT_OF_CONDITION_VALUE_MINUTE",
		3: "UNIT_OF_CONDITION_VALUE_PERCENT",
		4: "UNIT_OF_CONDITION_VALUE_PIXEL",
		5: "UNIT_OF_CONDITION_VALUE_SECOND",
	}
	UnitOfConditionValue_value = map[string]int32{
		"UNIT_OF_CONDITION_VALUE_UNSPECIFIED": 0,
		"UNIT_OF_CONDITION_VALUE_MILLISECOND": 1,
		"UNIT_OF_CONDITION_VALUE_MINUTE":      2,
		"UNIT_OF_CONDITION_VALUE_PERCENT":     3,
		"UNIT_OF_CONDITION_VALUE_PIXEL":       4,
		"UNIT_OF_CONDITION_VALUE_SECOND":      5,
	}
)

func (x UnitOfConditionValue) Enum() *UnitOfConditionValue {
	p := new(UnitOfConditionValue)
	*p = x
	return p
}

func (x UnitOfConditionValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfConditionValue) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[128].Descriptor()
}

func (UnitOfConditionValue) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[128]
}

func (x UnitOfConditionValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfConditionValue.Descriptor instead.
func (UnitOfConditionValue) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{128}
}

type UnitOfExtent int32

const (
	UnitOfExtent_UNIT_OF_EXTENT_UNSPECIFIED     UnitOfExtent = 0
	UnitOfExtent_UNIT_OF_EXTENT_CM              UnitOfExtent = 1
	UnitOfExtent_UNIT_OF_EXTENT_INCH            UnitOfExtent = 2
	UnitOfExtent_UNIT_OF_EXTENT_MM              UnitOfExtent = 3
	UnitOfExtent_UNIT_OF_EXTENT_PERCENTOFSCREEN UnitOfExtent = 4
	UnitOfExtent_UNIT_OF_EXTENT_PIXEL           UnitOfExtent = 5
)

// Enum value maps for UnitOfExtent.
var (
	UnitOfExtent_name = map[int32]string{
		0: "UNIT_OF_EXTENT_UNSPECIFIED",
		1: "UNIT_OF_EXTENT_CM",
		2: "UNIT_OF_EXTENT_INCH",
		3: "UNIT_OF_EXTENT_MM",
		4: "UNIT_OF_EXTENT_PERCENTOFSCREEN",
		5: "UNIT_OF_EXTENT_PIXEL",
	}
	UnitOfExtent_value = map[string]int32{
		"UNIT_OF_EXTENT_UNSPECIFIED":     0,
		"UNIT_OF_EXTENT_CM":              1,
		"UNIT_OF_EXTENT_INCH":            2,
		"UNIT_OF_EXTENT_MM":              3,
		"UNIT_OF_EXTENT_PERCENTOFSCREEN": 4,
		"UNIT_OF_EXTENT_PIXEL":           5,
	}
)

func (x UnitOfExtent) Enum() *UnitOfExtent {
	p := new(UnitOfExtent)
	*p = x
	return p
}

func (x UnitOfExtent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfExtent) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[129].Descriptor()
}

func (UnitOfExtent) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[129]
}

func (x UnitOfExtent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfExtent.Descriptor instead.
func (UnitOfExtent) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{129}
}

type UnitOfFrameRate int32

const (
	UnitOfFrameRate_UNIT_OF_FRAME_RATE_UNSPECIFIED       UnitOfFrameRate = 0
	UnitOfFrameRate_UNIT_OF_FRAME_RATE_HZ_INTERLACED     UnitOfFrameRate = 1
	UnitOfFrameRate_UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED UnitOfFrameRate = 2
)

// Enum value maps for UnitOfFrameRate.
var (
	UnitOfFrameRate_name = map[int32]string{
		0: "UNIT_OF_FRAME_RATE_UNSPECIFIED",
		1: "UNIT_OF_FRAME_RATE_HZ_INTERLACED",
		2: "UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED",
	}
	UnitOfFrameRate_value = map[string]int32{
		"UNIT_OF_FRAME_RATE_UNSPECIFIED":       0,
		"UNIT_OF_FRAME_RATE_HZ_INTERLACED":     1,
		"UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED": 2,
	}
)

func (x UnitOfFrameRate) Enum() *UnitOfFrameRate {
	p := new(UnitOfFrameRate)
	*p = x
	return p
}

func (x UnitOfFrameRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfFrameRate) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[130].Descriptor()
}

func (UnitOfFrameRate) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[130]
}

func (x UnitOfFrameRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfFrameRate.Descriptor instead.
func (UnitOfFrameRate) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{130}
}

type UnitOfFrequency int32

const (
	UnitOfFrequency_UNIT_OF_FREQUENCY_UNSPECIFIED UnitOfFrequency = 0
	UnitOfFrequency_UNIT_OF_FREQUENCY_GHZ         UnitOfFrequency = 1
	UnitOfFrequency_UNIT_OF_FREQUENCY_HZ          UnitOfFrequency = 2
	UnitOfFrequency_UNIT_OF_FREQUENCY_KHZ         UnitOfFrequency = 3
	UnitOfFrequency_UNIT_OF_FREQUENCY_MHZ         UnitOfFrequency = 4
)

// Enum value maps for UnitOfFrequency.
var (
	UnitOfFrequency_name = map[int32]string{
		0: "UNIT_OF_FREQUENCY_UNSPECIFIED",
		1: "UNIT_OF_FREQUENCY_GHZ",
		2: "UNIT_OF_FREQUENCY_HZ",
		3: "UNIT_OF_FREQUENCY_KHZ",
		4: "UNIT_OF_FREQUENCY_MHZ",
	}
	UnitOfFrequency_value = map[string]int32{
		"UNIT_OF_FREQUENCY_UNSPECIFIED": 0,
		"UNIT_OF_FREQUENCY_GHZ":         1,
		"UNIT_OF_FREQUENCY_HZ":          2,
		"UNIT_OF_FREQUENCY_KHZ":         3,
		"UNIT_OF_FREQUENCY_MHZ":         4,
	}
)

func (x UnitOfFrequency) Enum() *UnitOfFrequency {
	p := new(UnitOfFrequency)
	*p = x
	return p
}

func (x UnitOfFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[131].Descriptor()
}

func (UnitOfFrequency) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[131]
}

func (x UnitOfFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfFrequency.Descriptor instead.
func (UnitOfFrequency) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{131}
}

type UpdateIndicator int32

const (
	UpdateIndicator_UPDATE_INDICATOR_UNSPECIFIED     UpdateIndicator = 0
	UpdateIndicator_UPDATE_INDICATOR_ORIGINALMESSAGE UpdateIndicator = 1
	UpdateIndicator_UPDATE_INDICATOR_UPDATEMESSAGE   UpdateIndicator = 2
)

// Enum value maps for UpdateIndicator.
var (
	UpdateIndicator_name = map[int32]string{
		0: "UPDATE_INDICATOR_UNSPECIFIED",
		1: "UPDATE_INDICATOR_ORIGINALMESSAGE",
		2: "UPDATE_INDICATOR_UPDATEMESSAGE",
	}
	UpdateIndicator_value = map[string]int32{
		"UPDATE_INDICATOR_UNSPECIFIED":     0,
		"UPDATE_INDICATOR_ORIGINALMESSAGE": 1,
		"UPDATE_INDICATOR_UPDATEMESSAGE":   2,
	}
)

func (x UpdateIndicator) Enum() *UpdateIndicator {
	p := new(UpdateIndicator)
	*p = x
	return p
}

func (x UpdateIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[132].Descriptor()
}

func (UpdateIndicator) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[132]
}

func (x UpdateIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateIndicator.Descriptor instead.
func (UpdateIndicator) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{132}
}

type UseType int32

const (
	UseType_USE_TYPE_UNSPECIFIED                    UseType = 0
	UseType_USE_TYPE_ASPERCONTRACT                  UseType = 1
	UseType_USE_TYPE_BROADCAST                      UseType = 2
	UseType_USE_TYPE_CONDITIONALDOWNLOAD            UseType = 3
	UseType_USE_TYPE_CONTENTINFLUENCEDSTREAM        UseType = 4
	UseType_USE_TYPE_DISPLAY                        UseType = 5
	UseType_USE_TYPE_DOWNLOAD                       UseType = 6
	UseType_USE_TYPE_DUBFORADVERTISEMENT            UseType = 7
	UseType_USE_TYPE_DUBFORLIVEPERFORMANCE          UseType = 8
	UseType_USE_TYPE_DUBFORMOVIES                   UseType = 9
	UseType_USE_TYPE_DUBFORMUSICONHOLD              UseType = 10
	UseType_USE_TYPE_DUBFORPUBLICPERFORMANCE        UseType = 11
	UseType_USE_TYPE_DUBFORRADIO                    UseType = 12
	UseType_USE_TYPE_DUBFORTV                       UseType = 13
	UseType_USE_TYPE_EXTRACTFORINTERNET             UseType = 14
	UseType_USE_TYPE_KIOSKDOWNLOAD                  UseType = 15
	UseType_USE_TYPE_NARROWCAST                     UseType = 16
	UseType_USE_TYPE_NONINTERACTIVESTREAM           UseType = 17
	UseType_USE_TYPE_ONDEMANDSTREAM                 UseType = 18
	UseType_USE_TYPE_PERFORMASMUSICONHOLD           UseType = 19
	UseType_USE_TYPE_PERFORMINLIVEPERFORMANCE       UseType = 20
	UseType_USE_TYPE_PERFORMINPUBLIC                UseType = 21
	UseType_USE_TYPE_PERMANENTDOWNLOAD              UseType = 22
	UseType_USE_TYPE_PLAYBACK                       UseType = 23
	UseType_USE_TYPE_PLAYINPUBLIC                   UseType = 24
	UseType_USE_TYPE_PODCAST                        UseType = 25
	UseType_USE_TYPE_PRINT                          UseType = 26
	UseType_USE_TYPE_PRIVATECOPY                    UseType = 27
	UseType_USE_TYPE_PURCHASEASPHYSICALPRODUCT      UseType = 28
	UseType_USE_TYPE_RENT                           UseType = 29
	UseType_USE_TYPE_SIMULCAST                      UseType = 30
	UseType_USE_TYPE_STREAM                         UseType = 31
	UseType_USE_TYPE_TETHEREDDOWNLOAD               UseType = 32
	UseType_USE_TYPE_TIMEINFLUENCEDSTREAM           UseType = 33
	UseType_USE_TYPE_UNKNOWN                        UseType = 34
	UseType_USE_TYPE_USEASALERTTONE                 UseType = 35
	UseType_USE_TYPE_USEASDEVICE                    UseType = 36
	UseType_USE_TYPE_USEASKARAOKE                   UseType = 37
	UseType_USE_TYPE_USEASRINGBACKTONE              UseType = 38
	UseType_USE_TYPE_USEASRINGBACKTUNE              UseType = 39
	UseType_USE_TYPE_USEASRINGTONE                  UseType = 40
	UseType_USE_TYPE_USEASRINGTUNE                  UseType = 41
	UseType_USE_TYPE_USEASSCREENSAVER               UseType = 42
	UseType_USE_TYPE_USEASVOICEMAIL                 UseType = 43
	UseType_USE_TYPE_USEASWALLPAPER                 UseType = 44
	UseType_USE_TYPE_USEFORIDENTIFICATION           UseType = 45
	UseType_USE_TYPE_USEINMOBILEPHONEMESSAGING      UseType = 46
	UseType_USE_TYPE_USEINPHONELISTENING            UseType = 47
	UseType_USE_TYPE_USERDEFINED                    UseType = 48
	UseType_USE_TYPE_USERMAKEAVAILABLELABELPROVIDED UseType = 49
	UseType_USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED  UseType = 50
	UseType_USE_TYPE_WEBCAST                        UseType = 51
	UseType_USE_TYPE_CABLE                          UseType = 52
	UseType_USE_TYPE_DUB                            UseType = 53
	UseType_USE_TYPE_DUBFORONDEMANDSTREAMING        UseType = 54
	UseType_USE_TYPE_PERFORM                        UseType = 55
	UseType_USE_TYPE_USE                            UseType = 56
	UseType_USE_TYPE_USEFORGENERATIVEAI             UseType = 57
)

// Enum value maps for UseType.
var (
	UseType_name = map[int32]string{
		0:  "USE_TYPE_UNSPECIFIED",
		1:  "USE_TYPE_ASPERCONTRACT",
		2:  "USE_TYPE_BROADCAST",
		3:  "USE_TYPE_CONDITIONALDOWNLOAD",
		4:  "USE_TYPE_CONTENTINFLUENCEDSTREAM",
		5:  "USE_TYPE_DISPLAY",
		6:  "USE_TYPE_DOWNLOAD",
		7:  "USE_TYPE_DUBFORADVERTISEMENT",
		8:  "USE_TYPE_DUBFORLIVEPERFORMANCE",
		9:  "USE_TYPE_DUBFORMOVIES",
		10: "USE_TYPE_DUBFORMUSICONHOLD",
		11: "USE_TYPE_DUBFORPUBLICPERFORMANCE",
		12: "USE_TYPE_DUBFORRADIO",
		13: "USE_TYPE_DUBFORTV",
		14: "USE_TYPE_EXTRACTFORINTERNET",
		15: "USE_TYPE_KIOSKDOWNLOAD",
		16: "USE_TYPE_NARROWCAST",
		17: "USE_TYPE_NONINTERACTIVESTREAM",
		18: "USE_TYPE_ONDEMANDSTREAM",
		19: "USE_TYPE_PERFORMASMUSICONHOLD",
		20: "USE_TYPE_PERFORMINLIVEPERFORMANCE",
		21: "USE_TYPE_PERFORMINPUBLIC",
		22: "USE_TYPE_PERMANENTDOWNLOAD",
		23: "USE_TYPE_PLAYBACK",
		24: "USE_TYPE_PLAYINPUBLIC",
		25: "USE_TYPE_PODCAST",
		26: "USE_TYPE_PRINT",
		27: "USE_TYPE_PRIVATECOPY",
		28: "USE_TYPE_PURCHASEASPHYSICALPRODUCT",
		29: "USE_TYPE_RENT",
		30: "USE_TYPE_SIMULCAST",
		31: "USE_TYPE_STREAM",
		32: "USE_TYPE_TETHEREDDOWNLOAD",
		33: "USE_TYPE_TIMEINFLUENCEDSTREAM",
		34: "USE_TYPE_UNKNOWN",
		35: "USE_TYPE_USEASALERTTONE",
		36: "USE_TYPE_USEASDEVICE",
		37: "USE_TYPE_USEASKARAOKE",
		38: "USE_TYPE_USEASRINGBACKTONE",
		39: "USE_TYPE_USEASRINGBACKTUNE",
		40: "USE_TYPE_USEASRINGTONE",
		41: "USE_TYPE_USEASRINGTUNE",
		42: "USE_TYPE_USEASSCREENSAVER",
		43: "USE_TYPE_USEASVOICEMAIL",
		44: "USE_TYPE_USEASWALLPAPER",
		45: "USE_TYPE_USEFORIDENTIFICATION",
		46: "USE_TYPE_USEINMOBILEPHONEMESSAGING",
		47: "USE_TYPE_USEINPHONELISTENING",
		48: "USE_TYPE_USERDEFINED",
		49: "USE_TYPE_USERMAKEAVAILABLELABELPROVIDED",
		50: "USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED",
		51: "USE_TYPE_WEBCAST",
		52: "USE_TYPE_CABLE",
		53: "USE_TYPE_DUB",
		54: "USE_TYPE_DUBFORONDEMANDSTREAMING",
		55: "USE_TYPE_PERFORM",
		56: "USE_TYPE_USE",
		57: "USE_TYPE_USEFORGENERATIVEAI",
	}
	UseType_value = map[string]int32{
		"USE_TYPE_UNSPECIFIED":                    0,
		"USE_TYPE_ASPERCONTRACT":                  1,
		"USE_TYPE_BROADCAST":                      2,
		"USE_TYPE_CONDITIONALDOWNLOAD":            3,
		"USE_TYPE_CONTENTINFLUENCEDSTREAM":        4,
		"USE_TYPE_DISPLAY":                        5,
		"USE_TYPE_DOWNLOAD":                       6,
		"USE_TYPE_DUBFORADVERTISEMENT":            7,
		"USE_TYPE_DUBFORLIVEPERFORMANCE":          8,
		"USE_TYPE_DUBFORMOVIES":                   9,
		"USE_TYPE_DUBFORMUSICONHOLD":              10,
		"USE_TYPE_DUBFORPUBLICPERFORMANCE":        11,
		"USE_TYPE_DUBFORRADIO":                    12,
		"USE_TYPE_DUBFORTV":                       13,
		"USE_TYPE_EXTRACTFORINTERNET":             14,
		"USE_TYPE_KIOSKDOWNLOAD":                  15,
		"USE_TYPE_NARROWCAST":                     16,
		"USE_TYPE_NONINTERACTIVESTREAM":           17,
		"USE_TYPE_ONDEMANDSTREAM":                 18,
		"USE_TYPE_PERFORMASMUSICONHOLD":           19,
		"USE_TYPE_PERFORMINLIVEPERFORMANCE":       20,
		"USE_TYPE_PERFORMINPUBLIC":                21,
		"USE_TYPE_PERMANENTDOWNLOAD":              22,
		"USE_TYPE_PLAYBACK":                       23,
		"USE_TYPE_PLAYINPUBLIC":                   24,
		"USE_TYPE_PODCAST":                        25,
		"USE_TYPE_PRINT":                          26,
		"USE_TYPE_PRIVATECOPY":                    27,
		"USE_TYPE_PURCHASEASPHYSICALPRODUCT":      28,
		"USE_TYPE_RENT":                           29,
		"USE_TYPE_SIMULCAST":                      30,
		"USE_TYPE_STREAM":                         31,
		"USE_TYPE_TETHEREDDOWNLOAD":               32,
		"USE_TYPE_TIMEINFLUENCEDSTREAM":           33,
		"USE_TYPE_UNKNOWN":                        34,
		"USE_TYPE_USEASALERTTONE":                 35,
		"USE_TYPE_USEASDEVICE":                    36,
		"USE_TYPE_USEASKARAOKE":                   37,
		"USE_TYPE_USEASRINGBACKTONE":              38,
		"USE_TYPE_USEASRINGBACKTUNE":              39,
		"USE_TYPE_USEASRINGTONE":                  40,
		"USE_TYPE_USEASRINGTUNE":                  41,
		"USE_TYPE_USEASSCREENSAVER":               42,
		"USE_TYPE_USEASVOICEMAIL":                 43,
		"USE_TYPE_USEASWALLPAPER":                 44,
		"USE_TYPE_USEFORIDENTIFICATION":           45,
		"USE_TYPE_USEINMOBILEPHONEMESSAGING":      46,
		"USE_TYPE_USEINPHONELISTENING":            47,
		"USE_TYPE_USERDEFINED":                    48,
		"USE_TYPE_USERMAKEAVAILABLELABELPROVIDED": 49,
		"USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED":  50,
		"USE_TYPE_WEBCAST":                        51,
		"USE_TYPE_CABLE":                          52,
		"USE_TYPE_DUB":                            53,
		"USE_TYPE_DUBFORONDEMANDSTREAMING":        54,
		"USE_TYPE_PERFORM":                        55,
		"USE_TYPE_USE":                            56,
		"USE_TYPE_USEFORGENERATIVEAI":             57,
	}
)

func (x UseType) Enum() *UseType {
	p := new(UseType)
	*p = x
	return p
}

func (x UseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[133].Descriptor()
}

func (UseType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[133]
}

func (x UseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseType.Descriptor instead.
func (UseType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{133}
}

type UserInterfaceType int32

const (
	UserInterfaceType_USER_INTERFACE_TYPE_UNSPECIFIED          UserInterfaceType = 0
	UserInterfaceType_USER_INTERFACE_TYPE_ASPERCONTRACT        UserInterfaceType = 1
	UserInterfaceType_USER_INTERFACE_TYPE_CONNECTEDDEVICE      UserInterfaceType = 2
	UserInterfaceType_USER_INTERFACE_TYPE_GAMECONSOLE          UserInterfaceType = 3
	UserInterfaceType_USER_INTERFACE_TYPE_JUKEBOX              UserInterfaceType = 4
	UserInterfaceType_USER_INTERFACE_TYPE_KARAOKEMACHINE       UserInterfaceType = 5
	UserInterfaceType_USER_INTERFACE_TYPE_KIOSK                UserInterfaceType = 6
	UserInterfaceType_USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX  UserInterfaceType = 7
	UserInterfaceType_USER_INTERFACE_TYPE_PERSONALCOMPUTER     UserInterfaceType = 8
	UserInterfaceType_USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER  UserInterfaceType = 9
	UserInterfaceType_USER_INTERFACE_TYPE_PORTABLEDEVICE       UserInterfaceType = 10
	UserInterfaceType_USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX UserInterfaceType = 11
	UserInterfaceType_USER_INTERFACE_TYPE_UNKNOWN              UserInterfaceType = 12
	UserInterfaceType_USER_INTERFACE_TYPE_USERDEFINED          UserInterfaceType = 13
	UserInterfaceType_USER_INTERFACE_TYPE_SMARTSPEAKERS        UserInterfaceType = 14
)

// Enum value maps for UserInterfaceType.
var (
	UserInterfaceType_name = map[int32]string{
		0:  "USER_INTERFACE_TYPE_UNSPECIFIED",
		1:  "USER_INTERFACE_TYPE_ASPERCONTRACT",
		2:  "USER_INTERFACE_TYPE_CONNECTEDDEVICE",
		3:  "USER_INTERFACE_TYPE_GAMECONSOLE",
		4:  "USER_INTERFACE_TYPE_JUKEBOX",
		5:  "USER_INTERFACE_TYPE_KARAOKEMACHINE",
		6:  "USER_INTERFACE_TYPE_KIOSK",
		7:  "USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX",
		8:  "USER_INTERFACE_TYPE_PERSONALCOMPUTER",
		9:  "USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER",
		10: "USER_INTERFACE_TYPE_PORTABLEDEVICE",
		11: "USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX",
		12: "USER_INTERFACE_TYPE_UNKNOWN",
		13: "USER_INTERFACE_TYPE_USERDEFINED",
		14: "USER_INTERFACE_TYPE_SMARTSPEAKERS",
	}
	UserInterfaceType_value = map[string]int32{
		"USER_INTERFACE_TYPE_UNSPECIFIED":          0,
		"USER_INTERFACE_TYPE_ASPERCONTRACT":        1,
		"USER_INTERFACE_TYPE_CONNECTEDDEVICE":      2,
		"USER_INTERFACE_TYPE_GAMECONSOLE":          3,
		"USER_INTERFACE_TYPE_JUKEBOX":              4,
		"USER_INTERFACE_TYPE_KARAOKEMACHINE":       5,
		"USER_INTERFACE_TYPE_KIOSK":                6,
		"USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX":  7,
		"USER_INTERFACE_TYPE_PERSONALCOMPUTER":     8,
		"USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER":  9,
		"USER_INTERFACE_TYPE_PORTABLEDEVICE":       10,
		"USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX": 11,
		"USER_INTERFACE_TYPE_UNKNOWN":              12,
		"USER_INTERFACE_TYPE_USERDEFINED":          13,
		"USER_INTERFACE_TYPE_SMARTSPEAKERS":        14,
	}
)

func (x UserInterfaceType) Enum() *UserInterfaceType {
	p := new(UserInterfaceType)
	*p = x
	return p
}

func (x UserInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[134].Descriptor()
}

func (UserInterfaceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[134]
}

func (x UserInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInterfaceType.Descriptor instead.
func (UserInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{134}
}

type ValueType int32

const (
	ValueType_VALUE_TYPE_UNSPECIFIED ValueType = 0
	ValueType_VALUE_TYPE_CALCULATED  ValueType = 1
	ValueType_VALUE_TYPE_MAXIMUM     ValueType = 2
	ValueType_VALUE_TYPE_MINIMUM     ValueType = 3
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "VALUE_TYPE_UNSPECIFIED",
		1: "VALUE_TYPE_CALCULATED",
		2: "VALUE_TYPE_MAXIMUM",
		3: "VALUE_TYPE_MINIMUM",
	}
	ValueType_value = map[string]int32{
		"VALUE_TYPE_UNSPECIFIED": 0,
		"VALUE_TYPE_CALCULATED":  1,
		"VALUE_TYPE_MAXIMUM":     2,
		"VALUE_TYPE_MINIMUM":     3,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[135].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[135]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{135}
}

type VideoCodecType int32

const (
	VideoCodecType_VIDEO_CODEC_TYPE_UNSPECIFIED VideoCodecType = 0
	VideoCodecType_VIDEO_CODEC_TYPE_AVC         VideoCodecType = 1
	VideoCodecType_VIDEO_CODEC_TYPE_H_261       VideoCodecType = 2
	VideoCodecType_VIDEO_CODEC_TYPE_H_263       VideoCodecType = 3
	VideoCodecType_VIDEO_CODEC_TYPE_MPEG_1      VideoCodecType = 4
	VideoCodecType_VIDEO_CODEC_TYPE_MPEG_2      VideoCodecType = 5
	VideoCodecType_VIDEO_CODEC_TYPE_MPEG_4      VideoCodecType = 6
	VideoCodecType_VIDEO_CODEC_TYPE_QUICKTIME   VideoCodecType = 7
	VideoCodecType_VIDEO_CODEC_TYPE_REALVIDEO   VideoCodecType = 8
	VideoCodecType_VIDEO_CODEC_TYPE_SHOCKWAVE   VideoCodecType = 9
	VideoCodecType_VIDEO_CODEC_TYPE_UNKNOWN     VideoCodecType = 10
	VideoCodecType_VIDEO_CODEC_TYPE_USERDEFINED VideoCodecType = 11
	VideoCodecType_VIDEO_CODEC_TYPE_WMV         VideoCodecType = 12
)

// Enum value maps for VideoCodecType.
var (
	VideoCodecType_name = map[int32]string{
		0:  "VIDEO_CODEC_TYPE_UNSPECIFIED",
		1:  "VIDEO_CODEC_TYPE_AVC",
		2:  "VIDEO_CODEC_TYPE_H_261",
		3:  "VIDEO_CODEC_TYPE_H_263",
		4:  "VIDEO_CODEC_TYPE_MPEG_1",
		5:  "VIDEO_CODEC_TYPE_MPEG_2",
		6:  "VIDEO_CODEC_TYPE_MPEG_4",
		7:  "VIDEO_CODEC_TYPE_QUICKTIME",
		8:  "VIDEO_CODEC_TYPE_REALVIDEO",
		9:  "VIDEO_CODEC_TYPE_SHOCKWAVE",
		10: "VIDEO_CODEC_TYPE_UNKNOWN",
		11: "VIDEO_CODEC_TYPE_USERDEFINED",
		12: "VIDEO_CODEC_TYPE_WMV",
	}
	VideoCodecType_value = map[string]int32{
		"VIDEO_CODEC_TYPE_UNSPECIFIED": 0,
		"VIDEO_CODEC_TYPE_AVC":         1,
		"VIDEO_CODEC_TYPE_H_261":       2,
		"VIDEO_CODEC_TYPE_H_263":       3,
		"VIDEO_CODEC_TYPE_MPEG_1":      4,
		"VIDEO_CODEC_TYPE_MPEG_2":      5,
		"VIDEO_CODEC_TYPE_MPEG_4":      6,
		"VIDEO_CODEC_TYPE_QUICKTIME":   7,
		"VIDEO_CODEC_TYPE_REALVIDEO":   8,
		"VIDEO_CODEC_TYPE_SHOCKWAVE":   9,
		"VIDEO_CODEC_TYPE_UNKNOWN":     10,
		"VIDEO_CODEC_TYPE_USERDEFINED": 11,
		"VIDEO_CODEC_TYPE_WMV":         12,
	}
)

func (x VideoCodecType) Enum() *VideoCodecType {
	p := new(VideoCodecType)
	*p = x
	return p
}

func (x VideoCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[136].Descriptor()
}

func (VideoCodecType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[136]
}

func (x VideoCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCodecType.Descriptor instead.
func (VideoCodecType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{136}
}

type VideoContentType int32

const (
	VideoContentType_VIDEO_CONTENT_TYPE_UNSPECIFIED            VideoContentType = 0
	VideoContentType_VIDEO_CONTENT_TYPE_ACTEDVIDEO             VideoContentType = 1
	VideoContentType_VIDEO_CONTENT_TYPE_ANIMATION              VideoContentType = 2
	VideoContentType_VIDEO_CONTENT_TYPE_ANIMATIONANDACTEDVIDEO VideoContentType = 3
)

// Enum value maps for VideoContentType.
var (
	VideoContentType_name = map[int32]string{
		0: "VIDEO_CONTENT_TYPE_UNSPECIFIED",
		1: "VIDEO_CONTENT_TYPE_ACTEDVIDEO",
		2: "VIDEO_CONTENT_TYPE_ANIMATION",
		3: "VIDEO_CONTENT_TYPE_ANIMATIONANDACTEDVIDEO",
	}
	VideoContentType_value = map[string]int32{
		"VIDEO_CONTENT_TYPE_UNSPECIFIED":            0,
		"VIDEO_CONTENT_TYPE_ACTEDVIDEO":             1,
		"VIDEO_CONTENT_TYPE_ANIMATION":              2,
		"VIDEO_CONTENT_TYPE_ANIMATIONANDACTEDVIDEO": 3,
	}
)

func (x VideoContentType) Enum() *VideoContentType {
	p := new(VideoContentType)
	*p = x
	return p
}

func (x VideoContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[137].Descriptor()
}

func (VideoContentType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[137]
}

func (x VideoContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoContentType.Descriptor instead.
func (VideoContentType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{137}
}

type VideoDefinitionType int32

const (
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_UNSPECIFIED        VideoDefinitionType = 0
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_HIGHDEFINITION     VideoDefinitionType = 1
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_STANDARDDEFINITION VideoDefinitionType = 2
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_USERDEFINED        VideoDefinitionType = 3
)

// Enum value maps for VideoDefinitionType.
var (
	VideoDefinitionType_name = map[int32]string{
		0: "VIDEO_DEFINITION_TYPE_UNSPECIFIED",
		1: "VIDEO_DEFINITION_TYPE_HIGHDEFINITION",
		2: "VIDEO_DEFINITION_TYPE_STANDARDDEFINITION",
		3: "VIDEO_DEFINITION_TYPE_USERDEFINED",
	}
	VideoDefinitionType_value = map[string]int32{
		"VIDEO_DEFINITION_TYPE_UNSPECIFIED":        0,
		"VIDEO_DEFINITION_TYPE_HIGHDEFINITION":     1,
		"VIDEO_DEFINITION_TYPE_STANDARDDEFINITION": 2,
		"VIDEO_DEFINITION_TYPE_USERDEFINED":        3,
	}
)

func (x VideoDefinitionType) Enum() *VideoDefinitionType {
	p := new(VideoDefinitionType)
	*p = x
	return p
}

func (x VideoDefinitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoDefinitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[138].Descriptor()
}

func (VideoDefinitionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[138]
}

func (x VideoDefinitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoDefinitionType.Descriptor instead.
func (VideoDefinitionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{138}
}

type VideoType int32

const (
	VideoType_VIDEO_TYPE_UNSPECIFIED                   VideoType = 0
	VideoType_VIDEO_TYPE_ADVERTISEMENTVIDEO            VideoType = 1
	VideoType_VIDEO_TYPE_ANIMATION                     VideoType = 2
	VideoType_VIDEO_TYPE_BEHINDTHESCENES               VideoType = 3
	VideoType_VIDEO_TYPE_CONCERTCLIP                   VideoType = 4
	VideoType_VIDEO_TYPE_CONCERTVIDEO                  VideoType = 5
	VideoType_VIDEO_TYPE_CORPORATEFILM                 VideoType = 6
	VideoType_VIDEO_TYPE_CREDITS                       VideoType = 7
	VideoType_VIDEO_TYPE_DOCUMENTARY                   VideoType = 8
	VideoType_VIDEO_TYPE_EDUCATIONALVIDEO              VideoType = 9
	VideoType_VIDEO_TYPE_EPISODE                       VideoType = 10
	VideoType_VIDEO_TYPE_FEATUREFILM                   VideoType = 11
	VideoType_VIDEO_TYPE_INFOMERCIALVIDEO              VideoType = 12
	VideoType_VIDEO_TYPE_INTERVIEW                     VideoType = 13
	VideoType_VIDEO_TYPE_KARAOKE                       VideoType = 14
	VideoType_VIDEO_TYPE_LIVEEVENTVIDEO                VideoType = 15
	VideoType_VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO      VideoType = 16
	VideoType_VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO   VideoType = 17
	VideoType_VIDEO_TYPE_LYRICVIDEO                    VideoType = 18
	VideoType_VIDEO_TYPE_MENU                          VideoType = 19
	VideoType_VIDEO_TYPE_MULTIMEDIAVIDEO               VideoType = 20
	VideoType_VIDEO_TYPE_MUSICALWORKCLIP               VideoType = 21
	VideoType_VIDEO_TYPE_MUSICALWORKREADALONGVIDEO     VideoType = 22
	VideoType_VIDEO_TYPE_MUSICALWORKTRAILER            VideoType = 23
	VideoType_VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER       VideoType = 24
	VideoType_VIDEO_TYPE_NEWS                          VideoType = 25
	VideoType_VIDEO_TYPE_NONMUSICALWORKCLIP            VideoType = 26
	VideoType_VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO  VideoType = 27
	VideoType_VIDEO_TYPE_NONMUSICALWORKTRAILER         VideoType = 28
	VideoType_VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER    VideoType = 29
	VideoType_VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING VideoType = 30
	VideoType_VIDEO_TYPE_OPERAVIDEO                    VideoType = 31
	VideoType_VIDEO_TYPE_PERFORMANCE                   VideoType = 32
	VideoType_VIDEO_TYPE_SEASON                        VideoType = 33
	VideoType_VIDEO_TYPE_SERIES                        VideoType = 34
	VideoType_VIDEO_TYPE_SHORTFILM                     VideoType = 35
	VideoType_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO     VideoType = 36
	VideoType_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO  VideoType = 37
	VideoType_VIDEO_TYPE_SPECIALEVENT                  VideoType = 38
	VideoType_VIDEO_TYPE_SPORT                         VideoType = 39
	VideoType_VIDEO_TYPE_THEATRICALWORKVIDEO           VideoType = 40
	VideoType_VIDEO_TYPE_TRAILERVIDEO                  VideoType = 41
	VideoType_VIDEO_TYPE_TVFILM                        VideoType = 42
	VideoType_VIDEO_TYPE_TVSHOWVIDEO                   VideoType = 43
	VideoType_VIDEO_TYPE_UNKNOWN                       VideoType = 44
	VideoType_VIDEO_TYPE_USERDEFINED                   VideoType = 45
	VideoType_VIDEO_TYPE_VIDEOCHAPTER                  VideoType = 46
	VideoType_VIDEO_TYPE_VIDEOSTEM                     VideoType = 47
	VideoType_VIDEO_TYPE_ADULTCONTENT                  VideoType = 48
	VideoType_VIDEO_TYPE_ADVICEMAGAZINE                VideoType = 49
	VideoType_VIDEO_TYPE_BALLETVIDEO                   VideoType = 50
	VideoType_VIDEO_TYPE_BLACKANDWHITEVIDEO            VideoType = 51
	VideoType_VIDEO_TYPE_CHILDRENSFILM                 VideoType = 52
	VideoType_VIDEO_TYPE_COLORIZEDVIDEO                VideoType = 53
	VideoType_VIDEO_TYPE_COLUMNVIDEO                   VideoType = 54
	VideoType_VIDEO_TYPE_FICTION                       VideoType = 55
	VideoType_VIDEO_TYPE_MAGAZINE                      VideoType = 56
	VideoType_VIDEO_TYPE_READALONGVIDEO                VideoType = 57
	VideoType_VIDEO_TYPE_REALITYTVSHOWVIDEO            VideoType = 58
	VideoType_VIDEO_TYPE_SERIALAUDIOVISUALRECORDING    VideoType = 59
	VideoType_VIDEO_TYPE_SILENTVIDEO                   VideoType = 60
	VideoType_VIDEO_TYPE_SKETCHVIDEO                   VideoType = 61
	VideoType_VIDEO_TYPE_SOAPSITCOM                    VideoType = 62
	VideoType_VIDEO_TYPE_TVPROGRAM                     VideoType = 63
	VideoType_VIDEO_TYPE_VIDEOCLIP                     VideoType = 64
	VideoType_VIDEO_TYPE_VIDEOREPORT                   VideoType = 65
	VideoType_VIDEO_TYPE_DRAMA                         VideoType = 66
	VideoType_VIDEO_TYPE_DRAMATICOMUSICALVIDEO         VideoType = 67
	VideoType_VIDEO_TYPE_INTERACTIVERESOURCE           VideoType = 68
	VideoType_VIDEO_TYPE_WEBRESOURCE                   VideoType = 69
)

// Enum value maps for VideoType.
var (
	VideoType_name = map[int32]string{
		0:  "VIDEO_TYPE_UNSPECIFIED",
		1:  "VIDEO_TYPE_ADVERTISEMENTVIDEO",
		2:  "VIDEO_TYPE_ANIMATION",
		3:  "VIDEO_TYPE_BEHINDTHESCENES",
		4:  "VIDEO_TYPE_CONCERTCLIP",
		5:  "VIDEO_TYPE_CONCERTVIDEO",
		6:  "VIDEO_TYPE_CORPORATEFILM",
		7:  "VIDEO_TYPE_CREDITS",
		8:  "VIDEO_TYPE_DOCUMENTARY",
		9:  "VIDEO_TYPE_EDUCATIONALVIDEO",
		10: "VIDEO_TYPE_EPISODE",
		11: "VIDEO_TYPE_FEATUREFILM",
		12: "VIDEO_TYPE_INFOMERCIALVIDEO",
		13: "VIDEO_TYPE_INTERVIEW",
		14: "VIDEO_TYPE_KARAOKE",
		15: "VIDEO_TYPE_LIVEEVENTVIDEO",
		16: "VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO",
		17: "VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO",
		18: "VIDEO_TYPE_LYRICVIDEO",
		19: "VIDEO_TYPE_MENU",
		20: "VIDEO_TYPE_MULTIMEDIAVIDEO",
		21: "VIDEO_TYPE_MUSICALWORKCLIP",
		22: "VIDEO_TYPE_MUSICALWORKREADALONGVIDEO",
		23: "VIDEO_TYPE_MUSICALWORKTRAILER",
		24: "VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER",
		25: "VIDEO_TYPE_NEWS",
		26: "VIDEO_TYPE_NONMUSICALWORKCLIP",
		27: "VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO",
		28: "VIDEO_TYPE_NONMUSICALWORKTRAILER",
		29: "VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER",
		30: "VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING",
		31: "VIDEO_TYPE_OPERAVIDEO",
		32: "VIDEO_TYPE_PERFORMANCE",
		33: "VIDEO_TYPE_SEASON",
		34: "VIDEO_TYPE_SERIES",
		35: "VIDEO_TYPE_SHORTFILM",
		36: "VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO",
		37: "VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO",
		38: "VIDEO_TYPE_SPECIALEVENT",
		39: "VIDEO_TYPE_SPORT",
		40: "VIDEO_TYPE_THEATRICALWORKVIDEO",
		41: "VIDEO_TYPE_TRAILERVIDEO",
		42: "VIDEO_TYPE_TVFILM",
		43: "VIDEO_TYPE_TVSHOWVIDEO",
		44: "VIDEO_TYPE_UNKNOWN",
		45: "VIDEO_TYPE_USERDEFINED",
		46: "VIDEO_TYPE_VIDEOCHAPTER",
		47: "VIDEO_TYPE_VIDEOSTEM",
		48: "VIDEO_TYPE_ADULTCONTENT",
		49: "VIDEO_TYPE_ADVICEMAGAZINE",
		50: "VIDEO_TYPE_BALLETVIDEO",
		51: "VIDEO_TYPE_BLACKANDWHITEVIDEO",
		52: "VIDEO_TYPE_CHILDRENSFILM",
		53: "VIDEO_TYPE_COLORIZEDVIDEO",
		54: "VIDEO_TYPE_COLUMNVIDEO",
		55: "VIDEO_TYPE_FICTION",
		56: "VIDEO_TYPE_MAGAZINE",
		57: "VIDEO_TYPE_READALONGVIDEO",
		58: "VIDEO_TYPE_REALITYTVSHOWVIDEO",
		59: "VIDEO_TYPE_SERIALAUDIOVISUALRECORDING",
		60: "VIDEO_TYPE_SILENTVIDEO",
		61: "VIDEO_TYPE_SKETCHVIDEO",
		62: "VIDEO_TYPE_SOAPSITCOM",
		63: "VIDEO_TYPE_TVPROGRAM",
		64: "VIDEO_TYPE_VIDEOCLIP",
		65: "VIDEO_TYPE_VIDEOREPORT",
		66: "VIDEO_TYPE_DRAMA",
		67: "VIDEO_TYPE_DRAMATICOMUSICALVIDEO",
		68: "VIDEO_TYPE_INTERACTIVERESOURCE",
		69: "VIDEO_TYPE_WEBRESOURCE",
	}
	VideoType_value = map[string]int32{
		"VIDEO_TYPE_UNSPECIFIED":                   0,
		"VIDEO_TYPE_ADVERTISEMENTVIDEO":            1,
		"VIDEO_TYPE_ANIMATION":                     2,
		"VIDEO_TYPE_BEHINDTHESCENES":               3,
		"VIDEO_TYPE_CONCERTCLIP":                   4,
		"VIDEO_TYPE_CONCERTVIDEO":                  5,
		"VIDEO_TYPE_CORPORATEFILM":                 6,
		"VIDEO_TYPE_CREDITS":                       7,
		"VIDEO_TYPE_DOCUMENTARY":                   8,
		"VIDEO_TYPE_EDUCATIONALVIDEO":              9,
		"VIDEO_TYPE_EPISODE":                       10,
		"VIDEO_TYPE_FEATUREFILM":                   11,
		"VIDEO_TYPE_INFOMERCIALVIDEO":              12,
		"VIDEO_TYPE_INTERVIEW":                     13,
		"VIDEO_TYPE_KARAOKE":                       14,
		"VIDEO_TYPE_LIVEEVENTVIDEO":                15,
		"VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO":      16,
		"VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO":   17,
		"VIDEO_TYPE_LYRICVIDEO":                    18,
		"VIDEO_TYPE_MENU":                          19,
		"VIDEO_TYPE_MULTIMEDIAVIDEO":               20,
		"VIDEO_TYPE_MUSICALWORKCLIP":               21,
		"VIDEO_TYPE_MUSICALWORKREADALONGVIDEO":     22,
		"VIDEO_TYPE_MUSICALWORKTRAILER":            23,
		"VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER":       24,
		"VIDEO_TYPE_NEWS":                          25,
		"VIDEO_TYPE_NONMUSICALWORKCLIP":            26,
		"VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO":  27,
		"VIDEO_TYPE_NONMUSICALWORKTRAILER":         28,
		"VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER":    29,
		"VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING": 30,
		"VIDEO_TYPE_OPERAVIDEO":                    31,
		"VIDEO_TYPE_PERFORMANCE":                   32,
		"VIDEO_TYPE_SEASON":                        33,
		"VIDEO_TYPE_SERIES":                        34,
		"VIDEO_TYPE_SHORTFILM":                     35,
		"VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO":     36,
		"VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO":  37,
		"VIDEO_TYPE_SPECIALEVENT":                  38,
		"VIDEO_TYPE_SPORT":                         39,
		"VIDEO_TYPE_THEATRICALWORKVIDEO":           40,
		"VIDEO_TYPE_TRAILERVIDEO":                  41,
		"VIDEO_TYPE_TVFILM":                        42,
		"VIDEO_TYPE_TVSHOWVIDEO":                   43,
		"VIDEO_TYPE_UNKNOWN":                       44,
		"VIDEO_TYPE_USERDEFINED":                   45,
		"VIDEO_TYPE_VIDEOCHAPTER":                  46,
		"VIDEO_TYPE_VIDEOSTEM":                     47,
		"VIDEO_TYPE_ADULTCONTENT":                  48,
		"VIDEO_TYPE_ADVICEMAGAZINE":                49,
		"VIDEO_TYPE_BALLETVIDEO":                   50,
		"VIDEO_TYPE_BLACKANDWHITEVIDEO":            51,
		"VIDEO_TYPE_CHILDRENSFILM":                 52,
		"VIDEO_TYPE_COLORIZEDVIDEO":                53,
		"VIDEO_TYPE_COLUMNVIDEO":                   54,
		"VIDEO_TYPE_FICTION":                       55,
		"VIDEO_TYPE_MAGAZINE":                      56,
		"VIDEO_TYPE_READALONGVIDEO":                57,
		"VIDEO_TYPE_REALITYTVSHOWVIDEO":            58,
		"VIDEO_TYPE_SERIALAUDIOVISUALRECORDING":    59,
		"VIDEO_TYPE_SILENTVIDEO":                   60,
		"VIDEO_TYPE_SKETCHVIDEO":                   61,
		"VIDEO_TYPE_SOAPSITCOM":                    62,
		"VIDEO_TYPE_TVPROGRAM":                     63,
		"VIDEO_TYPE_VIDEOCLIP":                     64,
		"VIDEO_TYPE_VIDEOREPORT":                   65,
		"VIDEO_TYPE_DRAMA":                         66,
		"VIDEO_TYPE_DRAMATICOMUSICALVIDEO":         67,
		"VIDEO_TYPE_INTERACTIVERESOURCE":           68,
		"VIDEO_TYPE_WEBRESOURCE":                   69,
	}
)

func (x VideoType) Enum() *VideoType {
	p := new(VideoType)
	*p = x
	return p
}

func (x VideoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[139].Descriptor()
}

func (VideoType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[139]
}

func (x VideoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoType.Descriptor instead.
func (VideoType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{139}
}

type VisualPerceptionType int32

const (
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_UNSPECIFIED VisualPerceptionType = 0
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_BACKGROUND  VisualPerceptionType = 1
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_USERDEFINED VisualPerceptionType = 2
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_VISUAL      VisualPerceptionType = 3
)

// Enum value maps for VisualPerceptionType.
var (
	VisualPerceptionType_name = map[int32]string{
		0: "VISUAL_PERCEPTION_TYPE_UNSPECIFIED",
		1: "VISUAL_PERCEPTION_TYPE_BACKGROUND",
		2: "VISUAL_PERCEPTION_TYPE_USERDEFINED",
		3: "VISUAL_PERCEPTION_TYPE_VISUAL",
	}
	VisualPerceptionType_value = map[string]int32{
		"VISUAL_PERCEPTION_TYPE_UNSPECIFIED": 0,
		"VISUAL_PERCEPTION_TYPE_BACKGROUND":  1,
		"VISUAL_PERCEPTION_TYPE_USERDEFINED": 2,
		"VISUAL_PERCEPTION_TYPE_VISUAL":      3,
	}
)

func (x VisualPerceptionType) Enum() *VisualPerceptionType {
	p := new(VisualPerceptionType)
	*p = x
	return p
}

func (x VisualPerceptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisualPerceptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[140].Descriptor()
}

func (VisualPerceptionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[140]
}

func (x VisualPerceptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisualPerceptionType.Descriptor instead.
func (VisualPerceptionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{140}
}

type VocalType int32

const (
	VocalType_VOCAL_TYPE_UNSPECIFIED  VocalType = 0
	VocalType_VOCAL_TYPE_INSTRUMENTAL VocalType = 1
	VocalType_VOCAL_TYPE_USERDEFINED  VocalType = 2
	VocalType_VOCAL_TYPE_VOCAL        VocalType = 3
)

// Enum value maps for VocalType.
var (
	VocalType_name = map[int32]string{
		0: "VOCAL_TYPE_UNSPECIFIED",
		1: "VOCAL_TYPE_INSTRUMENTAL",
		2: "VOCAL_TYPE_USERDEFINED",
		3: "VOCAL_TYPE_VOCAL",
	}
	VocalType_value = map[string]int32{
		"VOCAL_TYPE_UNSPECIFIED":  0,
		"VOCAL_TYPE_INSTRUMENTAL": 1,
		"VOCAL_TYPE_USERDEFINED":  2,
		"VOCAL_TYPE_VOCAL":        3,
	}
)

func (x VocalType) Enum() *VocalType {
	p := new(VocalType)
	*p = x
	return p
}

func (x VocalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VocalType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[141].Descriptor()
}

func (VocalType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[141]
}

func (x VocalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VocalType.Descriptor instead.
func (VocalType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{141}
}

type WsMessageStatus int32

const (
	WsMessageStatus_WS_MESSAGE_STATUS_UNSPECIFIED                     WsMessageStatus = 0
	WsMessageStatus_WS_MESSAGE_STATUS_BACKENDPROCESSINGERROR          WsMessageStatus = 1
	WsMessageStatus_WS_MESSAGE_STATUS_NOVALIDMESSAGERECEIVED          WsMessageStatus = 2
	WsMessageStatus_WS_MESSAGE_STATUS_VALIDMESSAGEQUEUEDFORPROCESSING WsMessageStatus = 3
	WsMessageStatus_WS_MESSAGE_STATUS_VALIDMESSAGERECEIVED            WsMessageStatus = 4
)

// Enum value maps for WsMessageStatus.
var (
	WsMessageStatus_name = map[int32]string{
		0: "WS_MESSAGE_STATUS_UNSPECIFIED",
		1: "WS_MESSAGE_STATUS_BACKENDPROCESSINGERROR",
		2: "WS_MESSAGE_STATUS_NOVALIDMESSAGERECEIVED",
		3: "WS_MESSAGE_STATUS_VALIDMESSAGEQUEUEDFORPROCESSING",
		4: "WS_MESSAGE_STATUS_VALIDMESSAGERECEIVED",
	}
	WsMessageStatus_value = map[string]int32{
		"WS_MESSAGE_STATUS_UNSPECIFIED":                     0,
		"WS_MESSAGE_STATUS_BACKENDPROCESSINGERROR":          1,
		"WS_MESSAGE_STATUS_NOVALIDMESSAGERECEIVED":          2,
		"WS_MESSAGE_STATUS_VALIDMESSAGEQUEUEDFORPROCESSING": 3,
		"WS_MESSAGE_STATUS_VALIDMESSAGERECEIVED":            4,
	}
)

func (x WsMessageStatus) Enum() *WsMessageStatus {
	p := new(WsMessageStatus)
	*p = x
	return p
}

func (x WsMessageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WsMessageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[142].Descriptor()
}

func (WsMessageStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[142]
}

func (x WsMessageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WsMessageStatus.Descriptor instead.
func (WsMessageStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{142}
}

type TerritoryCode int32

const (
	TerritoryCode_TERRITORY_CODE_UNSPECIFIED TerritoryCode = 0
	TerritoryCode_TERRITORY_CODE_AD          TerritoryCode = 1
	TerritoryCode_TERRITORY_CODE_AE          TerritoryCode = 2
	TerritoryCode_TERRITORY_CODE_AF          TerritoryCode = 3
	TerritoryCode_TERRITORY_CODE_AG          TerritoryCode = 4
	TerritoryCode_TERRITORY_CODE_AI          TerritoryCode = 5
	TerritoryCode_TERRITORY_CODE_AL          TerritoryCode = 6
	TerritoryCode_TERRITORY_CODE_AM          TerritoryCode = 7
	TerritoryCode_TERRITORY_CODE_AN          TerritoryCode = 8
	TerritoryCode_TERRITORY_CODE_AO          TerritoryCode = 9
	TerritoryCode_TERRITORY_CODE_AQ          TerritoryCode = 10
	TerritoryCode_TERRITORY_CODE_AR          TerritoryCode = 11
	TerritoryCode_TERRITORY_CODE_AS          TerritoryCode = 12
	TerritoryCode_TERRITORY_CODE_AT          TerritoryCode = 13
	TerritoryCode_TERRITORY_CODE_AU          TerritoryCode = 14
	TerritoryCode_TERRITORY_CODE_AW          TerritoryCode = 15
	TerritoryCode_TERRITORY_CODE_AX          TerritoryCode = 16
	TerritoryCode_TERRITORY_CODE_AZ          TerritoryCode = 17
	TerritoryCode_TERRITORY_CODE_BA          TerritoryCode = 18
	TerritoryCode_TERRITORY_CODE_BB          TerritoryCode = 19
	TerritoryCode_TERRITORY_CODE_BD          TerritoryCode = 20
	TerritoryCode_TERRITORY_CODE_BE          TerritoryCode = 21
	TerritoryCode_TERRITORY_CODE_BF          TerritoryCode = 22
	TerritoryCode_TERRITORY_CODE_BG          TerritoryCode = 23
	TerritoryCode_TERRITORY_CODE_BH          TerritoryCode = 24
	TerritoryCode_TERRITORY_CODE_BI          TerritoryCode = 25
	TerritoryCode_TERRITORY_CODE_BJ          TerritoryCode = 26
	TerritoryCode_TERRITORY_CODE_BL          TerritoryCode = 27
	TerritoryCode_TERRITORY_CODE_BM          TerritoryCode = 28
	TerritoryCode_TERRITORY_CODE_BN          TerritoryCode = 29
	TerritoryCode_TERRITORY_CODE_BO          TerritoryCode = 30
	TerritoryCode_TERRITORY_CODE_BQ          TerritoryCode = 31
	TerritoryCode_TERRITORY_CODE_BR          TerritoryCode = 32
	TerritoryCode_TERRITORY_CODE_BS          TerritoryCode = 33
	TerritoryCode_TERRITORY_CODE_BT          TerritoryCode = 34
	TerritoryCode_TERRITORY_CODE_BV          TerritoryCode = 35
	TerritoryCode_TERRITORY_CODE_BW          TerritoryCode = 36
	TerritoryCode_TERRITORY_CODE_BY          TerritoryCode = 37
	TerritoryCode_TERRITORY_CODE_BZ          TerritoryCode = 38
	TerritoryCode_TERRITORY_CODE_CA          TerritoryCode = 39
	TerritoryCode_TERRITORY_CODE_CC          TerritoryCode = 40
	TerritoryCode_TERRITORY_CODE_CD          TerritoryCode = 41
	TerritoryCode_TERRITORY_CODE_CF          TerritoryCode = 42
	TerritoryCode_TERRITORY_CODE_CG          TerritoryCode = 43
	TerritoryCode_TERRITORY_CODE_CH          TerritoryCode = 44
	TerritoryCode_TERRITORY_CODE_CI          TerritoryCode = 45
	TerritoryCode_TERRITORY_CODE_CK          TerritoryCode = 46
	TerritoryCode_TERRITORY_CODE_CL          TerritoryCode = 47
	TerritoryCode_TERRITORY_CODE_CM          TerritoryCode = 48
	TerritoryCode_TERRITORY_CODE_CN          TerritoryCode = 49
	TerritoryCode_TERRITORY_CODE_CO          TerritoryCode = 50
	TerritoryCode_TERRITORY_CODE_CR          TerritoryCode = 51
	TerritoryCode_TERRITORY_CODE_CS          TerritoryCode = 52
	TerritoryCode_TERRITORY_CODE_CU          TerritoryCode = 53
	TerritoryCode_TERRITORY_CODE_CV          TerritoryCode = 54
	TerritoryCode_TERRITORY_CODE_CW          TerritoryCode = 55
	TerritoryCode_TERRITORY_CODE_CX          TerritoryCode = 56
	TerritoryCode_TERRITORY_CODE_CY          TerritoryCode = 57
	TerritoryCode_TERRITORY_CODE_CZ          TerritoryCode = 58
	TerritoryCode_TERRITORY_CODE_DE          TerritoryCode = 59
	TerritoryCode_TERRITORY_CODE_DJ          TerritoryCode = 60
	TerritoryCode_TERRITORY_CODE_DK          TerritoryCode = 61
	TerritoryCode_TERRITORY_CODE_DM          TerritoryCode = 62
	TerritoryCode_TERRITORY_CODE_DO          TerritoryCode = 63
	TerritoryCode_TERRITORY_CODE_DZ          TerritoryCode = 64
	TerritoryCode_TERRITORY_CODE_EC          TerritoryCode = 65
	TerritoryCode_TERRITORY_CODE_EE          TerritoryCode = 66
	TerritoryCode_TERRITORY_CODE_EG          TerritoryCode = 67
	TerritoryCode_TERRITORY_CODE_EH          TerritoryCode = 68
	TerritoryCode_TERRITORY_CODE_ER          TerritoryCode = 69
	TerritoryCode_TERRITORY_CODE_ES          TerritoryCode = 70
	TerritoryCode_TERRITORY_CODE_ES_CE       TerritoryCode = 71
	TerritoryCode_TERRITORY_CODE_ES_CN       TerritoryCode = 72
	TerritoryCode_TERRITORY_CODE_ES_ML       TerritoryCode = 73
	TerritoryCode_TERRITORY_CODE_ET          TerritoryCode = 74
	TerritoryCode_TERRITORY_CODE_FI          TerritoryCode = 75
	TerritoryCode_TERRITORY_CODE_FJ          TerritoryCode = 76
	TerritoryCode_TERRITORY_CODE_FK          TerritoryCode = 77
	TerritoryCode_TERRITORY_CODE_FM          TerritoryCode = 78
	TerritoryCode_TERRITORY_CODE_FO          TerritoryCode = 79
	TerritoryCode_TERRITORY_CODE_FR          TerritoryCode = 80
	TerritoryCode_TERRITORY_CODE_GA          TerritoryCode = 81
	TerritoryCode_TERRITORY_CODE_GB          TerritoryCode = 82
	TerritoryCode_TERRITORY_CODE_GD          TerritoryCode = 83
	TerritoryCode_TERRITORY_CODE_GE          TerritoryCode = 84
	TerritoryCode_TERRITORY_CODE_GF          TerritoryCode = 85
	TerritoryCode_TERRITORY_CODE_GG          TerritoryCode = 86
	TerritoryCode_TERRITORY_CODE_GH          TerritoryCode = 87
	TerritoryCode_TERRITORY_CODE_GI          TerritoryCode = 88
	TerritoryCode_TERRITORY_CODE_GL          TerritoryCode = 89
	TerritoryCode_TERRITORY_CODE_GM          TerritoryCode = 90
	TerritoryCode_TERRITORY_CODE_GN          TerritoryCode = 91
	TerritoryCode_TERRITORY_CODE_GP          TerritoryCode = 92
	TerritoryCode_TERRITORY_CODE_GQ          TerritoryCode = 93
	TerritoryCode_TERRITORY_CODE_GR          TerritoryCode = 94
	TerritoryCode_TERRITORY_CODE_GS          TerritoryCode = 95
	TerritoryCode_TERRITORY_CODE_GT          TerritoryCode = 96
	TerritoryCode_TERRITORY_CODE_GU          TerritoryCode = 97
	TerritoryCode_TERRITORY_CODE_GW          TerritoryCode = 98
	TerritoryCode_TERRITORY_CODE_GY          TerritoryCode = 99
	TerritoryCode_TERRITORY_CODE_HK          TerritoryCode = 100
	TerritoryCode_TERRITORY_CODE_HM          TerritoryCode = 101
	TerritoryCode_TERRITORY_CODE_HN          TerritoryCode = 102
	TerritoryCode_TERRITORY_CODE_HR          TerritoryCode = 103
	TerritoryCode_TERRITORY_CODE_HT          TerritoryCode = 104
	TerritoryCode_TERRITORY_CODE_HU          TerritoryCode = 105
	TerritoryCode_TERRITORY_CODE_ID          TerritoryCode = 106
	TerritoryCode_TERRITORY_CODE_IE          TerritoryCode = 107
	TerritoryCode_TERRITORY_CODE_IL          TerritoryCode = 108
	TerritoryCode_TERRITORY_CODE_IM          TerritoryCode = 109
	TerritoryCode_TERRITORY_CODE_IN          TerritoryCode = 110
	TerritoryCode_TERRITORY_CODE_IO          TerritoryCode = 111
	TerritoryCode_TERRITORY_CODE_IQ          TerritoryCode = 112
	TerritoryCode_TERRITORY_CODE_IR          TerritoryCode = 113
	TerritoryCode_TERRITORY_CODE_IS          TerritoryCode = 114
	TerritoryCode_TERRITORY_CODE_IT          TerritoryCode = 115
	TerritoryCode_TERRITORY_CODE_JE          TerritoryCode = 116
	TerritoryCode_TERRITORY_CODE_JM          TerritoryCode = 117
	TerritoryCode_TERRITORY_CODE_JO          TerritoryCode = 118
	TerritoryCode_TERRITORY_CODE_JP          TerritoryCode = 119
	TerritoryCode_TERRITORY_CODE_KE          TerritoryCode = 120
	TerritoryCode_TERRITORY_CODE_KG          TerritoryCode = 121
	TerritoryCode_TERRITORY_CODE_KH          TerritoryCode = 122
	TerritoryCode_TERRITORY_CODE_KI          TerritoryCode = 123
	TerritoryCode_TERRITORY_CODE_KM          TerritoryCode = 124
	TerritoryCode_TERRITORY_CODE_KN          TerritoryCode = 125
	TerritoryCode_TERRITORY_CODE_KP          TerritoryCode = 126
	TerritoryCode_TERRITORY_CODE_KR          TerritoryCode = 127
	TerritoryCode_TERRITORY_CODE_KW          TerritoryCode = 128
	TerritoryCode_TERRITORY_CODE_KY          TerritoryCode = 129
	TerritoryCode_TERRITORY_CODE_KZ          TerritoryCode = 130
	TerritoryCode_TERRITORY_CODE_LA          TerritoryCode = 131
	TerritoryCode_TERRITORY_CODE_LB          TerritoryCode = 132
	TerritoryCode_TERRITORY_CODE_LC          TerritoryCode = 133
	TerritoryCode_TERRITORY_CODE_LI          TerritoryCode = 134
	TerritoryCode_TERRITORY_CODE_LK          TerritoryCode = 135
	TerritoryCode_TERRITORY_CODE_LR          TerritoryCode = 136
	TerritoryCode_TERRITORY_CODE_LS          TerritoryCode = 137
	TerritoryCode_TERRITORY_CODE_LT          TerritoryCode = 138
	TerritoryCode_TERRITORY_CODE_LU          TerritoryCode = 139
	TerritoryCode_TERRITORY_CODE_LV          TerritoryCode = 140
	TerritoryCode_TERRITORY_CODE_LY          TerritoryCode = 141
	TerritoryCode_TERRITORY_CODE_MA          TerritoryCode = 142
	TerritoryCode_TERRITORY_CODE_MC          TerritoryCode = 143
	TerritoryCode_TERRITORY_CODE_MD          TerritoryCode = 144
	TerritoryCode_TERRITORY_CODE_ME          TerritoryCode = 145
	TerritoryCode_TERRITORY_CODE_MF          TerritoryCode = 146
	TerritoryCode_TERRITORY_CODE_MG          TerritoryCode = 147
	TerritoryCode_TERRITORY_CODE_MH          TerritoryCode = 148
	TerritoryCode_TERRITORY_CODE_MK          TerritoryCode = 149
	TerritoryCode_TERRITORY_CODE_ML          TerritoryCode = 150
	TerritoryCode_TERRITORY_CODE_MM          TerritoryCode = 151
	TerritoryCode_TERRITORY_CODE_MN          TerritoryCode = 152
	TerritoryCode_TERRITORY_CODE_MO          TerritoryCode = 153
	TerritoryCode_TERRITORY_CODE_MP          TerritoryCode = 154
	TerritoryCode_TERRITORY_CODE_MQ          TerritoryCode = 155
	TerritoryCode_TERRITORY_CODE_MR          TerritoryCode = 156
	TerritoryCode_TERRITORY_CODE_MS          TerritoryCode = 157
	TerritoryCode_TERRITORY_CODE_MT          TerritoryCode = 158
	TerritoryCode_TERRITORY_CODE_MU          TerritoryCode = 159
	TerritoryCode_TERRITORY_CODE_MV          TerritoryCode = 160
	TerritoryCode_TERRITORY_CODE_MW          TerritoryCode = 161
	TerritoryCode_TERRITORY_CODE_MX          TerritoryCode = 162
	TerritoryCode_TERRITORY_CODE_MY          TerritoryCode = 163
	TerritoryCode_TERRITORY_CODE_MZ          TerritoryCode = 164
	TerritoryCode_TERRITORY_CODE_NA          TerritoryCode = 165
	TerritoryCode_TERRITORY_CODE_NC          TerritoryCode = 166
	TerritoryCode_TERRITORY_CODE_NE          TerritoryCode = 167
	TerritoryCode_TERRITORY_CODE_NF          TerritoryCode = 168
	TerritoryCode_TERRITORY_CODE_NG          TerritoryCode = 169
	TerritoryCode_TERRITORY_CODE_NI          TerritoryCode = 170
	TerritoryCode_TERRITORY_CODE_NL          TerritoryCode = 171
	TerritoryCode_TERRITORY_CODE_NO          TerritoryCode = 172
	TerritoryCode_TERRITORY_CODE_NP          TerritoryCode = 173
	TerritoryCode_TERRITORY_CODE_NR          TerritoryCode = 174
	TerritoryCode_TERRITORY_CODE_NU          TerritoryCode = 175
	TerritoryCode_TERRITORY_CODE_NZ          TerritoryCode = 176
	TerritoryCode_TERRITORY_CODE_OM          TerritoryCode = 177
	TerritoryCode_TERRITORY_CODE_PA          TerritoryCode = 178
	TerritoryCode_TERRITORY_CODE_PE          TerritoryCode = 179
	TerritoryCode_TERRITORY_CODE_PF          TerritoryCode = 180
	TerritoryCode_TERRITORY_CODE_PG          TerritoryCode = 181
	TerritoryCode_TERRITORY_CODE_PH          TerritoryCode = 182
	TerritoryCode_TERRITORY_CODE_PK          TerritoryCode = 183
	TerritoryCode_TERRITORY_CODE_PL          TerritoryCode = 184
	TerritoryCode_TERRITORY_CODE_PM          TerritoryCode = 185
	TerritoryCode_TERRITORY_CODE_PN          TerritoryCode = 186
	TerritoryCode_TERRITORY_CODE_PR          TerritoryCode = 187
	TerritoryCode_TERRITORY_CODE_PS          TerritoryCode = 188
	TerritoryCode_TERRITORY_CODE_PT          TerritoryCode = 189
	TerritoryCode_TERRITORY_CODE_PW          TerritoryCode = 190
	TerritoryCode_TERRITORY_CODE_PY          TerritoryCode = 191
	TerritoryCode_TERRITORY_CODE_QA          TerritoryCode = 192
	TerritoryCode_TERRITORY_CODE_RE          TerritoryCode = 193
	TerritoryCode_TERRITORY_CODE_RO          TerritoryCode = 194
	TerritoryCode_TERRITORY_CODE_RS          TerritoryCode = 195
	TerritoryCode_TERRITORY_CODE_RU          TerritoryCode = 196
	TerritoryCode_TERRITORY_CODE_RW          TerritoryCode = 197
	TerritoryCode_TERRITORY_CODE_SA          TerritoryCode = 198
	TerritoryCode_TERRITORY_CODE_SB          TerritoryCode = 199
	TerritoryCode_TERRITORY_CODE_SC          TerritoryCode = 200
	TerritoryCode_TERRITORY_CODE_SD          TerritoryCode = 201
	TerritoryCode_TERRITORY_CODE_SE          TerritoryCode = 202
	TerritoryCode_TERRITORY_CODE_SG          TerritoryCode = 203
	TerritoryCode_TERRITORY_CODE_SH          TerritoryCode = 204
	TerritoryCode_TERRITORY_CODE_SI          TerritoryCode = 205
	TerritoryCode_TERRITORY_CODE_SJ          TerritoryCode = 206
	TerritoryCode_TERRITORY_CODE_SK          TerritoryCode = 207
	TerritoryCode_TERRITORY_CODE_SL          TerritoryCode = 208
	TerritoryCode_TERRITORY_CODE_SM          TerritoryCode = 209
	TerritoryCode_TERRITORY_CODE_SN          TerritoryCode = 210
	TerritoryCode_TERRITORY_CODE_SO          TerritoryCode = 211
	TerritoryCode_TERRITORY_CODE_SR          TerritoryCode = 212
	TerritoryCode_TERRITORY_CODE_SS          TerritoryCode = 213
	TerritoryCode_TERRITORY_CODE_ST          TerritoryCode = 214
	TerritoryCode_TERRITORY_CODE_SV          TerritoryCode = 215
	TerritoryCode_TERRITORY_CODE_SX          TerritoryCode = 216
	TerritoryCode_TERRITORY_CODE_SY          TerritoryCode = 217
	TerritoryCode_TERRITORY_CODE_SZ          TerritoryCode = 218
	TerritoryCode_TERRITORY_CODE_TC          TerritoryCode = 219
	TerritoryCode_TERRITORY_CODE_TD          TerritoryCode = 220
	TerritoryCode_TERRITORY_CODE_TF          TerritoryCode = 221
	TerritoryCode_TERRITORY_CODE_TG          TerritoryCode = 222
	TerritoryCode_TERRITORY_CODE_TH          TerritoryCode = 223
	TerritoryCode_TERRITORY_CODE_TJ          TerritoryCode = 224
	TerritoryCode_TERRITORY_CODE_TK          TerritoryCode = 225
	TerritoryCode_TERRITORY_CODE_TL          TerritoryCode = 226
	TerritoryCode_TERRITORY_CODE_TM          TerritoryCode = 227
	TerritoryCode_TERRITORY_CODE_TN          TerritoryCode = 228
	TerritoryCode_TERRITORY_CODE_TO          TerritoryCode = 229
	TerritoryCode_TERRITORY_CODE_TR          TerritoryCode = 230
	TerritoryCode_TERRITORY_CODE_TT          TerritoryCode = 231
	TerritoryCode_TERRITORY_CODE_TV          TerritoryCode = 232
	TerritoryCode_TERRITORY_CODE_TW          TerritoryCode = 233
	TerritoryCode_TERRITORY_CODE_TZ          TerritoryCode = 234
	TerritoryCode_TERRITORY_CODE_UA          TerritoryCode = 235
	TerritoryCode_TERRITORY_CODE_UG          TerritoryCode = 236
	TerritoryCode_TERRITORY_CODE_UM          TerritoryCode = 237
	TerritoryCode_TERRITORY_CODE_US          TerritoryCode = 238
	TerritoryCode_TERRITORY_CODE_UY          TerritoryCode = 239
	TerritoryCode_TERRITORY_CODE_UZ          TerritoryCode = 240
	TerritoryCode_TERRITORY_CODE_VA          TerritoryCode = 241
	TerritoryCode_TERRITORY_CODE_VC          TerritoryCode = 242
	TerritoryCode_TERRITORY_CODE_VE          TerritoryCode = 243
	TerritoryCode_TERRITORY_CODE_VG          TerritoryCode = 244
	TerritoryCode_TERRITORY_CODE_VI          TerritoryCode = 245
	TerritoryCode_TERRITORY_CODE_VN          TerritoryCode = 246
	TerritoryCode_TERRITORY_CODE_VU          TerritoryCode = 247
	TerritoryCode_TERRITORY_CODE_WF          TerritoryCode = 248
	TerritoryCode_TERRITORY_CODE_WS          TerritoryCode = 249
	TerritoryCode_TERRITORY_CODE_YE          TerritoryCode = 250
	TerritoryCode_TERRITORY_CODE_YT          TerritoryCode = 251
	TerritoryCode_TERRITORY_CODE_ZA          TerritoryCode = 252
	TerritoryCode_TERRITORY_CODE_ZM          TerritoryCode = 253
	TerritoryCode_TERRITORY_CODE_ZW          TerritoryCode = 254
)

// Enum value maps for TerritoryCode.
var (
	TerritoryCode_name = map[int32]string{
		0:   "TERRITORY_CODE_UNSPECIFIED",
		1:   "TERRITORY_CODE_AD",
		2:   "TERRITORY_CODE_AE",
		3:   "TERRITORY_CODE_AF",
		4:   "TERRITORY_CODE_AG",
		5:   "TERRITORY_CODE_AI",
		6:   "TERRITORY_CODE_AL",
		7:   "TERRITORY_CODE_AM",
		8:   "TERRITORY_CODE_AN",
		9:   "TERRITORY_CODE_AO",
		10:  "TERRITORY_CODE_AQ",
		11:  "TERRITORY_CODE_AR",
		12:  "TERRITORY_CODE_AS",
		13:  "TERRITORY_CODE_AT",
		14:  "TERRITORY_CODE_AU",
		15:  "TERRITORY_CODE_AW",
		16:  "TERRITORY_CODE_AX",
		17:  "TERRITORY_CODE_AZ",
		18:  "TERRITORY_CODE_BA",
		19:  "TERRITORY_CODE_BB",
		20:  "TERRITORY_CODE_BD",
		21:  "TERRITORY_CODE_BE",
		22:  "TERRITORY_CODE_BF",
		23:  "TERRITORY_CODE_BG",
		24:  "TERRITORY_CODE_BH",
		25:  "TERRITORY_CODE_BI",
		26:  "TERRITORY_CODE_BJ",
		27:  "TERRITORY_CODE_BL",
		28:  "TERRITORY_CODE_BM",
		29:  "TERRITORY_CODE_BN",
		30:  "TERRITORY_CODE_BO",
		31:  "TERRITORY_CODE_BQ",
		32:  "TERRITORY_CODE_BR",
		33:  "TERRITORY_CODE_BS",
		34:  "TERRITORY_CODE_BT",
		35:  "TERRITORY_CODE_BV",
		36:  "TERRITORY_CODE_BW",
		37:  "TERRITORY_CODE_BY",
		38:  "TERRITORY_CODE_BZ",
		39:  "TERRITORY_CODE_CA",
		40:  "TERRITORY_CODE_CC",
		41:  "TERRITORY_CODE_CD",
		42:  "TERRITORY_CODE_CF",
		43:  "TERRITORY_CODE_CG",
		44:  "TERRITORY_CODE_CH",
		45:  "TERRITORY_CODE_CI",
		46:  "TERRITORY_CODE_CK",
		47:  "TERRITORY_CODE_CL",
		48:  "TERRITORY_CODE_CM",
		49:  "TERRITORY_CODE_CN",
		50:  "TERRITORY_CODE_CO",
		51:  "TERRITORY_CODE_CR",
		52:  "TERRITORY_CODE_CS",
		53:  "TERRITORY_CODE_CU",
		54:  "TERRITORY_CODE_CV",
		55:  "TERRITORY_CODE_CW",
		56:  "TERRITORY_CODE_CX",
		57:  "TERRITORY_CODE_CY",
		58:  "TERRITORY_CODE_CZ",
		59:  "TERRITORY_CODE_DE",
		60:  "TERRITORY_CODE_DJ",
		61:  "TERRITORY_CODE_DK",
		62:  "TERRITORY_CODE_DM",
		63:  "TERRITORY_CODE_DO",
		64:  "TERRITORY_CODE_DZ",
		65:  "TERRITORY_CODE_EC",
		66:  "TERRITORY_CODE_EE",
		67:  "TERRITORY_CODE_EG",
		68:  "TERRITORY_CODE_EH",
		69:  "TERRITORY_CODE_ER",
		70:  "TERRITORY_CODE_ES",
		71:  "TERRITORY_CODE_ES_CE",
		72:  "TERRITORY_CODE_ES_CN",
		73:  "TERRITORY_CODE_ES_ML",
		74:  "TERRITORY_CODE_ET",
		75:  "TERRITORY_CODE_FI",
		76:  "TERRITORY_CODE_FJ",
		77:  "TERRITORY_CODE_FK",
		78:  "TERRITORY_CODE_FM",
		79:  "TERRITORY_CODE_FO",
		80:  "TERRITORY_CODE_FR",
		81:  "TERRITORY_CODE_GA",
		82:  "TERRITORY_CODE_GB",
		83:  "TERRITORY_CODE_GD",
		84:  "TERRITORY_CODE_GE",
		85:  "TERRITORY_CODE_GF",
		86:  "TERRITORY_CODE_GG",
		87:  "TERRITORY_CODE_GH",
		88:  "TERRITORY_CODE_GI",
		89:  "TERRITORY_CODE_GL",
		90:  "TERRITORY_CODE_GM",
		91:  "TERRITORY_CODE_GN",
		92:  "TERRITORY_CODE_GP",
		93:  "TERRITORY_CODE_GQ",
		94:  "TERRITORY_CODE_GR",
		95:  "TERRITORY_CODE_GS",
		96:  "TERRITORY_CODE_GT",
		97:  "TERRITORY_CODE_GU",
		98:  "TERRITORY_CODE_GW",
		99:  "TERRITORY_CODE_GY",
		100: "TERRITORY_CODE_HK",
		101: "TERRITORY_CODE_HM",
		102: "TERRITORY_CODE_HN",
		103: "TERRITORY_CODE_HR",
		104: "TERRITORY_CODE_HT",
		105: "TERRITORY_CODE_HU",
		106: "TERRITORY_CODE_ID",
		107: "TERRITORY_CODE_IE",
		108: "TERRITORY_CODE_IL",
		109: "TERRITORY_CODE_IM",
		110: "TERRITORY_CODE_IN",
		111: "TERRITORY_CODE_IO",
		112: "TERRITORY_CODE_IQ",
		113: "TERRITORY_CODE_IR",
		114: "TERRITORY_CODE_IS",
		115: "TERRITORY_CODE_IT",
		116: "TERRITORY_CODE_JE",
		117: "TERRITORY_CODE_JM",
		118: "TERRITORY_CODE_JO",
		119: "TERRITORY_CODE_JP",
		120: "TERRITORY_CODE_KE",
		121: "TERRITORY_CODE_KG",
		122: "TERRITORY_CODE_KH",
		123: "TERRITORY_CODE_KI",
		124: "TERRITORY_CODE_KM",
		125: "TERRITORY_CODE_KN",
		126: "TERRITORY_CODE_KP",
		127: "TERRITORY_CODE_KR",
		128: "TERRITORY_CODE_KW",
		129: "TERRITORY_CODE_KY",
		130: "TERRITORY_CODE_KZ",
		131: "TERRITORY_CODE_LA",
		132: "TERRITORY_CODE_LB",
		133: "TERRITORY_CODE_LC",
		134: "TERRITORY_CODE_LI",
		135: "TERRITORY_CODE_LK",
		136: "TERRITORY_CODE_LR",
		137: "TERRITORY_CODE_LS",
		138: "TERRITORY_CODE_LT",
		139: "TERRITORY_CODE_LU",
		140: "TERRITORY_CODE_LV",
		141: "TERRITORY_CODE_LY",
		142: "TERRITORY_CODE_MA",
		143: "TERRITORY_CODE_MC",
		144: "TERRITORY_CODE_MD",
		145: "TERRITORY_CODE_ME",
		146: "TERRITORY_CODE_MF",
		147: "TERRITORY_CODE_MG",
		148: "TERRITORY_CODE_MH",
		149: "TERRITORY_CODE_MK",
		150: "TERRITORY_CODE_ML",
		151: "TERRITORY_CODE_MM",
		152: "TERRITORY_CODE_MN",
		153: "TERRITORY_CODE_MO",
		154: "TERRITORY_CODE_MP",
		155: "TERRITORY_CODE_MQ",
		156: "TERRITORY_CODE_MR",
		157: "TERRITORY_CODE_MS",
		158: "TERRITORY_CODE_MT",
		159: "TERRITORY_CODE_MU",
		160: "TERRITORY_CODE_MV",
		161: "TERRITORY_CODE_MW",
		162: "TERRITORY_CODE_MX",
		163: "TERRITORY_CODE_MY",
		164: "TERRITORY_CODE_MZ",
		165: "TERRITORY_CODE_NA",
		166: "TERRITORY_CODE_NC",
		167: "TERRITORY_CODE_NE",
		168: "TERRITORY_CODE_NF",
		169: "TERRITORY_CODE_NG",
		170: "TERRITORY_CODE_NI",
		171: "TERRITORY_CODE_NL",
		172: "TERRITORY_CODE_NO",
		173: "TERRITORY_CODE_NP",
		174: "TERRITORY_CODE_NR",
		175: "TERRITORY_CODE_NU",
		176: "TERRITORY_CODE_NZ",
		177: "TERRITORY_CODE_OM",
		178: "TERRITORY_CODE_PA",
		179: "TERRITORY_CODE_PE",
		180: "TERRITORY_CODE_PF",
		181: "TERRITORY_CODE_PG",
		182: "TERRITORY_CODE_PH",
		183: "TERRITORY_CODE_PK",
		184: "TERRITORY_CODE_PL",
		185: "TERRITORY_CODE_PM",
		186: "TERRITORY_CODE_PN",
		187: "TERRITORY_CODE_PR",
		188: "TERRITORY_CODE_PS",
		189: "TERRITORY_CODE_PT",
		190: "TERRITORY_CODE_PW",
		191: "TERRITORY_CODE_PY",
		192: "TERRITORY_CODE_QA",
		193: "TERRITORY_CODE_RE",
		194: "TERRITORY_CODE_RO",
		195: "TERRITORY_CODE_RS",
		196: "TERRITORY_CODE_RU",
		197: "TERRITORY_CODE_RW",
		198: "TERRITORY_CODE_SA",
		199: "TERRITORY_CODE_SB",
		200: "TERRITORY_CODE_SC",
		201: "TERRITORY_CODE_SD",
		202: "TERRITORY_CODE_SE",
		203: "TERRITORY_CODE_SG",
		204: "TERRITORY_CODE_SH",
		205: "TERRITORY_CODE_SI",
		206: "TERRITORY_CODE_SJ",
		207: "TERRITORY_CODE_SK",
		208: "TERRITORY_CODE_SL",
		209: "TERRITORY_CODE_SM",
		210: "TERRITORY_CODE_SN",
		211: "TERRITORY_CODE_SO",
		212: "TERRITORY_CODE_SR",
		213: "TERRITORY_CODE_SS",
		214: "TERRITORY_CODE_ST",
		215: "TERRITORY_CODE_SV",
		216: "TERRITORY_CODE_SX",
		217: "TERRITORY_CODE_SY",
		218: "TERRITORY_CODE_SZ",
		219: "TERRITORY_CODE_TC",
		220: "TERRITORY_CODE_TD",
		221: "TERRITORY_CODE_TF",
		222: "TERRITORY_CODE_TG",
		223: "TERRITORY_CODE_TH",
		224: "TERRITORY_CODE_TJ",
		225: "TERRITORY_CODE_TK",
		226: "TERRITORY_CODE_TL",
		227: "TERRITORY_CODE_TM",
		228: "TERRITORY_CODE_TN",
		229: "TERRITORY_CODE_TO",
		230: "TERRITORY_CODE_TR",
		231: "TERRITORY_CODE_TT",
		232: "TERRITORY_CODE_TV",
		233: "TERRITORY_CODE_TW",
		234: "TERRITORY_CODE_TZ",
		235: "TERRITORY_CODE_UA",
		236: "TERRITORY_CODE_UG",
		237: "TERRITORY_CODE_UM",
		238: "TERRITORY_CODE_US",
		239: "TERRITORY_CODE_UY",
		240: "TERRITORY_CODE_UZ",
		241: "TERRITORY_CODE_VA",
		242: "TERRITORY_CODE_VC",
		243: "TERRITORY_CODE_VE",
		244: "TERRITORY_CODE_VG",
		245: "TERRITORY_CODE_VI",
		246: "TERRITORY_CODE_VN",
		247: "TERRITORY_CODE_VU",
		248: "TERRITORY_CODE_WF",
		249: "TERRITORY_CODE_WS",
		250: "TERRITORY_CODE_YE",
		251: "TERRITORY_CODE_YT",
		252: "TERRITORY_CODE_ZA",
		253: "TERRITORY_CODE_ZM",
		254: "TERRITORY_CODE_ZW",
	}
	TerritoryCode_value = map[string]int32{
		"TERRITORY_CODE_UNSPECIFIED": 0,
		"TERRITORY_CODE_AD":          1,
		"TERRITORY_CODE_AE":          2,
		"TERRITORY_CODE_AF":          3,
		"TERRITORY_CODE_AG":          4,
		"TERRITORY_CODE_AI":          5,
		"TERRITORY_CODE_AL":          6,
		"TERRITORY_CODE_AM":          7,
		"TERRITORY_CODE_AN":          8,
		"TERRITORY_CODE_AO":          9,
		"TERRITORY_CODE_AQ":          10,
		"TERRITORY_CODE_AR":          11,
		"TERRITORY_CODE_AS":          12,
		"TERRITORY_CODE_AT":          13,
		"TERRITORY_CODE_AU":          14,
		"TERRITORY_CODE_AW":          15,
		"TERRITORY_CODE_AX":          16,
		"TERRITORY_CODE_AZ":          17,
		"TERRITORY_CODE_BA":          18,
		"TERRITORY_CODE_BB":          19,
		"TERRITORY_CODE_BD":          20,
		"TERRITORY_CODE_BE":          21,
		"TERRITORY_CODE_BF":          22,
		"TERRITORY_CODE_BG":          23,
		"TERRITORY_CODE_BH":          24,
		"TERRITORY_CODE_BI":          25,
		"TERRITORY_CODE_BJ":          26,
		"TERRITORY_CODE_BL":          27,
		"TERRITORY_CODE_BM":          28,
		"TERRITORY_CODE_BN":          29,
		"TERRITORY_CODE_BO":          30,
		"TERRITORY_CODE_BQ":          31,
		"TERRITORY_CODE_BR":          32,
		"TERRITORY_CODE_BS":          33,
		"TERRITORY_CODE_BT":          34,
		"TERRITORY_CODE_BV":          35,
		"TERRITORY_CODE_BW":          36,
		"TERRITORY_CODE_BY":          37,
		"TERRITORY_CODE_BZ":          38,
		"TERRITORY_CODE_CA":          39,
		"TERRITORY_CODE_CC":          40,
		"TERRITORY_CODE_CD":          41,
		"TERRITORY_CODE_CF":          42,
		"TERRITORY_CODE_CG":          43,
		"TERRITORY_CODE_CH":          44,
		"TERRITORY_CODE_CI":          45,
		"TERRITORY_CODE_CK":          46,
		"TERRITORY_CODE_CL":          47,
		"TERRITORY_CODE_CM":          48,
		"TERRITORY_CODE_CN":          49,
		"TERRITORY_CODE_CO":          50,
		"TERRITORY_CODE_CR":          51,
		"TERRITORY_CODE_CS":          52,
		"TERRITORY_CODE_CU":          53,
		"TERRITORY_CODE_CV":          54,
		"TERRITORY_CODE_CW":          55,
		"TERRITORY_CODE_CX":          56,
		"TERRITORY_CODE_CY":          57,
		"TERRITORY_CODE_CZ":          58,
		"TERRITORY_CODE_DE":          59,
		"TERRITORY_CODE_DJ":          60,
		"TERRITORY_CODE_DK":          61,
		"TERRITORY_CODE_DM":          62,
		"TERRITORY_CODE_DO":          63,
		"TERRITORY_CODE_DZ":          64,
		"TERRITORY_CODE_EC":          65,
		"TERRITORY_CODE_EE":          66,
		"TERRITORY_CODE_EG":          67,
		"TERRITORY_CODE_EH":          68,
		"TERRITORY_CODE_ER":          69,
		"TERRITORY_CODE_ES":          70,
		"TERRITORY_CODE_ES_CE":       71,
		"TERRITORY_CODE_ES_CN":       72,
		"TERRITORY_CODE_ES_ML":       73,
		"TERRITORY_CODE_ET":          74,
		"TERRITORY_CODE_FI":          75,
		"TERRITORY_CODE_FJ":          76,
		"TERRITORY_CODE_FK":          77,
		"TERRITORY_CODE_FM":          78,
		"TERRITORY_CODE_FO":          79,
		"TERRITORY_CODE_FR":          80,
		"TERRITORY_CODE_GA":          81,
		"TERRITORY_CODE_GB":          82,
		"TERRITORY_CODE_GD":          83,
		"TERRITORY_CODE_GE":          84,
		"TERRITORY_CODE_GF":          85,
		"TERRITORY_CODE_GG":          86,
		"TERRITORY_CODE_GH":          87,
		"TERRITORY_CODE_GI":          88,
		"TERRITORY_CODE_GL":          89,
		"TERRITORY_CODE_GM":          90,
		"TERRITORY_CODE_GN":          91,
		"TERRITORY_CODE_GP":          92,
		"TERRITORY_CODE_GQ":          93,
		"TERRITORY_CODE_GR":          94,
		"TERRITORY_CODE_GS":          95,
		"TERRITORY_CODE_GT":          96,
		"TERRITORY_CODE_GU":          97,
		"TERRITORY_CODE_GW":          98,
		"TERRITORY_CODE_GY":          99,
		"TERRITORY_CODE_HK":          100,
		"TERRITORY_CODE_HM":          101,
		"TERRITORY_CODE_HN":          102,
		"TERRITORY_CODE_HR":          103,
		"TERRITORY_CODE_HT":          104,
		"TERRITORY_CODE_HU":          105,
		"TERRITORY_CODE_ID":          106,
		"TERRITORY_CODE_IE":          107,
		"TERRITORY_CODE_IL":          108,
		"TERRITORY_CODE_IM":          109,
		"TERRITORY_CODE_IN":          110,
		"TERRITORY_CODE_IO":          111,
		"TERRITORY_CODE_IQ":          112,
		"TERRITORY_CODE_IR":          113,
		"TERRITORY_CODE_IS":          114,
		"TERRITORY_CODE_IT":          115,
		"TERRITORY_CODE_JE":          116,
		"TERRITORY_CODE_JM":          117,
		"TERRITORY_CODE_JO":          118,
		"TERRITORY_CODE_JP":          119,
		"TERRITORY_CODE_KE":          120,
		"TERRITORY_CODE_KG":          121,
		"TERRITORY_CODE_KH":          122,
		"TERRITORY_CODE_KI":          123,
		"TERRITORY_CODE_KM":          124,
		"TERRITORY_CODE_KN":          125,
		"TERRITORY_CODE_KP":          126,
		"TERRITORY_CODE_KR":          127,
		"TERRITORY_CODE_KW":          128,
		"TERRITORY_CODE_KY":          129,
		"TERRITORY_CODE_KZ":          130,
		"TERRITORY_CODE_LA":          131,
		"TERRITORY_CODE_LB":          132,
		"TERRITORY_CODE_LC":          133,
		"TERRITORY_CODE_LI":          134,
		"TERRITORY_CODE_LK":          135,
		"TERRITORY_CODE_LR":          136,
		"TERRITORY_CODE_LS":          137,
		"TERRITORY_CODE_LT":          138,
		"TERRITORY_CODE_LU":          139,
		"TERRITORY_CODE_LV":          140,
		"TERRITORY_CODE_LY":          141,
		"TERRITORY_CODE_MA":          142,
		"TERRITORY_CODE_MC":          143,
		"TERRITORY_CODE_MD":          144,
		"TERRITORY_CODE_ME":          145,
		"TERRITORY_CODE_MF":          146,
		"TERRITORY_CODE_MG":          147,
		"TERRITORY_CODE_MH":          148,
		"TERRITORY_CODE_MK":          149,
		"TERRITORY_CODE_ML":          150,
		"TERRITORY_CODE_MM":          151,
		"TERRITORY_CODE_MN":          152,
		"TERRITORY_CODE_MO":          153,
		"TERRITORY_CODE_MP":          154,
		"TERRITORY_CODE_MQ":          155,
		"TERRITORY_CODE_MR":          156,
		"TERRITORY_CODE_MS":          157,
		"TERRITORY_CODE_MT":          158,
		"TERRITORY_CODE_MU":          159,
		"TERRITORY_CODE_MV":          160,
		"TERRITORY_CODE_MW":          161,
		"TERRITORY_CODE_MX":          162,
		"TERRITORY_CODE_MY":          163,
		"TERRITORY_CODE_MZ":          164,
		"TERRITORY_CODE_NA":          165,
		"TERRITORY_CODE_NC":          166,
		"TERRITORY_CODE_NE":          167,
		"TERRITORY_CODE_NF":          168,
		"TERRITORY_CODE_NG":          169,
		"TERRITORY_CODE_NI":          170,
		"TERRITORY_CODE_NL":          171,
		"TERRITORY_CODE_NO":          172,
		"TERRITORY_CODE_NP":          173,
		"TERRITORY_CODE_NR":          174,
		"TERRITORY_CODE_NU":          175,
		"TERRITORY_CODE_NZ":          176,
		"TERRITORY_CODE_OM":          177,
		"TERRITORY_CODE_PA":          178,
		"TERRITORY_CODE_PE":          179,
		"TERRITORY_CODE_PF":          180,
		"TERRITORY_CODE_PG":          181,
		"TERRITORY_CODE_PH":          182,
		"TERRITORY_CODE_PK":          183,
		"TERRITORY_CODE_PL":          184,
		"TERRITORY_CODE_PM":          185,
		"TERRITORY_CODE_PN":          186,
		"TERRITORY_CODE_PR":          187,
		"TERRITORY_CODE_PS":          188,
		"TERRITORY_CODE_PT":          189,
		"TERRITORY_CODE_PW":          190,
		"TERRITORY_CODE_PY":          191,
		"TERRITORY_CODE_QA":          192,
		"TERRITORY_CODE_RE":          193,
		"TERRITORY_CODE_RO":          194,
		"TERRITORY_CODE_RS":          195,
		"TERRITORY_CODE_RU":          196,
		"TERRITORY_CODE_RW":          197,
		"TERRITORY_CODE_SA":          198,
		"TERRITORY_CODE_SB":          199,
		"TERRITORY_CODE_SC":          200,
		"TERRITORY_CODE_SD":          201,
		"TERRITORY_CODE_SE":          202,
		"TERRITORY_CODE_SG":          203,
		"TERRITORY_CODE_SH":          204,
		"TERRITORY_CODE_SI":          205,
		"TERRITORY_CODE_SJ":          206,
		"TERRITORY_CODE_SK":          207,
		"TERRITORY_CODE_SL":          208,
		"TERRITORY_CODE_SM":          209,
		"TERRITORY_CODE_SN":          210,
		"TERRITORY_CODE_SO":          211,
		"TERRITORY_CODE_SR":          212,
		"TERRITORY_CODE_SS":          213,
		"TERRITORY_CODE_ST":          214,
		"TERRITORY_CODE_SV":          215,
		"TERRITORY_CODE_SX":          216,
		"TERRITORY_CODE_SY":          217,
		"TERRITORY_CODE_SZ":          218,
		"TERRITORY_CODE_TC":          219,
		"TERRITORY_CODE_TD":          220,
		"TERRITORY_CODE_TF":          221,
		"TERRITORY_CODE_TG":          222,
		"TERRITORY_CODE_TH":          223,
		"TERRITORY_CODE_TJ":          224,
		"TERRITORY_CODE_TK":          225,
		"TERRITORY_CODE_TL":          226,
		"TERRITORY_CODE_TM":          227,
		"TERRITORY_CODE_TN":          228,
		"TERRITORY_CODE_TO":          229,
		"TERRITORY_CODE_TR":          230,
		"TERRITORY_CODE_TT":          231,
		"TERRITORY_CODE_TV":          232,
		"TERRITORY_CODE_TW":          233,
		"TERRITORY_CODE_TZ":          234,
		"TERRITORY_CODE_UA":          235,
		"TERRITORY_CODE_UG":          236,
		"TERRITORY_CODE_UM":          237,
		"TERRITORY_CODE_US":          238,
		"TERRITORY_CODE_UY":          239,
		"TERRITORY_CODE_UZ":          240,
		"TERRITORY_CODE_VA":          241,
		"TERRITORY_CODE_VC":          242,
		"TERRITORY_CODE_VE":          243,
		"TERRITORY_CODE_VG":          244,
		"TERRITORY_CODE_VI":          245,
		"TERRITORY_CODE_VN":          246,
		"TERRITORY_CODE_VU":          247,
		"TERRITORY_CODE_WF":          248,
		"TERRITORY_CODE_WS":          249,
		"TERRITORY_CODE_YE":          250,
		"TERRITORY_CODE_YT":          251,
		"TERRITORY_CODE_ZA":          252,
		"TERRITORY_CODE_ZM":          253,
		"TERRITORY_CODE_ZW":          254,
	}
)

func (x TerritoryCode) Enum() *TerritoryCode {
	p := new(TerritoryCode)
	*p = x
	return p
}

func (x TerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[143].Descriptor()
}

func (TerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[143]
}

func (x TerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerritoryCode.Descriptor instead.
func (TerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{143}
}

type ReferenceCreation int32

const (
	ReferenceCreation_REFERENCE_CREATION_UNSPECIFIED       ReferenceCreation = 0
	ReferenceCreation_REFERENCE_CREATION_REFERENCERESOURCE ReferenceCreation = 1
	ReferenceCreation_REFERENCE_CREATION_CONSUMERRESOURCE  ReferenceCreation = 2
)

// Enum value maps for ReferenceCreation.
var (
	ReferenceCreation_name = map[int32]string{
		0: "REFERENCE_CREATION_UNSPECIFIED",
		1: "REFERENCE_CREATION_REFERENCERESOURCE",
		2: "REFERENCE_CREATION_CONSUMERRESOURCE",
	}
	ReferenceCreation_value = map[string]int32{
		"REFERENCE_CREATION_UNSPECIFIED":       0,
		"REFERENCE_CREATION_REFERENCERESOURCE": 1,
		"REFERENCE_CREATION_CONSUMERRESOURCE":  2,
	}
)

func (x ReferenceCreation) Enum() *ReferenceCreation {
	p := new(ReferenceCreation)
	*p = x
	return p
}

func (x ReferenceCreation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceCreation) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200108_v20200108_proto_enumTypes[144].Descriptor()
}

func (ReferenceCreation) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200108_v20200108_proto_enumTypes[144]
}

func (x ReferenceCreation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceCreation.Descriptor instead.
func (ReferenceCreation) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP(), []int{144}
}

var File_ddex_avs_v20200108_v20200108_proto protoreflect.FileDescriptor

const file_ddex_avs_v20200108_v20200108_proto_rawDesc = "" +
	"\n" +
	"\"ddex/avs/v20200108/v20200108.proto\x12\x12ddex.avs.v20200108*\x82\x01\n" +
	"\x10AccessLimitation\x12!\n" +
	"\x1dACCESS_LIMITATION_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eACCESS_LIMITATION_NOLIMITATION\x10\x01\x12'\n" +
	"#ACCESS_LIMITATION_PRIVATEACCESSONLY\x10\x02*\xf8\x02\n" +
	"\x1fAdministratingRecordCompanyRole\x122\n" +
	".ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED\x10\x00\x12D\n" +
	"@ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT\x10\x01\x12:\n" +
	"6ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR\x10\x02\x12;\n" +
	"7ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR\x10\x03\x12.\n" +
	"*ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN\x10\x04\x122\n" +
	".ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED\x10\x05*\xdcz\n" +
	"\x10AllTerritoryCode\x12\"\n" +
	"\x1eALL_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AD\x10\x01\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AE\x10\x02\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AF\x10\x03\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AG\x10\x04\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AI\x10\x05\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AL\x10\x06\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AM\x10\a\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AN\x10\b\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AO\x10\t\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AQ\x10\n" +
	"\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AR\x10\v\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AS\x10\f\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AT\x10\r\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AU\x10\x0e\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AW\x10\x0f\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AX\x10\x10\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AZ\x10\x11\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BA\x10\x12\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BB\x10\x13\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BD\x10\x14\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BE\x10\x15\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BF\x10\x16\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BG\x10\x17\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BH\x10\x18\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BI\x10\x19\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BJ\x10\x1a\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BL\x10\x1b\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BM\x10\x1c\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BN\x10\x1d\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BO\x10\x1e\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BQ\x10\x1f\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BR\x10 \x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BS\x10!\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BT\x10\"\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BV\x10#\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BW\x10$\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BY\x10%\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BZ\x10&\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CA\x10'\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CC\x10(\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CD\x10)\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CF\x10*\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CG\x10+\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CH\x10,\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CI\x10-\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CK\x10.\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CL\x10/\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CM\x100\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CN\x101\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CO\x102\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CR\x103\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CS\x104\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CU\x105\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CV\x106\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CW\x107\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CX\x108\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CY\x109\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CZ\x10:\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DE\x10;\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DJ\x10<\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DK\x10=\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DM\x10>\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DO\x10?\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DZ\x10@\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_EC\x10A\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_EE\x10B\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_EG\x10C\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_EH\x10D\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_ER\x10E\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_ES\x10F\x12\x1c\n" +
	"\x18ALL_TERRITORY_CODE_ES_CE\x10G\x12\x1c\n" +
	"\x18ALL_TERRITORY_CODE_ES_CN\x10H\x12\x1c\n" +
	"\x18ALL_TERRITORY_CODE_ES_ML\x10I\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_ET\x10J\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FI\x10K\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FJ\x10L\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FK\x10M\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FM\x10N\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FO\x10O\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FR\x10P\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GA\x10Q\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GB\x10R\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GD\x10S\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GE\x10T\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GF\x10U\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GG\x10V\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GH\x10W\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GI\x10X\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GL\x10Y\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GM\x10Z\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GN\x10[\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GP\x10\\\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GQ\x10]\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GR\x10^\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GS\x10_\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GT\x10`\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GU\x10a\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GW\x10b\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GY\x10c\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HK\x10d\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HM\x10e\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HN\x10f\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HR\x10g\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HT\x10h\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HU\x10i\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_ID\x10j\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IE\x10k\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IL\x10l\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IM\x10m\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IN\x10n\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IO\x10o\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IQ\x10p\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IR\x10q\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IS\x10r\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IT\x10s\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_JE\x10t\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_JM\x10u\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_JO\x10v\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_JP\x10w\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KE\x10x\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KG\x10y\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KH\x10z\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KI\x10{\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KM\x10|\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KN\x10}\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KP\x10~\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KR\x10\x7f\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_KW\x10\x80\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_KY\x10\x81\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_KZ\x10\x82\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LA\x10\x83\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LB\x10\x84\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LC\x10\x85\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LI\x10\x86\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LK\x10\x87\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LR\x10\x88\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LS\x10\x89\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LT\x10\x8a\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LU\x10\x8b\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LV\x10\x8c\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LY\x10\x8d\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MA\x10\x8e\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MC\x10\x8f\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MD\x10\x90\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ME\x10\x91\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MF\x10\x92\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MG\x10\x93\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MH\x10\x94\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MK\x10\x95\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ML\x10\x96\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MM\x10\x97\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MN\x10\x98\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MO\x10\x99\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MP\x10\x9a\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MQ\x10\x9b\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MR\x10\x9c\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MS\x10\x9d\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MT\x10\x9e\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MU\x10\x9f\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MV\x10\xa0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MW\x10\xa1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MX\x10\xa2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MY\x10\xa3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MZ\x10\xa4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NA\x10\xa5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NC\x10\xa6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NE\x10\xa7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NF\x10\xa8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NG\x10\xa9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NI\x10\xaa\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NL\x10\xab\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NO\x10\xac\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NP\x10\xad\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NR\x10\xae\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NU\x10\xaf\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NZ\x10\xb0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_OM\x10\xb1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PA\x10\xb2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PE\x10\xb3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PF\x10\xb4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PG\x10\xb5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PH\x10\xb6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PK\x10\xb7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PL\x10\xb8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PM\x10\xb9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PN\x10\xba\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PR\x10\xbb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PS\x10\xbc\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PT\x10\xbd\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PW\x10\xbe\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PY\x10\xbf\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_QA\x10\xc0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RE\x10\xc1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RO\x10\xc2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RS\x10\xc3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RU\x10\xc4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RW\x10\xc5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SA\x10\xc6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SB\x10\xc7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SC\x10\xc8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SD\x10\xc9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SE\x10\xca\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SG\x10\xcb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SH\x10\xcc\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SI\x10\xcd\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SJ\x10\xce\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SK\x10\xcf\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SL\x10\xd0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SM\x10\xd1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SN\x10\xd2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SO\x10\xd3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SR\x10\xd4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SS\x10\xd5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ST\x10\xd6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SV\x10\xd7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SX\x10\xd8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SY\x10\xd9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SZ\x10\xda\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TC\x10\xdb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TD\x10\xdc\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TF\x10\xdd\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TG\x10\xde\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TH\x10\xdf\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TJ\x10\xe0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TK\x10\xe1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TL\x10\xe2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TM\x10\xe3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TN\x10\xe4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TO\x10\xe5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TR\x10\xe6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TT\x10\xe7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TV\x10\xe8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TW\x10\xe9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TZ\x10\xea\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UA\x10\xeb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UG\x10\xec\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UM\x10\xed\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_US\x10\xee\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UY\x10\xef\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UZ\x10\xf0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VA\x10\xf1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VC\x10\xf2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VE\x10\xf3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VG\x10\xf4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VI\x10\xf5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VN\x10\xf6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VU\x10\xf7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_WF\x10\xf8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_WS\x10\xf9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_YE\x10\xfa\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_YT\x10\xfb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ZA\x10\xfc\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ZM\x10\xfd\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ZW\x10\xfe\x01\x12\x1b\n" +
	"\x16ALL_TERRITORY_CODE_E_4\x10\xff\x01\x12\x1b\n" +
	"\x16ALL_TERRITORY_CODE_E_8\x10\x80\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_12\x10\x81\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_20\x10\x82\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_24\x10\x83\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_28\x10\x84\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_31\x10\x85\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_32\x10\x86\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_36\x10\x87\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_40\x10\x88\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_44\x10\x89\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_48\x10\x8a\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_50\x10\x8b\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_51\x10\x8c\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_52\x10\x8d\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_56\x10\x8e\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_64\x10\x8f\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_68\x10\x90\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_70\x10\x91\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_72\x10\x92\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_76\x10\x93\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_84\x10\x94\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_90\x10\x95\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_96\x10\x96\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_100\x10\x97\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_104\x10\x98\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_108\x10\x99\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_112\x10\x9a\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_116\x10\x9b\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_120\x10\x9c\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_124\x10\x9d\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_132\x10\x9e\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_140\x10\x9f\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_144\x10\xa0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_148\x10\xa1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_152\x10\xa2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_156\x10\xa3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_158\x10\xa4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_170\x10\xa5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_174\x10\xa6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_178\x10\xa7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_180\x10\xa8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_188\x10\xa9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_191\x10\xaa\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_192\x10\xab\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_196\x10\xac\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_200\x10\xad\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_203\x10\xae\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_204\x10\xaf\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_208\x10\xb0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_212\x10\xb1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_214\x10\xb2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_218\x10\xb3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_222\x10\xb4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_226\x10\xb5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_230\x10\xb6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_231\x10\xb7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_232\x10\xb8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_233\x10\xb9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_242\x10\xba\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_246\x10\xbb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_250\x10\xbc\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_258\x10\xbd\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_262\x10\xbe\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_266\x10\xbf\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_268\x10\xc0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_270\x10\xc1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_276\x10\xc2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_278\x10\xc3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_280\x10\xc4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_288\x10\xc5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_296\x10\xc6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_300\x10\xc7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_308\x10\xc8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_320\x10\xc9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_324\x10\xca\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_328\x10\xcb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_332\x10\xcc\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_336\x10\xcd\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_340\x10\xce\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_344\x10\xcf\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_348\x10\xd0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_352\x10\xd1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_356\x10\xd2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_360\x10\xd3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_364\x10\xd4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_368\x10\xd5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_372\x10\xd6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_376\x10\xd7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_380\x10\xd8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_384\x10\xd9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_388\x10\xda\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_392\x10\xdb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_398\x10\xdc\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_400\x10\xdd\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_404\x10\xde\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_408\x10\xdf\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_410\x10\xe0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_414\x10\xe1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_417\x10\xe2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_418\x10\xe3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_422\x10\xe4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_426\x10\xe5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_428\x10\xe6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_430\x10\xe7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_434\x10\xe8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_438\x10\xe9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_440\x10\xea\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_442\x10\xeb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_446\x10\xec\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_450\x10\xed\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_454\x10\xee\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_458\x10\xef\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_462\x10\xf0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_466\x10\xf1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_470\x10\xf2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_478\x10\xf3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_480\x10\xf4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_484\x10\xf5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_492\x10\xf6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_496\x10\xf7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_498\x10\xf8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_499\x10\xf9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_504\x10\xfa\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_508\x10\xfb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_512\x10\xfc\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_516\x10\xfd\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_520\x10\xfe\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_524\x10\xff\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_528\x10\x80\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_540\x10\x81\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_548\x10\x82\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_554\x10\x83\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_558\x10\x84\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_562\x10\x85\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_566\x10\x86\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_578\x10\x87\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_583\x10\x88\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_584\x10\x89\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_585\x10\x8a\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_586\x10\x8b\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_591\x10\x8c\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_598\x10\x8d\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_600\x10\x8e\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_604\x10\x8f\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_608\x10\x90\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_616\x10\x91\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_620\x10\x92\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_624\x10\x93\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_626\x10\x94\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_630\x10\x95\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_634\x10\x96\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_642\x10\x97\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_643\x10\x98\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_646\x10\x99\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_659\x10\x9a\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_662\x10\x9b\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_670\x10\x9c\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_674\x10\x9d\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_678\x10\x9e\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_682\x10\x9f\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_686\x10\xa0\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_688\x10\xa1\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_690\x10\xa2\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_694\x10\xa3\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_702\x10\xa4\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_703\x10\xa5\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_704\x10\xa6\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_705\x10\xa7\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_706\x10\xa8\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_710\x10\xa9\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_716\x10\xaa\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_720\x10\xab\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_724\x10\xac\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_728\x10\xad\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_729\x10\xae\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_732\x10\xaf\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_736\x10\xb0\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_740\x10\xb1\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_748\x10\xb2\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_752\x10\xb3\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_756\x10\xb4\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_760\x10\xb5\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_762\x10\xb6\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_764\x10\xb7\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_768\x10\xb8\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_776\x10\xb9\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_780\x10\xba\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_784\x10\xbb\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_788\x10\xbc\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_792\x10\xbd\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_795\x10\xbe\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_798\x10\xbf\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_800\x10\xc0\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_804\x10\xc1\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_807\x10\xc2\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_810\x10\xc3\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_818\x10\xc4\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_826\x10\xc5\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_834\x10\xc6\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_840\x10\xc7\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_854\x10\xc8\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_858\x10\xc9\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_860\x10\xca\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_862\x10\xcb\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_882\x10\xcc\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_886\x10\xcd\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_887\x10\xce\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_890\x10\xcf\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_891\x10\xd0\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_894\x10\xd1\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2100\x10\xd2\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2101\x10\xd3\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2102\x10\xd4\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2103\x10\xd5\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2104\x10\xd6\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2105\x10\xd7\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2106\x10\xd8\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2107\x10\xd9\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2108\x10\xda\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2109\x10\xdb\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2110\x10\xdc\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2111\x10\xdd\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2112\x10\xde\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2113\x10\xdf\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2114\x10\xe0\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2115\x10\xe1\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2116\x10\xe2\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2117\x10\xe3\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2118\x10\xe4\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2119\x10\xe5\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2120\x10\xe6\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2121\x10\xe7\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2122\x10\xe8\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2123\x10\xe9\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2124\x10\xea\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2125\x10\xeb\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2126\x10\xec\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2127\x10\xed\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2128\x10\xee\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2129\x10\xef\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2130\x10\xf0\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2131\x10\xf1\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2132\x10\xf2\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2133\x10\xf3\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2134\x10\xf4\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2136\x10\xf5\x03\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_XK\x10\xf6\x03\x12!\n" +
	"\x1cALL_TERRITORY_CODE_WORLDWIDE\x10\xf7\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_AIDJ\x10\xf8\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_ANHH\x10\xf9\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_BQAQ\x10\xfa\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_BUMM\x10\xfb\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_BYAA\x10\xfc\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_CSHH\x10\xfd\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_CSXX\x10\xfe\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_CTKI\x10\xff\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_DDDE\x10\x80\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_DYBJ\x10\x81\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_FQHH\x10\x82\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_FXFR\x10\x83\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_GEHH\x10\x84\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_HVBF\x10\x85\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_JTUM\x10\x86\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_MIUM\x10\x87\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_NHVU\x10\x88\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_NQAQ\x10\x89\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_NTHH\x10\x8a\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_PCHH\x10\x8b\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_PUUM\x10\x8c\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_PZPA\x10\x8d\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_RHZW\x10\x8e\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_SKIN\x10\x8f\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_SUHH\x10\x90\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_TPTL\x10\x91\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_VDVN\x10\x92\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_WKUM\x10\x93\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_YDYE\x10\x94\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_YUCS\x10\x95\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_ZRCD\x10\x96\x04*\xb4\r\n" +
	"\n" +
	"ArtistRole\x12\x1b\n" +
	"\x17ARTIST_ROLE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11ARTIST_ROLE_ACTOR\x10\x01\x12\x17\n" +
	"\x13ARTIST_ROLE_ADAPTER\x10\x02\x12\x19\n" +
	"\x15ARTIST_ROLE_ARCHITECT\x10\x03\x12\x18\n" +
	"\x14ARTIST_ROLE_ARRANGER\x10\x04\x12\x16\n" +
	"\x12ARTIST_ROLE_ARTIST\x10\x05\x12#\n" +
	"\x1fARTIST_ROLE_ASSOCIATEDPERFORMER\x10\x06\x12\x16\n" +
	"\x12ARTIST_ROLE_AUTHOR\x10\a\x12\x14\n" +
	"\x10ARTIST_ROLE_BAND\x10\b\x12\x1a\n" +
	"\x16ARTIST_ROLE_CARTOONIST\x10\t\x12\x15\n" +
	"\x11ARTIST_ROLE_CHOIR\x10\n" +
	"\x12\x1d\n" +
	"\x19ARTIST_ROLE_CHOREOGRAPHER\x10\v\x12\x18\n" +
	"\x14ARTIST_ROLE_COMPOSER\x10\f\x12 \n" +
	"\x1cARTIST_ROLE_COMPOSERLYRICIST\x10\r\x12&\n" +
	"\"ARTIST_ROLE_COMPUTERGRAPHICCREATOR\x10\x0e\x12\x19\n" +
	"\x15ARTIST_ROLE_CONDUCTOR\x10\x0f\x12\x1b\n" +
	"\x17ARTIST_ROLE_CONTRIBUTOR\x10\x10\x12\x16\n" +
	"\x12ARTIST_ROLE_DANCER\x10\x11\x12\x18\n" +
	"\x14ARTIST_ROLE_DESIGNER\x10\x12\x12\x18\n" +
	"\x14ARTIST_ROLE_DIRECTOR\x10\x13\x12\x18\n" +
	"\x14ARTIST_ROLE_ENSEMBLE\x10\x14\x12\x1e\n" +
	"\x1aARTIST_ROLE_FEATUREDARTIST\x10\x15\x12\x1c\n" +
	"\x18ARTIST_ROLE_FILMDIRECTOR\x10\x16\x12\x1d\n" +
	"\x19ARTIST_ROLE_GRAPHICARTIST\x10\x17\x12\x1f\n" +
	"\x1bARTIST_ROLE_GRAPHICDESIGNER\x10\x18\x12\x1a\n" +
	"\x16ARTIST_ROLE_JOURNALIST\x10\x19\x12\x1a\n" +
	"\x16ARTIST_ROLE_LIBRETTIST\x10\x1a\x12\x18\n" +
	"\x14ARTIST_ROLE_LYRICIST\x10\x1b\x12\x1a\n" +
	"\x16ARTIST_ROLE_MAINARTIST\x10\x1c\x12\x18\n" +
	"\x14ARTIST_ROLE_NARRATOR\x10\x1d\x12\x1e\n" +
	"\x1aARTIST_ROLE_NONLYRICAUTHOR\x10\x1e\x12\x19\n" +
	"\x15ARTIST_ROLE_ORCHESTRA\x10\x1f\x12!\n" +
	"\x1dARTIST_ROLE_ORIGINALPUBLISHER\x10 \x12\x17\n" +
	"\x13ARTIST_ROLE_PAINTER\x10!\x12\x1c\n" +
	"\x18ARTIST_ROLE_PHOTOGRAPHER\x10\"\x12#\n" +
	"\x1fARTIST_ROLE_PHOTOGRAPHYDIRECTOR\x10#\x12\x1a\n" +
	"\x16ARTIST_ROLE_PLAYWRIGHT\x10$\x12\x1f\n" +
	"\x1bARTIST_ROLE_PRIMARYMUSICIAN\x10%\x12\x18\n" +
	"\x14ARTIST_ROLE_PRODUCER\x10&\x12\x1a\n" +
	"\x16ARTIST_ROLE_PROGRAMMER\x10'\x12 \n" +
	"\x1cARTIST_ROLE_SCREENPLAYAUTHOR\x10(\x12\x17\n" +
	"\x13ARTIST_ROLE_SOLOIST\x10)\x12\x1e\n" +
	"\x1aARTIST_ROLE_STUDIOMUSICIAN\x10*\x12\x1f\n" +
	"\x1bARTIST_ROLE_STUDIOPERSONNEL\x10+\x12\x1b\n" +
	"\x17ARTIST_ROLE_SUBARRANGER\x10,\x12\x1a\n" +
	"\x16ARTIST_ROLE_TRANSLATOR\x10-\x12\x17\n" +
	"\x13ARTIST_ROLE_UNKNOWN\x10.\x12\x1b\n" +
	"\x17ARTIST_ROLE_USERDEFINED\x10/\x12\x1a\n" +
	"\x16ARTIST_ROLE_ARTCOPYIST\x100\x12\x1c\n" +
	"\x18ARTIST_ROLE_CALLIGRAPHER\x101\x12\x1c\n" +
	"\x18ARTIST_ROLE_CARTOGRAPHER\x102\x12\"\n" +
	"\x1eARTIST_ROLE_COMPUTERPROGRAMMER\x103\x12\x1a\n" +
	"\x16ARTIST_ROLE_DELINEATOR\x104\x12\x1b\n" +
	"\x17ARTIST_ROLE_DRAUGHTSMAN\x105\x12\x1b\n" +
	"\x17ARTIST_ROLE_FACSIMILIST\x106\x12\x1b\n" +
	"\x17ARTIST_ROLE_ILLUSTRATOR\x107\x12\x1c\n" +
	"\x18ARTIST_ROLE_MUSICCOPYIST\x108\x12\x1c\n" +
	"\x18ARTIST_ROLE_NOTSPECIFIED\x109\x12\x1c\n" +
	"\x18ARTIST_ROLE_TYPEDESIGNER\x10:*\x98\x05\n" +
	"\x0eAudioCodecType\x12 \n" +
	"\x1cAUDIO_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_AAC\x10\x01\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_ADPCM\x10\x02\x12\x19\n" +
	"\x15AUDIO_CODEC_TYPE_ALAW\x10\x03\x12\x1b\n" +
	"\x17AUDIO_CODEC_TYPE_AMR_NB\x10\x04\x12\x1b\n" +
	"\x17AUDIO_CODEC_TYPE_AMR_WB\x10\x05\x12\x19\n" +
	"\x15AUDIO_CODEC_TYPE_FLAC\x10\x06\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_MP2\x10\a\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_MP3\x10\b\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_MULAW\x10\t\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_PCM\x10\n" +
	"\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_PDM\x10\v\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_QCELP\x10\f\x12\x1e\n" +
	"\x1aAUDIO_CODEC_TYPE_REALAUDIO\x10\r\x12\x1e\n" +
	"\x1aAUDIO_CODEC_TYPE_SHOCKWAVE\x10\x0e\x12\x1c\n" +
	"\x18AUDIO_CODEC_TYPE_UNKNOWN\x10\x0f\x12 \n" +
	"\x1cAUDIO_CODEC_TYPE_USERDEFINED\x10\x10\x12\x1b\n" +
	"\x17AUDIO_CODEC_TYPE_VORBIS\x10\x11\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_WMA\x10\x12\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_AMR\x10\x13\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_ATMOS\x10\x14\x12\x17\n" +
	"\x13AUDIO_CODEC_TYPE_MP\x10\x15\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_MQA\x10\x16*q\n" +
	"\x0eBinaryDataType\x12 \n" +
	"\x1cBINARY_DATA_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19BINARY_DATA_TYPE_BINARY64\x10\x01\x12\x1e\n" +
	"\x1aBINARY_DATA_TYPE_HEXBINARY\x10\x02*\x80\x03\n" +
	"\x17BusinessContributorRole\x12)\n" +
	"%BUSINESS_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12)\n" +
	"%BUSINESS_CONTRIBUTOR_ROLE_CONTRIBUTOR\x10\x01\x12,\n" +
	"(BUSINESS_CONTRIBUTOR_ROLE_MUSICPUBLISHER\x10\x02\x12/\n" +
	"+BUSINESS_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER\x10\x03\x12*\n" +
	"&BUSINESS_CONTRIBUTOR_ROLE_SUBPUBLISHER\x10\x04\x122\n" +
	".BUSINESS_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER\x10\x05\x12%\n" +
	"!BUSINESS_CONTRIBUTOR_ROLE_UNKNOWN\x10\x06\x12)\n" +
	"%BUSINESS_CONTRIBUTOR_ROLE_USERDEFINED\x10\a*\x99\x1d\n" +
	"\vCarrierType\x12\x1c\n" +
	"\x18CARRIER_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX\x10\x01\x12 \n" +
	"\x1cCARRIER_TYPE_E_33RPM10INCHLP\x10\x02\x12$\n" +
	" CARRIER_TYPE_E_33RPM10INCHSINGLE\x10\x03\x12 \n" +
	"\x1cCARRIER_TYPE_E_33RPM12INCHLP\x10\x04\x12(\n" +
	"$CARRIER_TYPE_E_33RPM12INCHLP20TRACKS\x10\x05\x12(\n" +
	"$CARRIER_TYPE_E_33RPM12INCHMAXISINGLE\x10\x06\x12$\n" +
	" CARRIER_TYPE_E_33RPM12INCHSINGLE\x10\a\x12\x1f\n" +
	"\x1bCARRIER_TYPE_E_33RPM7INCHLP\x10\b\x12#\n" +
	"\x1fCARRIER_TYPE_E_33RPM7INCHSINGLE\x10\t\x12 \n" +
	"\x1cCARRIER_TYPE_E_45RPM10INCHLP\x10\n" +
	"\x12(\n" +
	"$CARRIER_TYPE_E_45RPM10INCHMAXISINGLE\x10\v\x12$\n" +
	" CARRIER_TYPE_E_45RPM10INCHSINGLE\x10\f\x12 \n" +
	"\x1cCARRIER_TYPE_E_45RPM12INCHLP\x10\r\x12(\n" +
	"$CARRIER_TYPE_E_45RPM12INCHMAXISINGLE\x10\x0e\x12$\n" +
	" CARRIER_TYPE_E_45RPM12INCHSINGLE\x10\x0f\x12\x1f\n" +
	"\x1bCARRIER_TYPE_E_45RPM7INCHEP\x10\x10\x12#\n" +
	"\x1fCARRIER_TYPE_E_45RPM7INCHSINGLE\x10\x11\x12'\n" +
	"#CARRIER_TYPE_E_7INCHMAXISINGLEREMIX\x10\x12\x12\x17\n" +
	"\x13CARRIER_TYPE_BLURAY\x10\x13\x12\x13\n" +
	"\x0fCARRIER_TYPE_CD\x10\x14\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDCOMPILATION\x10\x15\x12\x15\n" +
	"\x11CARRIER_TYPE_CDEP\x10\x16\x12\x1d\n" +
	"\x19CARRIER_TYPE_CDEPENHANCED\x10\x17\x12#\n" +
	"\x1fCARRIER_TYPE_CDEXTRACOMPILATION\x10\x18\x12\x1a\n" +
	"\x16CARRIER_TYPE_CDEXTRAEP\x10\x19\x12\x1a\n" +
	"\x16CARRIER_TYPE_CDEXTRALP\x10\x1a\x12!\n" +
	"\x1dCARRIER_TYPE_CDEXTRAMAXIREMIX\x10\x1b\x12\"\n" +
	"\x1eCARRIER_TYPE_CDEXTRAMAXISINGLE\x10\x1c\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDEXTRASINGLE\x10\x1d\x12%\n" +
	"!CARRIER_TYPE_CDEXTRASINGLE2TRACKS\x10\x1e\x12\x15\n" +
	"\x11CARRIER_TYPE_CDLP\x10\x1f\x12\x1a\n" +
	"\x16CARRIER_TYPE_CDLP5INCH\x10 \x12\x1d\n" +
	"\x19CARRIER_TYPE_CDLPENHANCED\x10!\x12 \n" +
	"\x1cCARRIER_TYPE_CDLPPLUSCDVIDEO\x10\"\x12!\n" +
	"\x1dCARRIER_TYPE_CDLPPLUSDVDAUDIO\x10#\x12!\n" +
	"\x1dCARRIER_TYPE_CDLPPLUSDVDVIDEO\x10$\x12\x1c\n" +
	"\x18CARRIER_TYPE_CDLPPLUSWEB\x10%\x12\x1d\n" +
	"\x19CARRIER_TYPE_CDMAXISINGLE\x10&\x12\"\n" +
	"\x1eCARRIER_TYPE_CDMAXISINGLE3INCH\x10'\x12%\n" +
	"!CARRIER_TYPE_CDMAXISINGLEENHANCED\x10(\x12\"\n" +
	"\x1eCARRIER_TYPE_CDMAXISINGLEREMIX\x10)\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDPLUSCDBONUS\x10*\x12\x1f\n" +
	"\x1bCARRIER_TYPE_CDPLUSDVDBONUS\x10+\x12\x16\n" +
	"\x12CARRIER_TYPE_CDROM\x10,\x12\x19\n" +
	"\x15CARRIER_TYPE_CDSINGLE\x10-\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDSINGLE3INCH\x10.\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDSINGLE5INCH\x10/\x12\x1f\n" +
	"\x1bCARRIER_TYPE_CDVIDEO5LPNTSC\x100\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDVIDEO5LPPAL\x101\x12'\n" +
	"#CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE\x102\x12\x1a\n" +
	"\x16CARRIER_TYPE_COMBIPACK\x103\x12\x14\n" +
	"\x10CARRIER_TYPE_DCC\x104\x12\x1f\n" +
	"\x1bCARRIER_TYPE_DCCCOMPILATION\x105\x12\x19\n" +
	"\x15CARRIER_TYPE_DUALDISC\x106\x12\x14\n" +
	"\x10CARRIER_TYPE_DVD\x107\x12\x19\n" +
	"\x15CARRIER_TYPE_DVDAUDIO\x108\x12$\n" +
	" CARRIER_TYPE_DVDAUDIO5MAXISINGLE\x109\x12\x1b\n" +
	"\x17CARRIER_TYPE_DVDAUDIOLP\x10:\x12\x1f\n" +
	"\x1bCARRIER_TYPE_DVDAUDIOSINGLE\x10;\x12\x17\n" +
	"\x13CARRIER_TYPE_DVDROM\x10<\x12\x1a\n" +
	"\x16CARRIER_TYPE_DVDSINGLE\x10=\x12\x19\n" +
	"\x15CARRIER_TYPE_DVDVIDEO\x10>\x12(\n" +
	"$CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC\x10?\x12'\n" +
	"#CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL\x10@\x12$\n" +
	" CARRIER_TYPE_DVDVIDEO5SINGLENTSC\x10A\x12#\n" +
	"\x1fCARRIER_TYPE_DVDVIDEO5SINGLEPAL\x10B\x12\x1f\n" +
	"\x1bCARRIER_TYPE_DVDVIDEOLPNTSC\x10C\x12\x1e\n" +
	"\x1aCARRIER_TYPE_DVDVIDEOLPPAL\x10D\x12-\n" +
	")CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE\x10E\x12\x18\n" +
	"\x14CARRIER_TYPE_FANPACK\x10F\x12\x1d\n" +
	"\x19CARRIER_TYPE_HDDVDVIDEOLP\x10G\x12&\n" +
	"\"CARRIER_TYPE_LASERDISCLP12INCHNTSC\x10H\x12(\n" +
	"$CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP\x10I\x12\x1e\n" +
	"\x1aCARRIER_TYPE_LPCOMPILATION\x10J\x12 \n" +
	"\x1cCARRIER_TYPE_LPIDENTICALTOCD\x10K\x12\x13\n" +
	"\x0fCARRIER_TYPE_MC\x10L\x12(\n" +
	"$CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP\x10M\x12\x1e\n" +
	"\x1aCARRIER_TYPE_MCCOMPILATION\x10N\x12\x1b\n" +
	"\x17CARRIER_TYPE_MCDOUBLELP\x10O\x12\x15\n" +
	"\x11CARRIER_TYPE_MCEP\x10P\x12 \n" +
	"\x1cCARRIER_TYPE_MCIDENTICALTOCD\x10Q\x12\x15\n" +
	"\x11CARRIER_TYPE_MCLP\x10R\x12\x1d\n" +
	"\x19CARRIER_TYPE_MCMAXISINGLE\x10S\x12\x18\n" +
	"\x14CARRIER_TYPE_MCREMIX\x10T\x12\x19\n" +
	"\x15CARRIER_TYPE_MCSINGLE\x10U\x12'\n" +
	"#CARRIER_TYPE_MCSINGLEIDENTICALTOCDS\x10V\x12$\n" +
	" CARRIER_TYPE_MEMORYDEVICEAUDIOLP\x10W\x12\"\n" +
	"\x1eCARRIER_TYPE_MEMORYDEVICEMIXLP\x10X\x12$\n" +
	" CARRIER_TYPE_MEMORYDEVICEVIDEOLP\x10Y\x12\x1c\n" +
	"\x18CARRIER_TYPE_MERCHANDISE\x10Z\x12\x19\n" +
	"\x15CARRIER_TYPE_MINIDISC\x10[\x12$\n" +
	" CARRIER_TYPE_MINIDISCCOMPILATION\x10\\\x12\x1b\n" +
	"\x17CARRIER_TYPE_MINIDISCEP\x10]\x12\"\n" +
	"\x1eCARRIER_TYPE_MINIDISCMAXIREMIX\x10^\x12)\n" +
	"%CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE\x10_\x12\x1c\n" +
	"\x18CARRIER_TYPE_PREPAIDCARD\x10`\x12\x15\n" +
	"\x11CARRIER_TYPE_SACD\x10a\x12 \n" +
	"\x1cCARRIER_TYPE_SACDCOMPILATION\x10b\x12\x1d\n" +
	"\x19CARRIER_TYPE_SACDLPSTEREO\x10c\x12$\n" +
	" CARRIER_TYPE_SACDLPSTEREOCDAUDIO\x10d\x12%\n" +
	"!CARRIER_TYPE_SACDLPSTEREOSURROUND\x10e\x12,\n" +
	"(CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO\x10f\x12&\n" +
	"\"CARRIER_TYPE_SACDLPSURROUNDCDAUDIO\x10g\x12!\n" +
	"\x1dCARRIER_TYPE_SACDPLUSDVDVIDEO\x10h\x12\x1c\n" +
	"\x18CARRIER_TYPE_USERDEFINED\x10i\x12\x18\n" +
	"\x14CARRIER_TYPE_VHSNTSC\x10j\x12\x17\n" +
	"\x13CARRIER_TYPE_VHSPAL\x10k\x12\x1c\n" +
	"\x18CARRIER_TYPE_VHSPLUSCDLP\x10l\x12\x19\n" +
	"\x15CARRIER_TYPE_VHSSECAM\x10m\x12\x1b\n" +
	"\x17CARRIER_TYPE_FILESYSTEM\x10n\x12\x1d\n" +
	"\x19CARRIER_TYPE_MEMORYDEVICE\x10o\x12\x1d\n" +
	"\x19CARRIER_TYPE_ONLINESYSTEM\x10p*\xc2\x02\n" +
	"\x10CdProtectionType\x12\"\n" +
	"\x1eCD_PROTECTION_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19CD_PROTECTION_TYPE_CDS100\x10\x01\x12\x1d\n" +
	"\x19CD_PROTECTION_TYPE_CDS200\x10\x02\x12\x1d\n" +
	"\x19CD_PROTECTION_TYPE_CDS300\x10\x03\x12 \n" +
	"\x1cCD_PROTECTION_TYPE_KEY2AUDIO\x10\x04\x12\"\n" +
	"\x1eCD_PROTECTION_TYPE_MEDIAMAXCD3\x10\x05\x12#\n" +
	"\x1fCD_PROTECTION_TYPE_NOTPROTECTED\x10\x06\x12\x1e\n" +
	"\x1aCD_PROTECTION_TYPE_UNKNOWN\x10\a\x12\"\n" +
	"\x1eCD_PROTECTION_TYPE_USERDEFINED\x10\b*\x9c\x01\n" +
	"\rCharacterType\x12\x1e\n" +
	"\x1aCHARACTER_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cCHARACTER_TYPE_MAINCHARACTER\x10\x01\x12!\n" +
	"\x1dCHARACTER_TYPE_OTHERCHARACTER\x10\x02\x12&\n" +
	"\"CHARACTER_TYPE_SUPPORTINGCHARACTER\x10\x03*Z\n" +
	"\n" +
	"CodingType\x12\x1b\n" +
	"\x17CODING_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14CODING_TYPE_LOSSLESS\x10\x01\x12\x15\n" +
	"\x11CODING_TYPE_LOSSY\x10\x02*\xb3\x02\n" +
	"\x0eCollectionType\x12\x1f\n" +
	"\x1bCOLLECTION_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cCOLLECTION_TYPE_AUDIOCHAPTER\x10\x01\x12\x1b\n" +
	"\x17COLLECTION_TYPE_EPISODE\x10\x02\x12\x1e\n" +
	"\x1aCOLLECTION_TYPE_FILMBUNDLE\x10\x03\x12!\n" +
	"\x1dCOLLECTION_TYPE_MEDLEYSEGMENT\x10\x04\x12$\n" +
	" COLLECTION_TYPE_POTPOURRISEGMENT\x10\x05\x12\x1a\n" +
	"\x16COLLECTION_TYPE_SEASON\x10\x06\x12\x1a\n" +
	"\x16COLLECTION_TYPE_SERIES\x10\a\x12 \n" +
	"\x1cCOLLECTION_TYPE_VIDEOCHAPTER\x10\b*\xf6\x03\n" +
	"\x13CommercialModelType\x12%\n" +
	"!COMMERCIAL_MODEL_TYPE_UNSPECIFIED\x10\x00\x125\n" +
	"1COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL\x10\x01\x12'\n" +
	"#COMMERCIAL_MODEL_TYPE_ASPERCONTRACT\x10\x02\x12(\n" +
	"$COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL\x10\x03\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL\x10\x04\x12)\n" +
	"%COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL\x10\x05\x123\n" +
	"/COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL\x10\x06\x12*\n" +
	"&COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL\x10\a\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL\x10\b\x12!\n" +
	"\x1dCOMMERCIAL_MODEL_TYPE_UNKNOWN\x10\t\x12%\n" +
	"!COMMERCIAL_MODEL_TYPE_USERDEFINED\x10\n" +
	"*\xac\x01\n" +
	"\x0fCompilationType\x12 \n" +
	"\x1cCOMPILATION_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$COMPILATION_TYPE_INTERNALCOMPILATION\x10\x01\x12+\n" +
	"'COMPILATION_TYPE_NONINTERNALCOMPILATION\x10\x02\x12 \n" +
	"\x1cCOMPILATION_TYPE_NOTCOMPILED\x10\x03*\xb2\x02\n" +
	"\x0fContainerFormat\x12 \n" +
	"\x1cCONTAINER_FORMAT_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CONTAINER_FORMAT_AIFF\x10\x01\x12\x18\n" +
	"\x14CONTAINER_FORMAT_AVI\x10\x02\x12\x18\n" +
	"\x14CONTAINER_FORMAT_MP4\x10\x03\x12\x18\n" +
	"\x14CONTAINER_FORMAT_OGG\x10\x04\x12\x1e\n" +
	"\x1aCONTAINER_FORMAT_QUICKTIME\x10\x05\x12\x1e\n" +
	"\x1aCONTAINER_FORMAT_REALMEDIA\x10\x06\x12\x18\n" +
	"\x14CONTAINER_FORMAT_RMF\x10\a\x12 \n" +
	"\x1cCONTAINER_FORMAT_USERDEFINED\x10\b\x12\x18\n" +
	"\x14CONTAINER_FORMAT_WAV\x10\t*\x83\x01\n" +
	"\fCreationType\x12\x1d\n" +
	"\x19CREATION_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19CREATION_TYPE_MUSICALWORK\x10\x01\x12\x19\n" +
	"\x15CREATION_TYPE_RELEASE\x10\x02\x12\x1a\n" +
	"\x16CREATION_TYPE_RESOURCE\x10\x03*\xc4\x04\n" +
	"\x17CreativeContributorRole\x12)\n" +
	"%CREATIVE_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12%\n" +
	"!CREATIVE_CONTRIBUTOR_ROLE_ADAPTER\x10\x01\x12&\n" +
	"\"CREATIVE_CONTRIBUTOR_ROLE_ARRANGER\x10\x02\x121\n" +
	"-CREATIVE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER\x10\x03\x12$\n" +
	" CREATIVE_CONTRIBUTOR_ROLE_AUTHOR\x10\x04\x12&\n" +
	"\"CREATIVE_CONTRIBUTOR_ROLE_COMPOSER\x10\x05\x12.\n" +
	"*CREATIVE_CONTRIBUTOR_ROLE_COMPOSERLYRICIST\x10\x06\x12(\n" +
	"$CREATIVE_CONTRIBUTOR_ROLE_LIBRETTIST\x10\a\x12&\n" +
	"\"CREATIVE_CONTRIBUTOR_ROLE_LYRICIST\x10\b\x12,\n" +
	"(CREATIVE_CONTRIBUTOR_ROLE_NONLYRICAUTHOR\x10\t\x12)\n" +
	"%CREATIVE_CONTRIBUTOR_ROLE_SUBARRANGER\x10\n" +
	"\x12)\n" +
	"%CREATIVE_CONTRIBUTOR_ROLE_SUBLYRICIST\x10\v\x12(\n" +
	"$CREATIVE_CONTRIBUTOR_ROLE_TRANSLATOR\x10\f*\xc4\x01\n" +
	"\tCueOrigin\x12\x1a\n" +
	"\x16CUE_ORIGIN_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17CUE_ORIGIN_LIBRARYMUSIC\x10\x01\x12\x1f\n" +
	"\x1bCUE_ORIGIN_PREEXISTINGMUSIC\x10\x02\x12)\n" +
	"%CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC\x10\x03\x12\x16\n" +
	"\x12CUE_ORIGIN_UNKNOWN\x10\x04\x12\x1a\n" +
	"\x16CUE_ORIGIN_USERDEFINED\x10\x05*\xea\x01\n" +
	"\fCueSheetType\x12\x1e\n" +
	"\x1aCUE_SHEET_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eCUE_SHEET_TYPE_AVERAGECUESHEET\x10\x01\x12$\n" +
	" CUE_SHEET_TYPE_COMPOSITECUESHEET\x10\x02\x12#\n" +
	"\x1fCUE_SHEET_TYPE_STANDARDCUESHEET\x10\x03\x12%\n" +
	"!CUE_SHEET_TYPE_SUMMARISEDCUESHEET\x10\x04\x12$\n" +
	" CUE_SHEET_TYPE_SURROGATECUESHEET\x10\x05*\xda\x02\n" +
	"\n" +
	"CueUseType\x12\x1c\n" +
	"\x18CUE_USE_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CUE_USE_TYPE_AUDIOLOGO\x10\x01\x12\x1b\n" +
	"\x17CUE_USE_TYPE_BACKGROUND\x10\x02\x12\x17\n" +
	"\x13CUE_USE_TYPE_BUMPER\x10\x03\x12\x1e\n" +
	"\x1aCUE_USE_TYPE_ESSENTIALPART\x10\x04\x12\x1a\n" +
	"\x16CUE_USE_TYPE_FILMTHEME\x10\x05\x12,\n" +
	"(CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND\x10\x06\x12\x1e\n" +
	"\x1aCUE_USE_TYPE_ONSCREENMUSIC\x10\a\x12\x1c\n" +
	"\x18CUE_USE_TYPE_ROLLEDUPCUE\x10\b\x12\x16\n" +
	"\x12CUE_USE_TYPE_THEME\x10\t\x12\x1c\n" +
	"\x18CUE_USE_TYPE_USERDEFINED\x10\n" +
	"*\xe6\x1f\n" +
	"\fCurrencyCode\x12\x1d\n" +
	"\x19CURRENCY_CODE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11CURRENCY_CODE_AED\x10\x01\x12\x15\n" +
	"\x11CURRENCY_CODE_AFN\x10\x02\x12\x15\n" +
	"\x11CURRENCY_CODE_ALL\x10\x03\x12\x15\n" +
	"\x11CURRENCY_CODE_AMD\x10\x04\x12\x15\n" +
	"\x11CURRENCY_CODE_ANG\x10\x05\x12\x15\n" +
	"\x11CURRENCY_CODE_AOA\x10\x06\x12\x15\n" +
	"\x11CURRENCY_CODE_ARS\x10\a\x12\x15\n" +
	"\x11CURRENCY_CODE_AUD\x10\b\x12\x15\n" +
	"\x11CURRENCY_CODE_AWG\x10\t\x12\x15\n" +
	"\x11CURRENCY_CODE_AZN\x10\n" +
	"\x12\x15\n" +
	"\x11CURRENCY_CODE_BAM\x10\v\x12\x15\n" +
	"\x11CURRENCY_CODE_BBD\x10\f\x12\x15\n" +
	"\x11CURRENCY_CODE_BDT\x10\r\x12\x15\n" +
	"\x11CURRENCY_CODE_BGN\x10\x0e\x12\x15\n" +
	"\x11CURRENCY_CODE_BHD\x10\x0f\x12\x15\n" +
	"\x11CURRENCY_CODE_BIF\x10\x10\x12\x15\n" +
	"\x11CURRENCY_CODE_BMD\x10\x11\x12\x15\n" +
	"\x11CURRENCY_CODE_BND\x10\x12\x12\x15\n" +
	"\x11CURRENCY_CODE_BOB\x10\x13\x12\x15\n" +
	"\x11CURRENCY_CODE_BOV\x10\x14\x12\x15\n" +
	"\x11CURRENCY_CODE_BRL\x10\x15\x12\x15\n" +
	"\x11CURRENCY_CODE_BSD\x10\x16\x12\x15\n" +
	"\x11CURRENCY_CODE_BTN\x10\x17\x12\x15\n" +
	"\x11CURRENCY_CODE_BWP\x10\x18\x12\x15\n" +
	"\x11CURRENCY_CODE_BYR\x10\x19\x12\x15\n" +
	"\x11CURRENCY_CODE_BZD\x10\x1a\x12\x15\n" +
	"\x11CURRENCY_CODE_CAD\x10\x1b\x12\x15\n" +
	"\x11CURRENCY_CODE_CDF\x10\x1c\x12\x15\n" +
	"\x11CURRENCY_CODE_CHF\x10\x1d\x12\x15\n" +
	"\x11CURRENCY_CODE_CLF\x10\x1e\x12\x15\n" +
	"\x11CURRENCY_CODE_CLP\x10\x1f\x12\x15\n" +
	"\x11CURRENCY_CODE_CNY\x10 \x12\x15\n" +
	"\x11CURRENCY_CODE_COP\x10!\x12\x15\n" +
	"\x11CURRENCY_CODE_COU\x10\"\x12\x15\n" +
	"\x11CURRENCY_CODE_CRC\x10#\x12\x15\n" +
	"\x11CURRENCY_CODE_CUC\x10$\x12\x15\n" +
	"\x11CURRENCY_CODE_CUP\x10%\x12\x15\n" +
	"\x11CURRENCY_CODE_CVE\x10&\x12\x15\n" +
	"\x11CURRENCY_CODE_CZK\x10'\x12\x15\n" +
	"\x11CURRENCY_CODE_DJF\x10(\x12\x15\n" +
	"\x11CURRENCY_CODE_DKK\x10)\x12\x15\n" +
	"\x11CURRENCY_CODE_DOP\x10*\x12\x15\n" +
	"\x11CURRENCY_CODE_DZD\x10+\x12\x15\n" +
	"\x11CURRENCY_CODE_EGP\x10,\x12\x15\n" +
	"\x11CURRENCY_CODE_ERN\x10-\x12\x15\n" +
	"\x11CURRENCY_CODE_ETB\x10.\x12\x15\n" +
	"\x11CURRENCY_CODE_EUR\x10/\x12\x15\n" +
	"\x11CURRENCY_CODE_FJD\x100\x12\x15\n" +
	"\x11CURRENCY_CODE_FKP\x101\x12\x15\n" +
	"\x11CURRENCY_CODE_GBP\x102\x12\x15\n" +
	"\x11CURRENCY_CODE_GEL\x103\x12\x15\n" +
	"\x11CURRENCY_CODE_GHS\x104\x12\x15\n" +
	"\x11CURRENCY_CODE_GIP\x105\x12\x15\n" +
	"\x11CURRENCY_CODE_GMD\x106\x12\x15\n" +
	"\x11CURRENCY_CODE_GNF\x107\x12\x15\n" +
	"\x11CURRENCY_CODE_GTQ\x108\x12\x15\n" +
	"\x11CURRENCY_CODE_GYD\x109\x12\x15\n" +
	"\x11CURRENCY_CODE_HKD\x10:\x12\x15\n" +
	"\x11CURRENCY_CODE_HNL\x10;\x12\x15\n" +
	"\x11CURRENCY_CODE_HRK\x10<\x12\x15\n" +
	"\x11CURRENCY_CODE_HTG\x10=\x12\x15\n" +
	"\x11CURRENCY_CODE_HUF\x10>\x12\x15\n" +
	"\x11CURRENCY_CODE_IDR\x10?\x12\x15\n" +
	"\x11CURRENCY_CODE_ILS\x10@\x12\x15\n" +
	"\x11CURRENCY_CODE_INR\x10A\x12\x15\n" +
	"\x11CURRENCY_CODE_IQD\x10B\x12\x15\n" +
	"\x11CURRENCY_CODE_IRR\x10C\x12\x15\n" +
	"\x11CURRENCY_CODE_ISK\x10D\x12\x15\n" +
	"\x11CURRENCY_CODE_JMD\x10E\x12\x15\n" +
	"\x11CURRENCY_CODE_JOD\x10F\x12\x15\n" +
	"\x11CURRENCY_CODE_JPY\x10G\x12\x15\n" +
	"\x11CURRENCY_CODE_KES\x10H\x12\x15\n" +
	"\x11CURRENCY_CODE_KGS\x10I\x12\x15\n" +
	"\x11CURRENCY_CODE_KHR\x10J\x12\x15\n" +
	"\x11CURRENCY_CODE_KMF\x10K\x12\x15\n" +
	"\x11CURRENCY_CODE_KPW\x10L\x12\x15\n" +
	"\x11CURRENCY_CODE_KRW\x10M\x12\x15\n" +
	"\x11CURRENCY_CODE_KWD\x10N\x12\x15\n" +
	"\x11CURRENCY_CODE_KYD\x10O\x12\x15\n" +
	"\x11CURRENCY_CODE_KZT\x10P\x12\x15\n" +
	"\x11CURRENCY_CODE_LAK\x10Q\x12\x15\n" +
	"\x11CURRENCY_CODE_LBP\x10R\x12\x15\n" +
	"\x11CURRENCY_CODE_LKR\x10S\x12\x15\n" +
	"\x11CURRENCY_CODE_LRD\x10T\x12\x15\n" +
	"\x11CURRENCY_CODE_LSL\x10U\x12\x15\n" +
	"\x11CURRENCY_CODE_LYD\x10V\x12\x15\n" +
	"\x11CURRENCY_CODE_MAD\x10W\x12\x15\n" +
	"\x11CURRENCY_CODE_MDL\x10X\x12\x15\n" +
	"\x11CURRENCY_CODE_MGA\x10Y\x12\x15\n" +
	"\x11CURRENCY_CODE_MKD\x10Z\x12\x15\n" +
	"\x11CURRENCY_CODE_MMK\x10[\x12\x15\n" +
	"\x11CURRENCY_CODE_MNT\x10\\\x12\x15\n" +
	"\x11CURRENCY_CODE_MOP\x10]\x12\x15\n" +
	"\x11CURRENCY_CODE_MRU\x10^\x12\x15\n" +
	"\x11CURRENCY_CODE_MUR\x10_\x12\x15\n" +
	"\x11CURRENCY_CODE_MVR\x10`\x12\x15\n" +
	"\x11CURRENCY_CODE_MWK\x10a\x12\x15\n" +
	"\x11CURRENCY_CODE_MXN\x10b\x12\x15\n" +
	"\x11CURRENCY_CODE_MXV\x10c\x12\x15\n" +
	"\x11CURRENCY_CODE_MYR\x10d\x12\x15\n" +
	"\x11CURRENCY_CODE_MZN\x10e\x12\x15\n" +
	"\x11CURRENCY_CODE_NAD\x10f\x12\x15\n" +
	"\x11CURRENCY_CODE_NGN\x10g\x12\x15\n" +
	"\x11CURRENCY_CODE_NIO\x10h\x12\x15\n" +
	"\x11CURRENCY_CODE_NOK\x10i\x12\x15\n" +
	"\x11CURRENCY_CODE_NPR\x10j\x12\x15\n" +
	"\x11CURRENCY_CODE_NZD\x10k\x12\x15\n" +
	"\x11CURRENCY_CODE_OMR\x10l\x12\x15\n" +
	"\x11CURRENCY_CODE_PAB\x10m\x12\x15\n" +
	"\x11CURRENCY_CODE_PEN\x10n\x12\x15\n" +
	"\x11CURRENCY_CODE_PGK\x10o\x12\x15\n" +
	"\x11CURRENCY_CODE_PHP\x10p\x12\x15\n" +
	"\x11CURRENCY_CODE_PKR\x10q\x12\x15\n" +
	"\x11CURRENCY_CODE_PLN\x10r\x12\x15\n" +
	"\x11CURRENCY_CODE_PYG\x10s\x12\x15\n" +
	"\x11CURRENCY_CODE_QAR\x10t\x12\x15\n" +
	"\x11CURRENCY_CODE_RON\x10u\x12\x15\n" +
	"\x11CURRENCY_CODE_RSD\x10v\x12\x15\n" +
	"\x11CURRENCY_CODE_RUB\x10w\x12\x15\n" +
	"\x11CURRENCY_CODE_RWF\x10x\x12\x15\n" +
	"\x11CURRENCY_CODE_SAR\x10y\x12\x15\n" +
	"\x11CURRENCY_CODE_SBD\x10z\x12\x15\n" +
	"\x11CURRENCY_CODE_SCR\x10{\x12\x15\n" +
	"\x11CURRENCY_CODE_SDG\x10|\x12\x15\n" +
	"\x11CURRENCY_CODE_SEK\x10}\x12\x15\n" +
	"\x11CURRENCY_CODE_SGD\x10~\x12\x15\n" +
	"\x11CURRENCY_CODE_SHP\x10\x7f\x12\x16\n" +
	"\x11CURRENCY_CODE_SLL\x10\x80\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SOS\x10\x81\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SRD\x10\x82\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SSP\x10\x83\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_STN\x10\x84\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SVC\x10\x85\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SYP\x10\x86\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SZL\x10\x87\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_THB\x10\x88\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TJS\x10\x89\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TMT\x10\x8a\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TND\x10\x8b\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TOP\x10\x8c\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TRY\x10\x8d\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TTD\x10\x8e\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TWD\x10\x8f\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TZS\x10\x90\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UAH\x10\x91\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UGX\x10\x92\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_USD\x10\x93\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UYI\x10\x94\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UYU\x10\x95\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UZS\x10\x96\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VES\x10\x97\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VND\x10\x98\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VUV\x10\x99\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_WST\x10\x9a\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XAF\x10\x9b\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XCD\x10\x9c\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XOF\x10\x9d\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XPF\x10\x9e\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_YER\x10\x9f\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZAR\x10\xa0\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZMW\x10\xa1\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZWL\x10\xa2\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_CYP\x10\xa3\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_EEK\x10\xa4\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_LTL\x10\xa5\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_LVL\x10\xa6\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_MTL\x10\xa7\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_MRO\x10\xa8\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ROL\x10\xa9\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SIT\x10\xaa\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SKK\x10\xab\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_STD\x10\xac\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VEF\x10\xad\x01*\x9e\x83\x01\n" +
	"\x14CurrentTerritoryCode\x12&\n" +
	"\"CURRENT_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AD\x10\x01\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AE\x10\x02\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AF\x10\x03\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AG\x10\x04\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AI\x10\x05\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AL\x10\x06\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AM\x10\a\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AN\x10\b\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AO\x10\t\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AQ\x10\n" +
	"\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AR\x10\v\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AS\x10\f\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AT\x10\r\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AU\x10\x0e\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AW\x10\x0f\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AX\x10\x10\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AZ\x10\x11\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BA\x10\x12\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BB\x10\x13\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BD\x10\x14\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BE\x10\x15\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BF\x10\x16\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BG\x10\x17\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BH\x10\x18\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BI\x10\x19\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BJ\x10\x1a\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BL\x10\x1b\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BM\x10\x1c\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BN\x10\x1d\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BO\x10\x1e\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BQ\x10\x1f\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BR\x10 \x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BS\x10!\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BT\x10\"\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BV\x10#\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BW\x10$\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BY\x10%\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BZ\x10&\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CA\x10'\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CC\x10(\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CD\x10)\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CF\x10*\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CG\x10+\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CH\x10,\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CI\x10-\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CK\x10.\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CL\x10/\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CM\x100\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CN\x101\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CO\x102\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CR\x103\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CS\x104\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CU\x105\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CV\x106\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CW\x107\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CX\x108\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CY\x109\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CZ\x10:\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DE\x10;\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DJ\x10<\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DK\x10=\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DM\x10>\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DO\x10?\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DZ\x10@\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_EC\x10A\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_EE\x10B\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_EG\x10C\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_EH\x10D\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_ER\x10E\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_ES\x10F\x12 \n" +
	"\x1cCURRENT_TERRITORY_CODE_ES_CE\x10G\x12 \n" +
	"\x1cCURRENT_TERRITORY_CODE_ES_CN\x10H\x12 \n" +
	"\x1cCURRENT_TERRITORY_CODE_ES_ML\x10I\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_ET\x10J\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FI\x10K\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FJ\x10L\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FK\x10M\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FM\x10N\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FO\x10O\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FR\x10P\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GA\x10Q\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GB\x10R\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GD\x10S\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GE\x10T\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GF\x10U\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GG\x10V\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GH\x10W\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GI\x10X\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GL\x10Y\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GM\x10Z\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GN\x10[\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GP\x10\\\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GQ\x10]\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GR\x10^\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GS\x10_\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GT\x10`\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GU\x10a\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GW\x10b\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GY\x10c\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HK\x10d\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HM\x10e\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HN\x10f\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HR\x10g\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HT\x10h\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HU\x10i\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_ID\x10j\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IE\x10k\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IL\x10l\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IM\x10m\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IN\x10n\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IO\x10o\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IQ\x10p\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IR\x10q\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IS\x10r\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IT\x10s\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_JE\x10t\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_JM\x10u\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_JO\x10v\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_JP\x10w\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KE\x10x\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KG\x10y\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KH\x10z\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KI\x10{\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KM\x10|\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KN\x10}\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KP\x10~\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KR\x10\x7f\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_KW\x10\x80\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_KY\x10\x81\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_KZ\x10\x82\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LA\x10\x83\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LB\x10\x84\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LC\x10\x85\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LI\x10\x86\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LK\x10\x87\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LR\x10\x88\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LS\x10\x89\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LT\x10\x8a\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LU\x10\x8b\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LV\x10\x8c\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LY\x10\x8d\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MA\x10\x8e\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MC\x10\x8f\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MD\x10\x90\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ME\x10\x91\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MF\x10\x92\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MG\x10\x93\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MH\x10\x94\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MK\x10\x95\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ML\x10\x96\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MM\x10\x97\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MN\x10\x98\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MO\x10\x99\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MP\x10\x9a\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MQ\x10\x9b\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MR\x10\x9c\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MS\x10\x9d\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MT\x10\x9e\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MU\x10\x9f\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MV\x10\xa0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MW\x10\xa1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MX\x10\xa2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MY\x10\xa3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MZ\x10\xa4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NA\x10\xa5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NC\x10\xa6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NE\x10\xa7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NF\x10\xa8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NG\x10\xa9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NI\x10\xaa\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NL\x10\xab\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NO\x10\xac\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NP\x10\xad\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NR\x10\xae\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NU\x10\xaf\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NZ\x10\xb0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_OM\x10\xb1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PA\x10\xb2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PE\x10\xb3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PF\x10\xb4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PG\x10\xb5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PH\x10\xb6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PK\x10\xb7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PL\x10\xb8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PM\x10\xb9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PN\x10\xba\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PR\x10\xbb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PS\x10\xbc\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PT\x10\xbd\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PW\x10\xbe\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PY\x10\xbf\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_QA\x10\xc0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RE\x10\xc1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RO\x10\xc2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RS\x10\xc3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RU\x10\xc4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RW\x10\xc5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SA\x10\xc6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SB\x10\xc7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SC\x10\xc8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SD\x10\xc9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SE\x10\xca\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SG\x10\xcb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SH\x10\xcc\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SI\x10\xcd\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SJ\x10\xce\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SK\x10\xcf\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SL\x10\xd0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SM\x10\xd1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SN\x10\xd2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SO\x10\xd3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SR\x10\xd4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SS\x10\xd5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ST\x10\xd6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SV\x10\xd7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SX\x10\xd8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SY\x10\xd9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SZ\x10\xda\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TC\x10\xdb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TD\x10\xdc\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TF\x10\xdd\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TG\x10\xde\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TH\x10\xdf\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TJ\x10\xe0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TK\x10\xe1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TL\x10\xe2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TM\x10\xe3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TN\x10\xe4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TO\x10\xe5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TR\x10\xe6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TT\x10\xe7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TV\x10\xe8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TW\x10\xe9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TZ\x10\xea\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UA\x10\xeb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UG\x10\xec\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UM\x10\xed\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_US\x10\xee\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UY\x10\xef\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UZ\x10\xf0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VA\x10\xf1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VC\x10\xf2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VE\x10\xf3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VG\x10\xf4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VI\x10\xf5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VN\x10\xf6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VU\x10\xf7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_WF\x10\xf8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_WS\x10\xf9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_YE\x10\xfa\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_YT\x10\xfb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ZA\x10\xfc\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ZM\x10\xfd\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ZW\x10\xfe\x01\x12\x1f\n" +
	"\x1aCURRENT_TERRITORY_CODE_E_4\x10\xff\x01\x12\x1f\n" +
	"\x1aCURRENT_TERRITORY_CODE_E_8\x10\x80\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_12\x10\x81\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_20\x10\x82\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_24\x10\x83\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_28\x10\x84\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_31\x10\x85\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_32\x10\x86\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_36\x10\x87\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_40\x10\x88\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_44\x10\x89\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_48\x10\x8a\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_50\x10\x8b\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_51\x10\x8c\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_52\x10\x8d\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_56\x10\x8e\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_64\x10\x8f\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_68\x10\x90\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_70\x10\x91\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_72\x10\x92\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_76\x10\x93\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_84\x10\x94\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_90\x10\x95\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_96\x10\x96\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_100\x10\x97\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_104\x10\x98\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_108\x10\x99\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_112\x10\x9a\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_116\x10\x9b\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_120\x10\x9c\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_124\x10\x9d\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_132\x10\x9e\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_140\x10\x9f\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_144\x10\xa0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_148\x10\xa1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_152\x10\xa2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_156\x10\xa3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_158\x10\xa4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_170\x10\xa5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_174\x10\xa6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_178\x10\xa7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_180\x10\xa8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_188\x10\xa9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_191\x10\xaa\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_192\x10\xab\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_196\x10\xac\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_200\x10\xad\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_203\x10\xae\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_204\x10\xaf\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_208\x10\xb0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_212\x10\xb1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_214\x10\xb2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_218\x10\xb3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_222\x10\xb4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_226\x10\xb5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_230\x10\xb6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_231\x10\xb7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_232\x10\xb8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_233\x10\xb9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_242\x10\xba\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_246\x10\xbb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_250\x10\xbc\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_258\x10\xbd\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_262\x10\xbe\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_266\x10\xbf\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_268\x10\xc0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_270\x10\xc1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_276\x10\xc2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_278\x10\xc3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_280\x10\xc4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_288\x10\xc5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_296\x10\xc6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_300\x10\xc7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_308\x10\xc8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_320\x10\xc9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_324\x10\xca\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_328\x10\xcb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_332\x10\xcc\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_336\x10\xcd\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_340\x10\xce\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_344\x10\xcf\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_348\x10\xd0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_352\x10\xd1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_356\x10\xd2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_360\x10\xd3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_364\x10\xd4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_368\x10\xd5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_372\x10\xd6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_376\x10\xd7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_380\x10\xd8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_384\x10\xd9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_388\x10\xda\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_392\x10\xdb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_398\x10\xdc\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_400\x10\xdd\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_404\x10\xde\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_408\x10\xdf\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_410\x10\xe0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_414\x10\xe1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_417\x10\xe2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_418\x10\xe3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_422\x10\xe4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_426\x10\xe5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_428\x10\xe6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_430\x10\xe7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_434\x10\xe8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_438\x10\xe9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_440\x10\xea\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_442\x10\xeb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_446\x10\xec\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_450\x10\xed\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_454\x10\xee\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_458\x10\xef\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_462\x10\xf0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_466\x10\xf1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_470\x10\xf2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_478\x10\xf3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_480\x10\xf4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_484\x10\xf5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_492\x10\xf6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_496\x10\xf7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_498\x10\xf8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_499\x10\xf9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_504\x10\xfa\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_508\x10\xfb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_512\x10\xfc\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_516\x10\xfd\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_520\x10\xfe\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_524\x10\xff\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_528\x10\x80\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_540\x10\x81\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_548\x10\x82\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_554\x10\x83\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_558\x10\x84\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_562\x10\x85\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_566\x10\x86\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_578\x10\x87\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_583\x10\x88\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_584\x10\x89\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_585\x10\x8a\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_586\x10\x8b\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_591\x10\x8c\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_598\x10\x8d\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_600\x10\x8e\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_604\x10\x8f\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_608\x10\x90\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_616\x10\x91\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_620\x10\x92\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_624\x10\x93\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_626\x10\x94\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_630\x10\x95\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_634\x10\x96\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_642\x10\x97\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_643\x10\x98\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_646\x10\x99\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_659\x10\x9a\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_662\x10\x9b\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_670\x10\x9c\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_674\x10\x9d\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_678\x10\x9e\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_682\x10\x9f\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_686\x10\xa0\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_688\x10\xa1\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_690\x10\xa2\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_694\x10\xa3\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_702\x10\xa4\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_703\x10\xa5\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_704\x10\xa6\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_705\x10\xa7\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_706\x10\xa8\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_710\x10\xa9\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_716\x10\xaa\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_720\x10\xab\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_724\x10\xac\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_728\x10\xad\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_729\x10\xae\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_732\x10\xaf\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_736\x10\xb0\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_740\x10\xb1\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_748\x10\xb2\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_752\x10\xb3\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_756\x10\xb4\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_760\x10\xb5\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_762\x10\xb6\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_764\x10\xb7\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_768\x10\xb8\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_776\x10\xb9\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_780\x10\xba\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_784\x10\xbb\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_788\x10\xbc\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_792\x10\xbd\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_795\x10\xbe\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_798\x10\xbf\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_800\x10\xc0\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_804\x10\xc1\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_807\x10\xc2\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_810\x10\xc3\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_818\x10\xc4\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_826\x10\xc5\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_834\x10\xc6\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_840\x10\xc7\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_854\x10\xc8\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_858\x10\xc9\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_860\x10\xca\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_862\x10\xcb\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_882\x10\xcc\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_886\x10\xcd\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_887\x10\xce\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_890\x10\xcf\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_891\x10\xd0\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_894\x10\xd1\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2100\x10\xd2\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2101\x10\xd3\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2102\x10\xd4\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2103\x10\xd5\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2104\x10\xd6\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2105\x10\xd7\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2106\x10\xd8\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2107\x10\xd9\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2108\x10\xda\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2109\x10\xdb\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2110\x10\xdc\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2111\x10\xdd\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2112\x10\xde\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2113\x10\xdf\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2114\x10\xe0\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2115\x10\xe1\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2116\x10\xe2\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2117\x10\xe3\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2118\x10\xe4\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2119\x10\xe5\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2120\x10\xe6\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2121\x10\xe7\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2122\x10\xe8\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2123\x10\xe9\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2124\x10\xea\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2125\x10\xeb\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2126\x10\xec\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2127\x10\xed\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2128\x10\xee\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2129\x10\xef\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2130\x10\xf0\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2131\x10\xf1\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2132\x10\xf2\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2133\x10\xf3\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2134\x10\xf4\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2136\x10\xf5\x03\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_XK\x10\xf6\x03\x12%\n" +
	" CURRENT_TERRITORY_CODE_WORLDWIDE\x10\xf7\x03*\x92\x03\n" +
	"\x18DataMismatchResponseType\x12+\n" +
	"'DATA_MISMATCH_RESPONSE_TYPE_UNSPECIFIED\x10\x00\x129\n" +
	"5DATA_MISMATCH_RESPONSE_TYPE_ADDITIONALINFORMATIONONLY\x10\x01\x128\n" +
	"4DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHCONFIRMATION\x10\x02\x126\n" +
	"2DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHOUTOFSCOPE\x10\x03\x12C\n" +
	"?DATA_MISMATCH_RESPONSE_TYPE_DATAMISMATCHRAISEDCOMMERCIALDISPUTE\x10\x04\x12*\n" +
	"&DATA_MISMATCH_RESPONSE_TYPE_NOREACTION\x10\x05\x12+\n" +
	"'DATA_MISMATCH_RESPONSE_TYPE_USERDEFINED\x10\x06*\xff\x01\n" +
	"\x12DataMismatchStatus\x12$\n" +
	" DATA_MISMATCH_STATUS_UNSPECIFIED\x10\x00\x122\n" +
	".DATA_MISMATCH_STATUS_ADDITIONALINFORMATIONONLY\x10\x01\x12\"\n" +
	"\x1eDATA_MISMATCH_STATUS_CORRECTED\x10\x02\x12\x1e\n" +
	"\x1aDATA_MISMATCH_STATUS_FATAL\x10\x03\x12%\n" +
	"!DATA_MISMATCH_STATUS_NOTCORRECTED\x10\x04\x12$\n" +
	" DATA_MISMATCH_STATUS_USERDEFINED\x10\x05*\xd4\b\n" +
	"\x10DataMismatchType\x12\"\n" +
	"\x1eDATA_MISMATCH_TYPE_UNSPECIFIED\x10\x00\x120\n" +
	",DATA_MISMATCH_TYPE_ADDITIONALINFORMATIONONLY\x10\x01\x12+\n" +
	"'DATA_MISMATCH_TYPE_CHOREOGRAPHYCONFLICT\x10\x02\x12(\n" +
	"$DATA_MISMATCH_TYPE_CONTRADICTORYDATA\x10\x03\x12%\n" +
	"!DATA_MISMATCH_TYPE_DUPLICATEDDATA\x10\x04\x12/\n" +
	"+DATA_MISMATCH_TYPE_IDENTIFIERSYNTAXMISMATCH\x10\x05\x120\n" +
	",DATA_MISMATCH_TYPE_MATHEMATICALINCONSISTENCY\x10\x06\x12?\n" +
	";DATA_MISMATCH_TYPE_MISSINGCONTRACTUALLYMANDATORYINFORMATION\x10\a\x122\n" +
	".DATA_MISMATCH_TYPE_MISSINGMANDATORYINFORMATION\x10\b\x12>\n" +
	":DATA_MISMATCH_TYPE_MISSINGREFERENCEDMUSICALWORKINFORMATION\x10\t\x12:\n" +
	"6DATA_MISMATCH_TYPE_MISSINGREFERENCEDRELEASEINFORMATION\x10\n" +
	"\x12;\n" +
	"7DATA_MISMATCH_TYPE_MISSINGREFERENCEDRESOURCEINFORMATION\x10\v\x12J\n" +
	"FDATA_MISMATCH_TYPE_MISSINGREFERENCEDTECHNICALRESOURCEDETAILINFORMATION\x10\f\x12*\n" +
	"&DATA_MISMATCH_TYPE_MISSINGRESOURCEFILE\x10\r\x12*\n" +
	"&DATA_MISMATCH_TYPE_TYPOGRAPHICMISMATCH\x10\x0e\x12-\n" +
	")DATA_MISMATCH_TYPE_UNEXPECTEDALLOWEDVALUE\x10\x0f\x124\n" +
	"0DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGEINTERMEDIARY\x10\x10\x121\n" +
	"-DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGERECIPIENT\x10\x11\x12.\n" +
	"*DATA_MISMATCH_TYPE_UNEXPECTEDMESSAGESENDER\x10\x12\x12\"\n" +
	"\x1eDATA_MISMATCH_TYPE_USERDEFINED\x10\x13\x12%\n" +
	"!DATA_MISMATCH_TYPE_XMLFORMATERROR\x10\x14\x12$\n" +
	" DATA_MISMATCH_TYPE_XMLRANGEERROR\x10\x15*w\n" +
	"\x11DdexTerritoryCode\x12#\n" +
	"\x1fDDEX_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16DDEX_TERRITORY_CODE_XK\x10\x01\x12!\n" +
	"\x1dDDEX_TERRITORY_CODE_WORLDWIDE\x10\x02*\xa8\x01\n" +
	"\x11DeductionRateType\x12#\n" +
	"\x1fDEDUCTION_RATE_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dDEDUCTION_RATE_TYPE_PENNYRATE\x10\x01\x12&\n" +
	"\"DEDUCTION_RATE_TYPE_PERCENTAGERATE\x10\x02\x12#\n" +
	"\x1fDEDUCTION_RATE_TYPE_USERDEFINED\x10\x03*\x80\x02\n" +
	"\x12DeliveryActionType\x12$\n" +
	" DELIVERY_ACTION_TYPE_UNSPECIFIED\x10\x00\x12-\n" +
	")DELIVERY_ACTION_TYPE_CHANGEDELIVERYLIMITS\x10\x01\x122\n" +
	".DELIVERY_ACTION_TYPE_RESTARTDELIVERYWITHLIMITS\x10\x02\x12:\n" +
	"6DELIVERY_ACTION_TYPE_RESTARTDELIVERYWITHPREVIOUSLIMITS\x10\x03\x12%\n" +
	"!DELIVERY_ACTION_TYPE_STOPDELIVERY\x10\x04*\xb6\x01\n" +
	"\x13DeliveryMessageType\x12%\n" +
	"!DELIVERY_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'DELIVERY_MESSAGE_TYPE_NEWRELEASEMESSAGE\x10\x01\x12(\n" +
	"$DELIVERY_MESSAGE_TYPE_NONDDEXMESSAGE\x10\x02\x12!\n" +
	"\x1dDELIVERY_MESSAGE_TYPE_UNKNOWN\x10\x03*\xb8\x03\n" +
	"\x16DeprecatedCurrencyCode\x12(\n" +
	"$DEPRECATED_CURRENCY_CODE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_CYP\x10\x01\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_EEK\x10\x02\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_MTL\x10\x03\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_ROL\x10\x04\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_SIT\x10\x05\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_SKK\x10\x06\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_LTL\x10\a\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_LVL\x10\b\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_MRO\x10\t\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_STD\x10\n" +
	"\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_VEF\x10\v*\xa3\n" +
	"\n" +
	"\x1aDeprecatedIsoTerritoryCode\x12-\n" +
	")DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_AIDJ\x10\x01\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_ANHH\x10\x02\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_BQAQ\x10\x03\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_BUMM\x10\x04\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_BYAA\x10\x05\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_CSHH\x10\x06\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_CSXX\x10\a\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_CTKI\x10\b\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_DDDE\x10\t\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_DYBJ\x10\n" +
	"\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_FQHH\x10\v\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_FXFR\x10\f\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_GEHH\x10\r\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_HVBF\x10\x0e\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_JTUM\x10\x0f\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_MIUM\x10\x10\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_NHVU\x10\x11\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_NQAQ\x10\x12\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_NTHH\x10\x13\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_PCHH\x10\x14\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_PUUM\x10\x15\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_PZPA\x10\x16\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_RHZW\x10\x17\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_SKIN\x10\x18\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_SUHH\x10\x19\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_TPTL\x10\x1a\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_VDVN\x10\x1b\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_WKUM\x10\x1c\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_YDYE\x10\x1d\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_YUCS\x10\x1e\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_ZRCD\x10\x1f*\xa5\x01\n" +
	"\x10DigitizationMode\x12!\n" +
	"\x1dDIGITIZATION_MODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15DIGITIZATION_MODE_AAD\x10\x01\x12\x19\n" +
	"\x15DIGITIZATION_MODE_ADD\x10\x02\x12\x19\n" +
	"\x15DIGITIZATION_MODE_DDD\x10\x03\x12\x1d\n" +
	"\x19DIGITIZATION_MODE_UNKNOWN\x10\x04*\xca\x01\n" +
	"\rDisputeReason\x12\x1e\n" +
	"\x1aDISPUTE_REASON_UNSPECIFIED\x10\x00\x12%\n" +
	"!DISPUTE_REASON_MISSINGINFORMATION\x10\x01\x12+\n" +
	"'DISPUTE_REASON_NOTPARTOFCATALOGTRANSFER\x10\x02\x12%\n" +
	"!DISPUTE_REASON_MORERESEARCHNEEDED\x10\x03\x12\x1e\n" +
	"\x1aDISPUTE_REASON_USERDEFINED\x10\x04*\xe0\x05\n" +
	"\x17DistributionChannelType\x12)\n" +
	"%DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT\x10\x01\x12'\n" +
	"#DISTRIBUTION_CHANNEL_TYPE_BROADCAST\x10\x02\x12#\n" +
	"\x1fDISTRIBUTION_CHANNEL_TYPE_CABLE\x10\x03\x12&\n" +
	"\"DISTRIBUTION_CHANNEL_TYPE_INTERNET\x10\x04\x12/\n" +
	"+DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE\x10\x05\x12\"\n" +
	"\x1eDISTRIBUTION_CHANNEL_TYPE_IPTV\x10\x06\x12-\n" +
	")DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE\x10\a\x12(\n" +
	"$DISTRIBUTION_CHANNEL_TYPE_NARROWCAST\x10\b\x12,\n" +
	"(DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM\x10\t\x12(\n" +
	"$DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER\x10\n" +
	"\x12&\n" +
	"\"DISTRIBUTION_CHANNEL_TYPE_PHYSICAL\x10\v\x12'\n" +
	"#DISTRIBUTION_CHANNEL_TYPE_SATELLITE\x10\f\x12'\n" +
	"#DISTRIBUTION_CHANNEL_TYPE_SIMULCAST\x10\r\x12%\n" +
	"!DISTRIBUTION_CHANNEL_TYPE_UNKNOWN\x10\x0e\x12)\n" +
	"%DISTRIBUTION_CHANNEL_TYPE_USERDEFINED\x10\x0f\x12%\n" +
	"!DISTRIBUTION_CHANNEL_TYPE_WEBCAST\x10\x10*t\n" +
	"\n" +
	"DpidStatus\x12\x1b\n" +
	"\x17DPID_STATUS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12DPID_STATUS_ACTIVE\x10\x01\x12\x17\n" +
	"\x13DPID_STATUS_DELETED\x10\x02\x12\x18\n" +
	"\x14DPID_STATUS_REPLACED\x10\x03*\x89\x01\n" +
	"\x12DrmEnforcementType\x12$\n" +
	" DRM_ENFORCEMENT_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" DRM_ENFORCEMENT_TYPE_DRMENFORCED\x10\x01\x12'\n" +
	"#DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED\x10\x02*\xf6\x01\n" +
	"\x0fDrmPlatformType\x12!\n" +
	"\x1dDRM_PLATFORM_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18DRM_PLATFORM_TYPE_E_3DAY\x10\x01\x12\x1e\n" +
	"\x1aDRM_PLATFORM_TYPE_FAIRPLAY\x10\x02\x12\x19\n" +
	"\x15DRM_PLATFORM_TYPE_OMA\x10\x03\x12\x1d\n" +
	"\x19DRM_PLATFORM_TYPE_UNKNOWN\x10\x04\x12!\n" +
	"\x1dDRM_PLATFORM_TYPE_USERDEFINED\x10\x05\x12%\n" +
	"!DRM_PLATFORM_TYPE_WINDOWSMEDIADRM\x10\x06*\x9c\x01\n" +
	"\x0eDsrMessageType\x12 \n" +
	"\x1cDSR_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x126\n" +
	"2DSR_MESSAGE_TYPE_SALESREPORTTORECORDCOMPANYMESSAGE\x10\x01\x120\n" +
	",DSR_MESSAGE_TYPE_SALESREPORTTOSOCIETYMESSAGE\x10\x02*\x8f\x02\n" +
	"\rEquipmentType\x12\x1e\n" +
	"\x1aEQUIPMENT_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17EQUIPMENT_TYPE_COMPUTER\x10\x01\x12\x1d\n" +
	"\x19EQUIPMENT_TYPE_MICROPHONE\x10\x02\x12\x1b\n" +
	"\x17EQUIPMENT_TYPE_RECORDER\x10\x03\x12\"\n" +
	"\x1eEQUIPMENT_TYPE_SIGNALPROCESSOR\x10\x04\x12\x1b\n" +
	"\x17EQUIPMENT_TYPE_SOFTWARE\x10\x05\x12\x1e\n" +
	"\x1aEQUIPMENT_TYPE_LOUDSPEAKER\x10\x06\x12$\n" +
	" EQUIPMENT_TYPE_MUSICALINSTRUMENT\x10\a*Z\n" +
	"\x0eErnMessageType\x12 \n" +
	"\x1cERN_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE\x10\x01*\xca\a\n" +
	"\x0eErncFileStatus\x12 \n" +
	"\x1cERNC_FILE_STATUS_UNSPECIFIED\x10\x00\x12&\n" +
	"\"ERNC_FILE_STATUS_ARTISTROLEUNKNOWN\x10\x01\x121\n" +
	"-ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID\x10\x02\x123\n" +
	"/ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS\x10\x03\x12-\n" +
	")ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES\x10\x04\x12\x1f\n" +
	"\x1bERNC_FILE_STATUS_ERNMISSING\x10\x05\x12\x1b\n" +
	"\x17ERNC_FILE_STATUS_FILEOK\x10\x06\x12&\n" +
	"\"ERNC_FILE_STATUS_IDENTIFIERINVALID\x10\a\x12,\n" +
	"(ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID\x10\b\x12\"\n" +
	"\x1eERNC_FILE_STATUS_INTERNALERROR\x10\t\x12$\n" +
	" ERNC_FILE_STATUS_METADATAMISSING\x10\n" +
	"\x12-\n" +
	")ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID\x10\v\x12*\n" +
	"&ERNC_FILE_STATUS_NODEALFORTRACKRELEASE\x10\f\x12.\n" +
	"*ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE\x10\r\x12<\n" +
	"8ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE\x10\x0e\x12-\n" +
	")ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING\x10\x0f\x12$\n" +
	" ERNC_FILE_STATUS_RESOURCECORRUPT\x10\x10\x12$\n" +
	" ERNC_FILE_STATUS_RESOURCEMISSING\x10\x11\x125\n" +
	"1ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS\x10\x12\x125\n" +
	"1ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING\x10\x13\x12%\n" +
	"!ERNC_FILE_STATUS_UNSUPPORTEDUSAGE\x10\x14\x12 \n" +
	"\x1cERNC_FILE_STATUS_USERDEFINED\x10\x15*\xbd\x02\n" +
	"\x16ErncProposedActionType\x12)\n" +
	"%ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY\x10\x01\x123\n" +
	"/ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES\x10\x02\x12)\n" +
	"%ERNC_PROPOSED_ACTION_TYPE_USERDEFINED\x10\x03\x129\n" +
	"5ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE\x10\x04\x120\n" +
	",ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE\x10\x05*s\n" +
	"\x0eExpressionType\x12\x1f\n" +
	"\x1bEXPRESSION_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bEXPRESSION_TYPE_INFORMATIVE\x10\x01\x12\x1f\n" +
	"\x1bEXPRESSION_TYPE_INSTRUCTIVE\x10\x02*\xb6\x03\n" +
	"\x1cExternallyLinkedResourceType\x12/\n" +
	"+EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED\x10\x00\x126\n" +
	"2EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA\x10\x01\x12(\n" +
	"$EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO\x10\x02\x124\n" +
	"0EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE\x10\x03\x12:\n" +
	"6EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION\x10\x04\x123\n" +
	"/EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM\x10\x05\x12+\n" +
	"'EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN\x10\x06\x12/\n" +
	"+EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED\x10\a*\x9c\x01\n" +
	"\n" +
	"FileStatus\x12\x1b\n" +
	"\x17FILE_STATUS_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17FILE_STATUS_FILEMISSING\x10\x01\x12\x16\n" +
	"\x12FILE_STATUS_FILEOK\x10\x02\x12\x1c\n" +
	"\x18FILE_STATUS_HASHSUMWRONG\x10\x03\x12\x1e\n" +
	"\x1aFILE_STATUS_SIGNATUREWRONG\x10\x04*r\n" +
	"\x18FingerprintAlgorithmType\x12*\n" +
	"&FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&FINGERPRINT_ALGORITHM_TYPE_USERDEFINED\x10\x01*\xa5\x01\n" +
	"\x16GoverningAgreementType\x12(\n" +
	"$GOVERNING_AGREEMENT_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$GOVERNING_AGREEMENT_TYPE_USERDEFINED\x10\x01\x127\n" +
	"3GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT\x10\x02*\xf6\x04\n" +
	"\x14HashSumAlgorithmType\x12'\n" +
	"#HASH_SUM_ALGORITHM_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bHASH_SUM_ALGORITHM_TYPE_MD4\x10\x01\x12\x1f\n" +
	"\x1bHASH_SUM_ALGORITHM_TYPE_MD5\x10\x02\x12\x1f\n" +
	"\x1bHASH_SUM_ALGORITHM_TYPE_SHA\x10\x03\x12 \n" +
	"\x1cHASH_SUM_ALGORITHM_TYPE_SHA1\x10\x04\x12'\n" +
	"#HASH_SUM_ALGORITHM_TYPE_USERDEFINED\x10\x05\x12!\n" +
	"\x1dHASH_SUM_ALGORITHM_TYPE_CRC32\x10\x06\x12\x1f\n" +
	"\x1bHASH_SUM_ALGORITHM_TYPE_MD2\x10\a\x12%\n" +
	"!HASH_SUM_ALGORITHM_TYPE_MD4_MLNET\x10\b\x12 \n" +
	"\x1cHASH_SUM_ALGORITHM_TYPE_MDC2\x10\t\x12\"\n" +
	"\x1eHASH_SUM_ALGORITHM_TYPE_RMD160\x10\n" +
	"\x12 \n" +
	"\x1cHASH_SUM_ALGORITHM_TYPE_SHA2\x10\v\x12#\n" +
	"\x1fHASH_SUM_ALGORITHM_TYPE_SHA_224\x10\f\x12#\n" +
	"\x1fHASH_SUM_ALGORITHM_TYPE_SHA_256\x10\r\x12 \n" +
	"\x1cHASH_SUM_ALGORITHM_TYPE_SHA3\x10\x0e\x12#\n" +
	"\x1fHASH_SUM_ALGORITHM_TYPE_SHA_384\x10\x0f\x12#\n" +
	"\x1fHASH_SUM_ALGORITHM_TYPE_SHA_512\x10\x10*\xfb\x01\n" +
	"\x0eImageCodecType\x12 \n" +
	"\x1cIMAGE_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14IMAGE_CODEC_TYPE_GIF\x10\x01\x12\x19\n" +
	"\x15IMAGE_CODEC_TYPE_JPEG\x10\x02\x12\x1d\n" +
	"\x19IMAGE_CODEC_TYPE_JPEG2000\x10\x03\x12\x18\n" +
	"\x14IMAGE_CODEC_TYPE_PNG\x10\x04\x12\x19\n" +
	"\x15IMAGE_CODEC_TYPE_TIFF\x10\x05\x12\x1c\n" +
	"\x18IMAGE_CODEC_TYPE_UNKNOWN\x10\x06\x12 \n" +
	"\x1cIMAGE_CODEC_TYPE_USERDEFINED\x10\a*\xc7\x03\n" +
	"\tImageType\x12\x1a\n" +
	"\x16IMAGE_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19IMAGE_TYPE_BACKCOVERIMAGE\x10\x01\x12\x1f\n" +
	"\x1bIMAGE_TYPE_BOOKLETBACKIMAGE\x10\x02\x12 \n" +
	"\x1cIMAGE_TYPE_BOOKLETFRONTIMAGE\x10\x03\x12\x1c\n" +
	"\x18IMAGE_TYPE_DOCUMENTIMAGE\x10\x04\x12\x1e\n" +
	"\x1aIMAGE_TYPE_FRONTCOVERIMAGE\x10\x05\x12\x13\n" +
	"\x0fIMAGE_TYPE_ICON\x10\x06\x12\x13\n" +
	"\x0fIMAGE_TYPE_LOGO\x10\a\x12\x19\n" +
	"\x15IMAGE_TYPE_PHOTOGRAPH\x10\b\x12\x15\n" +
	"\x11IMAGE_TYPE_POSTER\x10\t\x12\x18\n" +
	"\x14IMAGE_TYPE_TRAYIMAGE\x10\n" +
	"\x12\x16\n" +
	"\x12IMAGE_TYPE_UNKNOWN\x10\v\x12\x1a\n" +
	"\x16IMAGE_TYPE_USERDEFINED\x10\f\x12!\n" +
	"\x1dIMAGE_TYPE_VIDEOSCREENCAPTURE\x10\r\x12\x18\n" +
	"\x14IMAGE_TYPE_WALLPAPER\x10\x0e\x12\x17\n" +
	"\x13IMAGE_TYPE_PORTRAIT\x10\x0f*\xaf\x01\n" +
	"\x19InvoiceAvailabilityStatus\x12+\n" +
	"'INVOICE_AVAILABILITY_STATUS_UNSPECIFIED\x10\x00\x120\n" +
	",INVOICE_AVAILABILITY_STATUS_INVOICEAVAILABLE\x10\x01\x123\n" +
	"/INVOICE_AVAILABILITY_STATUS_INVOICENOTAVAILABLE\x10\x02*\xb1$\n" +
	"\x0fIsoCurrencyCode\x12!\n" +
	"\x1dISO_CURRENCY_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AED\x10\x01\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AFN\x10\x02\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ALL\x10\x03\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AMD\x10\x04\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ANG\x10\x05\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AOA\x10\x06\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ARS\x10\a\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AUD\x10\b\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AWG\x10\t\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AZN\x10\n" +
	"\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BAM\x10\v\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BBD\x10\f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BDT\x10\r\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BGN\x10\x0e\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BHD\x10\x0f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BIF\x10\x10\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BMD\x10\x11\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BND\x10\x12\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BOB\x10\x13\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BOV\x10\x14\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BRL\x10\x15\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BSD\x10\x16\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BTN\x10\x17\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BWP\x10\x18\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BYR\x10\x19\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BZD\x10\x1a\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CAD\x10\x1b\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CDF\x10\x1c\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CHF\x10\x1d\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CLF\x10\x1e\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CLP\x10\x1f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CNY\x10 \x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_COP\x10!\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_COU\x10\"\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CRC\x10#\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CUC\x10$\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CUP\x10%\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CVE\x10&\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CZK\x10'\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DJF\x10(\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DKK\x10)\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DOP\x10*\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DZD\x10+\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_EGP\x10,\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ERN\x10-\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ETB\x10.\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_EUR\x10/\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_FJD\x100\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_FKP\x101\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GBP\x102\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GEL\x103\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GHS\x104\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GIP\x105\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GMD\x106\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GNF\x107\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GTQ\x108\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GYD\x109\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HKD\x10:\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HNL\x10;\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HRK\x10<\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HTG\x10=\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HUF\x10>\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_IDR\x10?\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ILS\x10@\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_INR\x10A\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_IQD\x10B\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_IRR\x10C\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ISK\x10D\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_JMD\x10E\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_JOD\x10F\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_JPY\x10G\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KES\x10H\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KGS\x10I\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KHR\x10J\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KMF\x10K\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KPW\x10L\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KRW\x10M\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KWD\x10N\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KYD\x10O\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KZT\x10P\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LAK\x10Q\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LBP\x10R\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LKR\x10S\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LRD\x10T\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LSL\x10U\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LTL\x10V\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LVL\x10W\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LYD\x10X\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MAD\x10Y\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MDL\x10Z\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MGA\x10[\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MKD\x10\\\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MMK\x10]\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MNT\x10^\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MOP\x10_\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MRO\x10`\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MUR\x10a\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MVR\x10b\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MWK\x10c\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MXN\x10d\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MXV\x10e\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MYR\x10f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MZM\x10g\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NAD\x10h\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NGN\x10i\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NIO\x10j\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NOK\x10k\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NPR\x10l\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NZD\x10m\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_OMR\x10n\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PAB\x10o\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PEN\x10p\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PGK\x10q\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PHP\x10r\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PKR\x10s\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PLN\x10t\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PYG\x10u\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_QAR\x10v\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RON\x10w\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RSD\x10x\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RUB\x10y\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RWF\x10z\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SAR\x10{\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SBD\x10|\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SCR\x10}\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SDG\x10~\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SEK\x10\x7f\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SGD\x10\x80\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SHP\x10\x81\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SLL\x10\x82\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SOS\x10\x83\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SRD\x10\x84\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_STD\x10\x85\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SVC\x10\x86\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SYP\x10\x87\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SZL\x10\x88\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_THB\x10\x89\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TJS\x10\x8a\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TMT\x10\x8b\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TND\x10\x8c\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TOP\x10\x8d\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TRY\x10\x8e\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TTD\x10\x8f\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TWD\x10\x90\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TZS\x10\x91\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UAH\x10\x92\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UGX\x10\x93\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_USD\x10\x94\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UYI\x10\x95\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UYU\x10\x96\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UZS\x10\x97\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VEF\x10\x98\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VND\x10\x99\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VUV\x10\x9a\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_WST\x10\x9b\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XAF\x10\x9c\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XCD\x10\x9d\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XOF\x10\x9e\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XPF\x10\x9f\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_YER\x10\xa0\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZAR\x10\xa1\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZMK\x10\xa2\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZWL\x10\xa3\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_MRU\x10\xa4\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_MZN\x10\xa5\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SSP\x10\xa6\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_STN\x10\xa7\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VES\x10\xa8\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZMW\x10\xa9\x01*\x9c\x96\x01\n" +
	"\x0fIsoLanguageCode\x12!\n" +
	"\x1dISO_LANGUAGE_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_RAJ\x10\x01\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BHO\x10\x02\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AA\x10\x03\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AB\x10\x04\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AE\x10\x05\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AF\x10\x06\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AK\x10\a\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AM\x10\b\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AN\x10\t\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AR\x10\n" +
	"\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AS\x10\v\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AV\x10\f\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AY\x10\r\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AZ\x10\x0e\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BA\x10\x0f\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BE\x10\x10\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BG\x10\x11\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BH\x10\x12\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BI\x10\x13\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BM\x10\x14\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BN\x10\x15\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BO\x10\x16\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BR\x10\x17\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BS\x10\x18\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CA\x10\x19\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CE\x10\x1a\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CH\x10\x1b\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CO\x10\x1c\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CR\x10\x1d\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CS\x10\x1e\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CU\x10\x1f\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CV\x10 \x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CY\x10!\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DA\x10\"\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DE\x10#\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DV\x10$\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DZ\x10%\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EE\x10&\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EL\x10'\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EN\x10(\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EO\x10)\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_ES\x10*\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_ET\x10+\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EU\x10,\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FA\x10-\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FF\x10.\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FI\x10/\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FJ\x100\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FO\x101\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FR\x102\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FY\x103\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GA\x104\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GD\x105\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GL\x106\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GN\x107\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GU\x108\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GV\x109\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HA\x10:\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HE\x10;\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HI\x10<\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HO\x10=\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HR\x10>\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HT\x10?\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HU\x10@\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HY\x10A\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HZ\x10B\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_IA\x10C\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_ID\x10D\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_IE\x10E\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_IG\x10F\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_II\x10G\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_IK\x10H\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_IO\x10I\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_IS\x10J\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_IT\x10K\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_IU\x10L\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_JA\x10M\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_JV\x10N\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KA\x10O\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KG\x10P\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KI\x10Q\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KJ\x10R\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KK\x10S\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KL\x10T\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KM\x10U\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KN\x10V\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KO\x10W\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KR\x10X\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KS\x10Y\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KU\x10Z\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KV\x10[\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KW\x10\\\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_KY\x10]\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_LA\x10^\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_LB\x10_\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_LG\x10`\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_LI\x10a\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_LN\x10b\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_LO\x10c\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_LT\x10d\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_LU\x10e\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_LV\x10f\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MG\x10g\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MH\x10h\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MI\x10i\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MK\x10j\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_ML\x10k\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MN\x10l\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MO\x10m\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MR\x10n\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MS\x10o\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MT\x10p\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_MY\x10q\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NA\x10r\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NB\x10s\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_ND\x10t\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NE\x10u\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NG\x10v\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NL\x10w\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NN\x10x\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NO\x10y\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NR\x10z\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NV\x10{\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_NY\x10|\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_OC\x10}\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_OJ\x10~\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_OM\x10\x7f\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OR\x10\x80\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OS\x10\x81\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PA\x10\x82\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PI\x10\x83\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PL\x10\x84\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PS\x10\x85\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PT\x10\x86\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_QU\x10\x87\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RM\x10\x88\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RN\x10\x89\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RO\x10\x8a\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RU\x10\x8b\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RW\x10\x8c\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SA\x10\x8d\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SC\x10\x8e\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SD\x10\x8f\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SE\x10\x90\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SG\x10\x91\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SI\x10\x92\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SK\x10\x93\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SL\x10\x94\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SM\x10\x95\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SN\x10\x96\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SO\x10\x97\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SQ\x10\x98\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SR\x10\x99\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SS\x10\x9a\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ST\x10\x9b\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SU\x10\x9c\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SV\x10\x9d\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SW\x10\x9e\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TA\x10\x9f\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TE\x10\xa0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TG\x10\xa1\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TH\x10\xa2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TI\x10\xa3\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TK\x10\xa4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TL\x10\xa5\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TN\x10\xa6\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TO\x10\xa7\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TR\x10\xa8\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TS\x10\xa9\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TT\x10\xaa\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TW\x10\xab\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TY\x10\xac\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UG\x10\xad\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UK\x10\xae\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UR\x10\xaf\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UZ\x10\xb0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_VE\x10\xb1\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_VI\x10\xb2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_VO\x10\xb3\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_WA\x10\xb4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_WO\x10\xb5\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_XH\x10\xb6\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_YI\x10\xb7\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_YO\x10\xb8\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ZA\x10\xb9\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ZH\x10\xba\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ZU\x10\xbb\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BGC\x10\xbc\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQA\x10\xbd\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQB\x10\xbe\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQC\x10\xbf\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQD\x10\xc0\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQE\x10\xc1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQF\x10\xc2\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQG\x10\xc3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQH\x10\xc4\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQI\x10\xc5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQJ\x10\xc6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AAR\x10\xc7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ABK\x10\xc8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AVE\x10\xc9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AFR\x10\xca\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AKA\x10\xcb\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AMH\x10\xcc\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARG\x10\xcd\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARA\x10\xce\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ASM\x10\xcf\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AVA\x10\xd0\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AYM\x10\xd1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AZE\x10\xd2\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAK\x10\xd3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BEL\x10\xd4\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BUL\x10\xd5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BIH\x10\xd6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BIS\x10\xd7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAM\x10\xd8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BEN\x10\xd9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BOD\x10\xda\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BRE\x10\xdb\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BOS\x10\xdc\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAT\x10\xdd\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHE\x10\xde\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHA\x10\xdf\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_COS\x10\xe0\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CRE\x10\xe1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CES\x10\xe2\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHU\x10\xe3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHV\x10\xe4\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CYM\x10\xe5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAN\x10\xe6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DEU\x10\xe7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DIV\x10\xe8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DZO\x10\xe9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EWE\x10\xea\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ELL\x10\xeb\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ENG\x10\xec\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EPO\x10\xed\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SPA\x10\xee\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EST\x10\xef\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EUS\x10\xf0\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FAS\x10\xf1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FUL\x10\xf2\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FIN\x10\xf3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FIJ\x10\xf4\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FAO\x10\xf5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRA\x10\xf6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRY\x10\xf7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GLE\x10\xf8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GLA\x10\xf9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GLG\x10\xfa\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GRN\x10\xfb\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GUJ\x10\xfc\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GLV\x10\xfd\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HAU\x10\xfe\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HEB\x10\xff\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIN\x10\x80\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HMO\x10\x81\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HRV\x10\x82\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HAT\x10\x83\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HUN\x10\x84\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HYE\x10\x85\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HER\x10\x86\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INA\x10\x87\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IND\x10\x88\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ILE\x10\x89\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IBO\x10\x8a\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_III\x10\x8b\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IPK\x10\x8c\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IDO\x10\x8d\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ISL\x10\x8e\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ITA\x10\x8f\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IKU\x10\x90\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JPN\x10\x91\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JAV\x10\x92\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAT\x10\x93\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KON\x10\x94\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KIK\x10\x95\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUA\x10\x96\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAZ\x10\x97\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAL\x10\x98\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHM\x10\x99\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAN\x10\x9a\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOR\x10\x9b\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAU\x10\x9c\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAS\x10\x9d\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUR\x10\x9e\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOM\x10\x9f\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_COR\x10\xa0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KIR\x10\xa1\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAT\x10\xa2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LTZ\x10\xa3\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUG\x10\xa4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LIM\x10\xa5\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LIN\x10\xa6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAO\x10\xa7\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LIT\x10\xa8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUB\x10\xa9\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAV\x10\xaa\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MLG\x10\xab\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAH\x10\xac\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MRI\x10\xad\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MKD\x10\xae\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAL\x10\xaf\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MON\x10\xb0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAR\x10\xb1\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MSA\x10\xb2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MLT\x10\xb3\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MYA\x10\xb4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAU\x10\xb5\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NOB\x10\xb6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NDE\x10\xb7\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NEP\x10\xb8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NDO\x10\xb9\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NLD\x10\xba\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NNO\x10\xbb\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NOR\x10\xbc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NBL\x10\xbd\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAV\x10\xbe\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYA\x10\xbf\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OCI\x10\xc0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OJI\x10\xc1\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ORM\x10\xc2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ORI\x10\xc3\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OSS\x10\xc4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAN\x10\xc5\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PLI\x10\xc6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_POL\x10\xc7\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PUS\x10\xc8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_POR\x10\xc9\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QUE\x10\xca\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ROH\x10\xcb\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RUN\x10\xcc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RON\x10\xcd\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RUS\x10\xce\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KIN\x10\xcf\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAN\x10\xd0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRD\x10\xd1\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SND\x10\xd2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SME\x10\xd3\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAG\x10\xd4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SIN\x10\xd5\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SLK\x10\xd6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SLV\x10\xd7\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMO\x10\xd8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SNA\x10\xd9\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SOM\x10\xda\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SQI\x10\xdb\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRP\x10\xdc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SSW\x10\xdd\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SOT\x10\xde\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUN\x10\xdf\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SWE\x10\xe0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SWA\x10\xe1\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAM\x10\xe2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TEL\x10\xe3\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TGK\x10\xe4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_THA\x10\xe5\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TIR\x10\xe6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUK\x10\xe7\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TGL\x10\xe8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TSN\x10\xe9\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TON\x10\xea\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUR\x10\xeb\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TSO\x10\xec\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAT\x10\xed\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TWI\x10\xee\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAH\x10\xef\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UIG\x10\xf0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UKR\x10\xf1\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_URD\x10\xf2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UZB\x10\xf3\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VEN\x10\xf4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VIE\x10\xf5\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VOL\x10\xf6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WLN\x10\xf7\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WOL\x10\xf8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_XHO\x10\xf9\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YID\x10\xfa\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YOR\x10\xfb\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZHA\x10\xfc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZHO\x10\xfd\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZUL\x10\xfe\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ACE\x10\xff\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ACH\x10\x80\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ADA\x10\x81\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ADY\x10\x82\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AFA\x10\x83\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AFH\x10\x84\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AIN\x10\x85\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AKK\x10\x86\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ALE\x10\x87\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ALG\x10\x88\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ALT\x10\x89\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ANG\x10\x8a\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ANP\x10\x8b\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_APA\x10\x8c\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARC\x10\x8d\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARN\x10\x8e\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARP\x10\x8f\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ART\x10\x90\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARW\x10\x91\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AST\x10\x92\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ATH\x10\x93\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AUS\x10\x94\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AWA\x10\x95\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAD\x10\x96\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAI\x10\x97\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAL\x10\x98\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAN\x10\x99\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAS\x10\x9a\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAT\x10\x9b\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BEJ\x10\x9c\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BEM\x10\x9d\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BER\x10\x9e\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BIK\x10\x9f\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BIN\x10\xa0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BLA\x10\xa1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BNT\x10\xa2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BRA\x10\xa3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BTK\x10\xa4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BUA\x10\xa5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BUG\x10\xa6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BYN\x10\xa7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAD\x10\xa8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAI\x10\xa9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAR\x10\xaa\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAU\x10\xab\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CEB\x10\xac\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CEL\x10\xad\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHB\x10\xae\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHG\x10\xaf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHK\x10\xb0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHM\x10\xb1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHN\x10\xb2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHO\x10\xb3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHP\x10\xb4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHR\x10\xb5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHY\x10\xb6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CMC\x10\xb7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CNR\x10\xb8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_COP\x10\xb9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CPE\x10\xba\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CPF\x10\xbb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CPP\x10\xbc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CRH\x10\xbd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CRP\x10\xbe\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CSB\x10\xbf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CUS\x10\xc0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAK\x10\xc1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAR\x10\xc2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAY\x10\xc3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DEL\x10\xc4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DEN\x10\xc5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DGR\x10\xc6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DIN\x10\xc7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DOI\x10\xc8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DRA\x10\xc9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DSB\x10\xca\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DUA\x10\xcb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DUM\x10\xcc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DYU\x10\xcd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EFI\x10\xce\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EGY\x10\xcf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EKA\x10\xd0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ELX\x10\xd1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ENM\x10\xd2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EWO\x10\xd3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FAN\x10\xd4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FAT\x10\xd5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FIL\x10\xd6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FIU\x10\xd7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FON\x10\xd8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRM\x10\xd9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRO\x10\xda\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRR\x10\xdb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRS\x10\xdc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FUR\x10\xdd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GAA\x10\xde\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GAY\x10\xdf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GBA\x10\xe0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GEM\x10\xe1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GEZ\x10\xe2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GIL\x10\xe3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GMH\x10\xe4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GOH\x10\xe5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GON\x10\xe6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GOR\x10\xe7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GOT\x10\xe8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GRB\x10\xe9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GRC\x10\xea\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GSW\x10\xeb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GWI\x10\xec\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HAI\x10\xed\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HAW\x10\xee\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIL\x10\xef\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIM\x10\xf0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIT\x10\xf1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HMN\x10\xf2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HSB\x10\xf3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HUP\x10\xf4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IBA\x10\xf5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IJO\x10\xf6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ILO\x10\xf7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INC\x10\xf8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INE\x10\xf9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INH\x10\xfa\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IRA\x10\xfb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IRO\x10\xfc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JBO\x10\xfd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JPR\x10\xfe\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JRB\x10\xff\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAA\x10\x80\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAB\x10\x81\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAC\x10\x82\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAM\x10\x83\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAR\x10\x84\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAW\x10\x85\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KBD\x10\x86\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHA\x10\x87\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHI\x10\x88\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHO\x10\x89\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KMB\x10\x8a\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOK\x10\x8b\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOS\x10\x8c\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KPE\x10\x8d\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRC\x10\x8e\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRL\x10\x8f\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRO\x10\x90\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRU\x10\x91\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUM\x10\x92\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUT\x10\x93\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAD\x10\x94\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAH\x10\x95\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAM\x10\x96\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LEZ\x10\x97\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LOL\x10\x98\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LOZ\x10\x99\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUA\x10\x9a\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUI\x10\x9b\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUN\x10\x9c\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUO\x10\x9d\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUS\x10\x9e\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAD\x10\x9f\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAG\x10\xa0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAI\x10\xa1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAK\x10\xa2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAN\x10\xa3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAP\x10\xa4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAS\x10\xa5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MDF\x10\xa6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MDR\x10\xa7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MEN\x10\xa8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MGA\x10\xa9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MIC\x10\xaa\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MIN\x10\xab\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MIS\x10\xac\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MKH\x10\xad\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MNC\x10\xae\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MNI\x10\xaf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MNO\x10\xb0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MOH\x10\xb1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MOS\x10\xb2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUL\x10\xb3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUN\x10\xb4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUS\x10\xb5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MWL\x10\xb6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MWR\x10\xb7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MYN\x10\xb8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MYV\x10\xb9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAH\x10\xba\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAI\x10\xbb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAP\x10\xbc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NDS\x10\xbd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NEW\x10\xbe\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NIA\x10\xbf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NIC\x10\xc0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NIU\x10\xc1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NOG\x10\xc2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NON\x10\xc3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NQO\x10\xc4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NSO\x10\xc5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NUB\x10\xc6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NWC\x10\xc7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYM\x10\xc8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYN\x10\xc9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYO\x10\xca\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NZI\x10\xcb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OSA\x10\xcc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OTA\x10\xcd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OTO\x10\xce\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAA\x10\xcf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAG\x10\xd0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAL\x10\xd1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAM\x10\xd2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAP\x10\xd3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAU\x10\xd4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PEO\x10\xd5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PHI\x10\xd6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PHN\x10\xd7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PON\x10\xd8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PRA\x10\xd9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PRO\x10\xda\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RAP\x10\xdb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RAR\x10\xdc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ROA\x10\xdd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ROM\x10\xde\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RUP\x10\xdf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAD\x10\xe0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAH\x10\xe1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAI\x10\xe2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAL\x10\xe3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAM\x10\xe4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAS\x10\xe5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAT\x10\xe6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCN\x10\xe7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCO\x10\xe8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SEL\x10\xe9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SEM\x10\xea\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SGA\x10\xeb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SGN\x10\xec\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SHN\x10\xed\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SID\x10\xee\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SIO\x10\xef\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SIT\x10\xf0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SLA\x10\xf1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMA\x10\xf2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMI\x10\xf3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMJ\x10\xf4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMN\x10\xf5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMS\x10\xf6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SNK\x10\xf7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SOG\x10\xf8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SON\x10\xf9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRN\x10\xfa\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRR\x10\xfb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SSA\x10\xfc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUK\x10\xfd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUS\x10\xfe\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUX\x10\xff\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SYC\x10\x80\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SYR\x10\x81\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAI\x10\x82\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TEM\x10\x83\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TER\x10\x84\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TET\x10\x85\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TIG\x10\x86\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TIV\x10\x87\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TKL\x10\x88\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TLH\x10\x89\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TLI\x10\x8a\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TMH\x10\x8b\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TOG\x10\x8c\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TPI\x10\x8d\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TSI\x10\x8e\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUM\x10\x8f\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUP\x10\x90\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUT\x10\x91\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TVL\x10\x92\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TYV\x10\x93\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UDM\x10\x94\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UGA\x10\x95\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UMB\x10\x96\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UND\x10\x97\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VAI\x10\x98\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VOT\x10\x99\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAK\x10\x9a\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAL\x10\x9b\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAR\x10\x9c\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAS\x10\x9d\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WEN\x10\x9e\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_XAL\x10\x9f\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YAO\x10\xa0\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YAP\x10\xa1\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YPK\x10\xa2\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZAP\x10\xa3\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZBL\x10\xa4\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZEN\x10\xa5\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZGH\x10\xa6\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZND\x10\xa7\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZUN\x10\xa8\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZXX\x10\xa9\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZZA\x10\xaa\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AAA\x10\xab\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HNE\x10\xac\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GBM\x10\xad\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHW\x10\xae\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CMN\x10\xaf\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCK\x10\xb0\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SPV\x10\xb1\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCL\x10\xb2\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YUE\x10\xb3\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TCY\x10\xb4\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KEY\x10\xb5\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GCF\x10\xb6\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JAM\x10\xb7\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MCM\x10\xb8\x05*\x887\n" +
	"\x10IsoTerritoryCode\x12\"\n" +
	"\x1eISO_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AD\x10\x01\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AE\x10\x02\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AF\x10\x03\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AG\x10\x04\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AI\x10\x05\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AL\x10\x06\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AM\x10\a\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AN\x10\b\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AO\x10\t\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AQ\x10\n" +
	"\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AR\x10\v\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AS\x10\f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AT\x10\r\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AU\x10\x0e\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AW\x10\x0f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AX\x10\x10\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AZ\x10\x11\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BA\x10\x12\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BB\x10\x13\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BD\x10\x14\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BE\x10\x15\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BF\x10\x16\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BG\x10\x17\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BH\x10\x18\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BI\x10\x19\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BJ\x10\x1a\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BL\x10\x1b\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BM\x10\x1c\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BN\x10\x1d\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BO\x10\x1e\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BQ\x10\x1f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BR\x10 \x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BS\x10!\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BT\x10\"\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BV\x10#\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BW\x10$\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BY\x10%\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BZ\x10&\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CA\x10'\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CC\x10(\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CD\x10)\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CF\x10*\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CG\x10+\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CH\x10,\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CI\x10-\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CK\x10.\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CL\x10/\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CM\x100\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CN\x101\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CO\x102\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CR\x103\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CS\x104\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CU\x105\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CV\x106\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CW\x107\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CX\x108\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CY\x109\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CZ\x10:\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DE\x10;\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DJ\x10<\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DK\x10=\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DM\x10>\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DO\x10?\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DZ\x10@\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EC\x10A\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EE\x10B\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EG\x10C\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EH\x10D\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ER\x10E\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ES\x10F\x12\x1c\n" +
	"\x18ISO_TERRITORY_CODE_ES_CE\x10G\x12\x1c\n" +
	"\x18ISO_TERRITORY_CODE_ES_CN\x10H\x12\x1c\n" +
	"\x18ISO_TERRITORY_CODE_ES_ML\x10I\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ET\x10J\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FI\x10K\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FJ\x10L\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FK\x10M\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FM\x10N\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FO\x10O\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FR\x10P\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GA\x10Q\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GB\x10R\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GD\x10S\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GE\x10T\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GF\x10U\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GG\x10V\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GH\x10W\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GI\x10X\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GL\x10Y\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GM\x10Z\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GN\x10[\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GP\x10\\\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GQ\x10]\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GR\x10^\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GS\x10_\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GT\x10`\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GU\x10a\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GW\x10b\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GY\x10c\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HK\x10d\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HM\x10e\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HN\x10f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HR\x10g\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HT\x10h\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HU\x10i\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ID\x10j\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IE\x10k\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IL\x10l\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IM\x10m\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IN\x10n\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IO\x10o\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IQ\x10p\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IR\x10q\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IS\x10r\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IT\x10s\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JE\x10t\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JM\x10u\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JO\x10v\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JP\x10w\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KE\x10x\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KG\x10y\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KH\x10z\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KI\x10{\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KM\x10|\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KN\x10}\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KP\x10~\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KR\x10\x7f\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_KW\x10\x80\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_KY\x10\x81\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_KZ\x10\x82\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LA\x10\x83\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LB\x10\x84\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LC\x10\x85\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LI\x10\x86\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LK\x10\x87\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LR\x10\x88\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LS\x10\x89\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LT\x10\x8a\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LU\x10\x8b\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LV\x10\x8c\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LY\x10\x8d\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MA\x10\x8e\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MC\x10\x8f\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MD\x10\x90\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ME\x10\x91\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MF\x10\x92\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MG\x10\x93\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MH\x10\x94\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MK\x10\x95\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ML\x10\x96\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MM\x10\x97\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MN\x10\x98\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MO\x10\x99\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MP\x10\x9a\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MQ\x10\x9b\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MR\x10\x9c\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MS\x10\x9d\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MT\x10\x9e\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MU\x10\x9f\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MV\x10\xa0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MW\x10\xa1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MX\x10\xa2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MY\x10\xa3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MZ\x10\xa4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NA\x10\xa5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NC\x10\xa6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NE\x10\xa7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NF\x10\xa8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NG\x10\xa9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NI\x10\xaa\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NL\x10\xab\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NO\x10\xac\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NP\x10\xad\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NR\x10\xae\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NU\x10\xaf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NZ\x10\xb0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_OM\x10\xb1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PA\x10\xb2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PE\x10\xb3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PF\x10\xb4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PG\x10\xb5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PH\x10\xb6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PK\x10\xb7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PL\x10\xb8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PM\x10\xb9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PN\x10\xba\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PR\x10\xbb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PS\x10\xbc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PT\x10\xbd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PW\x10\xbe\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PY\x10\xbf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_QA\x10\xc0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RE\x10\xc1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RO\x10\xc2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RS\x10\xc3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RU\x10\xc4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RW\x10\xc5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SA\x10\xc6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SB\x10\xc7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SC\x10\xc8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SD\x10\xc9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SE\x10\xca\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SG\x10\xcb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SH\x10\xcc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SI\x10\xcd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SJ\x10\xce\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SK\x10\xcf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SL\x10\xd0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SM\x10\xd1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SN\x10\xd2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SO\x10\xd3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SR\x10\xd4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SS\x10\xd5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ST\x10\xd6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SV\x10\xd7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SX\x10\xd8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SY\x10\xd9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SZ\x10\xda\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TC\x10\xdb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TD\x10\xdc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TF\x10\xdd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TG\x10\xde\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TH\x10\xdf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TJ\x10\xe0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TK\x10\xe1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TL\x10\xe2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TM\x10\xe3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TN\x10\xe4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TO\x10\xe5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TR\x10\xe6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TT\x10\xe7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TV\x10\xe8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TW\x10\xe9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TZ\x10\xea\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UA\x10\xeb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UG\x10\xec\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UM\x10\xed\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_US\x10\xee\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UY\x10\xef\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UZ\x10\xf0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VA\x10\xf1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VC\x10\xf2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VE\x10\xf3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VG\x10\xf4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VI\x10\xf5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VN\x10\xf6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VU\x10\xf7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_WF\x10\xf8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_WS\x10\xf9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_YE\x10\xfa\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_YT\x10\xfb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ZA\x10\xfc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ZM\x10\xfd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ZW\x10\xfe\x01*w\n" +
	"\rLabelNameType\x12\x1f\n" +
	"\x1bLABEL_NAME_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" LABEL_NAME_TYPE_DISPLAYLABELNAME\x10\x01\x12\x1f\n" +
	"\x1bLABEL_NAME_TYPE_USERDEFINED\x10\x02*\xee\x13\n" +
	"\x1bLicenseOrClaimRefusalReason\x12/\n" +
	"+LICENSE_OR_CLAIM_REFUSAL_REASON_UNSPECIFIED\x10\x00\x12K\n" +
	"GLICENSE_OR_CLAIM_REFUSAL_REASON_AGREEMENTOFADDITIONALPROVISIONSREQUIRED\x10\x01\x12F\n" +
	"BLICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFADVANCEPAYMENTREQUIRED\x10\x02\x12A\n" +
	"=LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFGUARANTEEREQUIRED\x10\x03\x12@\n" +
	"<LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFLICENSEEREQUIRED\x10\x04\x12O\n" +
	"KLICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFMOSTFAVOREDNATIONCLAUSEREQUIRED\x10\x05\x12I\n" +
	"ELICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFNUMBEROFRESOURCESREQUIRED\x10\x06\x12C\n" +
	"?LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPLAYINGTIMEREQUIRED\x10\a\x12L\n" +
	"HLICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPUBLISHERINFORMATIONREQUIRED\x10\b\x12K\n" +
	"GLICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFPUBLISHERPERCENTAGEREQUIRED\x10\t\x12<\n" +
	"8LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRATEREQUIRED\x10\n" +
	"\x12Q\n" +
	"MLICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASECREATORINFORMATIONREQUIRED\x10\v\x12C\n" +
	"?LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASEDATEREQUIRED\x10\f\x12D\n" +
	"@LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFRELEASETITLEREQUIRED\x10\r\x12G\n" +
	"CLICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFWORKCONTRIBUTORREQUIRED\x10\x0e\x12A\n" +
	"=LICENSE_OR_CLAIM_REFUSAL_REASON_CORRECTIONOFWORKTITLEREQUIRED\x10\x0f\x12/\n" +
	"+LICENSE_OR_CLAIM_REFUSAL_REASON_DEALEXPIRED\x10\x10\x121\n" +
	"-LICENSE_OR_CLAIM_REFUSAL_REASON_DIFFERENTWORK\x10\x11\x121\n" +
	"-LICENSE_OR_CLAIM_REFUSAL_REASON_DIRECTLICENSE\x10\x12\x124\n" +
	"0LICENSE_OR_CLAIM_REFUSAL_REASON_DUPLICATELICENSE\x10\x13\x124\n" +
	"0LICENSE_OR_CLAIM_REFUSAL_REASON_DUPLICATEREQUEST\x10\x14\x127\n" +
	"3LICENSE_OR_CLAIM_REFUSAL_REASON_IMPORTLICENSEEXISTS\x10\x15\x122\n" +
	".LICENSE_OR_CLAIM_REFUSAL_REASON_INCORRECTCLAIM\x10\x16\x12F\n" +
	"BLICENSE_OR_CLAIM_REFUSAL_REASON_INCORRECTCONTROLLEDCOMPOSITIONRATE\x10\x17\x128\n" +
	"4LICENSE_OR_CLAIM_REFUSAL_REASON_INHOUSELICENSEEXISTS\x10\x18\x12;\n" +
	"7LICENSE_OR_CLAIM_REFUSAL_REASON_INSUFFICIENTINFORMATION\x10\x19\x129\n" +
	"5LICENSE_OR_CLAIM_REFUSAL_REASON_LICENSEENOTAUTHORIZED\x10\x1a\x121\n" +
	"-LICENSE_OR_CLAIM_REFUSAL_REASON_MEDLEYREQUEST\x10\x1b\x12+\n" +
	"'LICENSE_OR_CLAIM_REFUSAL_REASON_NOOPTIN\x10\x1c\x124\n" +
	"0LICENSE_OR_CLAIM_REFUSAL_REASON_NOPUBLISHERCLAIM\x10\x1d\x128\n" +
	"4LICENSE_OR_CLAIM_REFUSAL_REASON_OWNERSHIPUNCONFIRMED\x10\x1e\x126\n" +
	"2LICENSE_OR_CLAIM_REFUSAL_REASON_PRODUCTUNAVAILABLE\x10\x1f\x12;\n" +
	"7LICENSE_OR_CLAIM_REFUSAL_REASON_PUBLISHERNOTREPRESENTED\x10 \x124\n" +
	"0LICENSE_OR_CLAIM_REFUSAL_REASON_RELEASEWITHDRAWN\x10!\x125\n" +
	"1LICENSE_OR_CLAIM_REFUSAL_REASON_RELINQUISHEDCLAIM\x10\"\x12/\n" +
	"+LICENSE_OR_CLAIM_REFUSAL_REASON_USERDEFINED\x10#\x12:\n" +
	"6LICENSE_OR_CLAIM_REFUSAL_REASON_WORKDELETEDFROMRELEASE\x10$\x12=\n" +
	"9LICENSE_OR_CLAIM_REFUSAL_REASON_WORKINCORRECTLYIDENTIFIED\x10%\x126\n" +
	"2LICENSE_OR_CLAIM_REFUSAL_REASON_WORKINPUBLICDOMAIN\x10&\x12/\n" +
	"+LICENSE_OR_CLAIM_REFUSAL_REASON_WORKNOTUSED\x10'\x12/\n" +
	"+LICENSE_OR_CLAIM_REFUSAL_REASON_WORKUNKNOWN\x10(*\xb2\x02\n" +
	"!LicenseOrClaimRequestUpdateReason\x126\n" +
	"2LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_UNSPECIFIED\x10\x00\x12H\n" +
	"DLICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_ADDITIONALINFORMATIONPROVIDED\x10\x01\x12S\n" +
	"OLICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_ADDITIONALINFORMATIONPROVIDEDASREQUESTED\x10\x02\x126\n" +
	"2LICENSE_OR_CLAIM_REQUEST_UPDATE_REASON_USERDEFINED\x10\x03*\x8d\x03\n" +
	"\x1aLicenseOrClaimUpdateReason\x12.\n" +
	"*LICENSE_OR_CLAIM_UPDATE_REASON_UNSPECIFIED\x10\x00\x123\n" +
	"/LICENSE_OR_CLAIM_UPDATE_REASON_NEWLICENSEISSUED\x10\x01\x12:\n" +
	"6LICENSE_OR_CLAIM_UPDATE_REASON_NEWRIGHTSHAREIDENTIFIED\x10\x02\x12<\n" +
	"8LICENSE_OR_CLAIM_UPDATE_REASON_NEWRIGHTSHOLDERIDENTIFIED\x10\x03\x124\n" +
	"0LICENSE_OR_CLAIM_UPDATE_REASON_NEWWORKIDENTIFIED\x10\x04\x12*\n" +
	"&LICENSE_OR_CLAIM_UPDATE_REASON_REVOKED\x10\x05\x12.\n" +
	"*LICENSE_OR_CLAIM_UPDATE_REASON_USERDEFINED\x10\x06*\x9f\x05\n" +
	"\x16LicenseRejectionReason\x12(\n" +
	"$LICENSE_REJECTION_REASON_UNSPECIFIED\x10\x00\x126\n" +
	"2LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES\x10\x01\x12;\n" +
	"7LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE\x10\x02\x12*\n" +
	"&LICENSE_REJECTION_REASON_LICENSEEXISTS\x10\x03\x12-\n" +
	")LICENSE_REJECTION_REASON_LICENSENOTNEEDED\x10\x04\x12+\n" +
	"'LICENSE_REJECTION_REASON_WRONGADDRESSEE\x10\x05\x12(\n" +
	"$LICENSE_REJECTION_REASON_USERDEFINED\x10\x06\x12/\n" +
	"+LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN\x10\a\x12:\n" +
	"6LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER\x10\b\x12+\n" +
	"'LICENSE_REJECTION_REASON_LICENSEBLOCKED\x10\t\x126\n" +
	"2LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING\x10\n" +
	"\x12.\n" +
	"*LICENSE_REJECTION_REASON_SHARESPLITSDIFFER\x10\v\x122\n" +
	".LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES\x10\f*\x82\x01\n" +
	"\rLicenseStatus\x12\x1e\n" +
	"\x1aLICENSE_STATUS_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15LICENSE_STATUS_ACTIVE\x10\x01\x12\x1a\n" +
	"\x16LICENSE_STATUS_PENDING\x10\x02\x12\x1a\n" +
	"\x16LICENSE_STATUS_REVOKED\x10\x03*\xcd\x01\n" +
	"\x16LicensingProcessStatus\x12(\n" +
	"$LICENSING_PROCESS_STATUS_UNSPECIFIED\x10\x00\x12$\n" +
	" LICENSING_PROCESS_STATUS_PENDING\x10\x01\x12&\n" +
	"\"LICENSING_PROCESS_STATUS_PROCESSED\x10\x02\x12;\n" +
	"7LICENSING_PROCESS_STATUS_THIRDPARTYINFORMATIONREQUESTED\x10\x03*L\n" +
	"\rLodFileStatus\x12\x1f\n" +
	"\x1bLOD_FILE_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16LOD_FILE_STATUS_FILEOK\x10\x01*m\n" +
	"\x15LodProposedActionType\x12(\n" +
	"$LOD_PROPOSED_ACTION_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&LOD_PROPOSED_ACTION_TYPE_RESENDXMLONLY\x10\x01*\x9e\x01\n" +
	"\x0eMembershipType\x12\x1f\n" +
	"\x1bMEMBERSHIP_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eMEMBERSHIP_TYPE_NATIONALMEMBER\x10\x01\x12\"\n" +
	"\x1eMEMBERSHIP_TYPE_REGIONALMEMBER\x10\x02\x12#\n" +
	"\x1fMEMBERSHIP_TYPE_WORLDWIDEMEMBER\x10\x03*\xaa\x02\n" +
	"\x11MessageActionType\x12#\n" +
	"\x1fMESSAGE_ACTION_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY\x10\x01\x12,\n" +
	"(MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY\x10\x02\x12*\n" +
	"&MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY\x10\x03\x12\"\n" +
	"\x1eMESSAGE_ACTION_TYPE_REDELIVERY\x10\x04\x12 \n" +
	"\x1cMESSAGE_ACTION_TYPE_TAKEDOWN\x10\x05\x12#\n" +
	"\x1fMESSAGE_ACTION_TYPE_USERDEFINED\x10\x06*\xe8\x01\n" +
	"\x19MessageContentRevenueType\x12,\n" +
	"(MESSAGE_CONTENT_REVENUE_TYPE_UNSPECIFIED\x10\x00\x128\n" +
	"4MESSAGE_CONTENT_REVENUE_TYPE_NONTRANSACTIONALREVENUE\x10\x01\x125\n" +
	"1MESSAGE_CONTENT_REVENUE_TYPE_TRANSACTIONALREVENUE\x10\x02\x12,\n" +
	"(MESSAGE_CONTENT_REVENUE_TYPE_USERDEFINED\x10\x03*\xa5\x04\n" +
	"\x12MessageContextType\x12$\n" +
	" MESSAGE_CONTEXT_TYPE_UNSPECIFIED\x10\x00\x12L\n" +
	"HMESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMREQUESTMESSAGEINIDENTIFICATIONCYCLE\x10\x01\x12Q\n" +
	"MMESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINIDENTIFICATIONCYCLE\x10\x02\x12J\n" +
	"FMESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMREQUESTMESSAGEINCONFIRMATIONCYCLE\x10\x03\x12O\n" +
	"KMESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINCONFIRMATIONCYCLE\x10\x04\x12R\n" +
	"NMESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINLOCCYCLEASLODMESSAGE\x10\x05\x12W\n" +
	"SMESSAGE_CONTEXT_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGEINLOCCYCLEASLODCONFIRMATION\x10\x06*\x86\x01\n" +
	"\x12MessageControlType\x12$\n" +
	" MESSAGE_CONTROL_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" MESSAGE_CONTROL_TYPE_LIVEMESSAGE\x10\x01\x12$\n" +
	" MESSAGE_CONTROL_TYPE_TESTMESSAGE\x10\x02*\x93\x01\n" +
	"\bMidiType\x12\x19\n" +
	"\x15MIDI_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18MIDI_TYPE_MONOPHONICMIDI\x10\x01\x12\x1c\n" +
	"\x18MIDI_TYPE_POLYPHONICMIDI\x10\x02\x12\x15\n" +
	"\x11MIDI_TYPE_UNKNOWN\x10\x03\x12\x19\n" +
	"\x15MIDI_TYPE_USERDEFINED\x10\x04*\xcc\x02\n" +
	"\x0eMlcMessageType\x12 \n" +
	"\x1cMLC_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12B\n" +
	">MLC_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE\x10\x01\x12<\n" +
	"8MLC_MESSAGE_TYPE_REQUESTSOUNDRECORDINGINFORMATIONMESSAGE\x10\x02\x12;\n" +
	"7MLC_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE\x10\x03\x12'\n" +
	"#MLC_MESSAGE_TYPE_SALESREPORTMESSAGE\x10\x04\x120\n" +
	",MLC_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE\x10\x05*\xd0\x12\n" +
	"\x1aMusicalWorkContributorRole\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12)\n" +
	"%MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER\x10\x01\x12+\n" +
	"'MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT\x10\x02\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER\x10\x03\x12(\n" +
	"$MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR\x10\x04\x124\n" +
	"0MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS\x10\x05\x123\n" +
	"/MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD\x10\x06\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER\x10\a\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER\x10\b\x122\n" +
	".MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST\x10\t\x12+\n" +
	"'MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR\x10\n" +
	"\x12)\n" +
	"%MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR\x10\v\x120\n" +
	",MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR\x10\f\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT\x10\r\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER\x10\x0e\x12(\n" +
	"$MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER\x10\x0f\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST\x10\x10\x124\n" +
	"0MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT\x10\x11\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST\x10\x12\x12.\n" +
	"*MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER\x10\x13\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST\x10\x14\x12/\n" +
	"+MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER\x10\x15\x120\n" +
	",MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR\x10\x16\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER\x10\x17\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT\x10\x18\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER\x10\x19\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER\x10\x1a\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR\x10\x1b\x122\n" +
	".MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR\x10\x1c\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR\x10\x1d\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER\x10\x1e\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST\x10\x1f\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR\x10 \x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER\x10!\x12.\n" +
	"*MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER\x10\"\x12>\n" +
	":MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL\x10#\x12/\n" +
	"+MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER\x10$\x123\n" +
	"/MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT\x10%\x121\n" +
	"-MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER\x10&\x120\n" +
	",MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER\x10'\x124\n" +
	"0MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER\x10(\x123\n" +
	"/MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER\x10)\x125\n" +
	"1MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER\x10*\x12.\n" +
	"*MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER\x10+\x126\n" +
	"2MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER\x10,\x12)\n" +
	"%MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN\x10-\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED\x10.\x125\n" +
	"1MUSICAL_WORK_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER\x10/\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_CONTRIBUTOR\x100*\xc2\x02\n" +
	"\x1aMusicalWorkRightsClaimType\x12.\n" +
	"*MUSICAL_WORK_RIGHTS_CLAIM_TYPE_UNSPECIFIED\x10\x00\x123\n" +
	"/MUSICAL_WORK_RIGHTS_CLAIM_TYPE_COPYRIGHTCONTROL\x10\x01\x121\n" +
	"-MUSICAL_WORK_RIGHTS_CLAIM_TYPE_NONMEMBERCLAIM\x10\x02\x12/\n" +
	"+MUSICAL_WORK_RIGHTS_CLAIM_TYPE_PUBLICDOMAIN\x10\x03\x12/\n" +
	"+MUSICAL_WORK_RIGHTS_CLAIM_TYPE_SOCIETYCLAIM\x10\x04\x12*\n" +
	"&MUSICAL_WORK_RIGHTS_CLAIM_TYPE_UNKNOWN\x10\x05*\x81\n" +
	"\n" +
	"\x0fMusicalWorkType\x12!\n" +
	"\x1dMUSICAL_WORK_TYPE_UNSPECIFIED\x10\x00\x12/\n" +
	"+MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE\x10\x01\x12-\n" +
	")MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK\x10\x02\x12*\n" +
	"&MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS\x10\x03\x12*\n" +
	"&MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC\x10\x04\x12*\n" +
	"&MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK\x10\x05\x12*\n" +
	"&MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK\x10\x06\x12\"\n" +
	"\x1eMUSICAL_WORK_TYPE_LYRICREMOVAL\x10\a\x12&\n" +
	"\"MUSICAL_WORK_TYPE_LYRICREPLACEMENT\x10\b\x12&\n" +
	"\"MUSICAL_WORK_TYPE_LYRICTRANSLATION\x10\t\x12\x1c\n" +
	"\x18MUSICAL_WORK_TYPE_MASHUP\x10\n" +
	"\x12\x1c\n" +
	"\x18MUSICAL_WORK_TYPE_MEDLEY\x10\v\x12.\n" +
	"*MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK\x10\f\x12)\n" +
	"%MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT\x10\r\x12,\n" +
	"(MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES\x10\x0e\x12&\n" +
	"\"MUSICAL_WORK_TYPE_MUSICARRANGEMENT\x10\x0f\x12,\n" +
	"(MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT\x10\x10\x12/\n" +
	"+MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT\x10\x11\x12-\n" +
	")MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION\x10\x12\x12)\n" +
	"%MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK\x10\x13\x12\x1f\n" +
	"\x1bMUSICAL_WORK_TYPE_POTPOURRI\x10\x14\x120\n" +
	",MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK\x10\x15\x12)\n" +
	"%MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK\x10\x16\x12+\n" +
	"'MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK\x10\x17\x12&\n" +
	"\"MUSICAL_WORK_TYPE_TVPRODUCTIONWORK\x10\x18\x12\x1d\n" +
	"\x19MUSICAL_WORK_TYPE_UNKNOWN\x10\x19\x12,\n" +
	"(MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT\x10\x1a\x123\n" +
	"/MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT\x10\x1b\x12!\n" +
	"\x1dMUSICAL_WORK_TYPE_USERDEFINED\x10\x1c\x12)\n" +
	"%MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK\x10\x1d*\xff\x03\n" +
	"\x18MwlCaCMessageInBatchType\x12.\n" +
	"*MWL_CA_C_MESSAGE_IN_BATCH_TYPE_UNSPECIFIED\x10\x00\x12?\n" +
	";MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMREQUESTMESSAGE\x10\x01\x128\n" +
	"4MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMMESSAGE\x10\x02\x12E\n" +
	"AMWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSINGINFORMATIONREQUESTMESSAGE\x10\x03\x12D\n" +
	"@MWL_CA_C_MESSAGE_IN_BATCH_TYPE_LICENSEORCLAIMCONFIRMATIONMESSAGE\x10\x04\x124\n" +
	"0MWL_CA_C_MESSAGE_IN_BATCH_TYPE_NEWRELEASEMESSAGE\x10\x05\x12:\n" +
	"6MWL_CA_C_MESSAGE_IN_BATCH_TYPE_CONTRACTDELIVERYMESSAGE\x10\x06\x129\n" +
	"5MWL_CA_C_MESSAGE_IN_BATCH_TYPE_PRODUCTDELETIONMESSAGE\x10\a*\xb9\x02\n" +
	"\x0eMwnMessageType\x12 \n" +
	"\x1cMWN_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x128\n" +
	"4MWN_MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE\x10\x01\x12@\n" +
	"<MWN_MESSAGE_TYPE_MUSICALWORKCLAIMCONFLICTNOTIFICATIONMESSAGE\x10\x02\x123\n" +
	"/MWN_MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE\x10\x03\x12.\n" +
	"*MWN_MESSAGE_TYPE_FTPACKNOWLEDGEMENTMESSAGE\x10\x04\x12$\n" +
	" MWN_MESSAGE_TYPE_MANIFESTMESSAGE\x10\x05*\xbc\x01\n" +
	"\x17NewReleaseMessageStatus\x12*\n" +
	"&NEW_RELEASE_MESSAGE_STATUS_UNSPECIFIED\x10\x00\x12;\n" +
	"7NEW_RELEASE_MESSAGE_STATUS_NEWRELEASEMESSAGENOTPROVIDED\x10\x01\x128\n" +
	"4NEW_RELEASE_MESSAGE_STATUS_NEWRELEASEMESSAGEPROVIDED\x10\x02*\xc8\x01\n" +
	"\x13OperatingSystemType\x12%\n" +
	"!OPERATING_SYSTEM_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bOPERATING_SYSTEM_TYPE_MACOS\x10\x01\x12#\n" +
	"\x1fOPERATING_SYSTEM_TYPE_MSWINDOWS\x10\x02\x12!\n" +
	"\x1dOPERATING_SYSTEM_TYPE_SYMBIAN\x10\x03\x12!\n" +
	"\x1dOPERATING_SYSTEM_TYPE_UNKNOWN\x10\x04*\xda\x02\n" +
	"\tOrderType\x12\x1a\n" +
	"\x16ORDER_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bORDER_TYPE_BACKCATALOGORDER\x10\x01\x12\x1b\n" +
	"\x17ORDER_TYPE_EXPRESSORDER\x10\x02\x12\x1c\n" +
	"\x18ORDER_TYPE_HARDDISKORDER\x10\x03\x12 \n" +
	"\x1cORDER_TYPE_METADATAONLYORDER\x10\x04\x12\x1e\n" +
	"\x1aORDER_TYPE_NEWRELEASEORDER\x10\x05\x12 \n" +
	"\x1cORDER_TYPE_OFFCYCLERUSHORDER\x10\x06\x12\x17\n" +
	"\x13ORDER_TYPE_PREORDER\x10\a\x12\x1e\n" +
	"\x1aORDER_TYPE_REDELIVERYORDER\x10\b\x12\x1c\n" +
	"\x18ORDER_TYPE_TAKEDOWNORDER\x10\t\x12\x1a\n" +
	"\x16ORDER_TYPE_USERDEFINED\x10\n" +
	"*i\n" +
	"\tPLineType\x12\x1b\n" +
	"\x17P_LINE_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19P_LINE_TYPE_ORIGINALPLINE\x10\x01\x12 \n" +
	"\x1cP_LINE_TYPE_REMASTERINGPLINE\x10\x02*\xaf\x02\n" +
	"\x13ParentalWarningType\x12%\n" +
	"!PARENTAL_WARNING_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1ePARENTAL_WARNING_TYPE_EXPLICIT\x10\x01\x12/\n" +
	"+PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED\x10\x02\x12+\n" +
	"'PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE\x10\x03\x12%\n" +
	"!PARENTAL_WARNING_TYPE_NOTEXPLICIT\x10\x04\x12!\n" +
	"\x1dPARENTAL_WARNING_TYPE_UNKNOWN\x10\x05\x12%\n" +
	"!PARENTAL_WARNING_TYPE_USERDEFINED\x10\x06*\xd2\x02\n" +
	"\x0ePercentageType\x12\x1f\n" +
	"\x1bPERCENTAGE_TYPE_UNSPECIFIED\x10\x00\x122\n" +
	".PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED\x10\x01\x12,\n" +
	"(PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE\x10\x02\x12*\n" +
	"&PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE\x10\x03\x12(\n" +
	"$PERCENTAGE_TYPE_PERCENTAGEOFNETSALES\x10\x04\x121\n" +
	"-PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID\x10\x05\x124\n" +
	"0PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE\x10\x06*\xc0\x01\n" +
	"\x14PriceInformationType\x12&\n" +
	"\"PRICE_INFORMATION_TYPE_UNSPECIFIED\x10\x00\x12.\n" +
	"*PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE\x10\x01\x12(\n" +
	"$PRICE_INFORMATION_TYPE_PREORDERPRICE\x10\x02\x12&\n" +
	"\"PRICE_INFORMATION_TYPE_USERDEFINED\x10\x03*^\n" +
	"\bPriority\x12\x18\n" +
	"\x14PRIORITY_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rPRIORITY_HIGH\x10\x01\x12\x10\n" +
	"\fPRIORITY_LOW\x10\x02\x12\x13\n" +
	"\x0fPRIORITY_NORMAL\x10\x03*\xf3\x01\n" +
	"\vProductType\x12\x1c\n" +
	"\x18PRODUCT_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19PRODUCT_TYPE_AUDIOPRODUCT\x10\x01\x12 \n" +
	"\x1cPRODUCT_TYPE_GRAPHICSPRODUCT\x10\x02\x12(\n" +
	"$PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT\x10\x03\x12\x1e\n" +
	"\x1aPRODUCT_TYPE_MOBILEPRODUCT\x10\x04\x12\x1c\n" +
	"\x18PRODUCT_TYPE_USERDEFINED\x10\x05\x12\x1d\n" +
	"\x19PRODUCT_TYPE_VIDEOPRODUCT\x10\x06*\xe3\x01\n" +
	"\aPurpose\x12\x17\n" +
	"\x13PURPOSE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17PURPOSE_BACKGROUNDMUSIC\x10\x01\x12\x1f\n" +
	"\x1bPURPOSE_CHANNELTRAILERMUSIC\x10\x02\x12\x13\n" +
	"\x0fPURPOSE_EXTRACT\x10\x03\x12\x1c\n" +
	"\x18PURPOSE_FILMTRAILERMUSIC\x10\x04\x12\x1b\n" +
	"\x17PURPOSE_FOREGROUNDMUSIC\x10\x05\x12\x18\n" +
	"\x14PURPOSE_TRAILERMUSIC\x10\x06\x12\x17\n" +
	"\x13PURPOSE_USERDEFINED\x10\a*\xf7\x01\n" +
	"\x14RateModificationType\x12&\n" +
	"\"RATE_MODIFICATION_TYPE_UNSPECIFIED\x10\x00\x120\n" +
	",RATE_MODIFICATION_TYPE_MULTIPLEDISCPROVISION\x10\x01\x12)\n" +
	"%RATE_MODIFICATION_TYPE_OTHERPROVISION\x10\x02\x12/\n" +
	"+RATE_MODIFICATION_TYPE_SALESVOLUMEPROVISION\x10\x03\x12)\n" +
	"%RATE_MODIFICATION_TYPE_VIDEOPROVISION\x10\x04*\xa4\x11\n" +
	"\fRatingAgency\x12\x1d\n" +
	"\x19RATING_AGENCY_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11RATING_AGENCY_AFR\x10\x01\x12\x16\n" +
	"\x12RATING_AGENCY_BBFC\x10\x02\x12\x16\n" +
	"\x12RATING_AGENCY_BFCO\x10\x03\x12\x16\n" +
	"\x12RATING_AGENCY_BFSC\x10\x04\x12\x17\n" +
	"\x13RATING_AGENCY_BMUKK\x10\x05\x12\x16\n" +
	"\x12RATING_AGENCY_CBFC\x10\x06\x12\x15\n" +
	"\x11RATING_AGENCY_CCC\x10\a\x12\x15\n" +
	"\x11RATING_AGENCY_CCE\x10\b\x12\x17\n" +
	"\x13RATING_AGENCY_CHVRS\x10\t\x12\x15\n" +
	"\x11RATING_AGENCY_CNC\x10\n" +
	"\x12\x17\n" +
	"\x13RATING_AGENCY_DJCTQ\x10\v\x12\x17\n" +
	"\x13RATING_AGENCY_EIRIN\x10\f\x12\x15\n" +
	"\x11RATING_AGENCY_FCB\x10\r\x12\x1e\n" +
	"\x1aRATING_AGENCY_FILMTILSYNET\x10\x0e\x12\x15\n" +
	"\x11RATING_AGENCY_FPB\x10\x0f\x12\x15\n" +
	"\x11RATING_AGENCY_FSK\x10\x10\x12\x16\n" +
	"\x12RATING_AGENCY_IFCO\x10\x11\x12\x17\n" +
	"\x13RATING_AGENCY_INCAA\x10\x12\x12\x16\n" +
	"\x12RATING_AGENCY_KMRB\x10\x13\x12\x14\n" +
	"\x10RATING_AGENCY_KR\x10\x14\x12\x17\n" +
	"\x13RATING_AGENCY_KRRIT\x10\x15\x12\x15\n" +
	"\x11RATING_AGENCY_LSF\x10\x16\x12\x15\n" +
	"\x11RATING_AGENCY_MBU\x10\x17\x12\x15\n" +
	"\x11RATING_AGENCY_MDA\x10\x18\x12\x16\n" +
	"\x12RATING_AGENCY_MDCB\x10\x19\x12\x16\n" +
	"\x12RATING_AGENCY_MFCB\x10\x1a\x12\x15\n" +
	"\x11RATING_AGENCY_MIC\x10\x1b\x12\x16\n" +
	"\x12RATING_AGENCY_MPAA\x10\x1c\x12\x17\n" +
	"\x13RATING_AGENCY_MTRCB\x10\x1d\x12\x15\n" +
	"\x11RATING_AGENCY_NBC\x10\x1e\x12\x17\n" +
	"\x13RATING_AGENCY_NFVCB\x10\x1f\x12\x17\n" +
	"\x13RATING_AGENCY_NICAM\x10 \x12\x15\n" +
	"\x11RATING_AGENCY_NKC\x10!\x12\x16\n" +
	"\x12RATING_AGENCY_OFLC\x10\"\x12\x19\n" +
	"\x15RATING_AGENCY_OFLC_NZ\x10#\x12\x16\n" +
	"\x12RATING_AGENCY_OFRB\x10$\x12\x16\n" +
	"\x12RATING_AGENCY_RDCQ\x10%\x12\x15\n" +
	"\x11RATING_AGENCY_RTC\x10&\x12\x15\n" +
	"\x11RATING_AGENCY_SBB\x10'\x12\x17\n" +
	"\x13RATING_AGENCY_SMAIS\x10(\x12\x19\n" +
	"\x15RATING_AGENCY_SPIO_JK\x10)\x12\x16\n" +
	"\x12RATING_AGENCY_TELA\x10*\x12\x1d\n" +
	"\x19RATING_AGENCY_USERDEFINED\x10+\x12\x15\n" +
	"\x11RATING_AGENCY_VET\x10,\x12\x16\n" +
	"\x12RATING_AGENCY_ACMA\x10-\x12\x17\n" +
	"\x13RATING_AGENCY_AGCOM\x10.\x12\x18\n" +
	"\x14RATING_AGENCY_ANATEL\x10/\x12\x16\n" +
	"\x12RATING_AGENCY_BFVC\x100\x12\x16\n" +
	"\x12RATING_AGENCY_CBSC\x101\x12\x18\n" +
	"\x14RATING_AGENCY_CBSC_F\x102\x12\x16\n" +
	"\x12RATING_AGENCY_CICF\x103\x12\x15\n" +
	"\x11RATING_AGENCY_CNA\x104\x12\x16\n" +
	"\x12RATING_AGENCY_CPBC\x105\x12\x15\n" +
	"\x11RATING_AGENCY_CSA\x106\x12\x16\n" +
	"\x12RATING_AGENCY_CSCF\x107\x12\x16\n" +
	"\x12RATING_AGENCY_ESRB\x108\x12\x15\n" +
	"\x11RATING_AGENCY_FAB\x109\x12\x15\n" +
	"\x11RATING_AGENCY_FCO\x10:\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_CH\x10;\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_CZ\x10<\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_EG\x10=\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_EE\x10>\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_GR\x10?\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_PE\x10@\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_SK\x10A\x12\x15\n" +
	"\x11RATING_AGENCY_FRB\x10B\x12\x16\n" +
	"\x12RATING_AGENCY_ICAA\x10C\x12\x17\n" +
	"\x13RATING_AGENCY_IFCOF\x10D\x12\x16\n" +
	"\x12RATING_AGENCY_KFCB\x10E\x12\x1c\n" +
	"\x18RATING_AGENCY_KIJKWIJZER\x10F\x12\x17\n" +
	"\x13RATING_AGENCY_MBACT\x10G\x12\x17\n" +
	"\x13RATING_AGENCY_MCCAA\x10H\x12\x1f\n" +
	"\x1bRATING_AGENCY_MEDIETILSYNET\x10I\x12\x16\n" +
	"\x12RATING_AGENCY_MEKU\x10J\x12\x16\n" +
	"\x12RATING_AGENCY_MKRF\x10K\x12\x15\n" +
	"\x11RATING_AGENCY_MOC\x10L\x12\x18\n" +
	"\x14RATING_AGENCY_MOC_TW\x10M\x12\x17\n" +
	"\x13RATING_AGENCY_MPAAT\x10N\x12\x15\n" +
	"\x11RATING_AGENCY_NCS\x10O\x12\x16\n" +
	"\x12RATING_AGENCY_NFRC\x10P\x12\x16\n" +
	"\x12RATING_AGENCY_PEGI\x10Q\x12\x17\n" +
	"\x13RATING_AGENCY_RCNOF\x10R\x12\x16\n" +
	"\x12RATING_AGENCY_RIAA\x10S\x12\x15\n" +
	"\x11RATING_AGENCY_RTE\x10T\x12\x17\n" +
	"\x13RATING_AGENCY_SIBCI\x10U\x12\x17\n" +
	"\x13RATING_AGENCY_SM_SA\x10V\x12\x16\n" +
	"\x12RATING_AGENCY_USFA\x10W\x12\x16\n" +
	"\x12RATING_AGENCY_TVPG\x10X*\x88\x01\n" +
	"\n" +
	"ReasonType\x12\x1b\n" +
	"\x17REASON_TYPE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aREASON_TYPE_CHARTREPORTING\x10\x01\x12 \n" +
	"\x1cREASON_TYPE_ROYALTYREPORTING\x10\x02\x12\x1b\n" +
	"\x17REASON_TYPE_USERDEFINED\x10\x03*\xcf\x01\n" +
	"\x14RecipientRevenueType\x12&\n" +
	"\"RECIPIENT_REVENUE_TYPE_UNSPECIFIED\x10\x00\x126\n" +
	"2RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE\x10\x01\x12+\n" +
	"'RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE\x10\x02\x12*\n" +
	"&RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE\x10\x03*\xd3\x02\n" +
	"\rRecordingMode\x12\x1e\n" +
	"\x1aRECORDING_MODE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13RECORDING_MODE_MONO\x10\x01\x12$\n" +
	" RECORDING_MODE_MULTICHANNELAUDIO\x10\x02\x12\x19\n" +
	"\x15RECORDING_MODE_STEREO\x10\x03\x12\x1a\n" +
	"\x16RECORDING_MODE_UNKNOWN\x10\x04\x12 \n" +
	"\x1cRECORDING_MODE_BINAURALAUDIO\x10\x05\x12\x16\n" +
	"\x12RECORDING_MODE_LCR\x10\x06\x12\x1d\n" +
	"\x19RECORDING_MODE_MULTITRACK\x10\a\x12\x17\n" +
	"\x13RECORDING_MODE_QUAD\x10\b\x12\x18\n" +
	"\x14RECORDING_MODE_STEMS\x10\t\x12 \n" +
	"\x1cRECORDING_MODE_SURROUNDSOUND\x10\n" +
	"*\xaf\x02\n" +
	"\x14RedeliveryReasonType\x12&\n" +
	"\"REDELIVERY_REASON_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&REDELIVERY_REASON_TYPE_BINARYCORRUPTED\x10\x01\x12-\n" +
	")REDELIVERY_REASON_TYPE_METADATAINADEQUATE\x10\x02\x12,\n" +
	"(REDELIVERY_REASON_TYPE_PACKAGEINCOMPLETE\x10\x03\x12>\n" +
	":REDELIVERY_REASON_TYPE_PROCESSINGERRORATRELEASEDISTRIBUTOR\x10\x04\x12&\n" +
	"\"REDELIVERY_REASON_TYPE_USERDEFINED\x10\x05*i\n" +
	"\rReferenceUnit\x12\x1e\n" +
	"\x1aREFERENCE_UNIT_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19REFERENCE_UNIT_PERLICENSE\x10\x01\x12\x19\n" +
	"\x15REFERENCE_UNIT_PERUSE\x10\x02*\x90\x02\n" +
	"\x11RelationalRelator\x12\"\n" +
	"\x1eRELATIONAL_RELATOR_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aRELATIONAL_RELATOR_EQUALTO\x10\x01\x12\x1f\n" +
	"\x1bRELATIONAL_RELATOR_LESSTHAN\x10\x02\x12(\n" +
	"$RELATIONAL_RELATOR_LESSTHANOREQUALTO\x10\x03\x12\x1f\n" +
	"\x1bRELATIONAL_RELATOR_MORETHAN\x10\x04\x12(\n" +
	"$RELATIONAL_RELATOR_MORETHANOREQUALTO\x10\x05\x12!\n" +
	"\x1dRELATIONAL_RELATOR_NOTEQUALTO\x10\x06*\xf4\x02\n" +
	"\x19ReleaseAvailabilityStatus\x12+\n" +
	"'RELEASE_AVAILABILITY_STATUS_UNSPECIFIED\x10\x00\x12/\n" +
	"+RELEASE_AVAILABILITY_STATUS_AVAILABLEFORDSP\x10\x01\x122\n" +
	".RELEASE_AVAILABILITY_STATUS_NOTAVAILABLEFORDSP\x10\x02\x120\n" +
	",RELEASE_AVAILABILITY_STATUS_NOTCLEAREDFORDSP\x10\x03\x126\n" +
	"2RELEASE_AVAILABILITY_STATUS_NOTCLEAREDFORTERRITORY\x10\x04\x12.\n" +
	"*RELEASE_AVAILABILITY_STATUS_NOTYETPREPARED\x10\x05\x12+\n" +
	"'RELEASE_AVAILABILITY_STATUS_USERDEFINED\x10\x06*\xaf\b\n" +
	"\x17ReleaseRelationshipType\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x123\n" +
	"/RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE\x10\x01\x127\n" +
	"3RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE\x10\x02\x123\n" +
	"/RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST\x10\x03\x12+\n" +
	"'RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST\x10\x04\x125\n" +
	"1RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT\x10\x05\x12/\n" +
	"+RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT\x10\x06\x12;\n" +
	"7RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL\x10\a\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO\x10\b\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO\x10\t\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM\x10\n" +
	"\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO\x10\v\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO\x10\f\x12-\n" +
	")RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE\x10\r\x12;\n" +
	"7RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL\x10\x0e\x122\n" +
	".RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE\x10\x0f\x122\n" +
	".RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM\x10\x10\x12%\n" +
	"!RELEASE_RELATIONSHIP_TYPE_UNKNOWN\x10\x11\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_USERDEFINED\x10\x12\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING\x10\x13\x12,\n" +
	"(RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM\x10\x14*\x94\x01\n" +
	"\x13ReleaseResourceType\x12%\n" +
	"!RELEASE_RESOURCE_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE\x10\x01\x12+\n" +
	"'RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE\x10\x02*\xda\x17\n" +
	"\vReleaseType\x12\x1c\n" +
	"\x18RELEASE_TYPE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fRELEASE_TYPE_ADVERTISEMENTVIDEO\x10\x01\x12\x16\n" +
	"\x12RELEASE_TYPE_ALBUM\x10\x02\x12!\n" +
	"\x1dRELEASE_TYPE_ALERTTONERELEASE\x10\x03\x12\x1a\n" +
	"\x16RELEASE_TYPE_ANIMATION\x10\x04\x12\x1e\n" +
	"\x1aRELEASE_TYPE_ASPERCONTRACT\x10\x05\x12!\n" +
	"\x1dRELEASE_TYPE_AUDIOCLIPRELEASE\x10\x06\x12&\n" +
	"\"RELEASE_TYPE_BACKCOVERIMAGERELEASE\x10\a\x12(\n" +
	"$RELEASE_TYPE_BOOKLETBACKIMAGERELEASE\x10\b\x12)\n" +
	"%RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE\x10\t\x12\x1f\n" +
	"\x1bRELEASE_TYPE_BOOKLETRELEASE\x10\n" +
	"\x12\x17\n" +
	"\x13RELEASE_TYPE_BUNDLE\x10\v\x12\x1f\n" +
	"\x1bRELEASE_TYPE_CLASSICALALBUM\x10\f\x12\x1d\n" +
	"\x19RELEASE_TYPE_CONCERTVIDEO\x10\r\x12\x1e\n" +
	"\x1aRELEASE_TYPE_CORPORATEFILM\x10\x0e\x12%\n" +
	"!RELEASE_TYPE_DIGITALBOXSETRELEASE\x10\x0f\x12\x1c\n" +
	"\x18RELEASE_TYPE_DOCUMENTARY\x10\x10\x12%\n" +
	"!RELEASE_TYPE_DOCUMENTIMAGERELEASE\x10\x11\x12\x1d\n" +
	"\x19RELEASE_TYPE_EBOOKRELEASE\x10\x12\x12\x13\n" +
	"\x0fRELEASE_TYPE_EP\x10\x13\x12\x18\n" +
	"\x14RELEASE_TYPE_EPISODE\x10\x14\x12\x1c\n" +
	"\x18RELEASE_TYPE_FEATUREFILM\x10\x15\x12\x1b\n" +
	"\x17RELEASE_TYPE_FILMBUNDLE\x10\x16\x12'\n" +
	"#RELEASE_TYPE_FRONTCOVERIMAGERELEASE\x10\x17\x12\x1c\n" +
	"\x18RELEASE_TYPE_ICONRELEASE\x10\x18\x12!\n" +
	"\x1dRELEASE_TYPE_INFOMERCIALVIDEO\x10\x19\x12*\n" +
	"&RELEASE_TYPE_INTERACTIVEBOOKLETRELEASE\x10\x1a\x12\x1f\n" +
	"\x1bRELEASE_TYPE_KARAOKERELEASE\x10\x1b\x12\x1f\n" +
	"\x1bRELEASE_TYPE_LIVEEVENTVIDEO\x10\x1c\x12\x1c\n" +
	"\x18RELEASE_TYPE_LOGORELEASE\x10\x1d\x120\n" +
	",RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE\x10\x1e\x123\n" +
	"/RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE\x10\x1f\x12\"\n" +
	"\x1eRELEASE_TYPE_LYRICSHEETRELEASE\x10 \x12 \n" +
	"\x1cRELEASE_TYPE_MULTIMEDIAALBUM\x10!\x12!\n" +
	"\x1dRELEASE_TYPE_MULTIMEDIASINGLE\x10\"\x12,\n" +
	"(RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE\x10#\x12'\n" +
	"#RELEASE_TYPE_MUSICALWORKCLIPRELEASE\x10$\x121\n" +
	"-RELEASE_TYPE_MUSICALWORKREADALONGVIDEORELEASE\x10%\x12*\n" +
	"&RELEASE_TYPE_MUSICALWORKTRAILERRELEASE\x10&\x12/\n" +
	"+RELEASE_TYPE_MUSICALWORKVIDEOCHAPTERRELEASE\x10'\x12\x15\n" +
	"\x11RELEASE_TYPE_NEWS\x10(\x12/\n" +
	"+RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE\x10)\x12*\n" +
	"&RELEASE_TYPE_NONMUSICALWORKCLIPRELEASE\x10*\x124\n" +
	"0RELEASE_TYPE_NONMUSICALWORKREADALONGVIDEORELEASE\x10+\x12-\n" +
	")RELEASE_TYPE_NONMUSICALWORKTRAILERRELEASE\x10,\x122\n" +
	".RELEASE_TYPE_NONMUSICALWORKVIDEOCHAPTERRELEASE\x10-\x12.\n" +
	"*RELEASE_TYPE_NONSERIALAUDIOVISUALRECORDING\x10.\x12\"\n" +
	"\x1eRELEASE_TYPE_PHOTOGRAPHRELEASE\x10/\x12$\n" +
	" RELEASE_TYPE_RINGBACKTONERELEASE\x100\x12 \n" +
	"\x1cRELEASE_TYPE_RINGTONERELEASE\x101\x12#\n" +
	"\x1fRELEASE_TYPE_SCREENSAVERRELEASE\x102\x12\x17\n" +
	"\x13RELEASE_TYPE_SEASON\x103\x12\x17\n" +
	"\x13RELEASE_TYPE_SERIES\x104\x12\"\n" +
	"\x1eRELEASE_TYPE_SHEETMUSICRELEASE\x105\x121\n" +
	"-RELEASE_TYPE_SHORTFORMMUSICALWORKVIDEORELEASE\x106\x124\n" +
	"0RELEASE_TYPE_SHORTFORMNONMUSICALWORKVIDEORELEASE\x107\x12\x17\n" +
	"\x13RELEASE_TYPE_SINGLE\x108\x12&\n" +
	"\"RELEASE_TYPE_SINGLERESOURCERELEASE\x109\x122\n" +
	".RELEASE_TYPE_SINGLERESOURCERELEASEWITHCOVERART\x10:\x12\x1d\n" +
	"\x19RELEASE_TYPE_TRACKRELEASE\x10;\x12\x1d\n" +
	"\x19RELEASE_TYPE_TRAILERVIDEO\x10<\x12!\n" +
	"\x1dRELEASE_TYPE_TRAYIMAGERELEASE\x10=\x12\x18\n" +
	"\x14RELEASE_TYPE_UNKNOWN\x10>\x12\x1c\n" +
	"\x18RELEASE_TYPE_USERDEFINED\x10?\x12\x1b\n" +
	"\x17RELEASE_TYPE_VIDEOALBUM\x10@\x12$\n" +
	" RELEASE_TYPE_VIDEOCHAPTERRELEASE\x10A\x12!\n" +
	"\x1dRELEASE_TYPE_VIDEOCLIPRELEASE\x10B\x12*\n" +
	"&RELEASE_TYPE_VIDEOSCREENCAPTURERELEASE\x10C\x12\x1c\n" +
	"\x18RELEASE_TYPE_VIDEOSINGLE\x10D\x12\"\n" +
	"\x1eRELEASE_TYPE_VIDEOTRACKRELEASE\x10E\x12!\n" +
	"\x1dRELEASE_TYPE_WALLPAPERRELEASE\x10F\x12!\n" +
	"\x1dRELEASE_TYPE_AUDIOBOOKRELEASE\x10G\x12\"\n" +
	"\x1eRELEASE_TYPE_AUDIODRAMARELEASE\x10H\x12)\n" +
	"%RELEASE_TYPE_CLASSICALDIGITALBOXEDSET\x10I\x12)\n" +
	"%RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM\x10J\x12\x16\n" +
	"\x12RELEASE_TYPE_DJMIX\x10K\x12\x16\n" +
	"\x12RELEASE_TYPE_DRAMA\x10L\x12-\n" +
	")RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE\x10M\x12*\n" +
	"&RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET\x10N\x12\x19\n" +
	"\x15RELEASE_TYPE_PLAYLIST\x10O\x12\x1a\n" +
	"\x16RELEASE_TYPE_SHORTFILM\x10P\x12\x1b\n" +
	"\x17RELEASE_TYPE_STEMBUNDLE\x10Q\x12'\n" +
	"#RELEASE_TYPE_VIDEOMASTERTONERELEASE\x10R*\xea\x01\n" +
	"\fReportFormat\x12\x1d\n" +
	"\x19REPORT_FORMAT_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13REPORT_FORMAT_ASCII\x10\x01\x12\x15\n" +
	"\x11REPORT_FORMAT_CSV\x10\x02\x12\x1b\n" +
	"\x17REPORT_FORMAT_EXCEL2000\x10\x03\x12\x1b\n" +
	"\x17REPORT_FORMAT_EXCEL2007\x10\x04\x12\x1b\n" +
	"\x17REPORT_FORMAT_EXCEL2010\x10\x05\x12\x1d\n" +
	"\x19REPORT_FORMAT_USERDEFINED\x10\x06\x12\x15\n" +
	"\x11REPORT_FORMAT_XML\x10\a*\xdf\x04\n" +
	"\n" +
	"ReportType\x12\x1b\n" +
	"\x17REPORT_TYPE_UNSPECIFIED\x10\x00\x12,\n" +
	"(REPORT_TYPE_DELIVERYFREQUENCYREQUESTCALL\x10\x01\x12A\n" +
	"=REPORT_TYPE_INFORMATIONABOUTDELIVEREDANDAVAILABLERELEASESCALL\x10\x02\x121\n" +
	"-REPORT_TYPE_ORDEREDRELEASESINQUEUEREQUESTCALL\x10\x03\x12%\n" +
	"!REPORT_TYPE_REDELIVERYREQUESTCALL\x10\x04\x12'\n" +
	"#REPORT_TYPE_RELEASEAVAILABILITYCALL\x10\x05\x12.\n" +
	"*REPORT_TYPE_RELEASEAVAILABILITYREQUESTCALL\x10\x06\x12,\n" +
	"(REPORT_TYPE_RELEASESTATUSINFORMATIONCALL\x10\a\x12(\n" +
	"$REPORT_TYPE_RELEASESTATUSREQUESTCALL\x10\b\x12-\n" +
	")REPORT_TYPE_RELEASESUPPLYCHAINREQUESTCALL\x10\t\x12\"\n" +
	"\x1eREPORT_TYPE_REPORTDELIVERYCALL\x10\n" +
	"\x12!\n" +
	"\x1dREPORT_TYPE_REPORTREQUESTCALL\x10\v\x12%\n" +
	"!REPORT_TYPE_SUPPLYCHAINSTATUSCALL\x10\f\x12\x1b\n" +
	"\x17REPORT_TYPE_USERDEFINED\x10\r*\xd9\x03\n" +
	"\rRequestReason\x12\x1e\n" +
	"\x1aREQUEST_REASON_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aREQUEST_REASON_USERDEFINED\x10\x01\x12+\n" +
	"'REQUEST_REASON_DISPUTERESOLUTIONREQUEST\x10\x02\x12!\n" +
	"\x1dREQUEST_REASON_GENERALREQUEST\x10\x03\x12$\n" +
	" REQUEST_REASON_PUBLISHERADDITION\x10\x04\x12\"\n" +
	"\x1eREQUEST_REASON_PUBLISHERCHANGE\x10\x05\x12#\n" +
	"\x1fREQUEST_REASON_PUBLISHERREMOVAL\x10\x06\x12\x19\n" +
	"\x15REQUEST_REASON_RECALL\x10\a\x12$\n" +
	" REQUEST_REASON_RELEASELISTUPDATE\x10\b\x12\"\n" +
	"\x1eREQUEST_REASON_SPECIFICREQUEST\x10\t\x12!\n" +
	"\x1dREQUEST_REASON_WRITERADDITION\x10\n" +
	"\x12\x1f\n" +
	"\x1bREQUEST_REASON_WRITERCHANGE\x10\v\x12 \n" +
	"\x1cREQUEST_REASON_WRITERREMOVAL\x10\f*\x94\x02\n" +
	"\x13RequestedActionType\x12%\n" +
	"!REQUESTED_ACTION_TYPE_UNSPECIFIED\x10\x00\x123\n" +
	"/REQUESTED_ACTION_TYPE_ADDITIONALINFORMATIONONLY\x10\x01\x12*\n" +
	"&REQUESTED_ACTION_TYPE_CORRECTANDINFORM\x10\x02\x12*\n" +
	"&REQUESTED_ACTION_TYPE_CORRECTANDRESEND\x10\x03\x12\"\n" +
	"\x1eREQUESTED_ACTION_TYPE_NOACTION\x10\x04\x12%\n" +
	"!REQUESTED_ACTION_TYPE_USERDEFINED\x10\x05*\x84c\n" +
	"\x17ResourceContributorRole\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_ACCOMPANYIST\x10\x01\x12#\n" +
	"\x1fRESOURCE_CONTRIBUTOR_ROLE_ACTOR\x10\x02\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALENGINEER\x10\x03\x126\n" +
	"2RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER\x10\x04\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER\x10\x05\x12;\n" +
	"7RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER\x10\x06\x126\n" +
	"2RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER\x10\a\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_ANCHORPERSON\x10\b\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_ANIMALTRAINER\x10\t\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_ANIMATOR\x10\n" +
	"\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_ANNOTATOR\x10\v\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_ANNOUNCER\x10\f\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR\x10\r\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_AANDRCOORDINATOR\x10\x0e\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_ARMOURER\x10\x0f\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_ARTCOPYIST\x10\x10\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_ARTDIRECTOR\x10\x11\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_ARTIST\x10\x12\x12;\n" +
	"7RESOURCE_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER\x10\x13\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER\x10\x14\x127\n" +
	"3RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER\x10\x15\x125\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR\x10\x16\x12>\n" +
	":RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN\x10\x17\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR\x10\x18\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR\x10\x19\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTEDITOR\x10\x1a\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTENGINEER\x10\x1b\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER\x10\x1c\x123\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR\x10\x1d\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER\x10\x1e\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER\x10\x1f\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_AURALTRAINER\x10 \x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST\x10!\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_BALANCEENGINEER\x10\"\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_BANDLEADER\x10#\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_BINDER\x10$\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_BINDINGDESIGNER\x10%\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_BOOKDESIGNER\x10&\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER\x10'\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER\x10(\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_BOOKPRODUCER\x10)\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_BROADCASTASSISTANT\x10*\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST\x10+\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_CALLIGRAPHER\x10,\x12,\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_CAMERAOPERATOR\x10-\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_CARPENTER\x10.\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_CARTOGRAPHER\x10/\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_CARTOONIST\x100\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_CASTINGDIRECTOR\x101\x12%\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_CAUSEUR\x102\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_CENSOR\x103\x125\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN\x104\x12#\n" +
	"\x1fRESOURCE_CONTRIBUTOR_ROLE_CHOIR\x105\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_CHOIRMEMBER\x106\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_CHOREOGRAPHER\x107\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_CHORUSMASTER\x108\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_CIRCUSARTIST\x109\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_CLAPPERLOADER\x10:\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_CLUBDJ\x10;\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_CODIRECTOR\x10<\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER\x10=\x12,\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_COLORSEPARATOR\x10>\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_COMEDIAN\x10?\x12%\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_COMIXER\x10@\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_COMIXINGENGINEER\x10A\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_COMMENTATOR\x10B\x126\n" +
	"2RESOURCE_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER\x10C\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER\x10D\x124\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR\x10E\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER\x10F\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_CONCERTMASTER\x10G\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_CONDUCTOR\x10H\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_CONSULTANT\x10I\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_CONTINUITYCHECKER\x10J\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_CONTRACTOR\x10K\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_COPRODUCER\x10L\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_CORRESPONDENT\x10M\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_COSTUMEDESIGNER\x10N\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_COVERDESIGNER\x10O\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_DANCER\x10P\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_DELINEATOR\x10Q\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_DESIGNER\x10R\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_DIALOGUECOACH\x10S\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR\x10T\x12=\n" +
	"9RESOURCE_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER\x10U\x124\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER\x10V\x12:\n" +
	"6RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER\x10W\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_DIRECTOR\x10X\x129\n" +
	"5RESOURCE_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER\x10Y\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY\x10Z\x12 \n" +
	"\x1cRESOURCE_CONTRIBUTOR_ROLE_DJ\x10[\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_DRAUGHTSMAN\x10\\\x12%\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_DRESSER\x10]\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_DUBBER\x10^\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_EDITOR\x10_\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_EDITORINCHIEF\x10`\x12,\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_EDITOROFTHEDAY\x10a\x12%\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_ENCODER\x10b\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_ENGINEER\x10c\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_ENSEMBLE\x10d\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER\x10e\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_EXPERT\x10f\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_FACSIMILIST\x10g\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_FIGHTDIRECTOR\x10h\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_FILMDIRECTOR\x10i\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR\x10j\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_FILMEDITOR\x10k\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_FILMPRODUCER\x10l\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER\x10m\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_FLOORMANAGER\x10n\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_FOCUSPULLER\x10o\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_FOLEYARTIST\x10p\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_FOLEYEDITOR\x10q\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_FOLEYMIXER\x10r\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_GRAPHICARTIST\x10s\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_GRAPHICASSISTANT\x10t\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_GRAPHICDESIGNER\x10u\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_GREENSMAN\x10v\x12\"\n" +
	"\x1eRESOURCE_CONTRIBUTOR_ROLE_GRIP\x10w\x12,\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_GUESTCONDUCTOR\x10x\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_GROUPMEMBER\x10y\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_HAIRDRESSER\x10z\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_ILLUSTRATOR\x10{\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_INITIALPRODUCER\x10|\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST\x10}\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWER\x10~\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_KEYCHARACTER\x10\x7f\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_KEYGRIP\x10\x80\x01\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_KEYTALENT\x10\x81\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_LEADMAN\x10\x82\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_LEADPERFORMER\x10\x83\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_LEADVOCALIST\x10\x84\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR\x10\x85\x01\x121\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN\x10\x86\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_LOCATIONMANAGER\x10\x87\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_MAKEUPARTIST\x10\x88\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_MANUFACTURER\x10\x89\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_MASTERINGENGINEER\x10\x8a\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER\x10\x8b\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_MATTEARTIST\x10\x8c\x01\x12$\n" +
	"\x1fRESOURCE_CONTRIBUTOR_ROLE_MIXER\x10\x8d\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_MIXINGENGINEER\x10\x8e\x01\x123\n" +
	".RESOURCE_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER\x10\x8f\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_MUSICARRANGER\x10\x90\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_MUSICCOPYIST\x10\x91\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_MUSICDIRECTOR\x10\x92\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_MUSICGROUP\x10\x93\x01\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_MUSICIAN\x10\x94\x01\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_NARRATOR\x10\x95\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_NEWSPRODUCER\x10\x96\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_NEWSREADER\x10\x97\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_NOTSPECIFIED\x10\x98\x01\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRA\x10\x99\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER\x10\x9a\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_ORIGINALARTIST\x10\x9b\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_OVERDUBENGINEER\x10\x9c\x01\x124\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER\x10\x9d\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_PAINTER\x10\x9e\x01\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_PERFORMER\x10\x9f\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHER\x10\xa0\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR\x10\xa1\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_PLAYBACKSINGER\x10\xa2\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_POSTPRODUCER\x10\xa3\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTION\x10\xa4\x01\x124\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER\x10\xa5\x01\x12:\n" +
	"5RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER\x10\xa6\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN\x10\xa7\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT\x10\xa8\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY\x10\xa9\x01\x124\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR\x10\xaa\x01\x123\n" +
	".RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT\x10\xab\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER\x10\xac\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY\x10\xad\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_PROJECTENGINEER\x10\xae\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMER\x10\xaf\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER\x10\xb0\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_PROGRAMPRODUCER\x10\xb1\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_PROPERTYMANAGER\x10\xb2\x01\x121\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR\x10\xb3\x01\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_PUPPETEER\x10\xb4\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_PYROTECHNICIAN\x10\xb5\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_RECORDINGENGINEER\x10\xb6\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER\x10\xb7\x01\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_REDACTOR\x10\xb8\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_REISSUEPRODUCER\x10\xb9\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_REMIXEDARTIST\x10\xba\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_REMIXER\x10\xbb\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_REMIXINGENGINEER\x10\xbc\x01\x125\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER\x10\xbd\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_REPETITEUR\x10\xbe\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_RESEARCHER\x10\xbf\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD\x10\xc0\x01\x121\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER\x10\xc1\x01\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_RESTAGER\x10\xc2\x01\x12%\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_RIGGER\x10\xc3\x01\x128\n" +
	"3RESOURCE_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT\x10\xc4\x01\x12%\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_RUNNER\x10\xc5\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SCENICOPERATIVE\x10\xc6\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR\x10\xc7\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR\x10\xc8\x01\x12<\n" +
	"7RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR\x10\xc9\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR\x10\xca\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SECONDCONDUCTOR\x10\xcb\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_SECONDENGINEER\x10\xcc\x01\x121\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR\x10\xcd\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_SERIESPRODUCER\x10\xce\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_SETDESIGNER\x10\xcf\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_SETDRESSER\x10\xd0\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER\x10\xd1\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_SOLOIST\x10\xd2\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_SOUNDDESIGNER\x10\xd3\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_SOUNDMIXER\x10\xd4\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_SOUNDRECORDIST\x10\xd5\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR\x10\xd6\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_SPEAKER\x10\xd7\x01\x127\n" +
	"2RESOURCE_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN\x10\xd8\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_SPONSOR\x10\xd9\x01\x125\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER\x10\xda\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_STAGEDIRECTOR\x10\xdb\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_STAGEENGINEER\x10\xdc\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_STORYTELLER\x10\xdd\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_STRINGENGINEER\x10\xde\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_STRINGPRODUCER\x10\xdf\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_STRINGSDIRECTOR\x10\xe0\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR\x10\xe1\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_STUDIOMUSICIAN\x10\xe2\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_STUDIOPERSONNEL\x10\xe3\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_STUDIOPRODUCER\x10\xe4\x01\x12%\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_STUNTS\x10\xe5\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESEDITOR\x10\xe6\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR\x10\xe7\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SUPPORTINGACTOR\x10\xe8\x01\x125\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER\x10\xe9\x01\x12;\n" +
	"6RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER\x10\xea\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_TAPEOPERATOR\x10\xeb\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR\x10\xec\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_TONMEISTER\x10\xed\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_TRACKINGENGINEER\x10\xee\x01\x125\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER\x10\xef\x01\x12;\n" +
	"6RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER\x10\xf0\x01\x12A\n" +
	"<RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER\x10\xf1\x01\x124\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER\x10\xf2\x01\x128\n" +
	"3RESOURCE_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL\x10\xf3\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_TYPEDESIGNER\x10\xf4\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_UNKNOWN\x10\xf5\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_USERDEFINED\x10\xf6\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VIDEODIRECTOR\x10\xf7\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_VIDEOGRAPHER\x10\xf8\x01\x123\n" +
	".RESOURCE_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR\x10\xf9\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VIDEOPRODUCER\x10\xfa\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_VISIONMIXER\x10\xfb\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_VISUALEDITOR\x10\xfc\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN\x10\xfd\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VOCALARRANGER\x10\xfe\x01\x123\n" +
	".RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER\x10\xff\x01\x129\n" +
	"4RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER\x10\x80\x02\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VOCALENGINEER\x10\x81\x02\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_VOCALIST\x10\x82\x02\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER\x10\x83\x02\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VOCALPRODUCER\x10\x84\x02\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_VOICEACTOR\x10\x85\x02\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_WARDROBE\x10\x86\x02\x12#\n" +
	"\x1eRESOURCE_CONTRIBUTOR_ROLE_BAND\x10\x87\x02\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_CONTRIBUTOR\x10\x88\x02\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_FEATUREDARTIST\x10\x89\x02\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_MAINARTIST\x10\x8a\x02\x12%\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_MEMBER\x10\x8b\x02\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_PRODUCER\x10\x8c\x02\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER\x10\x8d\x02\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_PRESENTER\x10\x8e\x02*\xf7\x01\n" +
	"\x16ResourceOmissionReason\x12(\n" +
	"$RESOURCE_OMISSION_REASON_UNSPECIFIED\x10\x00\x123\n" +
	"/RESOURCE_OMISSION_REASON_PASSPORTSERVICERELEASE\x10\x01\x12'\n" +
	"#RESOURCE_OMISSION_REASON_PRERELEASE\x10\x02\x12(\n" +
	"$RESOURCE_OMISSION_REASON_USERDEFINED\x10\x03\x12+\n" +
	"'RESOURCE_OMISSION_REASON_VIRTUALRELEASE\x10\x04*\x92\x02\n" +
	"\fResourceType\x12\x1d\n" +
	"\x19RESOURCE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13RESOURCE_TYPE_IMAGE\x10\x01\x12\x16\n" +
	"\x12RESOURCE_TYPE_MIDI\x10\x02\x12\x1c\n" +
	"\x18RESOURCE_TYPE_SHEETMUSIC\x10\x03\x12\x1a\n" +
	"\x16RESOURCE_TYPE_SOFTWARE\x10\x04\x12 \n" +
	"\x1cRESOURCE_TYPE_SOUNDRECORDING\x10\x05\x12\x16\n" +
	"\x12RESOURCE_TYPE_TEXT\x10\x06\x12%\n" +
	"!RESOURCE_TYPE_USERDEFINEDRESOURCE\x10\a\x12\x17\n" +
	"\x13RESOURCE_TYPE_VIDEO\x10\b*\xb4\x01\n" +
	"\x11RevenueSourceType\x12#\n" +
	"\x1fREVENUE_SOURCE_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$REVENUE_SOURCE_TYPE_FINANCIALREVENUE\x10\x01\x12(\n" +
	"$REVENUE_SOURCE_TYPE_INDEMNITYREVENUE\x10\x02\x12&\n" +
	"\"REVENUE_SOURCE_TYPE_ROYALTYREVENUE\x10\x03*\xe6\x01\n" +
	"\x0eRightShareType\x12 \n" +
	"\x1cRIGHT_SHARE_TYPE_UNSPECIFIED\x10\x00\x12/\n" +
	"+RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE\x10\x01\x12/\n" +
	"+RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE\x10\x02\x12+\n" +
	"'RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE\x10\x03\x12#\n" +
	"\x1fRIGHT_SHARE_TYPE_LICENSINGSHARE\x10\x04*\xbc\x01\n" +
	"\x15RightsClaimPolicyType\x12(\n" +
	"$RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE\x10\x01\x12(\n" +
	"$RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS\x10\x02\x12%\n" +
	"!RIGHTS_CLAIM_POLICY_TYPE_MONETIZE\x10\x03*\xcf\x02\n" +
	"\x14RightsControllerRole\x12&\n" +
	"\"RIGHTS_CONTROLLER_ROLE_UNSPECIFIED\x10\x00\x126\n" +
	"2RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY\x10\x01\x12.\n" +
	"*RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR\x10\x02\x12+\n" +
	"'RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER\x10\x03\x12/\n" +
	"+RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR\x10\x04\x12\"\n" +
	"\x1eRIGHTS_CONTROLLER_ROLE_UNKNOWN\x10\x05\x12%\n" +
	"!RIGHTS_CONTROLLER_ROLE_LOCALPAYEE\x10\x06*\xc3\x01\n" +
	"\x14RightsControllerType\x12&\n" +
	"\"RIGHTS_CONTROLLER_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER\x10\x01\x12+\n" +
	"'RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE\x10\x02\x12,\n" +
	"(RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE\x10\x03*\xb5\x02\n" +
	"\x0eRightsCoverage\x12\x1f\n" +
	"\x1bRIGHTS_COVERAGE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"RIGHTS_COVERAGE_MAKEAVAILABLERIGHT\x10\x01\x12#\n" +
	"\x1fRIGHTS_COVERAGE_MECHANICALRIGHT\x10\x02\x12#\n" +
	"\x1fRIGHTS_COVERAGE_PERFORMINGRIGHT\x10\x03\x12\x1e\n" +
	"\x1aRIGHTS_COVERAGE_PRINTRIGHT\x10\x04\x12%\n" +
	"!RIGHTS_COVERAGE_REPRODUCTIONRIGHT\x10\x05\x12(\n" +
	"$RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT\x10\x06\x12\x1f\n" +
	"\x1bRIGHTS_COVERAGE_USERDEFINED\x10\a*\xfd\x04\n" +
	"\x1aRoyaltyRateCalculationType\x12-\n" +
	")ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED\x10\x00\x123\n" +
	"/ROYALTY_RATE_CALCULATION_TYPE_BUDGETROYALTYRATE\x10\x01\x12B\n" +
	">ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE\x10\x02\x12<\n" +
	"8ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDSHAREROYALTYRATE\x10\x03\x12=\n" +
	"9ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE\x10\x04\x127\n" +
	"3ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE\x10\x05\x124\n" +
	"0ROYALTY_RATE_CALCULATION_TYPE_REDUCEDROYALTYRATE\x10\x06\x12=\n" +
	"9ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE\x10\a\x126\n" +
	"2ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE\x10\b\x12%\n" +
	"!ROYALTY_RATE_CALCULATION_TYPE_PPD\x10\t\x12-\n" +
	")ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE\x10\n" +
	"*\xa5\x01\n" +
	"\x0fRoyaltyRateType\x12!\n" +
	"\x1dROYALTY_RATE_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bROYALTY_RATE_TYPE_PENNYRATE\x10\x01\x12+\n" +
	"'ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE\x10\x02\x12!\n" +
	"\x1dROYALTY_RATE_TYPE_USERDEFINED\x10\x03*\xca\x01\n" +
	"\x1dSalesReportAvailabilityStatus\x120\n" +
	",SALES_REPORT_AVAILABILITY_STATUS_UNSPECIFIED\x10\x00\x129\n" +
	"5SALES_REPORT_AVAILABILITY_STATUS_SALESREPORTAVAILABLE\x10\x01\x12<\n" +
	"8SALES_REPORT_AVAILABILITY_STATUS_SALESREPORTNOTAVAILABLE\x10\x02*I\n" +
	"\x03Sex\x12\x13\n" +
	"\x0fSEX_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"SEX_FEMALE\x10\x01\x12\f\n" +
	"\bSEX_MALE\x10\x02\x12\x0f\n" +
	"\vSEX_UNKNOWN\x10\x03*\xff\x01\n" +
	"\fSoftwareType\x12\x1d\n" +
	"\x19SOFTWARE_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" SOFTWARE_TYPE_INTERACTIVEBOOKLET\x10\x01\x12&\n" +
	"\"SOFTWARE_TYPE_MUSICALWORKBASEDGAME\x10\x02\x12)\n" +
	"%SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME\x10\x03\x12\x1d\n" +
	"\x19SOFTWARE_TYPE_SCREENSAVER\x10\x04\x12\x19\n" +
	"\x15SOFTWARE_TYPE_UNKNOWN\x10\x05\x12\x1d\n" +
	"\x19SOFTWARE_TYPE_USERDEFINED\x10\x06*\xf0\x01\n" +
	"\x12SoundProcessorType\x12$\n" +
	" SOUND_PROCESSOR_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"SOUND_PROCESSOR_TYPE_MIDIPROCESSOR\x10\x01\x12!\n" +
	"\x1dSOUND_PROCESSOR_TYPE_SMAF_MA2\x10\x02\x12!\n" +
	"\x1dSOUND_PROCESSOR_TYPE_SMAF_MA3\x10\x03\x12 \n" +
	"\x1cSOUND_PROCESSOR_TYPE_UNKNOWN\x10\x04\x12$\n" +
	" SOUND_PROCESSOR_TYPE_USERDEFINED\x10\x05*\xc1\x03\n" +
	"\x12SoundRecordingType\x12$\n" +
	" SOUND_RECORDING_TYPE_UNSPECIFIED\x10\x00\x12;\n" +
	"7SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING\x10\x01\x122\n" +
	".SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING\x10\x02\x12>\n" +
	":SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING\x10\x03\x125\n" +
	"1SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING\x10\x04\x121\n" +
	"-SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING\x10\x05\x12 \n" +
	"\x1cSOUND_RECORDING_TYPE_UNKNOWN\x10\x06\x12$\n" +
	" SOUND_RECORDING_TYPE_USERDEFINED\x10\a\x12\"\n" +
	"\x1eSOUND_RECORDING_TYPE_AUDIOSTEM\x10\b*\xbb\x06\n" +
	"\x11SupplyChainStatus\x12#\n" +
	"\x1fSUPPLY_CHAIN_STATUS_UNSPECIFIED\x10\x00\x125\n" +
	"1SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR\x10\x01\x126\n" +
	"2SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR\x10\x02\x12D\n" +
	"@SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR\x10\x03\x128\n" +
	"4SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR\x10\x04\x127\n" +
	"3SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR\x10\x05\x12;\n" +
	"7SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR\x10\x06\x127\n" +
	"3SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS\x10\a\x12+\n" +
	"'SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE\x10\b\x12;\n" +
	"7SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR\x10\t\x123\n" +
	"/SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION\x10\n" +
	"\x12@\n" +
	"<SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR\x10\v\x12#\n" +
	"\x1fSUPPLY_CHAIN_STATUS_USERDEFINED\x10\f\x125\n" +
	"1SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE\x10\r\x12&\n" +
	"\"SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT\x10\x0e*\xc2\x01\n" +
	"\bTaxScope\x12\x19\n" +
	"\x15TAX_SCOPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15TAX_SCOPE_COMBINEDTAX\x10\x01\x12\x18\n" +
	"\x14TAX_SCOPE_FEDERALTAX\x10\x02\x12\x16\n" +
	"\x12TAX_SCOPE_LOCALTAX\x10\x03\x12\x1b\n" +
	"\x17TAX_SCOPE_PROVINCIALTAX\x10\x04\x12\x16\n" +
	"\x12TAX_SCOPE_STATETAX\x10\x05\x12\x19\n" +
	"\x15TAX_SCOPE_USERDEFINED\x10\x06*\x9f\x01\n" +
	"\aTaxType\x12\x18\n" +
	"\x14TAX_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14TAX_TYPE_COMBINEDTAX\x10\x01\x12\x15\n" +
	"\x11TAX_TYPE_SALESTAX\x10\x02\x12\x17\n" +
	"\x13TAX_TYPE_SERVICETAX\x10\x03\x12\x16\n" +
	"\x12TAX_TYPE_SOURCETAX\x10\x04\x12\x18\n" +
	"\x14TAX_TYPE_USERDEFINED\x10\x05*r\n" +
	"\x11TerritoryCodeType\x12#\n" +
	"\x1fTERRITORY_CODE_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17TERRITORY_CODE_TYPE_ISO\x10\x01\x12\x1b\n" +
	"\x17TERRITORY_CODE_TYPE_TIS\x10\x02*\x9d\x02\n" +
	")TerritoryCodeTypeIncludingDeprecatedCodes\x12>\n" +
	":TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED\x10\x00\x12@\n" +
	"<TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO\x10\x01\x126\n" +
	"2TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO\x10\x02\x126\n" +
	"2TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS\x10\x03*\xd0\x05\n" +
	"\rTextCodecType\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15TEXT_CODEC_TYPE_ASCII\x10\x01\x12\x1a\n" +
	"\x16TEXT_CODEC_TYPE_EBU_TT\x10\x02\x12\x18\n" +
	"\x14TEXT_CODEC_TYPE_HTML\x10\x03\x12\x19\n" +
	"\x15TEXT_CODEC_TYPE_OOXML\x10\x04\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_PDF\x10\x05\x12\x1e\n" +
	"\x1aTEXT_CODEC_TYPE_POSTSCRIPT\x10\x06\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_RTF\x10\a\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_SRT\x10\b\x12\x18\n" +
	"\x14TEXT_CODEC_TYPE_TTML\x10\t\x12\x1b\n" +
	"\x17TEXT_CODEC_TYPE_UNKNOWN\x10\n" +
	"\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_USERDEFINED\x10\v\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_VTT\x10\f\x12'\n" +
	"#TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT\x10\r\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_ENHANCEDLRC\x10\x0e\x12\x18\n" +
	"\x14TEXT_CODEC_TYPE_EPUB\x10\x0f\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_LRC\x10\x10\x12!\n" +
	"\x1dTEXT_CODEC_TYPE_MICROSOFTWORD\x10\x11\x12$\n" +
	" TEXT_CODEC_TYPE_OPENDOCUMENTTEXT\x10\x12\x12\x1d\n" +
	"\x19TEXT_CODEC_TYPE_SIMPLELRC\x10\x13\x12\x1c\n" +
	"\x18TEXT_CODEC_TYPE_UTF8TEXT\x10\x14\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_WINDOWSTEXT\x10\x15\x12\x19\n" +
	"\x15TEXT_CODEC_TYPE_XHTML\x10\x16\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_XML\x10\x17*\xf7\x01\n" +
	"\bTextType\x12\x19\n" +
	"\x15TEXT_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TEXT_TYPE_CAPTION\x10\x01\x12\x13\n" +
	"\x0fTEXT_TYPE_EBOOK\x10\x02\x12\x18\n" +
	"\x14TEXT_TYPE_LINERNOTES\x10\x03\x12\x17\n" +
	"\x13TEXT_TYPE_LYRICTEXT\x10\x04\x12#\n" +
	"\x1fTEXT_TYPE_NONINTERACTIVEBOOKLET\x10\x05\x12\x1a\n" +
	"\x16TEXT_TYPE_TEXTDOCUMENT\x10\x06\x12\x15\n" +
	"\x11TEXT_TYPE_UNKNOWN\x10\a\x12\x19\n" +
	"\x15TEXT_TYPE_USERDEFINED\x10\b*\xcf\x01\n" +
	"\tThemeType\x12\x1a\n" +
	"\x16THEME_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17THEME_TYPE_CLOSINGTHEME\x10\x01\x12\x18\n" +
	"\x14THEME_TYPE_MAINTHEME\x10\x02\x12\x1b\n" +
	"\x17THEME_TYPE_OPENINGTHEME\x10\x03\x12\x1b\n" +
	"\x17THEME_TYPE_SEGMENTTHEME\x10\x04\x12\x19\n" +
	"\x15THEME_TYPE_TITLETHEME\x10\x05\x12\x1a\n" +
	"\x16THEME_TYPE_USERDEFINED\x10\x06*\xaa;\n" +
	"\x10TisTerritoryCode\x12\"\n" +
	"\x1eTIS_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16TIS_TERRITORY_CODE_E_4\x10\x01\x12\x1a\n" +
	"\x16TIS_TERRITORY_CODE_E_8\x10\x02\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_12\x10\x03\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_20\x10\x04\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_24\x10\x05\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_28\x10\x06\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_31\x10\a\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_32\x10\b\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_36\x10\t\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_40\x10\n" +
	"\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_44\x10\v\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_48\x10\f\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_50\x10\r\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_51\x10\x0e\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_52\x10\x0f\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_56\x10\x10\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_64\x10\x11\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_68\x10\x12\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_70\x10\x13\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_72\x10\x14\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_76\x10\x15\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_84\x10\x16\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_90\x10\x17\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_96\x10\x18\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_100\x10\x19\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_104\x10\x1a\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_108\x10\x1b\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_112\x10\x1c\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_116\x10\x1d\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_120\x10\x1e\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_124\x10\x1f\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_132\x10 \x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_140\x10!\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_144\x10\"\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_148\x10#\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_152\x10$\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_156\x10%\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_158\x10&\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_170\x10'\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_174\x10(\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_178\x10)\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_180\x10*\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_188\x10+\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_191\x10,\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_192\x10-\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_196\x10.\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_200\x10/\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_203\x100\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_204\x101\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_208\x102\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_212\x103\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_214\x104\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_218\x105\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_222\x106\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_226\x107\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_230\x108\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_231\x109\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_232\x10:\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_233\x10;\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_242\x10<\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_246\x10=\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_250\x10>\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_258\x10?\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_262\x10@\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_266\x10A\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_268\x10B\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_270\x10C\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_276\x10D\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_278\x10E\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_280\x10F\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_288\x10G\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_296\x10H\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_300\x10I\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_308\x10J\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_320\x10K\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_324\x10L\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_328\x10M\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_332\x10N\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_336\x10O\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_340\x10P\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_344\x10Q\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_348\x10R\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_352\x10S\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_356\x10T\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_360\x10U\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_364\x10V\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_368\x10W\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_372\x10X\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_376\x10Y\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_380\x10Z\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_384\x10[\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_388\x10\\\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_392\x10]\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_398\x10^\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_400\x10_\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_404\x10`\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_408\x10a\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_410\x10b\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_414\x10c\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_417\x10d\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_418\x10e\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_422\x10f\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_426\x10g\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_428\x10h\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_430\x10i\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_434\x10j\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_438\x10k\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_440\x10l\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_442\x10m\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_450\x10n\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_454\x10o\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_458\x10p\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_462\x10q\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_466\x10r\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_470\x10s\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_478\x10t\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_480\x10u\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_484\x10v\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_492\x10w\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_496\x10x\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_498\x10y\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_499\x10z\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_504\x10{\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_508\x10|\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_512\x10}\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_516\x10~\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_520\x10\x7f\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_524\x10\x80\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_528\x10\x81\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_540\x10\x82\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_548\x10\x83\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_554\x10\x84\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_558\x10\x85\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_562\x10\x86\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_566\x10\x87\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_578\x10\x88\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_583\x10\x89\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_584\x10\x8a\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_585\x10\x8b\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_586\x10\x8c\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_591\x10\x8d\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_598\x10\x8e\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_600\x10\x8f\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_604\x10\x90\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_608\x10\x91\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_616\x10\x92\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_620\x10\x93\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_624\x10\x94\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_626\x10\x95\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_630\x10\x96\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_634\x10\x97\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_642\x10\x98\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_643\x10\x99\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_646\x10\x9a\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_659\x10\x9b\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_662\x10\x9c\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_670\x10\x9d\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_674\x10\x9e\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_678\x10\x9f\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_682\x10\xa0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_686\x10\xa1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_688\x10\xa2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_690\x10\xa3\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_694\x10\xa4\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_702\x10\xa5\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_703\x10\xa6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_704\x10\xa7\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_705\x10\xa8\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_706\x10\xa9\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_710\x10\xaa\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_716\x10\xab\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_720\x10\xac\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_724\x10\xad\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_728\x10\xae\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_729\x10\xaf\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_732\x10\xb0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_736\x10\xb1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_740\x10\xb2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_748\x10\xb3\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_752\x10\xb4\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_756\x10\xb5\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_760\x10\xb6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_762\x10\xb7\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_764\x10\xb8\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_768\x10\xb9\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_776\x10\xba\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_780\x10\xbb\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_784\x10\xbc\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_788\x10\xbd\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_792\x10\xbe\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_795\x10\xbf\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_798\x10\xc0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_800\x10\xc1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_804\x10\xc2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_807\x10\xc3\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_810\x10\xc4\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_818\x10\xc5\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_826\x10\xc6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_834\x10\xc7\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_840\x10\xc8\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_854\x10\xc9\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_858\x10\xca\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_860\x10\xcb\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_862\x10\xcc\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_882\x10\xcd\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_886\x10\xce\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_887\x10\xcf\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_890\x10\xd0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_891\x10\xd1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_894\x10\xd2\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2100\x10\xd3\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2101\x10\xd4\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2102\x10\xd5\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2103\x10\xd6\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2104\x10\xd7\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2105\x10\xd8\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2106\x10\xd9\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2107\x10\xda\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2108\x10\xdb\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2109\x10\xdc\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2110\x10\xdd\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2111\x10\xde\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2112\x10\xdf\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2113\x10\xe0\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2114\x10\xe1\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2115\x10\xe2\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2116\x10\xe3\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2117\x10\xe4\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2118\x10\xe5\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2119\x10\xe6\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2120\x10\xe7\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2121\x10\xe8\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2122\x10\xe9\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2123\x10\xea\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2124\x10\xeb\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2125\x10\xec\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2126\x10\xed\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2127\x10\xee\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2128\x10\xef\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2129\x10\xf0\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2130\x10\xf1\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2131\x10\xf2\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2132\x10\xf3\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2133\x10\xf4\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2134\x10\xf5\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2136\x10\xf6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_446\x10\xf7\x01*\xb6\x04\n" +
	"\tTitleType\x12\x1a\n" +
	"\x16TITLE_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"TITLE_TYPE_ABBREVIATEDDISPLAYTITLE\x10\x01\x12\x1f\n" +
	"\x1bTITLE_TYPE_ALTERNATIVETITLE\x10\x02\x12\x1b\n" +
	"\x17TITLE_TYPE_DISPLAYTITLE\x10\x03\x12\x1e\n" +
	"\x1aTITLE_TYPE_FIRSTLINEOFTEXT\x10\x04\x12\x1a\n" +
	"\x16TITLE_TYPE_FORMALTITLE\x10\x05\x12\x1c\n" +
	"\x18TITLE_TYPE_GROUPINGTITLE\x10\x06\x12\x1d\n" +
	"\x19TITLE_TYPE_INCORRECTTITLE\x10\a\x12\x1e\n" +
	"\x1aTITLE_TYPE_MISSPELLEDTITLE\x10\b\x12\x1c\n" +
	"\x18TITLE_TYPE_ORIGINALTITLE\x10\t\x12\x1a\n" +
	"\x16TITLE_TYPE_SEARCHTITLE\x10\n" +
	"\x12\x1b\n" +
	"\x17TITLE_TYPE_SORTINGTITLE\x10\v\x12\x1a\n" +
	"\x16TITLE_TYPE_TITLEASPART\x10\f\x12&\n" +
	"\"TITLE_TYPE_TITLEWITHOUTPUNCTUATION\x10\r\x12\x1e\n" +
	"\x1aTITLE_TYPE_TRANSLATEDTITLE\x10\x0e\x12\x16\n" +
	"\x12TITLE_TYPE_UNKNOWN\x10\x0f\x12\x1a\n" +
	"\x16TITLE_TYPE_USERDEFINED\x10\x10\x12\x1f\n" +
	"\x1bTITLE_TYPE_MUSICALWORKTITLE\x10\x11*\x9c\x01\n" +
	"\rUnitOfBitRate\x12 \n" +
	"\x1cUNIT_OF_BIT_RATE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14UNIT_OF_BIT_RATE_BPS\x10\x01\x12\x19\n" +
	"\x15UNIT_OF_BIT_RATE_GBPS\x10\x02\x12\x19\n" +
	"\x15UNIT_OF_BIT_RATE_KBPS\x10\x03\x12\x19\n" +
	"\x15UNIT_OF_BIT_RATE_MBPS\x10\x04*\xf8\x01\n" +
	"\x14UnitOfConditionValue\x12'\n" +
	"#UNIT_OF_CONDITION_VALUE_UNSPECIFIED\x10\x00\x12'\n" +
	"#UNIT_OF_CONDITION_VALUE_MILLISECOND\x10\x01\x12\"\n" +
	"\x1eUNIT_OF_CONDITION_VALUE_MINUTE\x10\x02\x12#\n" +
	"\x1fUNIT_OF_CONDITION_VALUE_PERCENT\x10\x03\x12!\n" +
	"\x1dUNIT_OF_CONDITION_VALUE_PIXEL\x10\x04\x12\"\n" +
	"\x1eUNIT_OF_CONDITION_VALUE_SECOND\x10\x05*\xb3\x01\n" +
	"\fUnitOfExtent\x12\x1e\n" +
	"\x1aUNIT_OF_EXTENT_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11UNIT_OF_EXTENT_CM\x10\x01\x12\x17\n" +
	"\x13UNIT_OF_EXTENT_INCH\x10\x02\x12\x15\n" +
	"\x11UNIT_OF_EXTENT_MM\x10\x03\x12\"\n" +
	"\x1eUNIT_OF_EXTENT_PERCENTOFSCREEN\x10\x04\x12\x18\n" +
	"\x14UNIT_OF_EXTENT_PIXEL\x10\x05*\x85\x01\n" +
	"\x0fUnitOfFrameRate\x12\"\n" +
	"\x1eUNIT_OF_FRAME_RATE_UNSPECIFIED\x10\x00\x12$\n" +
	" UNIT_OF_FRAME_RATE_HZ_INTERLACED\x10\x01\x12(\n" +
	"$UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED\x10\x02*\x9f\x01\n" +
	"\x0fUnitOfFrequency\x12!\n" +
	"\x1dUNIT_OF_FREQUENCY_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15UNIT_OF_FREQUENCY_GHZ\x10\x01\x12\x18\n" +
	"\x14UNIT_OF_FREQUENCY_HZ\x10\x02\x12\x19\n" +
	"\x15UNIT_OF_FREQUENCY_KHZ\x10\x03\x12\x19\n" +
	"\x15UNIT_OF_FREQUENCY_MHZ\x10\x04*}\n" +
	"\x0fUpdateIndicator\x12 \n" +
	"\x1cUPDATE_INDICATOR_UNSPECIFIED\x10\x00\x12$\n" +
	" UPDATE_INDICATOR_ORIGINALMESSAGE\x10\x01\x12\"\n" +
	"\x1eUPDATE_INDICATOR_UPDATEMESSAGE\x10\x02*\xa6\r\n" +
	"\aUseType\x12\x18\n" +
	"\x14USE_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16USE_TYPE_ASPERCONTRACT\x10\x01\x12\x16\n" +
	"\x12USE_TYPE_BROADCAST\x10\x02\x12 \n" +
	"\x1cUSE_TYPE_CONDITIONALDOWNLOAD\x10\x03\x12$\n" +
	" USE_TYPE_CONTENTINFLUENCEDSTREAM\x10\x04\x12\x14\n" +
	"\x10USE_TYPE_DISPLAY\x10\x05\x12\x15\n" +
	"\x11USE_TYPE_DOWNLOAD\x10\x06\x12 \n" +
	"\x1cUSE_TYPE_DUBFORADVERTISEMENT\x10\a\x12\"\n" +
	"\x1eUSE_TYPE_DUBFORLIVEPERFORMANCE\x10\b\x12\x19\n" +
	"\x15USE_TYPE_DUBFORMOVIES\x10\t\x12\x1e\n" +
	"\x1aUSE_TYPE_DUBFORMUSICONHOLD\x10\n" +
	"\x12$\n" +
	" USE_TYPE_DUBFORPUBLICPERFORMANCE\x10\v\x12\x18\n" +
	"\x14USE_TYPE_DUBFORRADIO\x10\f\x12\x15\n" +
	"\x11USE_TYPE_DUBFORTV\x10\r\x12\x1f\n" +
	"\x1bUSE_TYPE_EXTRACTFORINTERNET\x10\x0e\x12\x1a\n" +
	"\x16USE_TYPE_KIOSKDOWNLOAD\x10\x0f\x12\x17\n" +
	"\x13USE_TYPE_NARROWCAST\x10\x10\x12!\n" +
	"\x1dUSE_TYPE_NONINTERACTIVESTREAM\x10\x11\x12\x1b\n" +
	"\x17USE_TYPE_ONDEMANDSTREAM\x10\x12\x12!\n" +
	"\x1dUSE_TYPE_PERFORMASMUSICONHOLD\x10\x13\x12%\n" +
	"!USE_TYPE_PERFORMINLIVEPERFORMANCE\x10\x14\x12\x1c\n" +
	"\x18USE_TYPE_PERFORMINPUBLIC\x10\x15\x12\x1e\n" +
	"\x1aUSE_TYPE_PERMANENTDOWNLOAD\x10\x16\x12\x15\n" +
	"\x11USE_TYPE_PLAYBACK\x10\x17\x12\x19\n" +
	"\x15USE_TYPE_PLAYINPUBLIC\x10\x18\x12\x14\n" +
	"\x10USE_TYPE_PODCAST\x10\x19\x12\x12\n" +
	"\x0eUSE_TYPE_PRINT\x10\x1a\x12\x18\n" +
	"\x14USE_TYPE_PRIVATECOPY\x10\x1b\x12&\n" +
	"\"USE_TYPE_PURCHASEASPHYSICALPRODUCT\x10\x1c\x12\x11\n" +
	"\rUSE_TYPE_RENT\x10\x1d\x12\x16\n" +
	"\x12USE_TYPE_SIMULCAST\x10\x1e\x12\x13\n" +
	"\x0fUSE_TYPE_STREAM\x10\x1f\x12\x1d\n" +
	"\x19USE_TYPE_TETHEREDDOWNLOAD\x10 \x12!\n" +
	"\x1dUSE_TYPE_TIMEINFLUENCEDSTREAM\x10!\x12\x14\n" +
	"\x10USE_TYPE_UNKNOWN\x10\"\x12\x1b\n" +
	"\x17USE_TYPE_USEASALERTTONE\x10#\x12\x18\n" +
	"\x14USE_TYPE_USEASDEVICE\x10$\x12\x19\n" +
	"\x15USE_TYPE_USEASKARAOKE\x10%\x12\x1e\n" +
	"\x1aUSE_TYPE_USEASRINGBACKTONE\x10&\x12\x1e\n" +
	"\x1aUSE_TYPE_USEASRINGBACKTUNE\x10'\x12\x1a\n" +
	"\x16USE_TYPE_USEASRINGTONE\x10(\x12\x1a\n" +
	"\x16USE_TYPE_USEASRINGTUNE\x10)\x12\x1d\n" +
	"\x19USE_TYPE_USEASSCREENSAVER\x10*\x12\x1b\n" +
	"\x17USE_TYPE_USEASVOICEMAIL\x10+\x12\x1b\n" +
	"\x17USE_TYPE_USEASWALLPAPER\x10,\x12!\n" +
	"\x1dUSE_TYPE_USEFORIDENTIFICATION\x10-\x12&\n" +
	"\"USE_TYPE_USEINMOBILEPHONEMESSAGING\x10.\x12 \n" +
	"\x1cUSE_TYPE_USEINPHONELISTENING\x10/\x12\x18\n" +
	"\x14USE_TYPE_USERDEFINED\x100\x12+\n" +
	"'USE_TYPE_USERMAKEAVAILABLELABELPROVIDED\x101\x12*\n" +
	"&USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED\x102\x12\x14\n" +
	"\x10USE_TYPE_WEBCAST\x103\x12\x12\n" +
	"\x0eUSE_TYPE_CABLE\x104\x12\x10\n" +
	"\fUSE_TYPE_DUB\x105\x12$\n" +
	" USE_TYPE_DUBFORONDEMANDSTREAMING\x106\x12\x14\n" +
	"\x10USE_TYPE_PERFORM\x107\x12\x10\n" +
	"\fUSE_TYPE_USE\x108\x12\x1f\n" +
	"\x1bUSE_TYPE_USEFORGENERATIVEAI\x109*\xdc\x04\n" +
	"\x11UserInterfaceType\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!USER_INTERFACE_TYPE_ASPERCONTRACT\x10\x01\x12'\n" +
	"#USER_INTERFACE_TYPE_CONNECTEDDEVICE\x10\x02\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_GAMECONSOLE\x10\x03\x12\x1f\n" +
	"\x1bUSER_INTERFACE_TYPE_JUKEBOX\x10\x04\x12&\n" +
	"\"USER_INTERFACE_TYPE_KARAOKEMACHINE\x10\x05\x12\x1d\n" +
	"\x19USER_INTERFACE_TYPE_KIOSK\x10\x06\x12+\n" +
	"'USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX\x10\a\x12(\n" +
	"$USER_INTERFACE_TYPE_PERSONALCOMPUTER\x10\b\x12+\n" +
	"'USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER\x10\t\x12&\n" +
	"\"USER_INTERFACE_TYPE_PORTABLEDEVICE\x10\n" +
	"\x12,\n" +
	"(USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX\x10\v\x12\x1f\n" +
	"\x1bUSER_INTERFACE_TYPE_UNKNOWN\x10\f\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_USERDEFINED\x10\r\x12%\n" +
	"!USER_INTERFACE_TYPE_SMARTSPEAKERS\x10\x0e*r\n" +
	"\tValueType\x12\x1a\n" +
	"\x16VALUE_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15VALUE_TYPE_CALCULATED\x10\x01\x12\x16\n" +
	"\x12VALUE_TYPE_MAXIMUM\x10\x02\x12\x16\n" +
	"\x12VALUE_TYPE_MINIMUM\x10\x03*\x95\x03\n" +
	"\x0eVideoCodecType\x12 \n" +
	"\x1cVIDEO_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14VIDEO_CODEC_TYPE_AVC\x10\x01\x12\x1a\n" +
	"\x16VIDEO_CODEC_TYPE_H_261\x10\x02\x12\x1a\n" +
	"\x16VIDEO_CODEC_TYPE_H_263\x10\x03\x12\x1b\n" +
	"\x17VIDEO_CODEC_TYPE_MPEG_1\x10\x04\x12\x1b\n" +
	"\x17VIDEO_CODEC_TYPE_MPEG_2\x10\x05\x12\x1b\n" +
	"\x17VIDEO_CODEC_TYPE_MPEG_4\x10\x06\x12\x1e\n" +
	"\x1aVIDEO_CODEC_TYPE_QUICKTIME\x10\a\x12\x1e\n" +
	"\x1aVIDEO_CODEC_TYPE_REALVIDEO\x10\b\x12\x1e\n" +
	"\x1aVIDEO_CODEC_TYPE_SHOCKWAVE\x10\t\x12\x1c\n" +
	"\x18VIDEO_CODEC_TYPE_UNKNOWN\x10\n" +
	"\x12 \n" +
	"\x1cVIDEO_CODEC_TYPE_USERDEFINED\x10\v\x12\x18\n" +
	"\x14VIDEO_CODEC_TYPE_WMV\x10\f*\xaa\x01\n" +
	"\x10VideoContentType\x12\"\n" +
	"\x1eVIDEO_CONTENT_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dVIDEO_CONTENT_TYPE_ACTEDVIDEO\x10\x01\x12 \n" +
	"\x1cVIDEO_CONTENT_TYPE_ANIMATION\x10\x02\x12-\n" +
	")VIDEO_CONTENT_TYPE_ANIMATIONANDACTEDVIDEO\x10\x03*\xbb\x01\n" +
	"\x13VideoDefinitionType\x12%\n" +
	"!VIDEO_DEFINITION_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$VIDEO_DEFINITION_TYPE_HIGHDEFINITION\x10\x01\x12,\n" +
	"(VIDEO_DEFINITION_TYPE_STANDARDDEFINITION\x10\x02\x12%\n" +
	"!VIDEO_DEFINITION_TYPE_USERDEFINED\x10\x03*\xed\x10\n" +
	"\tVideoType\x12\x1a\n" +
	"\x16VIDEO_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dVIDEO_TYPE_ADVERTISEMENTVIDEO\x10\x01\x12\x18\n" +
	"\x14VIDEO_TYPE_ANIMATION\x10\x02\x12\x1e\n" +
	"\x1aVIDEO_TYPE_BEHINDTHESCENES\x10\x03\x12\x1a\n" +
	"\x16VIDEO_TYPE_CONCERTCLIP\x10\x04\x12\x1b\n" +
	"\x17VIDEO_TYPE_CONCERTVIDEO\x10\x05\x12\x1c\n" +
	"\x18VIDEO_TYPE_CORPORATEFILM\x10\x06\x12\x16\n" +
	"\x12VIDEO_TYPE_CREDITS\x10\a\x12\x1a\n" +
	"\x16VIDEO_TYPE_DOCUMENTARY\x10\b\x12\x1f\n" +
	"\x1bVIDEO_TYPE_EDUCATIONALVIDEO\x10\t\x12\x16\n" +
	"\x12VIDEO_TYPE_EPISODE\x10\n" +
	"\x12\x1a\n" +
	"\x16VIDEO_TYPE_FEATUREFILM\x10\v\x12\x1f\n" +
	"\x1bVIDEO_TYPE_INFOMERCIALVIDEO\x10\f\x12\x18\n" +
	"\x14VIDEO_TYPE_INTERVIEW\x10\r\x12\x16\n" +
	"\x12VIDEO_TYPE_KARAOKE\x10\x0e\x12\x1d\n" +
	"\x19VIDEO_TYPE_LIVEEVENTVIDEO\x10\x0f\x12'\n" +
	"#VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO\x10\x10\x12*\n" +
	"&VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO\x10\x11\x12\x19\n" +
	"\x15VIDEO_TYPE_LYRICVIDEO\x10\x12\x12\x13\n" +
	"\x0fVIDEO_TYPE_MENU\x10\x13\x12\x1e\n" +
	"\x1aVIDEO_TYPE_MULTIMEDIAVIDEO\x10\x14\x12\x1e\n" +
	"\x1aVIDEO_TYPE_MUSICALWORKCLIP\x10\x15\x12(\n" +
	"$VIDEO_TYPE_MUSICALWORKREADALONGVIDEO\x10\x16\x12!\n" +
	"\x1dVIDEO_TYPE_MUSICALWORKTRAILER\x10\x17\x12&\n" +
	"\"VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER\x10\x18\x12\x13\n" +
	"\x0fVIDEO_TYPE_NEWS\x10\x19\x12!\n" +
	"\x1dVIDEO_TYPE_NONMUSICALWORKCLIP\x10\x1a\x12+\n" +
	"'VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO\x10\x1b\x12$\n" +
	" VIDEO_TYPE_NONMUSICALWORKTRAILER\x10\x1c\x12)\n" +
	"%VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER\x10\x1d\x12,\n" +
	"(VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING\x10\x1e\x12\x19\n" +
	"\x15VIDEO_TYPE_OPERAVIDEO\x10\x1f\x12\x1a\n" +
	"\x16VIDEO_TYPE_PERFORMANCE\x10 \x12\x15\n" +
	"\x11VIDEO_TYPE_SEASON\x10!\x12\x15\n" +
	"\x11VIDEO_TYPE_SERIES\x10\"\x12\x18\n" +
	"\x14VIDEO_TYPE_SHORTFILM\x10#\x12(\n" +
	"$VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO\x10$\x12+\n" +
	"'VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO\x10%\x12\x1b\n" +
	"\x17VIDEO_TYPE_SPECIALEVENT\x10&\x12\x14\n" +
	"\x10VIDEO_TYPE_SPORT\x10'\x12\"\n" +
	"\x1eVIDEO_TYPE_THEATRICALWORKVIDEO\x10(\x12\x1b\n" +
	"\x17VIDEO_TYPE_TRAILERVIDEO\x10)\x12\x15\n" +
	"\x11VIDEO_TYPE_TVFILM\x10*\x12\x1a\n" +
	"\x16VIDEO_TYPE_TVSHOWVIDEO\x10+\x12\x16\n" +
	"\x12VIDEO_TYPE_UNKNOWN\x10,\x12\x1a\n" +
	"\x16VIDEO_TYPE_USERDEFINED\x10-\x12\x1b\n" +
	"\x17VIDEO_TYPE_VIDEOCHAPTER\x10.\x12\x18\n" +
	"\x14VIDEO_TYPE_VIDEOSTEM\x10/\x12\x1b\n" +
	"\x17VIDEO_TYPE_ADULTCONTENT\x100\x12\x1d\n" +
	"\x19VIDEO_TYPE_ADVICEMAGAZINE\x101\x12\x1a\n" +
	"\x16VIDEO_TYPE_BALLETVIDEO\x102\x12!\n" +
	"\x1dVIDEO_TYPE_BLACKANDWHITEVIDEO\x103\x12\x1c\n" +
	"\x18VIDEO_TYPE_CHILDRENSFILM\x104\x12\x1d\n" +
	"\x19VIDEO_TYPE_COLORIZEDVIDEO\x105\x12\x1a\n" +
	"\x16VIDEO_TYPE_COLUMNVIDEO\x106\x12\x16\n" +
	"\x12VIDEO_TYPE_FICTION\x107\x12\x17\n" +
	"\x13VIDEO_TYPE_MAGAZINE\x108\x12\x1d\n" +
	"\x19VIDEO_TYPE_READALONGVIDEO\x109\x12!\n" +
	"\x1dVIDEO_TYPE_REALITYTVSHOWVIDEO\x10:\x12)\n" +
	"%VIDEO_TYPE_SERIALAUDIOVISUALRECORDING\x10;\x12\x1a\n" +
	"\x16VIDEO_TYPE_SILENTVIDEO\x10<\x12\x1a\n" +
	"\x16VIDEO_TYPE_SKETCHVIDEO\x10=\x12\x19\n" +
	"\x15VIDEO_TYPE_SOAPSITCOM\x10>\x12\x18\n" +
	"\x14VIDEO_TYPE_TVPROGRAM\x10?\x12\x18\n" +
	"\x14VIDEO_TYPE_VIDEOCLIP\x10@\x12\x1a\n" +
	"\x16VIDEO_TYPE_VIDEOREPORT\x10A\x12\x14\n" +
	"\x10VIDEO_TYPE_DRAMA\x10B\x12$\n" +
	" VIDEO_TYPE_DRAMATICOMUSICALVIDEO\x10C\x12\"\n" +
	"\x1eVIDEO_TYPE_INTERACTIVERESOURCE\x10D\x12\x1a\n" +
	"\x16VIDEO_TYPE_WEBRESOURCE\x10E*\xb0\x01\n" +
	"\x14VisualPerceptionType\x12&\n" +
	"\"VISUAL_PERCEPTION_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!VISUAL_PERCEPTION_TYPE_BACKGROUND\x10\x01\x12&\n" +
	"\"VISUAL_PERCEPTION_TYPE_USERDEFINED\x10\x02\x12!\n" +
	"\x1dVISUAL_PERCEPTION_TYPE_VISUAL\x10\x03*v\n" +
	"\tVocalType\x12\x1a\n" +
	"\x16VOCAL_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17VOCAL_TYPE_INSTRUMENTAL\x10\x01\x12\x1a\n" +
	"\x16VOCAL_TYPE_USERDEFINED\x10\x02\x12\x14\n" +
	"\x10VOCAL_TYPE_VOCAL\x10\x03*\xf3\x01\n" +
	"\x0fWsMessageStatus\x12!\n" +
	"\x1dWS_MESSAGE_STATUS_UNSPECIFIED\x10\x00\x12,\n" +
	"(WS_MESSAGE_STATUS_BACKENDPROCESSINGERROR\x10\x01\x12,\n" +
	"(WS_MESSAGE_STATUS_NOVALIDMESSAGERECEIVED\x10\x02\x125\n" +
	"1WS_MESSAGE_STATUS_VALIDMESSAGEQUEUEDFORPROCESSING\x10\x03\x12*\n" +
	"&WS_MESSAGE_STATUS_VALIDMESSAGERECEIVED\x10\x04*\x89/\n" +
	"\rTerritoryCode\x12\x1e\n" +
	"\x1aTERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TERRITORY_CODE_AD\x10\x01\x12\x15\n" +
	"\x11TERRITORY_CODE_AE\x10\x02\x12\x15\n" +
	"\x11TERRITORY_CODE_AF\x10\x03\x12\x15\n" +
	"\x11TERRITORY_CODE_AG\x10\x04\x12\x15\n" +
	"\x11TERRITORY_CODE_AI\x10\x05\x12\x15\n" +
	"\x11TERRITORY_CODE_AL\x10\x06\x12\x15\n" +
	"\x11TERRITORY_CODE_AM\x10\a\x12\x15\n" +
	"\x11TERRITORY_CODE_AN\x10\b\x12\x15\n" +
	"\x11TERRITORY_CODE_AO\x10\t\x12\x15\n" +
	"\x11TERRITORY_CODE_AQ\x10\n" +
	"\x12\x15\n" +
	"\x11TERRITORY_CODE_AR\x10\v\x12\x15\n" +
	"\x11TERRITORY_CODE_AS\x10\f\x12\x15\n" +
	"\x11TERRITORY_CODE_AT\x10\r\x12\x15\n" +
	"\x11TERRITORY_CODE_AU\x10\x0e\x12\x15\n" +
	"\x11TERRITORY_CODE_AW\x10\x0f\x12\x15\n" +
	"\x11TERRITORY_CODE_AX\x10\x10\x12\x15\n" +
	"\x11TERRITORY_CODE_AZ\x10\x11\x12\x15\n" +
	"\x11TERRITORY_CODE_BA\x10\x12\x12\x15\n" +
	"\x11TERRITORY_CODE_BB\x10\x13\x12\x15\n" +
	"\x11TERRITORY_CODE_BD\x10\x14\x12\x15\n" +
	"\x11TERRITORY_CODE_BE\x10\x15\x12\x15\n" +
	"\x11TERRITORY_CODE_BF\x10\x16\x12\x15\n" +
	"\x11TERRITORY_CODE_BG\x10\x17\x12\x15\n" +
	"\x11TERRITORY_CODE_BH\x10\x18\x12\x15\n" +
	"\x11TERRITORY_CODE_BI\x10\x19\x12\x15\n" +
	"\x11TERRITORY_CODE_BJ\x10\x1a\x12\x15\n" +
	"\x11TERRITORY_CODE_BL\x10\x1b\x12\x15\n" +
	"\x11TERRITORY_CODE_BM\x10\x1c\x12\x15\n" +
	"\x11TERRITORY_CODE_BN\x10\x1d\x12\x15\n" +
	"\x11TERRITORY_CODE_BO\x10\x1e\x12\x15\n" +
	"\x11TERRITORY_CODE_BQ\x10\x1f\x12\x15\n" +
	"\x11TERRITORY_CODE_BR\x10 \x12\x15\n" +
	"\x11TERRITORY_CODE_BS\x10!\x12\x15\n" +
	"\x11TERRITORY_CODE_BT\x10\"\x12\x15\n" +
	"\x11TERRITORY_CODE_BV\x10#\x12\x15\n" +
	"\x11TERRITORY_CODE_BW\x10$\x12\x15\n" +
	"\x11TERRITORY_CODE_BY\x10%\x12\x15\n" +
	"\x11TERRITORY_CODE_BZ\x10&\x12\x15\n" +
	"\x11TERRITORY_CODE_CA\x10'\x12\x15\n" +
	"\x11TERRITORY_CODE_CC\x10(\x12\x15\n" +
	"\x11TERRITORY_CODE_CD\x10)\x12\x15\n" +
	"\x11TERRITORY_CODE_CF\x10*\x12\x15\n" +
	"\x11TERRITORY_CODE_CG\x10+\x12\x15\n" +
	"\x11TERRITORY_CODE_CH\x10,\x12\x15\n" +
	"\x11TERRITORY_CODE_CI\x10-\x12\x15\n" +
	"\x11TERRITORY_CODE_CK\x10.\x12\x15\n" +
	"\x11TERRITORY_CODE_CL\x10/\x12\x15\n" +
	"\x11TERRITORY_CODE_CM\x100\x12\x15\n" +
	"\x11TERRITORY_CODE_CN\x101\x12\x15\n" +
	"\x11TERRITORY_CODE_CO\x102\x12\x15\n" +
	"\x11TERRITORY_CODE_CR\x103\x12\x15\n" +
	"\x11TERRITORY_CODE_CS\x104\x12\x15\n" +
	"\x11TERRITORY_CODE_CU\x105\x12\x15\n" +
	"\x11TERRITORY_CODE_CV\x106\x12\x15\n" +
	"\x11TERRITORY_CODE_CW\x107\x12\x15\n" +
	"\x11TERRITORY_CODE_CX\x108\x12\x15\n" +
	"\x11TERRITORY_CODE_CY\x109\x12\x15\n" +
	"\x11TERRITORY_CODE_CZ\x10:\x12\x15\n" +
	"\x11TERRITORY_CODE_DE\x10;\x12\x15\n" +
	"\x11TERRITORY_CODE_DJ\x10<\x12\x15\n" +
	"\x11TERRITORY_CODE_DK\x10=\x12\x15\n" +
	"\x11TERRITORY_CODE_DM\x10>\x12\x15\n" +
	"\x11TERRITORY_CODE_DO\x10?\x12\x15\n" +
	"\x11TERRITORY_CODE_DZ\x10@\x12\x15\n" +
	"\x11TERRITORY_CODE_EC\x10A\x12\x15\n" +
	"\x11TERRITORY_CODE_EE\x10B\x12\x15\n" +
	"\x11TERRITORY_CODE_EG\x10C\x12\x15\n" +
	"\x11TERRITORY_CODE_EH\x10D\x12\x15\n" +
	"\x11TERRITORY_CODE_ER\x10E\x12\x15\n" +
	"\x11TERRITORY_CODE_ES\x10F\x12\x18\n" +
	"\x14TERRITORY_CODE_ES_CE\x10G\x12\x18\n" +
	"\x14TERRITORY_CODE_ES_CN\x10H\x12\x18\n" +
	"\x14TERRITORY_CODE_ES_ML\x10I\x12\x15\n" +
	"\x11TERRITORY_CODE_ET\x10J\x12\x15\n" +
	"\x11TERRITORY_CODE_FI\x10K\x12\x15\n" +
	"\x11TERRITORY_CODE_FJ\x10L\x12\x15\n" +
	"\x11TERRITORY_CODE_FK\x10M\x12\x15\n" +
	"\x11TERRITORY_CODE_FM\x10N\x12\x15\n" +
	"\x11TERRITORY_CODE_FO\x10O\x12\x15\n" +
	"\x11TERRITORY_CODE_FR\x10P\x12\x15\n" +
	"\x11TERRITORY_CODE_GA\x10Q\x12\x15\n" +
	"\x11TERRITORY_CODE_GB\x10R\x12\x15\n" +
	"\x11TERRITORY_CODE_GD\x10S\x12\x15\n" +
	"\x11TERRITORY_CODE_GE\x10T\x12\x15\n" +
	"\x11TERRITORY_CODE_GF\x10U\x12\x15\n" +
	"\x11TERRITORY_CODE_GG\x10V\x12\x15\n" +
	"\x11TERRITORY_CODE_GH\x10W\x12\x15\n" +
	"\x11TERRITORY_CODE_GI\x10X\x12\x15\n" +
	"\x11TERRITORY_CODE_GL\x10Y\x12\x15\n" +
	"\x11TERRITORY_CODE_GM\x10Z\x12\x15\n" +
	"\x11TERRITORY_CODE_GN\x10[\x12\x15\n" +
	"\x11TERRITORY_CODE_GP\x10\\\x12\x15\n" +
	"\x11TERRITORY_CODE_GQ\x10]\x12\x15\n" +
	"\x11TERRITORY_CODE_GR\x10^\x12\x15\n" +
	"\x11TERRITORY_CODE_GS\x10_\x12\x15\n" +
	"\x11TERRITORY_CODE_GT\x10`\x12\x15\n" +
	"\x11TERRITORY_CODE_GU\x10a\x12\x15\n" +
	"\x11TERRITORY_CODE_GW\x10b\x12\x15\n" +
	"\x11TERRITORY_CODE_GY\x10c\x12\x15\n" +
	"\x11TERRITORY_CODE_HK\x10d\x12\x15\n" +
	"\x11TERRITORY_CODE_HM\x10e\x12\x15\n" +
	"\x11TERRITORY_CODE_HN\x10f\x12\x15\n" +
	"\x11TERRITORY_CODE_HR\x10g\x12\x15\n" +
	"\x11TERRITORY_CODE_HT\x10h\x12\x15\n" +
	"\x11TERRITORY_CODE_HU\x10i\x12\x15\n" +
	"\x11TERRITORY_CODE_ID\x10j\x12\x15\n" +
	"\x11TERRITORY_CODE_IE\x10k\x12\x15\n" +
	"\x11TERRITORY_CODE_IL\x10l\x12\x15\n" +
	"\x11TERRITORY_CODE_IM\x10m\x12\x15\n" +
	"\x11TERRITORY_CODE_IN\x10n\x12\x15\n" +
	"\x11TERRITORY_CODE_IO\x10o\x12\x15\n" +
	"\x11TERRITORY_CODE_IQ\x10p\x12\x15\n" +
	"\x11TERRITORY_CODE_IR\x10q\x12\x15\n" +
	"\x11TERRITORY_CODE_IS\x10r\x12\x15\n" +
	"\x11TERRITORY_CODE_IT\x10s\x12\x15\n" +
	"\x11TERRITORY_CODE_JE\x10t\x12\x15\n" +
	"\x11TERRITORY_CODE_JM\x10u\x12\x15\n" +
	"\x11TERRITORY_CODE_JO\x10v\x12\x15\n" +
	"\x11TERRITORY_CODE_JP\x10w\x12\x15\n" +
	"\x11TERRITORY_CODE_KE\x10x\x12\x15\n" +
	"\x11TERRITORY_CODE_KG\x10y\x12\x15\n" +
	"\x11TERRITORY_CODE_KH\x10z\x12\x15\n" +
	"\x11TERRITORY_CODE_KI\x10{\x12\x15\n" +
	"\x11TERRITORY_CODE_KM\x10|\x12\x15\n" +
	"\x11TERRITORY_CODE_KN\x10}\x12\x15\n" +
	"\x11TERRITORY_CODE_KP\x10~\x12\x15\n" +
	"\x11TERRITORY_CODE_KR\x10\x7f\x12\x16\n" +
	"\x11TERRITORY_CODE_KW\x10\x80\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_KY\x10\x81\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_KZ\x10\x82\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LA\x10\x83\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LB\x10\x84\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LC\x10\x85\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LI\x10\x86\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LK\x10\x87\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LR\x10\x88\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LS\x10\x89\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LT\x10\x8a\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LU\x10\x8b\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LV\x10\x8c\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LY\x10\x8d\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MA\x10\x8e\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MC\x10\x8f\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MD\x10\x90\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ME\x10\x91\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MF\x10\x92\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MG\x10\x93\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MH\x10\x94\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MK\x10\x95\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ML\x10\x96\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MM\x10\x97\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MN\x10\x98\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MO\x10\x99\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MP\x10\x9a\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MQ\x10\x9b\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MR\x10\x9c\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MS\x10\x9d\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MT\x10\x9e\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MU\x10\x9f\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MV\x10\xa0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MW\x10\xa1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MX\x10\xa2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MY\x10\xa3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MZ\x10\xa4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NA\x10\xa5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NC\x10\xa6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NE\x10\xa7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NF\x10\xa8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NG\x10\xa9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NI\x10\xaa\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NL\x10\xab\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NO\x10\xac\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NP\x10\xad\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NR\x10\xae\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NU\x10\xaf\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NZ\x10\xb0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_OM\x10\xb1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PA\x10\xb2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PE\x10\xb3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PF\x10\xb4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PG\x10\xb5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PH\x10\xb6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PK\x10\xb7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PL\x10\xb8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PM\x10\xb9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PN\x10\xba\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PR\x10\xbb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PS\x10\xbc\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PT\x10\xbd\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PW\x10\xbe\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PY\x10\xbf\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_QA\x10\xc0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RE\x10\xc1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RO\x10\xc2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RS\x10\xc3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RU\x10\xc4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RW\x10\xc5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SA\x10\xc6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SB\x10\xc7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SC\x10\xc8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SD\x10\xc9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SE\x10\xca\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SG\x10\xcb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SH\x10\xcc\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SI\x10\xcd\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SJ\x10\xce\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SK\x10\xcf\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SL\x10\xd0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SM\x10\xd1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SN\x10\xd2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SO\x10\xd3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SR\x10\xd4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SS\x10\xd5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ST\x10\xd6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SV\x10\xd7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SX\x10\xd8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SY\x10\xd9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SZ\x10\xda\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TC\x10\xdb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TD\x10\xdc\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TF\x10\xdd\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TG\x10\xde\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TH\x10\xdf\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TJ\x10\xe0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TK\x10\xe1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TL\x10\xe2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TM\x10\xe3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TN\x10\xe4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TO\x10\xe5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TR\x10\xe6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TT\x10\xe7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TV\x10\xe8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TW\x10\xe9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TZ\x10\xea\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UA\x10\xeb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UG\x10\xec\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UM\x10\xed\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_US\x10\xee\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UY\x10\xef\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UZ\x10\xf0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VA\x10\xf1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VC\x10\xf2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VE\x10\xf3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VG\x10\xf4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VI\x10\xf5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VN\x10\xf6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VU\x10\xf7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_WF\x10\xf8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_WS\x10\xf9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_YE\x10\xfa\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_YT\x10\xfb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ZA\x10\xfc\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ZM\x10\xfd\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ZW\x10\xfe\x01*\x8a\x01\n" +
	"\x11ReferenceCreation\x12\"\n" +
	"\x1eREFERENCE_CREATION_UNSPECIFIED\x10\x00\x12(\n" +
	"$REFERENCE_CREATION_REFERENCERESOURCE\x10\x01\x12'\n" +
	"#REFERENCE_CREATION_CONSUMERRESOURCE\x10\x02B\xd7\x01\n" +
	"\x16com.ddex.avs.v20200108B\x0eV20200108ProtoP\x01ZCgithub.com/OpenAudio/ddex-proto/gen/ddex/avs/v20200108;avsv20200108\xa2\x02\x03DAX\xaa\x02\x12Ddex.Avs.V20200108\xca\x02\x12Ddex\\Avs\\V20200108\xe2\x02\x1eDdex\\Avs\\V20200108\\GPBMetadata\xea\x02\x14Ddex::Avs::V20200108b\x06proto3"

var (
	file_ddex_avs_v20200108_v20200108_proto_rawDescOnce sync.Once
	file_ddex_avs_v20200108_v20200108_proto_rawDescData []byte
)

func file_ddex_avs_v20200108_v20200108_proto_rawDescGZIP() []byte {
	file_ddex_avs_v20200108_v20200108_proto_rawDescOnce.Do(func() {
		file_ddex_avs_v20200108_v20200108_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ddex_avs_v20200108_v20200108_proto_rawDesc), len(file_ddex_avs_v20200108_v20200108_proto_rawDesc)))
	})
	return file_ddex_avs_v20200108_v20200108_proto_rawDescData
}

var file_ddex_avs_v20200108_v20200108_proto_enumTypes = make([]protoimpl.EnumInfo, 145)
var file_ddex_avs_v20200108_v20200108_proto_goTypes = []any{
	(AccessLimitation)(0),                          // 0: ddex.avs.v20200108.AccessLimitation
	(AdministratingRecordCompanyRole)(0),           // 1: ddex.avs.v20200108.AdministratingRecordCompanyRole
	(AllTerritoryCode)(0),                          // 2: ddex.avs.v20200108.AllTerritoryCode
	(ArtistRole)(0),                                // 3: ddex.avs.v20200108.ArtistRole
	(AudioCodecType)(0),                            // 4: ddex.avs.v20200108.AudioCodecType
	(BinaryDataType)(0),                            // 5: ddex.avs.v20200108.BinaryDataType
	(BusinessContributorRole)(0),                   // 6: ddex.avs.v20200108.BusinessContributorRole
	(CarrierType)(0),                               // 7: ddex.avs.v20200108.CarrierType
	(CdProtectionType)(0),                          // 8: ddex.avs.v20200108.CdProtectionType
	(CharacterType)(0),                             // 9: ddex.avs.v20200108.CharacterType
	(CodingType)(0),                                // 10: ddex.avs.v20200108.CodingType
	(CollectionType)(0),                            // 11: ddex.avs.v20200108.CollectionType
	(CommercialModelType)(0),                       // 12: ddex.avs.v20200108.CommercialModelType
	(CompilationType)(0),                           // 13: ddex.avs.v20200108.CompilationType
	(ContainerFormat)(0),                           // 14: ddex.avs.v20200108.ContainerFormat
	(CreationType)(0),                              // 15: ddex.avs.v20200108.CreationType
	(CreativeContributorRole)(0),                   // 16: ddex.avs.v20200108.CreativeContributorRole
	(CueOrigin)(0),                                 // 17: ddex.avs.v20200108.CueOrigin
	(CueSheetType)(0),                              // 18: ddex.avs.v20200108.CueSheetType
	(CueUseType)(0),                                // 19: ddex.avs.v20200108.CueUseType
	(CurrencyCode)(0),                              // 20: ddex.avs.v20200108.CurrencyCode
	(CurrentTerritoryCode)(0),                      // 21: ddex.avs.v20200108.CurrentTerritoryCode
	(DataMismatchResponseType)(0),                  // 22: ddex.avs.v20200108.DataMismatchResponseType
	(DataMismatchStatus)(0),                        // 23: ddex.avs.v20200108.DataMismatchStatus
	(DataMismatchType)(0),                          // 24: ddex.avs.v20200108.DataMismatchType
	(DdexTerritoryCode)(0),                         // 25: ddex.avs.v20200108.DdexTerritoryCode
	(DeductionRateType)(0),                         // 26: ddex.avs.v20200108.DeductionRateType
	(DeliveryActionType)(0),                        // 27: ddex.avs.v20200108.DeliveryActionType
	(DeliveryMessageType)(0),                       // 28: ddex.avs.v20200108.DeliveryMessageType
	(DeprecatedCurrencyCode)(0),                    // 29: ddex.avs.v20200108.DeprecatedCurrencyCode
	(DeprecatedIsoTerritoryCode)(0),                // 30: ddex.avs.v20200108.DeprecatedIsoTerritoryCode
	(DigitizationMode)(0),                          // 31: ddex.avs.v20200108.DigitizationMode
	(DisputeReason)(0),                             // 32: ddex.avs.v20200108.DisputeReason
	(DistributionChannelType)(0),                   // 33: ddex.avs.v20200108.DistributionChannelType
	(DpidStatus)(0),                                // 34: ddex.avs.v20200108.DpidStatus
	(DrmEnforcementType)(0),                        // 35: ddex.avs.v20200108.DrmEnforcementType
	(DrmPlatformType)(0),                           // 36: ddex.avs.v20200108.DrmPlatformType
	(DsrMessageType)(0),                            // 37: ddex.avs.v20200108.DsrMessageType
	(EquipmentType)(0),                             // 38: ddex.avs.v20200108.EquipmentType
	(ErnMessageType)(0),                            // 39: ddex.avs.v20200108.ErnMessageType
	(ErncFileStatus)(0),                            // 40: ddex.avs.v20200108.ErncFileStatus
	(ErncProposedActionType)(0),                    // 41: ddex.avs.v20200108.ErncProposedActionType
	(ExpressionType)(0),                            // 42: ddex.avs.v20200108.ExpressionType
	(ExternallyLinkedResourceType)(0),              // 43: ddex.avs.v20200108.ExternallyLinkedResourceType
	(FileStatus)(0),                                // 44: ddex.avs.v20200108.FileStatus
	(FingerprintAlgorithmType)(0),                  // 45: ddex.avs.v20200108.FingerprintAlgorithmType
	(GoverningAgreementType)(0),                    // 46: ddex.avs.v20200108.GoverningAgreementType
	(HashSumAlgorithmType)(0),                      // 47: ddex.avs.v20200108.HashSumAlgorithmType
	(ImageCodecType)(0),                            // 48: ddex.avs.v20200108.ImageCodecType
	(ImageType)(0),                                 // 49: ddex.avs.v20200108.ImageType
	(InvoiceAvailabilityStatus)(0),                 // 50: ddex.avs.v20200108.InvoiceAvailabilityStatus
	(IsoCurrencyCode)(0),                           // 51: ddex.avs.v20200108.IsoCurrencyCode
	(IsoLanguageCode)(0),                           // 52: ddex.avs.v20200108.IsoLanguageCode
	(IsoTerritoryCode)(0),                          // 53: ddex.avs.v20200108.IsoTerritoryCode
	(LabelNameType)(0),                             // 54: ddex.avs.v20200108.LabelNameType
	(LicenseOrClaimRefusalReason)(0),               // 55: ddex.avs.v20200108.LicenseOrClaimRefusalReason
	(LicenseOrClaimRequestUpdateReason)(0),         // 56: ddex.avs.v20200108.LicenseOrClaimRequestUpdateReason
	(LicenseOrClaimUpdateReason)(0),                // 57: ddex.avs.v20200108.LicenseOrClaimUpdateReason
	(LicenseRejectionReason)(0),                    // 58: ddex.avs.v20200108.LicenseRejectionReason
	(LicenseStatus)(0),                             // 59: ddex.avs.v20200108.LicenseStatus
	(LicensingProcessStatus)(0),                    // 60: ddex.avs.v20200108.LicensingProcessStatus
	(LodFileStatus)(0),                             // 61: ddex.avs.v20200108.LodFileStatus
	(LodProposedActionType)(0),                     // 62: ddex.avs.v20200108.LodProposedActionType
	(MembershipType)(0),                            // 63: ddex.avs.v20200108.MembershipType
	(MessageActionType)(0),                         // 64: ddex.avs.v20200108.MessageActionType
	(MessageContentRevenueType)(0),                 // 65: ddex.avs.v20200108.MessageContentRevenueType
	(MessageContextType)(0),                        // 66: ddex.avs.v20200108.MessageContextType
	(MessageControlType)(0),                        // 67: ddex.avs.v20200108.MessageControlType
	(MidiType)(0),                                  // 68: ddex.avs.v20200108.MidiType
	(MlcMessageType)(0),                            // 69: ddex.avs.v20200108.MlcMessageType
	(MusicalWorkContributorRole)(0),                // 70: ddex.avs.v20200108.MusicalWorkContributorRole
	(MusicalWorkRightsClaimType)(0),                // 71: ddex.avs.v20200108.MusicalWorkRightsClaimType
	(MusicalWorkType)(0),                           // 72: ddex.avs.v20200108.MusicalWorkType
	(MwlCaCMessageInBatchType)(0),                  // 73: ddex.avs.v20200108.MwlCaCMessageInBatchType
	(MwnMessageType)(0),                            // 74: ddex.avs.v20200108.MwnMessageType
	(NewReleaseMessageStatus)(0),                   // 75: ddex.avs.v20200108.NewReleaseMessageStatus
	(OperatingSystemType)(0),                       // 76: ddex.avs.v20200108.OperatingSystemType
	(OrderType)(0),                                 // 77: ddex.avs.v20200108.OrderType
	(PLineType)(0),                                 // 78: ddex.avs.v20200108.PLineType
	(ParentalWarningType)(0),                       // 79: ddex.avs.v20200108.ParentalWarningType
	(PercentageType)(0),                            // 80: ddex.avs.v20200108.PercentageType
	(PriceInformationType)(0),                      // 81: ddex.avs.v20200108.PriceInformationType
	(Priority)(0),                                  // 82: ddex.avs.v20200108.Priority
	(ProductType)(0),                               // 83: ddex.avs.v20200108.ProductType
	(Purpose)(0),                                   // 84: ddex.avs.v20200108.Purpose
	(RateModificationType)(0),                      // 85: ddex.avs.v20200108.RateModificationType
	(RatingAgency)(0),                              // 86: ddex.avs.v20200108.RatingAgency
	(ReasonType)(0),                                // 87: ddex.avs.v20200108.ReasonType
	(RecipientRevenueType)(0),                      // 88: ddex.avs.v20200108.RecipientRevenueType
	(RecordingMode)(0),                             // 89: ddex.avs.v20200108.RecordingMode
	(RedeliveryReasonType)(0),                      // 90: ddex.avs.v20200108.RedeliveryReasonType
	(ReferenceUnit)(0),                             // 91: ddex.avs.v20200108.ReferenceUnit
	(RelationalRelator)(0),                         // 92: ddex.avs.v20200108.RelationalRelator
	(ReleaseAvailabilityStatus)(0),                 // 93: ddex.avs.v20200108.ReleaseAvailabilityStatus
	(ReleaseRelationshipType)(0),                   // 94: ddex.avs.v20200108.ReleaseRelationshipType
	(ReleaseResourceType)(0),                       // 95: ddex.avs.v20200108.ReleaseResourceType
	(ReleaseType)(0),                               // 96: ddex.avs.v20200108.ReleaseType
	(ReportFormat)(0),                              // 97: ddex.avs.v20200108.ReportFormat
	(ReportType)(0),                                // 98: ddex.avs.v20200108.ReportType
	(RequestReason)(0),                             // 99: ddex.avs.v20200108.RequestReason
	(RequestedActionType)(0),                       // 100: ddex.avs.v20200108.RequestedActionType
	(ResourceContributorRole)(0),                   // 101: ddex.avs.v20200108.ResourceContributorRole
	(ResourceOmissionReason)(0),                    // 102: ddex.avs.v20200108.ResourceOmissionReason
	(ResourceType)(0),                              // 103: ddex.avs.v20200108.ResourceType
	(RevenueSourceType)(0),                         // 104: ddex.avs.v20200108.RevenueSourceType
	(RightShareType)(0),                            // 105: ddex.avs.v20200108.RightShareType
	(RightsClaimPolicyType)(0),                     // 106: ddex.avs.v20200108.RightsClaimPolicyType
	(RightsControllerRole)(0),                      // 107: ddex.avs.v20200108.RightsControllerRole
	(RightsControllerType)(0),                      // 108: ddex.avs.v20200108.RightsControllerType
	(RightsCoverage)(0),                            // 109: ddex.avs.v20200108.RightsCoverage
	(RoyaltyRateCalculationType)(0),                // 110: ddex.avs.v20200108.RoyaltyRateCalculationType
	(RoyaltyRateType)(0),                           // 111: ddex.avs.v20200108.RoyaltyRateType
	(SalesReportAvailabilityStatus)(0),             // 112: ddex.avs.v20200108.SalesReportAvailabilityStatus
	(Sex)(0),                                       // 113: ddex.avs.v20200108.Sex
	(SoftwareType)(0),                              // 114: ddex.avs.v20200108.SoftwareType
	(SoundProcessorType)(0),                        // 115: ddex.avs.v20200108.SoundProcessorType
	(SoundRecordingType)(0),                        // 116: ddex.avs.v20200108.SoundRecordingType
	(SupplyChainStatus)(0),                         // 117: ddex.avs.v20200108.SupplyChainStatus
	(TaxScope)(0),                                  // 118: ddex.avs.v20200108.TaxScope
	(TaxType)(0),                                   // 119: ddex.avs.v20200108.TaxType
	(TerritoryCodeType)(0),                         // 120: ddex.avs.v20200108.TerritoryCodeType
	(TerritoryCodeTypeIncludingDeprecatedCodes)(0), // 121: ddex.avs.v20200108.TerritoryCodeTypeIncludingDeprecatedCodes
	(TextCodecType)(0),                             // 122: ddex.avs.v20200108.TextCodecType
	(TextType)(0),                                  // 123: ddex.avs.v20200108.TextType
	(ThemeType)(0),                                 // 124: ddex.avs.v20200108.ThemeType
	(TisTerritoryCode)(0),                          // 125: ddex.avs.v20200108.TisTerritoryCode
	(TitleType)(0),                                 // 126: ddex.avs.v20200108.TitleType
	(UnitOfBitRate)(0),                             // 127: ddex.avs.v20200108.UnitOfBitRate
	(UnitOfConditionValue)(0),                      // 128: ddex.avs.v20200108.UnitOfConditionValue
	(UnitOfExtent)(0),                              // 129: ddex.avs.v20200108.UnitOfExtent
	(UnitOfFrameRate)(0),                           // 130: ddex.avs.v20200108.UnitOfFrameRate
	(UnitOfFrequency)(0),                           // 131: ddex.avs.v20200108.UnitOfFrequency
	(UpdateIndicator)(0),                           // 132: ddex.avs.v20200108.UpdateIndicator
	(UseType)(0),                                   // 133: ddex.avs.v20200108.UseType
	(UserInterfaceType)(0),                         // 134: ddex.avs.v20200108.UserInterfaceType
	(ValueType)(0),                                 // 135: ddex.avs.v20200108.ValueType
	(VideoCodecType)(0),                            // 136: ddex.avs.v20200108.VideoCodecType
	(VideoContentType)(0),                          // 137: ddex.avs.v20200108.VideoContentType
	(VideoDefinitionType)(0),                       // 138: ddex.avs.v20200108.VideoDefinitionType
	(VideoType)(0),                                 // 139: ddex.avs.v20200108.VideoType
	(VisualPerceptionType)(0),                      // 140: ddex.avs.v20200108.VisualPerceptionType
	(VocalType)(0),                                 // 141: ddex.avs.v20200108.VocalType
	(WsMessageStatus)(0),                           // 142: ddex.avs.v20200108.WsMessageStatus
	(TerritoryCode)(0),                             // 143: ddex.avs.v20200108.TerritoryCode
	(ReferenceCreation)(0),                         // 144: ddex.avs.v20200108.ReferenceCreation
}
var file_ddex_avs_v20200108_v20200108_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ddex_avs_v20200108_v20200108_proto_init() }
func file_ddex_avs_v20200108_v20200108_proto_init() {
	if File_ddex_avs_v20200108_v20200108_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ddex_avs_v20200108_v20200108_proto_rawDesc), len(file_ddex_avs_v20200108_v20200108_proto_rawDesc)),
			NumEnums:      145,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ddex_avs_v20200108_v20200108_proto_goTypes,
		DependencyIndexes: file_ddex_avs_v20200108_v20200108_proto_depIdxs,
		EnumInfos:         file_ddex_avs_v20200108_v20200108_proto_enumTypes,
	}.Build()
	File_ddex_avs_v20200108_v20200108_proto = out.File
	file_ddex_avs_v20200108_v20200108_proto_goTypes = nil
	file_ddex_avs_v20200108_v20200108_proto_depIdxs = nil
}
