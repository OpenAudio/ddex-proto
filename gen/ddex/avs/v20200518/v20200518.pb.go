// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: ddex/avs/v20200518/v20200518.proto

package avsv20200518

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdditionalRightsClaimStatus int32

const (
	AdditionalRightsClaimStatus_ADDITIONAL_RIGHTS_CLAIM_STATUS_UNSPECIFIED AdditionalRightsClaimStatus = 0
	AdditionalRightsClaimStatus_ADDITIONAL_RIGHTS_CLAIM_STATUS_ACCEPTED    AdditionalRightsClaimStatus = 1
)

// Enum value maps for AdditionalRightsClaimStatus.
var (
	AdditionalRightsClaimStatus_name = map[int32]string{
		0: "ADDITIONAL_RIGHTS_CLAIM_STATUS_UNSPECIFIED",
		1: "ADDITIONAL_RIGHTS_CLAIM_STATUS_ACCEPTED",
	}
	AdditionalRightsClaimStatus_value = map[string]int32{
		"ADDITIONAL_RIGHTS_CLAIM_STATUS_UNSPECIFIED": 0,
		"ADDITIONAL_RIGHTS_CLAIM_STATUS_ACCEPTED":    1,
	}
)

func (x AdditionalRightsClaimStatus) Enum() *AdditionalRightsClaimStatus {
	p := new(AdditionalRightsClaimStatus)
	*p = x
	return p
}

func (x AdditionalRightsClaimStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalRightsClaimStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[0].Descriptor()
}

func (AdditionalRightsClaimStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[0]
}

func (x AdditionalRightsClaimStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalRightsClaimStatus.Descriptor instead.
func (AdditionalRightsClaimStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{0}
}

type AdditionalTitleType int32

const (
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_UNSPECIFIED      AdditionalTitleType = 0
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_ALTERNATIVETITLE AdditionalTitleType = 1
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_FORMALTITLE      AdditionalTitleType = 2
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_GROUPINGTITLE    AdditionalTitleType = 3
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_ORIGINALTITLE    AdditionalTitleType = 4
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_USERDEFINED      AdditionalTitleType = 5
)

// Enum value maps for AdditionalTitleType.
var (
	AdditionalTitleType_name = map[int32]string{
		0: "ADDITIONAL_TITLE_TYPE_UNSPECIFIED",
		1: "ADDITIONAL_TITLE_TYPE_ALTERNATIVETITLE",
		2: "ADDITIONAL_TITLE_TYPE_FORMALTITLE",
		3: "ADDITIONAL_TITLE_TYPE_GROUPINGTITLE",
		4: "ADDITIONAL_TITLE_TYPE_ORIGINALTITLE",
		5: "ADDITIONAL_TITLE_TYPE_USERDEFINED",
	}
	AdditionalTitleType_value = map[string]int32{
		"ADDITIONAL_TITLE_TYPE_UNSPECIFIED":      0,
		"ADDITIONAL_TITLE_TYPE_ALTERNATIVETITLE": 1,
		"ADDITIONAL_TITLE_TYPE_FORMALTITLE":      2,
		"ADDITIONAL_TITLE_TYPE_GROUPINGTITLE":    3,
		"ADDITIONAL_TITLE_TYPE_ORIGINALTITLE":    4,
		"ADDITIONAL_TITLE_TYPE_USERDEFINED":      5,
	}
)

func (x AdditionalTitleType) Enum() *AdditionalTitleType {
	p := new(AdditionalTitleType)
	*p = x
	return p
}

func (x AdditionalTitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalTitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[1].Descriptor()
}

func (AdditionalTitleType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[1]
}

func (x AdditionalTitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalTitleType.Descriptor instead.
func (AdditionalTitleType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{1}
}

type AdditionalUseType int32

const (
	AdditionalUseType_ADDITIONAL_USE_TYPE_UNSPECIFIED AdditionalUseType = 0
	AdditionalUseType_ADDITIONAL_USE_TYPE_ALL         AdditionalUseType = 1
)

// Enum value maps for AdditionalUseType.
var (
	AdditionalUseType_name = map[int32]string{
		0: "ADDITIONAL_USE_TYPE_UNSPECIFIED",
		1: "ADDITIONAL_USE_TYPE_ALL",
	}
	AdditionalUseType_value = map[string]int32{
		"ADDITIONAL_USE_TYPE_UNSPECIFIED": 0,
		"ADDITIONAL_USE_TYPE_ALL":         1,
	}
)

func (x AdditionalUseType) Enum() *AdditionalUseType {
	p := new(AdditionalUseType)
	*p = x
	return p
}

func (x AdditionalUseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalUseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[2].Descriptor()
}

func (AdditionalUseType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[2]
}

func (x AdditionalUseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalUseType.Descriptor instead.
func (AdditionalUseType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{2}
}

type AdditionalVideoType int32

const (
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_UNSPECIFIED                  AdditionalVideoType = 0
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_DRAMA                        AdditionalVideoType = 1
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_DRAMATICOMUSICALVIDEO        AdditionalVideoType = 2
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_INTERACTIVERESOURCE          AdditionalVideoType = 3
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO    AdditionalVideoType = 4
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO AdditionalVideoType = 5
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_USERDEFINED                  AdditionalVideoType = 6
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_WEBRESOURCE                  AdditionalVideoType = 7
)

// Enum value maps for AdditionalVideoType.
var (
	AdditionalVideoType_name = map[int32]string{
		0: "ADDITIONAL_VIDEO_TYPE_UNSPECIFIED",
		1: "ADDITIONAL_VIDEO_TYPE_DRAMA",
		2: "ADDITIONAL_VIDEO_TYPE_DRAMATICOMUSICALVIDEO",
		3: "ADDITIONAL_VIDEO_TYPE_INTERACTIVERESOURCE",
		4: "ADDITIONAL_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO",
		5: "ADDITIONAL_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO",
		6: "ADDITIONAL_VIDEO_TYPE_USERDEFINED",
		7: "ADDITIONAL_VIDEO_TYPE_WEBRESOURCE",
	}
	AdditionalVideoType_value = map[string]int32{
		"ADDITIONAL_VIDEO_TYPE_UNSPECIFIED":                  0,
		"ADDITIONAL_VIDEO_TYPE_DRAMA":                        1,
		"ADDITIONAL_VIDEO_TYPE_DRAMATICOMUSICALVIDEO":        2,
		"ADDITIONAL_VIDEO_TYPE_INTERACTIVERESOURCE":          3,
		"ADDITIONAL_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO":    4,
		"ADDITIONAL_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO": 5,
		"ADDITIONAL_VIDEO_TYPE_USERDEFINED":                  6,
		"ADDITIONAL_VIDEO_TYPE_WEBRESOURCE":                  7,
	}
)

func (x AdditionalVideoType) Enum() *AdditionalVideoType {
	p := new(AdditionalVideoType)
	*p = x
	return p
}

func (x AdditionalVideoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalVideoType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[3].Descriptor()
}

func (AdditionalVideoType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[3]
}

func (x AdditionalVideoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalVideoType.Descriptor instead.
func (AdditionalVideoType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{3}
}

type AdministratingRecordCompanyRole int32

const (
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED                   AdministratingRecordCompanyRole = 0
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT AdministratingRecordCompanyRole = 1
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR           AdministratingRecordCompanyRole = 2
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR          AdministratingRecordCompanyRole = 3
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN                       AdministratingRecordCompanyRole = 4
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED                   AdministratingRecordCompanyRole = 5
)

// Enum value maps for AdministratingRecordCompanyRole.
var (
	AdministratingRecordCompanyRole_name = map[int32]string{
		0: "ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED",
		1: "ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT",
		2: "ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR",
		3: "ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR",
		4: "ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN",
		5: "ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED",
	}
	AdministratingRecordCompanyRole_value = map[string]int32{
		"ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED":                   0,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT": 1,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR":           2,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR":          3,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN":                       4,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED":                   5,
	}
)

func (x AdministratingRecordCompanyRole) Enum() *AdministratingRecordCompanyRole {
	p := new(AdministratingRecordCompanyRole)
	*p = x
	return p
}

func (x AdministratingRecordCompanyRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdministratingRecordCompanyRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[4].Descriptor()
}

func (AdministratingRecordCompanyRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[4]
}

func (x AdministratingRecordCompanyRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdministratingRecordCompanyRole.Descriptor instead.
func (AdministratingRecordCompanyRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{4}
}

type AffiliationType int32

const (
	AffiliationType_AFFILIATION_TYPE_UNSPECIFIED           AffiliationType = 0
	AffiliationType_AFFILIATION_TYPE_MUSICLICENSINGCOMPANY AffiliationType = 1
	AffiliationType_AFFILIATION_TYPE_MUSICPUBLISHER        AffiliationType = 2
	AffiliationType_AFFILIATION_TYPE_MUSICRIGHTSSOCIETY    AffiliationType = 3
	AffiliationType_AFFILIATION_TYPE_RECORDCOMPANY         AffiliationType = 4
	AffiliationType_AFFILIATION_TYPE_USERDEFINED           AffiliationType = 5
)

// Enum value maps for AffiliationType.
var (
	AffiliationType_name = map[int32]string{
		0: "AFFILIATION_TYPE_UNSPECIFIED",
		1: "AFFILIATION_TYPE_MUSICLICENSINGCOMPANY",
		2: "AFFILIATION_TYPE_MUSICPUBLISHER",
		3: "AFFILIATION_TYPE_MUSICRIGHTSSOCIETY",
		4: "AFFILIATION_TYPE_RECORDCOMPANY",
		5: "AFFILIATION_TYPE_USERDEFINED",
	}
	AffiliationType_value = map[string]int32{
		"AFFILIATION_TYPE_UNSPECIFIED":           0,
		"AFFILIATION_TYPE_MUSICLICENSINGCOMPANY": 1,
		"AFFILIATION_TYPE_MUSICPUBLISHER":        2,
		"AFFILIATION_TYPE_MUSICRIGHTSSOCIETY":    3,
		"AFFILIATION_TYPE_RECORDCOMPANY":         4,
		"AFFILIATION_TYPE_USERDEFINED":           5,
	}
)

func (x AffiliationType) Enum() *AffiliationType {
	p := new(AffiliationType)
	*p = x
	return p
}

func (x AffiliationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AffiliationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[5].Descriptor()
}

func (AffiliationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[5]
}

func (x AffiliationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AffiliationType.Descriptor instead.
func (AffiliationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{5}
}

type AllTerritoryCode int32

const (
	AllTerritoryCode_ALL_TERRITORY_CODE_UNSPECIFIED AllTerritoryCode = 0
	AllTerritoryCode_ALL_TERRITORY_CODE_AD          AllTerritoryCode = 1
	AllTerritoryCode_ALL_TERRITORY_CODE_AE          AllTerritoryCode = 2
	AllTerritoryCode_ALL_TERRITORY_CODE_AF          AllTerritoryCode = 3
	AllTerritoryCode_ALL_TERRITORY_CODE_AG          AllTerritoryCode = 4
	AllTerritoryCode_ALL_TERRITORY_CODE_AI          AllTerritoryCode = 5
	AllTerritoryCode_ALL_TERRITORY_CODE_AL          AllTerritoryCode = 6
	AllTerritoryCode_ALL_TERRITORY_CODE_AM          AllTerritoryCode = 7
	AllTerritoryCode_ALL_TERRITORY_CODE_AN          AllTerritoryCode = 8
	AllTerritoryCode_ALL_TERRITORY_CODE_AO          AllTerritoryCode = 9
	AllTerritoryCode_ALL_TERRITORY_CODE_AQ          AllTerritoryCode = 10
	AllTerritoryCode_ALL_TERRITORY_CODE_AR          AllTerritoryCode = 11
	AllTerritoryCode_ALL_TERRITORY_CODE_AS          AllTerritoryCode = 12
	AllTerritoryCode_ALL_TERRITORY_CODE_AT          AllTerritoryCode = 13
	AllTerritoryCode_ALL_TERRITORY_CODE_AU          AllTerritoryCode = 14
	AllTerritoryCode_ALL_TERRITORY_CODE_AW          AllTerritoryCode = 15
	AllTerritoryCode_ALL_TERRITORY_CODE_AX          AllTerritoryCode = 16
	AllTerritoryCode_ALL_TERRITORY_CODE_AZ          AllTerritoryCode = 17
	AllTerritoryCode_ALL_TERRITORY_CODE_BA          AllTerritoryCode = 18
	AllTerritoryCode_ALL_TERRITORY_CODE_BB          AllTerritoryCode = 19
	AllTerritoryCode_ALL_TERRITORY_CODE_BD          AllTerritoryCode = 20
	AllTerritoryCode_ALL_TERRITORY_CODE_BE          AllTerritoryCode = 21
	AllTerritoryCode_ALL_TERRITORY_CODE_BF          AllTerritoryCode = 22
	AllTerritoryCode_ALL_TERRITORY_CODE_BG          AllTerritoryCode = 23
	AllTerritoryCode_ALL_TERRITORY_CODE_BH          AllTerritoryCode = 24
	AllTerritoryCode_ALL_TERRITORY_CODE_BI          AllTerritoryCode = 25
	AllTerritoryCode_ALL_TERRITORY_CODE_BJ          AllTerritoryCode = 26
	AllTerritoryCode_ALL_TERRITORY_CODE_BL          AllTerritoryCode = 27
	AllTerritoryCode_ALL_TERRITORY_CODE_BM          AllTerritoryCode = 28
	AllTerritoryCode_ALL_TERRITORY_CODE_BN          AllTerritoryCode = 29
	AllTerritoryCode_ALL_TERRITORY_CODE_BO          AllTerritoryCode = 30
	AllTerritoryCode_ALL_TERRITORY_CODE_BQ          AllTerritoryCode = 31
	AllTerritoryCode_ALL_TERRITORY_CODE_BR          AllTerritoryCode = 32
	AllTerritoryCode_ALL_TERRITORY_CODE_BS          AllTerritoryCode = 33
	AllTerritoryCode_ALL_TERRITORY_CODE_BT          AllTerritoryCode = 34
	AllTerritoryCode_ALL_TERRITORY_CODE_BV          AllTerritoryCode = 35
	AllTerritoryCode_ALL_TERRITORY_CODE_BW          AllTerritoryCode = 36
	AllTerritoryCode_ALL_TERRITORY_CODE_BY          AllTerritoryCode = 37
	AllTerritoryCode_ALL_TERRITORY_CODE_BZ          AllTerritoryCode = 38
	AllTerritoryCode_ALL_TERRITORY_CODE_CA          AllTerritoryCode = 39
	AllTerritoryCode_ALL_TERRITORY_CODE_CC          AllTerritoryCode = 40
	AllTerritoryCode_ALL_TERRITORY_CODE_CD          AllTerritoryCode = 41
	AllTerritoryCode_ALL_TERRITORY_CODE_CF          AllTerritoryCode = 42
	AllTerritoryCode_ALL_TERRITORY_CODE_CG          AllTerritoryCode = 43
	AllTerritoryCode_ALL_TERRITORY_CODE_CH          AllTerritoryCode = 44
	AllTerritoryCode_ALL_TERRITORY_CODE_CI          AllTerritoryCode = 45
	AllTerritoryCode_ALL_TERRITORY_CODE_CK          AllTerritoryCode = 46
	AllTerritoryCode_ALL_TERRITORY_CODE_CL          AllTerritoryCode = 47
	AllTerritoryCode_ALL_TERRITORY_CODE_CM          AllTerritoryCode = 48
	AllTerritoryCode_ALL_TERRITORY_CODE_CN          AllTerritoryCode = 49
	AllTerritoryCode_ALL_TERRITORY_CODE_CO          AllTerritoryCode = 50
	AllTerritoryCode_ALL_TERRITORY_CODE_CR          AllTerritoryCode = 51
	AllTerritoryCode_ALL_TERRITORY_CODE_CS          AllTerritoryCode = 52
	AllTerritoryCode_ALL_TERRITORY_CODE_CU          AllTerritoryCode = 53
	AllTerritoryCode_ALL_TERRITORY_CODE_CV          AllTerritoryCode = 54
	AllTerritoryCode_ALL_TERRITORY_CODE_CW          AllTerritoryCode = 55
	AllTerritoryCode_ALL_TERRITORY_CODE_CX          AllTerritoryCode = 56
	AllTerritoryCode_ALL_TERRITORY_CODE_CY          AllTerritoryCode = 57
	AllTerritoryCode_ALL_TERRITORY_CODE_CZ          AllTerritoryCode = 58
	AllTerritoryCode_ALL_TERRITORY_CODE_DE          AllTerritoryCode = 59
	AllTerritoryCode_ALL_TERRITORY_CODE_DJ          AllTerritoryCode = 60
	AllTerritoryCode_ALL_TERRITORY_CODE_DK          AllTerritoryCode = 61
	AllTerritoryCode_ALL_TERRITORY_CODE_DM          AllTerritoryCode = 62
	AllTerritoryCode_ALL_TERRITORY_CODE_DO          AllTerritoryCode = 63
	AllTerritoryCode_ALL_TERRITORY_CODE_DZ          AllTerritoryCode = 64
	AllTerritoryCode_ALL_TERRITORY_CODE_EC          AllTerritoryCode = 65
	AllTerritoryCode_ALL_TERRITORY_CODE_EE          AllTerritoryCode = 66
	AllTerritoryCode_ALL_TERRITORY_CODE_EG          AllTerritoryCode = 67
	AllTerritoryCode_ALL_TERRITORY_CODE_EH          AllTerritoryCode = 68
	AllTerritoryCode_ALL_TERRITORY_CODE_ER          AllTerritoryCode = 69
	AllTerritoryCode_ALL_TERRITORY_CODE_ES          AllTerritoryCode = 70
	AllTerritoryCode_ALL_TERRITORY_CODE_ES_CE       AllTerritoryCode = 71
	AllTerritoryCode_ALL_TERRITORY_CODE_ES_CN       AllTerritoryCode = 72
	AllTerritoryCode_ALL_TERRITORY_CODE_ES_ML       AllTerritoryCode = 73
	AllTerritoryCode_ALL_TERRITORY_CODE_ET          AllTerritoryCode = 74
	AllTerritoryCode_ALL_TERRITORY_CODE_FI          AllTerritoryCode = 75
	AllTerritoryCode_ALL_TERRITORY_CODE_FJ          AllTerritoryCode = 76
	AllTerritoryCode_ALL_TERRITORY_CODE_FK          AllTerritoryCode = 77
	AllTerritoryCode_ALL_TERRITORY_CODE_FM          AllTerritoryCode = 78
	AllTerritoryCode_ALL_TERRITORY_CODE_FO          AllTerritoryCode = 79
	AllTerritoryCode_ALL_TERRITORY_CODE_FR          AllTerritoryCode = 80
	AllTerritoryCode_ALL_TERRITORY_CODE_GA          AllTerritoryCode = 81
	AllTerritoryCode_ALL_TERRITORY_CODE_GB          AllTerritoryCode = 82
	AllTerritoryCode_ALL_TERRITORY_CODE_GD          AllTerritoryCode = 83
	AllTerritoryCode_ALL_TERRITORY_CODE_GE          AllTerritoryCode = 84
	AllTerritoryCode_ALL_TERRITORY_CODE_GF          AllTerritoryCode = 85
	AllTerritoryCode_ALL_TERRITORY_CODE_GG          AllTerritoryCode = 86
	AllTerritoryCode_ALL_TERRITORY_CODE_GH          AllTerritoryCode = 87
	AllTerritoryCode_ALL_TERRITORY_CODE_GI          AllTerritoryCode = 88
	AllTerritoryCode_ALL_TERRITORY_CODE_GL          AllTerritoryCode = 89
	AllTerritoryCode_ALL_TERRITORY_CODE_GM          AllTerritoryCode = 90
	AllTerritoryCode_ALL_TERRITORY_CODE_GN          AllTerritoryCode = 91
	AllTerritoryCode_ALL_TERRITORY_CODE_GP          AllTerritoryCode = 92
	AllTerritoryCode_ALL_TERRITORY_CODE_GQ          AllTerritoryCode = 93
	AllTerritoryCode_ALL_TERRITORY_CODE_GR          AllTerritoryCode = 94
	AllTerritoryCode_ALL_TERRITORY_CODE_GS          AllTerritoryCode = 95
	AllTerritoryCode_ALL_TERRITORY_CODE_GT          AllTerritoryCode = 96
	AllTerritoryCode_ALL_TERRITORY_CODE_GU          AllTerritoryCode = 97
	AllTerritoryCode_ALL_TERRITORY_CODE_GW          AllTerritoryCode = 98
	AllTerritoryCode_ALL_TERRITORY_CODE_GY          AllTerritoryCode = 99
	AllTerritoryCode_ALL_TERRITORY_CODE_HK          AllTerritoryCode = 100
	AllTerritoryCode_ALL_TERRITORY_CODE_HM          AllTerritoryCode = 101
	AllTerritoryCode_ALL_TERRITORY_CODE_HN          AllTerritoryCode = 102
	AllTerritoryCode_ALL_TERRITORY_CODE_HR          AllTerritoryCode = 103
	AllTerritoryCode_ALL_TERRITORY_CODE_HT          AllTerritoryCode = 104
	AllTerritoryCode_ALL_TERRITORY_CODE_HU          AllTerritoryCode = 105
	AllTerritoryCode_ALL_TERRITORY_CODE_ID          AllTerritoryCode = 106
	AllTerritoryCode_ALL_TERRITORY_CODE_IE          AllTerritoryCode = 107
	AllTerritoryCode_ALL_TERRITORY_CODE_IL          AllTerritoryCode = 108
	AllTerritoryCode_ALL_TERRITORY_CODE_IM          AllTerritoryCode = 109
	AllTerritoryCode_ALL_TERRITORY_CODE_IN          AllTerritoryCode = 110
	AllTerritoryCode_ALL_TERRITORY_CODE_IO          AllTerritoryCode = 111
	AllTerritoryCode_ALL_TERRITORY_CODE_IQ          AllTerritoryCode = 112
	AllTerritoryCode_ALL_TERRITORY_CODE_IR          AllTerritoryCode = 113
	AllTerritoryCode_ALL_TERRITORY_CODE_IS          AllTerritoryCode = 114
	AllTerritoryCode_ALL_TERRITORY_CODE_IT          AllTerritoryCode = 115
	AllTerritoryCode_ALL_TERRITORY_CODE_JE          AllTerritoryCode = 116
	AllTerritoryCode_ALL_TERRITORY_CODE_JM          AllTerritoryCode = 117
	AllTerritoryCode_ALL_TERRITORY_CODE_JO          AllTerritoryCode = 118
	AllTerritoryCode_ALL_TERRITORY_CODE_JP          AllTerritoryCode = 119
	AllTerritoryCode_ALL_TERRITORY_CODE_KE          AllTerritoryCode = 120
	AllTerritoryCode_ALL_TERRITORY_CODE_KG          AllTerritoryCode = 121
	AllTerritoryCode_ALL_TERRITORY_CODE_KH          AllTerritoryCode = 122
	AllTerritoryCode_ALL_TERRITORY_CODE_KI          AllTerritoryCode = 123
	AllTerritoryCode_ALL_TERRITORY_CODE_KM          AllTerritoryCode = 124
	AllTerritoryCode_ALL_TERRITORY_CODE_KN          AllTerritoryCode = 125
	AllTerritoryCode_ALL_TERRITORY_CODE_KP          AllTerritoryCode = 126
	AllTerritoryCode_ALL_TERRITORY_CODE_KR          AllTerritoryCode = 127
	AllTerritoryCode_ALL_TERRITORY_CODE_KW          AllTerritoryCode = 128
	AllTerritoryCode_ALL_TERRITORY_CODE_KY          AllTerritoryCode = 129
	AllTerritoryCode_ALL_TERRITORY_CODE_KZ          AllTerritoryCode = 130
	AllTerritoryCode_ALL_TERRITORY_CODE_LA          AllTerritoryCode = 131
	AllTerritoryCode_ALL_TERRITORY_CODE_LB          AllTerritoryCode = 132
	AllTerritoryCode_ALL_TERRITORY_CODE_LC          AllTerritoryCode = 133
	AllTerritoryCode_ALL_TERRITORY_CODE_LI          AllTerritoryCode = 134
	AllTerritoryCode_ALL_TERRITORY_CODE_LK          AllTerritoryCode = 135
	AllTerritoryCode_ALL_TERRITORY_CODE_LR          AllTerritoryCode = 136
	AllTerritoryCode_ALL_TERRITORY_CODE_LS          AllTerritoryCode = 137
	AllTerritoryCode_ALL_TERRITORY_CODE_LT          AllTerritoryCode = 138
	AllTerritoryCode_ALL_TERRITORY_CODE_LU          AllTerritoryCode = 139
	AllTerritoryCode_ALL_TERRITORY_CODE_LV          AllTerritoryCode = 140
	AllTerritoryCode_ALL_TERRITORY_CODE_LY          AllTerritoryCode = 141
	AllTerritoryCode_ALL_TERRITORY_CODE_MA          AllTerritoryCode = 142
	AllTerritoryCode_ALL_TERRITORY_CODE_MC          AllTerritoryCode = 143
	AllTerritoryCode_ALL_TERRITORY_CODE_MD          AllTerritoryCode = 144
	AllTerritoryCode_ALL_TERRITORY_CODE_ME          AllTerritoryCode = 145
	AllTerritoryCode_ALL_TERRITORY_CODE_MF          AllTerritoryCode = 146
	AllTerritoryCode_ALL_TERRITORY_CODE_MG          AllTerritoryCode = 147
	AllTerritoryCode_ALL_TERRITORY_CODE_MH          AllTerritoryCode = 148
	AllTerritoryCode_ALL_TERRITORY_CODE_MK          AllTerritoryCode = 149
	AllTerritoryCode_ALL_TERRITORY_CODE_ML          AllTerritoryCode = 150
	AllTerritoryCode_ALL_TERRITORY_CODE_MM          AllTerritoryCode = 151
	AllTerritoryCode_ALL_TERRITORY_CODE_MN          AllTerritoryCode = 152
	AllTerritoryCode_ALL_TERRITORY_CODE_MO          AllTerritoryCode = 153
	AllTerritoryCode_ALL_TERRITORY_CODE_MP          AllTerritoryCode = 154
	AllTerritoryCode_ALL_TERRITORY_CODE_MQ          AllTerritoryCode = 155
	AllTerritoryCode_ALL_TERRITORY_CODE_MR          AllTerritoryCode = 156
	AllTerritoryCode_ALL_TERRITORY_CODE_MS          AllTerritoryCode = 157
	AllTerritoryCode_ALL_TERRITORY_CODE_MT          AllTerritoryCode = 158
	AllTerritoryCode_ALL_TERRITORY_CODE_MU          AllTerritoryCode = 159
	AllTerritoryCode_ALL_TERRITORY_CODE_MV          AllTerritoryCode = 160
	AllTerritoryCode_ALL_TERRITORY_CODE_MW          AllTerritoryCode = 161
	AllTerritoryCode_ALL_TERRITORY_CODE_MX          AllTerritoryCode = 162
	AllTerritoryCode_ALL_TERRITORY_CODE_MY          AllTerritoryCode = 163
	AllTerritoryCode_ALL_TERRITORY_CODE_MZ          AllTerritoryCode = 164
	AllTerritoryCode_ALL_TERRITORY_CODE_NA          AllTerritoryCode = 165
	AllTerritoryCode_ALL_TERRITORY_CODE_NC          AllTerritoryCode = 166
	AllTerritoryCode_ALL_TERRITORY_CODE_NE          AllTerritoryCode = 167
	AllTerritoryCode_ALL_TERRITORY_CODE_NF          AllTerritoryCode = 168
	AllTerritoryCode_ALL_TERRITORY_CODE_NG          AllTerritoryCode = 169
	AllTerritoryCode_ALL_TERRITORY_CODE_NI          AllTerritoryCode = 170
	AllTerritoryCode_ALL_TERRITORY_CODE_NL          AllTerritoryCode = 171
	AllTerritoryCode_ALL_TERRITORY_CODE_NO          AllTerritoryCode = 172
	AllTerritoryCode_ALL_TERRITORY_CODE_NP          AllTerritoryCode = 173
	AllTerritoryCode_ALL_TERRITORY_CODE_NR          AllTerritoryCode = 174
	AllTerritoryCode_ALL_TERRITORY_CODE_NU          AllTerritoryCode = 175
	AllTerritoryCode_ALL_TERRITORY_CODE_NZ          AllTerritoryCode = 176
	AllTerritoryCode_ALL_TERRITORY_CODE_OM          AllTerritoryCode = 177
	AllTerritoryCode_ALL_TERRITORY_CODE_PA          AllTerritoryCode = 178
	AllTerritoryCode_ALL_TERRITORY_CODE_PE          AllTerritoryCode = 179
	AllTerritoryCode_ALL_TERRITORY_CODE_PF          AllTerritoryCode = 180
	AllTerritoryCode_ALL_TERRITORY_CODE_PG          AllTerritoryCode = 181
	AllTerritoryCode_ALL_TERRITORY_CODE_PH          AllTerritoryCode = 182
	AllTerritoryCode_ALL_TERRITORY_CODE_PK          AllTerritoryCode = 183
	AllTerritoryCode_ALL_TERRITORY_CODE_PL          AllTerritoryCode = 184
	AllTerritoryCode_ALL_TERRITORY_CODE_PM          AllTerritoryCode = 185
	AllTerritoryCode_ALL_TERRITORY_CODE_PN          AllTerritoryCode = 186
	AllTerritoryCode_ALL_TERRITORY_CODE_PR          AllTerritoryCode = 187
	AllTerritoryCode_ALL_TERRITORY_CODE_PS          AllTerritoryCode = 188
	AllTerritoryCode_ALL_TERRITORY_CODE_PT          AllTerritoryCode = 189
	AllTerritoryCode_ALL_TERRITORY_CODE_PW          AllTerritoryCode = 190
	AllTerritoryCode_ALL_TERRITORY_CODE_PY          AllTerritoryCode = 191
	AllTerritoryCode_ALL_TERRITORY_CODE_QA          AllTerritoryCode = 192
	AllTerritoryCode_ALL_TERRITORY_CODE_RE          AllTerritoryCode = 193
	AllTerritoryCode_ALL_TERRITORY_CODE_RO          AllTerritoryCode = 194
	AllTerritoryCode_ALL_TERRITORY_CODE_RS          AllTerritoryCode = 195
	AllTerritoryCode_ALL_TERRITORY_CODE_RU          AllTerritoryCode = 196
	AllTerritoryCode_ALL_TERRITORY_CODE_RW          AllTerritoryCode = 197
	AllTerritoryCode_ALL_TERRITORY_CODE_SA          AllTerritoryCode = 198
	AllTerritoryCode_ALL_TERRITORY_CODE_SB          AllTerritoryCode = 199
	AllTerritoryCode_ALL_TERRITORY_CODE_SC          AllTerritoryCode = 200
	AllTerritoryCode_ALL_TERRITORY_CODE_SD          AllTerritoryCode = 201
	AllTerritoryCode_ALL_TERRITORY_CODE_SE          AllTerritoryCode = 202
	AllTerritoryCode_ALL_TERRITORY_CODE_SG          AllTerritoryCode = 203
	AllTerritoryCode_ALL_TERRITORY_CODE_SH          AllTerritoryCode = 204
	AllTerritoryCode_ALL_TERRITORY_CODE_SI          AllTerritoryCode = 205
	AllTerritoryCode_ALL_TERRITORY_CODE_SJ          AllTerritoryCode = 206
	AllTerritoryCode_ALL_TERRITORY_CODE_SK          AllTerritoryCode = 207
	AllTerritoryCode_ALL_TERRITORY_CODE_SL          AllTerritoryCode = 208
	AllTerritoryCode_ALL_TERRITORY_CODE_SM          AllTerritoryCode = 209
	AllTerritoryCode_ALL_TERRITORY_CODE_SN          AllTerritoryCode = 210
	AllTerritoryCode_ALL_TERRITORY_CODE_SO          AllTerritoryCode = 211
	AllTerritoryCode_ALL_TERRITORY_CODE_SR          AllTerritoryCode = 212
	AllTerritoryCode_ALL_TERRITORY_CODE_SS          AllTerritoryCode = 213
	AllTerritoryCode_ALL_TERRITORY_CODE_ST          AllTerritoryCode = 214
	AllTerritoryCode_ALL_TERRITORY_CODE_SV          AllTerritoryCode = 215
	AllTerritoryCode_ALL_TERRITORY_CODE_SX          AllTerritoryCode = 216
	AllTerritoryCode_ALL_TERRITORY_CODE_SY          AllTerritoryCode = 217
	AllTerritoryCode_ALL_TERRITORY_CODE_SZ          AllTerritoryCode = 218
	AllTerritoryCode_ALL_TERRITORY_CODE_TC          AllTerritoryCode = 219
	AllTerritoryCode_ALL_TERRITORY_CODE_TD          AllTerritoryCode = 220
	AllTerritoryCode_ALL_TERRITORY_CODE_TF          AllTerritoryCode = 221
	AllTerritoryCode_ALL_TERRITORY_CODE_TG          AllTerritoryCode = 222
	AllTerritoryCode_ALL_TERRITORY_CODE_TH          AllTerritoryCode = 223
	AllTerritoryCode_ALL_TERRITORY_CODE_TJ          AllTerritoryCode = 224
	AllTerritoryCode_ALL_TERRITORY_CODE_TK          AllTerritoryCode = 225
	AllTerritoryCode_ALL_TERRITORY_CODE_TL          AllTerritoryCode = 226
	AllTerritoryCode_ALL_TERRITORY_CODE_TM          AllTerritoryCode = 227
	AllTerritoryCode_ALL_TERRITORY_CODE_TN          AllTerritoryCode = 228
	AllTerritoryCode_ALL_TERRITORY_CODE_TO          AllTerritoryCode = 229
	AllTerritoryCode_ALL_TERRITORY_CODE_TR          AllTerritoryCode = 230
	AllTerritoryCode_ALL_TERRITORY_CODE_TT          AllTerritoryCode = 231
	AllTerritoryCode_ALL_TERRITORY_CODE_TV          AllTerritoryCode = 232
	AllTerritoryCode_ALL_TERRITORY_CODE_TW          AllTerritoryCode = 233
	AllTerritoryCode_ALL_TERRITORY_CODE_TZ          AllTerritoryCode = 234
	AllTerritoryCode_ALL_TERRITORY_CODE_UA          AllTerritoryCode = 235
	AllTerritoryCode_ALL_TERRITORY_CODE_UG          AllTerritoryCode = 236
	AllTerritoryCode_ALL_TERRITORY_CODE_UM          AllTerritoryCode = 237
	AllTerritoryCode_ALL_TERRITORY_CODE_US          AllTerritoryCode = 238
	AllTerritoryCode_ALL_TERRITORY_CODE_UY          AllTerritoryCode = 239
	AllTerritoryCode_ALL_TERRITORY_CODE_UZ          AllTerritoryCode = 240
	AllTerritoryCode_ALL_TERRITORY_CODE_VA          AllTerritoryCode = 241
	AllTerritoryCode_ALL_TERRITORY_CODE_VC          AllTerritoryCode = 242
	AllTerritoryCode_ALL_TERRITORY_CODE_VE          AllTerritoryCode = 243
	AllTerritoryCode_ALL_TERRITORY_CODE_VG          AllTerritoryCode = 244
	AllTerritoryCode_ALL_TERRITORY_CODE_VI          AllTerritoryCode = 245
	AllTerritoryCode_ALL_TERRITORY_CODE_VN          AllTerritoryCode = 246
	AllTerritoryCode_ALL_TERRITORY_CODE_VU          AllTerritoryCode = 247
	AllTerritoryCode_ALL_TERRITORY_CODE_WF          AllTerritoryCode = 248
	AllTerritoryCode_ALL_TERRITORY_CODE_WS          AllTerritoryCode = 249
	AllTerritoryCode_ALL_TERRITORY_CODE_YE          AllTerritoryCode = 250
	AllTerritoryCode_ALL_TERRITORY_CODE_YT          AllTerritoryCode = 251
	AllTerritoryCode_ALL_TERRITORY_CODE_ZA          AllTerritoryCode = 252
	AllTerritoryCode_ALL_TERRITORY_CODE_ZM          AllTerritoryCode = 253
	AllTerritoryCode_ALL_TERRITORY_CODE_ZW          AllTerritoryCode = 254
	AllTerritoryCode_ALL_TERRITORY_CODE_E_4         AllTerritoryCode = 255
	AllTerritoryCode_ALL_TERRITORY_CODE_E_8         AllTerritoryCode = 256
	AllTerritoryCode_ALL_TERRITORY_CODE_E_12        AllTerritoryCode = 257
	AllTerritoryCode_ALL_TERRITORY_CODE_E_20        AllTerritoryCode = 258
	AllTerritoryCode_ALL_TERRITORY_CODE_E_24        AllTerritoryCode = 259
	AllTerritoryCode_ALL_TERRITORY_CODE_E_28        AllTerritoryCode = 260
	AllTerritoryCode_ALL_TERRITORY_CODE_E_31        AllTerritoryCode = 261
	AllTerritoryCode_ALL_TERRITORY_CODE_E_32        AllTerritoryCode = 262
	AllTerritoryCode_ALL_TERRITORY_CODE_E_36        AllTerritoryCode = 263
	AllTerritoryCode_ALL_TERRITORY_CODE_E_40        AllTerritoryCode = 264
	AllTerritoryCode_ALL_TERRITORY_CODE_E_44        AllTerritoryCode = 265
	AllTerritoryCode_ALL_TERRITORY_CODE_E_48        AllTerritoryCode = 266
	AllTerritoryCode_ALL_TERRITORY_CODE_E_50        AllTerritoryCode = 267
	AllTerritoryCode_ALL_TERRITORY_CODE_E_51        AllTerritoryCode = 268
	AllTerritoryCode_ALL_TERRITORY_CODE_E_52        AllTerritoryCode = 269
	AllTerritoryCode_ALL_TERRITORY_CODE_E_56        AllTerritoryCode = 270
	AllTerritoryCode_ALL_TERRITORY_CODE_E_64        AllTerritoryCode = 271
	AllTerritoryCode_ALL_TERRITORY_CODE_E_68        AllTerritoryCode = 272
	AllTerritoryCode_ALL_TERRITORY_CODE_E_70        AllTerritoryCode = 273
	AllTerritoryCode_ALL_TERRITORY_CODE_E_72        AllTerritoryCode = 274
	AllTerritoryCode_ALL_TERRITORY_CODE_E_76        AllTerritoryCode = 275
	AllTerritoryCode_ALL_TERRITORY_CODE_E_84        AllTerritoryCode = 276
	AllTerritoryCode_ALL_TERRITORY_CODE_E_90        AllTerritoryCode = 277
	AllTerritoryCode_ALL_TERRITORY_CODE_E_96        AllTerritoryCode = 278
	AllTerritoryCode_ALL_TERRITORY_CODE_E_100       AllTerritoryCode = 279
	AllTerritoryCode_ALL_TERRITORY_CODE_E_104       AllTerritoryCode = 280
	AllTerritoryCode_ALL_TERRITORY_CODE_E_108       AllTerritoryCode = 281
	AllTerritoryCode_ALL_TERRITORY_CODE_E_112       AllTerritoryCode = 282
	AllTerritoryCode_ALL_TERRITORY_CODE_E_116       AllTerritoryCode = 283
	AllTerritoryCode_ALL_TERRITORY_CODE_E_120       AllTerritoryCode = 284
	AllTerritoryCode_ALL_TERRITORY_CODE_E_124       AllTerritoryCode = 285
	AllTerritoryCode_ALL_TERRITORY_CODE_E_132       AllTerritoryCode = 286
	AllTerritoryCode_ALL_TERRITORY_CODE_E_140       AllTerritoryCode = 287
	AllTerritoryCode_ALL_TERRITORY_CODE_E_144       AllTerritoryCode = 288
	AllTerritoryCode_ALL_TERRITORY_CODE_E_148       AllTerritoryCode = 289
	AllTerritoryCode_ALL_TERRITORY_CODE_E_152       AllTerritoryCode = 290
	AllTerritoryCode_ALL_TERRITORY_CODE_E_156       AllTerritoryCode = 291
	AllTerritoryCode_ALL_TERRITORY_CODE_E_158       AllTerritoryCode = 292
	AllTerritoryCode_ALL_TERRITORY_CODE_E_170       AllTerritoryCode = 293
	AllTerritoryCode_ALL_TERRITORY_CODE_E_174       AllTerritoryCode = 294
	AllTerritoryCode_ALL_TERRITORY_CODE_E_178       AllTerritoryCode = 295
	AllTerritoryCode_ALL_TERRITORY_CODE_E_180       AllTerritoryCode = 296
	AllTerritoryCode_ALL_TERRITORY_CODE_E_188       AllTerritoryCode = 297
	AllTerritoryCode_ALL_TERRITORY_CODE_E_191       AllTerritoryCode = 298
	AllTerritoryCode_ALL_TERRITORY_CODE_E_192       AllTerritoryCode = 299
	AllTerritoryCode_ALL_TERRITORY_CODE_E_196       AllTerritoryCode = 300
	AllTerritoryCode_ALL_TERRITORY_CODE_E_200       AllTerritoryCode = 301
	AllTerritoryCode_ALL_TERRITORY_CODE_E_203       AllTerritoryCode = 302
	AllTerritoryCode_ALL_TERRITORY_CODE_E_204       AllTerritoryCode = 303
	AllTerritoryCode_ALL_TERRITORY_CODE_E_208       AllTerritoryCode = 304
	AllTerritoryCode_ALL_TERRITORY_CODE_E_212       AllTerritoryCode = 305
	AllTerritoryCode_ALL_TERRITORY_CODE_E_214       AllTerritoryCode = 306
	AllTerritoryCode_ALL_TERRITORY_CODE_E_218       AllTerritoryCode = 307
	AllTerritoryCode_ALL_TERRITORY_CODE_E_222       AllTerritoryCode = 308
	AllTerritoryCode_ALL_TERRITORY_CODE_E_226       AllTerritoryCode = 309
	AllTerritoryCode_ALL_TERRITORY_CODE_E_230       AllTerritoryCode = 310
	AllTerritoryCode_ALL_TERRITORY_CODE_E_231       AllTerritoryCode = 311
	AllTerritoryCode_ALL_TERRITORY_CODE_E_232       AllTerritoryCode = 312
	AllTerritoryCode_ALL_TERRITORY_CODE_E_233       AllTerritoryCode = 313
	AllTerritoryCode_ALL_TERRITORY_CODE_E_242       AllTerritoryCode = 314
	AllTerritoryCode_ALL_TERRITORY_CODE_E_246       AllTerritoryCode = 315
	AllTerritoryCode_ALL_TERRITORY_CODE_E_250       AllTerritoryCode = 316
	AllTerritoryCode_ALL_TERRITORY_CODE_E_258       AllTerritoryCode = 317
	AllTerritoryCode_ALL_TERRITORY_CODE_E_262       AllTerritoryCode = 318
	AllTerritoryCode_ALL_TERRITORY_CODE_E_266       AllTerritoryCode = 319
	AllTerritoryCode_ALL_TERRITORY_CODE_E_268       AllTerritoryCode = 320
	AllTerritoryCode_ALL_TERRITORY_CODE_E_270       AllTerritoryCode = 321
	AllTerritoryCode_ALL_TERRITORY_CODE_E_276       AllTerritoryCode = 322
	AllTerritoryCode_ALL_TERRITORY_CODE_E_278       AllTerritoryCode = 323
	AllTerritoryCode_ALL_TERRITORY_CODE_E_280       AllTerritoryCode = 324
	AllTerritoryCode_ALL_TERRITORY_CODE_E_288       AllTerritoryCode = 325
	AllTerritoryCode_ALL_TERRITORY_CODE_E_296       AllTerritoryCode = 326
	AllTerritoryCode_ALL_TERRITORY_CODE_E_300       AllTerritoryCode = 327
	AllTerritoryCode_ALL_TERRITORY_CODE_E_308       AllTerritoryCode = 328
	AllTerritoryCode_ALL_TERRITORY_CODE_E_320       AllTerritoryCode = 329
	AllTerritoryCode_ALL_TERRITORY_CODE_E_324       AllTerritoryCode = 330
	AllTerritoryCode_ALL_TERRITORY_CODE_E_328       AllTerritoryCode = 331
	AllTerritoryCode_ALL_TERRITORY_CODE_E_332       AllTerritoryCode = 332
	AllTerritoryCode_ALL_TERRITORY_CODE_E_336       AllTerritoryCode = 333
	AllTerritoryCode_ALL_TERRITORY_CODE_E_340       AllTerritoryCode = 334
	AllTerritoryCode_ALL_TERRITORY_CODE_E_344       AllTerritoryCode = 335
	AllTerritoryCode_ALL_TERRITORY_CODE_E_348       AllTerritoryCode = 336
	AllTerritoryCode_ALL_TERRITORY_CODE_E_352       AllTerritoryCode = 337
	AllTerritoryCode_ALL_TERRITORY_CODE_E_356       AllTerritoryCode = 338
	AllTerritoryCode_ALL_TERRITORY_CODE_E_360       AllTerritoryCode = 339
	AllTerritoryCode_ALL_TERRITORY_CODE_E_364       AllTerritoryCode = 340
	AllTerritoryCode_ALL_TERRITORY_CODE_E_368       AllTerritoryCode = 341
	AllTerritoryCode_ALL_TERRITORY_CODE_E_372       AllTerritoryCode = 342
	AllTerritoryCode_ALL_TERRITORY_CODE_E_376       AllTerritoryCode = 343
	AllTerritoryCode_ALL_TERRITORY_CODE_E_380       AllTerritoryCode = 344
	AllTerritoryCode_ALL_TERRITORY_CODE_E_384       AllTerritoryCode = 345
	AllTerritoryCode_ALL_TERRITORY_CODE_E_388       AllTerritoryCode = 346
	AllTerritoryCode_ALL_TERRITORY_CODE_E_392       AllTerritoryCode = 347
	AllTerritoryCode_ALL_TERRITORY_CODE_E_398       AllTerritoryCode = 348
	AllTerritoryCode_ALL_TERRITORY_CODE_E_400       AllTerritoryCode = 349
	AllTerritoryCode_ALL_TERRITORY_CODE_E_404       AllTerritoryCode = 350
	AllTerritoryCode_ALL_TERRITORY_CODE_E_408       AllTerritoryCode = 351
	AllTerritoryCode_ALL_TERRITORY_CODE_E_410       AllTerritoryCode = 352
	AllTerritoryCode_ALL_TERRITORY_CODE_E_414       AllTerritoryCode = 353
	AllTerritoryCode_ALL_TERRITORY_CODE_E_417       AllTerritoryCode = 354
	AllTerritoryCode_ALL_TERRITORY_CODE_E_418       AllTerritoryCode = 355
	AllTerritoryCode_ALL_TERRITORY_CODE_E_422       AllTerritoryCode = 356
	AllTerritoryCode_ALL_TERRITORY_CODE_E_426       AllTerritoryCode = 357
	AllTerritoryCode_ALL_TERRITORY_CODE_E_428       AllTerritoryCode = 358
	AllTerritoryCode_ALL_TERRITORY_CODE_E_430       AllTerritoryCode = 359
	AllTerritoryCode_ALL_TERRITORY_CODE_E_434       AllTerritoryCode = 360
	AllTerritoryCode_ALL_TERRITORY_CODE_E_438       AllTerritoryCode = 361
	AllTerritoryCode_ALL_TERRITORY_CODE_E_440       AllTerritoryCode = 362
	AllTerritoryCode_ALL_TERRITORY_CODE_E_442       AllTerritoryCode = 363
	AllTerritoryCode_ALL_TERRITORY_CODE_E_450       AllTerritoryCode = 364
	AllTerritoryCode_ALL_TERRITORY_CODE_E_454       AllTerritoryCode = 365
	AllTerritoryCode_ALL_TERRITORY_CODE_E_458       AllTerritoryCode = 366
	AllTerritoryCode_ALL_TERRITORY_CODE_E_462       AllTerritoryCode = 367
	AllTerritoryCode_ALL_TERRITORY_CODE_E_466       AllTerritoryCode = 368
	AllTerritoryCode_ALL_TERRITORY_CODE_E_470       AllTerritoryCode = 369
	AllTerritoryCode_ALL_TERRITORY_CODE_E_478       AllTerritoryCode = 370
	AllTerritoryCode_ALL_TERRITORY_CODE_E_480       AllTerritoryCode = 371
	AllTerritoryCode_ALL_TERRITORY_CODE_E_484       AllTerritoryCode = 372
	AllTerritoryCode_ALL_TERRITORY_CODE_E_492       AllTerritoryCode = 373
	AllTerritoryCode_ALL_TERRITORY_CODE_E_496       AllTerritoryCode = 374
	AllTerritoryCode_ALL_TERRITORY_CODE_E_498       AllTerritoryCode = 375
	AllTerritoryCode_ALL_TERRITORY_CODE_E_499       AllTerritoryCode = 376
	AllTerritoryCode_ALL_TERRITORY_CODE_E_504       AllTerritoryCode = 377
	AllTerritoryCode_ALL_TERRITORY_CODE_E_508       AllTerritoryCode = 378
	AllTerritoryCode_ALL_TERRITORY_CODE_E_512       AllTerritoryCode = 379
	AllTerritoryCode_ALL_TERRITORY_CODE_E_516       AllTerritoryCode = 380
	AllTerritoryCode_ALL_TERRITORY_CODE_E_520       AllTerritoryCode = 381
	AllTerritoryCode_ALL_TERRITORY_CODE_E_524       AllTerritoryCode = 382
	AllTerritoryCode_ALL_TERRITORY_CODE_E_528       AllTerritoryCode = 383
	AllTerritoryCode_ALL_TERRITORY_CODE_E_540       AllTerritoryCode = 384
	AllTerritoryCode_ALL_TERRITORY_CODE_E_548       AllTerritoryCode = 385
	AllTerritoryCode_ALL_TERRITORY_CODE_E_554       AllTerritoryCode = 386
	AllTerritoryCode_ALL_TERRITORY_CODE_E_558       AllTerritoryCode = 387
	AllTerritoryCode_ALL_TERRITORY_CODE_E_562       AllTerritoryCode = 388
	AllTerritoryCode_ALL_TERRITORY_CODE_E_566       AllTerritoryCode = 389
	AllTerritoryCode_ALL_TERRITORY_CODE_E_578       AllTerritoryCode = 390
	AllTerritoryCode_ALL_TERRITORY_CODE_E_583       AllTerritoryCode = 391
	AllTerritoryCode_ALL_TERRITORY_CODE_E_584       AllTerritoryCode = 392
	AllTerritoryCode_ALL_TERRITORY_CODE_E_585       AllTerritoryCode = 393
	AllTerritoryCode_ALL_TERRITORY_CODE_E_586       AllTerritoryCode = 394
	AllTerritoryCode_ALL_TERRITORY_CODE_E_591       AllTerritoryCode = 395
	AllTerritoryCode_ALL_TERRITORY_CODE_E_598       AllTerritoryCode = 396
	AllTerritoryCode_ALL_TERRITORY_CODE_E_600       AllTerritoryCode = 397
	AllTerritoryCode_ALL_TERRITORY_CODE_E_604       AllTerritoryCode = 398
	AllTerritoryCode_ALL_TERRITORY_CODE_E_608       AllTerritoryCode = 399
	AllTerritoryCode_ALL_TERRITORY_CODE_E_616       AllTerritoryCode = 400
	AllTerritoryCode_ALL_TERRITORY_CODE_E_620       AllTerritoryCode = 401
	AllTerritoryCode_ALL_TERRITORY_CODE_E_624       AllTerritoryCode = 402
	AllTerritoryCode_ALL_TERRITORY_CODE_E_626       AllTerritoryCode = 403
	AllTerritoryCode_ALL_TERRITORY_CODE_E_630       AllTerritoryCode = 404
	AllTerritoryCode_ALL_TERRITORY_CODE_E_634       AllTerritoryCode = 405
	AllTerritoryCode_ALL_TERRITORY_CODE_E_642       AllTerritoryCode = 406
	AllTerritoryCode_ALL_TERRITORY_CODE_E_643       AllTerritoryCode = 407
	AllTerritoryCode_ALL_TERRITORY_CODE_E_646       AllTerritoryCode = 408
	AllTerritoryCode_ALL_TERRITORY_CODE_E_659       AllTerritoryCode = 409
	AllTerritoryCode_ALL_TERRITORY_CODE_E_662       AllTerritoryCode = 410
	AllTerritoryCode_ALL_TERRITORY_CODE_E_670       AllTerritoryCode = 411
	AllTerritoryCode_ALL_TERRITORY_CODE_E_674       AllTerritoryCode = 412
	AllTerritoryCode_ALL_TERRITORY_CODE_E_678       AllTerritoryCode = 413
	AllTerritoryCode_ALL_TERRITORY_CODE_E_682       AllTerritoryCode = 414
	AllTerritoryCode_ALL_TERRITORY_CODE_E_686       AllTerritoryCode = 415
	AllTerritoryCode_ALL_TERRITORY_CODE_E_688       AllTerritoryCode = 416
	AllTerritoryCode_ALL_TERRITORY_CODE_E_690       AllTerritoryCode = 417
	AllTerritoryCode_ALL_TERRITORY_CODE_E_694       AllTerritoryCode = 418
	AllTerritoryCode_ALL_TERRITORY_CODE_E_702       AllTerritoryCode = 419
	AllTerritoryCode_ALL_TERRITORY_CODE_E_703       AllTerritoryCode = 420
	AllTerritoryCode_ALL_TERRITORY_CODE_E_704       AllTerritoryCode = 421
	AllTerritoryCode_ALL_TERRITORY_CODE_E_705       AllTerritoryCode = 422
	AllTerritoryCode_ALL_TERRITORY_CODE_E_706       AllTerritoryCode = 423
	AllTerritoryCode_ALL_TERRITORY_CODE_E_710       AllTerritoryCode = 424
	AllTerritoryCode_ALL_TERRITORY_CODE_E_716       AllTerritoryCode = 425
	AllTerritoryCode_ALL_TERRITORY_CODE_E_720       AllTerritoryCode = 426
	AllTerritoryCode_ALL_TERRITORY_CODE_E_724       AllTerritoryCode = 427
	AllTerritoryCode_ALL_TERRITORY_CODE_E_728       AllTerritoryCode = 428
	AllTerritoryCode_ALL_TERRITORY_CODE_E_729       AllTerritoryCode = 429
	AllTerritoryCode_ALL_TERRITORY_CODE_E_732       AllTerritoryCode = 430
	AllTerritoryCode_ALL_TERRITORY_CODE_E_736       AllTerritoryCode = 431
	AllTerritoryCode_ALL_TERRITORY_CODE_E_740       AllTerritoryCode = 432
	AllTerritoryCode_ALL_TERRITORY_CODE_E_748       AllTerritoryCode = 433
	AllTerritoryCode_ALL_TERRITORY_CODE_E_752       AllTerritoryCode = 434
	AllTerritoryCode_ALL_TERRITORY_CODE_E_756       AllTerritoryCode = 435
	AllTerritoryCode_ALL_TERRITORY_CODE_E_760       AllTerritoryCode = 436
	AllTerritoryCode_ALL_TERRITORY_CODE_E_762       AllTerritoryCode = 437
	AllTerritoryCode_ALL_TERRITORY_CODE_E_764       AllTerritoryCode = 438
	AllTerritoryCode_ALL_TERRITORY_CODE_E_768       AllTerritoryCode = 439
	AllTerritoryCode_ALL_TERRITORY_CODE_E_776       AllTerritoryCode = 440
	AllTerritoryCode_ALL_TERRITORY_CODE_E_780       AllTerritoryCode = 441
	AllTerritoryCode_ALL_TERRITORY_CODE_E_784       AllTerritoryCode = 442
	AllTerritoryCode_ALL_TERRITORY_CODE_E_788       AllTerritoryCode = 443
	AllTerritoryCode_ALL_TERRITORY_CODE_E_792       AllTerritoryCode = 444
	AllTerritoryCode_ALL_TERRITORY_CODE_E_795       AllTerritoryCode = 445
	AllTerritoryCode_ALL_TERRITORY_CODE_E_798       AllTerritoryCode = 446
	AllTerritoryCode_ALL_TERRITORY_CODE_E_800       AllTerritoryCode = 447
	AllTerritoryCode_ALL_TERRITORY_CODE_E_804       AllTerritoryCode = 448
	AllTerritoryCode_ALL_TERRITORY_CODE_E_807       AllTerritoryCode = 449
	AllTerritoryCode_ALL_TERRITORY_CODE_E_810       AllTerritoryCode = 450
	AllTerritoryCode_ALL_TERRITORY_CODE_E_818       AllTerritoryCode = 451
	AllTerritoryCode_ALL_TERRITORY_CODE_E_826       AllTerritoryCode = 452
	AllTerritoryCode_ALL_TERRITORY_CODE_E_834       AllTerritoryCode = 453
	AllTerritoryCode_ALL_TERRITORY_CODE_E_840       AllTerritoryCode = 454
	AllTerritoryCode_ALL_TERRITORY_CODE_E_854       AllTerritoryCode = 455
	AllTerritoryCode_ALL_TERRITORY_CODE_E_858       AllTerritoryCode = 456
	AllTerritoryCode_ALL_TERRITORY_CODE_E_860       AllTerritoryCode = 457
	AllTerritoryCode_ALL_TERRITORY_CODE_E_862       AllTerritoryCode = 458
	AllTerritoryCode_ALL_TERRITORY_CODE_E_882       AllTerritoryCode = 459
	AllTerritoryCode_ALL_TERRITORY_CODE_E_886       AllTerritoryCode = 460
	AllTerritoryCode_ALL_TERRITORY_CODE_E_887       AllTerritoryCode = 461
	AllTerritoryCode_ALL_TERRITORY_CODE_E_890       AllTerritoryCode = 462
	AllTerritoryCode_ALL_TERRITORY_CODE_E_891       AllTerritoryCode = 463
	AllTerritoryCode_ALL_TERRITORY_CODE_E_894       AllTerritoryCode = 464
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2100      AllTerritoryCode = 465
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2101      AllTerritoryCode = 466
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2102      AllTerritoryCode = 467
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2103      AllTerritoryCode = 468
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2104      AllTerritoryCode = 469
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2105      AllTerritoryCode = 470
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2106      AllTerritoryCode = 471
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2107      AllTerritoryCode = 472
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2108      AllTerritoryCode = 473
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2109      AllTerritoryCode = 474
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2110      AllTerritoryCode = 475
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2111      AllTerritoryCode = 476
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2112      AllTerritoryCode = 477
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2113      AllTerritoryCode = 478
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2114      AllTerritoryCode = 479
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2115      AllTerritoryCode = 480
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2116      AllTerritoryCode = 481
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2117      AllTerritoryCode = 482
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2118      AllTerritoryCode = 483
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2119      AllTerritoryCode = 484
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2120      AllTerritoryCode = 485
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2121      AllTerritoryCode = 486
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2122      AllTerritoryCode = 487
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2123      AllTerritoryCode = 488
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2124      AllTerritoryCode = 489
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2125      AllTerritoryCode = 490
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2126      AllTerritoryCode = 491
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2127      AllTerritoryCode = 492
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2128      AllTerritoryCode = 493
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2129      AllTerritoryCode = 494
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2130      AllTerritoryCode = 495
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2131      AllTerritoryCode = 496
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2132      AllTerritoryCode = 497
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2133      AllTerritoryCode = 498
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2134      AllTerritoryCode = 499
	AllTerritoryCode_ALL_TERRITORY_CODE_E_2136      AllTerritoryCode = 500
	AllTerritoryCode_ALL_TERRITORY_CODE_XK          AllTerritoryCode = 501
	AllTerritoryCode_ALL_TERRITORY_CODE_WORLDWIDE   AllTerritoryCode = 502
	AllTerritoryCode_ALL_TERRITORY_CODE_AIDJ        AllTerritoryCode = 503
	AllTerritoryCode_ALL_TERRITORY_CODE_ANHH        AllTerritoryCode = 504
	AllTerritoryCode_ALL_TERRITORY_CODE_BQAQ        AllTerritoryCode = 505
	AllTerritoryCode_ALL_TERRITORY_CODE_BUMM        AllTerritoryCode = 506
	AllTerritoryCode_ALL_TERRITORY_CODE_BYAA        AllTerritoryCode = 507
	AllTerritoryCode_ALL_TERRITORY_CODE_CSHH        AllTerritoryCode = 508
	AllTerritoryCode_ALL_TERRITORY_CODE_CSXX        AllTerritoryCode = 509
	AllTerritoryCode_ALL_TERRITORY_CODE_CTKI        AllTerritoryCode = 510
	AllTerritoryCode_ALL_TERRITORY_CODE_DDDE        AllTerritoryCode = 511
	AllTerritoryCode_ALL_TERRITORY_CODE_DYBJ        AllTerritoryCode = 512
	AllTerritoryCode_ALL_TERRITORY_CODE_FQHH        AllTerritoryCode = 513
	AllTerritoryCode_ALL_TERRITORY_CODE_FXFR        AllTerritoryCode = 514
	AllTerritoryCode_ALL_TERRITORY_CODE_GEHH        AllTerritoryCode = 515
	AllTerritoryCode_ALL_TERRITORY_CODE_HVBF        AllTerritoryCode = 516
	AllTerritoryCode_ALL_TERRITORY_CODE_JTUM        AllTerritoryCode = 517
	AllTerritoryCode_ALL_TERRITORY_CODE_MIUM        AllTerritoryCode = 518
	AllTerritoryCode_ALL_TERRITORY_CODE_NHVU        AllTerritoryCode = 519
	AllTerritoryCode_ALL_TERRITORY_CODE_NQAQ        AllTerritoryCode = 520
	AllTerritoryCode_ALL_TERRITORY_CODE_NTHH        AllTerritoryCode = 521
	AllTerritoryCode_ALL_TERRITORY_CODE_PCHH        AllTerritoryCode = 522
	AllTerritoryCode_ALL_TERRITORY_CODE_PUUM        AllTerritoryCode = 523
	AllTerritoryCode_ALL_TERRITORY_CODE_PZPA        AllTerritoryCode = 524
	AllTerritoryCode_ALL_TERRITORY_CODE_RHZW        AllTerritoryCode = 525
	AllTerritoryCode_ALL_TERRITORY_CODE_SKIN        AllTerritoryCode = 526
	AllTerritoryCode_ALL_TERRITORY_CODE_SUHH        AllTerritoryCode = 527
	AllTerritoryCode_ALL_TERRITORY_CODE_TPTL        AllTerritoryCode = 528
	AllTerritoryCode_ALL_TERRITORY_CODE_VDVN        AllTerritoryCode = 529
	AllTerritoryCode_ALL_TERRITORY_CODE_WKUM        AllTerritoryCode = 530
	AllTerritoryCode_ALL_TERRITORY_CODE_YDYE        AllTerritoryCode = 531
	AllTerritoryCode_ALL_TERRITORY_CODE_YUCS        AllTerritoryCode = 532
	AllTerritoryCode_ALL_TERRITORY_CODE_ZRCD        AllTerritoryCode = 533
	AllTerritoryCode_ALL_TERRITORY_CODE_E_446       AllTerritoryCode = 534
)

// Enum value maps for AllTerritoryCode.
var (
	AllTerritoryCode_name = map[int32]string{
		0:   "ALL_TERRITORY_CODE_UNSPECIFIED",
		1:   "ALL_TERRITORY_CODE_AD",
		2:   "ALL_TERRITORY_CODE_AE",
		3:   "ALL_TERRITORY_CODE_AF",
		4:   "ALL_TERRITORY_CODE_AG",
		5:   "ALL_TERRITORY_CODE_AI",
		6:   "ALL_TERRITORY_CODE_AL",
		7:   "ALL_TERRITORY_CODE_AM",
		8:   "ALL_TERRITORY_CODE_AN",
		9:   "ALL_TERRITORY_CODE_AO",
		10:  "ALL_TERRITORY_CODE_AQ",
		11:  "ALL_TERRITORY_CODE_AR",
		12:  "ALL_TERRITORY_CODE_AS",
		13:  "ALL_TERRITORY_CODE_AT",
		14:  "ALL_TERRITORY_CODE_AU",
		15:  "ALL_TERRITORY_CODE_AW",
		16:  "ALL_TERRITORY_CODE_AX",
		17:  "ALL_TERRITORY_CODE_AZ",
		18:  "ALL_TERRITORY_CODE_BA",
		19:  "ALL_TERRITORY_CODE_BB",
		20:  "ALL_TERRITORY_CODE_BD",
		21:  "ALL_TERRITORY_CODE_BE",
		22:  "ALL_TERRITORY_CODE_BF",
		23:  "ALL_TERRITORY_CODE_BG",
		24:  "ALL_TERRITORY_CODE_BH",
		25:  "ALL_TERRITORY_CODE_BI",
		26:  "ALL_TERRITORY_CODE_BJ",
		27:  "ALL_TERRITORY_CODE_BL",
		28:  "ALL_TERRITORY_CODE_BM",
		29:  "ALL_TERRITORY_CODE_BN",
		30:  "ALL_TERRITORY_CODE_BO",
		31:  "ALL_TERRITORY_CODE_BQ",
		32:  "ALL_TERRITORY_CODE_BR",
		33:  "ALL_TERRITORY_CODE_BS",
		34:  "ALL_TERRITORY_CODE_BT",
		35:  "ALL_TERRITORY_CODE_BV",
		36:  "ALL_TERRITORY_CODE_BW",
		37:  "ALL_TERRITORY_CODE_BY",
		38:  "ALL_TERRITORY_CODE_BZ",
		39:  "ALL_TERRITORY_CODE_CA",
		40:  "ALL_TERRITORY_CODE_CC",
		41:  "ALL_TERRITORY_CODE_CD",
		42:  "ALL_TERRITORY_CODE_CF",
		43:  "ALL_TERRITORY_CODE_CG",
		44:  "ALL_TERRITORY_CODE_CH",
		45:  "ALL_TERRITORY_CODE_CI",
		46:  "ALL_TERRITORY_CODE_CK",
		47:  "ALL_TERRITORY_CODE_CL",
		48:  "ALL_TERRITORY_CODE_CM",
		49:  "ALL_TERRITORY_CODE_CN",
		50:  "ALL_TERRITORY_CODE_CO",
		51:  "ALL_TERRITORY_CODE_CR",
		52:  "ALL_TERRITORY_CODE_CS",
		53:  "ALL_TERRITORY_CODE_CU",
		54:  "ALL_TERRITORY_CODE_CV",
		55:  "ALL_TERRITORY_CODE_CW",
		56:  "ALL_TERRITORY_CODE_CX",
		57:  "ALL_TERRITORY_CODE_CY",
		58:  "ALL_TERRITORY_CODE_CZ",
		59:  "ALL_TERRITORY_CODE_DE",
		60:  "ALL_TERRITORY_CODE_DJ",
		61:  "ALL_TERRITORY_CODE_DK",
		62:  "ALL_TERRITORY_CODE_DM",
		63:  "ALL_TERRITORY_CODE_DO",
		64:  "ALL_TERRITORY_CODE_DZ",
		65:  "ALL_TERRITORY_CODE_EC",
		66:  "ALL_TERRITORY_CODE_EE",
		67:  "ALL_TERRITORY_CODE_EG",
		68:  "ALL_TERRITORY_CODE_EH",
		69:  "ALL_TERRITORY_CODE_ER",
		70:  "ALL_TERRITORY_CODE_ES",
		71:  "ALL_TERRITORY_CODE_ES_CE",
		72:  "ALL_TERRITORY_CODE_ES_CN",
		73:  "ALL_TERRITORY_CODE_ES_ML",
		74:  "ALL_TERRITORY_CODE_ET",
		75:  "ALL_TERRITORY_CODE_FI",
		76:  "ALL_TERRITORY_CODE_FJ",
		77:  "ALL_TERRITORY_CODE_FK",
		78:  "ALL_TERRITORY_CODE_FM",
		79:  "ALL_TERRITORY_CODE_FO",
		80:  "ALL_TERRITORY_CODE_FR",
		81:  "ALL_TERRITORY_CODE_GA",
		82:  "ALL_TERRITORY_CODE_GB",
		83:  "ALL_TERRITORY_CODE_GD",
		84:  "ALL_TERRITORY_CODE_GE",
		85:  "ALL_TERRITORY_CODE_GF",
		86:  "ALL_TERRITORY_CODE_GG",
		87:  "ALL_TERRITORY_CODE_GH",
		88:  "ALL_TERRITORY_CODE_GI",
		89:  "ALL_TERRITORY_CODE_GL",
		90:  "ALL_TERRITORY_CODE_GM",
		91:  "ALL_TERRITORY_CODE_GN",
		92:  "ALL_TERRITORY_CODE_GP",
		93:  "ALL_TERRITORY_CODE_GQ",
		94:  "ALL_TERRITORY_CODE_GR",
		95:  "ALL_TERRITORY_CODE_GS",
		96:  "ALL_TERRITORY_CODE_GT",
		97:  "ALL_TERRITORY_CODE_GU",
		98:  "ALL_TERRITORY_CODE_GW",
		99:  "ALL_TERRITORY_CODE_GY",
		100: "ALL_TERRITORY_CODE_HK",
		101: "ALL_TERRITORY_CODE_HM",
		102: "ALL_TERRITORY_CODE_HN",
		103: "ALL_TERRITORY_CODE_HR",
		104: "ALL_TERRITORY_CODE_HT",
		105: "ALL_TERRITORY_CODE_HU",
		106: "ALL_TERRITORY_CODE_ID",
		107: "ALL_TERRITORY_CODE_IE",
		108: "ALL_TERRITORY_CODE_IL",
		109: "ALL_TERRITORY_CODE_IM",
		110: "ALL_TERRITORY_CODE_IN",
		111: "ALL_TERRITORY_CODE_IO",
		112: "ALL_TERRITORY_CODE_IQ",
		113: "ALL_TERRITORY_CODE_IR",
		114: "ALL_TERRITORY_CODE_IS",
		115: "ALL_TERRITORY_CODE_IT",
		116: "ALL_TERRITORY_CODE_JE",
		117: "ALL_TERRITORY_CODE_JM",
		118: "ALL_TERRITORY_CODE_JO",
		119: "ALL_TERRITORY_CODE_JP",
		120: "ALL_TERRITORY_CODE_KE",
		121: "ALL_TERRITORY_CODE_KG",
		122: "ALL_TERRITORY_CODE_KH",
		123: "ALL_TERRITORY_CODE_KI",
		124: "ALL_TERRITORY_CODE_KM",
		125: "ALL_TERRITORY_CODE_KN",
		126: "ALL_TERRITORY_CODE_KP",
		127: "ALL_TERRITORY_CODE_KR",
		128: "ALL_TERRITORY_CODE_KW",
		129: "ALL_TERRITORY_CODE_KY",
		130: "ALL_TERRITORY_CODE_KZ",
		131: "ALL_TERRITORY_CODE_LA",
		132: "ALL_TERRITORY_CODE_LB",
		133: "ALL_TERRITORY_CODE_LC",
		134: "ALL_TERRITORY_CODE_LI",
		135: "ALL_TERRITORY_CODE_LK",
		136: "ALL_TERRITORY_CODE_LR",
		137: "ALL_TERRITORY_CODE_LS",
		138: "ALL_TERRITORY_CODE_LT",
		139: "ALL_TERRITORY_CODE_LU",
		140: "ALL_TERRITORY_CODE_LV",
		141: "ALL_TERRITORY_CODE_LY",
		142: "ALL_TERRITORY_CODE_MA",
		143: "ALL_TERRITORY_CODE_MC",
		144: "ALL_TERRITORY_CODE_MD",
		145: "ALL_TERRITORY_CODE_ME",
		146: "ALL_TERRITORY_CODE_MF",
		147: "ALL_TERRITORY_CODE_MG",
		148: "ALL_TERRITORY_CODE_MH",
		149: "ALL_TERRITORY_CODE_MK",
		150: "ALL_TERRITORY_CODE_ML",
		151: "ALL_TERRITORY_CODE_MM",
		152: "ALL_TERRITORY_CODE_MN",
		153: "ALL_TERRITORY_CODE_MO",
		154: "ALL_TERRITORY_CODE_MP",
		155: "ALL_TERRITORY_CODE_MQ",
		156: "ALL_TERRITORY_CODE_MR",
		157: "ALL_TERRITORY_CODE_MS",
		158: "ALL_TERRITORY_CODE_MT",
		159: "ALL_TERRITORY_CODE_MU",
		160: "ALL_TERRITORY_CODE_MV",
		161: "ALL_TERRITORY_CODE_MW",
		162: "ALL_TERRITORY_CODE_MX",
		163: "ALL_TERRITORY_CODE_MY",
		164: "ALL_TERRITORY_CODE_MZ",
		165: "ALL_TERRITORY_CODE_NA",
		166: "ALL_TERRITORY_CODE_NC",
		167: "ALL_TERRITORY_CODE_NE",
		168: "ALL_TERRITORY_CODE_NF",
		169: "ALL_TERRITORY_CODE_NG",
		170: "ALL_TERRITORY_CODE_NI",
		171: "ALL_TERRITORY_CODE_NL",
		172: "ALL_TERRITORY_CODE_NO",
		173: "ALL_TERRITORY_CODE_NP",
		174: "ALL_TERRITORY_CODE_NR",
		175: "ALL_TERRITORY_CODE_NU",
		176: "ALL_TERRITORY_CODE_NZ",
		177: "ALL_TERRITORY_CODE_OM",
		178: "ALL_TERRITORY_CODE_PA",
		179: "ALL_TERRITORY_CODE_PE",
		180: "ALL_TERRITORY_CODE_PF",
		181: "ALL_TERRITORY_CODE_PG",
		182: "ALL_TERRITORY_CODE_PH",
		183: "ALL_TERRITORY_CODE_PK",
		184: "ALL_TERRITORY_CODE_PL",
		185: "ALL_TERRITORY_CODE_PM",
		186: "ALL_TERRITORY_CODE_PN",
		187: "ALL_TERRITORY_CODE_PR",
		188: "ALL_TERRITORY_CODE_PS",
		189: "ALL_TERRITORY_CODE_PT",
		190: "ALL_TERRITORY_CODE_PW",
		191: "ALL_TERRITORY_CODE_PY",
		192: "ALL_TERRITORY_CODE_QA",
		193: "ALL_TERRITORY_CODE_RE",
		194: "ALL_TERRITORY_CODE_RO",
		195: "ALL_TERRITORY_CODE_RS",
		196: "ALL_TERRITORY_CODE_RU",
		197: "ALL_TERRITORY_CODE_RW",
		198: "ALL_TERRITORY_CODE_SA",
		199: "ALL_TERRITORY_CODE_SB",
		200: "ALL_TERRITORY_CODE_SC",
		201: "ALL_TERRITORY_CODE_SD",
		202: "ALL_TERRITORY_CODE_SE",
		203: "ALL_TERRITORY_CODE_SG",
		204: "ALL_TERRITORY_CODE_SH",
		205: "ALL_TERRITORY_CODE_SI",
		206: "ALL_TERRITORY_CODE_SJ",
		207: "ALL_TERRITORY_CODE_SK",
		208: "ALL_TERRITORY_CODE_SL",
		209: "ALL_TERRITORY_CODE_SM",
		210: "ALL_TERRITORY_CODE_SN",
		211: "ALL_TERRITORY_CODE_SO",
		212: "ALL_TERRITORY_CODE_SR",
		213: "ALL_TERRITORY_CODE_SS",
		214: "ALL_TERRITORY_CODE_ST",
		215: "ALL_TERRITORY_CODE_SV",
		216: "ALL_TERRITORY_CODE_SX",
		217: "ALL_TERRITORY_CODE_SY",
		218: "ALL_TERRITORY_CODE_SZ",
		219: "ALL_TERRITORY_CODE_TC",
		220: "ALL_TERRITORY_CODE_TD",
		221: "ALL_TERRITORY_CODE_TF",
		222: "ALL_TERRITORY_CODE_TG",
		223: "ALL_TERRITORY_CODE_TH",
		224: "ALL_TERRITORY_CODE_TJ",
		225: "ALL_TERRITORY_CODE_TK",
		226: "ALL_TERRITORY_CODE_TL",
		227: "ALL_TERRITORY_CODE_TM",
		228: "ALL_TERRITORY_CODE_TN",
		229: "ALL_TERRITORY_CODE_TO",
		230: "ALL_TERRITORY_CODE_TR",
		231: "ALL_TERRITORY_CODE_TT",
		232: "ALL_TERRITORY_CODE_TV",
		233: "ALL_TERRITORY_CODE_TW",
		234: "ALL_TERRITORY_CODE_TZ",
		235: "ALL_TERRITORY_CODE_UA",
		236: "ALL_TERRITORY_CODE_UG",
		237: "ALL_TERRITORY_CODE_UM",
		238: "ALL_TERRITORY_CODE_US",
		239: "ALL_TERRITORY_CODE_UY",
		240: "ALL_TERRITORY_CODE_UZ",
		241: "ALL_TERRITORY_CODE_VA",
		242: "ALL_TERRITORY_CODE_VC",
		243: "ALL_TERRITORY_CODE_VE",
		244: "ALL_TERRITORY_CODE_VG",
		245: "ALL_TERRITORY_CODE_VI",
		246: "ALL_TERRITORY_CODE_VN",
		247: "ALL_TERRITORY_CODE_VU",
		248: "ALL_TERRITORY_CODE_WF",
		249: "ALL_TERRITORY_CODE_WS",
		250: "ALL_TERRITORY_CODE_YE",
		251: "ALL_TERRITORY_CODE_YT",
		252: "ALL_TERRITORY_CODE_ZA",
		253: "ALL_TERRITORY_CODE_ZM",
		254: "ALL_TERRITORY_CODE_ZW",
		255: "ALL_TERRITORY_CODE_E_4",
		256: "ALL_TERRITORY_CODE_E_8",
		257: "ALL_TERRITORY_CODE_E_12",
		258: "ALL_TERRITORY_CODE_E_20",
		259: "ALL_TERRITORY_CODE_E_24",
		260: "ALL_TERRITORY_CODE_E_28",
		261: "ALL_TERRITORY_CODE_E_31",
		262: "ALL_TERRITORY_CODE_E_32",
		263: "ALL_TERRITORY_CODE_E_36",
		264: "ALL_TERRITORY_CODE_E_40",
		265: "ALL_TERRITORY_CODE_E_44",
		266: "ALL_TERRITORY_CODE_E_48",
		267: "ALL_TERRITORY_CODE_E_50",
		268: "ALL_TERRITORY_CODE_E_51",
		269: "ALL_TERRITORY_CODE_E_52",
		270: "ALL_TERRITORY_CODE_E_56",
		271: "ALL_TERRITORY_CODE_E_64",
		272: "ALL_TERRITORY_CODE_E_68",
		273: "ALL_TERRITORY_CODE_E_70",
		274: "ALL_TERRITORY_CODE_E_72",
		275: "ALL_TERRITORY_CODE_E_76",
		276: "ALL_TERRITORY_CODE_E_84",
		277: "ALL_TERRITORY_CODE_E_90",
		278: "ALL_TERRITORY_CODE_E_96",
		279: "ALL_TERRITORY_CODE_E_100",
		280: "ALL_TERRITORY_CODE_E_104",
		281: "ALL_TERRITORY_CODE_E_108",
		282: "ALL_TERRITORY_CODE_E_112",
		283: "ALL_TERRITORY_CODE_E_116",
		284: "ALL_TERRITORY_CODE_E_120",
		285: "ALL_TERRITORY_CODE_E_124",
		286: "ALL_TERRITORY_CODE_E_132",
		287: "ALL_TERRITORY_CODE_E_140",
		288: "ALL_TERRITORY_CODE_E_144",
		289: "ALL_TERRITORY_CODE_E_148",
		290: "ALL_TERRITORY_CODE_E_152",
		291: "ALL_TERRITORY_CODE_E_156",
		292: "ALL_TERRITORY_CODE_E_158",
		293: "ALL_TERRITORY_CODE_E_170",
		294: "ALL_TERRITORY_CODE_E_174",
		295: "ALL_TERRITORY_CODE_E_178",
		296: "ALL_TERRITORY_CODE_E_180",
		297: "ALL_TERRITORY_CODE_E_188",
		298: "ALL_TERRITORY_CODE_E_191",
		299: "ALL_TERRITORY_CODE_E_192",
		300: "ALL_TERRITORY_CODE_E_196",
		301: "ALL_TERRITORY_CODE_E_200",
		302: "ALL_TERRITORY_CODE_E_203",
		303: "ALL_TERRITORY_CODE_E_204",
		304: "ALL_TERRITORY_CODE_E_208",
		305: "ALL_TERRITORY_CODE_E_212",
		306: "ALL_TERRITORY_CODE_E_214",
		307: "ALL_TERRITORY_CODE_E_218",
		308: "ALL_TERRITORY_CODE_E_222",
		309: "ALL_TERRITORY_CODE_E_226",
		310: "ALL_TERRITORY_CODE_E_230",
		311: "ALL_TERRITORY_CODE_E_231",
		312: "ALL_TERRITORY_CODE_E_232",
		313: "ALL_TERRITORY_CODE_E_233",
		314: "ALL_TERRITORY_CODE_E_242",
		315: "ALL_TERRITORY_CODE_E_246",
		316: "ALL_TERRITORY_CODE_E_250",
		317: "ALL_TERRITORY_CODE_E_258",
		318: "ALL_TERRITORY_CODE_E_262",
		319: "ALL_TERRITORY_CODE_E_266",
		320: "ALL_TERRITORY_CODE_E_268",
		321: "ALL_TERRITORY_CODE_E_270",
		322: "ALL_TERRITORY_CODE_E_276",
		323: "ALL_TERRITORY_CODE_E_278",
		324: "ALL_TERRITORY_CODE_E_280",
		325: "ALL_TERRITORY_CODE_E_288",
		326: "ALL_TERRITORY_CODE_E_296",
		327: "ALL_TERRITORY_CODE_E_300",
		328: "ALL_TERRITORY_CODE_E_308",
		329: "ALL_TERRITORY_CODE_E_320",
		330: "ALL_TERRITORY_CODE_E_324",
		331: "ALL_TERRITORY_CODE_E_328",
		332: "ALL_TERRITORY_CODE_E_332",
		333: "ALL_TERRITORY_CODE_E_336",
		334: "ALL_TERRITORY_CODE_E_340",
		335: "ALL_TERRITORY_CODE_E_344",
		336: "ALL_TERRITORY_CODE_E_348",
		337: "ALL_TERRITORY_CODE_E_352",
		338: "ALL_TERRITORY_CODE_E_356",
		339: "ALL_TERRITORY_CODE_E_360",
		340: "ALL_TERRITORY_CODE_E_364",
		341: "ALL_TERRITORY_CODE_E_368",
		342: "ALL_TERRITORY_CODE_E_372",
		343: "ALL_TERRITORY_CODE_E_376",
		344: "ALL_TERRITORY_CODE_E_380",
		345: "ALL_TERRITORY_CODE_E_384",
		346: "ALL_TERRITORY_CODE_E_388",
		347: "ALL_TERRITORY_CODE_E_392",
		348: "ALL_TERRITORY_CODE_E_398",
		349: "ALL_TERRITORY_CODE_E_400",
		350: "ALL_TERRITORY_CODE_E_404",
		351: "ALL_TERRITORY_CODE_E_408",
		352: "ALL_TERRITORY_CODE_E_410",
		353: "ALL_TERRITORY_CODE_E_414",
		354: "ALL_TERRITORY_CODE_E_417",
		355: "ALL_TERRITORY_CODE_E_418",
		356: "ALL_TERRITORY_CODE_E_422",
		357: "ALL_TERRITORY_CODE_E_426",
		358: "ALL_TERRITORY_CODE_E_428",
		359: "ALL_TERRITORY_CODE_E_430",
		360: "ALL_TERRITORY_CODE_E_434",
		361: "ALL_TERRITORY_CODE_E_438",
		362: "ALL_TERRITORY_CODE_E_440",
		363: "ALL_TERRITORY_CODE_E_442",
		364: "ALL_TERRITORY_CODE_E_450",
		365: "ALL_TERRITORY_CODE_E_454",
		366: "ALL_TERRITORY_CODE_E_458",
		367: "ALL_TERRITORY_CODE_E_462",
		368: "ALL_TERRITORY_CODE_E_466",
		369: "ALL_TERRITORY_CODE_E_470",
		370: "ALL_TERRITORY_CODE_E_478",
		371: "ALL_TERRITORY_CODE_E_480",
		372: "ALL_TERRITORY_CODE_E_484",
		373: "ALL_TERRITORY_CODE_E_492",
		374: "ALL_TERRITORY_CODE_E_496",
		375: "ALL_TERRITORY_CODE_E_498",
		376: "ALL_TERRITORY_CODE_E_499",
		377: "ALL_TERRITORY_CODE_E_504",
		378: "ALL_TERRITORY_CODE_E_508",
		379: "ALL_TERRITORY_CODE_E_512",
		380: "ALL_TERRITORY_CODE_E_516",
		381: "ALL_TERRITORY_CODE_E_520",
		382: "ALL_TERRITORY_CODE_E_524",
		383: "ALL_TERRITORY_CODE_E_528",
		384: "ALL_TERRITORY_CODE_E_540",
		385: "ALL_TERRITORY_CODE_E_548",
		386: "ALL_TERRITORY_CODE_E_554",
		387: "ALL_TERRITORY_CODE_E_558",
		388: "ALL_TERRITORY_CODE_E_562",
		389: "ALL_TERRITORY_CODE_E_566",
		390: "ALL_TERRITORY_CODE_E_578",
		391: "ALL_TERRITORY_CODE_E_583",
		392: "ALL_TERRITORY_CODE_E_584",
		393: "ALL_TERRITORY_CODE_E_585",
		394: "ALL_TERRITORY_CODE_E_586",
		395: "ALL_TERRITORY_CODE_E_591",
		396: "ALL_TERRITORY_CODE_E_598",
		397: "ALL_TERRITORY_CODE_E_600",
		398: "ALL_TERRITORY_CODE_E_604",
		399: "ALL_TERRITORY_CODE_E_608",
		400: "ALL_TERRITORY_CODE_E_616",
		401: "ALL_TERRITORY_CODE_E_620",
		402: "ALL_TERRITORY_CODE_E_624",
		403: "ALL_TERRITORY_CODE_E_626",
		404: "ALL_TERRITORY_CODE_E_630",
		405: "ALL_TERRITORY_CODE_E_634",
		406: "ALL_TERRITORY_CODE_E_642",
		407: "ALL_TERRITORY_CODE_E_643",
		408: "ALL_TERRITORY_CODE_E_646",
		409: "ALL_TERRITORY_CODE_E_659",
		410: "ALL_TERRITORY_CODE_E_662",
		411: "ALL_TERRITORY_CODE_E_670",
		412: "ALL_TERRITORY_CODE_E_674",
		413: "ALL_TERRITORY_CODE_E_678",
		414: "ALL_TERRITORY_CODE_E_682",
		415: "ALL_TERRITORY_CODE_E_686",
		416: "ALL_TERRITORY_CODE_E_688",
		417: "ALL_TERRITORY_CODE_E_690",
		418: "ALL_TERRITORY_CODE_E_694",
		419: "ALL_TERRITORY_CODE_E_702",
		420: "ALL_TERRITORY_CODE_E_703",
		421: "ALL_TERRITORY_CODE_E_704",
		422: "ALL_TERRITORY_CODE_E_705",
		423: "ALL_TERRITORY_CODE_E_706",
		424: "ALL_TERRITORY_CODE_E_710",
		425: "ALL_TERRITORY_CODE_E_716",
		426: "ALL_TERRITORY_CODE_E_720",
		427: "ALL_TERRITORY_CODE_E_724",
		428: "ALL_TERRITORY_CODE_E_728",
		429: "ALL_TERRITORY_CODE_E_729",
		430: "ALL_TERRITORY_CODE_E_732",
		431: "ALL_TERRITORY_CODE_E_736",
		432: "ALL_TERRITORY_CODE_E_740",
		433: "ALL_TERRITORY_CODE_E_748",
		434: "ALL_TERRITORY_CODE_E_752",
		435: "ALL_TERRITORY_CODE_E_756",
		436: "ALL_TERRITORY_CODE_E_760",
		437: "ALL_TERRITORY_CODE_E_762",
		438: "ALL_TERRITORY_CODE_E_764",
		439: "ALL_TERRITORY_CODE_E_768",
		440: "ALL_TERRITORY_CODE_E_776",
		441: "ALL_TERRITORY_CODE_E_780",
		442: "ALL_TERRITORY_CODE_E_784",
		443: "ALL_TERRITORY_CODE_E_788",
		444: "ALL_TERRITORY_CODE_E_792",
		445: "ALL_TERRITORY_CODE_E_795",
		446: "ALL_TERRITORY_CODE_E_798",
		447: "ALL_TERRITORY_CODE_E_800",
		448: "ALL_TERRITORY_CODE_E_804",
		449: "ALL_TERRITORY_CODE_E_807",
		450: "ALL_TERRITORY_CODE_E_810",
		451: "ALL_TERRITORY_CODE_E_818",
		452: "ALL_TERRITORY_CODE_E_826",
		453: "ALL_TERRITORY_CODE_E_834",
		454: "ALL_TERRITORY_CODE_E_840",
		455: "ALL_TERRITORY_CODE_E_854",
		456: "ALL_TERRITORY_CODE_E_858",
		457: "ALL_TERRITORY_CODE_E_860",
		458: "ALL_TERRITORY_CODE_E_862",
		459: "ALL_TERRITORY_CODE_E_882",
		460: "ALL_TERRITORY_CODE_E_886",
		461: "ALL_TERRITORY_CODE_E_887",
		462: "ALL_TERRITORY_CODE_E_890",
		463: "ALL_TERRITORY_CODE_E_891",
		464: "ALL_TERRITORY_CODE_E_894",
		465: "ALL_TERRITORY_CODE_E_2100",
		466: "ALL_TERRITORY_CODE_E_2101",
		467: "ALL_TERRITORY_CODE_E_2102",
		468: "ALL_TERRITORY_CODE_E_2103",
		469: "ALL_TERRITORY_CODE_E_2104",
		470: "ALL_TERRITORY_CODE_E_2105",
		471: "ALL_TERRITORY_CODE_E_2106",
		472: "ALL_TERRITORY_CODE_E_2107",
		473: "ALL_TERRITORY_CODE_E_2108",
		474: "ALL_TERRITORY_CODE_E_2109",
		475: "ALL_TERRITORY_CODE_E_2110",
		476: "ALL_TERRITORY_CODE_E_2111",
		477: "ALL_TERRITORY_CODE_E_2112",
		478: "ALL_TERRITORY_CODE_E_2113",
		479: "ALL_TERRITORY_CODE_E_2114",
		480: "ALL_TERRITORY_CODE_E_2115",
		481: "ALL_TERRITORY_CODE_E_2116",
		482: "ALL_TERRITORY_CODE_E_2117",
		483: "ALL_TERRITORY_CODE_E_2118",
		484: "ALL_TERRITORY_CODE_E_2119",
		485: "ALL_TERRITORY_CODE_E_2120",
		486: "ALL_TERRITORY_CODE_E_2121",
		487: "ALL_TERRITORY_CODE_E_2122",
		488: "ALL_TERRITORY_CODE_E_2123",
		489: "ALL_TERRITORY_CODE_E_2124",
		490: "ALL_TERRITORY_CODE_E_2125",
		491: "ALL_TERRITORY_CODE_E_2126",
		492: "ALL_TERRITORY_CODE_E_2127",
		493: "ALL_TERRITORY_CODE_E_2128",
		494: "ALL_TERRITORY_CODE_E_2129",
		495: "ALL_TERRITORY_CODE_E_2130",
		496: "ALL_TERRITORY_CODE_E_2131",
		497: "ALL_TERRITORY_CODE_E_2132",
		498: "ALL_TERRITORY_CODE_E_2133",
		499: "ALL_TERRITORY_CODE_E_2134",
		500: "ALL_TERRITORY_CODE_E_2136",
		501: "ALL_TERRITORY_CODE_XK",
		502: "ALL_TERRITORY_CODE_WORLDWIDE",
		503: "ALL_TERRITORY_CODE_AIDJ",
		504: "ALL_TERRITORY_CODE_ANHH",
		505: "ALL_TERRITORY_CODE_BQAQ",
		506: "ALL_TERRITORY_CODE_BUMM",
		507: "ALL_TERRITORY_CODE_BYAA",
		508: "ALL_TERRITORY_CODE_CSHH",
		509: "ALL_TERRITORY_CODE_CSXX",
		510: "ALL_TERRITORY_CODE_CTKI",
		511: "ALL_TERRITORY_CODE_DDDE",
		512: "ALL_TERRITORY_CODE_DYBJ",
		513: "ALL_TERRITORY_CODE_FQHH",
		514: "ALL_TERRITORY_CODE_FXFR",
		515: "ALL_TERRITORY_CODE_GEHH",
		516: "ALL_TERRITORY_CODE_HVBF",
		517: "ALL_TERRITORY_CODE_JTUM",
		518: "ALL_TERRITORY_CODE_MIUM",
		519: "ALL_TERRITORY_CODE_NHVU",
		520: "ALL_TERRITORY_CODE_NQAQ",
		521: "ALL_TERRITORY_CODE_NTHH",
		522: "ALL_TERRITORY_CODE_PCHH",
		523: "ALL_TERRITORY_CODE_PUUM",
		524: "ALL_TERRITORY_CODE_PZPA",
		525: "ALL_TERRITORY_CODE_RHZW",
		526: "ALL_TERRITORY_CODE_SKIN",
		527: "ALL_TERRITORY_CODE_SUHH",
		528: "ALL_TERRITORY_CODE_TPTL",
		529: "ALL_TERRITORY_CODE_VDVN",
		530: "ALL_TERRITORY_CODE_WKUM",
		531: "ALL_TERRITORY_CODE_YDYE",
		532: "ALL_TERRITORY_CODE_YUCS",
		533: "ALL_TERRITORY_CODE_ZRCD",
		534: "ALL_TERRITORY_CODE_E_446",
	}
	AllTerritoryCode_value = map[string]int32{
		"ALL_TERRITORY_CODE_UNSPECIFIED": 0,
		"ALL_TERRITORY_CODE_AD":          1,
		"ALL_TERRITORY_CODE_AE":          2,
		"ALL_TERRITORY_CODE_AF":          3,
		"ALL_TERRITORY_CODE_AG":          4,
		"ALL_TERRITORY_CODE_AI":          5,
		"ALL_TERRITORY_CODE_AL":          6,
		"ALL_TERRITORY_CODE_AM":          7,
		"ALL_TERRITORY_CODE_AN":          8,
		"ALL_TERRITORY_CODE_AO":          9,
		"ALL_TERRITORY_CODE_AQ":          10,
		"ALL_TERRITORY_CODE_AR":          11,
		"ALL_TERRITORY_CODE_AS":          12,
		"ALL_TERRITORY_CODE_AT":          13,
		"ALL_TERRITORY_CODE_AU":          14,
		"ALL_TERRITORY_CODE_AW":          15,
		"ALL_TERRITORY_CODE_AX":          16,
		"ALL_TERRITORY_CODE_AZ":          17,
		"ALL_TERRITORY_CODE_BA":          18,
		"ALL_TERRITORY_CODE_BB":          19,
		"ALL_TERRITORY_CODE_BD":          20,
		"ALL_TERRITORY_CODE_BE":          21,
		"ALL_TERRITORY_CODE_BF":          22,
		"ALL_TERRITORY_CODE_BG":          23,
		"ALL_TERRITORY_CODE_BH":          24,
		"ALL_TERRITORY_CODE_BI":          25,
		"ALL_TERRITORY_CODE_BJ":          26,
		"ALL_TERRITORY_CODE_BL":          27,
		"ALL_TERRITORY_CODE_BM":          28,
		"ALL_TERRITORY_CODE_BN":          29,
		"ALL_TERRITORY_CODE_BO":          30,
		"ALL_TERRITORY_CODE_BQ":          31,
		"ALL_TERRITORY_CODE_BR":          32,
		"ALL_TERRITORY_CODE_BS":          33,
		"ALL_TERRITORY_CODE_BT":          34,
		"ALL_TERRITORY_CODE_BV":          35,
		"ALL_TERRITORY_CODE_BW":          36,
		"ALL_TERRITORY_CODE_BY":          37,
		"ALL_TERRITORY_CODE_BZ":          38,
		"ALL_TERRITORY_CODE_CA":          39,
		"ALL_TERRITORY_CODE_CC":          40,
		"ALL_TERRITORY_CODE_CD":          41,
		"ALL_TERRITORY_CODE_CF":          42,
		"ALL_TERRITORY_CODE_CG":          43,
		"ALL_TERRITORY_CODE_CH":          44,
		"ALL_TERRITORY_CODE_CI":          45,
		"ALL_TERRITORY_CODE_CK":          46,
		"ALL_TERRITORY_CODE_CL":          47,
		"ALL_TERRITORY_CODE_CM":          48,
		"ALL_TERRITORY_CODE_CN":          49,
		"ALL_TERRITORY_CODE_CO":          50,
		"ALL_TERRITORY_CODE_CR":          51,
		"ALL_TERRITORY_CODE_CS":          52,
		"ALL_TERRITORY_CODE_CU":          53,
		"ALL_TERRITORY_CODE_CV":          54,
		"ALL_TERRITORY_CODE_CW":          55,
		"ALL_TERRITORY_CODE_CX":          56,
		"ALL_TERRITORY_CODE_CY":          57,
		"ALL_TERRITORY_CODE_CZ":          58,
		"ALL_TERRITORY_CODE_DE":          59,
		"ALL_TERRITORY_CODE_DJ":          60,
		"ALL_TERRITORY_CODE_DK":          61,
		"ALL_TERRITORY_CODE_DM":          62,
		"ALL_TERRITORY_CODE_DO":          63,
		"ALL_TERRITORY_CODE_DZ":          64,
		"ALL_TERRITORY_CODE_EC":          65,
		"ALL_TERRITORY_CODE_EE":          66,
		"ALL_TERRITORY_CODE_EG":          67,
		"ALL_TERRITORY_CODE_EH":          68,
		"ALL_TERRITORY_CODE_ER":          69,
		"ALL_TERRITORY_CODE_ES":          70,
		"ALL_TERRITORY_CODE_ES_CE":       71,
		"ALL_TERRITORY_CODE_ES_CN":       72,
		"ALL_TERRITORY_CODE_ES_ML":       73,
		"ALL_TERRITORY_CODE_ET":          74,
		"ALL_TERRITORY_CODE_FI":          75,
		"ALL_TERRITORY_CODE_FJ":          76,
		"ALL_TERRITORY_CODE_FK":          77,
		"ALL_TERRITORY_CODE_FM":          78,
		"ALL_TERRITORY_CODE_FO":          79,
		"ALL_TERRITORY_CODE_FR":          80,
		"ALL_TERRITORY_CODE_GA":          81,
		"ALL_TERRITORY_CODE_GB":          82,
		"ALL_TERRITORY_CODE_GD":          83,
		"ALL_TERRITORY_CODE_GE":          84,
		"ALL_TERRITORY_CODE_GF":          85,
		"ALL_TERRITORY_CODE_GG":          86,
		"ALL_TERRITORY_CODE_GH":          87,
		"ALL_TERRITORY_CODE_GI":          88,
		"ALL_TERRITORY_CODE_GL":          89,
		"ALL_TERRITORY_CODE_GM":          90,
		"ALL_TERRITORY_CODE_GN":          91,
		"ALL_TERRITORY_CODE_GP":          92,
		"ALL_TERRITORY_CODE_GQ":          93,
		"ALL_TERRITORY_CODE_GR":          94,
		"ALL_TERRITORY_CODE_GS":          95,
		"ALL_TERRITORY_CODE_GT":          96,
		"ALL_TERRITORY_CODE_GU":          97,
		"ALL_TERRITORY_CODE_GW":          98,
		"ALL_TERRITORY_CODE_GY":          99,
		"ALL_TERRITORY_CODE_HK":          100,
		"ALL_TERRITORY_CODE_HM":          101,
		"ALL_TERRITORY_CODE_HN":          102,
		"ALL_TERRITORY_CODE_HR":          103,
		"ALL_TERRITORY_CODE_HT":          104,
		"ALL_TERRITORY_CODE_HU":          105,
		"ALL_TERRITORY_CODE_ID":          106,
		"ALL_TERRITORY_CODE_IE":          107,
		"ALL_TERRITORY_CODE_IL":          108,
		"ALL_TERRITORY_CODE_IM":          109,
		"ALL_TERRITORY_CODE_IN":          110,
		"ALL_TERRITORY_CODE_IO":          111,
		"ALL_TERRITORY_CODE_IQ":          112,
		"ALL_TERRITORY_CODE_IR":          113,
		"ALL_TERRITORY_CODE_IS":          114,
		"ALL_TERRITORY_CODE_IT":          115,
		"ALL_TERRITORY_CODE_JE":          116,
		"ALL_TERRITORY_CODE_JM":          117,
		"ALL_TERRITORY_CODE_JO":          118,
		"ALL_TERRITORY_CODE_JP":          119,
		"ALL_TERRITORY_CODE_KE":          120,
		"ALL_TERRITORY_CODE_KG":          121,
		"ALL_TERRITORY_CODE_KH":          122,
		"ALL_TERRITORY_CODE_KI":          123,
		"ALL_TERRITORY_CODE_KM":          124,
		"ALL_TERRITORY_CODE_KN":          125,
		"ALL_TERRITORY_CODE_KP":          126,
		"ALL_TERRITORY_CODE_KR":          127,
		"ALL_TERRITORY_CODE_KW":          128,
		"ALL_TERRITORY_CODE_KY":          129,
		"ALL_TERRITORY_CODE_KZ":          130,
		"ALL_TERRITORY_CODE_LA":          131,
		"ALL_TERRITORY_CODE_LB":          132,
		"ALL_TERRITORY_CODE_LC":          133,
		"ALL_TERRITORY_CODE_LI":          134,
		"ALL_TERRITORY_CODE_LK":          135,
		"ALL_TERRITORY_CODE_LR":          136,
		"ALL_TERRITORY_CODE_LS":          137,
		"ALL_TERRITORY_CODE_LT":          138,
		"ALL_TERRITORY_CODE_LU":          139,
		"ALL_TERRITORY_CODE_LV":          140,
		"ALL_TERRITORY_CODE_LY":          141,
		"ALL_TERRITORY_CODE_MA":          142,
		"ALL_TERRITORY_CODE_MC":          143,
		"ALL_TERRITORY_CODE_MD":          144,
		"ALL_TERRITORY_CODE_ME":          145,
		"ALL_TERRITORY_CODE_MF":          146,
		"ALL_TERRITORY_CODE_MG":          147,
		"ALL_TERRITORY_CODE_MH":          148,
		"ALL_TERRITORY_CODE_MK":          149,
		"ALL_TERRITORY_CODE_ML":          150,
		"ALL_TERRITORY_CODE_MM":          151,
		"ALL_TERRITORY_CODE_MN":          152,
		"ALL_TERRITORY_CODE_MO":          153,
		"ALL_TERRITORY_CODE_MP":          154,
		"ALL_TERRITORY_CODE_MQ":          155,
		"ALL_TERRITORY_CODE_MR":          156,
		"ALL_TERRITORY_CODE_MS":          157,
		"ALL_TERRITORY_CODE_MT":          158,
		"ALL_TERRITORY_CODE_MU":          159,
		"ALL_TERRITORY_CODE_MV":          160,
		"ALL_TERRITORY_CODE_MW":          161,
		"ALL_TERRITORY_CODE_MX":          162,
		"ALL_TERRITORY_CODE_MY":          163,
		"ALL_TERRITORY_CODE_MZ":          164,
		"ALL_TERRITORY_CODE_NA":          165,
		"ALL_TERRITORY_CODE_NC":          166,
		"ALL_TERRITORY_CODE_NE":          167,
		"ALL_TERRITORY_CODE_NF":          168,
		"ALL_TERRITORY_CODE_NG":          169,
		"ALL_TERRITORY_CODE_NI":          170,
		"ALL_TERRITORY_CODE_NL":          171,
		"ALL_TERRITORY_CODE_NO":          172,
		"ALL_TERRITORY_CODE_NP":          173,
		"ALL_TERRITORY_CODE_NR":          174,
		"ALL_TERRITORY_CODE_NU":          175,
		"ALL_TERRITORY_CODE_NZ":          176,
		"ALL_TERRITORY_CODE_OM":          177,
		"ALL_TERRITORY_CODE_PA":          178,
		"ALL_TERRITORY_CODE_PE":          179,
		"ALL_TERRITORY_CODE_PF":          180,
		"ALL_TERRITORY_CODE_PG":          181,
		"ALL_TERRITORY_CODE_PH":          182,
		"ALL_TERRITORY_CODE_PK":          183,
		"ALL_TERRITORY_CODE_PL":          184,
		"ALL_TERRITORY_CODE_PM":          185,
		"ALL_TERRITORY_CODE_PN":          186,
		"ALL_TERRITORY_CODE_PR":          187,
		"ALL_TERRITORY_CODE_PS":          188,
		"ALL_TERRITORY_CODE_PT":          189,
		"ALL_TERRITORY_CODE_PW":          190,
		"ALL_TERRITORY_CODE_PY":          191,
		"ALL_TERRITORY_CODE_QA":          192,
		"ALL_TERRITORY_CODE_RE":          193,
		"ALL_TERRITORY_CODE_RO":          194,
		"ALL_TERRITORY_CODE_RS":          195,
		"ALL_TERRITORY_CODE_RU":          196,
		"ALL_TERRITORY_CODE_RW":          197,
		"ALL_TERRITORY_CODE_SA":          198,
		"ALL_TERRITORY_CODE_SB":          199,
		"ALL_TERRITORY_CODE_SC":          200,
		"ALL_TERRITORY_CODE_SD":          201,
		"ALL_TERRITORY_CODE_SE":          202,
		"ALL_TERRITORY_CODE_SG":          203,
		"ALL_TERRITORY_CODE_SH":          204,
		"ALL_TERRITORY_CODE_SI":          205,
		"ALL_TERRITORY_CODE_SJ":          206,
		"ALL_TERRITORY_CODE_SK":          207,
		"ALL_TERRITORY_CODE_SL":          208,
		"ALL_TERRITORY_CODE_SM":          209,
		"ALL_TERRITORY_CODE_SN":          210,
		"ALL_TERRITORY_CODE_SO":          211,
		"ALL_TERRITORY_CODE_SR":          212,
		"ALL_TERRITORY_CODE_SS":          213,
		"ALL_TERRITORY_CODE_ST":          214,
		"ALL_TERRITORY_CODE_SV":          215,
		"ALL_TERRITORY_CODE_SX":          216,
		"ALL_TERRITORY_CODE_SY":          217,
		"ALL_TERRITORY_CODE_SZ":          218,
		"ALL_TERRITORY_CODE_TC":          219,
		"ALL_TERRITORY_CODE_TD":          220,
		"ALL_TERRITORY_CODE_TF":          221,
		"ALL_TERRITORY_CODE_TG":          222,
		"ALL_TERRITORY_CODE_TH":          223,
		"ALL_TERRITORY_CODE_TJ":          224,
		"ALL_TERRITORY_CODE_TK":          225,
		"ALL_TERRITORY_CODE_TL":          226,
		"ALL_TERRITORY_CODE_TM":          227,
		"ALL_TERRITORY_CODE_TN":          228,
		"ALL_TERRITORY_CODE_TO":          229,
		"ALL_TERRITORY_CODE_TR":          230,
		"ALL_TERRITORY_CODE_TT":          231,
		"ALL_TERRITORY_CODE_TV":          232,
		"ALL_TERRITORY_CODE_TW":          233,
		"ALL_TERRITORY_CODE_TZ":          234,
		"ALL_TERRITORY_CODE_UA":          235,
		"ALL_TERRITORY_CODE_UG":          236,
		"ALL_TERRITORY_CODE_UM":          237,
		"ALL_TERRITORY_CODE_US":          238,
		"ALL_TERRITORY_CODE_UY":          239,
		"ALL_TERRITORY_CODE_UZ":          240,
		"ALL_TERRITORY_CODE_VA":          241,
		"ALL_TERRITORY_CODE_VC":          242,
		"ALL_TERRITORY_CODE_VE":          243,
		"ALL_TERRITORY_CODE_VG":          244,
		"ALL_TERRITORY_CODE_VI":          245,
		"ALL_TERRITORY_CODE_VN":          246,
		"ALL_TERRITORY_CODE_VU":          247,
		"ALL_TERRITORY_CODE_WF":          248,
		"ALL_TERRITORY_CODE_WS":          249,
		"ALL_TERRITORY_CODE_YE":          250,
		"ALL_TERRITORY_CODE_YT":          251,
		"ALL_TERRITORY_CODE_ZA":          252,
		"ALL_TERRITORY_CODE_ZM":          253,
		"ALL_TERRITORY_CODE_ZW":          254,
		"ALL_TERRITORY_CODE_E_4":         255,
		"ALL_TERRITORY_CODE_E_8":         256,
		"ALL_TERRITORY_CODE_E_12":        257,
		"ALL_TERRITORY_CODE_E_20":        258,
		"ALL_TERRITORY_CODE_E_24":        259,
		"ALL_TERRITORY_CODE_E_28":        260,
		"ALL_TERRITORY_CODE_E_31":        261,
		"ALL_TERRITORY_CODE_E_32":        262,
		"ALL_TERRITORY_CODE_E_36":        263,
		"ALL_TERRITORY_CODE_E_40":        264,
		"ALL_TERRITORY_CODE_E_44":        265,
		"ALL_TERRITORY_CODE_E_48":        266,
		"ALL_TERRITORY_CODE_E_50":        267,
		"ALL_TERRITORY_CODE_E_51":        268,
		"ALL_TERRITORY_CODE_E_52":        269,
		"ALL_TERRITORY_CODE_E_56":        270,
		"ALL_TERRITORY_CODE_E_64":        271,
		"ALL_TERRITORY_CODE_E_68":        272,
		"ALL_TERRITORY_CODE_E_70":        273,
		"ALL_TERRITORY_CODE_E_72":        274,
		"ALL_TERRITORY_CODE_E_76":        275,
		"ALL_TERRITORY_CODE_E_84":        276,
		"ALL_TERRITORY_CODE_E_90":        277,
		"ALL_TERRITORY_CODE_E_96":        278,
		"ALL_TERRITORY_CODE_E_100":       279,
		"ALL_TERRITORY_CODE_E_104":       280,
		"ALL_TERRITORY_CODE_E_108":       281,
		"ALL_TERRITORY_CODE_E_112":       282,
		"ALL_TERRITORY_CODE_E_116":       283,
		"ALL_TERRITORY_CODE_E_120":       284,
		"ALL_TERRITORY_CODE_E_124":       285,
		"ALL_TERRITORY_CODE_E_132":       286,
		"ALL_TERRITORY_CODE_E_140":       287,
		"ALL_TERRITORY_CODE_E_144":       288,
		"ALL_TERRITORY_CODE_E_148":       289,
		"ALL_TERRITORY_CODE_E_152":       290,
		"ALL_TERRITORY_CODE_E_156":       291,
		"ALL_TERRITORY_CODE_E_158":       292,
		"ALL_TERRITORY_CODE_E_170":       293,
		"ALL_TERRITORY_CODE_E_174":       294,
		"ALL_TERRITORY_CODE_E_178":       295,
		"ALL_TERRITORY_CODE_E_180":       296,
		"ALL_TERRITORY_CODE_E_188":       297,
		"ALL_TERRITORY_CODE_E_191":       298,
		"ALL_TERRITORY_CODE_E_192":       299,
		"ALL_TERRITORY_CODE_E_196":       300,
		"ALL_TERRITORY_CODE_E_200":       301,
		"ALL_TERRITORY_CODE_E_203":       302,
		"ALL_TERRITORY_CODE_E_204":       303,
		"ALL_TERRITORY_CODE_E_208":       304,
		"ALL_TERRITORY_CODE_E_212":       305,
		"ALL_TERRITORY_CODE_E_214":       306,
		"ALL_TERRITORY_CODE_E_218":       307,
		"ALL_TERRITORY_CODE_E_222":       308,
		"ALL_TERRITORY_CODE_E_226":       309,
		"ALL_TERRITORY_CODE_E_230":       310,
		"ALL_TERRITORY_CODE_E_231":       311,
		"ALL_TERRITORY_CODE_E_232":       312,
		"ALL_TERRITORY_CODE_E_233":       313,
		"ALL_TERRITORY_CODE_E_242":       314,
		"ALL_TERRITORY_CODE_E_246":       315,
		"ALL_TERRITORY_CODE_E_250":       316,
		"ALL_TERRITORY_CODE_E_258":       317,
		"ALL_TERRITORY_CODE_E_262":       318,
		"ALL_TERRITORY_CODE_E_266":       319,
		"ALL_TERRITORY_CODE_E_268":       320,
		"ALL_TERRITORY_CODE_E_270":       321,
		"ALL_TERRITORY_CODE_E_276":       322,
		"ALL_TERRITORY_CODE_E_278":       323,
		"ALL_TERRITORY_CODE_E_280":       324,
		"ALL_TERRITORY_CODE_E_288":       325,
		"ALL_TERRITORY_CODE_E_296":       326,
		"ALL_TERRITORY_CODE_E_300":       327,
		"ALL_TERRITORY_CODE_E_308":       328,
		"ALL_TERRITORY_CODE_E_320":       329,
		"ALL_TERRITORY_CODE_E_324":       330,
		"ALL_TERRITORY_CODE_E_328":       331,
		"ALL_TERRITORY_CODE_E_332":       332,
		"ALL_TERRITORY_CODE_E_336":       333,
		"ALL_TERRITORY_CODE_E_340":       334,
		"ALL_TERRITORY_CODE_E_344":       335,
		"ALL_TERRITORY_CODE_E_348":       336,
		"ALL_TERRITORY_CODE_E_352":       337,
		"ALL_TERRITORY_CODE_E_356":       338,
		"ALL_TERRITORY_CODE_E_360":       339,
		"ALL_TERRITORY_CODE_E_364":       340,
		"ALL_TERRITORY_CODE_E_368":       341,
		"ALL_TERRITORY_CODE_E_372":       342,
		"ALL_TERRITORY_CODE_E_376":       343,
		"ALL_TERRITORY_CODE_E_380":       344,
		"ALL_TERRITORY_CODE_E_384":       345,
		"ALL_TERRITORY_CODE_E_388":       346,
		"ALL_TERRITORY_CODE_E_392":       347,
		"ALL_TERRITORY_CODE_E_398":       348,
		"ALL_TERRITORY_CODE_E_400":       349,
		"ALL_TERRITORY_CODE_E_404":       350,
		"ALL_TERRITORY_CODE_E_408":       351,
		"ALL_TERRITORY_CODE_E_410":       352,
		"ALL_TERRITORY_CODE_E_414":       353,
		"ALL_TERRITORY_CODE_E_417":       354,
		"ALL_TERRITORY_CODE_E_418":       355,
		"ALL_TERRITORY_CODE_E_422":       356,
		"ALL_TERRITORY_CODE_E_426":       357,
		"ALL_TERRITORY_CODE_E_428":       358,
		"ALL_TERRITORY_CODE_E_430":       359,
		"ALL_TERRITORY_CODE_E_434":       360,
		"ALL_TERRITORY_CODE_E_438":       361,
		"ALL_TERRITORY_CODE_E_440":       362,
		"ALL_TERRITORY_CODE_E_442":       363,
		"ALL_TERRITORY_CODE_E_450":       364,
		"ALL_TERRITORY_CODE_E_454":       365,
		"ALL_TERRITORY_CODE_E_458":       366,
		"ALL_TERRITORY_CODE_E_462":       367,
		"ALL_TERRITORY_CODE_E_466":       368,
		"ALL_TERRITORY_CODE_E_470":       369,
		"ALL_TERRITORY_CODE_E_478":       370,
		"ALL_TERRITORY_CODE_E_480":       371,
		"ALL_TERRITORY_CODE_E_484":       372,
		"ALL_TERRITORY_CODE_E_492":       373,
		"ALL_TERRITORY_CODE_E_496":       374,
		"ALL_TERRITORY_CODE_E_498":       375,
		"ALL_TERRITORY_CODE_E_499":       376,
		"ALL_TERRITORY_CODE_E_504":       377,
		"ALL_TERRITORY_CODE_E_508":       378,
		"ALL_TERRITORY_CODE_E_512":       379,
		"ALL_TERRITORY_CODE_E_516":       380,
		"ALL_TERRITORY_CODE_E_520":       381,
		"ALL_TERRITORY_CODE_E_524":       382,
		"ALL_TERRITORY_CODE_E_528":       383,
		"ALL_TERRITORY_CODE_E_540":       384,
		"ALL_TERRITORY_CODE_E_548":       385,
		"ALL_TERRITORY_CODE_E_554":       386,
		"ALL_TERRITORY_CODE_E_558":       387,
		"ALL_TERRITORY_CODE_E_562":       388,
		"ALL_TERRITORY_CODE_E_566":       389,
		"ALL_TERRITORY_CODE_E_578":       390,
		"ALL_TERRITORY_CODE_E_583":       391,
		"ALL_TERRITORY_CODE_E_584":       392,
		"ALL_TERRITORY_CODE_E_585":       393,
		"ALL_TERRITORY_CODE_E_586":       394,
		"ALL_TERRITORY_CODE_E_591":       395,
		"ALL_TERRITORY_CODE_E_598":       396,
		"ALL_TERRITORY_CODE_E_600":       397,
		"ALL_TERRITORY_CODE_E_604":       398,
		"ALL_TERRITORY_CODE_E_608":       399,
		"ALL_TERRITORY_CODE_E_616":       400,
		"ALL_TERRITORY_CODE_E_620":       401,
		"ALL_TERRITORY_CODE_E_624":       402,
		"ALL_TERRITORY_CODE_E_626":       403,
		"ALL_TERRITORY_CODE_E_630":       404,
		"ALL_TERRITORY_CODE_E_634":       405,
		"ALL_TERRITORY_CODE_E_642":       406,
		"ALL_TERRITORY_CODE_E_643":       407,
		"ALL_TERRITORY_CODE_E_646":       408,
		"ALL_TERRITORY_CODE_E_659":       409,
		"ALL_TERRITORY_CODE_E_662":       410,
		"ALL_TERRITORY_CODE_E_670":       411,
		"ALL_TERRITORY_CODE_E_674":       412,
		"ALL_TERRITORY_CODE_E_678":       413,
		"ALL_TERRITORY_CODE_E_682":       414,
		"ALL_TERRITORY_CODE_E_686":       415,
		"ALL_TERRITORY_CODE_E_688":       416,
		"ALL_TERRITORY_CODE_E_690":       417,
		"ALL_TERRITORY_CODE_E_694":       418,
		"ALL_TERRITORY_CODE_E_702":       419,
		"ALL_TERRITORY_CODE_E_703":       420,
		"ALL_TERRITORY_CODE_E_704":       421,
		"ALL_TERRITORY_CODE_E_705":       422,
		"ALL_TERRITORY_CODE_E_706":       423,
		"ALL_TERRITORY_CODE_E_710":       424,
		"ALL_TERRITORY_CODE_E_716":       425,
		"ALL_TERRITORY_CODE_E_720":       426,
		"ALL_TERRITORY_CODE_E_724":       427,
		"ALL_TERRITORY_CODE_E_728":       428,
		"ALL_TERRITORY_CODE_E_729":       429,
		"ALL_TERRITORY_CODE_E_732":       430,
		"ALL_TERRITORY_CODE_E_736":       431,
		"ALL_TERRITORY_CODE_E_740":       432,
		"ALL_TERRITORY_CODE_E_748":       433,
		"ALL_TERRITORY_CODE_E_752":       434,
		"ALL_TERRITORY_CODE_E_756":       435,
		"ALL_TERRITORY_CODE_E_760":       436,
		"ALL_TERRITORY_CODE_E_762":       437,
		"ALL_TERRITORY_CODE_E_764":       438,
		"ALL_TERRITORY_CODE_E_768":       439,
		"ALL_TERRITORY_CODE_E_776":       440,
		"ALL_TERRITORY_CODE_E_780":       441,
		"ALL_TERRITORY_CODE_E_784":       442,
		"ALL_TERRITORY_CODE_E_788":       443,
		"ALL_TERRITORY_CODE_E_792":       444,
		"ALL_TERRITORY_CODE_E_795":       445,
		"ALL_TERRITORY_CODE_E_798":       446,
		"ALL_TERRITORY_CODE_E_800":       447,
		"ALL_TERRITORY_CODE_E_804":       448,
		"ALL_TERRITORY_CODE_E_807":       449,
		"ALL_TERRITORY_CODE_E_810":       450,
		"ALL_TERRITORY_CODE_E_818":       451,
		"ALL_TERRITORY_CODE_E_826":       452,
		"ALL_TERRITORY_CODE_E_834":       453,
		"ALL_TERRITORY_CODE_E_840":       454,
		"ALL_TERRITORY_CODE_E_854":       455,
		"ALL_TERRITORY_CODE_E_858":       456,
		"ALL_TERRITORY_CODE_E_860":       457,
		"ALL_TERRITORY_CODE_E_862":       458,
		"ALL_TERRITORY_CODE_E_882":       459,
		"ALL_TERRITORY_CODE_E_886":       460,
		"ALL_TERRITORY_CODE_E_887":       461,
		"ALL_TERRITORY_CODE_E_890":       462,
		"ALL_TERRITORY_CODE_E_891":       463,
		"ALL_TERRITORY_CODE_E_894":       464,
		"ALL_TERRITORY_CODE_E_2100":      465,
		"ALL_TERRITORY_CODE_E_2101":      466,
		"ALL_TERRITORY_CODE_E_2102":      467,
		"ALL_TERRITORY_CODE_E_2103":      468,
		"ALL_TERRITORY_CODE_E_2104":      469,
		"ALL_TERRITORY_CODE_E_2105":      470,
		"ALL_TERRITORY_CODE_E_2106":      471,
		"ALL_TERRITORY_CODE_E_2107":      472,
		"ALL_TERRITORY_CODE_E_2108":      473,
		"ALL_TERRITORY_CODE_E_2109":      474,
		"ALL_TERRITORY_CODE_E_2110":      475,
		"ALL_TERRITORY_CODE_E_2111":      476,
		"ALL_TERRITORY_CODE_E_2112":      477,
		"ALL_TERRITORY_CODE_E_2113":      478,
		"ALL_TERRITORY_CODE_E_2114":      479,
		"ALL_TERRITORY_CODE_E_2115":      480,
		"ALL_TERRITORY_CODE_E_2116":      481,
		"ALL_TERRITORY_CODE_E_2117":      482,
		"ALL_TERRITORY_CODE_E_2118":      483,
		"ALL_TERRITORY_CODE_E_2119":      484,
		"ALL_TERRITORY_CODE_E_2120":      485,
		"ALL_TERRITORY_CODE_E_2121":      486,
		"ALL_TERRITORY_CODE_E_2122":      487,
		"ALL_TERRITORY_CODE_E_2123":      488,
		"ALL_TERRITORY_CODE_E_2124":      489,
		"ALL_TERRITORY_CODE_E_2125":      490,
		"ALL_TERRITORY_CODE_E_2126":      491,
		"ALL_TERRITORY_CODE_E_2127":      492,
		"ALL_TERRITORY_CODE_E_2128":      493,
		"ALL_TERRITORY_CODE_E_2129":      494,
		"ALL_TERRITORY_CODE_E_2130":      495,
		"ALL_TERRITORY_CODE_E_2131":      496,
		"ALL_TERRITORY_CODE_E_2132":      497,
		"ALL_TERRITORY_CODE_E_2133":      498,
		"ALL_TERRITORY_CODE_E_2134":      499,
		"ALL_TERRITORY_CODE_E_2136":      500,
		"ALL_TERRITORY_CODE_XK":          501,
		"ALL_TERRITORY_CODE_WORLDWIDE":   502,
		"ALL_TERRITORY_CODE_AIDJ":        503,
		"ALL_TERRITORY_CODE_ANHH":        504,
		"ALL_TERRITORY_CODE_BQAQ":        505,
		"ALL_TERRITORY_CODE_BUMM":        506,
		"ALL_TERRITORY_CODE_BYAA":        507,
		"ALL_TERRITORY_CODE_CSHH":        508,
		"ALL_TERRITORY_CODE_CSXX":        509,
		"ALL_TERRITORY_CODE_CTKI":        510,
		"ALL_TERRITORY_CODE_DDDE":        511,
		"ALL_TERRITORY_CODE_DYBJ":        512,
		"ALL_TERRITORY_CODE_FQHH":        513,
		"ALL_TERRITORY_CODE_FXFR":        514,
		"ALL_TERRITORY_CODE_GEHH":        515,
		"ALL_TERRITORY_CODE_HVBF":        516,
		"ALL_TERRITORY_CODE_JTUM":        517,
		"ALL_TERRITORY_CODE_MIUM":        518,
		"ALL_TERRITORY_CODE_NHVU":        519,
		"ALL_TERRITORY_CODE_NQAQ":        520,
		"ALL_TERRITORY_CODE_NTHH":        521,
		"ALL_TERRITORY_CODE_PCHH":        522,
		"ALL_TERRITORY_CODE_PUUM":        523,
		"ALL_TERRITORY_CODE_PZPA":        524,
		"ALL_TERRITORY_CODE_RHZW":        525,
		"ALL_TERRITORY_CODE_SKIN":        526,
		"ALL_TERRITORY_CODE_SUHH":        527,
		"ALL_TERRITORY_CODE_TPTL":        528,
		"ALL_TERRITORY_CODE_VDVN":        529,
		"ALL_TERRITORY_CODE_WKUM":        530,
		"ALL_TERRITORY_CODE_YDYE":        531,
		"ALL_TERRITORY_CODE_YUCS":        532,
		"ALL_TERRITORY_CODE_ZRCD":        533,
		"ALL_TERRITORY_CODE_E_446":       534,
	}
)

func (x AllTerritoryCode) Enum() *AllTerritoryCode {
	p := new(AllTerritoryCode)
	*p = x
	return p
}

func (x AllTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[6].Descriptor()
}

func (AllTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[6]
}

func (x AllTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllTerritoryCode.Descriptor instead.
func (AllTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{6}
}

type ArtistRole int32

const (
	ArtistRole_ARTIST_ROLE_UNSPECIFIED            ArtistRole = 0
	ArtistRole_ARTIST_ROLE_ARTCOPYIST             ArtistRole = 1
	ArtistRole_ARTIST_ROLE_CALLIGRAPHER           ArtistRole = 2
	ArtistRole_ARTIST_ROLE_CARTOGRAPHER           ArtistRole = 3
	ArtistRole_ARTIST_ROLE_CARTOONIST             ArtistRole = 4
	ArtistRole_ARTIST_ROLE_COMPUTERGRAPHICCREATOR ArtistRole = 5
	ArtistRole_ARTIST_ROLE_COMPUTERPROGRAMMER     ArtistRole = 6
	ArtistRole_ARTIST_ROLE_DELINEATOR             ArtistRole = 7
	ArtistRole_ARTIST_ROLE_DESIGNER               ArtistRole = 8
	ArtistRole_ARTIST_ROLE_DRAUGHTSMAN            ArtistRole = 9
	ArtistRole_ARTIST_ROLE_FACSIMILIST            ArtistRole = 10
	ArtistRole_ARTIST_ROLE_GRAPHICARTIST          ArtistRole = 11
	ArtistRole_ARTIST_ROLE_ILLUSTRATOR            ArtistRole = 12
	ArtistRole_ARTIST_ROLE_MUSICCOPYIST           ArtistRole = 13
	ArtistRole_ARTIST_ROLE_NOTSPECIFIED           ArtistRole = 14
	ArtistRole_ARTIST_ROLE_PAINTER                ArtistRole = 15
	ArtistRole_ARTIST_ROLE_PHOTOGRAPHER           ArtistRole = 16
	ArtistRole_ARTIST_ROLE_TYPEDESIGNER           ArtistRole = 17
	ArtistRole_ARTIST_ROLE_UNKNOWN                ArtistRole = 18
	ArtistRole_ARTIST_ROLE_USERDEFINED            ArtistRole = 19
)

// Enum value maps for ArtistRole.
var (
	ArtistRole_name = map[int32]string{
		0:  "ARTIST_ROLE_UNSPECIFIED",
		1:  "ARTIST_ROLE_ARTCOPYIST",
		2:  "ARTIST_ROLE_CALLIGRAPHER",
		3:  "ARTIST_ROLE_CARTOGRAPHER",
		4:  "ARTIST_ROLE_CARTOONIST",
		5:  "ARTIST_ROLE_COMPUTERGRAPHICCREATOR",
		6:  "ARTIST_ROLE_COMPUTERPROGRAMMER",
		7:  "ARTIST_ROLE_DELINEATOR",
		8:  "ARTIST_ROLE_DESIGNER",
		9:  "ARTIST_ROLE_DRAUGHTSMAN",
		10: "ARTIST_ROLE_FACSIMILIST",
		11: "ARTIST_ROLE_GRAPHICARTIST",
		12: "ARTIST_ROLE_ILLUSTRATOR",
		13: "ARTIST_ROLE_MUSICCOPYIST",
		14: "ARTIST_ROLE_NOTSPECIFIED",
		15: "ARTIST_ROLE_PAINTER",
		16: "ARTIST_ROLE_PHOTOGRAPHER",
		17: "ARTIST_ROLE_TYPEDESIGNER",
		18: "ARTIST_ROLE_UNKNOWN",
		19: "ARTIST_ROLE_USERDEFINED",
	}
	ArtistRole_value = map[string]int32{
		"ARTIST_ROLE_UNSPECIFIED":            0,
		"ARTIST_ROLE_ARTCOPYIST":             1,
		"ARTIST_ROLE_CALLIGRAPHER":           2,
		"ARTIST_ROLE_CARTOGRAPHER":           3,
		"ARTIST_ROLE_CARTOONIST":             4,
		"ARTIST_ROLE_COMPUTERGRAPHICCREATOR": 5,
		"ARTIST_ROLE_COMPUTERPROGRAMMER":     6,
		"ARTIST_ROLE_DELINEATOR":             7,
		"ARTIST_ROLE_DESIGNER":               8,
		"ARTIST_ROLE_DRAUGHTSMAN":            9,
		"ARTIST_ROLE_FACSIMILIST":            10,
		"ARTIST_ROLE_GRAPHICARTIST":          11,
		"ARTIST_ROLE_ILLUSTRATOR":            12,
		"ARTIST_ROLE_MUSICCOPYIST":           13,
		"ARTIST_ROLE_NOTSPECIFIED":           14,
		"ARTIST_ROLE_PAINTER":                15,
		"ARTIST_ROLE_PHOTOGRAPHER":           16,
		"ARTIST_ROLE_TYPEDESIGNER":           17,
		"ARTIST_ROLE_UNKNOWN":                18,
		"ARTIST_ROLE_USERDEFINED":            19,
	}
)

func (x ArtistRole) Enum() *ArtistRole {
	p := new(ArtistRole)
	*p = x
	return p
}

func (x ArtistRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtistRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[7].Descriptor()
}

func (ArtistRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[7]
}

func (x ArtistRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtistRole.Descriptor instead.
func (ArtistRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{7}
}

type ArtistType int32

const (
	ArtistType_ARTIST_TYPE_UNSPECIFIED                ArtistType = 0
	ArtistType_ARTIST_TYPE_ACAPPELLAENSEMBLE          ArtistType = 1
	ArtistType_ARTIST_TYPE_BARBERSHOPENSEMBLE         ArtistType = 2
	ArtistType_ARTIST_TYPE_BIGBAND                    ArtistType = 3
	ArtistType_ARTIST_TYPE_BRASSBAND                  ArtistType = 4
	ArtistType_ARTIST_TYPE_CHAMBERORCHESTRA           ArtistType = 5
	ArtistType_ARTIST_TYPE_COUNTRYGROUP               ArtistType = 6
	ArtistType_ARTIST_TYPE_DUET                       ArtistType = 7
	ArtistType_ARTIST_TYPE_ELECTRONICGROUP            ArtistType = 8
	ArtistType_ARTIST_TYPE_FIFEANDDRUMCORPS           ArtistType = 9
	ArtistType_ARTIST_TYPE_FOLKGROUP                  ArtistType = 10
	ArtistType_ARTIST_TYPE_INSTRUMENTANDACCOMPANIMENT ArtistType = 11
	ArtistType_ARTIST_TYPE_JAZZCOMBO                  ArtistType = 12
	ArtistType_ARTIST_TYPE_LATINGROUP                 ArtistType = 13
	ArtistType_ARTIST_TYPE_MARCHINGBAND               ArtistType = 14
	ArtistType_ARTIST_TYPE_MARIACHIBAND               ArtistType = 15
	ArtistType_ARTIST_TYPE_ORCHESTRA                  ArtistType = 16
	ArtistType_ARTIST_TYPE_PIANOENSEMBLE              ArtistType = 17
	ArtistType_ARTIST_TYPE_PIANOTRIO                  ArtistType = 18
	ArtistType_ARTIST_TYPE_PIANOQUARTET               ArtistType = 19
	ArtistType_ARTIST_TYPE_PIANOQUINTET               ArtistType = 20
	ArtistType_ARTIST_TYPE_PIPEANDDRUMGROUP           ArtistType = 21
	ArtistType_ARTIST_TYPE_POPBAND                    ArtistType = 22
	ArtistType_ARTIST_TYPE_REGGAEBAND                 ArtistType = 23
	ArtistType_ARTIST_TYPE_ROCKBAND                   ArtistType = 24
	ArtistType_ARTIST_TYPE_SOLOINSTRUMENT             ArtistType = 25
	ArtistType_ARTIST_TYPE_SOLOVOICE                  ArtistType = 26
	ArtistType_ARTIST_TYPE_STRINGENSEMBLE             ArtistType = 27
	ArtistType_ARTIST_TYPE_STRINGQUARTET              ArtistType = 28
	ArtistType_ARTIST_TYPE_STRINGQUINTET              ArtistType = 29
	ArtistType_ARTIST_TYPE_TRIO                       ArtistType = 30
	ArtistType_ARTIST_TYPE_USERDEFINED                ArtistType = 31
	ArtistType_ARTIST_TYPE_VOICEANDACCOMPANIMENT      ArtistType = 32
	ArtistType_ARTIST_TYPE_WINDENSEMBLE               ArtistType = 33
)

// Enum value maps for ArtistType.
var (
	ArtistType_name = map[int32]string{
		0:  "ARTIST_TYPE_UNSPECIFIED",
		1:  "ARTIST_TYPE_ACAPPELLAENSEMBLE",
		2:  "ARTIST_TYPE_BARBERSHOPENSEMBLE",
		3:  "ARTIST_TYPE_BIGBAND",
		4:  "ARTIST_TYPE_BRASSBAND",
		5:  "ARTIST_TYPE_CHAMBERORCHESTRA",
		6:  "ARTIST_TYPE_COUNTRYGROUP",
		7:  "ARTIST_TYPE_DUET",
		8:  "ARTIST_TYPE_ELECTRONICGROUP",
		9:  "ARTIST_TYPE_FIFEANDDRUMCORPS",
		10: "ARTIST_TYPE_FOLKGROUP",
		11: "ARTIST_TYPE_INSTRUMENTANDACCOMPANIMENT",
		12: "ARTIST_TYPE_JAZZCOMBO",
		13: "ARTIST_TYPE_LATINGROUP",
		14: "ARTIST_TYPE_MARCHINGBAND",
		15: "ARTIST_TYPE_MARIACHIBAND",
		16: "ARTIST_TYPE_ORCHESTRA",
		17: "ARTIST_TYPE_PIANOENSEMBLE",
		18: "ARTIST_TYPE_PIANOTRIO",
		19: "ARTIST_TYPE_PIANOQUARTET",
		20: "ARTIST_TYPE_PIANOQUINTET",
		21: "ARTIST_TYPE_PIPEANDDRUMGROUP",
		22: "ARTIST_TYPE_POPBAND",
		23: "ARTIST_TYPE_REGGAEBAND",
		24: "ARTIST_TYPE_ROCKBAND",
		25: "ARTIST_TYPE_SOLOINSTRUMENT",
		26: "ARTIST_TYPE_SOLOVOICE",
		27: "ARTIST_TYPE_STRINGENSEMBLE",
		28: "ARTIST_TYPE_STRINGQUARTET",
		29: "ARTIST_TYPE_STRINGQUINTET",
		30: "ARTIST_TYPE_TRIO",
		31: "ARTIST_TYPE_USERDEFINED",
		32: "ARTIST_TYPE_VOICEANDACCOMPANIMENT",
		33: "ARTIST_TYPE_WINDENSEMBLE",
	}
	ArtistType_value = map[string]int32{
		"ARTIST_TYPE_UNSPECIFIED":                0,
		"ARTIST_TYPE_ACAPPELLAENSEMBLE":          1,
		"ARTIST_TYPE_BARBERSHOPENSEMBLE":         2,
		"ARTIST_TYPE_BIGBAND":                    3,
		"ARTIST_TYPE_BRASSBAND":                  4,
		"ARTIST_TYPE_CHAMBERORCHESTRA":           5,
		"ARTIST_TYPE_COUNTRYGROUP":               6,
		"ARTIST_TYPE_DUET":                       7,
		"ARTIST_TYPE_ELECTRONICGROUP":            8,
		"ARTIST_TYPE_FIFEANDDRUMCORPS":           9,
		"ARTIST_TYPE_FOLKGROUP":                  10,
		"ARTIST_TYPE_INSTRUMENTANDACCOMPANIMENT": 11,
		"ARTIST_TYPE_JAZZCOMBO":                  12,
		"ARTIST_TYPE_LATINGROUP":                 13,
		"ARTIST_TYPE_MARCHINGBAND":               14,
		"ARTIST_TYPE_MARIACHIBAND":               15,
		"ARTIST_TYPE_ORCHESTRA":                  16,
		"ARTIST_TYPE_PIANOENSEMBLE":              17,
		"ARTIST_TYPE_PIANOTRIO":                  18,
		"ARTIST_TYPE_PIANOQUARTET":               19,
		"ARTIST_TYPE_PIANOQUINTET":               20,
		"ARTIST_TYPE_PIPEANDDRUMGROUP":           21,
		"ARTIST_TYPE_POPBAND":                    22,
		"ARTIST_TYPE_REGGAEBAND":                 23,
		"ARTIST_TYPE_ROCKBAND":                   24,
		"ARTIST_TYPE_SOLOINSTRUMENT":             25,
		"ARTIST_TYPE_SOLOVOICE":                  26,
		"ARTIST_TYPE_STRINGENSEMBLE":             27,
		"ARTIST_TYPE_STRINGQUARTET":              28,
		"ARTIST_TYPE_STRINGQUINTET":              29,
		"ARTIST_TYPE_TRIO":                       30,
		"ARTIST_TYPE_USERDEFINED":                31,
		"ARTIST_TYPE_VOICEANDACCOMPANIMENT":      32,
		"ARTIST_TYPE_WINDENSEMBLE":               33,
	}
)

func (x ArtistType) Enum() *ArtistType {
	p := new(ArtistType)
	*p = x
	return p
}

func (x ArtistType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtistType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[8].Descriptor()
}

func (ArtistType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[8]
}

func (x ArtistType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtistType.Descriptor instead.
func (ArtistType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{8}
}

type AspectRatioType int32

const (
	AspectRatioType_ASPECT_RATIO_TYPE_UNSPECIFIED AspectRatioType = 0
	AspectRatioType_ASPECT_RATIO_TYPE_PAR         AspectRatioType = 1
	AspectRatioType_ASPECT_RATIO_TYPE_DAR         AspectRatioType = 2
)

// Enum value maps for AspectRatioType.
var (
	AspectRatioType_name = map[int32]string{
		0: "ASPECT_RATIO_TYPE_UNSPECIFIED",
		1: "ASPECT_RATIO_TYPE_PAR",
		2: "ASPECT_RATIO_TYPE_DAR",
	}
	AspectRatioType_value = map[string]int32{
		"ASPECT_RATIO_TYPE_UNSPECIFIED": 0,
		"ASPECT_RATIO_TYPE_PAR":         1,
		"ASPECT_RATIO_TYPE_DAR":         2,
	}
)

func (x AspectRatioType) Enum() *AspectRatioType {
	p := new(AspectRatioType)
	*p = x
	return p
}

func (x AspectRatioType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AspectRatioType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[9].Descriptor()
}

func (AspectRatioType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[9]
}

func (x AspectRatioType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AspectRatioType.Descriptor instead.
func (AspectRatioType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{9}
}

type AsserterType int32

const (
	AsserterType_ASSERTER_TYPE_UNSPECIFIED                         AsserterType = 0
	AsserterType_ASSERTER_TYPE_COLLECTIONSOCIETY                   AsserterType = 1
	AsserterType_ASSERTER_TYPE_INTERESTEDPUBLISHER                 AsserterType = 2
	AsserterType_ASSERTER_TYPE_MUSICLICENSINGCOMPANY               AsserterType = 3
	AsserterType_ASSERTER_TYPE_PUBLISHER                           AsserterType = 4
	AsserterType_ASSERTER_TYPE_RECORDCOMPANYWITHINTERESTINRESOURCE AsserterType = 5
	AsserterType_ASSERTER_TYPE_THIRDPARTY                          AsserterType = 6
)

// Enum value maps for AsserterType.
var (
	AsserterType_name = map[int32]string{
		0: "ASSERTER_TYPE_UNSPECIFIED",
		1: "ASSERTER_TYPE_COLLECTIONSOCIETY",
		2: "ASSERTER_TYPE_INTERESTEDPUBLISHER",
		3: "ASSERTER_TYPE_MUSICLICENSINGCOMPANY",
		4: "ASSERTER_TYPE_PUBLISHER",
		5: "ASSERTER_TYPE_RECORDCOMPANYWITHINTERESTINRESOURCE",
		6: "ASSERTER_TYPE_THIRDPARTY",
	}
	AsserterType_value = map[string]int32{
		"ASSERTER_TYPE_UNSPECIFIED":                         0,
		"ASSERTER_TYPE_COLLECTIONSOCIETY":                   1,
		"ASSERTER_TYPE_INTERESTEDPUBLISHER":                 2,
		"ASSERTER_TYPE_MUSICLICENSINGCOMPANY":               3,
		"ASSERTER_TYPE_PUBLISHER":                           4,
		"ASSERTER_TYPE_RECORDCOMPANYWITHINTERESTINRESOURCE": 5,
		"ASSERTER_TYPE_THIRDPARTY":                          6,
	}
)

func (x AsserterType) Enum() *AsserterType {
	p := new(AsserterType)
	*p = x
	return p
}

func (x AsserterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsserterType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[10].Descriptor()
}

func (AsserterType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[10]
}

func (x AsserterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsserterType.Descriptor instead.
func (AsserterType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{10}
}

type AssertionStatus int32

const (
	AssertionStatus_ASSERTION_STATUS_UNSPECIFIED AssertionStatus = 0
	AssertionStatus_ASSERTION_STATUS_VERIFIED    AssertionStatus = 1
)

// Enum value maps for AssertionStatus.
var (
	AssertionStatus_name = map[int32]string{
		0: "ASSERTION_STATUS_UNSPECIFIED",
		1: "ASSERTION_STATUS_VERIFIED",
	}
	AssertionStatus_value = map[string]int32{
		"ASSERTION_STATUS_UNSPECIFIED": 0,
		"ASSERTION_STATUS_VERIFIED":    1,
	}
)

func (x AssertionStatus) Enum() *AssertionStatus {
	p := new(AssertionStatus)
	*p = x
	return p
}

func (x AssertionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[11].Descriptor()
}

func (AssertionStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[11]
}

func (x AssertionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionStatus.Descriptor instead.
func (AssertionStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{11}
}

type AudioCodecType int32

const (
	AudioCodecType_AUDIO_CODEC_TYPE_UNSPECIFIED AudioCodecType = 0
	AudioCodecType_AUDIO_CODEC_TYPE_AAC         AudioCodecType = 1
	AudioCodecType_AUDIO_CODEC_TYPE_ADPCM       AudioCodecType = 2
	AudioCodecType_AUDIO_CODEC_TYPE_ALAW        AudioCodecType = 3
	AudioCodecType_AUDIO_CODEC_TYPE_AMR         AudioCodecType = 4
	AudioCodecType_AUDIO_CODEC_TYPE_AMR_NB      AudioCodecType = 5
	AudioCodecType_AUDIO_CODEC_TYPE_AMR_WB      AudioCodecType = 6
	AudioCodecType_AUDIO_CODEC_TYPE_ATMOS       AudioCodecType = 7
	AudioCodecType_AUDIO_CODEC_TYPE_FLAC        AudioCodecType = 8
	AudioCodecType_AUDIO_CODEC_TYPE_MP          AudioCodecType = 9
	AudioCodecType_AUDIO_CODEC_TYPE_MP2         AudioCodecType = 10
	AudioCodecType_AUDIO_CODEC_TYPE_MP3         AudioCodecType = 11
	AudioCodecType_AUDIO_CODEC_TYPE_MQA         AudioCodecType = 12
	AudioCodecType_AUDIO_CODEC_TYPE_MULAW       AudioCodecType = 13
	AudioCodecType_AUDIO_CODEC_TYPE_PCM         AudioCodecType = 14
	AudioCodecType_AUDIO_CODEC_TYPE_PDM         AudioCodecType = 15
	AudioCodecType_AUDIO_CODEC_TYPE_QCELP       AudioCodecType = 16
	AudioCodecType_AUDIO_CODEC_TYPE_REALAUDIO   AudioCodecType = 17
	AudioCodecType_AUDIO_CODEC_TYPE_SHOCKWAVE   AudioCodecType = 18
	AudioCodecType_AUDIO_CODEC_TYPE_UNKNOWN     AudioCodecType = 19
	AudioCodecType_AUDIO_CODEC_TYPE_USERDEFINED AudioCodecType = 20
	AudioCodecType_AUDIO_CODEC_TYPE_VORBIS      AudioCodecType = 21
	AudioCodecType_AUDIO_CODEC_TYPE_WMA         AudioCodecType = 22
)

// Enum value maps for AudioCodecType.
var (
	AudioCodecType_name = map[int32]string{
		0:  "AUDIO_CODEC_TYPE_UNSPECIFIED",
		1:  "AUDIO_CODEC_TYPE_AAC",
		2:  "AUDIO_CODEC_TYPE_ADPCM",
		3:  "AUDIO_CODEC_TYPE_ALAW",
		4:  "AUDIO_CODEC_TYPE_AMR",
		5:  "AUDIO_CODEC_TYPE_AMR_NB",
		6:  "AUDIO_CODEC_TYPE_AMR_WB",
		7:  "AUDIO_CODEC_TYPE_ATMOS",
		8:  "AUDIO_CODEC_TYPE_FLAC",
		9:  "AUDIO_CODEC_TYPE_MP",
		10: "AUDIO_CODEC_TYPE_MP2",
		11: "AUDIO_CODEC_TYPE_MP3",
		12: "AUDIO_CODEC_TYPE_MQA",
		13: "AUDIO_CODEC_TYPE_MULAW",
		14: "AUDIO_CODEC_TYPE_PCM",
		15: "AUDIO_CODEC_TYPE_PDM",
		16: "AUDIO_CODEC_TYPE_QCELP",
		17: "AUDIO_CODEC_TYPE_REALAUDIO",
		18: "AUDIO_CODEC_TYPE_SHOCKWAVE",
		19: "AUDIO_CODEC_TYPE_UNKNOWN",
		20: "AUDIO_CODEC_TYPE_USERDEFINED",
		21: "AUDIO_CODEC_TYPE_VORBIS",
		22: "AUDIO_CODEC_TYPE_WMA",
	}
	AudioCodecType_value = map[string]int32{
		"AUDIO_CODEC_TYPE_UNSPECIFIED": 0,
		"AUDIO_CODEC_TYPE_AAC":         1,
		"AUDIO_CODEC_TYPE_ADPCM":       2,
		"AUDIO_CODEC_TYPE_ALAW":        3,
		"AUDIO_CODEC_TYPE_AMR":         4,
		"AUDIO_CODEC_TYPE_AMR_NB":      5,
		"AUDIO_CODEC_TYPE_AMR_WB":      6,
		"AUDIO_CODEC_TYPE_ATMOS":       7,
		"AUDIO_CODEC_TYPE_FLAC":        8,
		"AUDIO_CODEC_TYPE_MP":          9,
		"AUDIO_CODEC_TYPE_MP2":         10,
		"AUDIO_CODEC_TYPE_MP3":         11,
		"AUDIO_CODEC_TYPE_MQA":         12,
		"AUDIO_CODEC_TYPE_MULAW":       13,
		"AUDIO_CODEC_TYPE_PCM":         14,
		"AUDIO_CODEC_TYPE_PDM":         15,
		"AUDIO_CODEC_TYPE_QCELP":       16,
		"AUDIO_CODEC_TYPE_REALAUDIO":   17,
		"AUDIO_CODEC_TYPE_SHOCKWAVE":   18,
		"AUDIO_CODEC_TYPE_UNKNOWN":     19,
		"AUDIO_CODEC_TYPE_USERDEFINED": 20,
		"AUDIO_CODEC_TYPE_VORBIS":      21,
		"AUDIO_CODEC_TYPE_WMA":         22,
	}
)

func (x AudioCodecType) Enum() *AudioCodecType {
	p := new(AudioCodecType)
	*p = x
	return p
}

func (x AudioCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[12].Descriptor()
}

func (AudioCodecType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[12]
}

func (x AudioCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCodecType.Descriptor instead.
func (AudioCodecType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{12}
}

type BasisForRevenueAllocation int32

const (
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_UNSPECIFIED              BasisForRevenueAllocation = 0
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_DERIVED                  BasisForRevenueAllocation = 1
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_FULLCENSUS               BasisForRevenueAllocation = 2
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_MARKETSHARE              BasisForRevenueAllocation = 3
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_PROXY                    BasisForRevenueAllocation = 4
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_SAMPLECENSUS             BasisForRevenueAllocation = 5
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_USAGELOG                 BasisForRevenueAllocation = 6
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_FULLUSAGELOG             BasisForRevenueAllocation = 7
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_SALESFIGURES             BasisForRevenueAllocation = 8
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_SAMPLEUSAGELOG           BasisForRevenueAllocation = 9
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_UNITMULTIPLIEDBYDURATION BasisForRevenueAllocation = 10
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_USERDEFINED              BasisForRevenueAllocation = 11
)

// Enum value maps for BasisForRevenueAllocation.
var (
	BasisForRevenueAllocation_name = map[int32]string{
		0:  "BASIS_FOR_REVENUE_ALLOCATION_UNSPECIFIED",
		1:  "BASIS_FOR_REVENUE_ALLOCATION_DERIVED",
		2:  "BASIS_FOR_REVENUE_ALLOCATION_FULLCENSUS",
		3:  "BASIS_FOR_REVENUE_ALLOCATION_MARKETSHARE",
		4:  "BASIS_FOR_REVENUE_ALLOCATION_PROXY",
		5:  "BASIS_FOR_REVENUE_ALLOCATION_SAMPLECENSUS",
		6:  "BASIS_FOR_REVENUE_ALLOCATION_USAGELOG",
		7:  "BASIS_FOR_REVENUE_ALLOCATION_FULLUSAGELOG",
		8:  "BASIS_FOR_REVENUE_ALLOCATION_SALESFIGURES",
		9:  "BASIS_FOR_REVENUE_ALLOCATION_SAMPLEUSAGELOG",
		10: "BASIS_FOR_REVENUE_ALLOCATION_UNITMULTIPLIEDBYDURATION",
		11: "BASIS_FOR_REVENUE_ALLOCATION_USERDEFINED",
	}
	BasisForRevenueAllocation_value = map[string]int32{
		"BASIS_FOR_REVENUE_ALLOCATION_UNSPECIFIED":              0,
		"BASIS_FOR_REVENUE_ALLOCATION_DERIVED":                  1,
		"BASIS_FOR_REVENUE_ALLOCATION_FULLCENSUS":               2,
		"BASIS_FOR_REVENUE_ALLOCATION_MARKETSHARE":              3,
		"BASIS_FOR_REVENUE_ALLOCATION_PROXY":                    4,
		"BASIS_FOR_REVENUE_ALLOCATION_SAMPLECENSUS":             5,
		"BASIS_FOR_REVENUE_ALLOCATION_USAGELOG":                 6,
		"BASIS_FOR_REVENUE_ALLOCATION_FULLUSAGELOG":             7,
		"BASIS_FOR_REVENUE_ALLOCATION_SALESFIGURES":             8,
		"BASIS_FOR_REVENUE_ALLOCATION_SAMPLEUSAGELOG":           9,
		"BASIS_FOR_REVENUE_ALLOCATION_UNITMULTIPLIEDBYDURATION": 10,
		"BASIS_FOR_REVENUE_ALLOCATION_USERDEFINED":              11,
	}
)

func (x BasisForRevenueAllocation) Enum() *BasisForRevenueAllocation {
	p := new(BasisForRevenueAllocation)
	*p = x
	return p
}

func (x BasisForRevenueAllocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BasisForRevenueAllocation) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[13].Descriptor()
}

func (BasisForRevenueAllocation) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[13]
}

func (x BasisForRevenueAllocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BasisForRevenueAllocation.Descriptor instead.
func (BasisForRevenueAllocation) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{13}
}

type BinaryDataType int32

const (
	BinaryDataType_BINARY_DATA_TYPE_UNSPECIFIED BinaryDataType = 0
	BinaryDataType_BINARY_DATA_TYPE_BINARY64    BinaryDataType = 1
	BinaryDataType_BINARY_DATA_TYPE_HEXBINARY   BinaryDataType = 2
)

// Enum value maps for BinaryDataType.
var (
	BinaryDataType_name = map[int32]string{
		0: "BINARY_DATA_TYPE_UNSPECIFIED",
		1: "BINARY_DATA_TYPE_BINARY64",
		2: "BINARY_DATA_TYPE_HEXBINARY",
	}
	BinaryDataType_value = map[string]int32{
		"BINARY_DATA_TYPE_UNSPECIFIED": 0,
		"BINARY_DATA_TYPE_BINARY64":    1,
		"BINARY_DATA_TYPE_HEXBINARY":   2,
	}
)

func (x BinaryDataType) Enum() *BinaryDataType {
	p := new(BinaryDataType)
	*p = x
	return p
}

func (x BinaryDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[14].Descriptor()
}

func (BinaryDataType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[14]
}

func (x BinaryDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryDataType.Descriptor instead.
func (BinaryDataType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{14}
}

type BusinessMusicalWorkContributorRole int32

const (
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED          BusinessMusicalWorkContributorRole = 0
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER        BusinessMusicalWorkContributorRole = 1
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT    BusinessMusicalWorkContributorRole = 2
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER      BusinessMusicalWorkContributorRole = 3
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER       BusinessMusicalWorkContributorRole = 4
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER   BusinessMusicalWorkContributorRole = 5
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER    BusinessMusicalWorkContributorRole = 6
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER  BusinessMusicalWorkContributorRole = 7
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER         BusinessMusicalWorkContributorRole = 8
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER BusinessMusicalWorkContributorRole = 9
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN              BusinessMusicalWorkContributorRole = 10
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED          BusinessMusicalWorkContributorRole = 11
)

// Enum value maps for BusinessMusicalWorkContributorRole.
var (
	BusinessMusicalWorkContributorRole_name = map[int32]string{
		0:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER",
		2:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT",
		3:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER",
		4:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER",
		5:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER",
		6:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER",
		7:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER",
		8:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER",
		9:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER",
		10: "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN",
		11: "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED",
	}
	BusinessMusicalWorkContributorRole_value = map[string]int32{
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED":          0,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER":        1,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT":    2,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER":      3,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER":       4,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER":   5,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER":    6,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER":  7,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER":         8,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER": 9,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN":              10,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED":          11,
	}
)

func (x BusinessMusicalWorkContributorRole) Enum() *BusinessMusicalWorkContributorRole {
	p := new(BusinessMusicalWorkContributorRole)
	*p = x
	return p
}

func (x BusinessMusicalWorkContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessMusicalWorkContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[15].Descriptor()
}

func (BusinessMusicalWorkContributorRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[15]
}

func (x BusinessMusicalWorkContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessMusicalWorkContributorRole.Descriptor instead.
func (BusinessMusicalWorkContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{15}
}

type CarrierType int32

const (
	CarrierType_CARRIER_TYPE_UNSPECIFIED                  CarrierType = 0
	CarrierType_CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX     CarrierType = 1
	CarrierType_CARRIER_TYPE_E_33RPM10INCHLP              CarrierType = 2
	CarrierType_CARRIER_TYPE_E_33RPM10INCHSINGLE          CarrierType = 3
	CarrierType_CARRIER_TYPE_E_33RPM12INCHLP              CarrierType = 4
	CarrierType_CARRIER_TYPE_E_33RPM12INCHLP20TRACKS      CarrierType = 5
	CarrierType_CARRIER_TYPE_E_33RPM12INCHMAXISINGLE      CarrierType = 6
	CarrierType_CARRIER_TYPE_E_33RPM12INCHSINGLE          CarrierType = 7
	CarrierType_CARRIER_TYPE_E_33RPM7INCHLP               CarrierType = 8
	CarrierType_CARRIER_TYPE_E_33RPM7INCHSINGLE           CarrierType = 9
	CarrierType_CARRIER_TYPE_E_45RPM10INCHLP              CarrierType = 10
	CarrierType_CARRIER_TYPE_E_45RPM10INCHMAXISINGLE      CarrierType = 11
	CarrierType_CARRIER_TYPE_E_45RPM10INCHSINGLE          CarrierType = 12
	CarrierType_CARRIER_TYPE_E_45RPM12INCHLP              CarrierType = 13
	CarrierType_CARRIER_TYPE_E_45RPM12INCHMAXISINGLE      CarrierType = 14
	CarrierType_CARRIER_TYPE_E_45RPM12INCHSINGLE          CarrierType = 15
	CarrierType_CARRIER_TYPE_E_45RPM7INCHEP               CarrierType = 16
	CarrierType_CARRIER_TYPE_E_45RPM7INCHSINGLE           CarrierType = 17
	CarrierType_CARRIER_TYPE_E_7INCHMAXISINGLEREMIX       CarrierType = 18
	CarrierType_CARRIER_TYPE_BLURAY                       CarrierType = 19
	CarrierType_CARRIER_TYPE_CD                           CarrierType = 20
	CarrierType_CARRIER_TYPE_CDCOMPILATION                CarrierType = 21
	CarrierType_CARRIER_TYPE_CDEP                         CarrierType = 22
	CarrierType_CARRIER_TYPE_CDEPENHANCED                 CarrierType = 23
	CarrierType_CARRIER_TYPE_CDEXTRACOMPILATION           CarrierType = 24
	CarrierType_CARRIER_TYPE_CDEXTRAEP                    CarrierType = 25
	CarrierType_CARRIER_TYPE_CDEXTRALP                    CarrierType = 26
	CarrierType_CARRIER_TYPE_CDEXTRAMAXIREMIX             CarrierType = 27
	CarrierType_CARRIER_TYPE_CDEXTRAMAXISINGLE            CarrierType = 28
	CarrierType_CARRIER_TYPE_CDEXTRASINGLE                CarrierType = 29
	CarrierType_CARRIER_TYPE_CDEXTRASINGLE2TRACKS         CarrierType = 30
	CarrierType_CARRIER_TYPE_CDLP                         CarrierType = 31
	CarrierType_CARRIER_TYPE_CDLP5INCH                    CarrierType = 32
	CarrierType_CARRIER_TYPE_CDLPENHANCED                 CarrierType = 33
	CarrierType_CARRIER_TYPE_CDLPPLUSCDVIDEO              CarrierType = 34
	CarrierType_CARRIER_TYPE_CDLPPLUSDVDAUDIO             CarrierType = 35
	CarrierType_CARRIER_TYPE_CDLPPLUSDVDVIDEO             CarrierType = 36
	CarrierType_CARRIER_TYPE_CDLPPLUSWEB                  CarrierType = 37
	CarrierType_CARRIER_TYPE_CDMAXISINGLE                 CarrierType = 38
	CarrierType_CARRIER_TYPE_CDMAXISINGLE3INCH            CarrierType = 39
	CarrierType_CARRIER_TYPE_CDMAXISINGLEENHANCED         CarrierType = 40
	CarrierType_CARRIER_TYPE_CDMAXISINGLEREMIX            CarrierType = 41
	CarrierType_CARRIER_TYPE_CDPLUSCDBONUS                CarrierType = 42
	CarrierType_CARRIER_TYPE_CDPLUSDVDBONUS               CarrierType = 43
	CarrierType_CARRIER_TYPE_CDROM                        CarrierType = 44
	CarrierType_CARRIER_TYPE_CDSINGLE                     CarrierType = 45
	CarrierType_CARRIER_TYPE_CDSINGLE3INCH                CarrierType = 46
	CarrierType_CARRIER_TYPE_CDSINGLE5INCH                CarrierType = 47
	CarrierType_CARRIER_TYPE_CDVIDEO5LPNTSC               CarrierType = 48
	CarrierType_CARRIER_TYPE_CDVIDEO5LPPAL                CarrierType = 49
	CarrierType_CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE       CarrierType = 50
	CarrierType_CARRIER_TYPE_COMBIPACK                    CarrierType = 51
	CarrierType_CARRIER_TYPE_DCC                          CarrierType = 52
	CarrierType_CARRIER_TYPE_DCCCOMPILATION               CarrierType = 53
	CarrierType_CARRIER_TYPE_DUALDISC                     CarrierType = 54
	CarrierType_CARRIER_TYPE_DVD                          CarrierType = 55
	CarrierType_CARRIER_TYPE_DVDAUDIO                     CarrierType = 56
	CarrierType_CARRIER_TYPE_DVDAUDIO5MAXISINGLE          CarrierType = 57
	CarrierType_CARRIER_TYPE_DVDAUDIOLP                   CarrierType = 58
	CarrierType_CARRIER_TYPE_DVDAUDIOSINGLE               CarrierType = 59
	CarrierType_CARRIER_TYPE_DVDROM                       CarrierType = 60
	CarrierType_CARRIER_TYPE_DVDSINGLE                    CarrierType = 61
	CarrierType_CARRIER_TYPE_DVDVIDEO                     CarrierType = 62
	CarrierType_CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC      CarrierType = 63
	CarrierType_CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL       CarrierType = 64
	CarrierType_CARRIER_TYPE_DVDVIDEO5SINGLENTSC          CarrierType = 65
	CarrierType_CARRIER_TYPE_DVDVIDEO5SINGLEPAL           CarrierType = 66
	CarrierType_CARRIER_TYPE_DVDVIDEOLPNTSC               CarrierType = 67
	CarrierType_CARRIER_TYPE_DVDVIDEOLPPAL                CarrierType = 68
	CarrierType_CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE CarrierType = 69
	CarrierType_CARRIER_TYPE_FANPACK                      CarrierType = 70
	CarrierType_CARRIER_TYPE_FILESYSTEM                   CarrierType = 71
	CarrierType_CARRIER_TYPE_HDDVDVIDEOLP                 CarrierType = 72
	CarrierType_CARRIER_TYPE_LASERDISCLP12INCHNTSC        CarrierType = 73
	CarrierType_CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP      CarrierType = 74
	CarrierType_CARRIER_TYPE_LPCOMPILATION                CarrierType = 75
	CarrierType_CARRIER_TYPE_LPIDENTICALTOCD              CarrierType = 76
	CarrierType_CARRIER_TYPE_MC                           CarrierType = 77
	CarrierType_CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP      CarrierType = 78
	CarrierType_CARRIER_TYPE_MCCOMPILATION                CarrierType = 79
	CarrierType_CARRIER_TYPE_MCDOUBLELP                   CarrierType = 80
	CarrierType_CARRIER_TYPE_MCEP                         CarrierType = 81
	CarrierType_CARRIER_TYPE_MCIDENTICALTOCD              CarrierType = 82
	CarrierType_CARRIER_TYPE_MCLP                         CarrierType = 83
	CarrierType_CARRIER_TYPE_MCMAXISINGLE                 CarrierType = 84
	CarrierType_CARRIER_TYPE_MCREMIX                      CarrierType = 85
	CarrierType_CARRIER_TYPE_MCSINGLE                     CarrierType = 86
	CarrierType_CARRIER_TYPE_MCSINGLEIDENTICALTOCDS       CarrierType = 87
	CarrierType_CARRIER_TYPE_MEMORYDEVICE                 CarrierType = 88
	CarrierType_CARRIER_TYPE_MEMORYDEVICEAUDIOLP          CarrierType = 89
	CarrierType_CARRIER_TYPE_MEMORYDEVICEMIXLP            CarrierType = 90
	CarrierType_CARRIER_TYPE_MEMORYDEVICEVIDEOLP          CarrierType = 91
	CarrierType_CARRIER_TYPE_MERCHANDISE                  CarrierType = 92
	CarrierType_CARRIER_TYPE_MINIDISC                     CarrierType = 93
	CarrierType_CARRIER_TYPE_MINIDISCCOMPILATION          CarrierType = 94
	CarrierType_CARRIER_TYPE_MINIDISCEP                   CarrierType = 95
	CarrierType_CARRIER_TYPE_MINIDISCMAXIREMIX            CarrierType = 96
	CarrierType_CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE     CarrierType = 97
	CarrierType_CARRIER_TYPE_ONLINESYSTEM                 CarrierType = 98
	CarrierType_CARRIER_TYPE_PREPAIDCARD                  CarrierType = 99
	CarrierType_CARRIER_TYPE_SACD                         CarrierType = 100
	CarrierType_CARRIER_TYPE_SACDCOMPILATION              CarrierType = 101
	CarrierType_CARRIER_TYPE_SACDLPSTEREO                 CarrierType = 102
	CarrierType_CARRIER_TYPE_SACDLPSTEREOCDAUDIO          CarrierType = 103
	CarrierType_CARRIER_TYPE_SACDLPSTEREOSURROUND         CarrierType = 104
	CarrierType_CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO  CarrierType = 105
	CarrierType_CARRIER_TYPE_SACDLPSURROUNDCDAUDIO        CarrierType = 106
	CarrierType_CARRIER_TYPE_SACDPLUSDVDVIDEO             CarrierType = 107
	CarrierType_CARRIER_TYPE_USERDEFINED                  CarrierType = 108
	CarrierType_CARRIER_TYPE_VHSNTSC                      CarrierType = 109
	CarrierType_CARRIER_TYPE_VHSPAL                       CarrierType = 110
	CarrierType_CARRIER_TYPE_VHSPLUSCDLP                  CarrierType = 111
	CarrierType_CARRIER_TYPE_VHSSECAM                     CarrierType = 112
)

// Enum value maps for CarrierType.
var (
	CarrierType_name = map[int32]string{
		0:   "CARRIER_TYPE_UNSPECIFIED",
		1:   "CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX",
		2:   "CARRIER_TYPE_E_33RPM10INCHLP",
		3:   "CARRIER_TYPE_E_33RPM10INCHSINGLE",
		4:   "CARRIER_TYPE_E_33RPM12INCHLP",
		5:   "CARRIER_TYPE_E_33RPM12INCHLP20TRACKS",
		6:   "CARRIER_TYPE_E_33RPM12INCHMAXISINGLE",
		7:   "CARRIER_TYPE_E_33RPM12INCHSINGLE",
		8:   "CARRIER_TYPE_E_33RPM7INCHLP",
		9:   "CARRIER_TYPE_E_33RPM7INCHSINGLE",
		10:  "CARRIER_TYPE_E_45RPM10INCHLP",
		11:  "CARRIER_TYPE_E_45RPM10INCHMAXISINGLE",
		12:  "CARRIER_TYPE_E_45RPM10INCHSINGLE",
		13:  "CARRIER_TYPE_E_45RPM12INCHLP",
		14:  "CARRIER_TYPE_E_45RPM12INCHMAXISINGLE",
		15:  "CARRIER_TYPE_E_45RPM12INCHSINGLE",
		16:  "CARRIER_TYPE_E_45RPM7INCHEP",
		17:  "CARRIER_TYPE_E_45RPM7INCHSINGLE",
		18:  "CARRIER_TYPE_E_7INCHMAXISINGLEREMIX",
		19:  "CARRIER_TYPE_BLURAY",
		20:  "CARRIER_TYPE_CD",
		21:  "CARRIER_TYPE_CDCOMPILATION",
		22:  "CARRIER_TYPE_CDEP",
		23:  "CARRIER_TYPE_CDEPENHANCED",
		24:  "CARRIER_TYPE_CDEXTRACOMPILATION",
		25:  "CARRIER_TYPE_CDEXTRAEP",
		26:  "CARRIER_TYPE_CDEXTRALP",
		27:  "CARRIER_TYPE_CDEXTRAMAXIREMIX",
		28:  "CARRIER_TYPE_CDEXTRAMAXISINGLE",
		29:  "CARRIER_TYPE_CDEXTRASINGLE",
		30:  "CARRIER_TYPE_CDEXTRASINGLE2TRACKS",
		31:  "CARRIER_TYPE_CDLP",
		32:  "CARRIER_TYPE_CDLP5INCH",
		33:  "CARRIER_TYPE_CDLPENHANCED",
		34:  "CARRIER_TYPE_CDLPPLUSCDVIDEO",
		35:  "CARRIER_TYPE_CDLPPLUSDVDAUDIO",
		36:  "CARRIER_TYPE_CDLPPLUSDVDVIDEO",
		37:  "CARRIER_TYPE_CDLPPLUSWEB",
		38:  "CARRIER_TYPE_CDMAXISINGLE",
		39:  "CARRIER_TYPE_CDMAXISINGLE3INCH",
		40:  "CARRIER_TYPE_CDMAXISINGLEENHANCED",
		41:  "CARRIER_TYPE_CDMAXISINGLEREMIX",
		42:  "CARRIER_TYPE_CDPLUSCDBONUS",
		43:  "CARRIER_TYPE_CDPLUSDVDBONUS",
		44:  "CARRIER_TYPE_CDROM",
		45:  "CARRIER_TYPE_CDSINGLE",
		46:  "CARRIER_TYPE_CDSINGLE3INCH",
		47:  "CARRIER_TYPE_CDSINGLE5INCH",
		48:  "CARRIER_TYPE_CDVIDEO5LPNTSC",
		49:  "CARRIER_TYPE_CDVIDEO5LPPAL",
		50:  "CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE",
		51:  "CARRIER_TYPE_COMBIPACK",
		52:  "CARRIER_TYPE_DCC",
		53:  "CARRIER_TYPE_DCCCOMPILATION",
		54:  "CARRIER_TYPE_DUALDISC",
		55:  "CARRIER_TYPE_DVD",
		56:  "CARRIER_TYPE_DVDAUDIO",
		57:  "CARRIER_TYPE_DVDAUDIO5MAXISINGLE",
		58:  "CARRIER_TYPE_DVDAUDIOLP",
		59:  "CARRIER_TYPE_DVDAUDIOSINGLE",
		60:  "CARRIER_TYPE_DVDROM",
		61:  "CARRIER_TYPE_DVDSINGLE",
		62:  "CARRIER_TYPE_DVDVIDEO",
		63:  "CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC",
		64:  "CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL",
		65:  "CARRIER_TYPE_DVDVIDEO5SINGLENTSC",
		66:  "CARRIER_TYPE_DVDVIDEO5SINGLEPAL",
		67:  "CARRIER_TYPE_DVDVIDEOLPNTSC",
		68:  "CARRIER_TYPE_DVDVIDEOLPPAL",
		69:  "CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE",
		70:  "CARRIER_TYPE_FANPACK",
		71:  "CARRIER_TYPE_FILESYSTEM",
		72:  "CARRIER_TYPE_HDDVDVIDEOLP",
		73:  "CARRIER_TYPE_LASERDISCLP12INCHNTSC",
		74:  "CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP",
		75:  "CARRIER_TYPE_LPCOMPILATION",
		76:  "CARRIER_TYPE_LPIDENTICALTOCD",
		77:  "CARRIER_TYPE_MC",
		78:  "CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP",
		79:  "CARRIER_TYPE_MCCOMPILATION",
		80:  "CARRIER_TYPE_MCDOUBLELP",
		81:  "CARRIER_TYPE_MCEP",
		82:  "CARRIER_TYPE_MCIDENTICALTOCD",
		83:  "CARRIER_TYPE_MCLP",
		84:  "CARRIER_TYPE_MCMAXISINGLE",
		85:  "CARRIER_TYPE_MCREMIX",
		86:  "CARRIER_TYPE_MCSINGLE",
		87:  "CARRIER_TYPE_MCSINGLEIDENTICALTOCDS",
		88:  "CARRIER_TYPE_MEMORYDEVICE",
		89:  "CARRIER_TYPE_MEMORYDEVICEAUDIOLP",
		90:  "CARRIER_TYPE_MEMORYDEVICEMIXLP",
		91:  "CARRIER_TYPE_MEMORYDEVICEVIDEOLP",
		92:  "CARRIER_TYPE_MERCHANDISE",
		93:  "CARRIER_TYPE_MINIDISC",
		94:  "CARRIER_TYPE_MINIDISCCOMPILATION",
		95:  "CARRIER_TYPE_MINIDISCEP",
		96:  "CARRIER_TYPE_MINIDISCMAXIREMIX",
		97:  "CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE",
		98:  "CARRIER_TYPE_ONLINESYSTEM",
		99:  "CARRIER_TYPE_PREPAIDCARD",
		100: "CARRIER_TYPE_SACD",
		101: "CARRIER_TYPE_SACDCOMPILATION",
		102: "CARRIER_TYPE_SACDLPSTEREO",
		103: "CARRIER_TYPE_SACDLPSTEREOCDAUDIO",
		104: "CARRIER_TYPE_SACDLPSTEREOSURROUND",
		105: "CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO",
		106: "CARRIER_TYPE_SACDLPSURROUNDCDAUDIO",
		107: "CARRIER_TYPE_SACDPLUSDVDVIDEO",
		108: "CARRIER_TYPE_USERDEFINED",
		109: "CARRIER_TYPE_VHSNTSC",
		110: "CARRIER_TYPE_VHSPAL",
		111: "CARRIER_TYPE_VHSPLUSCDLP",
		112: "CARRIER_TYPE_VHSSECAM",
	}
	CarrierType_value = map[string]int32{
		"CARRIER_TYPE_UNSPECIFIED":                  0,
		"CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX":     1,
		"CARRIER_TYPE_E_33RPM10INCHLP":              2,
		"CARRIER_TYPE_E_33RPM10INCHSINGLE":          3,
		"CARRIER_TYPE_E_33RPM12INCHLP":              4,
		"CARRIER_TYPE_E_33RPM12INCHLP20TRACKS":      5,
		"CARRIER_TYPE_E_33RPM12INCHMAXISINGLE":      6,
		"CARRIER_TYPE_E_33RPM12INCHSINGLE":          7,
		"CARRIER_TYPE_E_33RPM7INCHLP":               8,
		"CARRIER_TYPE_E_33RPM7INCHSINGLE":           9,
		"CARRIER_TYPE_E_45RPM10INCHLP":              10,
		"CARRIER_TYPE_E_45RPM10INCHMAXISINGLE":      11,
		"CARRIER_TYPE_E_45RPM10INCHSINGLE":          12,
		"CARRIER_TYPE_E_45RPM12INCHLP":              13,
		"CARRIER_TYPE_E_45RPM12INCHMAXISINGLE":      14,
		"CARRIER_TYPE_E_45RPM12INCHSINGLE":          15,
		"CARRIER_TYPE_E_45RPM7INCHEP":               16,
		"CARRIER_TYPE_E_45RPM7INCHSINGLE":           17,
		"CARRIER_TYPE_E_7INCHMAXISINGLEREMIX":       18,
		"CARRIER_TYPE_BLURAY":                       19,
		"CARRIER_TYPE_CD":                           20,
		"CARRIER_TYPE_CDCOMPILATION":                21,
		"CARRIER_TYPE_CDEP":                         22,
		"CARRIER_TYPE_CDEPENHANCED":                 23,
		"CARRIER_TYPE_CDEXTRACOMPILATION":           24,
		"CARRIER_TYPE_CDEXTRAEP":                    25,
		"CARRIER_TYPE_CDEXTRALP":                    26,
		"CARRIER_TYPE_CDEXTRAMAXIREMIX":             27,
		"CARRIER_TYPE_CDEXTRAMAXISINGLE":            28,
		"CARRIER_TYPE_CDEXTRASINGLE":                29,
		"CARRIER_TYPE_CDEXTRASINGLE2TRACKS":         30,
		"CARRIER_TYPE_CDLP":                         31,
		"CARRIER_TYPE_CDLP5INCH":                    32,
		"CARRIER_TYPE_CDLPENHANCED":                 33,
		"CARRIER_TYPE_CDLPPLUSCDVIDEO":              34,
		"CARRIER_TYPE_CDLPPLUSDVDAUDIO":             35,
		"CARRIER_TYPE_CDLPPLUSDVDVIDEO":             36,
		"CARRIER_TYPE_CDLPPLUSWEB":                  37,
		"CARRIER_TYPE_CDMAXISINGLE":                 38,
		"CARRIER_TYPE_CDMAXISINGLE3INCH":            39,
		"CARRIER_TYPE_CDMAXISINGLEENHANCED":         40,
		"CARRIER_TYPE_CDMAXISINGLEREMIX":            41,
		"CARRIER_TYPE_CDPLUSCDBONUS":                42,
		"CARRIER_TYPE_CDPLUSDVDBONUS":               43,
		"CARRIER_TYPE_CDROM":                        44,
		"CARRIER_TYPE_CDSINGLE":                     45,
		"CARRIER_TYPE_CDSINGLE3INCH":                46,
		"CARRIER_TYPE_CDSINGLE5INCH":                47,
		"CARRIER_TYPE_CDVIDEO5LPNTSC":               48,
		"CARRIER_TYPE_CDVIDEO5LPPAL":                49,
		"CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE":       50,
		"CARRIER_TYPE_COMBIPACK":                    51,
		"CARRIER_TYPE_DCC":                          52,
		"CARRIER_TYPE_DCCCOMPILATION":               53,
		"CARRIER_TYPE_DUALDISC":                     54,
		"CARRIER_TYPE_DVD":                          55,
		"CARRIER_TYPE_DVDAUDIO":                     56,
		"CARRIER_TYPE_DVDAUDIO5MAXISINGLE":          57,
		"CARRIER_TYPE_DVDAUDIOLP":                   58,
		"CARRIER_TYPE_DVDAUDIOSINGLE":               59,
		"CARRIER_TYPE_DVDROM":                       60,
		"CARRIER_TYPE_DVDSINGLE":                    61,
		"CARRIER_TYPE_DVDVIDEO":                     62,
		"CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC":      63,
		"CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL":       64,
		"CARRIER_TYPE_DVDVIDEO5SINGLENTSC":          65,
		"CARRIER_TYPE_DVDVIDEO5SINGLEPAL":           66,
		"CARRIER_TYPE_DVDVIDEOLPNTSC":               67,
		"CARRIER_TYPE_DVDVIDEOLPPAL":                68,
		"CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE": 69,
		"CARRIER_TYPE_FANPACK":                      70,
		"CARRIER_TYPE_FILESYSTEM":                   71,
		"CARRIER_TYPE_HDDVDVIDEOLP":                 72,
		"CARRIER_TYPE_LASERDISCLP12INCHNTSC":        73,
		"CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP":      74,
		"CARRIER_TYPE_LPCOMPILATION":                75,
		"CARRIER_TYPE_LPIDENTICALTOCD":              76,
		"CARRIER_TYPE_MC":                           77,
		"CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP":      78,
		"CARRIER_TYPE_MCCOMPILATION":                79,
		"CARRIER_TYPE_MCDOUBLELP":                   80,
		"CARRIER_TYPE_MCEP":                         81,
		"CARRIER_TYPE_MCIDENTICALTOCD":              82,
		"CARRIER_TYPE_MCLP":                         83,
		"CARRIER_TYPE_MCMAXISINGLE":                 84,
		"CARRIER_TYPE_MCREMIX":                      85,
		"CARRIER_TYPE_MCSINGLE":                     86,
		"CARRIER_TYPE_MCSINGLEIDENTICALTOCDS":       87,
		"CARRIER_TYPE_MEMORYDEVICE":                 88,
		"CARRIER_TYPE_MEMORYDEVICEAUDIOLP":          89,
		"CARRIER_TYPE_MEMORYDEVICEMIXLP":            90,
		"CARRIER_TYPE_MEMORYDEVICEVIDEOLP":          91,
		"CARRIER_TYPE_MERCHANDISE":                  92,
		"CARRIER_TYPE_MINIDISC":                     93,
		"CARRIER_TYPE_MINIDISCCOMPILATION":          94,
		"CARRIER_TYPE_MINIDISCEP":                   95,
		"CARRIER_TYPE_MINIDISCMAXIREMIX":            96,
		"CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE":     97,
		"CARRIER_TYPE_ONLINESYSTEM":                 98,
		"CARRIER_TYPE_PREPAIDCARD":                  99,
		"CARRIER_TYPE_SACD":                         100,
		"CARRIER_TYPE_SACDCOMPILATION":              101,
		"CARRIER_TYPE_SACDLPSTEREO":                 102,
		"CARRIER_TYPE_SACDLPSTEREOCDAUDIO":          103,
		"CARRIER_TYPE_SACDLPSTEREOSURROUND":         104,
		"CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO":  105,
		"CARRIER_TYPE_SACDLPSURROUNDCDAUDIO":        106,
		"CARRIER_TYPE_SACDPLUSDVDVIDEO":             107,
		"CARRIER_TYPE_USERDEFINED":                  108,
		"CARRIER_TYPE_VHSNTSC":                      109,
		"CARRIER_TYPE_VHSPAL":                       110,
		"CARRIER_TYPE_VHSPLUSCDLP":                  111,
		"CARRIER_TYPE_VHSSECAM":                     112,
	}
)

func (x CarrierType) Enum() *CarrierType {
	p := new(CarrierType)
	*p = x
	return p
}

func (x CarrierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarrierType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[16].Descriptor()
}

func (CarrierType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[16]
}

func (x CarrierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarrierType.Descriptor instead.
func (CarrierType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{16}
}

type CatalogTransferType int32

const (
	CatalogTransferType_CATALOG_TRANSFER_TYPE_UNSPECIFIED             CatalogTransferType = 0
	CatalogTransferType_CATALOG_TRANSFER_TYPE_USSTATUTORYREVERSION    CatalogTransferType = 1
	CatalogTransferType_CATALOG_TRANSFER_TYPE_STANDARDCATALOGTRANSFER CatalogTransferType = 2
)

// Enum value maps for CatalogTransferType.
var (
	CatalogTransferType_name = map[int32]string{
		0: "CATALOG_TRANSFER_TYPE_UNSPECIFIED",
		1: "CATALOG_TRANSFER_TYPE_USSTATUTORYREVERSION",
		2: "CATALOG_TRANSFER_TYPE_STANDARDCATALOGTRANSFER",
	}
	CatalogTransferType_value = map[string]int32{
		"CATALOG_TRANSFER_TYPE_UNSPECIFIED":             0,
		"CATALOG_TRANSFER_TYPE_USSTATUTORYREVERSION":    1,
		"CATALOG_TRANSFER_TYPE_STANDARDCATALOGTRANSFER": 2,
	}
)

func (x CatalogTransferType) Enum() *CatalogTransferType {
	p := new(CatalogTransferType)
	*p = x
	return p
}

func (x CatalogTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CatalogTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[17].Descriptor()
}

func (CatalogTransferType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[17]
}

func (x CatalogTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CatalogTransferType.Descriptor instead.
func (CatalogTransferType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{17}
}

type CdProtectionType int32

const (
	CdProtectionType_CD_PROTECTION_TYPE_UNSPECIFIED  CdProtectionType = 0
	CdProtectionType_CD_PROTECTION_TYPE_CDS100       CdProtectionType = 1
	CdProtectionType_CD_PROTECTION_TYPE_CDS200       CdProtectionType = 2
	CdProtectionType_CD_PROTECTION_TYPE_CDS300       CdProtectionType = 3
	CdProtectionType_CD_PROTECTION_TYPE_KEY2AUDIO    CdProtectionType = 4
	CdProtectionType_CD_PROTECTION_TYPE_MEDIAMAXCD3  CdProtectionType = 5
	CdProtectionType_CD_PROTECTION_TYPE_NOTPROTECTED CdProtectionType = 6
	CdProtectionType_CD_PROTECTION_TYPE_UNKNOWN      CdProtectionType = 7
	CdProtectionType_CD_PROTECTION_TYPE_USERDEFINED  CdProtectionType = 8
)

// Enum value maps for CdProtectionType.
var (
	CdProtectionType_name = map[int32]string{
		0: "CD_PROTECTION_TYPE_UNSPECIFIED",
		1: "CD_PROTECTION_TYPE_CDS100",
		2: "CD_PROTECTION_TYPE_CDS200",
		3: "CD_PROTECTION_TYPE_CDS300",
		4: "CD_PROTECTION_TYPE_KEY2AUDIO",
		5: "CD_PROTECTION_TYPE_MEDIAMAXCD3",
		6: "CD_PROTECTION_TYPE_NOTPROTECTED",
		7: "CD_PROTECTION_TYPE_UNKNOWN",
		8: "CD_PROTECTION_TYPE_USERDEFINED",
	}
	CdProtectionType_value = map[string]int32{
		"CD_PROTECTION_TYPE_UNSPECIFIED":  0,
		"CD_PROTECTION_TYPE_CDS100":       1,
		"CD_PROTECTION_TYPE_CDS200":       2,
		"CD_PROTECTION_TYPE_CDS300":       3,
		"CD_PROTECTION_TYPE_KEY2AUDIO":    4,
		"CD_PROTECTION_TYPE_MEDIAMAXCD3":  5,
		"CD_PROTECTION_TYPE_NOTPROTECTED": 6,
		"CD_PROTECTION_TYPE_UNKNOWN":      7,
		"CD_PROTECTION_TYPE_USERDEFINED":  8,
	}
)

func (x CdProtectionType) Enum() *CdProtectionType {
	p := new(CdProtectionType)
	*p = x
	return p
}

func (x CdProtectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CdProtectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[18].Descriptor()
}

func (CdProtectionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[18]
}

func (x CdProtectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CdProtectionType.Descriptor instead.
func (CdProtectionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{18}
}

type CharacterType int32

const (
	CharacterType_CHARACTER_TYPE_UNSPECIFIED         CharacterType = 0
	CharacterType_CHARACTER_TYPE_MAINCHARACTER       CharacterType = 1
	CharacterType_CHARACTER_TYPE_OTHERCHARACTER      CharacterType = 2
	CharacterType_CHARACTER_TYPE_SUPPORTINGCHARACTER CharacterType = 3
)

// Enum value maps for CharacterType.
var (
	CharacterType_name = map[int32]string{
		0: "CHARACTER_TYPE_UNSPECIFIED",
		1: "CHARACTER_TYPE_MAINCHARACTER",
		2: "CHARACTER_TYPE_OTHERCHARACTER",
		3: "CHARACTER_TYPE_SUPPORTINGCHARACTER",
	}
	CharacterType_value = map[string]int32{
		"CHARACTER_TYPE_UNSPECIFIED":         0,
		"CHARACTER_TYPE_MAINCHARACTER":       1,
		"CHARACTER_TYPE_OTHERCHARACTER":      2,
		"CHARACTER_TYPE_SUPPORTINGCHARACTER": 3,
	}
)

func (x CharacterType) Enum() *CharacterType {
	p := new(CharacterType)
	*p = x
	return p
}

func (x CharacterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[19].Descriptor()
}

func (CharacterType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[19]
}

func (x CharacterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterType.Descriptor instead.
func (CharacterType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{19}
}

type ClaimStatus int32

const (
	ClaimStatus_CLAIM_STATUS_UNSPECIFIED          ClaimStatus = 0
	ClaimStatus_CLAIM_STATUS_COMPLETECLAIM        ClaimStatus = 1
	ClaimStatus_CLAIM_STATUS_COMPLETEUNDERCLAIM   ClaimStatus = 2
	ClaimStatus_CLAIM_STATUS_INCOMPLETECLAIM      ClaimStatus = 3
	ClaimStatus_CLAIM_STATUS_INCOMPLETEUNDERCLAIM ClaimStatus = 4
	ClaimStatus_CLAIM_STATUS_MAJOROVERCLAIM       ClaimStatus = 5
	ClaimStatus_CLAIM_STATUS_MINOROVERCLAIM       ClaimStatus = 6
	ClaimStatus_CLAIM_STATUS_OVERCLAIM            ClaimStatus = 7
	ClaimStatus_CLAIM_STATUS_UNDERCLAIM           ClaimStatus = 8
)

// Enum value maps for ClaimStatus.
var (
	ClaimStatus_name = map[int32]string{
		0: "CLAIM_STATUS_UNSPECIFIED",
		1: "CLAIM_STATUS_COMPLETECLAIM",
		2: "CLAIM_STATUS_COMPLETEUNDERCLAIM",
		3: "CLAIM_STATUS_INCOMPLETECLAIM",
		4: "CLAIM_STATUS_INCOMPLETEUNDERCLAIM",
		5: "CLAIM_STATUS_MAJOROVERCLAIM",
		6: "CLAIM_STATUS_MINOROVERCLAIM",
		7: "CLAIM_STATUS_OVERCLAIM",
		8: "CLAIM_STATUS_UNDERCLAIM",
	}
	ClaimStatus_value = map[string]int32{
		"CLAIM_STATUS_UNSPECIFIED":          0,
		"CLAIM_STATUS_COMPLETECLAIM":        1,
		"CLAIM_STATUS_COMPLETEUNDERCLAIM":   2,
		"CLAIM_STATUS_INCOMPLETECLAIM":      3,
		"CLAIM_STATUS_INCOMPLETEUNDERCLAIM": 4,
		"CLAIM_STATUS_MAJOROVERCLAIM":       5,
		"CLAIM_STATUS_MINOROVERCLAIM":       6,
		"CLAIM_STATUS_OVERCLAIM":            7,
		"CLAIM_STATUS_UNDERCLAIM":           8,
	}
)

func (x ClaimStatus) Enum() *ClaimStatus {
	p := new(ClaimStatus)
	*p = x
	return p
}

func (x ClaimStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[20].Descriptor()
}

func (ClaimStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[20]
}

func (x ClaimStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimStatus.Descriptor instead.
func (ClaimStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{20}
}

type ClassifiedGenre int32

const (
	ClassifiedGenre_CLASSIFIED_GENRE_UNSPECIFIED     ClassifiedGenre = 0
	ClassifiedGenre_CLASSIFIED_GENRE_BLUES           ClassifiedGenre = 1
	ClassifiedGenre_CLASSIFIED_GENRE_CLASSICALMUSIC  ClassifiedGenre = 2
	ClassifiedGenre_CLASSIFIED_GENRE_COUNTRYMUSIC    ClassifiedGenre = 3
	ClassifiedGenre_CLASSIFIED_GENRE_ELECTRONICMUSIC ClassifiedGenre = 4
	ClassifiedGenre_CLASSIFIED_GENRE_FOLK            ClassifiedGenre = 5
	ClassifiedGenre_CLASSIFIED_GENRE_GOSPEL          ClassifiedGenre = 6
	ClassifiedGenre_CLASSIFIED_GENRE_HIPHOP          ClassifiedGenre = 7
	ClassifiedGenre_CLASSIFIED_GENRE_JAZZ            ClassifiedGenre = 8
	ClassifiedGenre_CLASSIFIED_GENRE_LATIN           ClassifiedGenre = 9
	ClassifiedGenre_CLASSIFIED_GENRE_POP             ClassifiedGenre = 10
	ClassifiedGenre_CLASSIFIED_GENRE_R_N_B           ClassifiedGenre = 11
	ClassifiedGenre_CLASSIFIED_GENRE_REGGAE          ClassifiedGenre = 12
	ClassifiedGenre_CLASSIFIED_GENRE_ROCK            ClassifiedGenre = 13
	ClassifiedGenre_CLASSIFIED_GENRE_SPOKEN          ClassifiedGenre = 14
	ClassifiedGenre_CLASSIFIED_GENRE_TRADITIONAL     ClassifiedGenre = 15
	ClassifiedGenre_CLASSIFIED_GENRE_USERDEFINED     ClassifiedGenre = 16
	ClassifiedGenre_CLASSIFIED_GENRE_WORLDMUSIC      ClassifiedGenre = 17
)

// Enum value maps for ClassifiedGenre.
var (
	ClassifiedGenre_name = map[int32]string{
		0:  "CLASSIFIED_GENRE_UNSPECIFIED",
		1:  "CLASSIFIED_GENRE_BLUES",
		2:  "CLASSIFIED_GENRE_CLASSICALMUSIC",
		3:  "CLASSIFIED_GENRE_COUNTRYMUSIC",
		4:  "CLASSIFIED_GENRE_ELECTRONICMUSIC",
		5:  "CLASSIFIED_GENRE_FOLK",
		6:  "CLASSIFIED_GENRE_GOSPEL",
		7:  "CLASSIFIED_GENRE_HIPHOP",
		8:  "CLASSIFIED_GENRE_JAZZ",
		9:  "CLASSIFIED_GENRE_LATIN",
		10: "CLASSIFIED_GENRE_POP",
		11: "CLASSIFIED_GENRE_R_N_B",
		12: "CLASSIFIED_GENRE_REGGAE",
		13: "CLASSIFIED_GENRE_ROCK",
		14: "CLASSIFIED_GENRE_SPOKEN",
		15: "CLASSIFIED_GENRE_TRADITIONAL",
		16: "CLASSIFIED_GENRE_USERDEFINED",
		17: "CLASSIFIED_GENRE_WORLDMUSIC",
	}
	ClassifiedGenre_value = map[string]int32{
		"CLASSIFIED_GENRE_UNSPECIFIED":     0,
		"CLASSIFIED_GENRE_BLUES":           1,
		"CLASSIFIED_GENRE_CLASSICALMUSIC":  2,
		"CLASSIFIED_GENRE_COUNTRYMUSIC":    3,
		"CLASSIFIED_GENRE_ELECTRONICMUSIC": 4,
		"CLASSIFIED_GENRE_FOLK":            5,
		"CLASSIFIED_GENRE_GOSPEL":          6,
		"CLASSIFIED_GENRE_HIPHOP":          7,
		"CLASSIFIED_GENRE_JAZZ":            8,
		"CLASSIFIED_GENRE_LATIN":           9,
		"CLASSIFIED_GENRE_POP":             10,
		"CLASSIFIED_GENRE_R_N_B":           11,
		"CLASSIFIED_GENRE_REGGAE":          12,
		"CLASSIFIED_GENRE_ROCK":            13,
		"CLASSIFIED_GENRE_SPOKEN":          14,
		"CLASSIFIED_GENRE_TRADITIONAL":     15,
		"CLASSIFIED_GENRE_USERDEFINED":     16,
		"CLASSIFIED_GENRE_WORLDMUSIC":      17,
	}
)

func (x ClassifiedGenre) Enum() *ClassifiedGenre {
	p := new(ClassifiedGenre)
	*p = x
	return p
}

func (x ClassifiedGenre) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClassifiedGenre) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[21].Descriptor()
}

func (ClassifiedGenre) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[21]
}

func (x ClassifiedGenre) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClassifiedGenre.Descriptor instead.
func (ClassifiedGenre) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{21}
}

type CodingType int32

const (
	CodingType_CODING_TYPE_UNSPECIFIED CodingType = 0
	CodingType_CODING_TYPE_LOSSLESS    CodingType = 1
	CodingType_CODING_TYPE_LOSSY       CodingType = 2
)

// Enum value maps for CodingType.
var (
	CodingType_name = map[int32]string{
		0: "CODING_TYPE_UNSPECIFIED",
		1: "CODING_TYPE_LOSSLESS",
		2: "CODING_TYPE_LOSSY",
	}
	CodingType_value = map[string]int32{
		"CODING_TYPE_UNSPECIFIED": 0,
		"CODING_TYPE_LOSSLESS":    1,
		"CODING_TYPE_LOSSY":       2,
	}
)

func (x CodingType) Enum() *CodingType {
	p := new(CodingType)
	*p = x
	return p
}

func (x CodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[22].Descriptor()
}

func (CodingType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[22]
}

func (x CodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodingType.Descriptor instead.
func (CodingType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{22}
}

type CollectionMandateType int32

const (
	CollectionMandateType_COLLECTION_MANDATE_TYPE_UNSPECIFIED        CollectionMandateType = 0
	CollectionMandateType_COLLECTION_MANDATE_TYPE_PERFORMER          CollectionMandateType = 1
	CollectionMandateType_COLLECTION_MANDATE_TYPE_RIGHTSORGANIZATION CollectionMandateType = 2
)

// Enum value maps for CollectionMandateType.
var (
	CollectionMandateType_name = map[int32]string{
		0: "COLLECTION_MANDATE_TYPE_UNSPECIFIED",
		1: "COLLECTION_MANDATE_TYPE_PERFORMER",
		2: "COLLECTION_MANDATE_TYPE_RIGHTSORGANIZATION",
	}
	CollectionMandateType_value = map[string]int32{
		"COLLECTION_MANDATE_TYPE_UNSPECIFIED":        0,
		"COLLECTION_MANDATE_TYPE_PERFORMER":          1,
		"COLLECTION_MANDATE_TYPE_RIGHTSORGANIZATION": 2,
	}
)

func (x CollectionMandateType) Enum() *CollectionMandateType {
	p := new(CollectionMandateType)
	*p = x
	return p
}

func (x CollectionMandateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionMandateType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[23].Descriptor()
}

func (CollectionMandateType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[23]
}

func (x CollectionMandateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectionMandateType.Descriptor instead.
func (CollectionMandateType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{23}
}

type CommentaryNoteType int32

const (
	CommentaryNoteType_COMMENTARY_NOTE_TYPE_UNSPECIFIED CommentaryNoteType = 0
	CommentaryNoteType_COMMENTARY_NOTE_TYPE_USERDEFINED CommentaryNoteType = 1
)

// Enum value maps for CommentaryNoteType.
var (
	CommentaryNoteType_name = map[int32]string{
		0: "COMMENTARY_NOTE_TYPE_UNSPECIFIED",
		1: "COMMENTARY_NOTE_TYPE_USERDEFINED",
	}
	CommentaryNoteType_value = map[string]int32{
		"COMMENTARY_NOTE_TYPE_UNSPECIFIED": 0,
		"COMMENTARY_NOTE_TYPE_USERDEFINED": 1,
	}
)

func (x CommentaryNoteType) Enum() *CommentaryNoteType {
	p := new(CommentaryNoteType)
	*p = x
	return p
}

func (x CommentaryNoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentaryNoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[24].Descriptor()
}

func (CommentaryNoteType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[24]
}

func (x CommentaryNoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentaryNoteType.Descriptor instead.
func (CommentaryNoteType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{24}
}

type CommercialModelType int32

const (
	CommercialModelType_COMMERCIAL_MODEL_TYPE_UNSPECIFIED                 CommercialModelType = 0
	CommercialModelType_COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL CommercialModelType = 1
	CommercialModelType_COMMERCIAL_MODEL_TYPE_ASPERCONTRACT               CommercialModelType = 2
	CommercialModelType_COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL              CommercialModelType = 3
	CommercialModelType_COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL           CommercialModelType = 4
	CommercialModelType_COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL             CommercialModelType = 5
	CommercialModelType_COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL   CommercialModelType = 6
	CommercialModelType_COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL            CommercialModelType = 7
	CommercialModelType_COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL           CommercialModelType = 8
	CommercialModelType_COMMERCIAL_MODEL_TYPE_UNKNOWN                     CommercialModelType = 9
	CommercialModelType_COMMERCIAL_MODEL_TYPE_USERDEFINED                 CommercialModelType = 10
)

// Enum value maps for CommercialModelType.
var (
	CommercialModelType_name = map[int32]string{
		0:  "COMMERCIAL_MODEL_TYPE_UNSPECIFIED",
		1:  "COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL",
		2:  "COMMERCIAL_MODEL_TYPE_ASPERCONTRACT",
		3:  "COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL",
		4:  "COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL",
		5:  "COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL",
		6:  "COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL",
		7:  "COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL",
		8:  "COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL",
		9:  "COMMERCIAL_MODEL_TYPE_UNKNOWN",
		10: "COMMERCIAL_MODEL_TYPE_USERDEFINED",
	}
	CommercialModelType_value = map[string]int32{
		"COMMERCIAL_MODEL_TYPE_UNSPECIFIED":                 0,
		"COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL": 1,
		"COMMERCIAL_MODEL_TYPE_ASPERCONTRACT":               2,
		"COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL":              3,
		"COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL":           4,
		"COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL":             5,
		"COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL":   6,
		"COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL":            7,
		"COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL":           8,
		"COMMERCIAL_MODEL_TYPE_UNKNOWN":                     9,
		"COMMERCIAL_MODEL_TYPE_USERDEFINED":                 10,
	}
)

func (x CommercialModelType) Enum() *CommercialModelType {
	p := new(CommercialModelType)
	*p = x
	return p
}

func (x CommercialModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommercialModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[25].Descriptor()
}

func (CommercialModelType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[25]
}

func (x CommercialModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommercialModelType.Descriptor instead.
func (CommercialModelType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{25}
}

type CommercialModelTypeERN int32

const (
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_UNSPECIFIED                 CommercialModelTypeERN = 0
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_ADVERTISEMENTSUPPORTEDMODEL CommercialModelTypeERN = 1
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_DEVICEFEEMODEL              CommercialModelTypeERN = 2
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_FREEOFCHARGEMODEL           CommercialModelTypeERN = 3
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_PAYASYOUGOMODEL             CommercialModelTypeERN = 4
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_PERFORMANCEROYALTIESMODEL   CommercialModelTypeERN = 5
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_RIGHTSCLAIMMODEL            CommercialModelTypeERN = 6
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_SUBSCRIPTIONMODEL           CommercialModelTypeERN = 7
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_USERDEFINED                 CommercialModelTypeERN = 8
)

// Enum value maps for CommercialModelTypeERN.
var (
	CommercialModelTypeERN_name = map[int32]string{
		0: "COMMERCIAL_MODEL_TYPE_E_R_N_UNSPECIFIED",
		1: "COMMERCIAL_MODEL_TYPE_E_R_N_ADVERTISEMENTSUPPORTEDMODEL",
		2: "COMMERCIAL_MODEL_TYPE_E_R_N_DEVICEFEEMODEL",
		3: "COMMERCIAL_MODEL_TYPE_E_R_N_FREEOFCHARGEMODEL",
		4: "COMMERCIAL_MODEL_TYPE_E_R_N_PAYASYOUGOMODEL",
		5: "COMMERCIAL_MODEL_TYPE_E_R_N_PERFORMANCEROYALTIESMODEL",
		6: "COMMERCIAL_MODEL_TYPE_E_R_N_RIGHTSCLAIMMODEL",
		7: "COMMERCIAL_MODEL_TYPE_E_R_N_SUBSCRIPTIONMODEL",
		8: "COMMERCIAL_MODEL_TYPE_E_R_N_USERDEFINED",
	}
	CommercialModelTypeERN_value = map[string]int32{
		"COMMERCIAL_MODEL_TYPE_E_R_N_UNSPECIFIED":                 0,
		"COMMERCIAL_MODEL_TYPE_E_R_N_ADVERTISEMENTSUPPORTEDMODEL": 1,
		"COMMERCIAL_MODEL_TYPE_E_R_N_DEVICEFEEMODEL":              2,
		"COMMERCIAL_MODEL_TYPE_E_R_N_FREEOFCHARGEMODEL":           3,
		"COMMERCIAL_MODEL_TYPE_E_R_N_PAYASYOUGOMODEL":             4,
		"COMMERCIAL_MODEL_TYPE_E_R_N_PERFORMANCEROYALTIESMODEL":   5,
		"COMMERCIAL_MODEL_TYPE_E_R_N_RIGHTSCLAIMMODEL":            6,
		"COMMERCIAL_MODEL_TYPE_E_R_N_SUBSCRIPTIONMODEL":           7,
		"COMMERCIAL_MODEL_TYPE_E_R_N_USERDEFINED":                 8,
	}
)

func (x CommercialModelTypeERN) Enum() *CommercialModelTypeERN {
	p := new(CommercialModelTypeERN)
	*p = x
	return p
}

func (x CommercialModelTypeERN) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommercialModelTypeERN) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[26].Descriptor()
}

func (CommercialModelTypeERN) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[26]
}

func (x CommercialModelTypeERN) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommercialModelTypeERN.Descriptor instead.
func (CommercialModelTypeERN) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{26}
}

type CommercialModelTypeMWNL int32

const (
	CommercialModelTypeMWNL_COMMERCIAL_MODEL_TYPE_M_W_N_L_UNSPECIFIED                 CommercialModelTypeMWNL = 0
	CommercialModelTypeMWNL_COMMERCIAL_MODEL_TYPE_M_W_N_L_ADVERTISEMENTSUPPORTEDMODEL CommercialModelTypeMWNL = 1
	CommercialModelTypeMWNL_COMMERCIAL_MODEL_TYPE_M_W_N_L_PAYASYOUGOMODEL             CommercialModelTypeMWNL = 2
	CommercialModelTypeMWNL_COMMERCIAL_MODEL_TYPE_M_W_N_L_SUBSCRIPTIONMODEL           CommercialModelTypeMWNL = 3
)

// Enum value maps for CommercialModelTypeMWNL.
var (
	CommercialModelTypeMWNL_name = map[int32]string{
		0: "COMMERCIAL_MODEL_TYPE_M_W_N_L_UNSPECIFIED",
		1: "COMMERCIAL_MODEL_TYPE_M_W_N_L_ADVERTISEMENTSUPPORTEDMODEL",
		2: "COMMERCIAL_MODEL_TYPE_M_W_N_L_PAYASYOUGOMODEL",
		3: "COMMERCIAL_MODEL_TYPE_M_W_N_L_SUBSCRIPTIONMODEL",
	}
	CommercialModelTypeMWNL_value = map[string]int32{
		"COMMERCIAL_MODEL_TYPE_M_W_N_L_UNSPECIFIED":                 0,
		"COMMERCIAL_MODEL_TYPE_M_W_N_L_ADVERTISEMENTSUPPORTEDMODEL": 1,
		"COMMERCIAL_MODEL_TYPE_M_W_N_L_PAYASYOUGOMODEL":             2,
		"COMMERCIAL_MODEL_TYPE_M_W_N_L_SUBSCRIPTIONMODEL":           3,
	}
)

func (x CommercialModelTypeMWNL) Enum() *CommercialModelTypeMWNL {
	p := new(CommercialModelTypeMWNL)
	*p = x
	return p
}

func (x CommercialModelTypeMWNL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommercialModelTypeMWNL) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[27].Descriptor()
}

func (CommercialModelTypeMWNL) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[27]
}

func (x CommercialModelTypeMWNL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommercialModelTypeMWNL.Descriptor instead.
func (CommercialModelTypeMWNL) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{27}
}

type CompilationType int32

const (
	CompilationType_COMPILATION_TYPE_UNSPECIFIED            CompilationType = 0
	CompilationType_COMPILATION_TYPE_INTERNALCOMPILATION    CompilationType = 1
	CompilationType_COMPILATION_TYPE_NONINTERNALCOMPILATION CompilationType = 2
	CompilationType_COMPILATION_TYPE_NOTCOMPILED            CompilationType = 3
)

// Enum value maps for CompilationType.
var (
	CompilationType_name = map[int32]string{
		0: "COMPILATION_TYPE_UNSPECIFIED",
		1: "COMPILATION_TYPE_INTERNALCOMPILATION",
		2: "COMPILATION_TYPE_NONINTERNALCOMPILATION",
		3: "COMPILATION_TYPE_NOTCOMPILED",
	}
	CompilationType_value = map[string]int32{
		"COMPILATION_TYPE_UNSPECIFIED":            0,
		"COMPILATION_TYPE_INTERNALCOMPILATION":    1,
		"COMPILATION_TYPE_NONINTERNALCOMPILATION": 2,
		"COMPILATION_TYPE_NOTCOMPILED":            3,
	}
)

func (x CompilationType) Enum() *CompilationType {
	p := new(CompilationType)
	*p = x
	return p
}

func (x CompilationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompilationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[28].Descriptor()
}

func (CompilationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[28]
}

func (x CompilationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompilationType.Descriptor instead.
func (CompilationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{28}
}

type CompositeMusicalWorkType int32

const (
	CompositeMusicalWorkType_COMPOSITE_MUSICAL_WORK_TYPE_UNSPECIFIED CompositeMusicalWorkType = 0
	CompositeMusicalWorkType_COMPOSITE_MUSICAL_WORK_TYPE_MEDLEY      CompositeMusicalWorkType = 1
	CompositeMusicalWorkType_COMPOSITE_MUSICAL_WORK_TYPE_NEITHER     CompositeMusicalWorkType = 2
	CompositeMusicalWorkType_COMPOSITE_MUSICAL_WORK_TYPE_POTPOURRI   CompositeMusicalWorkType = 3
)

// Enum value maps for CompositeMusicalWorkType.
var (
	CompositeMusicalWorkType_name = map[int32]string{
		0: "COMPOSITE_MUSICAL_WORK_TYPE_UNSPECIFIED",
		1: "COMPOSITE_MUSICAL_WORK_TYPE_MEDLEY",
		2: "COMPOSITE_MUSICAL_WORK_TYPE_NEITHER",
		3: "COMPOSITE_MUSICAL_WORK_TYPE_POTPOURRI",
	}
	CompositeMusicalWorkType_value = map[string]int32{
		"COMPOSITE_MUSICAL_WORK_TYPE_UNSPECIFIED": 0,
		"COMPOSITE_MUSICAL_WORK_TYPE_MEDLEY":      1,
		"COMPOSITE_MUSICAL_WORK_TYPE_NEITHER":     2,
		"COMPOSITE_MUSICAL_WORK_TYPE_POTPOURRI":   3,
	}
)

func (x CompositeMusicalWorkType) Enum() *CompositeMusicalWorkType {
	p := new(CompositeMusicalWorkType)
	*p = x
	return p
}

func (x CompositeMusicalWorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositeMusicalWorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[29].Descriptor()
}

func (CompositeMusicalWorkType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[29]
}

func (x CompositeMusicalWorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositeMusicalWorkType.Descriptor instead.
func (CompositeMusicalWorkType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{29}
}

type ContainerFormat int32

const (
	ContainerFormat_CONTAINER_FORMAT_UNSPECIFIED ContainerFormat = 0
	ContainerFormat_CONTAINER_FORMAT_AIFF        ContainerFormat = 1
	ContainerFormat_CONTAINER_FORMAT_AVI         ContainerFormat = 2
	ContainerFormat_CONTAINER_FORMAT_MP4         ContainerFormat = 3
	ContainerFormat_CONTAINER_FORMAT_OGG         ContainerFormat = 4
	ContainerFormat_CONTAINER_FORMAT_QUICKTIME   ContainerFormat = 5
	ContainerFormat_CONTAINER_FORMAT_REALMEDIA   ContainerFormat = 6
	ContainerFormat_CONTAINER_FORMAT_RMF         ContainerFormat = 7
	ContainerFormat_CONTAINER_FORMAT_USERDEFINED ContainerFormat = 8
	ContainerFormat_CONTAINER_FORMAT_WAV         ContainerFormat = 9
)

// Enum value maps for ContainerFormat.
var (
	ContainerFormat_name = map[int32]string{
		0: "CONTAINER_FORMAT_UNSPECIFIED",
		1: "CONTAINER_FORMAT_AIFF",
		2: "CONTAINER_FORMAT_AVI",
		3: "CONTAINER_FORMAT_MP4",
		4: "CONTAINER_FORMAT_OGG",
		5: "CONTAINER_FORMAT_QUICKTIME",
		6: "CONTAINER_FORMAT_REALMEDIA",
		7: "CONTAINER_FORMAT_RMF",
		8: "CONTAINER_FORMAT_USERDEFINED",
		9: "CONTAINER_FORMAT_WAV",
	}
	ContainerFormat_value = map[string]int32{
		"CONTAINER_FORMAT_UNSPECIFIED": 0,
		"CONTAINER_FORMAT_AIFF":        1,
		"CONTAINER_FORMAT_AVI":         2,
		"CONTAINER_FORMAT_MP4":         3,
		"CONTAINER_FORMAT_OGG":         4,
		"CONTAINER_FORMAT_QUICKTIME":   5,
		"CONTAINER_FORMAT_REALMEDIA":   6,
		"CONTAINER_FORMAT_RMF":         7,
		"CONTAINER_FORMAT_USERDEFINED": 8,
		"CONTAINER_FORMAT_WAV":         9,
	}
)

func (x ContainerFormat) Enum() *ContainerFormat {
	p := new(ContainerFormat)
	*p = x
	return p
}

func (x ContainerFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[30].Descriptor()
}

func (ContainerFormat) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[30]
}

func (x ContainerFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerFormat.Descriptor instead.
func (ContainerFormat) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{30}
}

type ContributorClaimStatus int32

const (
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_UNSPECIFIED      ContributorClaimStatus = 0
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_ACCEPTED         ContributorClaimStatus = 1
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_CONFLICT         ContributorClaimStatus = 2
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_DATAINCONSISTENT ContributorClaimStatus = 3
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_NOCONFLICT       ContributorClaimStatus = 4
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_PENDINGREVIEW    ContributorClaimStatus = 5
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_REJECTED         ContributorClaimStatus = 6
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_REVOKED          ContributorClaimStatus = 7
)

// Enum value maps for ContributorClaimStatus.
var (
	ContributorClaimStatus_name = map[int32]string{
		0: "CONTRIBUTOR_CLAIM_STATUS_UNSPECIFIED",
		1: "CONTRIBUTOR_CLAIM_STATUS_ACCEPTED",
		2: "CONTRIBUTOR_CLAIM_STATUS_CONFLICT",
		3: "CONTRIBUTOR_CLAIM_STATUS_DATAINCONSISTENT",
		4: "CONTRIBUTOR_CLAIM_STATUS_NOCONFLICT",
		5: "CONTRIBUTOR_CLAIM_STATUS_PENDINGREVIEW",
		6: "CONTRIBUTOR_CLAIM_STATUS_REJECTED",
		7: "CONTRIBUTOR_CLAIM_STATUS_REVOKED",
	}
	ContributorClaimStatus_value = map[string]int32{
		"CONTRIBUTOR_CLAIM_STATUS_UNSPECIFIED":      0,
		"CONTRIBUTOR_CLAIM_STATUS_ACCEPTED":         1,
		"CONTRIBUTOR_CLAIM_STATUS_CONFLICT":         2,
		"CONTRIBUTOR_CLAIM_STATUS_DATAINCONSISTENT": 3,
		"CONTRIBUTOR_CLAIM_STATUS_NOCONFLICT":       4,
		"CONTRIBUTOR_CLAIM_STATUS_PENDINGREVIEW":    5,
		"CONTRIBUTOR_CLAIM_STATUS_REJECTED":         6,
		"CONTRIBUTOR_CLAIM_STATUS_REVOKED":          7,
	}
)

func (x ContributorClaimStatus) Enum() *ContributorClaimStatus {
	p := new(ContributorClaimStatus)
	*p = x
	return p
}

func (x ContributorClaimStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributorClaimStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[31].Descriptor()
}

func (ContributorClaimStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[31]
}

func (x ContributorClaimStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributorClaimStatus.Descriptor instead.
func (ContributorClaimStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{31}
}

type ContributorRole int32

const (
	ContributorRole_CONTRIBUTOR_ROLE_UNSPECIFIED                        ContributorRole = 0
	ContributorRole_CONTRIBUTOR_ROLE_ADAPTER                            ContributorRole = 1
	ContributorRole_CONTRIBUTOR_ROLE_ARCHITECT                          ContributorRole = 2
	ContributorRole_CONTRIBUTOR_ROLE_ARRANGER                           ContributorRole = 3
	ContributorRole_CONTRIBUTOR_ROLE_AUTHOR                             ContributorRole = 4
	ContributorRole_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS                 ContributorRole = 5
	ContributorRole_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD                  ContributorRole = 6
	ContributorRole_CONTRIBUTOR_ROLE_COMPILER                           ContributorRole = 7
	ContributorRole_CONTRIBUTOR_ROLE_COMPOSER                           ContributorRole = 8
	ContributorRole_CONTRIBUTOR_ROLE_COMPOSERLYRICIST                   ContributorRole = 9
	ContributorRole_CONTRIBUTOR_ROLE_CONCEPTOR                          ContributorRole = 10
	ContributorRole_CONTRIBUTOR_ROLE_CREATOR                            ContributorRole = 11
	ContributorRole_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR                     ContributorRole = 12
	ContributorRole_CONTRIBUTOR_ROLE_DISSERTANT                         ContributorRole = 13
	ContributorRole_CONTRIBUTOR_ROLE_ENGRAVER                           ContributorRole = 14
	ContributorRole_CONTRIBUTOR_ROLE_ETCHER                             ContributorRole = 15
	ContributorRole_CONTRIBUTOR_ROLE_JOURNALIST                         ContributorRole = 16
	ContributorRole_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT                 ContributorRole = 17
	ContributorRole_CONTRIBUTOR_ROLE_LIBRETTIST                         ContributorRole = 18
	ContributorRole_CONTRIBUTOR_ROLE_LITHOGRAPHER                       ContributorRole = 19
	ContributorRole_CONTRIBUTOR_ROLE_LYRICIST                           ContributorRole = 20
	ContributorRole_CONTRIBUTOR_ROLE_METALENGRAVER                      ContributorRole = 21
	ContributorRole_CONTRIBUTOR_ROLE_NONLYRICAUTHOR                     ContributorRole = 22
	ContributorRole_CONTRIBUTOR_ROLE_PLATEMAKER                         ContributorRole = 23
	ContributorRole_CONTRIBUTOR_ROLE_PLAYWRIGHT                         ContributorRole = 24
	ContributorRole_CONTRIBUTOR_ROLE_REPORTER                           ContributorRole = 25
	ContributorRole_CONTRIBUTOR_ROLE_REVIEWER                           ContributorRole = 26
	ContributorRole_CONTRIBUTOR_ROLE_RUBRICATOR                         ContributorRole = 27
	ContributorRole_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR                   ContributorRole = 28
	ContributorRole_CONTRIBUTOR_ROLE_SCULPTOR                           ContributorRole = 29
	ContributorRole_CONTRIBUTOR_ROLE_SUBARRANGER                        ContributorRole = 30
	ContributorRole_CONTRIBUTOR_ROLE_SUBLYRICIST                        ContributorRole = 31
	ContributorRole_CONTRIBUTOR_ROLE_TRANSLATOR                         ContributorRole = 32
	ContributorRole_CONTRIBUTOR_ROLE_WOODCUTTER                         ContributorRole = 33
	ContributorRole_CONTRIBUTOR_ROLE_WOODENGRAVER                       ContributorRole = 34
	ContributorRole_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL       ContributorRole = 35
	ContributorRole_CONTRIBUTOR_ROLE_BOOKPUBLISHER                      ContributorRole = 36
	ContributorRole_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT                  ContributorRole = 37
	ContributorRole_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER                    ContributorRole = 38
	ContributorRole_CONTRIBUTOR_ROLE_MUSICPUBLISHER                     ContributorRole = 39
	ContributorRole_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER                 ContributorRole = 40
	ContributorRole_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER                  ContributorRole = 41
	ContributorRole_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER                ContributorRole = 42
	ContributorRole_CONTRIBUTOR_ROLE_SUBPUBLISHER                       ContributorRole = 43
	ContributorRole_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER               ContributorRole = 44
	ContributorRole_CONTRIBUTOR_ROLE_UNKNOWN                            ContributorRole = 45
	ContributorRole_CONTRIBUTOR_ROLE_USERDEFINED                        ContributorRole = 46
	ContributorRole_CONTRIBUTOR_ROLE_ACCOMPANYIST                       ContributorRole = 47
	ContributorRole_CONTRIBUTOR_ROLE_ACTOR                              ContributorRole = 48
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALENGINEER                 ContributorRole = 49
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER           ContributorRole = 50
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER                ContributorRole = 51
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER      ContributorRole = 52
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER           ContributorRole = 53
	ContributorRole_CONTRIBUTOR_ROLE_ANCHORPERSON                       ContributorRole = 54
	ContributorRole_CONTRIBUTOR_ROLE_ANIMALTRAINER                      ContributorRole = 55
	ContributorRole_CONTRIBUTOR_ROLE_ANIMATOR                           ContributorRole = 56
	ContributorRole_CONTRIBUTOR_ROLE_ANNOTATOR                          ContributorRole = 57
	ContributorRole_CONTRIBUTOR_ROLE_ANNOUNCER                          ContributorRole = 58
	ContributorRole_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR                 ContributorRole = 59
	ContributorRole_CONTRIBUTOR_ROLE_AANDRCOORDINATOR                   ContributorRole = 60
	ContributorRole_CONTRIBUTOR_ROLE_ARMOURER                           ContributorRole = 61
	ContributorRole_CONTRIBUTOR_ROLE_ARTCOPYIST                         ContributorRole = 62
	ContributorRole_CONTRIBUTOR_ROLE_ARTDIRECTOR                        ContributorRole = 63
	ContributorRole_CONTRIBUTOR_ROLE_ARTIST                             ContributorRole = 64
	ContributorRole_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER      ContributorRole = 65
	ContributorRole_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER                ContributorRole = 66
	ContributorRole_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER          ContributorRole = 67
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR            ContributorRole = 68
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN   ContributorRole = 69
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR                 ContributorRole = 70
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR                  ContributorRole = 71
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTEDITOR                    ContributorRole = 72
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTENGINEER                  ContributorRole = 73
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER                  ContributorRole = 74
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR              ContributorRole = 75
	ContributorRole_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER                ContributorRole = 76
	ContributorRole_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER                  ContributorRole = 77
	ContributorRole_CONTRIBUTOR_ROLE_AURALTRAINER                       ContributorRole = 78
	ContributorRole_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST                 ContributorRole = 79
	ContributorRole_CONTRIBUTOR_ROLE_BALANCEENGINEER                    ContributorRole = 80
	ContributorRole_CONTRIBUTOR_ROLE_BANDLEADER                         ContributorRole = 81
	ContributorRole_CONTRIBUTOR_ROLE_BINDER                             ContributorRole = 82
	ContributorRole_CONTRIBUTOR_ROLE_BINDINGDESIGNER                    ContributorRole = 83
	ContributorRole_CONTRIBUTOR_ROLE_BOOKDESIGNER                       ContributorRole = 84
	ContributorRole_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER                   ContributorRole = 85
	ContributorRole_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER                  ContributorRole = 86
	ContributorRole_CONTRIBUTOR_ROLE_BOOKPRODUCER                       ContributorRole = 87
	ContributorRole_CONTRIBUTOR_ROLE_BROADCASTASSISTANT                 ContributorRole = 88
	ContributorRole_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST                ContributorRole = 89
	ContributorRole_CONTRIBUTOR_ROLE_CALLIGRAPHER                       ContributorRole = 90
	ContributorRole_CONTRIBUTOR_ROLE_CAMERAOPERATOR                     ContributorRole = 91
	ContributorRole_CONTRIBUTOR_ROLE_CARPENTER                          ContributorRole = 92
	ContributorRole_CONTRIBUTOR_ROLE_CARTOGRAPHER                       ContributorRole = 93
	ContributorRole_CONTRIBUTOR_ROLE_CARTOONIST                         ContributorRole = 94
	ContributorRole_CONTRIBUTOR_ROLE_CASTINGDIRECTOR                    ContributorRole = 95
	ContributorRole_CONTRIBUTOR_ROLE_CAUSEUR                            ContributorRole = 96
	ContributorRole_CONTRIBUTOR_ROLE_CENSOR                             ContributorRole = 97
	ContributorRole_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN            ContributorRole = 98
	ContributorRole_CONTRIBUTOR_ROLE_CHOIR                              ContributorRole = 99
	ContributorRole_CONTRIBUTOR_ROLE_CHOIRMEMBER                        ContributorRole = 100
	ContributorRole_CONTRIBUTOR_ROLE_CHOREOGRAPHER                      ContributorRole = 101
	ContributorRole_CONTRIBUTOR_ROLE_CHORUSMASTER                       ContributorRole = 102
	ContributorRole_CONTRIBUTOR_ROLE_CIRCUSARTIST                       ContributorRole = 103
	ContributorRole_CONTRIBUTOR_ROLE_CLAPPERLOADER                      ContributorRole = 104
	ContributorRole_CONTRIBUTOR_ROLE_CLUBDJ                             ContributorRole = 105
	ContributorRole_CONTRIBUTOR_ROLE_CODIRECTOR                         ContributorRole = 106
	ContributorRole_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER                ContributorRole = 107
	ContributorRole_CONTRIBUTOR_ROLE_COLORSEPARATOR                     ContributorRole = 108
	ContributorRole_CONTRIBUTOR_ROLE_COMEDIAN                           ContributorRole = 109
	ContributorRole_CONTRIBUTOR_ROLE_COMIXER                            ContributorRole = 110
	ContributorRole_CONTRIBUTOR_ROLE_COMIXINGENGINEER                   ContributorRole = 111
	ContributorRole_CONTRIBUTOR_ROLE_COMMENTATOR                        ContributorRole = 112
	ContributorRole_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER           ContributorRole = 113
	ContributorRole_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER                ContributorRole = 114
	ContributorRole_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR             ContributorRole = 115
	ContributorRole_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER                 ContributorRole = 116
	ContributorRole_CONTRIBUTOR_ROLE_CONCERTMASTER                      ContributorRole = 117
	ContributorRole_CONTRIBUTOR_ROLE_CONDUCTOR                          ContributorRole = 118
	ContributorRole_CONTRIBUTOR_ROLE_CONSULTANT                         ContributorRole = 119
	ContributorRole_CONTRIBUTOR_ROLE_CONTINUITYCHECKER                  ContributorRole = 120
	ContributorRole_CONTRIBUTOR_ROLE_CONTRACTOR                         ContributorRole = 121
	ContributorRole_CONTRIBUTOR_ROLE_COPRODUCER                         ContributorRole = 122
	ContributorRole_CONTRIBUTOR_ROLE_CORRESPONDENT                      ContributorRole = 123
	ContributorRole_CONTRIBUTOR_ROLE_COSTUMEDESIGNER                    ContributorRole = 124
	ContributorRole_CONTRIBUTOR_ROLE_COVERDESIGNER                      ContributorRole = 125
	ContributorRole_CONTRIBUTOR_ROLE_DANCER                             ContributorRole = 126
	ContributorRole_CONTRIBUTOR_ROLE_DELINEATOR                         ContributorRole = 127
	ContributorRole_CONTRIBUTOR_ROLE_DESIGNER                           ContributorRole = 128
	ContributorRole_CONTRIBUTOR_ROLE_DIALOGUECOACH                      ContributorRole = 129
	ContributorRole_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR                   ContributorRole = 130
	ContributorRole_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER    ContributorRole = 131
	ContributorRole_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER             ContributorRole = 132
	ContributorRole_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER       ContributorRole = 133
	ContributorRole_CONTRIBUTOR_ROLE_DIRECTOR                           ContributorRole = 134
	ContributorRole_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER        ContributorRole = 135
	ContributorRole_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY                ContributorRole = 136
	ContributorRole_CONTRIBUTOR_ROLE_DJ                                 ContributorRole = 137
	ContributorRole_CONTRIBUTOR_ROLE_DRAUGHTSMAN                        ContributorRole = 138
	ContributorRole_CONTRIBUTOR_ROLE_DRESSER                            ContributorRole = 139
	ContributorRole_CONTRIBUTOR_ROLE_DUBBER                             ContributorRole = 140
	ContributorRole_CONTRIBUTOR_ROLE_EDITOR                             ContributorRole = 141
	ContributorRole_CONTRIBUTOR_ROLE_EDITORINCHIEF                      ContributorRole = 142
	ContributorRole_CONTRIBUTOR_ROLE_EDITOROFTHEDAY                     ContributorRole = 143
	ContributorRole_CONTRIBUTOR_ROLE_ENCODER                            ContributorRole = 144
	ContributorRole_CONTRIBUTOR_ROLE_ENGINEER                           ContributorRole = 145
	ContributorRole_CONTRIBUTOR_ROLE_ENSEMBLE                           ContributorRole = 146
	ContributorRole_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER                  ContributorRole = 147
	ContributorRole_CONTRIBUTOR_ROLE_EXPERT                             ContributorRole = 148
	ContributorRole_CONTRIBUTOR_ROLE_FACSIMILIST                        ContributorRole = 149
	ContributorRole_CONTRIBUTOR_ROLE_FIGHTDIRECTOR                      ContributorRole = 150
	ContributorRole_CONTRIBUTOR_ROLE_FILMDIRECTOR                       ContributorRole = 151
	ContributorRole_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR                    ContributorRole = 152
	ContributorRole_CONTRIBUTOR_ROLE_FILMEDITOR                         ContributorRole = 153
	ContributorRole_CONTRIBUTOR_ROLE_FILMPRODUCER                       ContributorRole = 154
	ContributorRole_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER                  ContributorRole = 155
	ContributorRole_CONTRIBUTOR_ROLE_FLOORMANAGER                       ContributorRole = 156
	ContributorRole_CONTRIBUTOR_ROLE_FOCUSPULLER                        ContributorRole = 157
	ContributorRole_CONTRIBUTOR_ROLE_FOLEYARTIST                        ContributorRole = 158
	ContributorRole_CONTRIBUTOR_ROLE_FOLEYEDITOR                        ContributorRole = 159
	ContributorRole_CONTRIBUTOR_ROLE_FOLEYMIXER                         ContributorRole = 160
	ContributorRole_CONTRIBUTOR_ROLE_GRAPHICARTIST                      ContributorRole = 161
	ContributorRole_CONTRIBUTOR_ROLE_GRAPHICASSISTANT                   ContributorRole = 162
	ContributorRole_CONTRIBUTOR_ROLE_GRAPHICDESIGNER                    ContributorRole = 163
	ContributorRole_CONTRIBUTOR_ROLE_GREENSMAN                          ContributorRole = 164
	ContributorRole_CONTRIBUTOR_ROLE_GRIP                               ContributorRole = 165
	ContributorRole_CONTRIBUTOR_ROLE_GUESTCONDUCTOR                     ContributorRole = 166
	ContributorRole_CONTRIBUTOR_ROLE_GROUPMEMBER                        ContributorRole = 167
	ContributorRole_CONTRIBUTOR_ROLE_HAIRDRESSER                        ContributorRole = 168
	ContributorRole_CONTRIBUTOR_ROLE_ILLUSTRATOR                        ContributorRole = 169
	ContributorRole_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER            ContributorRole = 170
	ContributorRole_CONTRIBUTOR_ROLE_INITIALPRODUCER                    ContributorRole = 171
	ContributorRole_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST                   ContributorRole = 172
	ContributorRole_CONTRIBUTOR_ROLE_INTERVIEWER                        ContributorRole = 173
	ContributorRole_CONTRIBUTOR_ROLE_KEYCHARACTER                       ContributorRole = 174
	ContributorRole_CONTRIBUTOR_ROLE_KEYGRIP                            ContributorRole = 175
	ContributorRole_CONTRIBUTOR_ROLE_KEYTALENT                          ContributorRole = 176
	ContributorRole_CONTRIBUTOR_ROLE_LEADMAN                            ContributorRole = 177
	ContributorRole_CONTRIBUTOR_ROLE_LEADPERFORMER                      ContributorRole = 178
	ContributorRole_CONTRIBUTOR_ROLE_LEADVOCALIST                       ContributorRole = 179
	ContributorRole_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR                   ContributorRole = 180
	ContributorRole_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN                 ContributorRole = 181
	ContributorRole_CONTRIBUTOR_ROLE_LOCATIONMANAGER                    ContributorRole = 182
	ContributorRole_CONTRIBUTOR_ROLE_MAKEUPARTIST                       ContributorRole = 183
	ContributorRole_CONTRIBUTOR_ROLE_MANUFACTURER                       ContributorRole = 184
	ContributorRole_CONTRIBUTOR_ROLE_MASTERINGENGINEER                  ContributorRole = 185
	ContributorRole_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER            ContributorRole = 186
	ContributorRole_CONTRIBUTOR_ROLE_MATTEARTIST                        ContributorRole = 187
	ContributorRole_CONTRIBUTOR_ROLE_MIXER                              ContributorRole = 188
	ContributorRole_CONTRIBUTOR_ROLE_MIXINGENGINEER                     ContributorRole = 189
	ContributorRole_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER               ContributorRole = 190
	ContributorRole_CONTRIBUTOR_ROLE_MUSICARRANGER                      ContributorRole = 191
	ContributorRole_CONTRIBUTOR_ROLE_MUSICCOPYIST                       ContributorRole = 192
	ContributorRole_CONTRIBUTOR_ROLE_MUSICDIRECTOR                      ContributorRole = 193
	ContributorRole_CONTRIBUTOR_ROLE_MUSICGROUP                         ContributorRole = 194
	ContributorRole_CONTRIBUTOR_ROLE_MUSICIAN                           ContributorRole = 195
	ContributorRole_CONTRIBUTOR_ROLE_NARRATOR                           ContributorRole = 196
	ContributorRole_CONTRIBUTOR_ROLE_NEWSPRODUCER                       ContributorRole = 197
	ContributorRole_CONTRIBUTOR_ROLE_NEWSREADER                         ContributorRole = 198
	ContributorRole_CONTRIBUTOR_ROLE_NOTSPECIFIED                       ContributorRole = 199
	ContributorRole_CONTRIBUTOR_ROLE_ORCHESTRA                          ContributorRole = 200
	ContributorRole_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER                    ContributorRole = 201
	ContributorRole_CONTRIBUTOR_ROLE_ORIGINALARTIST                     ContributorRole = 202
	ContributorRole_CONTRIBUTOR_ROLE_OVERDUBENGINEER                    ContributorRole = 203
	ContributorRole_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER              ContributorRole = 204
	ContributorRole_CONTRIBUTOR_ROLE_PAINTER                            ContributorRole = 205
	ContributorRole_CONTRIBUTOR_ROLE_PERFORMER                          ContributorRole = 206
	ContributorRole_CONTRIBUTOR_ROLE_PHOTOGRAPHER                       ContributorRole = 207
	ContributorRole_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR                ContributorRole = 208
	ContributorRole_CONTRIBUTOR_ROLE_PLAYBACKSINGER                     ContributorRole = 209
	ContributorRole_CONTRIBUTOR_ROLE_POSTPRODUCER                       ContributorRole = 210
	ContributorRole_CONTRIBUTOR_ROLE_PREPRODUCTION                      ContributorRole = 211
	ContributorRole_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER              ContributorRole = 212
	ContributorRole_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER        ContributorRole = 213
	ContributorRole_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN                    ContributorRole = 214
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT                ContributorRole = 215
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY                  ContributorRole = 216
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR              ContributorRole = 217
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT               ContributorRole = 218
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER                  ContributorRole = 219
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY                ContributorRole = 220
	ContributorRole_CONTRIBUTOR_ROLE_PROJECTENGINEER                    ContributorRole = 221
	ContributorRole_CONTRIBUTOR_ROLE_PROGRAMMER                         ContributorRole = 222
	ContributorRole_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER                ContributorRole = 223
	ContributorRole_CONTRIBUTOR_ROLE_PROGRAMPRODUCER                    ContributorRole = 224
	ContributorRole_CONTRIBUTOR_ROLE_PROPERTYMANAGER                    ContributorRole = 225
	ContributorRole_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR                 ContributorRole = 226
	ContributorRole_CONTRIBUTOR_ROLE_PUPPETEER                          ContributorRole = 227
	ContributorRole_CONTRIBUTOR_ROLE_PYROTECHNICIAN                     ContributorRole = 228
	ContributorRole_CONTRIBUTOR_ROLE_RECORDINGENGINEER                  ContributorRole = 229
	ContributorRole_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER            ContributorRole = 230
	ContributorRole_CONTRIBUTOR_ROLE_REDACTOR                           ContributorRole = 231
	ContributorRole_CONTRIBUTOR_ROLE_REISSUEPRODUCER                    ContributorRole = 232
	ContributorRole_CONTRIBUTOR_ROLE_REMIXEDARTIST                      ContributorRole = 233
	ContributorRole_CONTRIBUTOR_ROLE_REMIXER                            ContributorRole = 234
	ContributorRole_CONTRIBUTOR_ROLE_REMIXINGENGINEER                   ContributorRole = 235
	ContributorRole_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER             ContributorRole = 236
	ContributorRole_CONTRIBUTOR_ROLE_REPETITEUR                         ContributorRole = 237
	ContributorRole_CONTRIBUTOR_ROLE_RESEARCHER                         ContributorRole = 238
	ContributorRole_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD                   ContributorRole = 239
	ContributorRole_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER                 ContributorRole = 240
	ContributorRole_CONTRIBUTOR_ROLE_RESTAGER                           ContributorRole = 241
	ContributorRole_CONTRIBUTOR_ROLE_RIGGER                             ContributorRole = 242
	ContributorRole_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT          ContributorRole = 243
	ContributorRole_CONTRIBUTOR_ROLE_RUNNER                             ContributorRole = 244
	ContributorRole_CONTRIBUTOR_ROLE_SCENICOPERATIVE                    ContributorRole = 245
	ContributorRole_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR                  ContributorRole = 246
	ContributorRole_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR                   ContributorRole = 247
	ContributorRole_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR      ContributorRole = 248
	ContributorRole_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR            ContributorRole = 249
	ContributorRole_CONTRIBUTOR_ROLE_SECONDCONDUCTOR                    ContributorRole = 250
	ContributorRole_CONTRIBUTOR_ROLE_SECONDENGINEER                     ContributorRole = 251
	ContributorRole_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR                 ContributorRole = 252
	ContributorRole_CONTRIBUTOR_ROLE_SERIESPRODUCER                     ContributorRole = 253
	ContributorRole_CONTRIBUTOR_ROLE_SETDESIGNER                        ContributorRole = 254
	ContributorRole_CONTRIBUTOR_ROLE_SETDRESSER                         ContributorRole = 255
	ContributorRole_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER            ContributorRole = 256
	ContributorRole_CONTRIBUTOR_ROLE_SOLOIST                            ContributorRole = 257
	ContributorRole_CONTRIBUTOR_ROLE_SOUNDDESIGNER                      ContributorRole = 258
	ContributorRole_CONTRIBUTOR_ROLE_SOUNDMIXER                         ContributorRole = 259
	ContributorRole_CONTRIBUTOR_ROLE_SOUNDRECORDIST                     ContributorRole = 260
	ContributorRole_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR                    ContributorRole = 261
	ContributorRole_CONTRIBUTOR_ROLE_SPEAKER                            ContributorRole = 262
	ContributorRole_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN           ContributorRole = 263
	ContributorRole_CONTRIBUTOR_ROLE_SPONSOR                            ContributorRole = 264
	ContributorRole_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER             ContributorRole = 265
	ContributorRole_CONTRIBUTOR_ROLE_STAGEDIRECTOR                      ContributorRole = 266
	ContributorRole_CONTRIBUTOR_ROLE_STAGEENGINEER                      ContributorRole = 267
	ContributorRole_CONTRIBUTOR_ROLE_STORYTELLER                        ContributorRole = 268
	ContributorRole_CONTRIBUTOR_ROLE_STRINGENGINEER                     ContributorRole = 269
	ContributorRole_CONTRIBUTOR_ROLE_STRINGPRODUCER                     ContributorRole = 270
	ContributorRole_CONTRIBUTOR_ROLE_STRINGSDIRECTOR                    ContributorRole = 271
	ContributorRole_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR                    ContributorRole = 272
	ContributorRole_CONTRIBUTOR_ROLE_STUDIOMUSICIAN                     ContributorRole = 273
	ContributorRole_CONTRIBUTOR_ROLE_STUDIOPERSONNEL                    ContributorRole = 274
	ContributorRole_CONTRIBUTOR_ROLE_STUDIOPRODUCER                     ContributorRole = 275
	ContributorRole_CONTRIBUTOR_ROLE_STUNTS                             ContributorRole = 276
	ContributorRole_CONTRIBUTOR_ROLE_SUBTITLESEDITOR                    ContributorRole = 277
	ContributorRole_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR                ContributorRole = 278
	ContributorRole_CONTRIBUTOR_ROLE_SUPPORTINGACTOR                    ContributorRole = 279
	ContributorRole_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER             ContributorRole = 280
	ContributorRole_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER       ContributorRole = 281
	ContributorRole_CONTRIBUTOR_ROLE_TAPEOPERATOR                       ContributorRole = 282
	ContributorRole_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR                  ContributorRole = 283
	ContributorRole_CONTRIBUTOR_ROLE_TONMEISTER                         ContributorRole = 284
	ContributorRole_CONTRIBUTOR_ROLE_TRACKINGENGINEER                   ContributorRole = 285
	ContributorRole_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER             ContributorRole = 286
	ContributorRole_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER       ContributorRole = 287
	ContributorRole_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER ContributorRole = 288
	ContributorRole_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER              ContributorRole = 289
	ContributorRole_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL          ContributorRole = 290
	ContributorRole_CONTRIBUTOR_ROLE_TYPEDESIGNER                       ContributorRole = 291
	ContributorRole_CONTRIBUTOR_ROLE_VIDEODIRECTOR                      ContributorRole = 292
	ContributorRole_CONTRIBUTOR_ROLE_VIDEOGRAPHER                       ContributorRole = 293
	ContributorRole_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR               ContributorRole = 294
	ContributorRole_CONTRIBUTOR_ROLE_VIDEOPRODUCER                      ContributorRole = 295
	ContributorRole_CONTRIBUTOR_ROLE_VISIONMIXER                        ContributorRole = 296
	ContributorRole_CONTRIBUTOR_ROLE_VISUALEDITOR                       ContributorRole = 297
	ContributorRole_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN            ContributorRole = 298
	ContributorRole_CONTRIBUTOR_ROLE_VOCALARRANGER                      ContributorRole = 299
	ContributorRole_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER               ContributorRole = 300
	ContributorRole_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER         ContributorRole = 301
	ContributorRole_CONTRIBUTOR_ROLE_VOCALENGINEER                      ContributorRole = 302
	ContributorRole_CONTRIBUTOR_ROLE_VOCALIST                           ContributorRole = 303
	ContributorRole_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER                ContributorRole = 304
	ContributorRole_CONTRIBUTOR_ROLE_VOCALPRODUCER                      ContributorRole = 305
	ContributorRole_CONTRIBUTOR_ROLE_VOICEACTOR                         ContributorRole = 306
	ContributorRole_CONTRIBUTOR_ROLE_WARDROBE                           ContributorRole = 307
	ContributorRole_CONTRIBUTOR_ROLE_PRESENTER                          ContributorRole = 308
)

// Enum value maps for ContributorRole.
var (
	ContributorRole_name = map[int32]string{
		0:   "CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:   "CONTRIBUTOR_ROLE_ADAPTER",
		2:   "CONTRIBUTOR_ROLE_ARCHITECT",
		3:   "CONTRIBUTOR_ROLE_ARRANGER",
		4:   "CONTRIBUTOR_ROLE_AUTHOR",
		5:   "CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS",
		6:   "CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD",
		7:   "CONTRIBUTOR_ROLE_COMPILER",
		8:   "CONTRIBUTOR_ROLE_COMPOSER",
		9:   "CONTRIBUTOR_ROLE_COMPOSERLYRICIST",
		10:  "CONTRIBUTOR_ROLE_CONCEPTOR",
		11:  "CONTRIBUTOR_ROLE_CREATOR",
		12:  "CONTRIBUTOR_ROLE_DIALOGUEAUTHOR",
		13:  "CONTRIBUTOR_ROLE_DISSERTANT",
		14:  "CONTRIBUTOR_ROLE_ENGRAVER",
		15:  "CONTRIBUTOR_ROLE_ETCHER",
		16:  "CONTRIBUTOR_ROLE_JOURNALIST",
		17:  "CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT",
		18:  "CONTRIBUTOR_ROLE_LIBRETTIST",
		19:  "CONTRIBUTOR_ROLE_LITHOGRAPHER",
		20:  "CONTRIBUTOR_ROLE_LYRICIST",
		21:  "CONTRIBUTOR_ROLE_METALENGRAVER",
		22:  "CONTRIBUTOR_ROLE_NONLYRICAUTHOR",
		23:  "CONTRIBUTOR_ROLE_PLATEMAKER",
		24:  "CONTRIBUTOR_ROLE_PLAYWRIGHT",
		25:  "CONTRIBUTOR_ROLE_REPORTER",
		26:  "CONTRIBUTOR_ROLE_REVIEWER",
		27:  "CONTRIBUTOR_ROLE_RUBRICATOR",
		28:  "CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR",
		29:  "CONTRIBUTOR_ROLE_SCULPTOR",
		30:  "CONTRIBUTOR_ROLE_SUBARRANGER",
		31:  "CONTRIBUTOR_ROLE_SUBLYRICIST",
		32:  "CONTRIBUTOR_ROLE_TRANSLATOR",
		33:  "CONTRIBUTOR_ROLE_WOODCUTTER",
		34:  "CONTRIBUTOR_ROLE_WOODENGRAVER",
		35:  "CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL",
		36:  "CONTRIBUTOR_ROLE_BOOKPUBLISHER",
		37:  "CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT",
		38:  "CONTRIBUTOR_ROLE_COPYRIGHTHOLDER",
		39:  "CONTRIBUTOR_ROLE_MUSICPUBLISHER",
		40:  "CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER",
		41:  "CONTRIBUTOR_ROLE_ORIGINALPUBLISHER",
		42:  "CONTRIBUTOR_ROLE_PERIODICALPUBLISHER",
		43:  "CONTRIBUTOR_ROLE_SUBPUBLISHER",
		44:  "CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER",
		45:  "CONTRIBUTOR_ROLE_UNKNOWN",
		46:  "CONTRIBUTOR_ROLE_USERDEFINED",
		47:  "CONTRIBUTOR_ROLE_ACCOMPANYIST",
		48:  "CONTRIBUTOR_ROLE_ACTOR",
		49:  "CONTRIBUTOR_ROLE_ADDITIONALENGINEER",
		50:  "CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER",
		51:  "CONTRIBUTOR_ROLE_ADDITIONALPERFORMER",
		52:  "CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER",
		53:  "CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER",
		54:  "CONTRIBUTOR_ROLE_ANCHORPERSON",
		55:  "CONTRIBUTOR_ROLE_ANIMALTRAINER",
		56:  "CONTRIBUTOR_ROLE_ANIMATOR",
		57:  "CONTRIBUTOR_ROLE_ANNOTATOR",
		58:  "CONTRIBUTOR_ROLE_ANNOUNCER",
		59:  "CONTRIBUTOR_ROLE_AANDRADMINISTRATOR",
		60:  "CONTRIBUTOR_ROLE_AANDRCOORDINATOR",
		61:  "CONTRIBUTOR_ROLE_ARMOURER",
		62:  "CONTRIBUTOR_ROLE_ARTCOPYIST",
		63:  "CONTRIBUTOR_ROLE_ARTDIRECTOR",
		64:  "CONTRIBUTOR_ROLE_ARTIST",
		65:  "CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER",
		66:  "CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER",
		67:  "CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER",
		68:  "CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR",
		69:  "CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN",
		70:  "CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR",
		71:  "CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR",
		72:  "CONTRIBUTOR_ROLE_ASSISTANTEDITOR",
		73:  "CONTRIBUTOR_ROLE_ASSISTANTENGINEER",
		74:  "CONTRIBUTOR_ROLE_ASSISTANTPRODUCER",
		75:  "CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR",
		76:  "CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER",
		77:  "CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER",
		78:  "CONTRIBUTOR_ROLE_AURALTRAINER",
		79:  "CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST",
		80:  "CONTRIBUTOR_ROLE_BALANCEENGINEER",
		81:  "CONTRIBUTOR_ROLE_BANDLEADER",
		82:  "CONTRIBUTOR_ROLE_BINDER",
		83:  "CONTRIBUTOR_ROLE_BINDINGDESIGNER",
		84:  "CONTRIBUTOR_ROLE_BOOKDESIGNER",
		85:  "CONTRIBUTOR_ROLE_BOOKJACKDESIGNER",
		86:  "CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER",
		87:  "CONTRIBUTOR_ROLE_BOOKPRODUCER",
		88:  "CONTRIBUTOR_ROLE_BROADCASTASSISTANT",
		89:  "CONTRIBUTOR_ROLE_BROADCASTJOURNALIST",
		90:  "CONTRIBUTOR_ROLE_CALLIGRAPHER",
		91:  "CONTRIBUTOR_ROLE_CAMERAOPERATOR",
		92:  "CONTRIBUTOR_ROLE_CARPENTER",
		93:  "CONTRIBUTOR_ROLE_CARTOGRAPHER",
		94:  "CONTRIBUTOR_ROLE_CARTOONIST",
		95:  "CONTRIBUTOR_ROLE_CASTINGDIRECTOR",
		96:  "CONTRIBUTOR_ROLE_CAUSEUR",
		97:  "CONTRIBUTOR_ROLE_CENSOR",
		98:  "CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN",
		99:  "CONTRIBUTOR_ROLE_CHOIR",
		100: "CONTRIBUTOR_ROLE_CHOIRMEMBER",
		101: "CONTRIBUTOR_ROLE_CHOREOGRAPHER",
		102: "CONTRIBUTOR_ROLE_CHORUSMASTER",
		103: "CONTRIBUTOR_ROLE_CIRCUSARTIST",
		104: "CONTRIBUTOR_ROLE_CLAPPERLOADER",
		105: "CONTRIBUTOR_ROLE_CLUBDJ",
		106: "CONTRIBUTOR_ROLE_CODIRECTOR",
		107: "CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER",
		108: "CONTRIBUTOR_ROLE_COLORSEPARATOR",
		109: "CONTRIBUTOR_ROLE_COMEDIAN",
		110: "CONTRIBUTOR_ROLE_COMIXER",
		111: "CONTRIBUTOR_ROLE_COMIXINGENGINEER",
		112: "CONTRIBUTOR_ROLE_COMMENTATOR",
		113: "CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER",
		114: "CONTRIBUTOR_ROLE_COMPILATIONPRODUCER",
		115: "CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR",
		116: "CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER",
		117: "CONTRIBUTOR_ROLE_CONCERTMASTER",
		118: "CONTRIBUTOR_ROLE_CONDUCTOR",
		119: "CONTRIBUTOR_ROLE_CONSULTANT",
		120: "CONTRIBUTOR_ROLE_CONTINUITYCHECKER",
		121: "CONTRIBUTOR_ROLE_CONTRACTOR",
		122: "CONTRIBUTOR_ROLE_COPRODUCER",
		123: "CONTRIBUTOR_ROLE_CORRESPONDENT",
		124: "CONTRIBUTOR_ROLE_COSTUMEDESIGNER",
		125: "CONTRIBUTOR_ROLE_COVERDESIGNER",
		126: "CONTRIBUTOR_ROLE_DANCER",
		127: "CONTRIBUTOR_ROLE_DELINEATOR",
		128: "CONTRIBUTOR_ROLE_DESIGNER",
		129: "CONTRIBUTOR_ROLE_DIALOGUECOACH",
		130: "CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR",
		131: "CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER",
		132: "CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER",
		133: "CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER",
		134: "CONTRIBUTOR_ROLE_DIRECTOR",
		135: "CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER",
		136: "CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY",
		137: "CONTRIBUTOR_ROLE_DJ",
		138: "CONTRIBUTOR_ROLE_DRAUGHTSMAN",
		139: "CONTRIBUTOR_ROLE_DRESSER",
		140: "CONTRIBUTOR_ROLE_DUBBER",
		141: "CONTRIBUTOR_ROLE_EDITOR",
		142: "CONTRIBUTOR_ROLE_EDITORINCHIEF",
		143: "CONTRIBUTOR_ROLE_EDITOROFTHEDAY",
		144: "CONTRIBUTOR_ROLE_ENCODER",
		145: "CONTRIBUTOR_ROLE_ENGINEER",
		146: "CONTRIBUTOR_ROLE_ENSEMBLE",
		147: "CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER",
		148: "CONTRIBUTOR_ROLE_EXPERT",
		149: "CONTRIBUTOR_ROLE_FACSIMILIST",
		150: "CONTRIBUTOR_ROLE_FIGHTDIRECTOR",
		151: "CONTRIBUTOR_ROLE_FILMDIRECTOR",
		152: "CONTRIBUTOR_ROLE_FILMDISTRIBUTOR",
		153: "CONTRIBUTOR_ROLE_FILMEDITOR",
		154: "CONTRIBUTOR_ROLE_FILMPRODUCER",
		155: "CONTRIBUTOR_ROLE_FILMSOUNDENGINEER",
		156: "CONTRIBUTOR_ROLE_FLOORMANAGER",
		157: "CONTRIBUTOR_ROLE_FOCUSPULLER",
		158: "CONTRIBUTOR_ROLE_FOLEYARTIST",
		159: "CONTRIBUTOR_ROLE_FOLEYEDITOR",
		160: "CONTRIBUTOR_ROLE_FOLEYMIXER",
		161: "CONTRIBUTOR_ROLE_GRAPHICARTIST",
		162: "CONTRIBUTOR_ROLE_GRAPHICASSISTANT",
		163: "CONTRIBUTOR_ROLE_GRAPHICDESIGNER",
		164: "CONTRIBUTOR_ROLE_GREENSMAN",
		165: "CONTRIBUTOR_ROLE_GRIP",
		166: "CONTRIBUTOR_ROLE_GUESTCONDUCTOR",
		167: "CONTRIBUTOR_ROLE_GROUPMEMBER",
		168: "CONTRIBUTOR_ROLE_HAIRDRESSER",
		169: "CONTRIBUTOR_ROLE_ILLUSTRATOR",
		170: "CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER",
		171: "CONTRIBUTOR_ROLE_INITIALPRODUCER",
		172: "CONTRIBUTOR_ROLE_INTERVIEWEDGUEST",
		173: "CONTRIBUTOR_ROLE_INTERVIEWER",
		174: "CONTRIBUTOR_ROLE_KEYCHARACTER",
		175: "CONTRIBUTOR_ROLE_KEYGRIP",
		176: "CONTRIBUTOR_ROLE_KEYTALENT",
		177: "CONTRIBUTOR_ROLE_LEADMAN",
		178: "CONTRIBUTOR_ROLE_LEADPERFORMER",
		179: "CONTRIBUTOR_ROLE_LEADVOCALIST",
		180: "CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR",
		181: "CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN",
		182: "CONTRIBUTOR_ROLE_LOCATIONMANAGER",
		183: "CONTRIBUTOR_ROLE_MAKEUPARTIST",
		184: "CONTRIBUTOR_ROLE_MANUFACTURER",
		185: "CONTRIBUTOR_ROLE_MASTERINGENGINEER",
		186: "CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER",
		187: "CONTRIBUTOR_ROLE_MATTEARTIST",
		188: "CONTRIBUTOR_ROLE_MIXER",
		189: "CONTRIBUTOR_ROLE_MIXINGENGINEER",
		190: "CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER",
		191: "CONTRIBUTOR_ROLE_MUSICARRANGER",
		192: "CONTRIBUTOR_ROLE_MUSICCOPYIST",
		193: "CONTRIBUTOR_ROLE_MUSICDIRECTOR",
		194: "CONTRIBUTOR_ROLE_MUSICGROUP",
		195: "CONTRIBUTOR_ROLE_MUSICIAN",
		196: "CONTRIBUTOR_ROLE_NARRATOR",
		197: "CONTRIBUTOR_ROLE_NEWSPRODUCER",
		198: "CONTRIBUTOR_ROLE_NEWSREADER",
		199: "CONTRIBUTOR_ROLE_NOTSPECIFIED",
		200: "CONTRIBUTOR_ROLE_ORCHESTRA",
		201: "CONTRIBUTOR_ROLE_ORCHESTRAMEMBER",
		202: "CONTRIBUTOR_ROLE_ORIGINALARTIST",
		203: "CONTRIBUTOR_ROLE_OVERDUBENGINEER",
		204: "CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER",
		205: "CONTRIBUTOR_ROLE_PAINTER",
		206: "CONTRIBUTOR_ROLE_PERFORMER",
		207: "CONTRIBUTOR_ROLE_PHOTOGRAPHER",
		208: "CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR",
		209: "CONTRIBUTOR_ROLE_PLAYBACKSINGER",
		210: "CONTRIBUTOR_ROLE_POSTPRODUCER",
		211: "CONTRIBUTOR_ROLE_PREPRODUCTION",
		212: "CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER",
		213: "CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER",
		214: "CONTRIBUTOR_ROLE_PRIMARYMUSICIAN",
		215: "CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT",
		216: "CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY",
		217: "CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR",
		218: "CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT",
		219: "CONTRIBUTOR_ROLE_PRODUCTIONMANAGER",
		220: "CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY",
		221: "CONTRIBUTOR_ROLE_PROJECTENGINEER",
		222: "CONTRIBUTOR_ROLE_PROGRAMMER",
		223: "CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER",
		224: "CONTRIBUTOR_ROLE_PROGRAMPRODUCER",
		225: "CONTRIBUTOR_ROLE_PROPERTYMANAGER",
		226: "CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR",
		227: "CONTRIBUTOR_ROLE_PUPPETEER",
		228: "CONTRIBUTOR_ROLE_PYROTECHNICIAN",
		229: "CONTRIBUTOR_ROLE_RECORDINGENGINEER",
		230: "CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER",
		231: "CONTRIBUTOR_ROLE_REDACTOR",
		232: "CONTRIBUTOR_ROLE_REISSUEPRODUCER",
		233: "CONTRIBUTOR_ROLE_REMIXEDARTIST",
		234: "CONTRIBUTOR_ROLE_REMIXER",
		235: "CONTRIBUTOR_ROLE_REMIXINGENGINEER",
		236: "CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER",
		237: "CONTRIBUTOR_ROLE_REPETITEUR",
		238: "CONTRIBUTOR_ROLE_RESEARCHER",
		239: "CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD",
		240: "CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER",
		241: "CONTRIBUTOR_ROLE_RESTAGER",
		242: "CONTRIBUTOR_ROLE_RIGGER",
		243: "CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT",
		244: "CONTRIBUTOR_ROLE_RUNNER",
		245: "CONTRIBUTOR_ROLE_SCENICOPERATIVE",
		246: "CONTRIBUTOR_ROLE_SCIENTIFICADVISOR",
		247: "CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR",
		248: "CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR",
		249: "CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR",
		250: "CONTRIBUTOR_ROLE_SECONDCONDUCTOR",
		251: "CONTRIBUTOR_ROLE_SECONDENGINEER",
		252: "CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR",
		253: "CONTRIBUTOR_ROLE_SERIESPRODUCER",
		254: "CONTRIBUTOR_ROLE_SETDESIGNER",
		255: "CONTRIBUTOR_ROLE_SETDRESSER",
		256: "CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER",
		257: "CONTRIBUTOR_ROLE_SOLOIST",
		258: "CONTRIBUTOR_ROLE_SOUNDDESIGNER",
		259: "CONTRIBUTOR_ROLE_SOUNDMIXER",
		260: "CONTRIBUTOR_ROLE_SOUNDRECORDIST",
		261: "CONTRIBUTOR_ROLE_SOUNDSUPERVISOR",
		262: "CONTRIBUTOR_ROLE_SPEAKER",
		263: "CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN",
		264: "CONTRIBUTOR_ROLE_SPONSOR",
		265: "CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER",
		266: "CONTRIBUTOR_ROLE_STAGEDIRECTOR",
		267: "CONTRIBUTOR_ROLE_STAGEENGINEER",
		268: "CONTRIBUTOR_ROLE_STORYTELLER",
		269: "CONTRIBUTOR_ROLE_STRINGENGINEER",
		270: "CONTRIBUTOR_ROLE_STRINGPRODUCER",
		271: "CONTRIBUTOR_ROLE_STRINGSDIRECTOR",
		272: "CONTRIBUTOR_ROLE_STUDIOCONDUCTOR",
		273: "CONTRIBUTOR_ROLE_STUDIOMUSICIAN",
		274: "CONTRIBUTOR_ROLE_STUDIOPERSONNEL",
		275: "CONTRIBUTOR_ROLE_STUDIOPRODUCER",
		276: "CONTRIBUTOR_ROLE_STUNTS",
		277: "CONTRIBUTOR_ROLE_SUBTITLESEDITOR",
		278: "CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR",
		279: "CONTRIBUTOR_ROLE_SUPPORTINGACTOR",
		280: "CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER",
		281: "CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER",
		282: "CONTRIBUTOR_ROLE_TAPEOPERATOR",
		283: "CONTRIBUTOR_ROLE_TECHNICALDIRECTOR",
		284: "CONTRIBUTOR_ROLE_TONMEISTER",
		285: "CONTRIBUTOR_ROLE_TRACKINGENGINEER",
		286: "CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER",
		287: "CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER",
		288: "CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER",
		289: "CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER",
		290: "CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL",
		291: "CONTRIBUTOR_ROLE_TYPEDESIGNER",
		292: "CONTRIBUTOR_ROLE_VIDEODIRECTOR",
		293: "CONTRIBUTOR_ROLE_VIDEOGRAPHER",
		294: "CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR",
		295: "CONTRIBUTOR_ROLE_VIDEOPRODUCER",
		296: "CONTRIBUTOR_ROLE_VISIONMIXER",
		297: "CONTRIBUTOR_ROLE_VISUALEDITOR",
		298: "CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN",
		299: "CONTRIBUTOR_ROLE_VOCALARRANGER",
		300: "CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER",
		301: "CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER",
		302: "CONTRIBUTOR_ROLE_VOCALENGINEER",
		303: "CONTRIBUTOR_ROLE_VOCALIST",
		304: "CONTRIBUTOR_ROLE_VOCALSECONDENGINEER",
		305: "CONTRIBUTOR_ROLE_VOCALPRODUCER",
		306: "CONTRIBUTOR_ROLE_VOICEACTOR",
		307: "CONTRIBUTOR_ROLE_WARDROBE",
		308: "CONTRIBUTOR_ROLE_PRESENTER",
	}
	ContributorRole_value = map[string]int32{
		"CONTRIBUTOR_ROLE_UNSPECIFIED":                        0,
		"CONTRIBUTOR_ROLE_ADAPTER":                            1,
		"CONTRIBUTOR_ROLE_ARCHITECT":                          2,
		"CONTRIBUTOR_ROLE_ARRANGER":                           3,
		"CONTRIBUTOR_ROLE_AUTHOR":                             4,
		"CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS":                 5,
		"CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD":                  6,
		"CONTRIBUTOR_ROLE_COMPILER":                           7,
		"CONTRIBUTOR_ROLE_COMPOSER":                           8,
		"CONTRIBUTOR_ROLE_COMPOSERLYRICIST":                   9,
		"CONTRIBUTOR_ROLE_CONCEPTOR":                          10,
		"CONTRIBUTOR_ROLE_CREATOR":                            11,
		"CONTRIBUTOR_ROLE_DIALOGUEAUTHOR":                     12,
		"CONTRIBUTOR_ROLE_DISSERTANT":                         13,
		"CONTRIBUTOR_ROLE_ENGRAVER":                           14,
		"CONTRIBUTOR_ROLE_ETCHER":                             15,
		"CONTRIBUTOR_ROLE_JOURNALIST":                         16,
		"CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT":                 17,
		"CONTRIBUTOR_ROLE_LIBRETTIST":                         18,
		"CONTRIBUTOR_ROLE_LITHOGRAPHER":                       19,
		"CONTRIBUTOR_ROLE_LYRICIST":                           20,
		"CONTRIBUTOR_ROLE_METALENGRAVER":                      21,
		"CONTRIBUTOR_ROLE_NONLYRICAUTHOR":                     22,
		"CONTRIBUTOR_ROLE_PLATEMAKER":                         23,
		"CONTRIBUTOR_ROLE_PLAYWRIGHT":                         24,
		"CONTRIBUTOR_ROLE_REPORTER":                           25,
		"CONTRIBUTOR_ROLE_REVIEWER":                           26,
		"CONTRIBUTOR_ROLE_RUBRICATOR":                         27,
		"CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR":                   28,
		"CONTRIBUTOR_ROLE_SCULPTOR":                           29,
		"CONTRIBUTOR_ROLE_SUBARRANGER":                        30,
		"CONTRIBUTOR_ROLE_SUBLYRICIST":                        31,
		"CONTRIBUTOR_ROLE_TRANSLATOR":                         32,
		"CONTRIBUTOR_ROLE_WOODCUTTER":                         33,
		"CONTRIBUTOR_ROLE_WOODENGRAVER":                       34,
		"CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL":       35,
		"CONTRIBUTOR_ROLE_BOOKPUBLISHER":                      36,
		"CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT":                  37,
		"CONTRIBUTOR_ROLE_COPYRIGHTHOLDER":                    38,
		"CONTRIBUTOR_ROLE_MUSICPUBLISHER":                     39,
		"CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER":                 40,
		"CONTRIBUTOR_ROLE_ORIGINALPUBLISHER":                  41,
		"CONTRIBUTOR_ROLE_PERIODICALPUBLISHER":                42,
		"CONTRIBUTOR_ROLE_SUBPUBLISHER":                       43,
		"CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER":               44,
		"CONTRIBUTOR_ROLE_UNKNOWN":                            45,
		"CONTRIBUTOR_ROLE_USERDEFINED":                        46,
		"CONTRIBUTOR_ROLE_ACCOMPANYIST":                       47,
		"CONTRIBUTOR_ROLE_ACTOR":                              48,
		"CONTRIBUTOR_ROLE_ADDITIONALENGINEER":                 49,
		"CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER":           50,
		"CONTRIBUTOR_ROLE_ADDITIONALPERFORMER":                51,
		"CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER":      52,
		"CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER":           53,
		"CONTRIBUTOR_ROLE_ANCHORPERSON":                       54,
		"CONTRIBUTOR_ROLE_ANIMALTRAINER":                      55,
		"CONTRIBUTOR_ROLE_ANIMATOR":                           56,
		"CONTRIBUTOR_ROLE_ANNOTATOR":                          57,
		"CONTRIBUTOR_ROLE_ANNOUNCER":                          58,
		"CONTRIBUTOR_ROLE_AANDRADMINISTRATOR":                 59,
		"CONTRIBUTOR_ROLE_AANDRCOORDINATOR":                   60,
		"CONTRIBUTOR_ROLE_ARMOURER":                           61,
		"CONTRIBUTOR_ROLE_ARTCOPYIST":                         62,
		"CONTRIBUTOR_ROLE_ARTDIRECTOR":                        63,
		"CONTRIBUTOR_ROLE_ARTIST":                             64,
		"CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER":      65,
		"CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER":                66,
		"CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER":          67,
		"CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR":            68,
		"CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN":   69,
		"CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR":                 70,
		"CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR":                  71,
		"CONTRIBUTOR_ROLE_ASSISTANTEDITOR":                    72,
		"CONTRIBUTOR_ROLE_ASSISTANTENGINEER":                  73,
		"CONTRIBUTOR_ROLE_ASSISTANTPRODUCER":                  74,
		"CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR":              75,
		"CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER":                76,
		"CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER":                  77,
		"CONTRIBUTOR_ROLE_AURALTRAINER":                       78,
		"CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST":                 79,
		"CONTRIBUTOR_ROLE_BALANCEENGINEER":                    80,
		"CONTRIBUTOR_ROLE_BANDLEADER":                         81,
		"CONTRIBUTOR_ROLE_BINDER":                             82,
		"CONTRIBUTOR_ROLE_BINDINGDESIGNER":                    83,
		"CONTRIBUTOR_ROLE_BOOKDESIGNER":                       84,
		"CONTRIBUTOR_ROLE_BOOKJACKDESIGNER":                   85,
		"CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER":                  86,
		"CONTRIBUTOR_ROLE_BOOKPRODUCER":                       87,
		"CONTRIBUTOR_ROLE_BROADCASTASSISTANT":                 88,
		"CONTRIBUTOR_ROLE_BROADCASTJOURNALIST":                89,
		"CONTRIBUTOR_ROLE_CALLIGRAPHER":                       90,
		"CONTRIBUTOR_ROLE_CAMERAOPERATOR":                     91,
		"CONTRIBUTOR_ROLE_CARPENTER":                          92,
		"CONTRIBUTOR_ROLE_CARTOGRAPHER":                       93,
		"CONTRIBUTOR_ROLE_CARTOONIST":                         94,
		"CONTRIBUTOR_ROLE_CASTINGDIRECTOR":                    95,
		"CONTRIBUTOR_ROLE_CAUSEUR":                            96,
		"CONTRIBUTOR_ROLE_CENSOR":                             97,
		"CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN":            98,
		"CONTRIBUTOR_ROLE_CHOIR":                              99,
		"CONTRIBUTOR_ROLE_CHOIRMEMBER":                        100,
		"CONTRIBUTOR_ROLE_CHOREOGRAPHER":                      101,
		"CONTRIBUTOR_ROLE_CHORUSMASTER":                       102,
		"CONTRIBUTOR_ROLE_CIRCUSARTIST":                       103,
		"CONTRIBUTOR_ROLE_CLAPPERLOADER":                      104,
		"CONTRIBUTOR_ROLE_CLUBDJ":                             105,
		"CONTRIBUTOR_ROLE_CODIRECTOR":                         106,
		"CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER":                107,
		"CONTRIBUTOR_ROLE_COLORSEPARATOR":                     108,
		"CONTRIBUTOR_ROLE_COMEDIAN":                           109,
		"CONTRIBUTOR_ROLE_COMIXER":                            110,
		"CONTRIBUTOR_ROLE_COMIXINGENGINEER":                   111,
		"CONTRIBUTOR_ROLE_COMMENTATOR":                        112,
		"CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER":           113,
		"CONTRIBUTOR_ROLE_COMPILATIONPRODUCER":                114,
		"CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR":             115,
		"CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER":                 116,
		"CONTRIBUTOR_ROLE_CONCERTMASTER":                      117,
		"CONTRIBUTOR_ROLE_CONDUCTOR":                          118,
		"CONTRIBUTOR_ROLE_CONSULTANT":                         119,
		"CONTRIBUTOR_ROLE_CONTINUITYCHECKER":                  120,
		"CONTRIBUTOR_ROLE_CONTRACTOR":                         121,
		"CONTRIBUTOR_ROLE_COPRODUCER":                         122,
		"CONTRIBUTOR_ROLE_CORRESPONDENT":                      123,
		"CONTRIBUTOR_ROLE_COSTUMEDESIGNER":                    124,
		"CONTRIBUTOR_ROLE_COVERDESIGNER":                      125,
		"CONTRIBUTOR_ROLE_DANCER":                             126,
		"CONTRIBUTOR_ROLE_DELINEATOR":                         127,
		"CONTRIBUTOR_ROLE_DESIGNER":                           128,
		"CONTRIBUTOR_ROLE_DIALOGUECOACH":                      129,
		"CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR":                   130,
		"CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER":    131,
		"CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER":             132,
		"CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER":       133,
		"CONTRIBUTOR_ROLE_DIRECTOR":                           134,
		"CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER":        135,
		"CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY":                136,
		"CONTRIBUTOR_ROLE_DJ":                                 137,
		"CONTRIBUTOR_ROLE_DRAUGHTSMAN":                        138,
		"CONTRIBUTOR_ROLE_DRESSER":                            139,
		"CONTRIBUTOR_ROLE_DUBBER":                             140,
		"CONTRIBUTOR_ROLE_EDITOR":                             141,
		"CONTRIBUTOR_ROLE_EDITORINCHIEF":                      142,
		"CONTRIBUTOR_ROLE_EDITOROFTHEDAY":                     143,
		"CONTRIBUTOR_ROLE_ENCODER":                            144,
		"CONTRIBUTOR_ROLE_ENGINEER":                           145,
		"CONTRIBUTOR_ROLE_ENSEMBLE":                           146,
		"CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER":                  147,
		"CONTRIBUTOR_ROLE_EXPERT":                             148,
		"CONTRIBUTOR_ROLE_FACSIMILIST":                        149,
		"CONTRIBUTOR_ROLE_FIGHTDIRECTOR":                      150,
		"CONTRIBUTOR_ROLE_FILMDIRECTOR":                       151,
		"CONTRIBUTOR_ROLE_FILMDISTRIBUTOR":                    152,
		"CONTRIBUTOR_ROLE_FILMEDITOR":                         153,
		"CONTRIBUTOR_ROLE_FILMPRODUCER":                       154,
		"CONTRIBUTOR_ROLE_FILMSOUNDENGINEER":                  155,
		"CONTRIBUTOR_ROLE_FLOORMANAGER":                       156,
		"CONTRIBUTOR_ROLE_FOCUSPULLER":                        157,
		"CONTRIBUTOR_ROLE_FOLEYARTIST":                        158,
		"CONTRIBUTOR_ROLE_FOLEYEDITOR":                        159,
		"CONTRIBUTOR_ROLE_FOLEYMIXER":                         160,
		"CONTRIBUTOR_ROLE_GRAPHICARTIST":                      161,
		"CONTRIBUTOR_ROLE_GRAPHICASSISTANT":                   162,
		"CONTRIBUTOR_ROLE_GRAPHICDESIGNER":                    163,
		"CONTRIBUTOR_ROLE_GREENSMAN":                          164,
		"CONTRIBUTOR_ROLE_GRIP":                               165,
		"CONTRIBUTOR_ROLE_GUESTCONDUCTOR":                     166,
		"CONTRIBUTOR_ROLE_GROUPMEMBER":                        167,
		"CONTRIBUTOR_ROLE_HAIRDRESSER":                        168,
		"CONTRIBUTOR_ROLE_ILLUSTRATOR":                        169,
		"CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER":            170,
		"CONTRIBUTOR_ROLE_INITIALPRODUCER":                    171,
		"CONTRIBUTOR_ROLE_INTERVIEWEDGUEST":                   172,
		"CONTRIBUTOR_ROLE_INTERVIEWER":                        173,
		"CONTRIBUTOR_ROLE_KEYCHARACTER":                       174,
		"CONTRIBUTOR_ROLE_KEYGRIP":                            175,
		"CONTRIBUTOR_ROLE_KEYTALENT":                          176,
		"CONTRIBUTOR_ROLE_LEADMAN":                            177,
		"CONTRIBUTOR_ROLE_LEADPERFORMER":                      178,
		"CONTRIBUTOR_ROLE_LEADVOCALIST":                       179,
		"CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR":                   180,
		"CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN":                 181,
		"CONTRIBUTOR_ROLE_LOCATIONMANAGER":                    182,
		"CONTRIBUTOR_ROLE_MAKEUPARTIST":                       183,
		"CONTRIBUTOR_ROLE_MANUFACTURER":                       184,
		"CONTRIBUTOR_ROLE_MASTERINGENGINEER":                  185,
		"CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER":            186,
		"CONTRIBUTOR_ROLE_MATTEARTIST":                        187,
		"CONTRIBUTOR_ROLE_MIXER":                              188,
		"CONTRIBUTOR_ROLE_MIXINGENGINEER":                     189,
		"CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER":               190,
		"CONTRIBUTOR_ROLE_MUSICARRANGER":                      191,
		"CONTRIBUTOR_ROLE_MUSICCOPYIST":                       192,
		"CONTRIBUTOR_ROLE_MUSICDIRECTOR":                      193,
		"CONTRIBUTOR_ROLE_MUSICGROUP":                         194,
		"CONTRIBUTOR_ROLE_MUSICIAN":                           195,
		"CONTRIBUTOR_ROLE_NARRATOR":                           196,
		"CONTRIBUTOR_ROLE_NEWSPRODUCER":                       197,
		"CONTRIBUTOR_ROLE_NEWSREADER":                         198,
		"CONTRIBUTOR_ROLE_NOTSPECIFIED":                       199,
		"CONTRIBUTOR_ROLE_ORCHESTRA":                          200,
		"CONTRIBUTOR_ROLE_ORCHESTRAMEMBER":                    201,
		"CONTRIBUTOR_ROLE_ORIGINALARTIST":                     202,
		"CONTRIBUTOR_ROLE_OVERDUBENGINEER":                    203,
		"CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER":              204,
		"CONTRIBUTOR_ROLE_PAINTER":                            205,
		"CONTRIBUTOR_ROLE_PERFORMER":                          206,
		"CONTRIBUTOR_ROLE_PHOTOGRAPHER":                       207,
		"CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR":                208,
		"CONTRIBUTOR_ROLE_PLAYBACKSINGER":                     209,
		"CONTRIBUTOR_ROLE_POSTPRODUCER":                       210,
		"CONTRIBUTOR_ROLE_PREPRODUCTION":                      211,
		"CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER":              212,
		"CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER":        213,
		"CONTRIBUTOR_ROLE_PRIMARYMUSICIAN":                    214,
		"CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT":                215,
		"CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY":                  216,
		"CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR":              217,
		"CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT":               218,
		"CONTRIBUTOR_ROLE_PRODUCTIONMANAGER":                  219,
		"CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY":                220,
		"CONTRIBUTOR_ROLE_PROJECTENGINEER":                    221,
		"CONTRIBUTOR_ROLE_PROGRAMMER":                         222,
		"CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER":                223,
		"CONTRIBUTOR_ROLE_PROGRAMPRODUCER":                    224,
		"CONTRIBUTOR_ROLE_PROPERTYMANAGER":                    225,
		"CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR":                 226,
		"CONTRIBUTOR_ROLE_PUPPETEER":                          227,
		"CONTRIBUTOR_ROLE_PYROTECHNICIAN":                     228,
		"CONTRIBUTOR_ROLE_RECORDINGENGINEER":                  229,
		"CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER":            230,
		"CONTRIBUTOR_ROLE_REDACTOR":                           231,
		"CONTRIBUTOR_ROLE_REISSUEPRODUCER":                    232,
		"CONTRIBUTOR_ROLE_REMIXEDARTIST":                      233,
		"CONTRIBUTOR_ROLE_REMIXER":                            234,
		"CONTRIBUTOR_ROLE_REMIXINGENGINEER":                   235,
		"CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER":             236,
		"CONTRIBUTOR_ROLE_REPETITEUR":                         237,
		"CONTRIBUTOR_ROLE_RESEARCHER":                         238,
		"CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD":                   239,
		"CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER":                 240,
		"CONTRIBUTOR_ROLE_RESTAGER":                           241,
		"CONTRIBUTOR_ROLE_RIGGER":                             242,
		"CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT":          243,
		"CONTRIBUTOR_ROLE_RUNNER":                             244,
		"CONTRIBUTOR_ROLE_SCENICOPERATIVE":                    245,
		"CONTRIBUTOR_ROLE_SCIENTIFICADVISOR":                  246,
		"CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR":                   247,
		"CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR":      248,
		"CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR":            249,
		"CONTRIBUTOR_ROLE_SECONDCONDUCTOR":                    250,
		"CONTRIBUTOR_ROLE_SECONDENGINEER":                     251,
		"CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR":                 252,
		"CONTRIBUTOR_ROLE_SERIESPRODUCER":                     253,
		"CONTRIBUTOR_ROLE_SETDESIGNER":                        254,
		"CONTRIBUTOR_ROLE_SETDRESSER":                         255,
		"CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER":            256,
		"CONTRIBUTOR_ROLE_SOLOIST":                            257,
		"CONTRIBUTOR_ROLE_SOUNDDESIGNER":                      258,
		"CONTRIBUTOR_ROLE_SOUNDMIXER":                         259,
		"CONTRIBUTOR_ROLE_SOUNDRECORDIST":                     260,
		"CONTRIBUTOR_ROLE_SOUNDSUPERVISOR":                    261,
		"CONTRIBUTOR_ROLE_SPEAKER":                            262,
		"CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN":           263,
		"CONTRIBUTOR_ROLE_SPONSOR":                            264,
		"CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER":             265,
		"CONTRIBUTOR_ROLE_STAGEDIRECTOR":                      266,
		"CONTRIBUTOR_ROLE_STAGEENGINEER":                      267,
		"CONTRIBUTOR_ROLE_STORYTELLER":                        268,
		"CONTRIBUTOR_ROLE_STRINGENGINEER":                     269,
		"CONTRIBUTOR_ROLE_STRINGPRODUCER":                     270,
		"CONTRIBUTOR_ROLE_STRINGSDIRECTOR":                    271,
		"CONTRIBUTOR_ROLE_STUDIOCONDUCTOR":                    272,
		"CONTRIBUTOR_ROLE_STUDIOMUSICIAN":                     273,
		"CONTRIBUTOR_ROLE_STUDIOPERSONNEL":                    274,
		"CONTRIBUTOR_ROLE_STUDIOPRODUCER":                     275,
		"CONTRIBUTOR_ROLE_STUNTS":                             276,
		"CONTRIBUTOR_ROLE_SUBTITLESEDITOR":                    277,
		"CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR":                278,
		"CONTRIBUTOR_ROLE_SUPPORTINGACTOR":                    279,
		"CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER":             280,
		"CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER":       281,
		"CONTRIBUTOR_ROLE_TAPEOPERATOR":                       282,
		"CONTRIBUTOR_ROLE_TECHNICALDIRECTOR":                  283,
		"CONTRIBUTOR_ROLE_TONMEISTER":                         284,
		"CONTRIBUTOR_ROLE_TRACKINGENGINEER":                   285,
		"CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER":             286,
		"CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER":       287,
		"CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER": 288,
		"CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER":              289,
		"CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL":          290,
		"CONTRIBUTOR_ROLE_TYPEDESIGNER":                       291,
		"CONTRIBUTOR_ROLE_VIDEODIRECTOR":                      292,
		"CONTRIBUTOR_ROLE_VIDEOGRAPHER":                       293,
		"CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR":               294,
		"CONTRIBUTOR_ROLE_VIDEOPRODUCER":                      295,
		"CONTRIBUTOR_ROLE_VISIONMIXER":                        296,
		"CONTRIBUTOR_ROLE_VISUALEDITOR":                       297,
		"CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN":            298,
		"CONTRIBUTOR_ROLE_VOCALARRANGER":                      299,
		"CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER":               300,
		"CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER":         301,
		"CONTRIBUTOR_ROLE_VOCALENGINEER":                      302,
		"CONTRIBUTOR_ROLE_VOCALIST":                           303,
		"CONTRIBUTOR_ROLE_VOCALSECONDENGINEER":                304,
		"CONTRIBUTOR_ROLE_VOCALPRODUCER":                      305,
		"CONTRIBUTOR_ROLE_VOICEACTOR":                         306,
		"CONTRIBUTOR_ROLE_WARDROBE":                           307,
		"CONTRIBUTOR_ROLE_PRESENTER":                          308,
	}
)

func (x ContributorRole) Enum() *ContributorRole {
	p := new(ContributorRole)
	*p = x
	return p
}

func (x ContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[32].Descriptor()
}

func (ContributorRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[32]
}

func (x ContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributorRole.Descriptor instead.
func (ContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{32}
}

type CreativeMusicalWorkContributorRole int32

const (
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED                  CreativeMusicalWorkContributorRole = 0
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER                      CreativeMusicalWorkContributorRole = 1
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT                    CreativeMusicalWorkContributorRole = 2
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER                     CreativeMusicalWorkContributorRole = 3
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR                       CreativeMusicalWorkContributorRole = 4
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS           CreativeMusicalWorkContributorRole = 5
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD            CreativeMusicalWorkContributorRole = 6
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER                     CreativeMusicalWorkContributorRole = 7
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER                     CreativeMusicalWorkContributorRole = 8
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST             CreativeMusicalWorkContributorRole = 9
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR                    CreativeMusicalWorkContributorRole = 10
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR                      CreativeMusicalWorkContributorRole = 11
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR               CreativeMusicalWorkContributorRole = 12
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT                   CreativeMusicalWorkContributorRole = 13
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER                     CreativeMusicalWorkContributorRole = 14
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER                       CreativeMusicalWorkContributorRole = 15
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST                   CreativeMusicalWorkContributorRole = 16
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT           CreativeMusicalWorkContributorRole = 17
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST                   CreativeMusicalWorkContributorRole = 18
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER                 CreativeMusicalWorkContributorRole = 19
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST                     CreativeMusicalWorkContributorRole = 20
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER                CreativeMusicalWorkContributorRole = 21
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR               CreativeMusicalWorkContributorRole = 22
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER                   CreativeMusicalWorkContributorRole = 23
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT                   CreativeMusicalWorkContributorRole = 24
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER                     CreativeMusicalWorkContributorRole = 25
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER                     CreativeMusicalWorkContributorRole = 26
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR                   CreativeMusicalWorkContributorRole = 27
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR             CreativeMusicalWorkContributorRole = 28
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR                     CreativeMusicalWorkContributorRole = 29
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER                  CreativeMusicalWorkContributorRole = 30
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST                  CreativeMusicalWorkContributorRole = 31
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR                   CreativeMusicalWorkContributorRole = 32
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER                   CreativeMusicalWorkContributorRole = 33
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER                 CreativeMusicalWorkContributorRole = 34
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL CreativeMusicalWorkContributorRole = 35
)

// Enum value maps for CreativeMusicalWorkContributorRole.
var (
	CreativeMusicalWorkContributorRole_name = map[int32]string{
		0:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER",
		2:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT",
		3:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER",
		4:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR",
		5:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS",
		6:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD",
		7:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER",
		8:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER",
		9:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST",
		10: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR",
		11: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR",
		12: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR",
		13: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT",
		14: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER",
		15: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER",
		16: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST",
		17: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT",
		18: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST",
		19: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER",
		20: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST",
		21: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER",
		22: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR",
		23: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER",
		24: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT",
		25: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER",
		26: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER",
		27: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR",
		28: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR",
		29: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR",
		30: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER",
		31: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST",
		32: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR",
		33: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER",
		34: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER",
		35: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL",
	}
	CreativeMusicalWorkContributorRole_value = map[string]int32{
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED":                  0,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER":                      1,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT":                    2,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER":                     3,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR":                       4,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS":           5,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD":            6,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER":                     7,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER":                     8,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST":             9,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR":                    10,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR":                      11,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR":               12,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT":                   13,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER":                     14,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER":                       15,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST":                   16,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT":           17,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST":                   18,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER":                 19,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST":                     20,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER":                21,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR":               22,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER":                   23,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT":                   24,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER":                     25,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER":                     26,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR":                   27,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR":             28,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR":                     29,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER":                  30,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST":                  31,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR":                   32,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER":                   33,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER":                 34,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL": 35,
	}
)

func (x CreativeMusicalWorkContributorRole) Enum() *CreativeMusicalWorkContributorRole {
	p := new(CreativeMusicalWorkContributorRole)
	*p = x
	return p
}

func (x CreativeMusicalWorkContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreativeMusicalWorkContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[33].Descriptor()
}

func (CreativeMusicalWorkContributorRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[33]
}

func (x CreativeMusicalWorkContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreativeMusicalWorkContributorRole.Descriptor instead.
func (CreativeMusicalWorkContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{33}
}

type CueOrigin int32

const (
	CueOrigin_CUE_ORIGIN_UNSPECIFIED                CueOrigin = 0
	CueOrigin_CUE_ORIGIN_LIBRARYMUSIC               CueOrigin = 1
	CueOrigin_CUE_ORIGIN_PREEXISTINGMUSIC           CueOrigin = 2
	CueOrigin_CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC CueOrigin = 3
	CueOrigin_CUE_ORIGIN_UNKNOWN                    CueOrigin = 4
	CueOrigin_CUE_ORIGIN_USERDEFINED                CueOrigin = 5
)

// Enum value maps for CueOrigin.
var (
	CueOrigin_name = map[int32]string{
		0: "CUE_ORIGIN_UNSPECIFIED",
		1: "CUE_ORIGIN_LIBRARYMUSIC",
		2: "CUE_ORIGIN_PREEXISTINGMUSIC",
		3: "CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC",
		4: "CUE_ORIGIN_UNKNOWN",
		5: "CUE_ORIGIN_USERDEFINED",
	}
	CueOrigin_value = map[string]int32{
		"CUE_ORIGIN_UNSPECIFIED":                0,
		"CUE_ORIGIN_LIBRARYMUSIC":               1,
		"CUE_ORIGIN_PREEXISTINGMUSIC":           2,
		"CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC": 3,
		"CUE_ORIGIN_UNKNOWN":                    4,
		"CUE_ORIGIN_USERDEFINED":                5,
	}
)

func (x CueOrigin) Enum() *CueOrigin {
	p := new(CueOrigin)
	*p = x
	return p
}

func (x CueOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[34].Descriptor()
}

func (CueOrigin) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[34]
}

func (x CueOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueOrigin.Descriptor instead.
func (CueOrigin) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{34}
}

type CueSheetType int32

const (
	CueSheetType_CUE_SHEET_TYPE_UNSPECIFIED        CueSheetType = 0
	CueSheetType_CUE_SHEET_TYPE_AVERAGECUESHEET    CueSheetType = 1
	CueSheetType_CUE_SHEET_TYPE_COMPOSITECUESHEET  CueSheetType = 2
	CueSheetType_CUE_SHEET_TYPE_STANDARDCUESHEET   CueSheetType = 3
	CueSheetType_CUE_SHEET_TYPE_SUMMARISEDCUESHEET CueSheetType = 4
	CueSheetType_CUE_SHEET_TYPE_SURROGATECUESHEET  CueSheetType = 5
)

// Enum value maps for CueSheetType.
var (
	CueSheetType_name = map[int32]string{
		0: "CUE_SHEET_TYPE_UNSPECIFIED",
		1: "CUE_SHEET_TYPE_AVERAGECUESHEET",
		2: "CUE_SHEET_TYPE_COMPOSITECUESHEET",
		3: "CUE_SHEET_TYPE_STANDARDCUESHEET",
		4: "CUE_SHEET_TYPE_SUMMARISEDCUESHEET",
		5: "CUE_SHEET_TYPE_SURROGATECUESHEET",
	}
	CueSheetType_value = map[string]int32{
		"CUE_SHEET_TYPE_UNSPECIFIED":        0,
		"CUE_SHEET_TYPE_AVERAGECUESHEET":    1,
		"CUE_SHEET_TYPE_COMPOSITECUESHEET":  2,
		"CUE_SHEET_TYPE_STANDARDCUESHEET":   3,
		"CUE_SHEET_TYPE_SUMMARISEDCUESHEET": 4,
		"CUE_SHEET_TYPE_SURROGATECUESHEET":  5,
	}
)

func (x CueSheetType) Enum() *CueSheetType {
	p := new(CueSheetType)
	*p = x
	return p
}

func (x CueSheetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueSheetType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[35].Descriptor()
}

func (CueSheetType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[35]
}

func (x CueSheetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueSheetType.Descriptor instead.
func (CueSheetType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{35}
}

type CueUseType int32

const (
	CueUseType_CUE_USE_TYPE_UNSPECIFIED                 CueUseType = 0
	CueUseType_CUE_USE_TYPE_AUDIOLOGO                   CueUseType = 1
	CueUseType_CUE_USE_TYPE_BACKGROUND                  CueUseType = 2
	CueUseType_CUE_USE_TYPE_BUMPER                      CueUseType = 3
	CueUseType_CUE_USE_TYPE_ESSENTIALPART               CueUseType = 4
	CueUseType_CUE_USE_TYPE_FILMTHEME                   CueUseType = 5
	CueUseType_CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND CueUseType = 6
	CueUseType_CUE_USE_TYPE_ONSCREENMUSIC               CueUseType = 7
	CueUseType_CUE_USE_TYPE_ROLLEDUPCUE                 CueUseType = 8
	CueUseType_CUE_USE_TYPE_THEME                       CueUseType = 9
	CueUseType_CUE_USE_TYPE_USERDEFINED                 CueUseType = 10
)

// Enum value maps for CueUseType.
var (
	CueUseType_name = map[int32]string{
		0:  "CUE_USE_TYPE_UNSPECIFIED",
		1:  "CUE_USE_TYPE_AUDIOLOGO",
		2:  "CUE_USE_TYPE_BACKGROUND",
		3:  "CUE_USE_TYPE_BUMPER",
		4:  "CUE_USE_TYPE_ESSENTIALPART",
		5:  "CUE_USE_TYPE_FILMTHEME",
		6:  "CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND",
		7:  "CUE_USE_TYPE_ONSCREENMUSIC",
		8:  "CUE_USE_TYPE_ROLLEDUPCUE",
		9:  "CUE_USE_TYPE_THEME",
		10: "CUE_USE_TYPE_USERDEFINED",
	}
	CueUseType_value = map[string]int32{
		"CUE_USE_TYPE_UNSPECIFIED":                 0,
		"CUE_USE_TYPE_AUDIOLOGO":                   1,
		"CUE_USE_TYPE_BACKGROUND":                  2,
		"CUE_USE_TYPE_BUMPER":                      3,
		"CUE_USE_TYPE_ESSENTIALPART":               4,
		"CUE_USE_TYPE_FILMTHEME":                   5,
		"CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND": 6,
		"CUE_USE_TYPE_ONSCREENMUSIC":               7,
		"CUE_USE_TYPE_ROLLEDUPCUE":                 8,
		"CUE_USE_TYPE_THEME":                       9,
		"CUE_USE_TYPE_USERDEFINED":                 10,
	}
)

func (x CueUseType) Enum() *CueUseType {
	p := new(CueUseType)
	*p = x
	return p
}

func (x CueUseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueUseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[36].Descriptor()
}

func (CueUseType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[36]
}

func (x CueUseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueUseType.Descriptor instead.
func (CueUseType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{36}
}

type CurrencyCode int32

const (
	CurrencyCode_CURRENCY_CODE_UNSPECIFIED CurrencyCode = 0
	CurrencyCode_CURRENCY_CODE_AED         CurrencyCode = 1
	CurrencyCode_CURRENCY_CODE_AFN         CurrencyCode = 2
	CurrencyCode_CURRENCY_CODE_ALL         CurrencyCode = 3
	CurrencyCode_CURRENCY_CODE_AMD         CurrencyCode = 4
	CurrencyCode_CURRENCY_CODE_ANG         CurrencyCode = 5
	CurrencyCode_CURRENCY_CODE_AOA         CurrencyCode = 6
	CurrencyCode_CURRENCY_CODE_ARS         CurrencyCode = 7
	CurrencyCode_CURRENCY_CODE_AUD         CurrencyCode = 8
	CurrencyCode_CURRENCY_CODE_AWG         CurrencyCode = 9
	CurrencyCode_CURRENCY_CODE_AZN         CurrencyCode = 10
	CurrencyCode_CURRENCY_CODE_BAM         CurrencyCode = 11
	CurrencyCode_CURRENCY_CODE_BBD         CurrencyCode = 12
	CurrencyCode_CURRENCY_CODE_BDT         CurrencyCode = 13
	CurrencyCode_CURRENCY_CODE_BGN         CurrencyCode = 14
	CurrencyCode_CURRENCY_CODE_BHD         CurrencyCode = 15
	CurrencyCode_CURRENCY_CODE_BIF         CurrencyCode = 16
	CurrencyCode_CURRENCY_CODE_BMD         CurrencyCode = 17
	CurrencyCode_CURRENCY_CODE_BND         CurrencyCode = 18
	CurrencyCode_CURRENCY_CODE_BOB         CurrencyCode = 19
	CurrencyCode_CURRENCY_CODE_BOV         CurrencyCode = 20
	CurrencyCode_CURRENCY_CODE_BRL         CurrencyCode = 21
	CurrencyCode_CURRENCY_CODE_BSD         CurrencyCode = 22
	CurrencyCode_CURRENCY_CODE_BTN         CurrencyCode = 23
	CurrencyCode_CURRENCY_CODE_BWP         CurrencyCode = 24
	CurrencyCode_CURRENCY_CODE_BYR         CurrencyCode = 25
	CurrencyCode_CURRENCY_CODE_BZD         CurrencyCode = 26
	CurrencyCode_CURRENCY_CODE_CAD         CurrencyCode = 27
	CurrencyCode_CURRENCY_CODE_CDF         CurrencyCode = 28
	CurrencyCode_CURRENCY_CODE_CHF         CurrencyCode = 29
	CurrencyCode_CURRENCY_CODE_CLF         CurrencyCode = 30
	CurrencyCode_CURRENCY_CODE_CLP         CurrencyCode = 31
	CurrencyCode_CURRENCY_CODE_CNY         CurrencyCode = 32
	CurrencyCode_CURRENCY_CODE_COP         CurrencyCode = 33
	CurrencyCode_CURRENCY_CODE_COU         CurrencyCode = 34
	CurrencyCode_CURRENCY_CODE_CRC         CurrencyCode = 35
	CurrencyCode_CURRENCY_CODE_CUC         CurrencyCode = 36
	CurrencyCode_CURRENCY_CODE_CUP         CurrencyCode = 37
	CurrencyCode_CURRENCY_CODE_CVE         CurrencyCode = 38
	CurrencyCode_CURRENCY_CODE_CZK         CurrencyCode = 39
	CurrencyCode_CURRENCY_CODE_DJF         CurrencyCode = 40
	CurrencyCode_CURRENCY_CODE_DKK         CurrencyCode = 41
	CurrencyCode_CURRENCY_CODE_DOP         CurrencyCode = 42
	CurrencyCode_CURRENCY_CODE_DZD         CurrencyCode = 43
	CurrencyCode_CURRENCY_CODE_EGP         CurrencyCode = 44
	CurrencyCode_CURRENCY_CODE_ERN         CurrencyCode = 45
	CurrencyCode_CURRENCY_CODE_ETB         CurrencyCode = 46
	CurrencyCode_CURRENCY_CODE_EUR         CurrencyCode = 47
	CurrencyCode_CURRENCY_CODE_FJD         CurrencyCode = 48
	CurrencyCode_CURRENCY_CODE_FKP         CurrencyCode = 49
	CurrencyCode_CURRENCY_CODE_GBP         CurrencyCode = 50
	CurrencyCode_CURRENCY_CODE_GEL         CurrencyCode = 51
	CurrencyCode_CURRENCY_CODE_GHS         CurrencyCode = 52
	CurrencyCode_CURRENCY_CODE_GIP         CurrencyCode = 53
	CurrencyCode_CURRENCY_CODE_GMD         CurrencyCode = 54
	CurrencyCode_CURRENCY_CODE_GNF         CurrencyCode = 55
	CurrencyCode_CURRENCY_CODE_GTQ         CurrencyCode = 56
	CurrencyCode_CURRENCY_CODE_GYD         CurrencyCode = 57
	CurrencyCode_CURRENCY_CODE_HKD         CurrencyCode = 58
	CurrencyCode_CURRENCY_CODE_HNL         CurrencyCode = 59
	CurrencyCode_CURRENCY_CODE_HRK         CurrencyCode = 60
	CurrencyCode_CURRENCY_CODE_HTG         CurrencyCode = 61
	CurrencyCode_CURRENCY_CODE_HUF         CurrencyCode = 62
	CurrencyCode_CURRENCY_CODE_IDR         CurrencyCode = 63
	CurrencyCode_CURRENCY_CODE_ILS         CurrencyCode = 64
	CurrencyCode_CURRENCY_CODE_INR         CurrencyCode = 65
	CurrencyCode_CURRENCY_CODE_IQD         CurrencyCode = 66
	CurrencyCode_CURRENCY_CODE_IRR         CurrencyCode = 67
	CurrencyCode_CURRENCY_CODE_ISK         CurrencyCode = 68
	CurrencyCode_CURRENCY_CODE_JMD         CurrencyCode = 69
	CurrencyCode_CURRENCY_CODE_JOD         CurrencyCode = 70
	CurrencyCode_CURRENCY_CODE_JPY         CurrencyCode = 71
	CurrencyCode_CURRENCY_CODE_KES         CurrencyCode = 72
	CurrencyCode_CURRENCY_CODE_KGS         CurrencyCode = 73
	CurrencyCode_CURRENCY_CODE_KHR         CurrencyCode = 74
	CurrencyCode_CURRENCY_CODE_KMF         CurrencyCode = 75
	CurrencyCode_CURRENCY_CODE_KPW         CurrencyCode = 76
	CurrencyCode_CURRENCY_CODE_KRW         CurrencyCode = 77
	CurrencyCode_CURRENCY_CODE_KWD         CurrencyCode = 78
	CurrencyCode_CURRENCY_CODE_KYD         CurrencyCode = 79
	CurrencyCode_CURRENCY_CODE_KZT         CurrencyCode = 80
	CurrencyCode_CURRENCY_CODE_LAK         CurrencyCode = 81
	CurrencyCode_CURRENCY_CODE_LBP         CurrencyCode = 82
	CurrencyCode_CURRENCY_CODE_LKR         CurrencyCode = 83
	CurrencyCode_CURRENCY_CODE_LRD         CurrencyCode = 84
	CurrencyCode_CURRENCY_CODE_LSL         CurrencyCode = 85
	CurrencyCode_CURRENCY_CODE_LYD         CurrencyCode = 86
	CurrencyCode_CURRENCY_CODE_MAD         CurrencyCode = 87
	CurrencyCode_CURRENCY_CODE_MDL         CurrencyCode = 88
	CurrencyCode_CURRENCY_CODE_MGA         CurrencyCode = 89
	CurrencyCode_CURRENCY_CODE_MKD         CurrencyCode = 90
	CurrencyCode_CURRENCY_CODE_MMK         CurrencyCode = 91
	CurrencyCode_CURRENCY_CODE_MNT         CurrencyCode = 92
	CurrencyCode_CURRENCY_CODE_MOP         CurrencyCode = 93
	CurrencyCode_CURRENCY_CODE_MRU         CurrencyCode = 94
	CurrencyCode_CURRENCY_CODE_MUR         CurrencyCode = 95
	CurrencyCode_CURRENCY_CODE_MVR         CurrencyCode = 96
	CurrencyCode_CURRENCY_CODE_MWK         CurrencyCode = 97
	CurrencyCode_CURRENCY_CODE_MXN         CurrencyCode = 98
	CurrencyCode_CURRENCY_CODE_MXV         CurrencyCode = 99
	CurrencyCode_CURRENCY_CODE_MYR         CurrencyCode = 100
	CurrencyCode_CURRENCY_CODE_MZN         CurrencyCode = 101
	CurrencyCode_CURRENCY_CODE_NAD         CurrencyCode = 102
	CurrencyCode_CURRENCY_CODE_NGN         CurrencyCode = 103
	CurrencyCode_CURRENCY_CODE_NIO         CurrencyCode = 104
	CurrencyCode_CURRENCY_CODE_NOK         CurrencyCode = 105
	CurrencyCode_CURRENCY_CODE_NPR         CurrencyCode = 106
	CurrencyCode_CURRENCY_CODE_NZD         CurrencyCode = 107
	CurrencyCode_CURRENCY_CODE_OMR         CurrencyCode = 108
	CurrencyCode_CURRENCY_CODE_PAB         CurrencyCode = 109
	CurrencyCode_CURRENCY_CODE_PEN         CurrencyCode = 110
	CurrencyCode_CURRENCY_CODE_PGK         CurrencyCode = 111
	CurrencyCode_CURRENCY_CODE_PHP         CurrencyCode = 112
	CurrencyCode_CURRENCY_CODE_PKR         CurrencyCode = 113
	CurrencyCode_CURRENCY_CODE_PLN         CurrencyCode = 114
	CurrencyCode_CURRENCY_CODE_PYG         CurrencyCode = 115
	CurrencyCode_CURRENCY_CODE_QAR         CurrencyCode = 116
	CurrencyCode_CURRENCY_CODE_RON         CurrencyCode = 117
	CurrencyCode_CURRENCY_CODE_RSD         CurrencyCode = 118
	CurrencyCode_CURRENCY_CODE_RUB         CurrencyCode = 119
	CurrencyCode_CURRENCY_CODE_RWF         CurrencyCode = 120
	CurrencyCode_CURRENCY_CODE_SAR         CurrencyCode = 121
	CurrencyCode_CURRENCY_CODE_SBD         CurrencyCode = 122
	CurrencyCode_CURRENCY_CODE_SCR         CurrencyCode = 123
	CurrencyCode_CURRENCY_CODE_SDG         CurrencyCode = 124
	CurrencyCode_CURRENCY_CODE_SEK         CurrencyCode = 125
	CurrencyCode_CURRENCY_CODE_SGD         CurrencyCode = 126
	CurrencyCode_CURRENCY_CODE_SHP         CurrencyCode = 127
	CurrencyCode_CURRENCY_CODE_SLL         CurrencyCode = 128
	CurrencyCode_CURRENCY_CODE_SOS         CurrencyCode = 129
	CurrencyCode_CURRENCY_CODE_SRD         CurrencyCode = 130
	CurrencyCode_CURRENCY_CODE_SSP         CurrencyCode = 131
	CurrencyCode_CURRENCY_CODE_STN         CurrencyCode = 132
	CurrencyCode_CURRENCY_CODE_SVC         CurrencyCode = 133
	CurrencyCode_CURRENCY_CODE_SYP         CurrencyCode = 134
	CurrencyCode_CURRENCY_CODE_SZL         CurrencyCode = 135
	CurrencyCode_CURRENCY_CODE_THB         CurrencyCode = 136
	CurrencyCode_CURRENCY_CODE_TJS         CurrencyCode = 137
	CurrencyCode_CURRENCY_CODE_TMT         CurrencyCode = 138
	CurrencyCode_CURRENCY_CODE_TND         CurrencyCode = 139
	CurrencyCode_CURRENCY_CODE_TOP         CurrencyCode = 140
	CurrencyCode_CURRENCY_CODE_TRY         CurrencyCode = 141
	CurrencyCode_CURRENCY_CODE_TTD         CurrencyCode = 142
	CurrencyCode_CURRENCY_CODE_TWD         CurrencyCode = 143
	CurrencyCode_CURRENCY_CODE_TZS         CurrencyCode = 144
	CurrencyCode_CURRENCY_CODE_UAH         CurrencyCode = 145
	CurrencyCode_CURRENCY_CODE_UGX         CurrencyCode = 146
	CurrencyCode_CURRENCY_CODE_USD         CurrencyCode = 147
	CurrencyCode_CURRENCY_CODE_UYI         CurrencyCode = 148
	CurrencyCode_CURRENCY_CODE_UYU         CurrencyCode = 149
	CurrencyCode_CURRENCY_CODE_UZS         CurrencyCode = 150
	CurrencyCode_CURRENCY_CODE_VES         CurrencyCode = 151
	CurrencyCode_CURRENCY_CODE_VND         CurrencyCode = 152
	CurrencyCode_CURRENCY_CODE_VUV         CurrencyCode = 153
	CurrencyCode_CURRENCY_CODE_WST         CurrencyCode = 154
	CurrencyCode_CURRENCY_CODE_XAF         CurrencyCode = 155
	CurrencyCode_CURRENCY_CODE_XCD         CurrencyCode = 156
	CurrencyCode_CURRENCY_CODE_XOF         CurrencyCode = 157
	CurrencyCode_CURRENCY_CODE_XPF         CurrencyCode = 158
	CurrencyCode_CURRENCY_CODE_YER         CurrencyCode = 159
	CurrencyCode_CURRENCY_CODE_ZAR         CurrencyCode = 160
	CurrencyCode_CURRENCY_CODE_ZMW         CurrencyCode = 161
	CurrencyCode_CURRENCY_CODE_ZWL         CurrencyCode = 162
	CurrencyCode_CURRENCY_CODE_CYP         CurrencyCode = 163
	CurrencyCode_CURRENCY_CODE_EEK         CurrencyCode = 164
	CurrencyCode_CURRENCY_CODE_LTL         CurrencyCode = 165
	CurrencyCode_CURRENCY_CODE_LVL         CurrencyCode = 166
	CurrencyCode_CURRENCY_CODE_MTL         CurrencyCode = 167
	CurrencyCode_CURRENCY_CODE_MRO         CurrencyCode = 168
	CurrencyCode_CURRENCY_CODE_ROL         CurrencyCode = 169
	CurrencyCode_CURRENCY_CODE_SIT         CurrencyCode = 170
	CurrencyCode_CURRENCY_CODE_SKK         CurrencyCode = 171
	CurrencyCode_CURRENCY_CODE_STD         CurrencyCode = 172
	CurrencyCode_CURRENCY_CODE_VEF         CurrencyCode = 173
)

// Enum value maps for CurrencyCode.
var (
	CurrencyCode_name = map[int32]string{
		0:   "CURRENCY_CODE_UNSPECIFIED",
		1:   "CURRENCY_CODE_AED",
		2:   "CURRENCY_CODE_AFN",
		3:   "CURRENCY_CODE_ALL",
		4:   "CURRENCY_CODE_AMD",
		5:   "CURRENCY_CODE_ANG",
		6:   "CURRENCY_CODE_AOA",
		7:   "CURRENCY_CODE_ARS",
		8:   "CURRENCY_CODE_AUD",
		9:   "CURRENCY_CODE_AWG",
		10:  "CURRENCY_CODE_AZN",
		11:  "CURRENCY_CODE_BAM",
		12:  "CURRENCY_CODE_BBD",
		13:  "CURRENCY_CODE_BDT",
		14:  "CURRENCY_CODE_BGN",
		15:  "CURRENCY_CODE_BHD",
		16:  "CURRENCY_CODE_BIF",
		17:  "CURRENCY_CODE_BMD",
		18:  "CURRENCY_CODE_BND",
		19:  "CURRENCY_CODE_BOB",
		20:  "CURRENCY_CODE_BOV",
		21:  "CURRENCY_CODE_BRL",
		22:  "CURRENCY_CODE_BSD",
		23:  "CURRENCY_CODE_BTN",
		24:  "CURRENCY_CODE_BWP",
		25:  "CURRENCY_CODE_BYR",
		26:  "CURRENCY_CODE_BZD",
		27:  "CURRENCY_CODE_CAD",
		28:  "CURRENCY_CODE_CDF",
		29:  "CURRENCY_CODE_CHF",
		30:  "CURRENCY_CODE_CLF",
		31:  "CURRENCY_CODE_CLP",
		32:  "CURRENCY_CODE_CNY",
		33:  "CURRENCY_CODE_COP",
		34:  "CURRENCY_CODE_COU",
		35:  "CURRENCY_CODE_CRC",
		36:  "CURRENCY_CODE_CUC",
		37:  "CURRENCY_CODE_CUP",
		38:  "CURRENCY_CODE_CVE",
		39:  "CURRENCY_CODE_CZK",
		40:  "CURRENCY_CODE_DJF",
		41:  "CURRENCY_CODE_DKK",
		42:  "CURRENCY_CODE_DOP",
		43:  "CURRENCY_CODE_DZD",
		44:  "CURRENCY_CODE_EGP",
		45:  "CURRENCY_CODE_ERN",
		46:  "CURRENCY_CODE_ETB",
		47:  "CURRENCY_CODE_EUR",
		48:  "CURRENCY_CODE_FJD",
		49:  "CURRENCY_CODE_FKP",
		50:  "CURRENCY_CODE_GBP",
		51:  "CURRENCY_CODE_GEL",
		52:  "CURRENCY_CODE_GHS",
		53:  "CURRENCY_CODE_GIP",
		54:  "CURRENCY_CODE_GMD",
		55:  "CURRENCY_CODE_GNF",
		56:  "CURRENCY_CODE_GTQ",
		57:  "CURRENCY_CODE_GYD",
		58:  "CURRENCY_CODE_HKD",
		59:  "CURRENCY_CODE_HNL",
		60:  "CURRENCY_CODE_HRK",
		61:  "CURRENCY_CODE_HTG",
		62:  "CURRENCY_CODE_HUF",
		63:  "CURRENCY_CODE_IDR",
		64:  "CURRENCY_CODE_ILS",
		65:  "CURRENCY_CODE_INR",
		66:  "CURRENCY_CODE_IQD",
		67:  "CURRENCY_CODE_IRR",
		68:  "CURRENCY_CODE_ISK",
		69:  "CURRENCY_CODE_JMD",
		70:  "CURRENCY_CODE_JOD",
		71:  "CURRENCY_CODE_JPY",
		72:  "CURRENCY_CODE_KES",
		73:  "CURRENCY_CODE_KGS",
		74:  "CURRENCY_CODE_KHR",
		75:  "CURRENCY_CODE_KMF",
		76:  "CURRENCY_CODE_KPW",
		77:  "CURRENCY_CODE_KRW",
		78:  "CURRENCY_CODE_KWD",
		79:  "CURRENCY_CODE_KYD",
		80:  "CURRENCY_CODE_KZT",
		81:  "CURRENCY_CODE_LAK",
		82:  "CURRENCY_CODE_LBP",
		83:  "CURRENCY_CODE_LKR",
		84:  "CURRENCY_CODE_LRD",
		85:  "CURRENCY_CODE_LSL",
		86:  "CURRENCY_CODE_LYD",
		87:  "CURRENCY_CODE_MAD",
		88:  "CURRENCY_CODE_MDL",
		89:  "CURRENCY_CODE_MGA",
		90:  "CURRENCY_CODE_MKD",
		91:  "CURRENCY_CODE_MMK",
		92:  "CURRENCY_CODE_MNT",
		93:  "CURRENCY_CODE_MOP",
		94:  "CURRENCY_CODE_MRU",
		95:  "CURRENCY_CODE_MUR",
		96:  "CURRENCY_CODE_MVR",
		97:  "CURRENCY_CODE_MWK",
		98:  "CURRENCY_CODE_MXN",
		99:  "CURRENCY_CODE_MXV",
		100: "CURRENCY_CODE_MYR",
		101: "CURRENCY_CODE_MZN",
		102: "CURRENCY_CODE_NAD",
		103: "CURRENCY_CODE_NGN",
		104: "CURRENCY_CODE_NIO",
		105: "CURRENCY_CODE_NOK",
		106: "CURRENCY_CODE_NPR",
		107: "CURRENCY_CODE_NZD",
		108: "CURRENCY_CODE_OMR",
		109: "CURRENCY_CODE_PAB",
		110: "CURRENCY_CODE_PEN",
		111: "CURRENCY_CODE_PGK",
		112: "CURRENCY_CODE_PHP",
		113: "CURRENCY_CODE_PKR",
		114: "CURRENCY_CODE_PLN",
		115: "CURRENCY_CODE_PYG",
		116: "CURRENCY_CODE_QAR",
		117: "CURRENCY_CODE_RON",
		118: "CURRENCY_CODE_RSD",
		119: "CURRENCY_CODE_RUB",
		120: "CURRENCY_CODE_RWF",
		121: "CURRENCY_CODE_SAR",
		122: "CURRENCY_CODE_SBD",
		123: "CURRENCY_CODE_SCR",
		124: "CURRENCY_CODE_SDG",
		125: "CURRENCY_CODE_SEK",
		126: "CURRENCY_CODE_SGD",
		127: "CURRENCY_CODE_SHP",
		128: "CURRENCY_CODE_SLL",
		129: "CURRENCY_CODE_SOS",
		130: "CURRENCY_CODE_SRD",
		131: "CURRENCY_CODE_SSP",
		132: "CURRENCY_CODE_STN",
		133: "CURRENCY_CODE_SVC",
		134: "CURRENCY_CODE_SYP",
		135: "CURRENCY_CODE_SZL",
		136: "CURRENCY_CODE_THB",
		137: "CURRENCY_CODE_TJS",
		138: "CURRENCY_CODE_TMT",
		139: "CURRENCY_CODE_TND",
		140: "CURRENCY_CODE_TOP",
		141: "CURRENCY_CODE_TRY",
		142: "CURRENCY_CODE_TTD",
		143: "CURRENCY_CODE_TWD",
		144: "CURRENCY_CODE_TZS",
		145: "CURRENCY_CODE_UAH",
		146: "CURRENCY_CODE_UGX",
		147: "CURRENCY_CODE_USD",
		148: "CURRENCY_CODE_UYI",
		149: "CURRENCY_CODE_UYU",
		150: "CURRENCY_CODE_UZS",
		151: "CURRENCY_CODE_VES",
		152: "CURRENCY_CODE_VND",
		153: "CURRENCY_CODE_VUV",
		154: "CURRENCY_CODE_WST",
		155: "CURRENCY_CODE_XAF",
		156: "CURRENCY_CODE_XCD",
		157: "CURRENCY_CODE_XOF",
		158: "CURRENCY_CODE_XPF",
		159: "CURRENCY_CODE_YER",
		160: "CURRENCY_CODE_ZAR",
		161: "CURRENCY_CODE_ZMW",
		162: "CURRENCY_CODE_ZWL",
		163: "CURRENCY_CODE_CYP",
		164: "CURRENCY_CODE_EEK",
		165: "CURRENCY_CODE_LTL",
		166: "CURRENCY_CODE_LVL",
		167: "CURRENCY_CODE_MTL",
		168: "CURRENCY_CODE_MRO",
		169: "CURRENCY_CODE_ROL",
		170: "CURRENCY_CODE_SIT",
		171: "CURRENCY_CODE_SKK",
		172: "CURRENCY_CODE_STD",
		173: "CURRENCY_CODE_VEF",
	}
	CurrencyCode_value = map[string]int32{
		"CURRENCY_CODE_UNSPECIFIED": 0,
		"CURRENCY_CODE_AED":         1,
		"CURRENCY_CODE_AFN":         2,
		"CURRENCY_CODE_ALL":         3,
		"CURRENCY_CODE_AMD":         4,
		"CURRENCY_CODE_ANG":         5,
		"CURRENCY_CODE_AOA":         6,
		"CURRENCY_CODE_ARS":         7,
		"CURRENCY_CODE_AUD":         8,
		"CURRENCY_CODE_AWG":         9,
		"CURRENCY_CODE_AZN":         10,
		"CURRENCY_CODE_BAM":         11,
		"CURRENCY_CODE_BBD":         12,
		"CURRENCY_CODE_BDT":         13,
		"CURRENCY_CODE_BGN":         14,
		"CURRENCY_CODE_BHD":         15,
		"CURRENCY_CODE_BIF":         16,
		"CURRENCY_CODE_BMD":         17,
		"CURRENCY_CODE_BND":         18,
		"CURRENCY_CODE_BOB":         19,
		"CURRENCY_CODE_BOV":         20,
		"CURRENCY_CODE_BRL":         21,
		"CURRENCY_CODE_BSD":         22,
		"CURRENCY_CODE_BTN":         23,
		"CURRENCY_CODE_BWP":         24,
		"CURRENCY_CODE_BYR":         25,
		"CURRENCY_CODE_BZD":         26,
		"CURRENCY_CODE_CAD":         27,
		"CURRENCY_CODE_CDF":         28,
		"CURRENCY_CODE_CHF":         29,
		"CURRENCY_CODE_CLF":         30,
		"CURRENCY_CODE_CLP":         31,
		"CURRENCY_CODE_CNY":         32,
		"CURRENCY_CODE_COP":         33,
		"CURRENCY_CODE_COU":         34,
		"CURRENCY_CODE_CRC":         35,
		"CURRENCY_CODE_CUC":         36,
		"CURRENCY_CODE_CUP":         37,
		"CURRENCY_CODE_CVE":         38,
		"CURRENCY_CODE_CZK":         39,
		"CURRENCY_CODE_DJF":         40,
		"CURRENCY_CODE_DKK":         41,
		"CURRENCY_CODE_DOP":         42,
		"CURRENCY_CODE_DZD":         43,
		"CURRENCY_CODE_EGP":         44,
		"CURRENCY_CODE_ERN":         45,
		"CURRENCY_CODE_ETB":         46,
		"CURRENCY_CODE_EUR":         47,
		"CURRENCY_CODE_FJD":         48,
		"CURRENCY_CODE_FKP":         49,
		"CURRENCY_CODE_GBP":         50,
		"CURRENCY_CODE_GEL":         51,
		"CURRENCY_CODE_GHS":         52,
		"CURRENCY_CODE_GIP":         53,
		"CURRENCY_CODE_GMD":         54,
		"CURRENCY_CODE_GNF":         55,
		"CURRENCY_CODE_GTQ":         56,
		"CURRENCY_CODE_GYD":         57,
		"CURRENCY_CODE_HKD":         58,
		"CURRENCY_CODE_HNL":         59,
		"CURRENCY_CODE_HRK":         60,
		"CURRENCY_CODE_HTG":         61,
		"CURRENCY_CODE_HUF":         62,
		"CURRENCY_CODE_IDR":         63,
		"CURRENCY_CODE_ILS":         64,
		"CURRENCY_CODE_INR":         65,
		"CURRENCY_CODE_IQD":         66,
		"CURRENCY_CODE_IRR":         67,
		"CURRENCY_CODE_ISK":         68,
		"CURRENCY_CODE_JMD":         69,
		"CURRENCY_CODE_JOD":         70,
		"CURRENCY_CODE_JPY":         71,
		"CURRENCY_CODE_KES":         72,
		"CURRENCY_CODE_KGS":         73,
		"CURRENCY_CODE_KHR":         74,
		"CURRENCY_CODE_KMF":         75,
		"CURRENCY_CODE_KPW":         76,
		"CURRENCY_CODE_KRW":         77,
		"CURRENCY_CODE_KWD":         78,
		"CURRENCY_CODE_KYD":         79,
		"CURRENCY_CODE_KZT":         80,
		"CURRENCY_CODE_LAK":         81,
		"CURRENCY_CODE_LBP":         82,
		"CURRENCY_CODE_LKR":         83,
		"CURRENCY_CODE_LRD":         84,
		"CURRENCY_CODE_LSL":         85,
		"CURRENCY_CODE_LYD":         86,
		"CURRENCY_CODE_MAD":         87,
		"CURRENCY_CODE_MDL":         88,
		"CURRENCY_CODE_MGA":         89,
		"CURRENCY_CODE_MKD":         90,
		"CURRENCY_CODE_MMK":         91,
		"CURRENCY_CODE_MNT":         92,
		"CURRENCY_CODE_MOP":         93,
		"CURRENCY_CODE_MRU":         94,
		"CURRENCY_CODE_MUR":         95,
		"CURRENCY_CODE_MVR":         96,
		"CURRENCY_CODE_MWK":         97,
		"CURRENCY_CODE_MXN":         98,
		"CURRENCY_CODE_MXV":         99,
		"CURRENCY_CODE_MYR":         100,
		"CURRENCY_CODE_MZN":         101,
		"CURRENCY_CODE_NAD":         102,
		"CURRENCY_CODE_NGN":         103,
		"CURRENCY_CODE_NIO":         104,
		"CURRENCY_CODE_NOK":         105,
		"CURRENCY_CODE_NPR":         106,
		"CURRENCY_CODE_NZD":         107,
		"CURRENCY_CODE_OMR":         108,
		"CURRENCY_CODE_PAB":         109,
		"CURRENCY_CODE_PEN":         110,
		"CURRENCY_CODE_PGK":         111,
		"CURRENCY_CODE_PHP":         112,
		"CURRENCY_CODE_PKR":         113,
		"CURRENCY_CODE_PLN":         114,
		"CURRENCY_CODE_PYG":         115,
		"CURRENCY_CODE_QAR":         116,
		"CURRENCY_CODE_RON":         117,
		"CURRENCY_CODE_RSD":         118,
		"CURRENCY_CODE_RUB":         119,
		"CURRENCY_CODE_RWF":         120,
		"CURRENCY_CODE_SAR":         121,
		"CURRENCY_CODE_SBD":         122,
		"CURRENCY_CODE_SCR":         123,
		"CURRENCY_CODE_SDG":         124,
		"CURRENCY_CODE_SEK":         125,
		"CURRENCY_CODE_SGD":         126,
		"CURRENCY_CODE_SHP":         127,
		"CURRENCY_CODE_SLL":         128,
		"CURRENCY_CODE_SOS":         129,
		"CURRENCY_CODE_SRD":         130,
		"CURRENCY_CODE_SSP":         131,
		"CURRENCY_CODE_STN":         132,
		"CURRENCY_CODE_SVC":         133,
		"CURRENCY_CODE_SYP":         134,
		"CURRENCY_CODE_SZL":         135,
		"CURRENCY_CODE_THB":         136,
		"CURRENCY_CODE_TJS":         137,
		"CURRENCY_CODE_TMT":         138,
		"CURRENCY_CODE_TND":         139,
		"CURRENCY_CODE_TOP":         140,
		"CURRENCY_CODE_TRY":         141,
		"CURRENCY_CODE_TTD":         142,
		"CURRENCY_CODE_TWD":         143,
		"CURRENCY_CODE_TZS":         144,
		"CURRENCY_CODE_UAH":         145,
		"CURRENCY_CODE_UGX":         146,
		"CURRENCY_CODE_USD":         147,
		"CURRENCY_CODE_UYI":         148,
		"CURRENCY_CODE_UYU":         149,
		"CURRENCY_CODE_UZS":         150,
		"CURRENCY_CODE_VES":         151,
		"CURRENCY_CODE_VND":         152,
		"CURRENCY_CODE_VUV":         153,
		"CURRENCY_CODE_WST":         154,
		"CURRENCY_CODE_XAF":         155,
		"CURRENCY_CODE_XCD":         156,
		"CURRENCY_CODE_XOF":         157,
		"CURRENCY_CODE_XPF":         158,
		"CURRENCY_CODE_YER":         159,
		"CURRENCY_CODE_ZAR":         160,
		"CURRENCY_CODE_ZMW":         161,
		"CURRENCY_CODE_ZWL":         162,
		"CURRENCY_CODE_CYP":         163,
		"CURRENCY_CODE_EEK":         164,
		"CURRENCY_CODE_LTL":         165,
		"CURRENCY_CODE_LVL":         166,
		"CURRENCY_CODE_MTL":         167,
		"CURRENCY_CODE_MRO":         168,
		"CURRENCY_CODE_ROL":         169,
		"CURRENCY_CODE_SIT":         170,
		"CURRENCY_CODE_SKK":         171,
		"CURRENCY_CODE_STD":         172,
		"CURRENCY_CODE_VEF":         173,
	}
)

func (x CurrencyCode) Enum() *CurrencyCode {
	p := new(CurrencyCode)
	*p = x
	return p
}

func (x CurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[37].Descriptor()
}

func (CurrencyCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[37]
}

func (x CurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyCode.Descriptor instead.
func (CurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{37}
}

type CurrentTerritoryCode int32

const (
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UNSPECIFIED CurrentTerritoryCode = 0
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AD          CurrentTerritoryCode = 1
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AE          CurrentTerritoryCode = 2
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AF          CurrentTerritoryCode = 3
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AG          CurrentTerritoryCode = 4
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AI          CurrentTerritoryCode = 5
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AL          CurrentTerritoryCode = 6
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AM          CurrentTerritoryCode = 7
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AN          CurrentTerritoryCode = 8
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AO          CurrentTerritoryCode = 9
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AQ          CurrentTerritoryCode = 10
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AR          CurrentTerritoryCode = 11
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AS          CurrentTerritoryCode = 12
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AT          CurrentTerritoryCode = 13
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AU          CurrentTerritoryCode = 14
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AW          CurrentTerritoryCode = 15
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AX          CurrentTerritoryCode = 16
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_AZ          CurrentTerritoryCode = 17
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BA          CurrentTerritoryCode = 18
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BB          CurrentTerritoryCode = 19
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BD          CurrentTerritoryCode = 20
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BE          CurrentTerritoryCode = 21
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BF          CurrentTerritoryCode = 22
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BG          CurrentTerritoryCode = 23
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BH          CurrentTerritoryCode = 24
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BI          CurrentTerritoryCode = 25
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BJ          CurrentTerritoryCode = 26
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BL          CurrentTerritoryCode = 27
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BM          CurrentTerritoryCode = 28
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BN          CurrentTerritoryCode = 29
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BO          CurrentTerritoryCode = 30
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BQ          CurrentTerritoryCode = 31
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BR          CurrentTerritoryCode = 32
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BS          CurrentTerritoryCode = 33
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BT          CurrentTerritoryCode = 34
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BV          CurrentTerritoryCode = 35
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BW          CurrentTerritoryCode = 36
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BY          CurrentTerritoryCode = 37
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_BZ          CurrentTerritoryCode = 38
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CA          CurrentTerritoryCode = 39
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CC          CurrentTerritoryCode = 40
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CD          CurrentTerritoryCode = 41
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CF          CurrentTerritoryCode = 42
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CG          CurrentTerritoryCode = 43
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CH          CurrentTerritoryCode = 44
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CI          CurrentTerritoryCode = 45
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CK          CurrentTerritoryCode = 46
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CL          CurrentTerritoryCode = 47
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CM          CurrentTerritoryCode = 48
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CN          CurrentTerritoryCode = 49
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CO          CurrentTerritoryCode = 50
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CR          CurrentTerritoryCode = 51
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CS          CurrentTerritoryCode = 52
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CU          CurrentTerritoryCode = 53
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CV          CurrentTerritoryCode = 54
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CW          CurrentTerritoryCode = 55
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CX          CurrentTerritoryCode = 56
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CY          CurrentTerritoryCode = 57
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_CZ          CurrentTerritoryCode = 58
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DE          CurrentTerritoryCode = 59
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DJ          CurrentTerritoryCode = 60
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DK          CurrentTerritoryCode = 61
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DM          CurrentTerritoryCode = 62
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DO          CurrentTerritoryCode = 63
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_DZ          CurrentTerritoryCode = 64
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_EC          CurrentTerritoryCode = 65
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_EE          CurrentTerritoryCode = 66
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_EG          CurrentTerritoryCode = 67
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_EH          CurrentTerritoryCode = 68
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ER          CurrentTerritoryCode = 69
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ES          CurrentTerritoryCode = 70
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ES_CE       CurrentTerritoryCode = 71
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ES_CN       CurrentTerritoryCode = 72
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ES_ML       CurrentTerritoryCode = 73
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ET          CurrentTerritoryCode = 74
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FI          CurrentTerritoryCode = 75
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FJ          CurrentTerritoryCode = 76
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FK          CurrentTerritoryCode = 77
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FM          CurrentTerritoryCode = 78
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FO          CurrentTerritoryCode = 79
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_FR          CurrentTerritoryCode = 80
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GA          CurrentTerritoryCode = 81
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GB          CurrentTerritoryCode = 82
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GD          CurrentTerritoryCode = 83
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GE          CurrentTerritoryCode = 84
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GF          CurrentTerritoryCode = 85
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GG          CurrentTerritoryCode = 86
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GH          CurrentTerritoryCode = 87
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GI          CurrentTerritoryCode = 88
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GL          CurrentTerritoryCode = 89
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GM          CurrentTerritoryCode = 90
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GN          CurrentTerritoryCode = 91
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GP          CurrentTerritoryCode = 92
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GQ          CurrentTerritoryCode = 93
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GR          CurrentTerritoryCode = 94
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GS          CurrentTerritoryCode = 95
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GT          CurrentTerritoryCode = 96
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GU          CurrentTerritoryCode = 97
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GW          CurrentTerritoryCode = 98
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_GY          CurrentTerritoryCode = 99
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HK          CurrentTerritoryCode = 100
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HM          CurrentTerritoryCode = 101
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HN          CurrentTerritoryCode = 102
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HR          CurrentTerritoryCode = 103
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HT          CurrentTerritoryCode = 104
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_HU          CurrentTerritoryCode = 105
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ID          CurrentTerritoryCode = 106
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IE          CurrentTerritoryCode = 107
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IL          CurrentTerritoryCode = 108
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IM          CurrentTerritoryCode = 109
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IN          CurrentTerritoryCode = 110
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IO          CurrentTerritoryCode = 111
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IQ          CurrentTerritoryCode = 112
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IR          CurrentTerritoryCode = 113
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IS          CurrentTerritoryCode = 114
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_IT          CurrentTerritoryCode = 115
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_JE          CurrentTerritoryCode = 116
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_JM          CurrentTerritoryCode = 117
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_JO          CurrentTerritoryCode = 118
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_JP          CurrentTerritoryCode = 119
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KE          CurrentTerritoryCode = 120
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KG          CurrentTerritoryCode = 121
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KH          CurrentTerritoryCode = 122
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KI          CurrentTerritoryCode = 123
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KM          CurrentTerritoryCode = 124
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KN          CurrentTerritoryCode = 125
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KP          CurrentTerritoryCode = 126
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KR          CurrentTerritoryCode = 127
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KW          CurrentTerritoryCode = 128
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KY          CurrentTerritoryCode = 129
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_KZ          CurrentTerritoryCode = 130
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LA          CurrentTerritoryCode = 131
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LB          CurrentTerritoryCode = 132
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LC          CurrentTerritoryCode = 133
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LI          CurrentTerritoryCode = 134
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LK          CurrentTerritoryCode = 135
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LR          CurrentTerritoryCode = 136
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LS          CurrentTerritoryCode = 137
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LT          CurrentTerritoryCode = 138
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LU          CurrentTerritoryCode = 139
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LV          CurrentTerritoryCode = 140
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_LY          CurrentTerritoryCode = 141
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MA          CurrentTerritoryCode = 142
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MC          CurrentTerritoryCode = 143
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MD          CurrentTerritoryCode = 144
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ME          CurrentTerritoryCode = 145
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MF          CurrentTerritoryCode = 146
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MG          CurrentTerritoryCode = 147
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MH          CurrentTerritoryCode = 148
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MK          CurrentTerritoryCode = 149
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ML          CurrentTerritoryCode = 150
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MM          CurrentTerritoryCode = 151
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MN          CurrentTerritoryCode = 152
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MO          CurrentTerritoryCode = 153
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MP          CurrentTerritoryCode = 154
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MQ          CurrentTerritoryCode = 155
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MR          CurrentTerritoryCode = 156
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MS          CurrentTerritoryCode = 157
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MT          CurrentTerritoryCode = 158
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MU          CurrentTerritoryCode = 159
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MV          CurrentTerritoryCode = 160
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MW          CurrentTerritoryCode = 161
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MX          CurrentTerritoryCode = 162
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MY          CurrentTerritoryCode = 163
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_MZ          CurrentTerritoryCode = 164
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NA          CurrentTerritoryCode = 165
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NC          CurrentTerritoryCode = 166
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NE          CurrentTerritoryCode = 167
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NF          CurrentTerritoryCode = 168
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NG          CurrentTerritoryCode = 169
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NI          CurrentTerritoryCode = 170
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NL          CurrentTerritoryCode = 171
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NO          CurrentTerritoryCode = 172
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NP          CurrentTerritoryCode = 173
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NR          CurrentTerritoryCode = 174
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NU          CurrentTerritoryCode = 175
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_NZ          CurrentTerritoryCode = 176
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_OM          CurrentTerritoryCode = 177
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PA          CurrentTerritoryCode = 178
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PE          CurrentTerritoryCode = 179
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PF          CurrentTerritoryCode = 180
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PG          CurrentTerritoryCode = 181
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PH          CurrentTerritoryCode = 182
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PK          CurrentTerritoryCode = 183
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PL          CurrentTerritoryCode = 184
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PM          CurrentTerritoryCode = 185
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PN          CurrentTerritoryCode = 186
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PR          CurrentTerritoryCode = 187
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PS          CurrentTerritoryCode = 188
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PT          CurrentTerritoryCode = 189
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PW          CurrentTerritoryCode = 190
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_PY          CurrentTerritoryCode = 191
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_QA          CurrentTerritoryCode = 192
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RE          CurrentTerritoryCode = 193
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RO          CurrentTerritoryCode = 194
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RS          CurrentTerritoryCode = 195
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RU          CurrentTerritoryCode = 196
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_RW          CurrentTerritoryCode = 197
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SA          CurrentTerritoryCode = 198
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SB          CurrentTerritoryCode = 199
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SC          CurrentTerritoryCode = 200
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SD          CurrentTerritoryCode = 201
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SE          CurrentTerritoryCode = 202
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SG          CurrentTerritoryCode = 203
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SH          CurrentTerritoryCode = 204
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SI          CurrentTerritoryCode = 205
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SJ          CurrentTerritoryCode = 206
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SK          CurrentTerritoryCode = 207
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SL          CurrentTerritoryCode = 208
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SM          CurrentTerritoryCode = 209
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SN          CurrentTerritoryCode = 210
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SO          CurrentTerritoryCode = 211
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SR          CurrentTerritoryCode = 212
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SS          CurrentTerritoryCode = 213
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ST          CurrentTerritoryCode = 214
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SV          CurrentTerritoryCode = 215
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SX          CurrentTerritoryCode = 216
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SY          CurrentTerritoryCode = 217
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_SZ          CurrentTerritoryCode = 218
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TC          CurrentTerritoryCode = 219
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TD          CurrentTerritoryCode = 220
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TF          CurrentTerritoryCode = 221
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TG          CurrentTerritoryCode = 222
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TH          CurrentTerritoryCode = 223
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TJ          CurrentTerritoryCode = 224
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TK          CurrentTerritoryCode = 225
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TL          CurrentTerritoryCode = 226
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TM          CurrentTerritoryCode = 227
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TN          CurrentTerritoryCode = 228
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TO          CurrentTerritoryCode = 229
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TR          CurrentTerritoryCode = 230
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TT          CurrentTerritoryCode = 231
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TV          CurrentTerritoryCode = 232
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TW          CurrentTerritoryCode = 233
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_TZ          CurrentTerritoryCode = 234
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UA          CurrentTerritoryCode = 235
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UG          CurrentTerritoryCode = 236
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UM          CurrentTerritoryCode = 237
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_US          CurrentTerritoryCode = 238
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UY          CurrentTerritoryCode = 239
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_UZ          CurrentTerritoryCode = 240
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VA          CurrentTerritoryCode = 241
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VC          CurrentTerritoryCode = 242
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VE          CurrentTerritoryCode = 243
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VG          CurrentTerritoryCode = 244
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VI          CurrentTerritoryCode = 245
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VN          CurrentTerritoryCode = 246
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_VU          CurrentTerritoryCode = 247
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_WF          CurrentTerritoryCode = 248
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_WS          CurrentTerritoryCode = 249
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_YE          CurrentTerritoryCode = 250
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_YT          CurrentTerritoryCode = 251
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ZA          CurrentTerritoryCode = 252
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ZM          CurrentTerritoryCode = 253
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_ZW          CurrentTerritoryCode = 254
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_4         CurrentTerritoryCode = 255
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_8         CurrentTerritoryCode = 256
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_12        CurrentTerritoryCode = 257
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_20        CurrentTerritoryCode = 258
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_24        CurrentTerritoryCode = 259
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_28        CurrentTerritoryCode = 260
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_31        CurrentTerritoryCode = 261
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_32        CurrentTerritoryCode = 262
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_36        CurrentTerritoryCode = 263
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_40        CurrentTerritoryCode = 264
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_44        CurrentTerritoryCode = 265
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_48        CurrentTerritoryCode = 266
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_50        CurrentTerritoryCode = 267
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_51        CurrentTerritoryCode = 268
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_52        CurrentTerritoryCode = 269
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_56        CurrentTerritoryCode = 270
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_64        CurrentTerritoryCode = 271
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_68        CurrentTerritoryCode = 272
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_70        CurrentTerritoryCode = 273
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_72        CurrentTerritoryCode = 274
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_76        CurrentTerritoryCode = 275
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_84        CurrentTerritoryCode = 276
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_90        CurrentTerritoryCode = 277
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_96        CurrentTerritoryCode = 278
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_100       CurrentTerritoryCode = 279
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_104       CurrentTerritoryCode = 280
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_108       CurrentTerritoryCode = 281
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_112       CurrentTerritoryCode = 282
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_116       CurrentTerritoryCode = 283
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_120       CurrentTerritoryCode = 284
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_124       CurrentTerritoryCode = 285
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_132       CurrentTerritoryCode = 286
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_140       CurrentTerritoryCode = 287
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_144       CurrentTerritoryCode = 288
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_148       CurrentTerritoryCode = 289
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_152       CurrentTerritoryCode = 290
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_156       CurrentTerritoryCode = 291
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_158       CurrentTerritoryCode = 292
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_170       CurrentTerritoryCode = 293
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_174       CurrentTerritoryCode = 294
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_178       CurrentTerritoryCode = 295
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_180       CurrentTerritoryCode = 296
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_188       CurrentTerritoryCode = 297
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_191       CurrentTerritoryCode = 298
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_192       CurrentTerritoryCode = 299
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_196       CurrentTerritoryCode = 300
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_200       CurrentTerritoryCode = 301
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_203       CurrentTerritoryCode = 302
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_204       CurrentTerritoryCode = 303
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_208       CurrentTerritoryCode = 304
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_212       CurrentTerritoryCode = 305
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_214       CurrentTerritoryCode = 306
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_218       CurrentTerritoryCode = 307
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_222       CurrentTerritoryCode = 308
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_226       CurrentTerritoryCode = 309
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_230       CurrentTerritoryCode = 310
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_231       CurrentTerritoryCode = 311
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_232       CurrentTerritoryCode = 312
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_233       CurrentTerritoryCode = 313
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_242       CurrentTerritoryCode = 314
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_246       CurrentTerritoryCode = 315
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_250       CurrentTerritoryCode = 316
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_258       CurrentTerritoryCode = 317
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_262       CurrentTerritoryCode = 318
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_266       CurrentTerritoryCode = 319
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_268       CurrentTerritoryCode = 320
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_270       CurrentTerritoryCode = 321
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_276       CurrentTerritoryCode = 322
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_278       CurrentTerritoryCode = 323
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_280       CurrentTerritoryCode = 324
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_288       CurrentTerritoryCode = 325
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_296       CurrentTerritoryCode = 326
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_300       CurrentTerritoryCode = 327
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_308       CurrentTerritoryCode = 328
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_320       CurrentTerritoryCode = 329
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_324       CurrentTerritoryCode = 330
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_328       CurrentTerritoryCode = 331
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_332       CurrentTerritoryCode = 332
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_336       CurrentTerritoryCode = 333
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_340       CurrentTerritoryCode = 334
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_344       CurrentTerritoryCode = 335
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_348       CurrentTerritoryCode = 336
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_352       CurrentTerritoryCode = 337
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_356       CurrentTerritoryCode = 338
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_360       CurrentTerritoryCode = 339
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_364       CurrentTerritoryCode = 340
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_368       CurrentTerritoryCode = 341
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_372       CurrentTerritoryCode = 342
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_376       CurrentTerritoryCode = 343
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_380       CurrentTerritoryCode = 344
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_384       CurrentTerritoryCode = 345
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_388       CurrentTerritoryCode = 346
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_392       CurrentTerritoryCode = 347
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_398       CurrentTerritoryCode = 348
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_400       CurrentTerritoryCode = 349
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_404       CurrentTerritoryCode = 350
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_408       CurrentTerritoryCode = 351
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_410       CurrentTerritoryCode = 352
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_414       CurrentTerritoryCode = 353
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_417       CurrentTerritoryCode = 354
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_418       CurrentTerritoryCode = 355
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_422       CurrentTerritoryCode = 356
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_426       CurrentTerritoryCode = 357
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_428       CurrentTerritoryCode = 358
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_430       CurrentTerritoryCode = 359
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_434       CurrentTerritoryCode = 360
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_438       CurrentTerritoryCode = 361
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_440       CurrentTerritoryCode = 362
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_442       CurrentTerritoryCode = 363
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_450       CurrentTerritoryCode = 364
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_454       CurrentTerritoryCode = 365
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_458       CurrentTerritoryCode = 366
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_462       CurrentTerritoryCode = 367
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_466       CurrentTerritoryCode = 368
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_470       CurrentTerritoryCode = 369
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_478       CurrentTerritoryCode = 370
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_480       CurrentTerritoryCode = 371
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_484       CurrentTerritoryCode = 372
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_492       CurrentTerritoryCode = 373
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_496       CurrentTerritoryCode = 374
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_498       CurrentTerritoryCode = 375
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_499       CurrentTerritoryCode = 376
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_504       CurrentTerritoryCode = 377
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_508       CurrentTerritoryCode = 378
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_512       CurrentTerritoryCode = 379
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_516       CurrentTerritoryCode = 380
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_520       CurrentTerritoryCode = 381
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_524       CurrentTerritoryCode = 382
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_528       CurrentTerritoryCode = 383
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_540       CurrentTerritoryCode = 384
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_548       CurrentTerritoryCode = 385
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_554       CurrentTerritoryCode = 386
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_558       CurrentTerritoryCode = 387
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_562       CurrentTerritoryCode = 388
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_566       CurrentTerritoryCode = 389
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_578       CurrentTerritoryCode = 390
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_583       CurrentTerritoryCode = 391
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_584       CurrentTerritoryCode = 392
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_585       CurrentTerritoryCode = 393
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_586       CurrentTerritoryCode = 394
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_591       CurrentTerritoryCode = 395
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_598       CurrentTerritoryCode = 396
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_600       CurrentTerritoryCode = 397
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_604       CurrentTerritoryCode = 398
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_608       CurrentTerritoryCode = 399
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_616       CurrentTerritoryCode = 400
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_620       CurrentTerritoryCode = 401
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_624       CurrentTerritoryCode = 402
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_626       CurrentTerritoryCode = 403
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_630       CurrentTerritoryCode = 404
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_634       CurrentTerritoryCode = 405
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_642       CurrentTerritoryCode = 406
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_643       CurrentTerritoryCode = 407
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_646       CurrentTerritoryCode = 408
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_659       CurrentTerritoryCode = 409
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_662       CurrentTerritoryCode = 410
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_670       CurrentTerritoryCode = 411
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_674       CurrentTerritoryCode = 412
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_678       CurrentTerritoryCode = 413
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_682       CurrentTerritoryCode = 414
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_686       CurrentTerritoryCode = 415
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_688       CurrentTerritoryCode = 416
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_690       CurrentTerritoryCode = 417
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_694       CurrentTerritoryCode = 418
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_702       CurrentTerritoryCode = 419
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_703       CurrentTerritoryCode = 420
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_704       CurrentTerritoryCode = 421
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_705       CurrentTerritoryCode = 422
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_706       CurrentTerritoryCode = 423
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_710       CurrentTerritoryCode = 424
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_716       CurrentTerritoryCode = 425
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_720       CurrentTerritoryCode = 426
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_724       CurrentTerritoryCode = 427
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_728       CurrentTerritoryCode = 428
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_729       CurrentTerritoryCode = 429
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_732       CurrentTerritoryCode = 430
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_736       CurrentTerritoryCode = 431
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_740       CurrentTerritoryCode = 432
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_748       CurrentTerritoryCode = 433
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_752       CurrentTerritoryCode = 434
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_756       CurrentTerritoryCode = 435
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_760       CurrentTerritoryCode = 436
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_762       CurrentTerritoryCode = 437
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_764       CurrentTerritoryCode = 438
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_768       CurrentTerritoryCode = 439
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_776       CurrentTerritoryCode = 440
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_780       CurrentTerritoryCode = 441
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_784       CurrentTerritoryCode = 442
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_788       CurrentTerritoryCode = 443
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_792       CurrentTerritoryCode = 444
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_795       CurrentTerritoryCode = 445
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_798       CurrentTerritoryCode = 446
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_800       CurrentTerritoryCode = 447
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_804       CurrentTerritoryCode = 448
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_807       CurrentTerritoryCode = 449
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_810       CurrentTerritoryCode = 450
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_818       CurrentTerritoryCode = 451
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_826       CurrentTerritoryCode = 452
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_834       CurrentTerritoryCode = 453
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_840       CurrentTerritoryCode = 454
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_854       CurrentTerritoryCode = 455
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_858       CurrentTerritoryCode = 456
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_860       CurrentTerritoryCode = 457
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_862       CurrentTerritoryCode = 458
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_882       CurrentTerritoryCode = 459
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_886       CurrentTerritoryCode = 460
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_887       CurrentTerritoryCode = 461
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_890       CurrentTerritoryCode = 462
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_891       CurrentTerritoryCode = 463
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_894       CurrentTerritoryCode = 464
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2100      CurrentTerritoryCode = 465
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2101      CurrentTerritoryCode = 466
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2102      CurrentTerritoryCode = 467
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2103      CurrentTerritoryCode = 468
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2104      CurrentTerritoryCode = 469
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2105      CurrentTerritoryCode = 470
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2106      CurrentTerritoryCode = 471
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2107      CurrentTerritoryCode = 472
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2108      CurrentTerritoryCode = 473
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2109      CurrentTerritoryCode = 474
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2110      CurrentTerritoryCode = 475
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2111      CurrentTerritoryCode = 476
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2112      CurrentTerritoryCode = 477
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2113      CurrentTerritoryCode = 478
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2114      CurrentTerritoryCode = 479
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2115      CurrentTerritoryCode = 480
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2116      CurrentTerritoryCode = 481
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2117      CurrentTerritoryCode = 482
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2118      CurrentTerritoryCode = 483
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2119      CurrentTerritoryCode = 484
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2120      CurrentTerritoryCode = 485
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2121      CurrentTerritoryCode = 486
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2122      CurrentTerritoryCode = 487
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2123      CurrentTerritoryCode = 488
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2124      CurrentTerritoryCode = 489
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2125      CurrentTerritoryCode = 490
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2126      CurrentTerritoryCode = 491
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2127      CurrentTerritoryCode = 492
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2128      CurrentTerritoryCode = 493
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2129      CurrentTerritoryCode = 494
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2130      CurrentTerritoryCode = 495
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2131      CurrentTerritoryCode = 496
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2132      CurrentTerritoryCode = 497
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2133      CurrentTerritoryCode = 498
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2134      CurrentTerritoryCode = 499
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_2136      CurrentTerritoryCode = 500
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_XK          CurrentTerritoryCode = 501
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_WORLDWIDE   CurrentTerritoryCode = 502
	CurrentTerritoryCode_CURRENT_TERRITORY_CODE_E_446       CurrentTerritoryCode = 503
)

// Enum value maps for CurrentTerritoryCode.
var (
	CurrentTerritoryCode_name = map[int32]string{
		0:   "CURRENT_TERRITORY_CODE_UNSPECIFIED",
		1:   "CURRENT_TERRITORY_CODE_AD",
		2:   "CURRENT_TERRITORY_CODE_AE",
		3:   "CURRENT_TERRITORY_CODE_AF",
		4:   "CURRENT_TERRITORY_CODE_AG",
		5:   "CURRENT_TERRITORY_CODE_AI",
		6:   "CURRENT_TERRITORY_CODE_AL",
		7:   "CURRENT_TERRITORY_CODE_AM",
		8:   "CURRENT_TERRITORY_CODE_AN",
		9:   "CURRENT_TERRITORY_CODE_AO",
		10:  "CURRENT_TERRITORY_CODE_AQ",
		11:  "CURRENT_TERRITORY_CODE_AR",
		12:  "CURRENT_TERRITORY_CODE_AS",
		13:  "CURRENT_TERRITORY_CODE_AT",
		14:  "CURRENT_TERRITORY_CODE_AU",
		15:  "CURRENT_TERRITORY_CODE_AW",
		16:  "CURRENT_TERRITORY_CODE_AX",
		17:  "CURRENT_TERRITORY_CODE_AZ",
		18:  "CURRENT_TERRITORY_CODE_BA",
		19:  "CURRENT_TERRITORY_CODE_BB",
		20:  "CURRENT_TERRITORY_CODE_BD",
		21:  "CURRENT_TERRITORY_CODE_BE",
		22:  "CURRENT_TERRITORY_CODE_BF",
		23:  "CURRENT_TERRITORY_CODE_BG",
		24:  "CURRENT_TERRITORY_CODE_BH",
		25:  "CURRENT_TERRITORY_CODE_BI",
		26:  "CURRENT_TERRITORY_CODE_BJ",
		27:  "CURRENT_TERRITORY_CODE_BL",
		28:  "CURRENT_TERRITORY_CODE_BM",
		29:  "CURRENT_TERRITORY_CODE_BN",
		30:  "CURRENT_TERRITORY_CODE_BO",
		31:  "CURRENT_TERRITORY_CODE_BQ",
		32:  "CURRENT_TERRITORY_CODE_BR",
		33:  "CURRENT_TERRITORY_CODE_BS",
		34:  "CURRENT_TERRITORY_CODE_BT",
		35:  "CURRENT_TERRITORY_CODE_BV",
		36:  "CURRENT_TERRITORY_CODE_BW",
		37:  "CURRENT_TERRITORY_CODE_BY",
		38:  "CURRENT_TERRITORY_CODE_BZ",
		39:  "CURRENT_TERRITORY_CODE_CA",
		40:  "CURRENT_TERRITORY_CODE_CC",
		41:  "CURRENT_TERRITORY_CODE_CD",
		42:  "CURRENT_TERRITORY_CODE_CF",
		43:  "CURRENT_TERRITORY_CODE_CG",
		44:  "CURRENT_TERRITORY_CODE_CH",
		45:  "CURRENT_TERRITORY_CODE_CI",
		46:  "CURRENT_TERRITORY_CODE_CK",
		47:  "CURRENT_TERRITORY_CODE_CL",
		48:  "CURRENT_TERRITORY_CODE_CM",
		49:  "CURRENT_TERRITORY_CODE_CN",
		50:  "CURRENT_TERRITORY_CODE_CO",
		51:  "CURRENT_TERRITORY_CODE_CR",
		52:  "CURRENT_TERRITORY_CODE_CS",
		53:  "CURRENT_TERRITORY_CODE_CU",
		54:  "CURRENT_TERRITORY_CODE_CV",
		55:  "CURRENT_TERRITORY_CODE_CW",
		56:  "CURRENT_TERRITORY_CODE_CX",
		57:  "CURRENT_TERRITORY_CODE_CY",
		58:  "CURRENT_TERRITORY_CODE_CZ",
		59:  "CURRENT_TERRITORY_CODE_DE",
		60:  "CURRENT_TERRITORY_CODE_DJ",
		61:  "CURRENT_TERRITORY_CODE_DK",
		62:  "CURRENT_TERRITORY_CODE_DM",
		63:  "CURRENT_TERRITORY_CODE_DO",
		64:  "CURRENT_TERRITORY_CODE_DZ",
		65:  "CURRENT_TERRITORY_CODE_EC",
		66:  "CURRENT_TERRITORY_CODE_EE",
		67:  "CURRENT_TERRITORY_CODE_EG",
		68:  "CURRENT_TERRITORY_CODE_EH",
		69:  "CURRENT_TERRITORY_CODE_ER",
		70:  "CURRENT_TERRITORY_CODE_ES",
		71:  "CURRENT_TERRITORY_CODE_ES_CE",
		72:  "CURRENT_TERRITORY_CODE_ES_CN",
		73:  "CURRENT_TERRITORY_CODE_ES_ML",
		74:  "CURRENT_TERRITORY_CODE_ET",
		75:  "CURRENT_TERRITORY_CODE_FI",
		76:  "CURRENT_TERRITORY_CODE_FJ",
		77:  "CURRENT_TERRITORY_CODE_FK",
		78:  "CURRENT_TERRITORY_CODE_FM",
		79:  "CURRENT_TERRITORY_CODE_FO",
		80:  "CURRENT_TERRITORY_CODE_FR",
		81:  "CURRENT_TERRITORY_CODE_GA",
		82:  "CURRENT_TERRITORY_CODE_GB",
		83:  "CURRENT_TERRITORY_CODE_GD",
		84:  "CURRENT_TERRITORY_CODE_GE",
		85:  "CURRENT_TERRITORY_CODE_GF",
		86:  "CURRENT_TERRITORY_CODE_GG",
		87:  "CURRENT_TERRITORY_CODE_GH",
		88:  "CURRENT_TERRITORY_CODE_GI",
		89:  "CURRENT_TERRITORY_CODE_GL",
		90:  "CURRENT_TERRITORY_CODE_GM",
		91:  "CURRENT_TERRITORY_CODE_GN",
		92:  "CURRENT_TERRITORY_CODE_GP",
		93:  "CURRENT_TERRITORY_CODE_GQ",
		94:  "CURRENT_TERRITORY_CODE_GR",
		95:  "CURRENT_TERRITORY_CODE_GS",
		96:  "CURRENT_TERRITORY_CODE_GT",
		97:  "CURRENT_TERRITORY_CODE_GU",
		98:  "CURRENT_TERRITORY_CODE_GW",
		99:  "CURRENT_TERRITORY_CODE_GY",
		100: "CURRENT_TERRITORY_CODE_HK",
		101: "CURRENT_TERRITORY_CODE_HM",
		102: "CURRENT_TERRITORY_CODE_HN",
		103: "CURRENT_TERRITORY_CODE_HR",
		104: "CURRENT_TERRITORY_CODE_HT",
		105: "CURRENT_TERRITORY_CODE_HU",
		106: "CURRENT_TERRITORY_CODE_ID",
		107: "CURRENT_TERRITORY_CODE_IE",
		108: "CURRENT_TERRITORY_CODE_IL",
		109: "CURRENT_TERRITORY_CODE_IM",
		110: "CURRENT_TERRITORY_CODE_IN",
		111: "CURRENT_TERRITORY_CODE_IO",
		112: "CURRENT_TERRITORY_CODE_IQ",
		113: "CURRENT_TERRITORY_CODE_IR",
		114: "CURRENT_TERRITORY_CODE_IS",
		115: "CURRENT_TERRITORY_CODE_IT",
		116: "CURRENT_TERRITORY_CODE_JE",
		117: "CURRENT_TERRITORY_CODE_JM",
		118: "CURRENT_TERRITORY_CODE_JO",
		119: "CURRENT_TERRITORY_CODE_JP",
		120: "CURRENT_TERRITORY_CODE_KE",
		121: "CURRENT_TERRITORY_CODE_KG",
		122: "CURRENT_TERRITORY_CODE_KH",
		123: "CURRENT_TERRITORY_CODE_KI",
		124: "CURRENT_TERRITORY_CODE_KM",
		125: "CURRENT_TERRITORY_CODE_KN",
		126: "CURRENT_TERRITORY_CODE_KP",
		127: "CURRENT_TERRITORY_CODE_KR",
		128: "CURRENT_TERRITORY_CODE_KW",
		129: "CURRENT_TERRITORY_CODE_KY",
		130: "CURRENT_TERRITORY_CODE_KZ",
		131: "CURRENT_TERRITORY_CODE_LA",
		132: "CURRENT_TERRITORY_CODE_LB",
		133: "CURRENT_TERRITORY_CODE_LC",
		134: "CURRENT_TERRITORY_CODE_LI",
		135: "CURRENT_TERRITORY_CODE_LK",
		136: "CURRENT_TERRITORY_CODE_LR",
		137: "CURRENT_TERRITORY_CODE_LS",
		138: "CURRENT_TERRITORY_CODE_LT",
		139: "CURRENT_TERRITORY_CODE_LU",
		140: "CURRENT_TERRITORY_CODE_LV",
		141: "CURRENT_TERRITORY_CODE_LY",
		142: "CURRENT_TERRITORY_CODE_MA",
		143: "CURRENT_TERRITORY_CODE_MC",
		144: "CURRENT_TERRITORY_CODE_MD",
		145: "CURRENT_TERRITORY_CODE_ME",
		146: "CURRENT_TERRITORY_CODE_MF",
		147: "CURRENT_TERRITORY_CODE_MG",
		148: "CURRENT_TERRITORY_CODE_MH",
		149: "CURRENT_TERRITORY_CODE_MK",
		150: "CURRENT_TERRITORY_CODE_ML",
		151: "CURRENT_TERRITORY_CODE_MM",
		152: "CURRENT_TERRITORY_CODE_MN",
		153: "CURRENT_TERRITORY_CODE_MO",
		154: "CURRENT_TERRITORY_CODE_MP",
		155: "CURRENT_TERRITORY_CODE_MQ",
		156: "CURRENT_TERRITORY_CODE_MR",
		157: "CURRENT_TERRITORY_CODE_MS",
		158: "CURRENT_TERRITORY_CODE_MT",
		159: "CURRENT_TERRITORY_CODE_MU",
		160: "CURRENT_TERRITORY_CODE_MV",
		161: "CURRENT_TERRITORY_CODE_MW",
		162: "CURRENT_TERRITORY_CODE_MX",
		163: "CURRENT_TERRITORY_CODE_MY",
		164: "CURRENT_TERRITORY_CODE_MZ",
		165: "CURRENT_TERRITORY_CODE_NA",
		166: "CURRENT_TERRITORY_CODE_NC",
		167: "CURRENT_TERRITORY_CODE_NE",
		168: "CURRENT_TERRITORY_CODE_NF",
		169: "CURRENT_TERRITORY_CODE_NG",
		170: "CURRENT_TERRITORY_CODE_NI",
		171: "CURRENT_TERRITORY_CODE_NL",
		172: "CURRENT_TERRITORY_CODE_NO",
		173: "CURRENT_TERRITORY_CODE_NP",
		174: "CURRENT_TERRITORY_CODE_NR",
		175: "CURRENT_TERRITORY_CODE_NU",
		176: "CURRENT_TERRITORY_CODE_NZ",
		177: "CURRENT_TERRITORY_CODE_OM",
		178: "CURRENT_TERRITORY_CODE_PA",
		179: "CURRENT_TERRITORY_CODE_PE",
		180: "CURRENT_TERRITORY_CODE_PF",
		181: "CURRENT_TERRITORY_CODE_PG",
		182: "CURRENT_TERRITORY_CODE_PH",
		183: "CURRENT_TERRITORY_CODE_PK",
		184: "CURRENT_TERRITORY_CODE_PL",
		185: "CURRENT_TERRITORY_CODE_PM",
		186: "CURRENT_TERRITORY_CODE_PN",
		187: "CURRENT_TERRITORY_CODE_PR",
		188: "CURRENT_TERRITORY_CODE_PS",
		189: "CURRENT_TERRITORY_CODE_PT",
		190: "CURRENT_TERRITORY_CODE_PW",
		191: "CURRENT_TERRITORY_CODE_PY",
		192: "CURRENT_TERRITORY_CODE_QA",
		193: "CURRENT_TERRITORY_CODE_RE",
		194: "CURRENT_TERRITORY_CODE_RO",
		195: "CURRENT_TERRITORY_CODE_RS",
		196: "CURRENT_TERRITORY_CODE_RU",
		197: "CURRENT_TERRITORY_CODE_RW",
		198: "CURRENT_TERRITORY_CODE_SA",
		199: "CURRENT_TERRITORY_CODE_SB",
		200: "CURRENT_TERRITORY_CODE_SC",
		201: "CURRENT_TERRITORY_CODE_SD",
		202: "CURRENT_TERRITORY_CODE_SE",
		203: "CURRENT_TERRITORY_CODE_SG",
		204: "CURRENT_TERRITORY_CODE_SH",
		205: "CURRENT_TERRITORY_CODE_SI",
		206: "CURRENT_TERRITORY_CODE_SJ",
		207: "CURRENT_TERRITORY_CODE_SK",
		208: "CURRENT_TERRITORY_CODE_SL",
		209: "CURRENT_TERRITORY_CODE_SM",
		210: "CURRENT_TERRITORY_CODE_SN",
		211: "CURRENT_TERRITORY_CODE_SO",
		212: "CURRENT_TERRITORY_CODE_SR",
		213: "CURRENT_TERRITORY_CODE_SS",
		214: "CURRENT_TERRITORY_CODE_ST",
		215: "CURRENT_TERRITORY_CODE_SV",
		216: "CURRENT_TERRITORY_CODE_SX",
		217: "CURRENT_TERRITORY_CODE_SY",
		218: "CURRENT_TERRITORY_CODE_SZ",
		219: "CURRENT_TERRITORY_CODE_TC",
		220: "CURRENT_TERRITORY_CODE_TD",
		221: "CURRENT_TERRITORY_CODE_TF",
		222: "CURRENT_TERRITORY_CODE_TG",
		223: "CURRENT_TERRITORY_CODE_TH",
		224: "CURRENT_TERRITORY_CODE_TJ",
		225: "CURRENT_TERRITORY_CODE_TK",
		226: "CURRENT_TERRITORY_CODE_TL",
		227: "CURRENT_TERRITORY_CODE_TM",
		228: "CURRENT_TERRITORY_CODE_TN",
		229: "CURRENT_TERRITORY_CODE_TO",
		230: "CURRENT_TERRITORY_CODE_TR",
		231: "CURRENT_TERRITORY_CODE_TT",
		232: "CURRENT_TERRITORY_CODE_TV",
		233: "CURRENT_TERRITORY_CODE_TW",
		234: "CURRENT_TERRITORY_CODE_TZ",
		235: "CURRENT_TERRITORY_CODE_UA",
		236: "CURRENT_TERRITORY_CODE_UG",
		237: "CURRENT_TERRITORY_CODE_UM",
		238: "CURRENT_TERRITORY_CODE_US",
		239: "CURRENT_TERRITORY_CODE_UY",
		240: "CURRENT_TERRITORY_CODE_UZ",
		241: "CURRENT_TERRITORY_CODE_VA",
		242: "CURRENT_TERRITORY_CODE_VC",
		243: "CURRENT_TERRITORY_CODE_VE",
		244: "CURRENT_TERRITORY_CODE_VG",
		245: "CURRENT_TERRITORY_CODE_VI",
		246: "CURRENT_TERRITORY_CODE_VN",
		247: "CURRENT_TERRITORY_CODE_VU",
		248: "CURRENT_TERRITORY_CODE_WF",
		249: "CURRENT_TERRITORY_CODE_WS",
		250: "CURRENT_TERRITORY_CODE_YE",
		251: "CURRENT_TERRITORY_CODE_YT",
		252: "CURRENT_TERRITORY_CODE_ZA",
		253: "CURRENT_TERRITORY_CODE_ZM",
		254: "CURRENT_TERRITORY_CODE_ZW",
		255: "CURRENT_TERRITORY_CODE_E_4",
		256: "CURRENT_TERRITORY_CODE_E_8",
		257: "CURRENT_TERRITORY_CODE_E_12",
		258: "CURRENT_TERRITORY_CODE_E_20",
		259: "CURRENT_TERRITORY_CODE_E_24",
		260: "CURRENT_TERRITORY_CODE_E_28",
		261: "CURRENT_TERRITORY_CODE_E_31",
		262: "CURRENT_TERRITORY_CODE_E_32",
		263: "CURRENT_TERRITORY_CODE_E_36",
		264: "CURRENT_TERRITORY_CODE_E_40",
		265: "CURRENT_TERRITORY_CODE_E_44",
		266: "CURRENT_TERRITORY_CODE_E_48",
		267: "CURRENT_TERRITORY_CODE_E_50",
		268: "CURRENT_TERRITORY_CODE_E_51",
		269: "CURRENT_TERRITORY_CODE_E_52",
		270: "CURRENT_TERRITORY_CODE_E_56",
		271: "CURRENT_TERRITORY_CODE_E_64",
		272: "CURRENT_TERRITORY_CODE_E_68",
		273: "CURRENT_TERRITORY_CODE_E_70",
		274: "CURRENT_TERRITORY_CODE_E_72",
		275: "CURRENT_TERRITORY_CODE_E_76",
		276: "CURRENT_TERRITORY_CODE_E_84",
		277: "CURRENT_TERRITORY_CODE_E_90",
		278: "CURRENT_TERRITORY_CODE_E_96",
		279: "CURRENT_TERRITORY_CODE_E_100",
		280: "CURRENT_TERRITORY_CODE_E_104",
		281: "CURRENT_TERRITORY_CODE_E_108",
		282: "CURRENT_TERRITORY_CODE_E_112",
		283: "CURRENT_TERRITORY_CODE_E_116",
		284: "CURRENT_TERRITORY_CODE_E_120",
		285: "CURRENT_TERRITORY_CODE_E_124",
		286: "CURRENT_TERRITORY_CODE_E_132",
		287: "CURRENT_TERRITORY_CODE_E_140",
		288: "CURRENT_TERRITORY_CODE_E_144",
		289: "CURRENT_TERRITORY_CODE_E_148",
		290: "CURRENT_TERRITORY_CODE_E_152",
		291: "CURRENT_TERRITORY_CODE_E_156",
		292: "CURRENT_TERRITORY_CODE_E_158",
		293: "CURRENT_TERRITORY_CODE_E_170",
		294: "CURRENT_TERRITORY_CODE_E_174",
		295: "CURRENT_TERRITORY_CODE_E_178",
		296: "CURRENT_TERRITORY_CODE_E_180",
		297: "CURRENT_TERRITORY_CODE_E_188",
		298: "CURRENT_TERRITORY_CODE_E_191",
		299: "CURRENT_TERRITORY_CODE_E_192",
		300: "CURRENT_TERRITORY_CODE_E_196",
		301: "CURRENT_TERRITORY_CODE_E_200",
		302: "CURRENT_TERRITORY_CODE_E_203",
		303: "CURRENT_TERRITORY_CODE_E_204",
		304: "CURRENT_TERRITORY_CODE_E_208",
		305: "CURRENT_TERRITORY_CODE_E_212",
		306: "CURRENT_TERRITORY_CODE_E_214",
		307: "CURRENT_TERRITORY_CODE_E_218",
		308: "CURRENT_TERRITORY_CODE_E_222",
		309: "CURRENT_TERRITORY_CODE_E_226",
		310: "CURRENT_TERRITORY_CODE_E_230",
		311: "CURRENT_TERRITORY_CODE_E_231",
		312: "CURRENT_TERRITORY_CODE_E_232",
		313: "CURRENT_TERRITORY_CODE_E_233",
		314: "CURRENT_TERRITORY_CODE_E_242",
		315: "CURRENT_TERRITORY_CODE_E_246",
		316: "CURRENT_TERRITORY_CODE_E_250",
		317: "CURRENT_TERRITORY_CODE_E_258",
		318: "CURRENT_TERRITORY_CODE_E_262",
		319: "CURRENT_TERRITORY_CODE_E_266",
		320: "CURRENT_TERRITORY_CODE_E_268",
		321: "CURRENT_TERRITORY_CODE_E_270",
		322: "CURRENT_TERRITORY_CODE_E_276",
		323: "CURRENT_TERRITORY_CODE_E_278",
		324: "CURRENT_TERRITORY_CODE_E_280",
		325: "CURRENT_TERRITORY_CODE_E_288",
		326: "CURRENT_TERRITORY_CODE_E_296",
		327: "CURRENT_TERRITORY_CODE_E_300",
		328: "CURRENT_TERRITORY_CODE_E_308",
		329: "CURRENT_TERRITORY_CODE_E_320",
		330: "CURRENT_TERRITORY_CODE_E_324",
		331: "CURRENT_TERRITORY_CODE_E_328",
		332: "CURRENT_TERRITORY_CODE_E_332",
		333: "CURRENT_TERRITORY_CODE_E_336",
		334: "CURRENT_TERRITORY_CODE_E_340",
		335: "CURRENT_TERRITORY_CODE_E_344",
		336: "CURRENT_TERRITORY_CODE_E_348",
		337: "CURRENT_TERRITORY_CODE_E_352",
		338: "CURRENT_TERRITORY_CODE_E_356",
		339: "CURRENT_TERRITORY_CODE_E_360",
		340: "CURRENT_TERRITORY_CODE_E_364",
		341: "CURRENT_TERRITORY_CODE_E_368",
		342: "CURRENT_TERRITORY_CODE_E_372",
		343: "CURRENT_TERRITORY_CODE_E_376",
		344: "CURRENT_TERRITORY_CODE_E_380",
		345: "CURRENT_TERRITORY_CODE_E_384",
		346: "CURRENT_TERRITORY_CODE_E_388",
		347: "CURRENT_TERRITORY_CODE_E_392",
		348: "CURRENT_TERRITORY_CODE_E_398",
		349: "CURRENT_TERRITORY_CODE_E_400",
		350: "CURRENT_TERRITORY_CODE_E_404",
		351: "CURRENT_TERRITORY_CODE_E_408",
		352: "CURRENT_TERRITORY_CODE_E_410",
		353: "CURRENT_TERRITORY_CODE_E_414",
		354: "CURRENT_TERRITORY_CODE_E_417",
		355: "CURRENT_TERRITORY_CODE_E_418",
		356: "CURRENT_TERRITORY_CODE_E_422",
		357: "CURRENT_TERRITORY_CODE_E_426",
		358: "CURRENT_TERRITORY_CODE_E_428",
		359: "CURRENT_TERRITORY_CODE_E_430",
		360: "CURRENT_TERRITORY_CODE_E_434",
		361: "CURRENT_TERRITORY_CODE_E_438",
		362: "CURRENT_TERRITORY_CODE_E_440",
		363: "CURRENT_TERRITORY_CODE_E_442",
		364: "CURRENT_TERRITORY_CODE_E_450",
		365: "CURRENT_TERRITORY_CODE_E_454",
		366: "CURRENT_TERRITORY_CODE_E_458",
		367: "CURRENT_TERRITORY_CODE_E_462",
		368: "CURRENT_TERRITORY_CODE_E_466",
		369: "CURRENT_TERRITORY_CODE_E_470",
		370: "CURRENT_TERRITORY_CODE_E_478",
		371: "CURRENT_TERRITORY_CODE_E_480",
		372: "CURRENT_TERRITORY_CODE_E_484",
		373: "CURRENT_TERRITORY_CODE_E_492",
		374: "CURRENT_TERRITORY_CODE_E_496",
		375: "CURRENT_TERRITORY_CODE_E_498",
		376: "CURRENT_TERRITORY_CODE_E_499",
		377: "CURRENT_TERRITORY_CODE_E_504",
		378: "CURRENT_TERRITORY_CODE_E_508",
		379: "CURRENT_TERRITORY_CODE_E_512",
		380: "CURRENT_TERRITORY_CODE_E_516",
		381: "CURRENT_TERRITORY_CODE_E_520",
		382: "CURRENT_TERRITORY_CODE_E_524",
		383: "CURRENT_TERRITORY_CODE_E_528",
		384: "CURRENT_TERRITORY_CODE_E_540",
		385: "CURRENT_TERRITORY_CODE_E_548",
		386: "CURRENT_TERRITORY_CODE_E_554",
		387: "CURRENT_TERRITORY_CODE_E_558",
		388: "CURRENT_TERRITORY_CODE_E_562",
		389: "CURRENT_TERRITORY_CODE_E_566",
		390: "CURRENT_TERRITORY_CODE_E_578",
		391: "CURRENT_TERRITORY_CODE_E_583",
		392: "CURRENT_TERRITORY_CODE_E_584",
		393: "CURRENT_TERRITORY_CODE_E_585",
		394: "CURRENT_TERRITORY_CODE_E_586",
		395: "CURRENT_TERRITORY_CODE_E_591",
		396: "CURRENT_TERRITORY_CODE_E_598",
		397: "CURRENT_TERRITORY_CODE_E_600",
		398: "CURRENT_TERRITORY_CODE_E_604",
		399: "CURRENT_TERRITORY_CODE_E_608",
		400: "CURRENT_TERRITORY_CODE_E_616",
		401: "CURRENT_TERRITORY_CODE_E_620",
		402: "CURRENT_TERRITORY_CODE_E_624",
		403: "CURRENT_TERRITORY_CODE_E_626",
		404: "CURRENT_TERRITORY_CODE_E_630",
		405: "CURRENT_TERRITORY_CODE_E_634",
		406: "CURRENT_TERRITORY_CODE_E_642",
		407: "CURRENT_TERRITORY_CODE_E_643",
		408: "CURRENT_TERRITORY_CODE_E_646",
		409: "CURRENT_TERRITORY_CODE_E_659",
		410: "CURRENT_TERRITORY_CODE_E_662",
		411: "CURRENT_TERRITORY_CODE_E_670",
		412: "CURRENT_TERRITORY_CODE_E_674",
		413: "CURRENT_TERRITORY_CODE_E_678",
		414: "CURRENT_TERRITORY_CODE_E_682",
		415: "CURRENT_TERRITORY_CODE_E_686",
		416: "CURRENT_TERRITORY_CODE_E_688",
		417: "CURRENT_TERRITORY_CODE_E_690",
		418: "CURRENT_TERRITORY_CODE_E_694",
		419: "CURRENT_TERRITORY_CODE_E_702",
		420: "CURRENT_TERRITORY_CODE_E_703",
		421: "CURRENT_TERRITORY_CODE_E_704",
		422: "CURRENT_TERRITORY_CODE_E_705",
		423: "CURRENT_TERRITORY_CODE_E_706",
		424: "CURRENT_TERRITORY_CODE_E_710",
		425: "CURRENT_TERRITORY_CODE_E_716",
		426: "CURRENT_TERRITORY_CODE_E_720",
		427: "CURRENT_TERRITORY_CODE_E_724",
		428: "CURRENT_TERRITORY_CODE_E_728",
		429: "CURRENT_TERRITORY_CODE_E_729",
		430: "CURRENT_TERRITORY_CODE_E_732",
		431: "CURRENT_TERRITORY_CODE_E_736",
		432: "CURRENT_TERRITORY_CODE_E_740",
		433: "CURRENT_TERRITORY_CODE_E_748",
		434: "CURRENT_TERRITORY_CODE_E_752",
		435: "CURRENT_TERRITORY_CODE_E_756",
		436: "CURRENT_TERRITORY_CODE_E_760",
		437: "CURRENT_TERRITORY_CODE_E_762",
		438: "CURRENT_TERRITORY_CODE_E_764",
		439: "CURRENT_TERRITORY_CODE_E_768",
		440: "CURRENT_TERRITORY_CODE_E_776",
		441: "CURRENT_TERRITORY_CODE_E_780",
		442: "CURRENT_TERRITORY_CODE_E_784",
		443: "CURRENT_TERRITORY_CODE_E_788",
		444: "CURRENT_TERRITORY_CODE_E_792",
		445: "CURRENT_TERRITORY_CODE_E_795",
		446: "CURRENT_TERRITORY_CODE_E_798",
		447: "CURRENT_TERRITORY_CODE_E_800",
		448: "CURRENT_TERRITORY_CODE_E_804",
		449: "CURRENT_TERRITORY_CODE_E_807",
		450: "CURRENT_TERRITORY_CODE_E_810",
		451: "CURRENT_TERRITORY_CODE_E_818",
		452: "CURRENT_TERRITORY_CODE_E_826",
		453: "CURRENT_TERRITORY_CODE_E_834",
		454: "CURRENT_TERRITORY_CODE_E_840",
		455: "CURRENT_TERRITORY_CODE_E_854",
		456: "CURRENT_TERRITORY_CODE_E_858",
		457: "CURRENT_TERRITORY_CODE_E_860",
		458: "CURRENT_TERRITORY_CODE_E_862",
		459: "CURRENT_TERRITORY_CODE_E_882",
		460: "CURRENT_TERRITORY_CODE_E_886",
		461: "CURRENT_TERRITORY_CODE_E_887",
		462: "CURRENT_TERRITORY_CODE_E_890",
		463: "CURRENT_TERRITORY_CODE_E_891",
		464: "CURRENT_TERRITORY_CODE_E_894",
		465: "CURRENT_TERRITORY_CODE_E_2100",
		466: "CURRENT_TERRITORY_CODE_E_2101",
		467: "CURRENT_TERRITORY_CODE_E_2102",
		468: "CURRENT_TERRITORY_CODE_E_2103",
		469: "CURRENT_TERRITORY_CODE_E_2104",
		470: "CURRENT_TERRITORY_CODE_E_2105",
		471: "CURRENT_TERRITORY_CODE_E_2106",
		472: "CURRENT_TERRITORY_CODE_E_2107",
		473: "CURRENT_TERRITORY_CODE_E_2108",
		474: "CURRENT_TERRITORY_CODE_E_2109",
		475: "CURRENT_TERRITORY_CODE_E_2110",
		476: "CURRENT_TERRITORY_CODE_E_2111",
		477: "CURRENT_TERRITORY_CODE_E_2112",
		478: "CURRENT_TERRITORY_CODE_E_2113",
		479: "CURRENT_TERRITORY_CODE_E_2114",
		480: "CURRENT_TERRITORY_CODE_E_2115",
		481: "CURRENT_TERRITORY_CODE_E_2116",
		482: "CURRENT_TERRITORY_CODE_E_2117",
		483: "CURRENT_TERRITORY_CODE_E_2118",
		484: "CURRENT_TERRITORY_CODE_E_2119",
		485: "CURRENT_TERRITORY_CODE_E_2120",
		486: "CURRENT_TERRITORY_CODE_E_2121",
		487: "CURRENT_TERRITORY_CODE_E_2122",
		488: "CURRENT_TERRITORY_CODE_E_2123",
		489: "CURRENT_TERRITORY_CODE_E_2124",
		490: "CURRENT_TERRITORY_CODE_E_2125",
		491: "CURRENT_TERRITORY_CODE_E_2126",
		492: "CURRENT_TERRITORY_CODE_E_2127",
		493: "CURRENT_TERRITORY_CODE_E_2128",
		494: "CURRENT_TERRITORY_CODE_E_2129",
		495: "CURRENT_TERRITORY_CODE_E_2130",
		496: "CURRENT_TERRITORY_CODE_E_2131",
		497: "CURRENT_TERRITORY_CODE_E_2132",
		498: "CURRENT_TERRITORY_CODE_E_2133",
		499: "CURRENT_TERRITORY_CODE_E_2134",
		500: "CURRENT_TERRITORY_CODE_E_2136",
		501: "CURRENT_TERRITORY_CODE_XK",
		502: "CURRENT_TERRITORY_CODE_WORLDWIDE",
		503: "CURRENT_TERRITORY_CODE_E_446",
	}
	CurrentTerritoryCode_value = map[string]int32{
		"CURRENT_TERRITORY_CODE_UNSPECIFIED": 0,
		"CURRENT_TERRITORY_CODE_AD":          1,
		"CURRENT_TERRITORY_CODE_AE":          2,
		"CURRENT_TERRITORY_CODE_AF":          3,
		"CURRENT_TERRITORY_CODE_AG":          4,
		"CURRENT_TERRITORY_CODE_AI":          5,
		"CURRENT_TERRITORY_CODE_AL":          6,
		"CURRENT_TERRITORY_CODE_AM":          7,
		"CURRENT_TERRITORY_CODE_AN":          8,
		"CURRENT_TERRITORY_CODE_AO":          9,
		"CURRENT_TERRITORY_CODE_AQ":          10,
		"CURRENT_TERRITORY_CODE_AR":          11,
		"CURRENT_TERRITORY_CODE_AS":          12,
		"CURRENT_TERRITORY_CODE_AT":          13,
		"CURRENT_TERRITORY_CODE_AU":          14,
		"CURRENT_TERRITORY_CODE_AW":          15,
		"CURRENT_TERRITORY_CODE_AX":          16,
		"CURRENT_TERRITORY_CODE_AZ":          17,
		"CURRENT_TERRITORY_CODE_BA":          18,
		"CURRENT_TERRITORY_CODE_BB":          19,
		"CURRENT_TERRITORY_CODE_BD":          20,
		"CURRENT_TERRITORY_CODE_BE":          21,
		"CURRENT_TERRITORY_CODE_BF":          22,
		"CURRENT_TERRITORY_CODE_BG":          23,
		"CURRENT_TERRITORY_CODE_BH":          24,
		"CURRENT_TERRITORY_CODE_BI":          25,
		"CURRENT_TERRITORY_CODE_BJ":          26,
		"CURRENT_TERRITORY_CODE_BL":          27,
		"CURRENT_TERRITORY_CODE_BM":          28,
		"CURRENT_TERRITORY_CODE_BN":          29,
		"CURRENT_TERRITORY_CODE_BO":          30,
		"CURRENT_TERRITORY_CODE_BQ":          31,
		"CURRENT_TERRITORY_CODE_BR":          32,
		"CURRENT_TERRITORY_CODE_BS":          33,
		"CURRENT_TERRITORY_CODE_BT":          34,
		"CURRENT_TERRITORY_CODE_BV":          35,
		"CURRENT_TERRITORY_CODE_BW":          36,
		"CURRENT_TERRITORY_CODE_BY":          37,
		"CURRENT_TERRITORY_CODE_BZ":          38,
		"CURRENT_TERRITORY_CODE_CA":          39,
		"CURRENT_TERRITORY_CODE_CC":          40,
		"CURRENT_TERRITORY_CODE_CD":          41,
		"CURRENT_TERRITORY_CODE_CF":          42,
		"CURRENT_TERRITORY_CODE_CG":          43,
		"CURRENT_TERRITORY_CODE_CH":          44,
		"CURRENT_TERRITORY_CODE_CI":          45,
		"CURRENT_TERRITORY_CODE_CK":          46,
		"CURRENT_TERRITORY_CODE_CL":          47,
		"CURRENT_TERRITORY_CODE_CM":          48,
		"CURRENT_TERRITORY_CODE_CN":          49,
		"CURRENT_TERRITORY_CODE_CO":          50,
		"CURRENT_TERRITORY_CODE_CR":          51,
		"CURRENT_TERRITORY_CODE_CS":          52,
		"CURRENT_TERRITORY_CODE_CU":          53,
		"CURRENT_TERRITORY_CODE_CV":          54,
		"CURRENT_TERRITORY_CODE_CW":          55,
		"CURRENT_TERRITORY_CODE_CX":          56,
		"CURRENT_TERRITORY_CODE_CY":          57,
		"CURRENT_TERRITORY_CODE_CZ":          58,
		"CURRENT_TERRITORY_CODE_DE":          59,
		"CURRENT_TERRITORY_CODE_DJ":          60,
		"CURRENT_TERRITORY_CODE_DK":          61,
		"CURRENT_TERRITORY_CODE_DM":          62,
		"CURRENT_TERRITORY_CODE_DO":          63,
		"CURRENT_TERRITORY_CODE_DZ":          64,
		"CURRENT_TERRITORY_CODE_EC":          65,
		"CURRENT_TERRITORY_CODE_EE":          66,
		"CURRENT_TERRITORY_CODE_EG":          67,
		"CURRENT_TERRITORY_CODE_EH":          68,
		"CURRENT_TERRITORY_CODE_ER":          69,
		"CURRENT_TERRITORY_CODE_ES":          70,
		"CURRENT_TERRITORY_CODE_ES_CE":       71,
		"CURRENT_TERRITORY_CODE_ES_CN":       72,
		"CURRENT_TERRITORY_CODE_ES_ML":       73,
		"CURRENT_TERRITORY_CODE_ET":          74,
		"CURRENT_TERRITORY_CODE_FI":          75,
		"CURRENT_TERRITORY_CODE_FJ":          76,
		"CURRENT_TERRITORY_CODE_FK":          77,
		"CURRENT_TERRITORY_CODE_FM":          78,
		"CURRENT_TERRITORY_CODE_FO":          79,
		"CURRENT_TERRITORY_CODE_FR":          80,
		"CURRENT_TERRITORY_CODE_GA":          81,
		"CURRENT_TERRITORY_CODE_GB":          82,
		"CURRENT_TERRITORY_CODE_GD":          83,
		"CURRENT_TERRITORY_CODE_GE":          84,
		"CURRENT_TERRITORY_CODE_GF":          85,
		"CURRENT_TERRITORY_CODE_GG":          86,
		"CURRENT_TERRITORY_CODE_GH":          87,
		"CURRENT_TERRITORY_CODE_GI":          88,
		"CURRENT_TERRITORY_CODE_GL":          89,
		"CURRENT_TERRITORY_CODE_GM":          90,
		"CURRENT_TERRITORY_CODE_GN":          91,
		"CURRENT_TERRITORY_CODE_GP":          92,
		"CURRENT_TERRITORY_CODE_GQ":          93,
		"CURRENT_TERRITORY_CODE_GR":          94,
		"CURRENT_TERRITORY_CODE_GS":          95,
		"CURRENT_TERRITORY_CODE_GT":          96,
		"CURRENT_TERRITORY_CODE_GU":          97,
		"CURRENT_TERRITORY_CODE_GW":          98,
		"CURRENT_TERRITORY_CODE_GY":          99,
		"CURRENT_TERRITORY_CODE_HK":          100,
		"CURRENT_TERRITORY_CODE_HM":          101,
		"CURRENT_TERRITORY_CODE_HN":          102,
		"CURRENT_TERRITORY_CODE_HR":          103,
		"CURRENT_TERRITORY_CODE_HT":          104,
		"CURRENT_TERRITORY_CODE_HU":          105,
		"CURRENT_TERRITORY_CODE_ID":          106,
		"CURRENT_TERRITORY_CODE_IE":          107,
		"CURRENT_TERRITORY_CODE_IL":          108,
		"CURRENT_TERRITORY_CODE_IM":          109,
		"CURRENT_TERRITORY_CODE_IN":          110,
		"CURRENT_TERRITORY_CODE_IO":          111,
		"CURRENT_TERRITORY_CODE_IQ":          112,
		"CURRENT_TERRITORY_CODE_IR":          113,
		"CURRENT_TERRITORY_CODE_IS":          114,
		"CURRENT_TERRITORY_CODE_IT":          115,
		"CURRENT_TERRITORY_CODE_JE":          116,
		"CURRENT_TERRITORY_CODE_JM":          117,
		"CURRENT_TERRITORY_CODE_JO":          118,
		"CURRENT_TERRITORY_CODE_JP":          119,
		"CURRENT_TERRITORY_CODE_KE":          120,
		"CURRENT_TERRITORY_CODE_KG":          121,
		"CURRENT_TERRITORY_CODE_KH":          122,
		"CURRENT_TERRITORY_CODE_KI":          123,
		"CURRENT_TERRITORY_CODE_KM":          124,
		"CURRENT_TERRITORY_CODE_KN":          125,
		"CURRENT_TERRITORY_CODE_KP":          126,
		"CURRENT_TERRITORY_CODE_KR":          127,
		"CURRENT_TERRITORY_CODE_KW":          128,
		"CURRENT_TERRITORY_CODE_KY":          129,
		"CURRENT_TERRITORY_CODE_KZ":          130,
		"CURRENT_TERRITORY_CODE_LA":          131,
		"CURRENT_TERRITORY_CODE_LB":          132,
		"CURRENT_TERRITORY_CODE_LC":          133,
		"CURRENT_TERRITORY_CODE_LI":          134,
		"CURRENT_TERRITORY_CODE_LK":          135,
		"CURRENT_TERRITORY_CODE_LR":          136,
		"CURRENT_TERRITORY_CODE_LS":          137,
		"CURRENT_TERRITORY_CODE_LT":          138,
		"CURRENT_TERRITORY_CODE_LU":          139,
		"CURRENT_TERRITORY_CODE_LV":          140,
		"CURRENT_TERRITORY_CODE_LY":          141,
		"CURRENT_TERRITORY_CODE_MA":          142,
		"CURRENT_TERRITORY_CODE_MC":          143,
		"CURRENT_TERRITORY_CODE_MD":          144,
		"CURRENT_TERRITORY_CODE_ME":          145,
		"CURRENT_TERRITORY_CODE_MF":          146,
		"CURRENT_TERRITORY_CODE_MG":          147,
		"CURRENT_TERRITORY_CODE_MH":          148,
		"CURRENT_TERRITORY_CODE_MK":          149,
		"CURRENT_TERRITORY_CODE_ML":          150,
		"CURRENT_TERRITORY_CODE_MM":          151,
		"CURRENT_TERRITORY_CODE_MN":          152,
		"CURRENT_TERRITORY_CODE_MO":          153,
		"CURRENT_TERRITORY_CODE_MP":          154,
		"CURRENT_TERRITORY_CODE_MQ":          155,
		"CURRENT_TERRITORY_CODE_MR":          156,
		"CURRENT_TERRITORY_CODE_MS":          157,
		"CURRENT_TERRITORY_CODE_MT":          158,
		"CURRENT_TERRITORY_CODE_MU":          159,
		"CURRENT_TERRITORY_CODE_MV":          160,
		"CURRENT_TERRITORY_CODE_MW":          161,
		"CURRENT_TERRITORY_CODE_MX":          162,
		"CURRENT_TERRITORY_CODE_MY":          163,
		"CURRENT_TERRITORY_CODE_MZ":          164,
		"CURRENT_TERRITORY_CODE_NA":          165,
		"CURRENT_TERRITORY_CODE_NC":          166,
		"CURRENT_TERRITORY_CODE_NE":          167,
		"CURRENT_TERRITORY_CODE_NF":          168,
		"CURRENT_TERRITORY_CODE_NG":          169,
		"CURRENT_TERRITORY_CODE_NI":          170,
		"CURRENT_TERRITORY_CODE_NL":          171,
		"CURRENT_TERRITORY_CODE_NO":          172,
		"CURRENT_TERRITORY_CODE_NP":          173,
		"CURRENT_TERRITORY_CODE_NR":          174,
		"CURRENT_TERRITORY_CODE_NU":          175,
		"CURRENT_TERRITORY_CODE_NZ":          176,
		"CURRENT_TERRITORY_CODE_OM":          177,
		"CURRENT_TERRITORY_CODE_PA":          178,
		"CURRENT_TERRITORY_CODE_PE":          179,
		"CURRENT_TERRITORY_CODE_PF":          180,
		"CURRENT_TERRITORY_CODE_PG":          181,
		"CURRENT_TERRITORY_CODE_PH":          182,
		"CURRENT_TERRITORY_CODE_PK":          183,
		"CURRENT_TERRITORY_CODE_PL":          184,
		"CURRENT_TERRITORY_CODE_PM":          185,
		"CURRENT_TERRITORY_CODE_PN":          186,
		"CURRENT_TERRITORY_CODE_PR":          187,
		"CURRENT_TERRITORY_CODE_PS":          188,
		"CURRENT_TERRITORY_CODE_PT":          189,
		"CURRENT_TERRITORY_CODE_PW":          190,
		"CURRENT_TERRITORY_CODE_PY":          191,
		"CURRENT_TERRITORY_CODE_QA":          192,
		"CURRENT_TERRITORY_CODE_RE":          193,
		"CURRENT_TERRITORY_CODE_RO":          194,
		"CURRENT_TERRITORY_CODE_RS":          195,
		"CURRENT_TERRITORY_CODE_RU":          196,
		"CURRENT_TERRITORY_CODE_RW":          197,
		"CURRENT_TERRITORY_CODE_SA":          198,
		"CURRENT_TERRITORY_CODE_SB":          199,
		"CURRENT_TERRITORY_CODE_SC":          200,
		"CURRENT_TERRITORY_CODE_SD":          201,
		"CURRENT_TERRITORY_CODE_SE":          202,
		"CURRENT_TERRITORY_CODE_SG":          203,
		"CURRENT_TERRITORY_CODE_SH":          204,
		"CURRENT_TERRITORY_CODE_SI":          205,
		"CURRENT_TERRITORY_CODE_SJ":          206,
		"CURRENT_TERRITORY_CODE_SK":          207,
		"CURRENT_TERRITORY_CODE_SL":          208,
		"CURRENT_TERRITORY_CODE_SM":          209,
		"CURRENT_TERRITORY_CODE_SN":          210,
		"CURRENT_TERRITORY_CODE_SO":          211,
		"CURRENT_TERRITORY_CODE_SR":          212,
		"CURRENT_TERRITORY_CODE_SS":          213,
		"CURRENT_TERRITORY_CODE_ST":          214,
		"CURRENT_TERRITORY_CODE_SV":          215,
		"CURRENT_TERRITORY_CODE_SX":          216,
		"CURRENT_TERRITORY_CODE_SY":          217,
		"CURRENT_TERRITORY_CODE_SZ":          218,
		"CURRENT_TERRITORY_CODE_TC":          219,
		"CURRENT_TERRITORY_CODE_TD":          220,
		"CURRENT_TERRITORY_CODE_TF":          221,
		"CURRENT_TERRITORY_CODE_TG":          222,
		"CURRENT_TERRITORY_CODE_TH":          223,
		"CURRENT_TERRITORY_CODE_TJ":          224,
		"CURRENT_TERRITORY_CODE_TK":          225,
		"CURRENT_TERRITORY_CODE_TL":          226,
		"CURRENT_TERRITORY_CODE_TM":          227,
		"CURRENT_TERRITORY_CODE_TN":          228,
		"CURRENT_TERRITORY_CODE_TO":          229,
		"CURRENT_TERRITORY_CODE_TR":          230,
		"CURRENT_TERRITORY_CODE_TT":          231,
		"CURRENT_TERRITORY_CODE_TV":          232,
		"CURRENT_TERRITORY_CODE_TW":          233,
		"CURRENT_TERRITORY_CODE_TZ":          234,
		"CURRENT_TERRITORY_CODE_UA":          235,
		"CURRENT_TERRITORY_CODE_UG":          236,
		"CURRENT_TERRITORY_CODE_UM":          237,
		"CURRENT_TERRITORY_CODE_US":          238,
		"CURRENT_TERRITORY_CODE_UY":          239,
		"CURRENT_TERRITORY_CODE_UZ":          240,
		"CURRENT_TERRITORY_CODE_VA":          241,
		"CURRENT_TERRITORY_CODE_VC":          242,
		"CURRENT_TERRITORY_CODE_VE":          243,
		"CURRENT_TERRITORY_CODE_VG":          244,
		"CURRENT_TERRITORY_CODE_VI":          245,
		"CURRENT_TERRITORY_CODE_VN":          246,
		"CURRENT_TERRITORY_CODE_VU":          247,
		"CURRENT_TERRITORY_CODE_WF":          248,
		"CURRENT_TERRITORY_CODE_WS":          249,
		"CURRENT_TERRITORY_CODE_YE":          250,
		"CURRENT_TERRITORY_CODE_YT":          251,
		"CURRENT_TERRITORY_CODE_ZA":          252,
		"CURRENT_TERRITORY_CODE_ZM":          253,
		"CURRENT_TERRITORY_CODE_ZW":          254,
		"CURRENT_TERRITORY_CODE_E_4":         255,
		"CURRENT_TERRITORY_CODE_E_8":         256,
		"CURRENT_TERRITORY_CODE_E_12":        257,
		"CURRENT_TERRITORY_CODE_E_20":        258,
		"CURRENT_TERRITORY_CODE_E_24":        259,
		"CURRENT_TERRITORY_CODE_E_28":        260,
		"CURRENT_TERRITORY_CODE_E_31":        261,
		"CURRENT_TERRITORY_CODE_E_32":        262,
		"CURRENT_TERRITORY_CODE_E_36":        263,
		"CURRENT_TERRITORY_CODE_E_40":        264,
		"CURRENT_TERRITORY_CODE_E_44":        265,
		"CURRENT_TERRITORY_CODE_E_48":        266,
		"CURRENT_TERRITORY_CODE_E_50":        267,
		"CURRENT_TERRITORY_CODE_E_51":        268,
		"CURRENT_TERRITORY_CODE_E_52":        269,
		"CURRENT_TERRITORY_CODE_E_56":        270,
		"CURRENT_TERRITORY_CODE_E_64":        271,
		"CURRENT_TERRITORY_CODE_E_68":        272,
		"CURRENT_TERRITORY_CODE_E_70":        273,
		"CURRENT_TERRITORY_CODE_E_72":        274,
		"CURRENT_TERRITORY_CODE_E_76":        275,
		"CURRENT_TERRITORY_CODE_E_84":        276,
		"CURRENT_TERRITORY_CODE_E_90":        277,
		"CURRENT_TERRITORY_CODE_E_96":        278,
		"CURRENT_TERRITORY_CODE_E_100":       279,
		"CURRENT_TERRITORY_CODE_E_104":       280,
		"CURRENT_TERRITORY_CODE_E_108":       281,
		"CURRENT_TERRITORY_CODE_E_112":       282,
		"CURRENT_TERRITORY_CODE_E_116":       283,
		"CURRENT_TERRITORY_CODE_E_120":       284,
		"CURRENT_TERRITORY_CODE_E_124":       285,
		"CURRENT_TERRITORY_CODE_E_132":       286,
		"CURRENT_TERRITORY_CODE_E_140":       287,
		"CURRENT_TERRITORY_CODE_E_144":       288,
		"CURRENT_TERRITORY_CODE_E_148":       289,
		"CURRENT_TERRITORY_CODE_E_152":       290,
		"CURRENT_TERRITORY_CODE_E_156":       291,
		"CURRENT_TERRITORY_CODE_E_158":       292,
		"CURRENT_TERRITORY_CODE_E_170":       293,
		"CURRENT_TERRITORY_CODE_E_174":       294,
		"CURRENT_TERRITORY_CODE_E_178":       295,
		"CURRENT_TERRITORY_CODE_E_180":       296,
		"CURRENT_TERRITORY_CODE_E_188":       297,
		"CURRENT_TERRITORY_CODE_E_191":       298,
		"CURRENT_TERRITORY_CODE_E_192":       299,
		"CURRENT_TERRITORY_CODE_E_196":       300,
		"CURRENT_TERRITORY_CODE_E_200":       301,
		"CURRENT_TERRITORY_CODE_E_203":       302,
		"CURRENT_TERRITORY_CODE_E_204":       303,
		"CURRENT_TERRITORY_CODE_E_208":       304,
		"CURRENT_TERRITORY_CODE_E_212":       305,
		"CURRENT_TERRITORY_CODE_E_214":       306,
		"CURRENT_TERRITORY_CODE_E_218":       307,
		"CURRENT_TERRITORY_CODE_E_222":       308,
		"CURRENT_TERRITORY_CODE_E_226":       309,
		"CURRENT_TERRITORY_CODE_E_230":       310,
		"CURRENT_TERRITORY_CODE_E_231":       311,
		"CURRENT_TERRITORY_CODE_E_232":       312,
		"CURRENT_TERRITORY_CODE_E_233":       313,
		"CURRENT_TERRITORY_CODE_E_242":       314,
		"CURRENT_TERRITORY_CODE_E_246":       315,
		"CURRENT_TERRITORY_CODE_E_250":       316,
		"CURRENT_TERRITORY_CODE_E_258":       317,
		"CURRENT_TERRITORY_CODE_E_262":       318,
		"CURRENT_TERRITORY_CODE_E_266":       319,
		"CURRENT_TERRITORY_CODE_E_268":       320,
		"CURRENT_TERRITORY_CODE_E_270":       321,
		"CURRENT_TERRITORY_CODE_E_276":       322,
		"CURRENT_TERRITORY_CODE_E_278":       323,
		"CURRENT_TERRITORY_CODE_E_280":       324,
		"CURRENT_TERRITORY_CODE_E_288":       325,
		"CURRENT_TERRITORY_CODE_E_296":       326,
		"CURRENT_TERRITORY_CODE_E_300":       327,
		"CURRENT_TERRITORY_CODE_E_308":       328,
		"CURRENT_TERRITORY_CODE_E_320":       329,
		"CURRENT_TERRITORY_CODE_E_324":       330,
		"CURRENT_TERRITORY_CODE_E_328":       331,
		"CURRENT_TERRITORY_CODE_E_332":       332,
		"CURRENT_TERRITORY_CODE_E_336":       333,
		"CURRENT_TERRITORY_CODE_E_340":       334,
		"CURRENT_TERRITORY_CODE_E_344":       335,
		"CURRENT_TERRITORY_CODE_E_348":       336,
		"CURRENT_TERRITORY_CODE_E_352":       337,
		"CURRENT_TERRITORY_CODE_E_356":       338,
		"CURRENT_TERRITORY_CODE_E_360":       339,
		"CURRENT_TERRITORY_CODE_E_364":       340,
		"CURRENT_TERRITORY_CODE_E_368":       341,
		"CURRENT_TERRITORY_CODE_E_372":       342,
		"CURRENT_TERRITORY_CODE_E_376":       343,
		"CURRENT_TERRITORY_CODE_E_380":       344,
		"CURRENT_TERRITORY_CODE_E_384":       345,
		"CURRENT_TERRITORY_CODE_E_388":       346,
		"CURRENT_TERRITORY_CODE_E_392":       347,
		"CURRENT_TERRITORY_CODE_E_398":       348,
		"CURRENT_TERRITORY_CODE_E_400":       349,
		"CURRENT_TERRITORY_CODE_E_404":       350,
		"CURRENT_TERRITORY_CODE_E_408":       351,
		"CURRENT_TERRITORY_CODE_E_410":       352,
		"CURRENT_TERRITORY_CODE_E_414":       353,
		"CURRENT_TERRITORY_CODE_E_417":       354,
		"CURRENT_TERRITORY_CODE_E_418":       355,
		"CURRENT_TERRITORY_CODE_E_422":       356,
		"CURRENT_TERRITORY_CODE_E_426":       357,
		"CURRENT_TERRITORY_CODE_E_428":       358,
		"CURRENT_TERRITORY_CODE_E_430":       359,
		"CURRENT_TERRITORY_CODE_E_434":       360,
		"CURRENT_TERRITORY_CODE_E_438":       361,
		"CURRENT_TERRITORY_CODE_E_440":       362,
		"CURRENT_TERRITORY_CODE_E_442":       363,
		"CURRENT_TERRITORY_CODE_E_450":       364,
		"CURRENT_TERRITORY_CODE_E_454":       365,
		"CURRENT_TERRITORY_CODE_E_458":       366,
		"CURRENT_TERRITORY_CODE_E_462":       367,
		"CURRENT_TERRITORY_CODE_E_466":       368,
		"CURRENT_TERRITORY_CODE_E_470":       369,
		"CURRENT_TERRITORY_CODE_E_478":       370,
		"CURRENT_TERRITORY_CODE_E_480":       371,
		"CURRENT_TERRITORY_CODE_E_484":       372,
		"CURRENT_TERRITORY_CODE_E_492":       373,
		"CURRENT_TERRITORY_CODE_E_496":       374,
		"CURRENT_TERRITORY_CODE_E_498":       375,
		"CURRENT_TERRITORY_CODE_E_499":       376,
		"CURRENT_TERRITORY_CODE_E_504":       377,
		"CURRENT_TERRITORY_CODE_E_508":       378,
		"CURRENT_TERRITORY_CODE_E_512":       379,
		"CURRENT_TERRITORY_CODE_E_516":       380,
		"CURRENT_TERRITORY_CODE_E_520":       381,
		"CURRENT_TERRITORY_CODE_E_524":       382,
		"CURRENT_TERRITORY_CODE_E_528":       383,
		"CURRENT_TERRITORY_CODE_E_540":       384,
		"CURRENT_TERRITORY_CODE_E_548":       385,
		"CURRENT_TERRITORY_CODE_E_554":       386,
		"CURRENT_TERRITORY_CODE_E_558":       387,
		"CURRENT_TERRITORY_CODE_E_562":       388,
		"CURRENT_TERRITORY_CODE_E_566":       389,
		"CURRENT_TERRITORY_CODE_E_578":       390,
		"CURRENT_TERRITORY_CODE_E_583":       391,
		"CURRENT_TERRITORY_CODE_E_584":       392,
		"CURRENT_TERRITORY_CODE_E_585":       393,
		"CURRENT_TERRITORY_CODE_E_586":       394,
		"CURRENT_TERRITORY_CODE_E_591":       395,
		"CURRENT_TERRITORY_CODE_E_598":       396,
		"CURRENT_TERRITORY_CODE_E_600":       397,
		"CURRENT_TERRITORY_CODE_E_604":       398,
		"CURRENT_TERRITORY_CODE_E_608":       399,
		"CURRENT_TERRITORY_CODE_E_616":       400,
		"CURRENT_TERRITORY_CODE_E_620":       401,
		"CURRENT_TERRITORY_CODE_E_624":       402,
		"CURRENT_TERRITORY_CODE_E_626":       403,
		"CURRENT_TERRITORY_CODE_E_630":       404,
		"CURRENT_TERRITORY_CODE_E_634":       405,
		"CURRENT_TERRITORY_CODE_E_642":       406,
		"CURRENT_TERRITORY_CODE_E_643":       407,
		"CURRENT_TERRITORY_CODE_E_646":       408,
		"CURRENT_TERRITORY_CODE_E_659":       409,
		"CURRENT_TERRITORY_CODE_E_662":       410,
		"CURRENT_TERRITORY_CODE_E_670":       411,
		"CURRENT_TERRITORY_CODE_E_674":       412,
		"CURRENT_TERRITORY_CODE_E_678":       413,
		"CURRENT_TERRITORY_CODE_E_682":       414,
		"CURRENT_TERRITORY_CODE_E_686":       415,
		"CURRENT_TERRITORY_CODE_E_688":       416,
		"CURRENT_TERRITORY_CODE_E_690":       417,
		"CURRENT_TERRITORY_CODE_E_694":       418,
		"CURRENT_TERRITORY_CODE_E_702":       419,
		"CURRENT_TERRITORY_CODE_E_703":       420,
		"CURRENT_TERRITORY_CODE_E_704":       421,
		"CURRENT_TERRITORY_CODE_E_705":       422,
		"CURRENT_TERRITORY_CODE_E_706":       423,
		"CURRENT_TERRITORY_CODE_E_710":       424,
		"CURRENT_TERRITORY_CODE_E_716":       425,
		"CURRENT_TERRITORY_CODE_E_720":       426,
		"CURRENT_TERRITORY_CODE_E_724":       427,
		"CURRENT_TERRITORY_CODE_E_728":       428,
		"CURRENT_TERRITORY_CODE_E_729":       429,
		"CURRENT_TERRITORY_CODE_E_732":       430,
		"CURRENT_TERRITORY_CODE_E_736":       431,
		"CURRENT_TERRITORY_CODE_E_740":       432,
		"CURRENT_TERRITORY_CODE_E_748":       433,
		"CURRENT_TERRITORY_CODE_E_752":       434,
		"CURRENT_TERRITORY_CODE_E_756":       435,
		"CURRENT_TERRITORY_CODE_E_760":       436,
		"CURRENT_TERRITORY_CODE_E_762":       437,
		"CURRENT_TERRITORY_CODE_E_764":       438,
		"CURRENT_TERRITORY_CODE_E_768":       439,
		"CURRENT_TERRITORY_CODE_E_776":       440,
		"CURRENT_TERRITORY_CODE_E_780":       441,
		"CURRENT_TERRITORY_CODE_E_784":       442,
		"CURRENT_TERRITORY_CODE_E_788":       443,
		"CURRENT_TERRITORY_CODE_E_792":       444,
		"CURRENT_TERRITORY_CODE_E_795":       445,
		"CURRENT_TERRITORY_CODE_E_798":       446,
		"CURRENT_TERRITORY_CODE_E_800":       447,
		"CURRENT_TERRITORY_CODE_E_804":       448,
		"CURRENT_TERRITORY_CODE_E_807":       449,
		"CURRENT_TERRITORY_CODE_E_810":       450,
		"CURRENT_TERRITORY_CODE_E_818":       451,
		"CURRENT_TERRITORY_CODE_E_826":       452,
		"CURRENT_TERRITORY_CODE_E_834":       453,
		"CURRENT_TERRITORY_CODE_E_840":       454,
		"CURRENT_TERRITORY_CODE_E_854":       455,
		"CURRENT_TERRITORY_CODE_E_858":       456,
		"CURRENT_TERRITORY_CODE_E_860":       457,
		"CURRENT_TERRITORY_CODE_E_862":       458,
		"CURRENT_TERRITORY_CODE_E_882":       459,
		"CURRENT_TERRITORY_CODE_E_886":       460,
		"CURRENT_TERRITORY_CODE_E_887":       461,
		"CURRENT_TERRITORY_CODE_E_890":       462,
		"CURRENT_TERRITORY_CODE_E_891":       463,
		"CURRENT_TERRITORY_CODE_E_894":       464,
		"CURRENT_TERRITORY_CODE_E_2100":      465,
		"CURRENT_TERRITORY_CODE_E_2101":      466,
		"CURRENT_TERRITORY_CODE_E_2102":      467,
		"CURRENT_TERRITORY_CODE_E_2103":      468,
		"CURRENT_TERRITORY_CODE_E_2104":      469,
		"CURRENT_TERRITORY_CODE_E_2105":      470,
		"CURRENT_TERRITORY_CODE_E_2106":      471,
		"CURRENT_TERRITORY_CODE_E_2107":      472,
		"CURRENT_TERRITORY_CODE_E_2108":      473,
		"CURRENT_TERRITORY_CODE_E_2109":      474,
		"CURRENT_TERRITORY_CODE_E_2110":      475,
		"CURRENT_TERRITORY_CODE_E_2111":      476,
		"CURRENT_TERRITORY_CODE_E_2112":      477,
		"CURRENT_TERRITORY_CODE_E_2113":      478,
		"CURRENT_TERRITORY_CODE_E_2114":      479,
		"CURRENT_TERRITORY_CODE_E_2115":      480,
		"CURRENT_TERRITORY_CODE_E_2116":      481,
		"CURRENT_TERRITORY_CODE_E_2117":      482,
		"CURRENT_TERRITORY_CODE_E_2118":      483,
		"CURRENT_TERRITORY_CODE_E_2119":      484,
		"CURRENT_TERRITORY_CODE_E_2120":      485,
		"CURRENT_TERRITORY_CODE_E_2121":      486,
		"CURRENT_TERRITORY_CODE_E_2122":      487,
		"CURRENT_TERRITORY_CODE_E_2123":      488,
		"CURRENT_TERRITORY_CODE_E_2124":      489,
		"CURRENT_TERRITORY_CODE_E_2125":      490,
		"CURRENT_TERRITORY_CODE_E_2126":      491,
		"CURRENT_TERRITORY_CODE_E_2127":      492,
		"CURRENT_TERRITORY_CODE_E_2128":      493,
		"CURRENT_TERRITORY_CODE_E_2129":      494,
		"CURRENT_TERRITORY_CODE_E_2130":      495,
		"CURRENT_TERRITORY_CODE_E_2131":      496,
		"CURRENT_TERRITORY_CODE_E_2132":      497,
		"CURRENT_TERRITORY_CODE_E_2133":      498,
		"CURRENT_TERRITORY_CODE_E_2134":      499,
		"CURRENT_TERRITORY_CODE_E_2136":      500,
		"CURRENT_TERRITORY_CODE_XK":          501,
		"CURRENT_TERRITORY_CODE_WORLDWIDE":   502,
		"CURRENT_TERRITORY_CODE_E_446":       503,
	}
)

func (x CurrentTerritoryCode) Enum() *CurrentTerritoryCode {
	p := new(CurrentTerritoryCode)
	*p = x
	return p
}

func (x CurrentTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[38].Descriptor()
}

func (CurrentTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[38]
}

func (x CurrentTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentTerritoryCode.Descriptor instead.
func (CurrentTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{38}
}

type DanceStyle int32

const (
	DanceStyle_DANCE_STYLE_UNSPECIFIED         DanceStyle = 0
	DanceStyle_DANCE_STYLE_ACRODANCE           DanceStyle = 1
	DanceStyle_DANCE_STYLE_BALLET              DanceStyle = 2
	DanceStyle_DANCE_STYLE_BALLROOM            DanceStyle = 3
	DanceStyle_DANCE_STYLE_BARCAROLLE          DanceStyle = 4
	DanceStyle_DANCE_STYLE_BOLERO              DanceStyle = 5
	DanceStyle_DANCE_STYLE_BREAKDANCE          DanceStyle = 6
	DanceStyle_DANCE_STYLE_BREAKDOWN           DanceStyle = 7
	DanceStyle_DANCE_STYLE_BUMP                DanceStyle = 8
	DanceStyle_DANCE_STYLE_CAKEWALK            DanceStyle = 9
	DanceStyle_DANCE_STYLE_CANCAN              DanceStyle = 10
	DanceStyle_DANCE_STYLE_CAROLINASHAG        DanceStyle = 11
	DanceStyle_DANCE_STYLE_CHACHA              DanceStyle = 12
	DanceStyle_DANCE_STYLE_CHARLESTON          DanceStyle = 13
	DanceStyle_DANCE_STYLE_CONGALINE           DanceStyle = 14
	DanceStyle_DANCE_STYLE_CONTEMPORARYDANCE   DanceStyle = 15
	DanceStyle_DANCE_STYLE_CONTRADANCE         DanceStyle = 16
	DanceStyle_DANCE_STYLE_COUNTRYTWOSTEP      DanceStyle = 17
	DanceStyle_DANCE_STYLE_COUNTRYWESTERNDANCE DanceStyle = 18
	DanceStyle_DANCE_STYLE_COWBOYCHACHA        DanceStyle = 19
	DanceStyle_DANCE_STYLE_DANSBAND            DanceStyle = 20
	DanceStyle_DANCE_STYLE_DISCODANCE          DanceStyle = 21
	DanceStyle_DANCE_STYLE_DOUGIE              DanceStyle = 22
	DanceStyle_DANCE_STYLE_EASTCOASTSWING      DanceStyle = 23
	DanceStyle_DANCE_STYLE_FORRO               DanceStyle = 24
	DanceStyle_DANCE_STYLE_FOXTROT             DanceStyle = 25
	DanceStyle_DANCE_STYLE_HANDJIVE            DanceStyle = 26
	DanceStyle_DANCE_STYLE_HIPHOPDANCE         DanceStyle = 27
	DanceStyle_DANCE_STYLE_HUSTLE              DanceStyle = 28
	DanceStyle_DANCE_STYLE_INTERPRETIVE        DanceStyle = 29
	DanceStyle_DANCE_STYLE_JAZZDANCE           DanceStyle = 30
	DanceStyle_DANCE_STYLE_JIG                 DanceStyle = 31
	DanceStyle_DANCE_STYLE_JITTERBUG           DanceStyle = 32
	DanceStyle_DANCE_STYLE_JIVE                DanceStyle = 33
	DanceStyle_DANCE_STYLE_LINDYHOP            DanceStyle = 34
	DanceStyle_DANCE_STYLE_LINEDANCE           DanceStyle = 35
	DanceStyle_DANCE_STYLE_LIQUIDDANCE         DanceStyle = 36
	DanceStyle_DANCE_STYLE_LOCKING             DanceStyle = 37
	DanceStyle_DANCE_STYLE_LYRICALHIPHOPDANCE  DanceStyle = 38
	DanceStyle_DANCE_STYLE_MAMBO               DanceStyle = 39
	DanceStyle_DANCE_STYLE_MAZURKA             DanceStyle = 40
	DanceStyle_DANCE_STYLE_MODERNDANCE         DanceStyle = 41
	DanceStyle_DANCE_STYLE_PASODOBLE           DanceStyle = 42
	DanceStyle_DANCE_STYLE_POLONAISE           DanceStyle = 43
	DanceStyle_DANCE_STYLE_POPPING             DanceStyle = 44
	DanceStyle_DANCE_STYLE_QUICKSTEP           DanceStyle = 45
	DanceStyle_DANCE_STYLE_ROBOT               DanceStyle = 46
	DanceStyle_DANCE_STYLE_RODEOSWING          DanceStyle = 47
	DanceStyle_DANCE_STYLE_RUMBA               DanceStyle = 48
	DanceStyle_DANCE_STYLE_SALSA               DanceStyle = 49
	DanceStyle_DANCE_STYLE_SAMBA               DanceStyle = 50
	DanceStyle_DANCE_STYLE_SLOWWALTZ           DanceStyle = 51
	DanceStyle_DANCE_STYLE_SQUAREDANCE         DanceStyle = 52
	DanceStyle_DANCE_STYLE_STEPPING            DanceStyle = 53
	DanceStyle_DANCE_STYLE_SWING               DanceStyle = 54
	DanceStyle_DANCE_STYLE_TANGO               DanceStyle = 55
	DanceStyle_DANCE_STYLE_TAPDANCING          DanceStyle = 56
	DanceStyle_DANCE_STYLE_THETWIST            DanceStyle = 57
	DanceStyle_DANCE_STYLE_TRADITIONALDANCE    DanceStyle = 58
	DanceStyle_DANCE_STYLE_TRIPLESTEP          DanceStyle = 59
	DanceStyle_DANCE_STYLE_TURFING             DanceStyle = 60
	DanceStyle_DANCE_STYLE_UPROCKING           DanceStyle = 61
	DanceStyle_DANCE_STYLE_USERDEFINED         DanceStyle = 62
	DanceStyle_DANCE_STYLE_VIENNESEWALTZ       DanceStyle = 63
	DanceStyle_DANCE_STYLE_WALTZ               DanceStyle = 64
	DanceStyle_DANCE_STYLE_WATUSI              DanceStyle = 65
	DanceStyle_DANCE_STYLE_WESTCOASTSWING      DanceStyle = 66
	DanceStyle_DANCE_STYLE_WESTERNSWING        DanceStyle = 67
)

// Enum value maps for DanceStyle.
var (
	DanceStyle_name = map[int32]string{
		0:  "DANCE_STYLE_UNSPECIFIED",
		1:  "DANCE_STYLE_ACRODANCE",
		2:  "DANCE_STYLE_BALLET",
		3:  "DANCE_STYLE_BALLROOM",
		4:  "DANCE_STYLE_BARCAROLLE",
		5:  "DANCE_STYLE_BOLERO",
		6:  "DANCE_STYLE_BREAKDANCE",
		7:  "DANCE_STYLE_BREAKDOWN",
		8:  "DANCE_STYLE_BUMP",
		9:  "DANCE_STYLE_CAKEWALK",
		10: "DANCE_STYLE_CANCAN",
		11: "DANCE_STYLE_CAROLINASHAG",
		12: "DANCE_STYLE_CHACHA",
		13: "DANCE_STYLE_CHARLESTON",
		14: "DANCE_STYLE_CONGALINE",
		15: "DANCE_STYLE_CONTEMPORARYDANCE",
		16: "DANCE_STYLE_CONTRADANCE",
		17: "DANCE_STYLE_COUNTRYTWOSTEP",
		18: "DANCE_STYLE_COUNTRYWESTERNDANCE",
		19: "DANCE_STYLE_COWBOYCHACHA",
		20: "DANCE_STYLE_DANSBAND",
		21: "DANCE_STYLE_DISCODANCE",
		22: "DANCE_STYLE_DOUGIE",
		23: "DANCE_STYLE_EASTCOASTSWING",
		24: "DANCE_STYLE_FORRO",
		25: "DANCE_STYLE_FOXTROT",
		26: "DANCE_STYLE_HANDJIVE",
		27: "DANCE_STYLE_HIPHOPDANCE",
		28: "DANCE_STYLE_HUSTLE",
		29: "DANCE_STYLE_INTERPRETIVE",
		30: "DANCE_STYLE_JAZZDANCE",
		31: "DANCE_STYLE_JIG",
		32: "DANCE_STYLE_JITTERBUG",
		33: "DANCE_STYLE_JIVE",
		34: "DANCE_STYLE_LINDYHOP",
		35: "DANCE_STYLE_LINEDANCE",
		36: "DANCE_STYLE_LIQUIDDANCE",
		37: "DANCE_STYLE_LOCKING",
		38: "DANCE_STYLE_LYRICALHIPHOPDANCE",
		39: "DANCE_STYLE_MAMBO",
		40: "DANCE_STYLE_MAZURKA",
		41: "DANCE_STYLE_MODERNDANCE",
		42: "DANCE_STYLE_PASODOBLE",
		43: "DANCE_STYLE_POLONAISE",
		44: "DANCE_STYLE_POPPING",
		45: "DANCE_STYLE_QUICKSTEP",
		46: "DANCE_STYLE_ROBOT",
		47: "DANCE_STYLE_RODEOSWING",
		48: "DANCE_STYLE_RUMBA",
		49: "DANCE_STYLE_SALSA",
		50: "DANCE_STYLE_SAMBA",
		51: "DANCE_STYLE_SLOWWALTZ",
		52: "DANCE_STYLE_SQUAREDANCE",
		53: "DANCE_STYLE_STEPPING",
		54: "DANCE_STYLE_SWING",
		55: "DANCE_STYLE_TANGO",
		56: "DANCE_STYLE_TAPDANCING",
		57: "DANCE_STYLE_THETWIST",
		58: "DANCE_STYLE_TRADITIONALDANCE",
		59: "DANCE_STYLE_TRIPLESTEP",
		60: "DANCE_STYLE_TURFING",
		61: "DANCE_STYLE_UPROCKING",
		62: "DANCE_STYLE_USERDEFINED",
		63: "DANCE_STYLE_VIENNESEWALTZ",
		64: "DANCE_STYLE_WALTZ",
		65: "DANCE_STYLE_WATUSI",
		66: "DANCE_STYLE_WESTCOASTSWING",
		67: "DANCE_STYLE_WESTERNSWING",
	}
	DanceStyle_value = map[string]int32{
		"DANCE_STYLE_UNSPECIFIED":         0,
		"DANCE_STYLE_ACRODANCE":           1,
		"DANCE_STYLE_BALLET":              2,
		"DANCE_STYLE_BALLROOM":            3,
		"DANCE_STYLE_BARCAROLLE":          4,
		"DANCE_STYLE_BOLERO":              5,
		"DANCE_STYLE_BREAKDANCE":          6,
		"DANCE_STYLE_BREAKDOWN":           7,
		"DANCE_STYLE_BUMP":                8,
		"DANCE_STYLE_CAKEWALK":            9,
		"DANCE_STYLE_CANCAN":              10,
		"DANCE_STYLE_CAROLINASHAG":        11,
		"DANCE_STYLE_CHACHA":              12,
		"DANCE_STYLE_CHARLESTON":          13,
		"DANCE_STYLE_CONGALINE":           14,
		"DANCE_STYLE_CONTEMPORARYDANCE":   15,
		"DANCE_STYLE_CONTRADANCE":         16,
		"DANCE_STYLE_COUNTRYTWOSTEP":      17,
		"DANCE_STYLE_COUNTRYWESTERNDANCE": 18,
		"DANCE_STYLE_COWBOYCHACHA":        19,
		"DANCE_STYLE_DANSBAND":            20,
		"DANCE_STYLE_DISCODANCE":          21,
		"DANCE_STYLE_DOUGIE":              22,
		"DANCE_STYLE_EASTCOASTSWING":      23,
		"DANCE_STYLE_FORRO":               24,
		"DANCE_STYLE_FOXTROT":             25,
		"DANCE_STYLE_HANDJIVE":            26,
		"DANCE_STYLE_HIPHOPDANCE":         27,
		"DANCE_STYLE_HUSTLE":              28,
		"DANCE_STYLE_INTERPRETIVE":        29,
		"DANCE_STYLE_JAZZDANCE":           30,
		"DANCE_STYLE_JIG":                 31,
		"DANCE_STYLE_JITTERBUG":           32,
		"DANCE_STYLE_JIVE":                33,
		"DANCE_STYLE_LINDYHOP":            34,
		"DANCE_STYLE_LINEDANCE":           35,
		"DANCE_STYLE_LIQUIDDANCE":         36,
		"DANCE_STYLE_LOCKING":             37,
		"DANCE_STYLE_LYRICALHIPHOPDANCE":  38,
		"DANCE_STYLE_MAMBO":               39,
		"DANCE_STYLE_MAZURKA":             40,
		"DANCE_STYLE_MODERNDANCE":         41,
		"DANCE_STYLE_PASODOBLE":           42,
		"DANCE_STYLE_POLONAISE":           43,
		"DANCE_STYLE_POPPING":             44,
		"DANCE_STYLE_QUICKSTEP":           45,
		"DANCE_STYLE_ROBOT":               46,
		"DANCE_STYLE_RODEOSWING":          47,
		"DANCE_STYLE_RUMBA":               48,
		"DANCE_STYLE_SALSA":               49,
		"DANCE_STYLE_SAMBA":               50,
		"DANCE_STYLE_SLOWWALTZ":           51,
		"DANCE_STYLE_SQUAREDANCE":         52,
		"DANCE_STYLE_STEPPING":            53,
		"DANCE_STYLE_SWING":               54,
		"DANCE_STYLE_TANGO":               55,
		"DANCE_STYLE_TAPDANCING":          56,
		"DANCE_STYLE_THETWIST":            57,
		"DANCE_STYLE_TRADITIONALDANCE":    58,
		"DANCE_STYLE_TRIPLESTEP":          59,
		"DANCE_STYLE_TURFING":             60,
		"DANCE_STYLE_UPROCKING":           61,
		"DANCE_STYLE_USERDEFINED":         62,
		"DANCE_STYLE_VIENNESEWALTZ":       63,
		"DANCE_STYLE_WALTZ":               64,
		"DANCE_STYLE_WATUSI":              65,
		"DANCE_STYLE_WESTCOASTSWING":      66,
		"DANCE_STYLE_WESTERNSWING":        67,
	}
)

func (x DanceStyle) Enum() *DanceStyle {
	p := new(DanceStyle)
	*p = x
	return p
}

func (x DanceStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DanceStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[39].Descriptor()
}

func (DanceStyle) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[39]
}

func (x DanceStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DanceStyle.Descriptor instead.
func (DanceStyle) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{39}
}

type DataCarrierFormat int32

const (
	DataCarrierFormat_DATA_CARRIER_FORMAT_UNSPECIFIED                    DataCarrierFormat = 0
	DataCarrierFormat_DATA_CARRIER_FORMAT_AFORMATVIDEO                   DataCarrierFormat = 1
	DataCarrierFormat_DATA_CARRIER_FORMAT_ADAT                           DataCarrierFormat = 2
	DataCarrierFormat_DATA_CARRIER_FORMAT_ANALOGAUDIO                    DataCarrierFormat = 3
	DataCarrierFormat_DATA_CARRIER_FORMAT_BFORMATVIDEO                   DataCarrierFormat = 4
	DataCarrierFormat_DATA_CARRIER_FORMAT_BETACAM                        DataCarrierFormat = 5
	DataCarrierFormat_DATA_CARRIER_FORMAT_BETACAMSP                      DataCarrierFormat = 6
	DataCarrierFormat_DATA_CARRIER_FORMAT_BETACAMSX                      DataCarrierFormat = 7
	DataCarrierFormat_DATA_CARRIER_FORMAT_BETAMAX                        DataCarrierFormat = 8
	DataCarrierFormat_DATA_CARRIER_FORMAT_CFORMATVIDEO                   DataCarrierFormat = 9
	DataCarrierFormat_DATA_CARRIER_FORMAT_COMPACTDISKDIGITALAUDIO        DataCarrierFormat = 10
	DataCarrierFormat_DATA_CARRIER_FORMAT_D1DIGITALVIDEO                 DataCarrierFormat = 11
	DataCarrierFormat_DATA_CARRIER_FORMAT_D2DIGITALVIDEO                 DataCarrierFormat = 12
	DataCarrierFormat_DATA_CARRIER_FORMAT_D3DIGITALVIDEO                 DataCarrierFormat = 13
	DataCarrierFormat_DATA_CARRIER_FORMAT_D4DIGITALVIDEO                 DataCarrierFormat = 14
	DataCarrierFormat_DATA_CARRIER_FORMAT_D5DIGITALVIDEO                 DataCarrierFormat = 15
	DataCarrierFormat_DATA_CARRIER_FORMAT_D6DIGITALVIDEO                 DataCarrierFormat = 16
	DataCarrierFormat_DATA_CARRIER_FORMAT_DTRS                           DataCarrierFormat = 17
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCAM                          DataCarrierFormat = 18
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCPRO                         DataCarrierFormat = 19
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCPROPROGRESSIVE              DataCarrierFormat = 20
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCPRO50                       DataCarrierFormat = 21
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCPROHD                       DataCarrierFormat = 22
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIGITALAUDIOSTATIONARYHEAD     DataCarrierFormat = 23
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIGITALAUDIOTAPE               DataCarrierFormat = 24
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIGITALCOMPONENTVIDEOCASSETTE  DataCarrierFormat = 25
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIGITALDATASTORAGETAPE         DataCarrierFormat = 26
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIRECTSTREAMDIGITAL            DataCarrierFormat = 27
	DataCarrierFormat_DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE            DataCarrierFormat = 28
	DataCarrierFormat_DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE_32BIT      DataCarrierFormat = 29
	DataCarrierFormat_DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEM         DataCarrierFormat = 30
	DataCarrierFormat_DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEMPLUS     DataCarrierFormat = 31
	DataCarrierFormat_DATA_CARRIER_FORMAT_ISO9660                        DataCarrierFormat = 32
	DataCarrierFormat_DATA_CARRIER_FORMAT_JVCPCMDIGITAL                  DataCarrierFormat = 33
	DataCarrierFormat_DATA_CARRIER_FORMAT_LINEARTAPEFILESYSTEM           DataCarrierFormat = 34
	DataCarrierFormat_DATA_CARRIER_FORMAT_MASTERLINK                     DataCarrierFormat = 35
	DataCarrierFormat_DATA_CARRIER_FORMAT_NEWTECHNOLOGYFILESYSTEM        DataCarrierFormat = 36
	DataCarrierFormat_DATA_CARRIER_FORMAT_NOTAPPLICABLE                  DataCarrierFormat = 37
	DataCarrierFormat_DATA_CARRIER_FORMAT_PCMDIGITAL                     DataCarrierFormat = 38
	DataCarrierFormat_DATA_CARRIER_FORMAT_PRODIGI                        DataCarrierFormat = 39
	DataCarrierFormat_DATA_CARRIER_FORMAT_PROPRIETARY                    DataCarrierFormat = 40
	DataCarrierFormat_DATA_CARRIER_FORMAT_RADAR                          DataCarrierFormat = 41
	DataCarrierFormat_DATA_CARRIER_FORMAT_RADARII                        DataCarrierFormat = 42
	DataCarrierFormat_DATA_CARRIER_FORMAT_SONYPCM1630                    DataCarrierFormat = 43
	DataCarrierFormat_DATA_CARRIER_FORMAT_STREAMINGDATA                  DataCarrierFormat = 44
	DataCarrierFormat_DATA_CARRIER_FORMAT_TRANSVERSETRACKQUADRAPLEXVIDEO DataCarrierFormat = 45
)

// Enum value maps for DataCarrierFormat.
var (
	DataCarrierFormat_name = map[int32]string{
		0:  "DATA_CARRIER_FORMAT_UNSPECIFIED",
		1:  "DATA_CARRIER_FORMAT_AFORMATVIDEO",
		2:  "DATA_CARRIER_FORMAT_ADAT",
		3:  "DATA_CARRIER_FORMAT_ANALOGAUDIO",
		4:  "DATA_CARRIER_FORMAT_BFORMATVIDEO",
		5:  "DATA_CARRIER_FORMAT_BETACAM",
		6:  "DATA_CARRIER_FORMAT_BETACAMSP",
		7:  "DATA_CARRIER_FORMAT_BETACAMSX",
		8:  "DATA_CARRIER_FORMAT_BETAMAX",
		9:  "DATA_CARRIER_FORMAT_CFORMATVIDEO",
		10: "DATA_CARRIER_FORMAT_COMPACTDISKDIGITALAUDIO",
		11: "DATA_CARRIER_FORMAT_D1DIGITALVIDEO",
		12: "DATA_CARRIER_FORMAT_D2DIGITALVIDEO",
		13: "DATA_CARRIER_FORMAT_D3DIGITALVIDEO",
		14: "DATA_CARRIER_FORMAT_D4DIGITALVIDEO",
		15: "DATA_CARRIER_FORMAT_D5DIGITALVIDEO",
		16: "DATA_CARRIER_FORMAT_D6DIGITALVIDEO",
		17: "DATA_CARRIER_FORMAT_DTRS",
		18: "DATA_CARRIER_FORMAT_DVCAM",
		19: "DATA_CARRIER_FORMAT_DVCPRO",
		20: "DATA_CARRIER_FORMAT_DVCPROPROGRESSIVE",
		21: "DATA_CARRIER_FORMAT_DVCPRO50",
		22: "DATA_CARRIER_FORMAT_DVCPROHD",
		23: "DATA_CARRIER_FORMAT_DIGITALAUDIOSTATIONARYHEAD",
		24: "DATA_CARRIER_FORMAT_DIGITALAUDIOTAPE",
		25: "DATA_CARRIER_FORMAT_DIGITALCOMPONENTVIDEOCASSETTE",
		26: "DATA_CARRIER_FORMAT_DIGITALDATASTORAGETAPE",
		27: "DATA_CARRIER_FORMAT_DIRECTSTREAMDIGITAL",
		28: "DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE",
		29: "DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE_32BIT",
		30: "DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEM",
		31: "DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEMPLUS",
		32: "DATA_CARRIER_FORMAT_ISO9660",
		33: "DATA_CARRIER_FORMAT_JVCPCMDIGITAL",
		34: "DATA_CARRIER_FORMAT_LINEARTAPEFILESYSTEM",
		35: "DATA_CARRIER_FORMAT_MASTERLINK",
		36: "DATA_CARRIER_FORMAT_NEWTECHNOLOGYFILESYSTEM",
		37: "DATA_CARRIER_FORMAT_NOTAPPLICABLE",
		38: "DATA_CARRIER_FORMAT_PCMDIGITAL",
		39: "DATA_CARRIER_FORMAT_PRODIGI",
		40: "DATA_CARRIER_FORMAT_PROPRIETARY",
		41: "DATA_CARRIER_FORMAT_RADAR",
		42: "DATA_CARRIER_FORMAT_RADARII",
		43: "DATA_CARRIER_FORMAT_SONYPCM1630",
		44: "DATA_CARRIER_FORMAT_STREAMINGDATA",
		45: "DATA_CARRIER_FORMAT_TRANSVERSETRACKQUADRAPLEXVIDEO",
	}
	DataCarrierFormat_value = map[string]int32{
		"DATA_CARRIER_FORMAT_UNSPECIFIED":                    0,
		"DATA_CARRIER_FORMAT_AFORMATVIDEO":                   1,
		"DATA_CARRIER_FORMAT_ADAT":                           2,
		"DATA_CARRIER_FORMAT_ANALOGAUDIO":                    3,
		"DATA_CARRIER_FORMAT_BFORMATVIDEO":                   4,
		"DATA_CARRIER_FORMAT_BETACAM":                        5,
		"DATA_CARRIER_FORMAT_BETACAMSP":                      6,
		"DATA_CARRIER_FORMAT_BETACAMSX":                      7,
		"DATA_CARRIER_FORMAT_BETAMAX":                        8,
		"DATA_CARRIER_FORMAT_CFORMATVIDEO":                   9,
		"DATA_CARRIER_FORMAT_COMPACTDISKDIGITALAUDIO":        10,
		"DATA_CARRIER_FORMAT_D1DIGITALVIDEO":                 11,
		"DATA_CARRIER_FORMAT_D2DIGITALVIDEO":                 12,
		"DATA_CARRIER_FORMAT_D3DIGITALVIDEO":                 13,
		"DATA_CARRIER_FORMAT_D4DIGITALVIDEO":                 14,
		"DATA_CARRIER_FORMAT_D5DIGITALVIDEO":                 15,
		"DATA_CARRIER_FORMAT_D6DIGITALVIDEO":                 16,
		"DATA_CARRIER_FORMAT_DTRS":                           17,
		"DATA_CARRIER_FORMAT_DVCAM":                          18,
		"DATA_CARRIER_FORMAT_DVCPRO":                         19,
		"DATA_CARRIER_FORMAT_DVCPROPROGRESSIVE":              20,
		"DATA_CARRIER_FORMAT_DVCPRO50":                       21,
		"DATA_CARRIER_FORMAT_DVCPROHD":                       22,
		"DATA_CARRIER_FORMAT_DIGITALAUDIOSTATIONARYHEAD":     23,
		"DATA_CARRIER_FORMAT_DIGITALAUDIOTAPE":               24,
		"DATA_CARRIER_FORMAT_DIGITALCOMPONENTVIDEOCASSETTE":  25,
		"DATA_CARRIER_FORMAT_DIGITALDATASTORAGETAPE":         26,
		"DATA_CARRIER_FORMAT_DIRECTSTREAMDIGITAL":            27,
		"DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE":            28,
		"DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE_32BIT":      29,
		"DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEM":         30,
		"DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEMPLUS":     31,
		"DATA_CARRIER_FORMAT_ISO9660":                        32,
		"DATA_CARRIER_FORMAT_JVCPCMDIGITAL":                  33,
		"DATA_CARRIER_FORMAT_LINEARTAPEFILESYSTEM":           34,
		"DATA_CARRIER_FORMAT_MASTERLINK":                     35,
		"DATA_CARRIER_FORMAT_NEWTECHNOLOGYFILESYSTEM":        36,
		"DATA_CARRIER_FORMAT_NOTAPPLICABLE":                  37,
		"DATA_CARRIER_FORMAT_PCMDIGITAL":                     38,
		"DATA_CARRIER_FORMAT_PRODIGI":                        39,
		"DATA_CARRIER_FORMAT_PROPRIETARY":                    40,
		"DATA_CARRIER_FORMAT_RADAR":                          41,
		"DATA_CARRIER_FORMAT_RADARII":                        42,
		"DATA_CARRIER_FORMAT_SONYPCM1630":                    43,
		"DATA_CARRIER_FORMAT_STREAMINGDATA":                  44,
		"DATA_CARRIER_FORMAT_TRANSVERSETRACKQUADRAPLEXVIDEO": 45,
	}
)

func (x DataCarrierFormat) Enum() *DataCarrierFormat {
	p := new(DataCarrierFormat)
	*p = x
	return p
}

func (x DataCarrierFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataCarrierFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[40].Descriptor()
}

func (DataCarrierFormat) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[40]
}

func (x DataCarrierFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataCarrierFormat.Descriptor instead.
func (DataCarrierFormat) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{40}
}

type DataCarrierType int32

const (
	DataCarrierType_DATA_CARRIER_TYPE_UNSPECIFIED                                                  DataCarrierType = 0
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_10_5INCHREEL                          DataCarrierType = 1
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_7INCHREEL                             DataCarrierType = 2
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE                   DataCarrierType = 3
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_LARGEREEL                             DataCarrierType = 4
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_MEDIUMREEL                            DataCarrierType = 5
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_SMALLREEL                             DataCarrierType = 6
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE                   DataCarrierType = 7
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_10_5INCHREEL                         DataCarrierType = 8
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_7INCHREEL                            DataCarrierType = 9
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE                  DataCarrierType = 10
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_10_5INCHREEL                        DataCarrierType = 11
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_7INCHREEL                           DataCarrierType = 12
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE                 DataCarrierType = 13
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_10_5INCHREEL                       DataCarrierType = 14
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_7INCHREEL                          DataCarrierType = 15
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE                DataCarrierType = 16
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_LARGECASSETTE                      DataCarrierType = 17
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE                     DataCarrierType = 18
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_SMALLCASSETTE                      DataCarrierType = 19
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_10_5INCHREEL                        DataCarrierType = 20
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_7INCHREEL                           DataCarrierType = 21
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE                 DataCarrierType = 22
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_10_5INCHREEL                       DataCarrierType = 23
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_7INCHREEL                          DataCarrierType = 24
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE                DataCarrierType = 25
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_EXTRALARGECASSETTE                 DataCarrierType = 26
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_LARGECASSETTE                      DataCarrierType = 27
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE                     DataCarrierType = 28
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE                      DataCarrierType = 29
	DataCarrierType_DATA_CARRIER_TYPE_E_16MMSEPMAGANALOGAUDIOFILMREEL                              DataCarrierType = 30
	DataCarrierType_DATA_CARRIER_TYPE_E_16MMPICTUREANALOGVIDEOFILMREEL                             DataCarrierType = 31
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_10_5INCHREEL                          DataCarrierType = 32
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_12INCHREEL                            DataCarrierType = 33
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_14INCHREEL                            DataCarrierType = 34
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE                   DataCarrierType = 35
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_LARGEREEL                             DataCarrierType = 36
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_MEDIUMREEL                            DataCarrierType = 37
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_SMALLREEL                             DataCarrierType = 38
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE                   DataCarrierType = 39
	DataCarrierType_DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_LARGECASSETTE                      DataCarrierType = 40
	DataCarrierType_DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE                     DataCarrierType = 41
	DataCarrierType_DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE                      DataCarrierType = 42
	DataCarrierType_DATA_CARRIER_TYPE_E_35MMSEPMAGANALOGAUDIOFILMREEL                              DataCarrierType = 43
	DataCarrierType_DATA_CARRIER_TYPE_E_35MMPICTUREANALOGVIDEOFILMREEL                             DataCarrierType = 44
	DataCarrierType_DATA_CARRIER_TYPE_E_8MMPICTUREANALOGVIDEOFILMREEL                              DataCarrierType = 45
	DataCarrierType_DATA_CARRIER_TYPE_AIT_1DIGITALDATATAPE                                         DataCarrierType = 46
	DataCarrierType_DATA_CARRIER_TYPE_AIT_2DIGITALDATATAPE                                         DataCarrierType = 47
	DataCarrierType_DATA_CARRIER_TYPE_AIT_3DIGITALDATATAPE                                         DataCarrierType = 48
	DataCarrierType_DATA_CARRIER_TYPE_AIT_3EXDIGITALDATATAPE                                       DataCarrierType = 49
	DataCarrierType_DATA_CARRIER_TYPE_AIT_4DIGITALDATATAPE                                         DataCarrierType = 50
	DataCarrierType_DATA_CARRIER_TYPE_AIT_5DIGITALDATATAPE                                         DataCarrierType = 51
	DataCarrierType_DATA_CARRIER_TYPE_BERNOULLIDISK_20MB                                           DataCarrierType = 52
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_LARGECASSETTE                       DataCarrierType = 53
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_SMALLCASSETTE                       DataCarrierType = 54
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_LARGECASSETTE                      DataCarrierType = 55
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_SMALLCASSETTE                      DataCarrierType = 56
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_LARGECASSETTE                         DataCarrierType = 57
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_SMALLCASSETTE                         DataCarrierType = 58
	DataCarrierType_DATA_CARRIER_TYPE_BINDER_1INCHRING                                             DataCarrierType = 59
	DataCarrierType_DATA_CARRIER_TYPE_BINDER_1_5INCHRING                                           DataCarrierType = 60
	DataCarrierType_DATA_CARRIER_TYPE_BINDER_0_5INCHRING                                           DataCarrierType = 61
	DataCarrierType_DATA_CARRIER_TYPE_BINDER_2INCHRING                                             DataCarrierType = 62
	DataCarrierType_DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM      DataCarrierType = 63
	DataCarrierType_DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM      DataCarrierType = 64
	DataCarrierType_DATA_CARRIER_TYPE_CDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM         DataCarrierType = 65
	DataCarrierType_DATA_CARRIER_TYPE_CDROMDIGITALDATADISK                                         DataCarrierType = 66
	DataCarrierType_DATA_CARRIER_TYPE_CDIINTERACTIVEMULTIMEDIADIGITALDATADISK                      DataCarrierType = 67
	DataCarrierType_DATA_CARRIER_TYPE_COMPACTCASSETTEANALOGAUDIOTAPE                               DataCarrierType = 68
	DataCarrierType_DATA_CARRIER_TYPE_DAT160DIGITALSTORAGETAPE                                     DataCarrierType = 69
	DataCarrierType_DATA_CARRIER_TYPE_DAT320DIGITALSTORAGETAPE                                     DataCarrierType = 70
	DataCarrierType_DATA_CARRIER_TYPE_DAT72DIGITALSTORAGETAPE                                      DataCarrierType = 71
	DataCarrierType_DATA_CARRIER_TYPE_DDS_1DIGITALDATATAPE                                         DataCarrierType = 72
	DataCarrierType_DATA_CARRIER_TYPE_DDS_2DIGITALDATATAPE                                         DataCarrierType = 73
	DataCarrierType_DATA_CARRIER_TYPE_DDS_3DIGITALDATATAPE                                         DataCarrierType = 74
	DataCarrierType_DATA_CARRIER_TYPE_DDS_4DIGITALDATATAPE                                         DataCarrierType = 75
	DataCarrierType_DATA_CARRIER_TYPE_DLT_IIIDIGITALDATATAPE                                       DataCarrierType = 76
	DataCarrierType_DATA_CARRIER_TYPE_DLT_IVDIGITALDATATAPE                                        DataCarrierType = 77
	DataCarrierType_DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_MINICASSETTE                              DataCarrierType = 78
	DataCarrierType_DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_NORMALCASSETTE                            DataCarrierType = 79
	DataCarrierType_DATA_CARRIER_TYPE_DVCAMDIGITALVIDEOTAPE                                        DataCarrierType = 80
	DataCarrierType_DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_LARGECASSETTE                       DataCarrierType = 81
	DataCarrierType_DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_MEDIUMCASSETTE                      DataCarrierType = 82
	DataCarrierType_DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_SMALLCASSETTE                       DataCarrierType = 83
	DataCarrierType_DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_EXTRALARGECASSETTE                  DataCarrierType = 84
	DataCarrierType_DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_LARGECASSETTE                       DataCarrierType = 85
	DataCarrierType_DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM  DataCarrierType = 86
	DataCarrierType_DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM  DataCarrierType = 87
	DataCarrierType_DATA_CARRIER_TYPE_DVD_PLUS_RWREWRITABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM DataCarrierType = 88
	DataCarrierType_DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM        DataCarrierType = 89
	DataCarrierType_DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM        DataCarrierType = 90
	DataCarrierType_DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKDOUBLESIDED                       DataCarrierType = 91
	DataCarrierType_DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKSINGLESIDED                       DataCarrierType = 92
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_LARGECASSETTE                 DataCarrierType = 93
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_SMALLCASSETTE                 DataCarrierType = 94
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALAUDIOTAPE                                             DataCarrierType = 95
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALCOMPACTCASSETTE                                       DataCarrierType = 96
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_COMPACTCASSETTE                     DataCarrierType = 97
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_STANDARDCASSETTE                    DataCarrierType = 98
	DataCarrierType_DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH        DataCarrierType = 99
	DataCarrierType_DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH       DataCarrierType = 100
	DataCarrierType_DATA_CARRIER_TYPE_ENVELOPE                                                     DataCarrierType = 101
	DataCarrierType_DATA_CARRIER_TYPE_EXABYTE8500SERIESDIGITALDATATAPE                             DataCarrierType = 102
	DataCarrierType_DATA_CARRIER_TYPE_EXABYTE8700SERIESDIGITALDATATAPE                             DataCarrierType = 103
	DataCarrierType_DATA_CARRIER_TYPE_EXABYTE8900SERIESDIGITALDATATAPE                             DataCarrierType = 104
	DataCarrierType_DATA_CARRIER_TYPE_EXABYTEMAMMOTHDIGITALDATATAPE                                DataCarrierType = 105
	DataCarrierType_DATA_CARRIER_TYPE_FILESYSTEM                                                   DataCarrierType = 106
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH            DataCarrierType = 107
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH            DataCarrierType = 108
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH            DataCarrierType = 109
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH            DataCarrierType = 110
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH             DataCarrierType = 111
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE   DataCarrierType = 112
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_12CM       DataCarrierType = 113
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_8CM        DataCarrierType = 114
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_12CM       DataCarrierType = 115
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_8CM        DataCarrierType = 116
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM       DataCarrierType = 117
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_8CM        DataCarrierType = 118
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM       DataCarrierType = 119
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_8CM        DataCarrierType = 120
	DataCarrierType_DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_LARGECASSETTE                        DataCarrierType = 121
	DataCarrierType_DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_SMALLCASSETTE                        DataCarrierType = 122
	DataCarrierType_DATA_CARRIER_TYPE_HDCAMDIGITALVIDEOTAPE                                        DataCarrierType = 123
	DataCarrierType_DATA_CARRIER_TYPE_HDVHDTVDIGITALVIDEOTAPE                                      DataCarrierType = 124
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB2_0INTERFACE                        DataCarrierType = 125
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB3_0INTERFACE                        DataCarrierType = 126
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSBINTERFACE                           DataCarrierType = 127
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIREINTERFACE                      DataCarrierType = 128
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE                  DataCarrierType = 129
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE                   DataCarrierType = 130
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_UNSPECIFIEDINTERFACE                           DataCarrierType = 131
	DataCarrierType_DATA_CARRIER_TYPE_HI_8ANALOGVIDEOTAPE                                          DataCarrierType = 132
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE                  DataCarrierType = 133
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE                  DataCarrierType = 134
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSBINTERFACE                     DataCarrierType = 135
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE                DataCarrierType = 136
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE            DataCarrierType = 137
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USB_SATAINTERFACE       DataCarrierType = 138
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE             DataCarrierType = 139
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE             DataCarrierType = 140
	DataCarrierType_DATA_CARRIER_TYPE_JAZDIGITALDATADISK                                           DataCarrierType = 141
	DataCarrierType_DATA_CARRIER_TYPE_LTO_1ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 142
	DataCarrierType_DATA_CARRIER_TYPE_LTO_2ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 143
	DataCarrierType_DATA_CARRIER_TYPE_LTO_3ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 144
	DataCarrierType_DATA_CARRIER_TYPE_LTO_4ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 145
	DataCarrierType_DATA_CARRIER_TYPE_LTO_5ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 146
	DataCarrierType_DATA_CARRIER_TYPE_LTO_6ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 147
	DataCarrierType_DATA_CARRIER_TYPE_LTO_7ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 148
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_10INCH                      DataCarrierType = 149
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_12INCH                      DataCarrierType = 150
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_14INCH                      DataCarrierType = 151
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_16INCH                      DataCarrierType = 152
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_7INCH                       DataCarrierType = 153
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE             DataCarrierType = 154
	DataCarrierType_DATA_CARRIER_TYPE_LASERDISCOPTICALDISKSINGLESIDED                              DataCarrierType = 155
	DataCarrierType_DATA_CARRIER_TYPE_MINIDISK                                                     DataCarrierType = 156
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_1_3GB                                                 DataCarrierType = 157
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_1200MB                                                DataCarrierType = 158
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_2_6GB                                                 DataCarrierType = 159
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_540MB                                                 DataCarrierType = 160
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_650MB                                                 DataCarrierType = 161
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH            DataCarrierType = 162
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH            DataCarrierType = 163
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH            DataCarrierType = 164
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH            DataCarrierType = 165
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH             DataCarrierType = 166
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE   DataCarrierType = 167
	DataCarrierType_DATA_CARRIER_TYPE_PREMASTERCD                                                  DataCarrierType = 168
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE                   DataCarrierType = 169
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE                   DataCarrierType = 170
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE                 DataCarrierType = 171
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE              DataCarrierType = 172
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE              DataCarrierType = 173
	DataCarrierType_DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_COMPACTCASSETTE                         DataCarrierType = 174
	DataCarrierType_DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_STANDARDCASSETTE                        DataCarrierType = 175
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE                     DataCarrierType = 176
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE              DataCarrierType = 177
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE              DataCarrierType = 178
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL50PININTERFACE                   DataCarrierType = 179
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL68PININTERFACE                   DataCarrierType = 180
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALCENTRONIXINTERFACE               DataCarrierType = 181
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE                    DataCarrierType = 182
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE             DataCarrierType = 183
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL50PININTERFACE               DataCarrierType = 184
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL68PININTERFACE               DataCarrierType = 185
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL80PININTERFACE               DataCarrierType = 186
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE         DataCarrierType = 187
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_10INCH                      DataCarrierType = 188
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_12INCH                      DataCarrierType = 189
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_14INCH                      DataCarrierType = 190
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_16INCH                      DataCarrierType = 191
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_7INCH                       DataCarrierType = 192
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE             DataCarrierType = 193
	DataCarrierType_DATA_CARRIER_TYPE_SINGLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH        DataCarrierType = 194
	DataCarrierType_DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH        DataCarrierType = 195
	DataCarrierType_DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH       DataCarrierType = 196
	DataCarrierType_DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_8INCH          DataCarrierType = 197
	DataCarrierType_DATA_CARRIER_TYPE_SOLIDSTATEMEMORYSTORAGECARDS                                 DataCarrierType = 198
	DataCarrierType_DATA_CARRIER_TYPE_STORAGEBOX_1_2CUBICFEET                                      DataCarrierType = 199
	DataCarrierType_DATA_CARRIER_TYPE_STORAGEBOX_2_0CUBICFEET                                      DataCarrierType = 200
	DataCarrierType_DATA_CARRIER_TYPE_STORAGEBOX                                                   DataCarrierType = 201
	DataCarrierType_DATA_CARRIER_TYPE_STORAGECONTAINER_1_2CUBICFEET                                DataCarrierType = 202
	DataCarrierType_DATA_CARRIER_TYPE_STORAGECONTAINER_2_0CUBICFEET                                DataCarrierType = 203
	DataCarrierType_DATA_CARRIER_TYPE_STORAGECONTAINER                                             DataCarrierType = 204
	DataCarrierType_DATA_CARRIER_TYPE_SUPER16MMPICTUREANALOGVIDEOFILMREEL                          DataCarrierType = 205
	DataCarrierType_DATA_CARRIER_TYPE_SUPER8MMPICTUREANALOGVIDEOFILMREEL                           DataCarrierType = 206
	DataCarrierType_DATA_CARRIER_TYPE_UMATICSPANALOGVIDEOTAPE_SMALLCASSETTE                        DataCarrierType = 207
	DataCarrierType_DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_LARGECASSETTE                          DataCarrierType = 208
	DataCarrierType_DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_SMALLCASSETTE                          DataCarrierType = 209
	DataCarrierType_DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_COMPACTCASSETTE                           DataCarrierType = 210
	DataCarrierType_DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_STANDARDCASSETTE                          DataCarrierType = 211
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_10INCH                        DataCarrierType = 212
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_12INCH                        DataCarrierType = 213
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_14INCH                        DataCarrierType = 214
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_16INCH                        DataCarrierType = 215
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_7INCH                         DataCarrierType = 216
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE               DataCarrierType = 217
	DataCarrierType_DATA_CARRIER_TYPE_VXA_1DIGITALDATATAPE                                         DataCarrierType = 218
	DataCarrierType_DATA_CARRIER_TYPE_VXA_2DIGITALDATATAPE                                         DataCarrierType = 219
	DataCarrierType_DATA_CARRIER_TYPE_VXA_3DIGITALDATATAPE                                         DataCarrierType = 220
	DataCarrierType_DATA_CARRIER_TYPE_WAXCYLINDERPHONOGRAMANALOGAUDIODISK                          DataCarrierType = 221
	DataCarrierType_DATA_CARRIER_TYPE_XDCAMREWRITABLEOPTICALDISK                                   DataCarrierType = 222
	DataCarrierType_DATA_CARRIER_TYPE_ZIPDIGITALDATADISK                                           DataCarrierType = 223
)

// Enum value maps for DataCarrierType.
var (
	DataCarrierType_name = map[int32]string{
		0:   "DATA_CARRIER_TYPE_UNSPECIFIED",
		1:   "DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_10_5INCHREEL",
		2:   "DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_7INCHREEL",
		3:   "DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE",
		4:   "DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_LARGEREEL",
		5:   "DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_MEDIUMREEL",
		6:   "DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_SMALLREEL",
		7:   "DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE",
		8:   "DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_10_5INCHREEL",
		9:   "DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_7INCHREEL",
		10:  "DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE",
		11:  "DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_10_5INCHREEL",
		12:  "DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_7INCHREEL",
		13:  "DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE",
		14:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_10_5INCHREEL",
		15:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_7INCHREEL",
		16:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE",
		17:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_LARGECASSETTE",
		18:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE",
		19:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_SMALLCASSETTE",
		20:  "DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_10_5INCHREEL",
		21:  "DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_7INCHREEL",
		22:  "DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE",
		23:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_10_5INCHREEL",
		24:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_7INCHREEL",
		25:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE",
		26:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_EXTRALARGECASSETTE",
		27:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_LARGECASSETTE",
		28:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE",
		29:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE",
		30:  "DATA_CARRIER_TYPE_E_16MMSEPMAGANALOGAUDIOFILMREEL",
		31:  "DATA_CARRIER_TYPE_E_16MMPICTUREANALOGVIDEOFILMREEL",
		32:  "DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_10_5INCHREEL",
		33:  "DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_12INCHREEL",
		34:  "DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_14INCHREEL",
		35:  "DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE",
		36:  "DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_LARGEREEL",
		37:  "DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_MEDIUMREEL",
		38:  "DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_SMALLREEL",
		39:  "DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE",
		40:  "DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_LARGECASSETTE",
		41:  "DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE",
		42:  "DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE",
		43:  "DATA_CARRIER_TYPE_E_35MMSEPMAGANALOGAUDIOFILMREEL",
		44:  "DATA_CARRIER_TYPE_E_35MMPICTUREANALOGVIDEOFILMREEL",
		45:  "DATA_CARRIER_TYPE_E_8MMPICTUREANALOGVIDEOFILMREEL",
		46:  "DATA_CARRIER_TYPE_AIT_1DIGITALDATATAPE",
		47:  "DATA_CARRIER_TYPE_AIT_2DIGITALDATATAPE",
		48:  "DATA_CARRIER_TYPE_AIT_3DIGITALDATATAPE",
		49:  "DATA_CARRIER_TYPE_AIT_3EXDIGITALDATATAPE",
		50:  "DATA_CARRIER_TYPE_AIT_4DIGITALDATATAPE",
		51:  "DATA_CARRIER_TYPE_AIT_5DIGITALDATATAPE",
		52:  "DATA_CARRIER_TYPE_BERNOULLIDISK_20MB",
		53:  "DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_LARGECASSETTE",
		54:  "DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_SMALLCASSETTE",
		55:  "DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_LARGECASSETTE",
		56:  "DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_SMALLCASSETTE",
		57:  "DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_LARGECASSETTE",
		58:  "DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_SMALLCASSETTE",
		59:  "DATA_CARRIER_TYPE_BINDER_1INCHRING",
		60:  "DATA_CARRIER_TYPE_BINDER_1_5INCHRING",
		61:  "DATA_CARRIER_TYPE_BINDER_0_5INCHRING",
		62:  "DATA_CARRIER_TYPE_BINDER_2INCHRING",
		63:  "DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM",
		64:  "DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		65:  "DATA_CARRIER_TYPE_CDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		66:  "DATA_CARRIER_TYPE_CDROMDIGITALDATADISK",
		67:  "DATA_CARRIER_TYPE_CDIINTERACTIVEMULTIMEDIADIGITALDATADISK",
		68:  "DATA_CARRIER_TYPE_COMPACTCASSETTEANALOGAUDIOTAPE",
		69:  "DATA_CARRIER_TYPE_DAT160DIGITALSTORAGETAPE",
		70:  "DATA_CARRIER_TYPE_DAT320DIGITALSTORAGETAPE",
		71:  "DATA_CARRIER_TYPE_DAT72DIGITALSTORAGETAPE",
		72:  "DATA_CARRIER_TYPE_DDS_1DIGITALDATATAPE",
		73:  "DATA_CARRIER_TYPE_DDS_2DIGITALDATATAPE",
		74:  "DATA_CARRIER_TYPE_DDS_3DIGITALDATATAPE",
		75:  "DATA_CARRIER_TYPE_DDS_4DIGITALDATATAPE",
		76:  "DATA_CARRIER_TYPE_DLT_IIIDIGITALDATATAPE",
		77:  "DATA_CARRIER_TYPE_DLT_IVDIGITALDATATAPE",
		78:  "DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_MINICASSETTE",
		79:  "DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_NORMALCASSETTE",
		80:  "DATA_CARRIER_TYPE_DVCAMDIGITALVIDEOTAPE",
		81:  "DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_LARGECASSETTE",
		82:  "DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_MEDIUMCASSETTE",
		83:  "DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_SMALLCASSETTE",
		84:  "DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_EXTRALARGECASSETTE",
		85:  "DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_LARGECASSETTE",
		86:  "DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM",
		87:  "DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		88:  "DATA_CARRIER_TYPE_DVD_PLUS_RWREWRITABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		89:  "DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM",
		90:  "DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		91:  "DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKDOUBLESIDED",
		92:  "DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKSINGLESIDED",
		93:  "DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_LARGECASSETTE",
		94:  "DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_SMALLCASSETTE",
		95:  "DATA_CARRIER_TYPE_DIGITALAUDIOTAPE",
		96:  "DATA_CARRIER_TYPE_DIGITALCOMPACTCASSETTE",
		97:  "DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_COMPACTCASSETTE",
		98:  "DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_STANDARDCASSETTE",
		99:  "DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH",
		100: "DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH",
		101: "DATA_CARRIER_TYPE_ENVELOPE",
		102: "DATA_CARRIER_TYPE_EXABYTE8500SERIESDIGITALDATATAPE",
		103: "DATA_CARRIER_TYPE_EXABYTE8700SERIESDIGITALDATATAPE",
		104: "DATA_CARRIER_TYPE_EXABYTE8900SERIESDIGITALDATATAPE",
		105: "DATA_CARRIER_TYPE_EXABYTEMAMMOTHDIGITALDATATAPE",
		106: "DATA_CARRIER_TYPE_FILESYSTEM",
		107: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH",
		108: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH",
		109: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH",
		110: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH",
		111: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH",
		112: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		113: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_12CM",
		114: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_8CM",
		115: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_12CM",
		116: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_8CM",
		117: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM",
		118: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_8CM",
		119: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		120: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_8CM",
		121: "DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_LARGECASSETTE",
		122: "DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_SMALLCASSETTE",
		123: "DATA_CARRIER_TYPE_HDCAMDIGITALVIDEOTAPE",
		124: "DATA_CARRIER_TYPE_HDVHDTVDIGITALVIDEOTAPE",
		125: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB2_0INTERFACE",
		126: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB3_0INTERFACE",
		127: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSBINTERFACE",
		128: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIREINTERFACE",
		129: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE",
		130: "DATA_CARRIER_TYPE_HARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		131: "DATA_CARRIER_TYPE_HARDDISKDRIVE_UNSPECIFIEDINTERFACE",
		132: "DATA_CARRIER_TYPE_HI_8ANALOGVIDEOTAPE",
		133: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE",
		134: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE",
		135: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSBINTERFACE",
		136: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE",
		137: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE",
		138: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USB_SATAINTERFACE",
		139: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		140: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE",
		141: "DATA_CARRIER_TYPE_JAZDIGITALDATADISK",
		142: "DATA_CARRIER_TYPE_LTO_1ULTRIUMDIGITALDATATAPE",
		143: "DATA_CARRIER_TYPE_LTO_2ULTRIUMDIGITALDATATAPE",
		144: "DATA_CARRIER_TYPE_LTO_3ULTRIUMDIGITALDATATAPE",
		145: "DATA_CARRIER_TYPE_LTO_4ULTRIUMDIGITALDATATAPE",
		146: "DATA_CARRIER_TYPE_LTO_5ULTRIUMDIGITALDATATAPE",
		147: "DATA_CARRIER_TYPE_LTO_6ULTRIUMDIGITALDATATAPE",
		148: "DATA_CARRIER_TYPE_LTO_7ULTRIUMDIGITALDATATAPE",
		149: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_10INCH",
		150: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_12INCH",
		151: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_14INCH",
		152: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_16INCH",
		153: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_7INCH",
		154: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		155: "DATA_CARRIER_TYPE_LASERDISCOPTICALDISKSINGLESIDED",
		156: "DATA_CARRIER_TYPE_MINIDISK",
		157: "DATA_CARRIER_TYPE_MODISK_1_3GB",
		158: "DATA_CARRIER_TYPE_MODISK_1200MB",
		159: "DATA_CARRIER_TYPE_MODISK_2_6GB",
		160: "DATA_CARRIER_TYPE_MODISK_540MB",
		161: "DATA_CARRIER_TYPE_MODISK_650MB",
		162: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH",
		163: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH",
		164: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH",
		165: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH",
		166: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH",
		167: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		168: "DATA_CARRIER_TYPE_PREMASTERCD",
		169: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE",
		170: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE",
		171: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE",
		172: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		173: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE",
		174: "DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_COMPACTCASSETTE",
		175: "DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_STANDARDCASSETTE",
		176: "DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE",
		177: "DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		178: "DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE",
		179: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL50PININTERFACE",
		180: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL68PININTERFACE",
		181: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALCENTRONIXINTERFACE",
		182: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE",
		183: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		184: "DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL50PININTERFACE",
		185: "DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL68PININTERFACE",
		186: "DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL80PININTERFACE",
		187: "DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		188: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_10INCH",
		189: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_12INCH",
		190: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_14INCH",
		191: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_16INCH",
		192: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_7INCH",
		193: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		194: "DATA_CARRIER_TYPE_SINGLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH",
		195: "DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH",
		196: "DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH",
		197: "DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_8INCH",
		198: "DATA_CARRIER_TYPE_SOLIDSTATEMEMORYSTORAGECARDS",
		199: "DATA_CARRIER_TYPE_STORAGEBOX_1_2CUBICFEET",
		200: "DATA_CARRIER_TYPE_STORAGEBOX_2_0CUBICFEET",
		201: "DATA_CARRIER_TYPE_STORAGEBOX",
		202: "DATA_CARRIER_TYPE_STORAGECONTAINER_1_2CUBICFEET",
		203: "DATA_CARRIER_TYPE_STORAGECONTAINER_2_0CUBICFEET",
		204: "DATA_CARRIER_TYPE_STORAGECONTAINER",
		205: "DATA_CARRIER_TYPE_SUPER16MMPICTUREANALOGVIDEOFILMREEL",
		206: "DATA_CARRIER_TYPE_SUPER8MMPICTUREANALOGVIDEOFILMREEL",
		207: "DATA_CARRIER_TYPE_UMATICSPANALOGVIDEOTAPE_SMALLCASSETTE",
		208: "DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_LARGECASSETTE",
		209: "DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_SMALLCASSETTE",
		210: "DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_COMPACTCASSETTE",
		211: "DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_STANDARDCASSETTE",
		212: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_10INCH",
		213: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_12INCH",
		214: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_14INCH",
		215: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_16INCH",
		216: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_7INCH",
		217: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		218: "DATA_CARRIER_TYPE_VXA_1DIGITALDATATAPE",
		219: "DATA_CARRIER_TYPE_VXA_2DIGITALDATATAPE",
		220: "DATA_CARRIER_TYPE_VXA_3DIGITALDATATAPE",
		221: "DATA_CARRIER_TYPE_WAXCYLINDERPHONOGRAMANALOGAUDIODISK",
		222: "DATA_CARRIER_TYPE_XDCAMREWRITABLEOPTICALDISK",
		223: "DATA_CARRIER_TYPE_ZIPDIGITALDATADISK",
	}
	DataCarrierType_value = map[string]int32{
		"DATA_CARRIER_TYPE_UNSPECIFIED":                                                  0,
		"DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_10_5INCHREEL":                          1,
		"DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_7INCHREEL":                             2,
		"DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE":                   3,
		"DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_LARGEREEL":                             4,
		"DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_MEDIUMREEL":                            5,
		"DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_SMALLREEL":                             6,
		"DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE":                   7,
		"DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_10_5INCHREEL":                         8,
		"DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_7INCHREEL":                            9,
		"DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE":                  10,
		"DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_10_5INCHREEL":                        11,
		"DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_7INCHREEL":                           12,
		"DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE":                 13,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_10_5INCHREEL":                       14,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_7INCHREEL":                          15,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE":                16,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_LARGECASSETTE":                      17,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE":                     18,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_SMALLCASSETTE":                      19,
		"DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_10_5INCHREEL":                        20,
		"DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_7INCHREEL":                           21,
		"DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE":                 22,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_10_5INCHREEL":                       23,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_7INCHREEL":                          24,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE":                25,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_EXTRALARGECASSETTE":                 26,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_LARGECASSETTE":                      27,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE":                     28,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE":                      29,
		"DATA_CARRIER_TYPE_E_16MMSEPMAGANALOGAUDIOFILMREEL":                              30,
		"DATA_CARRIER_TYPE_E_16MMPICTUREANALOGVIDEOFILMREEL":                             31,
		"DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_10_5INCHREEL":                          32,
		"DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_12INCHREEL":                            33,
		"DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_14INCHREEL":                            34,
		"DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE":                   35,
		"DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_LARGEREEL":                             36,
		"DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_MEDIUMREEL":                            37,
		"DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_SMALLREEL":                             38,
		"DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE":                   39,
		"DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_LARGECASSETTE":                      40,
		"DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE":                     41,
		"DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE":                      42,
		"DATA_CARRIER_TYPE_E_35MMSEPMAGANALOGAUDIOFILMREEL":                              43,
		"DATA_CARRIER_TYPE_E_35MMPICTUREANALOGVIDEOFILMREEL":                             44,
		"DATA_CARRIER_TYPE_E_8MMPICTUREANALOGVIDEOFILMREEL":                              45,
		"DATA_CARRIER_TYPE_AIT_1DIGITALDATATAPE":                                         46,
		"DATA_CARRIER_TYPE_AIT_2DIGITALDATATAPE":                                         47,
		"DATA_CARRIER_TYPE_AIT_3DIGITALDATATAPE":                                         48,
		"DATA_CARRIER_TYPE_AIT_3EXDIGITALDATATAPE":                                       49,
		"DATA_CARRIER_TYPE_AIT_4DIGITALDATATAPE":                                         50,
		"DATA_CARRIER_TYPE_AIT_5DIGITALDATATAPE":                                         51,
		"DATA_CARRIER_TYPE_BERNOULLIDISK_20MB":                                           52,
		"DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_LARGECASSETTE":                       53,
		"DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_SMALLCASSETTE":                       54,
		"DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_LARGECASSETTE":                      55,
		"DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_SMALLCASSETTE":                      56,
		"DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_LARGECASSETTE":                         57,
		"DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_SMALLCASSETTE":                         58,
		"DATA_CARRIER_TYPE_BINDER_1INCHRING":                                             59,
		"DATA_CARRIER_TYPE_BINDER_1_5INCHRING":                                           60,
		"DATA_CARRIER_TYPE_BINDER_0_5INCHRING":                                           61,
		"DATA_CARRIER_TYPE_BINDER_2INCHRING":                                             62,
		"DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM":      63,
		"DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":      64,
		"DATA_CARRIER_TYPE_CDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":         65,
		"DATA_CARRIER_TYPE_CDROMDIGITALDATADISK":                                         66,
		"DATA_CARRIER_TYPE_CDIINTERACTIVEMULTIMEDIADIGITALDATADISK":                      67,
		"DATA_CARRIER_TYPE_COMPACTCASSETTEANALOGAUDIOTAPE":                               68,
		"DATA_CARRIER_TYPE_DAT160DIGITALSTORAGETAPE":                                     69,
		"DATA_CARRIER_TYPE_DAT320DIGITALSTORAGETAPE":                                     70,
		"DATA_CARRIER_TYPE_DAT72DIGITALSTORAGETAPE":                                      71,
		"DATA_CARRIER_TYPE_DDS_1DIGITALDATATAPE":                                         72,
		"DATA_CARRIER_TYPE_DDS_2DIGITALDATATAPE":                                         73,
		"DATA_CARRIER_TYPE_DDS_3DIGITALDATATAPE":                                         74,
		"DATA_CARRIER_TYPE_DDS_4DIGITALDATATAPE":                                         75,
		"DATA_CARRIER_TYPE_DLT_IIIDIGITALDATATAPE":                                       76,
		"DATA_CARRIER_TYPE_DLT_IVDIGITALDATATAPE":                                        77,
		"DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_MINICASSETTE":                              78,
		"DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_NORMALCASSETTE":                            79,
		"DATA_CARRIER_TYPE_DVCAMDIGITALVIDEOTAPE":                                        80,
		"DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_LARGECASSETTE":                       81,
		"DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_MEDIUMCASSETTE":                      82,
		"DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_SMALLCASSETTE":                       83,
		"DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_EXTRALARGECASSETTE":                  84,
		"DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_LARGECASSETTE":                       85,
		"DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM":  86,
		"DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":  87,
		"DATA_CARRIER_TYPE_DVD_PLUS_RWREWRITABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM": 88,
		"DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM":        89,
		"DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":        90,
		"DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKDOUBLESIDED":                       91,
		"DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKSINGLESIDED":                       92,
		"DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_LARGECASSETTE":                 93,
		"DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_SMALLCASSETTE":                 94,
		"DATA_CARRIER_TYPE_DIGITALAUDIOTAPE":                                             95,
		"DATA_CARRIER_TYPE_DIGITALCOMPACTCASSETTE":                                       96,
		"DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_COMPACTCASSETTE":                     97,
		"DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_STANDARDCASSETTE":                    98,
		"DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH":        99,
		"DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH":       100,
		"DATA_CARRIER_TYPE_ENVELOPE":                                                     101,
		"DATA_CARRIER_TYPE_EXABYTE8500SERIESDIGITALDATATAPE":                             102,
		"DATA_CARRIER_TYPE_EXABYTE8700SERIESDIGITALDATATAPE":                             103,
		"DATA_CARRIER_TYPE_EXABYTE8900SERIESDIGITALDATATAPE":                             104,
		"DATA_CARRIER_TYPE_EXABYTEMAMMOTHDIGITALDATATAPE":                                105,
		"DATA_CARRIER_TYPE_FILESYSTEM":                                                   106,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH":            107,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH":            108,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH":            109,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH":            110,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH":             111,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":   112,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_12CM":       113,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_8CM":        114,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_12CM":       115,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_8CM":        116,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM":       117,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_8CM":        118,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":       119,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_8CM":        120,
		"DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_LARGECASSETTE":                        121,
		"DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_SMALLCASSETTE":                        122,
		"DATA_CARRIER_TYPE_HDCAMDIGITALVIDEOTAPE":                                        123,
		"DATA_CARRIER_TYPE_HDVHDTVDIGITALVIDEOTAPE":                                      124,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB2_0INTERFACE":                        125,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB3_0INTERFACE":                        126,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSBINTERFACE":                           127,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIREINTERFACE":                      128,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE":                  129,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":                   130,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_UNSPECIFIEDINTERFACE":                           131,
		"DATA_CARRIER_TYPE_HI_8ANALOGVIDEOTAPE":                                          132,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE":                  133,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE":                  134,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSBINTERFACE":                     135,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE":                136,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE":            137,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USB_SATAINTERFACE":       138,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":             139,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE":             140,
		"DATA_CARRIER_TYPE_JAZDIGITALDATADISK":                                           141,
		"DATA_CARRIER_TYPE_LTO_1ULTRIUMDIGITALDATATAPE":                                  142,
		"DATA_CARRIER_TYPE_LTO_2ULTRIUMDIGITALDATATAPE":                                  143,
		"DATA_CARRIER_TYPE_LTO_3ULTRIUMDIGITALDATATAPE":                                  144,
		"DATA_CARRIER_TYPE_LTO_4ULTRIUMDIGITALDATATAPE":                                  145,
		"DATA_CARRIER_TYPE_LTO_5ULTRIUMDIGITALDATATAPE":                                  146,
		"DATA_CARRIER_TYPE_LTO_6ULTRIUMDIGITALDATATAPE":                                  147,
		"DATA_CARRIER_TYPE_LTO_7ULTRIUMDIGITALDATATAPE":                                  148,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_10INCH":                      149,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_12INCH":                      150,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_14INCH":                      151,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_16INCH":                      152,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_7INCH":                       153,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":             154,
		"DATA_CARRIER_TYPE_LASERDISCOPTICALDISKSINGLESIDED":                              155,
		"DATA_CARRIER_TYPE_MINIDISK":                                                     156,
		"DATA_CARRIER_TYPE_MODISK_1_3GB":                                                 157,
		"DATA_CARRIER_TYPE_MODISK_1200MB":                                                158,
		"DATA_CARRIER_TYPE_MODISK_2_6GB":                                                 159,
		"DATA_CARRIER_TYPE_MODISK_540MB":                                                 160,
		"DATA_CARRIER_TYPE_MODISK_650MB":                                                 161,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH":            162,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH":            163,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH":            164,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH":            165,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH":             166,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":   167,
		"DATA_CARRIER_TYPE_PREMASTERCD":                                                  168,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE":                   169,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE":                   170,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE":                 171,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":              172,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE":              173,
		"DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_COMPACTCASSETTE":                         174,
		"DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_STANDARDCASSETTE":                        175,
		"DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE":                     176,
		"DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":              177,
		"DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE":              178,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL50PININTERFACE":                   179,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL68PININTERFACE":                   180,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALCENTRONIXINTERFACE":               181,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE":                    182,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":             183,
		"DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL50PININTERFACE":               184,
		"DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL68PININTERFACE":               185,
		"DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL80PININTERFACE":               186,
		"DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":         187,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_10INCH":                      188,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_12INCH":                      189,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_14INCH":                      190,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_16INCH":                      191,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_7INCH":                       192,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":             193,
		"DATA_CARRIER_TYPE_SINGLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH":        194,
		"DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH":        195,
		"DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH":       196,
		"DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_8INCH":          197,
		"DATA_CARRIER_TYPE_SOLIDSTATEMEMORYSTORAGECARDS":                                 198,
		"DATA_CARRIER_TYPE_STORAGEBOX_1_2CUBICFEET":                                      199,
		"DATA_CARRIER_TYPE_STORAGEBOX_2_0CUBICFEET":                                      200,
		"DATA_CARRIER_TYPE_STORAGEBOX":                                                   201,
		"DATA_CARRIER_TYPE_STORAGECONTAINER_1_2CUBICFEET":                                202,
		"DATA_CARRIER_TYPE_STORAGECONTAINER_2_0CUBICFEET":                                203,
		"DATA_CARRIER_TYPE_STORAGECONTAINER":                                             204,
		"DATA_CARRIER_TYPE_SUPER16MMPICTUREANALOGVIDEOFILMREEL":                          205,
		"DATA_CARRIER_TYPE_SUPER8MMPICTUREANALOGVIDEOFILMREEL":                           206,
		"DATA_CARRIER_TYPE_UMATICSPANALOGVIDEOTAPE_SMALLCASSETTE":                        207,
		"DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_LARGECASSETTE":                          208,
		"DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_SMALLCASSETTE":                          209,
		"DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_COMPACTCASSETTE":                           210,
		"DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_STANDARDCASSETTE":                          211,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_10INCH":                        212,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_12INCH":                        213,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_14INCH":                        214,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_16INCH":                        215,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_7INCH":                         216,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":               217,
		"DATA_CARRIER_TYPE_VXA_1DIGITALDATATAPE":                                         218,
		"DATA_CARRIER_TYPE_VXA_2DIGITALDATATAPE":                                         219,
		"DATA_CARRIER_TYPE_VXA_3DIGITALDATATAPE":                                         220,
		"DATA_CARRIER_TYPE_WAXCYLINDERPHONOGRAMANALOGAUDIODISK":                          221,
		"DATA_CARRIER_TYPE_XDCAMREWRITABLEOPTICALDISK":                                   222,
		"DATA_CARRIER_TYPE_ZIPDIGITALDATADISK":                                           223,
	}
)

func (x DataCarrierType) Enum() *DataCarrierType {
	p := new(DataCarrierType)
	*p = x
	return p
}

func (x DataCarrierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataCarrierType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[41].Descriptor()
}

func (DataCarrierType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[41]
}

func (x DataCarrierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataCarrierType.Descriptor instead.
func (DataCarrierType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{41}
}

type DdexTerritoryCode int32

const (
	DdexTerritoryCode_DDEX_TERRITORY_CODE_UNSPECIFIED DdexTerritoryCode = 0
	DdexTerritoryCode_DDEX_TERRITORY_CODE_XK          DdexTerritoryCode = 1
	DdexTerritoryCode_DDEX_TERRITORY_CODE_WORLDWIDE   DdexTerritoryCode = 2
)

// Enum value maps for DdexTerritoryCode.
var (
	DdexTerritoryCode_name = map[int32]string{
		0: "DDEX_TERRITORY_CODE_UNSPECIFIED",
		1: "DDEX_TERRITORY_CODE_XK",
		2: "DDEX_TERRITORY_CODE_WORLDWIDE",
	}
	DdexTerritoryCode_value = map[string]int32{
		"DDEX_TERRITORY_CODE_UNSPECIFIED": 0,
		"DDEX_TERRITORY_CODE_XK":          1,
		"DDEX_TERRITORY_CODE_WORLDWIDE":   2,
	}
)

func (x DdexTerritoryCode) Enum() *DdexTerritoryCode {
	p := new(DdexTerritoryCode)
	*p = x
	return p
}

func (x DdexTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DdexTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[42].Descriptor()
}

func (DdexTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[42]
}

func (x DdexTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DdexTerritoryCode.Descriptor instead.
func (DdexTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{42}
}

type DeprecatedCurrencyCode int32

const (
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_UNSPECIFIED DeprecatedCurrencyCode = 0
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_CYP         DeprecatedCurrencyCode = 1
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_EEK         DeprecatedCurrencyCode = 2
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_LTL         DeprecatedCurrencyCode = 3
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_LVL         DeprecatedCurrencyCode = 4
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_MTL         DeprecatedCurrencyCode = 5
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_MRO         DeprecatedCurrencyCode = 6
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_ROL         DeprecatedCurrencyCode = 7
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_SIT         DeprecatedCurrencyCode = 8
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_SKK         DeprecatedCurrencyCode = 9
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_STD         DeprecatedCurrencyCode = 10
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_VEF         DeprecatedCurrencyCode = 11
)

// Enum value maps for DeprecatedCurrencyCode.
var (
	DeprecatedCurrencyCode_name = map[int32]string{
		0:  "DEPRECATED_CURRENCY_CODE_UNSPECIFIED",
		1:  "DEPRECATED_CURRENCY_CODE_CYP",
		2:  "DEPRECATED_CURRENCY_CODE_EEK",
		3:  "DEPRECATED_CURRENCY_CODE_LTL",
		4:  "DEPRECATED_CURRENCY_CODE_LVL",
		5:  "DEPRECATED_CURRENCY_CODE_MTL",
		6:  "DEPRECATED_CURRENCY_CODE_MRO",
		7:  "DEPRECATED_CURRENCY_CODE_ROL",
		8:  "DEPRECATED_CURRENCY_CODE_SIT",
		9:  "DEPRECATED_CURRENCY_CODE_SKK",
		10: "DEPRECATED_CURRENCY_CODE_STD",
		11: "DEPRECATED_CURRENCY_CODE_VEF",
	}
	DeprecatedCurrencyCode_value = map[string]int32{
		"DEPRECATED_CURRENCY_CODE_UNSPECIFIED": 0,
		"DEPRECATED_CURRENCY_CODE_CYP":         1,
		"DEPRECATED_CURRENCY_CODE_EEK":         2,
		"DEPRECATED_CURRENCY_CODE_LTL":         3,
		"DEPRECATED_CURRENCY_CODE_LVL":         4,
		"DEPRECATED_CURRENCY_CODE_MTL":         5,
		"DEPRECATED_CURRENCY_CODE_MRO":         6,
		"DEPRECATED_CURRENCY_CODE_ROL":         7,
		"DEPRECATED_CURRENCY_CODE_SIT":         8,
		"DEPRECATED_CURRENCY_CODE_SKK":         9,
		"DEPRECATED_CURRENCY_CODE_STD":         10,
		"DEPRECATED_CURRENCY_CODE_VEF":         11,
	}
)

func (x DeprecatedCurrencyCode) Enum() *DeprecatedCurrencyCode {
	p := new(DeprecatedCurrencyCode)
	*p = x
	return p
}

func (x DeprecatedCurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedCurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[43].Descriptor()
}

func (DeprecatedCurrencyCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[43]
}

func (x DeprecatedCurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedCurrencyCode.Descriptor instead.
func (DeprecatedCurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{43}
}

type DeprecatedIsoTerritoryCode int32

const (
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED DeprecatedIsoTerritoryCode = 0
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_AIDJ        DeprecatedIsoTerritoryCode = 1
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_ANHH        DeprecatedIsoTerritoryCode = 2
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_BQAQ        DeprecatedIsoTerritoryCode = 3
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_BUMM        DeprecatedIsoTerritoryCode = 4
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_BYAA        DeprecatedIsoTerritoryCode = 5
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_CSHH        DeprecatedIsoTerritoryCode = 6
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_CSXX        DeprecatedIsoTerritoryCode = 7
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_CTKI        DeprecatedIsoTerritoryCode = 8
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_DDDE        DeprecatedIsoTerritoryCode = 9
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_DYBJ        DeprecatedIsoTerritoryCode = 10
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_FQHH        DeprecatedIsoTerritoryCode = 11
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_FXFR        DeprecatedIsoTerritoryCode = 12
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_GEHH        DeprecatedIsoTerritoryCode = 13
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_HVBF        DeprecatedIsoTerritoryCode = 14
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_JTUM        DeprecatedIsoTerritoryCode = 15
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_MIUM        DeprecatedIsoTerritoryCode = 16
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_NHVU        DeprecatedIsoTerritoryCode = 17
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_NQAQ        DeprecatedIsoTerritoryCode = 18
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_NTHH        DeprecatedIsoTerritoryCode = 19
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_PCHH        DeprecatedIsoTerritoryCode = 20
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_PUUM        DeprecatedIsoTerritoryCode = 21
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_PZPA        DeprecatedIsoTerritoryCode = 22
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_RHZW        DeprecatedIsoTerritoryCode = 23
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_SKIN        DeprecatedIsoTerritoryCode = 24
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_SUHH        DeprecatedIsoTerritoryCode = 25
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_TPTL        DeprecatedIsoTerritoryCode = 26
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_VDVN        DeprecatedIsoTerritoryCode = 27
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_WKUM        DeprecatedIsoTerritoryCode = 28
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_YDYE        DeprecatedIsoTerritoryCode = 29
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_YUCS        DeprecatedIsoTerritoryCode = 30
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_ZRCD        DeprecatedIsoTerritoryCode = 31
)

// Enum value maps for DeprecatedIsoTerritoryCode.
var (
	DeprecatedIsoTerritoryCode_name = map[int32]string{
		0:  "DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED",
		1:  "DEPRECATED_ISO_TERRITORY_CODE_AIDJ",
		2:  "DEPRECATED_ISO_TERRITORY_CODE_ANHH",
		3:  "DEPRECATED_ISO_TERRITORY_CODE_BQAQ",
		4:  "DEPRECATED_ISO_TERRITORY_CODE_BUMM",
		5:  "DEPRECATED_ISO_TERRITORY_CODE_BYAA",
		6:  "DEPRECATED_ISO_TERRITORY_CODE_CSHH",
		7:  "DEPRECATED_ISO_TERRITORY_CODE_CSXX",
		8:  "DEPRECATED_ISO_TERRITORY_CODE_CTKI",
		9:  "DEPRECATED_ISO_TERRITORY_CODE_DDDE",
		10: "DEPRECATED_ISO_TERRITORY_CODE_DYBJ",
		11: "DEPRECATED_ISO_TERRITORY_CODE_FQHH",
		12: "DEPRECATED_ISO_TERRITORY_CODE_FXFR",
		13: "DEPRECATED_ISO_TERRITORY_CODE_GEHH",
		14: "DEPRECATED_ISO_TERRITORY_CODE_HVBF",
		15: "DEPRECATED_ISO_TERRITORY_CODE_JTUM",
		16: "DEPRECATED_ISO_TERRITORY_CODE_MIUM",
		17: "DEPRECATED_ISO_TERRITORY_CODE_NHVU",
		18: "DEPRECATED_ISO_TERRITORY_CODE_NQAQ",
		19: "DEPRECATED_ISO_TERRITORY_CODE_NTHH",
		20: "DEPRECATED_ISO_TERRITORY_CODE_PCHH",
		21: "DEPRECATED_ISO_TERRITORY_CODE_PUUM",
		22: "DEPRECATED_ISO_TERRITORY_CODE_PZPA",
		23: "DEPRECATED_ISO_TERRITORY_CODE_RHZW",
		24: "DEPRECATED_ISO_TERRITORY_CODE_SKIN",
		25: "DEPRECATED_ISO_TERRITORY_CODE_SUHH",
		26: "DEPRECATED_ISO_TERRITORY_CODE_TPTL",
		27: "DEPRECATED_ISO_TERRITORY_CODE_VDVN",
		28: "DEPRECATED_ISO_TERRITORY_CODE_WKUM",
		29: "DEPRECATED_ISO_TERRITORY_CODE_YDYE",
		30: "DEPRECATED_ISO_TERRITORY_CODE_YUCS",
		31: "DEPRECATED_ISO_TERRITORY_CODE_ZRCD",
	}
	DeprecatedIsoTerritoryCode_value = map[string]int32{
		"DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED": 0,
		"DEPRECATED_ISO_TERRITORY_CODE_AIDJ":        1,
		"DEPRECATED_ISO_TERRITORY_CODE_ANHH":        2,
		"DEPRECATED_ISO_TERRITORY_CODE_BQAQ":        3,
		"DEPRECATED_ISO_TERRITORY_CODE_BUMM":        4,
		"DEPRECATED_ISO_TERRITORY_CODE_BYAA":        5,
		"DEPRECATED_ISO_TERRITORY_CODE_CSHH":        6,
		"DEPRECATED_ISO_TERRITORY_CODE_CSXX":        7,
		"DEPRECATED_ISO_TERRITORY_CODE_CTKI":        8,
		"DEPRECATED_ISO_TERRITORY_CODE_DDDE":        9,
		"DEPRECATED_ISO_TERRITORY_CODE_DYBJ":        10,
		"DEPRECATED_ISO_TERRITORY_CODE_FQHH":        11,
		"DEPRECATED_ISO_TERRITORY_CODE_FXFR":        12,
		"DEPRECATED_ISO_TERRITORY_CODE_GEHH":        13,
		"DEPRECATED_ISO_TERRITORY_CODE_HVBF":        14,
		"DEPRECATED_ISO_TERRITORY_CODE_JTUM":        15,
		"DEPRECATED_ISO_TERRITORY_CODE_MIUM":        16,
		"DEPRECATED_ISO_TERRITORY_CODE_NHVU":        17,
		"DEPRECATED_ISO_TERRITORY_CODE_NQAQ":        18,
		"DEPRECATED_ISO_TERRITORY_CODE_NTHH":        19,
		"DEPRECATED_ISO_TERRITORY_CODE_PCHH":        20,
		"DEPRECATED_ISO_TERRITORY_CODE_PUUM":        21,
		"DEPRECATED_ISO_TERRITORY_CODE_PZPA":        22,
		"DEPRECATED_ISO_TERRITORY_CODE_RHZW":        23,
		"DEPRECATED_ISO_TERRITORY_CODE_SKIN":        24,
		"DEPRECATED_ISO_TERRITORY_CODE_SUHH":        25,
		"DEPRECATED_ISO_TERRITORY_CODE_TPTL":        26,
		"DEPRECATED_ISO_TERRITORY_CODE_VDVN":        27,
		"DEPRECATED_ISO_TERRITORY_CODE_WKUM":        28,
		"DEPRECATED_ISO_TERRITORY_CODE_YDYE":        29,
		"DEPRECATED_ISO_TERRITORY_CODE_YUCS":        30,
		"DEPRECATED_ISO_TERRITORY_CODE_ZRCD":        31,
	}
)

func (x DeprecatedIsoTerritoryCode) Enum() *DeprecatedIsoTerritoryCode {
	p := new(DeprecatedIsoTerritoryCode)
	*p = x
	return p
}

func (x DeprecatedIsoTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedIsoTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[44].Descriptor()
}

func (DeprecatedIsoTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[44]
}

func (x DeprecatedIsoTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedIsoTerritoryCode.Descriptor instead.
func (DeprecatedIsoTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{44}
}

type DeprecatedReleaseType int32

const (
	DeprecatedReleaseType_DEPRECATED_RELEASE_TYPE_UNSPECIFIED  DeprecatedReleaseType = 0
	DeprecatedReleaseType_DEPRECATED_RELEASE_TYPE_TRACKRELEASE DeprecatedReleaseType = 1
)

// Enum value maps for DeprecatedReleaseType.
var (
	DeprecatedReleaseType_name = map[int32]string{
		0: "DEPRECATED_RELEASE_TYPE_UNSPECIFIED",
		1: "DEPRECATED_RELEASE_TYPE_TRACKRELEASE",
	}
	DeprecatedReleaseType_value = map[string]int32{
		"DEPRECATED_RELEASE_TYPE_UNSPECIFIED":  0,
		"DEPRECATED_RELEASE_TYPE_TRACKRELEASE": 1,
	}
)

func (x DeprecatedReleaseType) Enum() *DeprecatedReleaseType {
	p := new(DeprecatedReleaseType)
	*p = x
	return p
}

func (x DeprecatedReleaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedReleaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[45].Descriptor()
}

func (DeprecatedReleaseType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[45]
}

func (x DeprecatedReleaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedReleaseType.Descriptor instead.
func (DeprecatedReleaseType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{45}
}

type DigitizationMode int32

const (
	DigitizationMode_DIGITIZATION_MODE_UNSPECIFIED DigitizationMode = 0
	DigitizationMode_DIGITIZATION_MODE_AAD         DigitizationMode = 1
	DigitizationMode_DIGITIZATION_MODE_ADD         DigitizationMode = 2
	DigitizationMode_DIGITIZATION_MODE_DDD         DigitizationMode = 3
	DigitizationMode_DIGITIZATION_MODE_UNKNOWN     DigitizationMode = 4
)

// Enum value maps for DigitizationMode.
var (
	DigitizationMode_name = map[int32]string{
		0: "DIGITIZATION_MODE_UNSPECIFIED",
		1: "DIGITIZATION_MODE_AAD",
		2: "DIGITIZATION_MODE_ADD",
		3: "DIGITIZATION_MODE_DDD",
		4: "DIGITIZATION_MODE_UNKNOWN",
	}
	DigitizationMode_value = map[string]int32{
		"DIGITIZATION_MODE_UNSPECIFIED": 0,
		"DIGITIZATION_MODE_AAD":         1,
		"DIGITIZATION_MODE_ADD":         2,
		"DIGITIZATION_MODE_DDD":         3,
		"DIGITIZATION_MODE_UNKNOWN":     4,
	}
)

func (x DigitizationMode) Enum() *DigitizationMode {
	p := new(DigitizationMode)
	*p = x
	return p
}

func (x DigitizationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitizationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[46].Descriptor()
}

func (DigitizationMode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[46]
}

func (x DigitizationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitizationMode.Descriptor instead.
func (DigitizationMode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{46}
}

type DisplayArtistRole int32

const (
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_UNSPECIFIED    DisplayArtistRole = 0
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_ARTIST         DisplayArtistRole = 1
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_FEATUREDARTIST DisplayArtistRole = 2
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_MAINARTIST     DisplayArtistRole = 3
)

// Enum value maps for DisplayArtistRole.
var (
	DisplayArtistRole_name = map[int32]string{
		0: "DISPLAY_ARTIST_ROLE_UNSPECIFIED",
		1: "DISPLAY_ARTIST_ROLE_ARTIST",
		2: "DISPLAY_ARTIST_ROLE_FEATUREDARTIST",
		3: "DISPLAY_ARTIST_ROLE_MAINARTIST",
	}
	DisplayArtistRole_value = map[string]int32{
		"DISPLAY_ARTIST_ROLE_UNSPECIFIED":    0,
		"DISPLAY_ARTIST_ROLE_ARTIST":         1,
		"DISPLAY_ARTIST_ROLE_FEATUREDARTIST": 2,
		"DISPLAY_ARTIST_ROLE_MAINARTIST":     3,
	}
)

func (x DisplayArtistRole) Enum() *DisplayArtistRole {
	p := new(DisplayArtistRole)
	*p = x
	return p
}

func (x DisplayArtistRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayArtistRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[47].Descriptor()
}

func (DisplayArtistRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[47]
}

func (x DisplayArtistRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisplayArtistRole.Descriptor instead.
func (DisplayArtistRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{47}
}

type DistributionChannelType int32

const (
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED       DistributionChannelType = 0
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT     DistributionChannelType = 1
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_BROADCAST         DistributionChannelType = 2
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_CABLE             DistributionChannelType = 3
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_INTERNET          DistributionChannelType = 4
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE DistributionChannelType = 5
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_IPTV              DistributionChannelType = 6
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE   DistributionChannelType = 7
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_NARROWCAST        DistributionChannelType = 8
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM    DistributionChannelType = 9
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER        DistributionChannelType = 10
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_PHYSICAL          DistributionChannelType = 11
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_SATELLITE         DistributionChannelType = 12
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_SIMULCAST         DistributionChannelType = 13
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_UNKNOWN           DistributionChannelType = 14
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_USERDEFINED       DistributionChannelType = 15
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_WEBCAST           DistributionChannelType = 16
)

// Enum value maps for DistributionChannelType.
var (
	DistributionChannelType_name = map[int32]string{
		0:  "DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED",
		1:  "DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT",
		2:  "DISTRIBUTION_CHANNEL_TYPE_BROADCAST",
		3:  "DISTRIBUTION_CHANNEL_TYPE_CABLE",
		4:  "DISTRIBUTION_CHANNEL_TYPE_INTERNET",
		5:  "DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE",
		6:  "DISTRIBUTION_CHANNEL_TYPE_IPTV",
		7:  "DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE",
		8:  "DISTRIBUTION_CHANNEL_TYPE_NARROWCAST",
		9:  "DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM",
		10: "DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER",
		11: "DISTRIBUTION_CHANNEL_TYPE_PHYSICAL",
		12: "DISTRIBUTION_CHANNEL_TYPE_SATELLITE",
		13: "DISTRIBUTION_CHANNEL_TYPE_SIMULCAST",
		14: "DISTRIBUTION_CHANNEL_TYPE_UNKNOWN",
		15: "DISTRIBUTION_CHANNEL_TYPE_USERDEFINED",
		16: "DISTRIBUTION_CHANNEL_TYPE_WEBCAST",
	}
	DistributionChannelType_value = map[string]int32{
		"DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED":       0,
		"DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT":     1,
		"DISTRIBUTION_CHANNEL_TYPE_BROADCAST":         2,
		"DISTRIBUTION_CHANNEL_TYPE_CABLE":             3,
		"DISTRIBUTION_CHANNEL_TYPE_INTERNET":          4,
		"DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE": 5,
		"DISTRIBUTION_CHANNEL_TYPE_IPTV":              6,
		"DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE":   7,
		"DISTRIBUTION_CHANNEL_TYPE_NARROWCAST":        8,
		"DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM":    9,
		"DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER":        10,
		"DISTRIBUTION_CHANNEL_TYPE_PHYSICAL":          11,
		"DISTRIBUTION_CHANNEL_TYPE_SATELLITE":         12,
		"DISTRIBUTION_CHANNEL_TYPE_SIMULCAST":         13,
		"DISTRIBUTION_CHANNEL_TYPE_UNKNOWN":           14,
		"DISTRIBUTION_CHANNEL_TYPE_USERDEFINED":       15,
		"DISTRIBUTION_CHANNEL_TYPE_WEBCAST":           16,
	}
)

func (x DistributionChannelType) Enum() *DistributionChannelType {
	p := new(DistributionChannelType)
	*p = x
	return p
}

func (x DistributionChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DistributionChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[48].Descriptor()
}

func (DistributionChannelType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[48]
}

func (x DistributionChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DistributionChannelType.Descriptor instead.
func (DistributionChannelType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{48}
}

type DocumentTypeLoD int32

const (
	DocumentTypeLoD_DOCUMENT_TYPE_LO_D_UNSPECIFIED       DocumentTypeLoD = 0
	DocumentTypeLoD_DOCUMENT_TYPE_LO_D_LETTEROFDIRECTION DocumentTypeLoD = 1
	DocumentTypeLoD_DOCUMENT_TYPE_LO_D_USERDEFINED       DocumentTypeLoD = 2
)

// Enum value maps for DocumentTypeLoD.
var (
	DocumentTypeLoD_name = map[int32]string{
		0: "DOCUMENT_TYPE_LO_D_UNSPECIFIED",
		1: "DOCUMENT_TYPE_LO_D_LETTEROFDIRECTION",
		2: "DOCUMENT_TYPE_LO_D_USERDEFINED",
	}
	DocumentTypeLoD_value = map[string]int32{
		"DOCUMENT_TYPE_LO_D_UNSPECIFIED":       0,
		"DOCUMENT_TYPE_LO_D_LETTEROFDIRECTION": 1,
		"DOCUMENT_TYPE_LO_D_USERDEFINED":       2,
	}
)

func (x DocumentTypeLoD) Enum() *DocumentTypeLoD {
	p := new(DocumentTypeLoD)
	*p = x
	return p
}

func (x DocumentTypeLoD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentTypeLoD) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[49].Descriptor()
}

func (DocumentTypeLoD) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[49]
}

func (x DocumentTypeLoD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentTypeLoD.Descriptor instead.
func (DocumentTypeLoD) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{49}
}

type DocumentTypeMWL int32

const (
	DocumentTypeMWL_DOCUMENT_TYPE_M_W_L_UNSPECIFIED     DocumentTypeMWL = 0
	DocumentTypeMWL_DOCUMENT_TYPE_M_W_L_CONTRACT        DocumentTypeMWL = 1
	DocumentTypeMWL_DOCUMENT_TYPE_M_W_L_RATECALCULATION DocumentTypeMWL = 2
	DocumentTypeMWL_DOCUMENT_TYPE_M_W_L_USERDEFINED     DocumentTypeMWL = 3
)

// Enum value maps for DocumentTypeMWL.
var (
	DocumentTypeMWL_name = map[int32]string{
		0: "DOCUMENT_TYPE_M_W_L_UNSPECIFIED",
		1: "DOCUMENT_TYPE_M_W_L_CONTRACT",
		2: "DOCUMENT_TYPE_M_W_L_RATECALCULATION",
		3: "DOCUMENT_TYPE_M_W_L_USERDEFINED",
	}
	DocumentTypeMWL_value = map[string]int32{
		"DOCUMENT_TYPE_M_W_L_UNSPECIFIED":     0,
		"DOCUMENT_TYPE_M_W_L_CONTRACT":        1,
		"DOCUMENT_TYPE_M_W_L_RATECALCULATION": 2,
		"DOCUMENT_TYPE_M_W_L_USERDEFINED":     3,
	}
)

func (x DocumentTypeMWL) Enum() *DocumentTypeMWL {
	p := new(DocumentTypeMWL)
	*p = x
	return p
}

func (x DocumentTypeMWL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentTypeMWL) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[50].Descriptor()
}

func (DocumentTypeMWL) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[50]
}

func (x DocumentTypeMWL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentTypeMWL.Descriptor instead.
func (DocumentTypeMWL) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{50}
}

type DpidStatus int32

const (
	DpidStatus_DPID_STATUS_UNSPECIFIED DpidStatus = 0
	DpidStatus_DPID_STATUS_ACTIVE      DpidStatus = 1
	DpidStatus_DPID_STATUS_DELETED     DpidStatus = 2
	DpidStatus_DPID_STATUS_REPLACED    DpidStatus = 3
)

// Enum value maps for DpidStatus.
var (
	DpidStatus_name = map[int32]string{
		0: "DPID_STATUS_UNSPECIFIED",
		1: "DPID_STATUS_ACTIVE",
		2: "DPID_STATUS_DELETED",
		3: "DPID_STATUS_REPLACED",
	}
	DpidStatus_value = map[string]int32{
		"DPID_STATUS_UNSPECIFIED": 0,
		"DPID_STATUS_ACTIVE":      1,
		"DPID_STATUS_DELETED":     2,
		"DPID_STATUS_REPLACED":    3,
	}
)

func (x DpidStatus) Enum() *DpidStatus {
	p := new(DpidStatus)
	*p = x
	return p
}

func (x DpidStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DpidStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[51].Descriptor()
}

func (DpidStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[51]
}

func (x DpidStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DpidStatus.Descriptor instead.
func (DpidStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{51}
}

type DrmEnforcementType int32

const (
	DrmEnforcementType_DRM_ENFORCEMENT_TYPE_UNSPECIFIED    DrmEnforcementType = 0
	DrmEnforcementType_DRM_ENFORCEMENT_TYPE_DRMENFORCED    DrmEnforcementType = 1
	DrmEnforcementType_DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED DrmEnforcementType = 2
)

// Enum value maps for DrmEnforcementType.
var (
	DrmEnforcementType_name = map[int32]string{
		0: "DRM_ENFORCEMENT_TYPE_UNSPECIFIED",
		1: "DRM_ENFORCEMENT_TYPE_DRMENFORCED",
		2: "DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED",
	}
	DrmEnforcementType_value = map[string]int32{
		"DRM_ENFORCEMENT_TYPE_UNSPECIFIED":    0,
		"DRM_ENFORCEMENT_TYPE_DRMENFORCED":    1,
		"DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED": 2,
	}
)

func (x DrmEnforcementType) Enum() *DrmEnforcementType {
	p := new(DrmEnforcementType)
	*p = x
	return p
}

func (x DrmEnforcementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrmEnforcementType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[52].Descriptor()
}

func (DrmEnforcementType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[52]
}

func (x DrmEnforcementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrmEnforcementType.Descriptor instead.
func (DrmEnforcementType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{52}
}

type ElementConfiguration int32

const (
	ElementConfiguration_ELEMENT_CONFIGURATION_UNSPECIFIED            ElementConfiguration = 0
	ElementConfiguration_ELEMENT_CONFIGURATION_E_12TRACK              ElementConfiguration = 1
	ElementConfiguration_ELEMENT_CONFIGURATION_E_16TRACK              ElementConfiguration = 2
	ElementConfiguration_ELEMENT_CONFIGURATION_E_24TRACK              ElementConfiguration = 3
	ElementConfiguration_ELEMENT_CONFIGURATION_E_3TRACK               ElementConfiguration = 4
	ElementConfiguration_ELEMENT_CONFIGURATION_E_32TRACK              ElementConfiguration = 5
	ElementConfiguration_ELEMENT_CONFIGURATION_E_4TRACK               ElementConfiguration = 6
	ElementConfiguration_ELEMENT_CONFIGURATION_E_48TRACK              ElementConfiguration = 7
	ElementConfiguration_ELEMENT_CONFIGURATION_E_6TRACK               ElementConfiguration = 8
	ElementConfiguration_ELEMENT_CONFIGURATION_E_8TRACK               ElementConfiguration = 9
	ElementConfiguration_ELEMENT_CONFIGURATION_ABLETONLIVE            ElementConfiguration = 10
	ElementConfiguration_ELEMENT_CONFIGURATION_BRUARCHIVE             ElementConfiguration = 11
	ElementConfiguration_ELEMENT_CONFIGURATION_BANDEDDISC_INSIDEOUT   ElementConfiguration = 12
	ElementConfiguration_ELEMENT_CONFIGURATION_BANDEDDISC_OUTSIDEIN   ElementConfiguration = 13
	ElementConfiguration_ELEMENT_CONFIGURATION_CUBASE                 ElementConfiguration = 14
	ElementConfiguration_ELEMENT_CONFIGURATION_DATAFILES              ElementConfiguration = 15
	ElementConfiguration_ELEMENT_CONFIGURATION_DIGITALPERFORMER       ElementConfiguration = 16
	ElementConfiguration_ELEMENT_CONFIGURATION_FINALCUTEXPRESS        ElementConfiguration = 17
	ElementConfiguration_ELEMENT_CONFIGURATION_FINALCUTPRO            ElementConfiguration = 18
	ElementConfiguration_ELEMENT_CONFIGURATION_FRUITYLOOPS            ElementConfiguration = 19
	ElementConfiguration_ELEMENT_CONFIGURATION_FULLTRACKMONO          ElementConfiguration = 20
	ElementConfiguration_ELEMENT_CONFIGURATION_GARAGEBAND             ElementConfiguration = 21
	ElementConfiguration_ELEMENT_CONFIGURATION_HALFTRACKMONO          ElementConfiguration = 22
	ElementConfiguration_ELEMENT_CONFIGURATION_HALFTRACKSTEREO        ElementConfiguration = 23
	ElementConfiguration_ELEMENT_CONFIGURATION_HARDCOPY               ElementConfiguration = 24
	ElementConfiguration_ELEMENT_CONFIGURATION_INTERLEAVED5_1FILES    ElementConfiguration = 25
	ElementConfiguration_ELEMENT_CONFIGURATION_INTERLEAVEDSTEREOFILES ElementConfiguration = 26
	ElementConfiguration_ELEMENT_CONFIGURATION_LOGIC                  ElementConfiguration = 27
	ElementConfiguration_ELEMENT_CONFIGURATION_LTFSARCHIVE            ElementConfiguration = 28
	ElementConfiguration_ELEMENT_CONFIGURATION_LTFSBACKUP             ElementConfiguration = 29
	ElementConfiguration_ELEMENT_CONFIGURATION_MEZZOARCHIVE           ElementConfiguration = 30
	ElementConfiguration_ELEMENT_CONFIGURATION_MICROSOFTBACKUP        ElementConfiguration = 31
	ElementConfiguration_ELEMENT_CONFIGURATION_MONOFILES              ElementConfiguration = 32
	ElementConfiguration_ELEMENT_CONFIGURATION_NUENDO                 ElementConfiguration = 33
	ElementConfiguration_ELEMENT_CONFIGURATION_ORANGEBOOK             ElementConfiguration = 34
	ElementConfiguration_ELEMENT_CONFIGURATION_PARIS                  ElementConfiguration = 35
	ElementConfiguration_ELEMENT_CONFIGURATION_PROTOOLS               ElementConfiguration = 36
	ElementConfiguration_ELEMENT_CONFIGURATION_QUARTERTRACKMONO       ElementConfiguration = 37
	ElementConfiguration_ELEMENT_CONFIGURATION_QUARTERTRACKSTEREO     ElementConfiguration = 38
	ElementConfiguration_ELEMENT_CONFIGURATION_QUICKTIME              ElementConfiguration = 39
	ElementConfiguration_ELEMENT_CONFIGURATION_REDBOOK                ElementConfiguration = 40
	ElementConfiguration_ELEMENT_CONFIGURATION_RETROSPECTARCHIVE      ElementConfiguration = 41
	ElementConfiguration_ELEMENT_CONFIGURATION_RETROSPECTCATALOG      ElementConfiguration = 42
	ElementConfiguration_ELEMENT_CONFIGURATION_SPLITSTEREO            ElementConfiguration = 43
	ElementConfiguration_ELEMENT_CONFIGURATION_STUDIOONE              ElementConfiguration = 44
	ElementConfiguration_ELEMENT_CONFIGURATION_TARARCHIVE             ElementConfiguration = 45
	ElementConfiguration_ELEMENT_CONFIGURATION_TARBACKUP              ElementConfiguration = 46
	ElementConfiguration_ELEMENT_CONFIGURATION_TOASTARCHIVE           ElementConfiguration = 47
	ElementConfiguration_ELEMENT_CONFIGURATION_TRACKEDDISC_INSIDEOUT  ElementConfiguration = 48
	ElementConfiguration_ELEMENT_CONFIGURATION_TRACKEDDISC_OUTSIDEIN  ElementConfiguration = 49
	ElementConfiguration_ELEMENT_CONFIGURATION_TWINTRACK              ElementConfiguration = 50
)

// Enum value maps for ElementConfiguration.
var (
	ElementConfiguration_name = map[int32]string{
		0:  "ELEMENT_CONFIGURATION_UNSPECIFIED",
		1:  "ELEMENT_CONFIGURATION_E_12TRACK",
		2:  "ELEMENT_CONFIGURATION_E_16TRACK",
		3:  "ELEMENT_CONFIGURATION_E_24TRACK",
		4:  "ELEMENT_CONFIGURATION_E_3TRACK",
		5:  "ELEMENT_CONFIGURATION_E_32TRACK",
		6:  "ELEMENT_CONFIGURATION_E_4TRACK",
		7:  "ELEMENT_CONFIGURATION_E_48TRACK",
		8:  "ELEMENT_CONFIGURATION_E_6TRACK",
		9:  "ELEMENT_CONFIGURATION_E_8TRACK",
		10: "ELEMENT_CONFIGURATION_ABLETONLIVE",
		11: "ELEMENT_CONFIGURATION_BRUARCHIVE",
		12: "ELEMENT_CONFIGURATION_BANDEDDISC_INSIDEOUT",
		13: "ELEMENT_CONFIGURATION_BANDEDDISC_OUTSIDEIN",
		14: "ELEMENT_CONFIGURATION_CUBASE",
		15: "ELEMENT_CONFIGURATION_DATAFILES",
		16: "ELEMENT_CONFIGURATION_DIGITALPERFORMER",
		17: "ELEMENT_CONFIGURATION_FINALCUTEXPRESS",
		18: "ELEMENT_CONFIGURATION_FINALCUTPRO",
		19: "ELEMENT_CONFIGURATION_FRUITYLOOPS",
		20: "ELEMENT_CONFIGURATION_FULLTRACKMONO",
		21: "ELEMENT_CONFIGURATION_GARAGEBAND",
		22: "ELEMENT_CONFIGURATION_HALFTRACKMONO",
		23: "ELEMENT_CONFIGURATION_HALFTRACKSTEREO",
		24: "ELEMENT_CONFIGURATION_HARDCOPY",
		25: "ELEMENT_CONFIGURATION_INTERLEAVED5_1FILES",
		26: "ELEMENT_CONFIGURATION_INTERLEAVEDSTEREOFILES",
		27: "ELEMENT_CONFIGURATION_LOGIC",
		28: "ELEMENT_CONFIGURATION_LTFSARCHIVE",
		29: "ELEMENT_CONFIGURATION_LTFSBACKUP",
		30: "ELEMENT_CONFIGURATION_MEZZOARCHIVE",
		31: "ELEMENT_CONFIGURATION_MICROSOFTBACKUP",
		32: "ELEMENT_CONFIGURATION_MONOFILES",
		33: "ELEMENT_CONFIGURATION_NUENDO",
		34: "ELEMENT_CONFIGURATION_ORANGEBOOK",
		35: "ELEMENT_CONFIGURATION_PARIS",
		36: "ELEMENT_CONFIGURATION_PROTOOLS",
		37: "ELEMENT_CONFIGURATION_QUARTERTRACKMONO",
		38: "ELEMENT_CONFIGURATION_QUARTERTRACKSTEREO",
		39: "ELEMENT_CONFIGURATION_QUICKTIME",
		40: "ELEMENT_CONFIGURATION_REDBOOK",
		41: "ELEMENT_CONFIGURATION_RETROSPECTARCHIVE",
		42: "ELEMENT_CONFIGURATION_RETROSPECTCATALOG",
		43: "ELEMENT_CONFIGURATION_SPLITSTEREO",
		44: "ELEMENT_CONFIGURATION_STUDIOONE",
		45: "ELEMENT_CONFIGURATION_TARARCHIVE",
		46: "ELEMENT_CONFIGURATION_TARBACKUP",
		47: "ELEMENT_CONFIGURATION_TOASTARCHIVE",
		48: "ELEMENT_CONFIGURATION_TRACKEDDISC_INSIDEOUT",
		49: "ELEMENT_CONFIGURATION_TRACKEDDISC_OUTSIDEIN",
		50: "ELEMENT_CONFIGURATION_TWINTRACK",
	}
	ElementConfiguration_value = map[string]int32{
		"ELEMENT_CONFIGURATION_UNSPECIFIED":            0,
		"ELEMENT_CONFIGURATION_E_12TRACK":              1,
		"ELEMENT_CONFIGURATION_E_16TRACK":              2,
		"ELEMENT_CONFIGURATION_E_24TRACK":              3,
		"ELEMENT_CONFIGURATION_E_3TRACK":               4,
		"ELEMENT_CONFIGURATION_E_32TRACK":              5,
		"ELEMENT_CONFIGURATION_E_4TRACK":               6,
		"ELEMENT_CONFIGURATION_E_48TRACK":              7,
		"ELEMENT_CONFIGURATION_E_6TRACK":               8,
		"ELEMENT_CONFIGURATION_E_8TRACK":               9,
		"ELEMENT_CONFIGURATION_ABLETONLIVE":            10,
		"ELEMENT_CONFIGURATION_BRUARCHIVE":             11,
		"ELEMENT_CONFIGURATION_BANDEDDISC_INSIDEOUT":   12,
		"ELEMENT_CONFIGURATION_BANDEDDISC_OUTSIDEIN":   13,
		"ELEMENT_CONFIGURATION_CUBASE":                 14,
		"ELEMENT_CONFIGURATION_DATAFILES":              15,
		"ELEMENT_CONFIGURATION_DIGITALPERFORMER":       16,
		"ELEMENT_CONFIGURATION_FINALCUTEXPRESS":        17,
		"ELEMENT_CONFIGURATION_FINALCUTPRO":            18,
		"ELEMENT_CONFIGURATION_FRUITYLOOPS":            19,
		"ELEMENT_CONFIGURATION_FULLTRACKMONO":          20,
		"ELEMENT_CONFIGURATION_GARAGEBAND":             21,
		"ELEMENT_CONFIGURATION_HALFTRACKMONO":          22,
		"ELEMENT_CONFIGURATION_HALFTRACKSTEREO":        23,
		"ELEMENT_CONFIGURATION_HARDCOPY":               24,
		"ELEMENT_CONFIGURATION_INTERLEAVED5_1FILES":    25,
		"ELEMENT_CONFIGURATION_INTERLEAVEDSTEREOFILES": 26,
		"ELEMENT_CONFIGURATION_LOGIC":                  27,
		"ELEMENT_CONFIGURATION_LTFSARCHIVE":            28,
		"ELEMENT_CONFIGURATION_LTFSBACKUP":             29,
		"ELEMENT_CONFIGURATION_MEZZOARCHIVE":           30,
		"ELEMENT_CONFIGURATION_MICROSOFTBACKUP":        31,
		"ELEMENT_CONFIGURATION_MONOFILES":              32,
		"ELEMENT_CONFIGURATION_NUENDO":                 33,
		"ELEMENT_CONFIGURATION_ORANGEBOOK":             34,
		"ELEMENT_CONFIGURATION_PARIS":                  35,
		"ELEMENT_CONFIGURATION_PROTOOLS":               36,
		"ELEMENT_CONFIGURATION_QUARTERTRACKMONO":       37,
		"ELEMENT_CONFIGURATION_QUARTERTRACKSTEREO":     38,
		"ELEMENT_CONFIGURATION_QUICKTIME":              39,
		"ELEMENT_CONFIGURATION_REDBOOK":                40,
		"ELEMENT_CONFIGURATION_RETROSPECTARCHIVE":      41,
		"ELEMENT_CONFIGURATION_RETROSPECTCATALOG":      42,
		"ELEMENT_CONFIGURATION_SPLITSTEREO":            43,
		"ELEMENT_CONFIGURATION_STUDIOONE":              44,
		"ELEMENT_CONFIGURATION_TARARCHIVE":             45,
		"ELEMENT_CONFIGURATION_TARBACKUP":              46,
		"ELEMENT_CONFIGURATION_TOASTARCHIVE":           47,
		"ELEMENT_CONFIGURATION_TRACKEDDISC_INSIDEOUT":  48,
		"ELEMENT_CONFIGURATION_TRACKEDDISC_OUTSIDEIN":  49,
		"ELEMENT_CONFIGURATION_TWINTRACK":              50,
	}
)

func (x ElementConfiguration) Enum() *ElementConfiguration {
	p := new(ElementConfiguration)
	*p = x
	return p
}

func (x ElementConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[53].Descriptor()
}

func (ElementConfiguration) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[53]
}

func (x ElementConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementConfiguration.Descriptor instead.
func (ElementConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{53}
}

type ElementDesignation int32

const (
	ElementDesignation_ELEMENT_DESIGNATION_UNSPECIFIED      ElementDesignation = 0
	ElementDesignation_ELEMENT_DESIGNATION_BACKUP           ElementDesignation = 1
	ElementDesignation_ELEMENT_DESIGNATION_CONVENIENCE      ElementDesignation = 2
	ElementDesignation_ELEMENT_DESIGNATION_COPY             ElementDesignation = 3
	ElementDesignation_ELEMENT_DESIGNATION_DOCUMENTATION    ElementDesignation = 4
	ElementDesignation_ELEMENT_DESIGNATION_LONGTERM         ElementDesignation = 5
	ElementDesignation_ELEMENT_DESIGNATION_MASTER           ElementDesignation = 6
	ElementDesignation_ELEMENT_DESIGNATION_SAFETY           ElementDesignation = 7
	ElementDesignation_ELEMENT_DESIGNATION_STORAGECONTAINER ElementDesignation = 8
	ElementDesignation_ELEMENT_DESIGNATION_TRANSFER         ElementDesignation = 9
	ElementDesignation_ELEMENT_DESIGNATION_WORKELEMENT      ElementDesignation = 10
)

// Enum value maps for ElementDesignation.
var (
	ElementDesignation_name = map[int32]string{
		0:  "ELEMENT_DESIGNATION_UNSPECIFIED",
		1:  "ELEMENT_DESIGNATION_BACKUP",
		2:  "ELEMENT_DESIGNATION_CONVENIENCE",
		3:  "ELEMENT_DESIGNATION_COPY",
		4:  "ELEMENT_DESIGNATION_DOCUMENTATION",
		5:  "ELEMENT_DESIGNATION_LONGTERM",
		6:  "ELEMENT_DESIGNATION_MASTER",
		7:  "ELEMENT_DESIGNATION_SAFETY",
		8:  "ELEMENT_DESIGNATION_STORAGECONTAINER",
		9:  "ELEMENT_DESIGNATION_TRANSFER",
		10: "ELEMENT_DESIGNATION_WORKELEMENT",
	}
	ElementDesignation_value = map[string]int32{
		"ELEMENT_DESIGNATION_UNSPECIFIED":      0,
		"ELEMENT_DESIGNATION_BACKUP":           1,
		"ELEMENT_DESIGNATION_CONVENIENCE":      2,
		"ELEMENT_DESIGNATION_COPY":             3,
		"ELEMENT_DESIGNATION_DOCUMENTATION":    4,
		"ELEMENT_DESIGNATION_LONGTERM":         5,
		"ELEMENT_DESIGNATION_MASTER":           6,
		"ELEMENT_DESIGNATION_SAFETY":           7,
		"ELEMENT_DESIGNATION_STORAGECONTAINER": 8,
		"ELEMENT_DESIGNATION_TRANSFER":         9,
		"ELEMENT_DESIGNATION_WORKELEMENT":      10,
	}
)

func (x ElementDesignation) Enum() *ElementDesignation {
	p := new(ElementDesignation)
	*p = x
	return p
}

func (x ElementDesignation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementDesignation) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[54].Descriptor()
}

func (ElementDesignation) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[54]
}

func (x ElementDesignation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementDesignation.Descriptor instead.
func (ElementDesignation) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{54}
}

type EncodingType int32

const (
	EncodingType_ENCODING_TYPE_UNSPECIFIED EncodingType = 0
	EncodingType_ENCODING_TYPE_IPA         EncodingType = 1
	EncodingType_ENCODING_TYPE_USERDEFINED EncodingType = 2
)

// Enum value maps for EncodingType.
var (
	EncodingType_name = map[int32]string{
		0: "ENCODING_TYPE_UNSPECIFIED",
		1: "ENCODING_TYPE_IPA",
		2: "ENCODING_TYPE_USERDEFINED",
	}
	EncodingType_value = map[string]int32{
		"ENCODING_TYPE_UNSPECIFIED": 0,
		"ENCODING_TYPE_IPA":         1,
		"ENCODING_TYPE_USERDEFINED": 2,
	}
)

func (x EncodingType) Enum() *EncodingType {
	p := new(EncodingType)
	*p = x
	return p
}

func (x EncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[55].Descriptor()
}

func (EncodingType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[55]
}

func (x EncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingType.Descriptor instead.
func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{55}
}

type EquipmentType int32

const (
	EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED       EquipmentType = 0
	EquipmentType_EQUIPMENT_TYPE_COMPUTER          EquipmentType = 1
	EquipmentType_EQUIPMENT_TYPE_LOUDSPEAKER       EquipmentType = 2
	EquipmentType_EQUIPMENT_TYPE_MICROPHONE        EquipmentType = 3
	EquipmentType_EQUIPMENT_TYPE_RECORDER          EquipmentType = 4
	EquipmentType_EQUIPMENT_TYPE_SIGNALPROCESSOR   EquipmentType = 5
	EquipmentType_EQUIPMENT_TYPE_SOFTWARE          EquipmentType = 6
	EquipmentType_EQUIPMENT_TYPE_MUSICALINSTRUMENT EquipmentType = 7
)

// Enum value maps for EquipmentType.
var (
	EquipmentType_name = map[int32]string{
		0: "EQUIPMENT_TYPE_UNSPECIFIED",
		1: "EQUIPMENT_TYPE_COMPUTER",
		2: "EQUIPMENT_TYPE_LOUDSPEAKER",
		3: "EQUIPMENT_TYPE_MICROPHONE",
		4: "EQUIPMENT_TYPE_RECORDER",
		5: "EQUIPMENT_TYPE_SIGNALPROCESSOR",
		6: "EQUIPMENT_TYPE_SOFTWARE",
		7: "EQUIPMENT_TYPE_MUSICALINSTRUMENT",
	}
	EquipmentType_value = map[string]int32{
		"EQUIPMENT_TYPE_UNSPECIFIED":       0,
		"EQUIPMENT_TYPE_COMPUTER":          1,
		"EQUIPMENT_TYPE_LOUDSPEAKER":       2,
		"EQUIPMENT_TYPE_MICROPHONE":        3,
		"EQUIPMENT_TYPE_RECORDER":          4,
		"EQUIPMENT_TYPE_SIGNALPROCESSOR":   5,
		"EQUIPMENT_TYPE_SOFTWARE":          6,
		"EQUIPMENT_TYPE_MUSICALINSTRUMENT": 7,
	}
)

func (x EquipmentType) Enum() *EquipmentType {
	p := new(EquipmentType)
	*p = x
	return p
}

func (x EquipmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[56].Descriptor()
}

func (EquipmentType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[56]
}

func (x EquipmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentType.Descriptor instead.
func (EquipmentType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{56}
}

type ErnMessageType int32

const (
	ErnMessageType_ERN_MESSAGE_TYPE_UNSPECIFIED       ErnMessageType = 0
	ErnMessageType_ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE ErnMessageType = 1
)

// Enum value maps for ErnMessageType.
var (
	ErnMessageType_name = map[int32]string{
		0: "ERN_MESSAGE_TYPE_UNSPECIFIED",
		1: "ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE",
	}
	ErnMessageType_value = map[string]int32{
		"ERN_MESSAGE_TYPE_UNSPECIFIED":       0,
		"ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE": 1,
	}
)

func (x ErnMessageType) Enum() *ErnMessageType {
	p := new(ErnMessageType)
	*p = x
	return p
}

func (x ErnMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErnMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[57].Descriptor()
}

func (ErnMessageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[57]
}

func (x ErnMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErnMessageType.Descriptor instead.
func (ErnMessageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{57}
}

type ErnTestMessageType int32

const (
	ErnTestMessageType_ERN_TEST_MESSAGE_TYPE_UNSPECIFIED         ErnTestMessageType = 0
	ErnTestMessageType_ERN_TEST_MESSAGE_TYPE_NEWRELEASEMESSAGE   ErnTestMessageType = 1
	ErnTestMessageType_ERN_TEST_MESSAGE_TYPE_PURGERELEASEMESSAGE ErnTestMessageType = 2
)

// Enum value maps for ErnTestMessageType.
var (
	ErnTestMessageType_name = map[int32]string{
		0: "ERN_TEST_MESSAGE_TYPE_UNSPECIFIED",
		1: "ERN_TEST_MESSAGE_TYPE_NEWRELEASEMESSAGE",
		2: "ERN_TEST_MESSAGE_TYPE_PURGERELEASEMESSAGE",
	}
	ErnTestMessageType_value = map[string]int32{
		"ERN_TEST_MESSAGE_TYPE_UNSPECIFIED":         0,
		"ERN_TEST_MESSAGE_TYPE_NEWRELEASEMESSAGE":   1,
		"ERN_TEST_MESSAGE_TYPE_PURGERELEASEMESSAGE": 2,
	}
)

func (x ErnTestMessageType) Enum() *ErnTestMessageType {
	p := new(ErnTestMessageType)
	*p = x
	return p
}

func (x ErnTestMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErnTestMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[58].Descriptor()
}

func (ErnTestMessageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[58]
}

func (x ErnTestMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErnTestMessageType.Descriptor instead.
func (ErnTestMessageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{58}
}

type ErncFileStatus int32

const (
	ErncFileStatus_ERNC_FILE_STATUS_UNSPECIFIED                             ErncFileStatus = 0
	ErncFileStatus_ERNC_FILE_STATUS_ARTISTROLEUNKNOWN                       ErncFileStatus = 1
	ErncFileStatus_ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID            ErncFileStatus = 2
	ErncFileStatus_ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS          ErncFileStatus = 3
	ErncFileStatus_ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES                ErncFileStatus = 4
	ErncFileStatus_ERNC_FILE_STATUS_ERNMISSING                              ErncFileStatus = 5
	ErncFileStatus_ERNC_FILE_STATUS_FILEOK                                  ErncFileStatus = 6
	ErncFileStatus_ERNC_FILE_STATUS_IDENTIFIERINVALID                       ErncFileStatus = 7
	ErncFileStatus_ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID                 ErncFileStatus = 8
	ErncFileStatus_ERNC_FILE_STATUS_INTERNALERROR                           ErncFileStatus = 9
	ErncFileStatus_ERNC_FILE_STATUS_METADATAMISSING                         ErncFileStatus = 10
	ErncFileStatus_ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID                ErncFileStatus = 11
	ErncFileStatus_ERNC_FILE_STATUS_NODEALFORTRACKRELEASE                   ErncFileStatus = 12
	ErncFileStatus_ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE               ErncFileStatus = 13
	ErncFileStatus_ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE ErncFileStatus = 14
	ErncFileStatus_ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING                ErncFileStatus = 15
	ErncFileStatus_ERNC_FILE_STATUS_RESOURCECORRUPT                         ErncFileStatus = 16
	ErncFileStatus_ERNC_FILE_STATUS_RESOURCEMISSING                         ErncFileStatus = 17
	ErncFileStatus_ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS        ErncFileStatus = 18
	ErncFileStatus_ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING        ErncFileStatus = 19
	ErncFileStatus_ERNC_FILE_STATUS_UNSUPPORTEDUSAGE                        ErncFileStatus = 20
	ErncFileStatus_ERNC_FILE_STATUS_USERDEFINED                             ErncFileStatus = 21
)

// Enum value maps for ErncFileStatus.
var (
	ErncFileStatus_name = map[int32]string{
		0:  "ERNC_FILE_STATUS_UNSPECIFIED",
		1:  "ERNC_FILE_STATUS_ARTISTROLEUNKNOWN",
		2:  "ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID",
		3:  "ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS",
		4:  "ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES",
		5:  "ERNC_FILE_STATUS_ERNMISSING",
		6:  "ERNC_FILE_STATUS_FILEOK",
		7:  "ERNC_FILE_STATUS_IDENTIFIERINVALID",
		8:  "ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID",
		9:  "ERNC_FILE_STATUS_INTERNALERROR",
		10: "ERNC_FILE_STATUS_METADATAMISSING",
		11: "ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID",
		12: "ERNC_FILE_STATUS_NODEALFORTRACKRELEASE",
		13: "ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE",
		14: "ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE",
		15: "ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING",
		16: "ERNC_FILE_STATUS_RESOURCECORRUPT",
		17: "ERNC_FILE_STATUS_RESOURCEMISSING",
		18: "ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS",
		19: "ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING",
		20: "ERNC_FILE_STATUS_UNSUPPORTEDUSAGE",
		21: "ERNC_FILE_STATUS_USERDEFINED",
	}
	ErncFileStatus_value = map[string]int32{
		"ERNC_FILE_STATUS_UNSPECIFIED":                             0,
		"ERNC_FILE_STATUS_ARTISTROLEUNKNOWN":                       1,
		"ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID":            2,
		"ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS":          3,
		"ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES":                4,
		"ERNC_FILE_STATUS_ERNMISSING":                              5,
		"ERNC_FILE_STATUS_FILEOK":                                  6,
		"ERNC_FILE_STATUS_IDENTIFIERINVALID":                       7,
		"ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID":                 8,
		"ERNC_FILE_STATUS_INTERNALERROR":                           9,
		"ERNC_FILE_STATUS_METADATAMISSING":                         10,
		"ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID":                11,
		"ERNC_FILE_STATUS_NODEALFORTRACKRELEASE":                   12,
		"ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE":               13,
		"ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE": 14,
		"ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING":                15,
		"ERNC_FILE_STATUS_RESOURCECORRUPT":                         16,
		"ERNC_FILE_STATUS_RESOURCEMISSING":                         17,
		"ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS":        18,
		"ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING":        19,
		"ERNC_FILE_STATUS_UNSUPPORTEDUSAGE":                        20,
		"ERNC_FILE_STATUS_USERDEFINED":                             21,
	}
)

func (x ErncFileStatus) Enum() *ErncFileStatus {
	p := new(ErncFileStatus)
	*p = x
	return p
}

func (x ErncFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErncFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[59].Descriptor()
}

func (ErncFileStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[59]
}

func (x ErncFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErncFileStatus.Descriptor instead.
func (ErncFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{59}
}

type ErncProposedActionType int32

const (
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED                 ErncProposedActionType = 0
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY               ErncProposedActionType = 1
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES       ErncProposedActionType = 2
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_USERDEFINED                 ErncProposedActionType = 3
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE ErncProposedActionType = 4
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE          ErncProposedActionType = 5
)

// Enum value maps for ErncProposedActionType.
var (
	ErncProposedActionType_name = map[int32]string{
		0: "ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED",
		1: "ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY",
		2: "ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES",
		3: "ERNC_PROPOSED_ACTION_TYPE_USERDEFINED",
		4: "ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE",
		5: "ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE",
	}
	ErncProposedActionType_value = map[string]int32{
		"ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED":                 0,
		"ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY":               1,
		"ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES":       2,
		"ERNC_PROPOSED_ACTION_TYPE_USERDEFINED":                 3,
		"ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE": 4,
		"ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE":          5,
	}
)

func (x ErncProposedActionType) Enum() *ErncProposedActionType {
	p := new(ErncProposedActionType)
	*p = x
	return p
}

func (x ErncProposedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErncProposedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[60].Descriptor()
}

func (ErncProposedActionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[60]
}

func (x ErncProposedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErncProposedActionType.Descriptor instead.
func (ErncProposedActionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{60}
}

type ErrorSeverity int32

const (
	ErrorSeverity_ERROR_SEVERITY_UNSPECIFIED ErrorSeverity = 0
	ErrorSeverity_ERROR_SEVERITY_CRITICAL    ErrorSeverity = 1
	ErrorSeverity_ERROR_SEVERITY_INFORMATION ErrorSeverity = 2
	ErrorSeverity_ERROR_SEVERITY_WARNING     ErrorSeverity = 3
)

// Enum value maps for ErrorSeverity.
var (
	ErrorSeverity_name = map[int32]string{
		0: "ERROR_SEVERITY_UNSPECIFIED",
		1: "ERROR_SEVERITY_CRITICAL",
		2: "ERROR_SEVERITY_INFORMATION",
		3: "ERROR_SEVERITY_WARNING",
	}
	ErrorSeverity_value = map[string]int32{
		"ERROR_SEVERITY_UNSPECIFIED": 0,
		"ERROR_SEVERITY_CRITICAL":    1,
		"ERROR_SEVERITY_INFORMATION": 2,
		"ERROR_SEVERITY_WARNING":     3,
	}
)

func (x ErrorSeverity) Enum() *ErrorSeverity {
	p := new(ErrorSeverity)
	*p = x
	return p
}

func (x ErrorSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[61].Descriptor()
}

func (ErrorSeverity) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[61]
}

func (x ErrorSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorSeverity.Descriptor instead.
func (ErrorSeverity) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{61}
}

type ErrorType int32

const (
	ErrorType_ERROR_TYPE_UNSPECIFIED      ErrorType = 0
	ErrorType_ERROR_TYPE_CONFORMANCEERROR ErrorType = 1
	ErrorType_ERROR_TYPE_LOGICALERROR     ErrorType = 2
	ErrorType_ERROR_TYPE_USERDEFINED      ErrorType = 3
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "ERROR_TYPE_UNSPECIFIED",
		1: "ERROR_TYPE_CONFORMANCEERROR",
		2: "ERROR_TYPE_LOGICALERROR",
		3: "ERROR_TYPE_USERDEFINED",
	}
	ErrorType_value = map[string]int32{
		"ERROR_TYPE_UNSPECIFIED":      0,
		"ERROR_TYPE_CONFORMANCEERROR": 1,
		"ERROR_TYPE_LOGICALERROR":     2,
		"ERROR_TYPE_USERDEFINED":      3,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[62].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[62]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{62}
}

type ExceptionReason int32

const (
	ExceptionReason_EXCEPTION_REASON_UNSPECIFIED                      ExceptionReason = 0
	ExceptionReason_EXCEPTION_REASON_DISPUTEDBYLICENSEE               ExceptionReason = 1
	ExceptionReason_EXCEPTION_REASON_DISPUTEDBYRELINQUISHINGPUBLISHER ExceptionReason = 2
	ExceptionReason_EXCEPTION_REASON_NOTFOUND                         ExceptionReason = 3
	ExceptionReason_EXCEPTION_REASON_USERDEFINED                      ExceptionReason = 4
)

// Enum value maps for ExceptionReason.
var (
	ExceptionReason_name = map[int32]string{
		0: "EXCEPTION_REASON_UNSPECIFIED",
		1: "EXCEPTION_REASON_DISPUTEDBYLICENSEE",
		2: "EXCEPTION_REASON_DISPUTEDBYRELINQUISHINGPUBLISHER",
		3: "EXCEPTION_REASON_NOTFOUND",
		4: "EXCEPTION_REASON_USERDEFINED",
	}
	ExceptionReason_value = map[string]int32{
		"EXCEPTION_REASON_UNSPECIFIED":                      0,
		"EXCEPTION_REASON_DISPUTEDBYLICENSEE":               1,
		"EXCEPTION_REASON_DISPUTEDBYRELINQUISHINGPUBLISHER": 2,
		"EXCEPTION_REASON_NOTFOUND":                         3,
		"EXCEPTION_REASON_USERDEFINED":                      4,
	}
)

func (x ExceptionReason) Enum() *ExceptionReason {
	p := new(ExceptionReason)
	*p = x
	return p
}

func (x ExceptionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExceptionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[63].Descriptor()
}

func (ExceptionReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[63]
}

func (x ExceptionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExceptionReason.Descriptor instead.
func (ExceptionReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{63}
}

type ExpressionType int32

const (
	ExpressionType_EXPRESSION_TYPE_UNSPECIFIED ExpressionType = 0
	ExpressionType_EXPRESSION_TYPE_INFORMATIVE ExpressionType = 1
	ExpressionType_EXPRESSION_TYPE_INSTRUCTIVE ExpressionType = 2
)

// Enum value maps for ExpressionType.
var (
	ExpressionType_name = map[int32]string{
		0: "EXPRESSION_TYPE_UNSPECIFIED",
		1: "EXPRESSION_TYPE_INFORMATIVE",
		2: "EXPRESSION_TYPE_INSTRUCTIVE",
	}
	ExpressionType_value = map[string]int32{
		"EXPRESSION_TYPE_UNSPECIFIED": 0,
		"EXPRESSION_TYPE_INFORMATIVE": 1,
		"EXPRESSION_TYPE_INSTRUCTIVE": 2,
	}
)

func (x ExpressionType) Enum() *ExpressionType {
	p := new(ExpressionType)
	*p = x
	return p
}

func (x ExpressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[64].Descriptor()
}

func (ExpressionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[64]
}

func (x ExpressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressionType.Descriptor instead.
func (ExpressionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{64}
}

type ExternallyLinkedResourceType int32

const (
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED            ExternallyLinkedResourceType = 0
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA     ExternallyLinkedResourceType = 1
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO                   ExternallyLinkedResourceType = 2
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE       ExternallyLinkedResourceType = 3
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION ExternallyLinkedResourceType = 4
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM        ExternallyLinkedResourceType = 5
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN                ExternallyLinkedResourceType = 6
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED            ExternallyLinkedResourceType = 7
)

// Enum value maps for ExternallyLinkedResourceType.
var (
	ExternallyLinkedResourceType_name = map[int32]string{
		0: "EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED",
		1: "EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA",
		2: "EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO",
		3: "EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE",
		4: "EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION",
		5: "EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM",
		6: "EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN",
		7: "EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED",
	}
	ExternallyLinkedResourceType_value = map[string]int32{
		"EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED":            0,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA":     1,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO":                   2,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE":       3,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION": 4,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM":        5,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN":                6,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED":            7,
	}
)

func (x ExternallyLinkedResourceType) Enum() *ExternallyLinkedResourceType {
	p := new(ExternallyLinkedResourceType)
	*p = x
	return p
}

func (x ExternallyLinkedResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternallyLinkedResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[65].Descriptor()
}

func (ExternallyLinkedResourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[65]
}

func (x ExternallyLinkedResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternallyLinkedResourceType.Descriptor instead.
func (ExternallyLinkedResourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{65}
}

type FileType int32

const (
	FileType_FILE_TYPE_UNSPECIFIED  FileType = 0
	FileType_FILE_TYPE_E_3DMFILE    FileType = 1
	FileType_FILE_TYPE_E_3G2FILE    FileType = 2
	FileType_FILE_TYPE_E_3GPFILE    FileType = 3
	FileType_FILE_TYPE_E_7ZFILE     FileType = 4
	FileType_FILE_TYPE_E_8BIFILE    FileType = 5
	FileType_FILE_TYPE_AACFILE      FileType = 6
	FileType_FILE_TYPE_ACCDBFILE    FileType = 7
	FileType_FILE_TYPE_AIFFILE      FileType = 8
	FileType_FILE_TYPE_AIFILE       FileType = 9
	FileType_FILE_TYPE_ANAFILE      FileType = 10
	FileType_FILE_TYPE_APPFILE      FileType = 11
	FileType_FILE_TYPE_ASFFILE      FileType = 12
	FileType_FILE_TYPE_ASPFILE      FileType = 13
	FileType_FILE_TYPE_ASXFILE      FileType = 14
	FileType_FILE_TYPE_AUDFILE      FileType = 15
	FileType_FILE_TYPE_AVIFILE      FileType = 16
	FileType_FILE_TYPE_BAKFILE      FileType = 17
	FileType_FILE_TYPE_BATFILE      FileType = 18
	FileType_FILE_TYPE_BINFILE      FileType = 19
	FileType_FILE_TYPE_BMPFILE      FileType = 20
	FileType_FILE_TYPE_BTFILE       FileType = 21
	FileType_FILE_TYPE_BWFFILE      FileType = 22
	FileType_FILE_TYPE_CABFILE      FileType = 23
	FileType_FILE_TYPE_CERFILE      FileType = 24
	FileType_FILE_TYPE_CFGFILE      FileType = 25
	FileType_FILE_TYPE_CFILE        FileType = 26
	FileType_FILE_TYPE_CGIFILE      FileType = 27
	FileType_FILE_TYPE_CLASSFILE    FileType = 28
	FileType_FILE_TYPE_COMFILE      FileType = 29
	FileType_FILE_TYPE_CPLFILE      FileType = 30
	FileType_FILE_TYPE_CPPFILE      FileType = 31
	FileType_FILE_TYPE_CSFILE       FileType = 32
	FileType_FILE_TYPE_CSRFILE      FileType = 33
	FileType_FILE_TYPE_CSSFILE      FileType = 34
	FileType_FILE_TYPE_CSVFILE      FileType = 35
	FileType_FILE_TYPE_CURFILE      FileType = 36
	FileType_FILE_TYPE_DATFILE      FileType = 37
	FileType_FILE_TYPE_DBFILE       FileType = 38
	FileType_FILE_TYPE_DBXFILE      FileType = 39
	FileType_FILE_TYPE_DEBFILE      FileType = 40
	FileType_FILE_TYPE_DLLFILE      FileType = 41
	FileType_FILE_TYPE_DMGFILE      FileType = 42
	FileType_FILE_TYPE_DMPFILE      FileType = 43
	FileType_FILE_TYPE_DOCFILE      FileType = 44
	FileType_FILE_TYPE_DOCXFILE     FileType = 45
	FileType_FILE_TYPE_DRVFILE      FileType = 46
	FileType_FILE_TYPE_DRWFILE      FileType = 47
	FileType_FILE_TYPE_DSDFILE      FileType = 48
	FileType_FILE_TYPE_DTDFILE      FileType = 49
	FileType_FILE_TYPE_DVFILE       FileType = 50
	FileType_FILE_TYPE_DWGFILE      FileType = 51
	FileType_FILE_TYPE_DXFFILE      FileType = 52
	FileType_FILE_TYPE_EFXFILE      FileType = 53
	FileType_FILE_TYPE_EPSFILE      FileType = 54
	FileType_FILE_TYPE_EXEFILE      FileType = 55
	FileType_FILE_TYPE_FLAFILE      FileType = 56
	FileType_FILE_TYPE_FLVFILE      FileType = 57
	FileType_FILE_TYPE_FNTFILE      FileType = 58
	FileType_FILE_TYPE_FONFILE      FileType = 59
	FileType_FILE_TYPE_GADGETFILE   FileType = 60
	FileType_FILE_TYPE_GAMFILE      FileType = 61
	FileType_FILE_TYPE_GHOFILE      FileType = 62
	FileType_FILE_TYPE_GIFFILE      FileType = 63
	FileType_FILE_TYPE_GPXFILE      FileType = 64
	FileType_FILE_TYPE_GZFILE       FileType = 65
	FileType_FILE_TYPE_HQXFILE      FileType = 66
	FileType_FILE_TYPE_HTMFILE      FileType = 67
	FileType_FILE_TYPE_HTMLFILE     FileType = 68
	FileType_FILE_TYPE_IFFFILE      FileType = 69
	FileType_FILE_TYPE_INDDFILE     FileType = 70
	FileType_FILE_TYPE_INIFILE      FileType = 71
	FileType_FILE_TYPE_ISOFILE      FileType = 72
	FileType_FILE_TYPE_JARFILE      FileType = 73
	FileType_FILE_TYPE_JAVAFILE     FileType = 74
	FileType_FILE_TYPE_JPGFILE      FileType = 75
	FileType_FILE_TYPE_JSFILE       FileType = 76
	FileType_FILE_TYPE_JSPFILE      FileType = 77
	FileType_FILE_TYPE_KEYCHAINFILE FileType = 78
	FileType_FILE_TYPE_KEYFILE      FileType = 79
	FileType_FILE_TYPE_KMLFILE      FileType = 80
	FileType_FILE_TYPE_LNKFILE      FileType = 81
	FileType_FILE_TYPE_LOGFILE      FileType = 82
	FileType_FILE_TYPE_M3UFILE      FileType = 83
	FileType_FILE_TYPE_MAXFILE      FileType = 84
	FileType_FILE_TYPE_MDBFILE      FileType = 85
	FileType_FILE_TYPE_MFILE        FileType = 86
	FileType_FILE_TYPE_MIDFILE      FileType = 87
	FileType_FILE_TYPE_MIMFILE      FileType = 88
	FileType_FILE_TYPE_MOVFILE      FileType = 89
	FileType_FILE_TYPE_MP3FILE      FileType = 90
	FileType_FILE_TYPE_MP4FILE      FileType = 91
	FileType_FILE_TYPE_MPAFILE      FileType = 92
	FileType_FILE_TYPE_MPGFILE      FileType = 93
	FileType_FILE_TYPE_MSGFILE      FileType = 94
	FileType_FILE_TYPE_NESFILE      FileType = 95
	FileType_FILE_TYPE_NEUFILE      FileType = 96
	FileType_FILE_TYPE_ORIFILE      FileType = 97
	FileType_FILE_TYPE_OTFFILE      FileType = 98
	FileType_FILE_TYPE_PAGESFILE    FileType = 99
	FileType_FILE_TYPE_PCMFILE      FileType = 100
	FileType_FILE_TYPE_PCTFILE      FileType = 101
	FileType_FILE_TYPE_PDBFILE      FileType = 102
	FileType_FILE_TYPE_PDFFILE      FileType = 103
	FileType_FILE_TYPE_PHPFILE      FileType = 104
	FileType_FILE_TYPE_PIFFILE      FileType = 105
	FileType_FILE_TYPE_PKGFILE      FileType = 106
	FileType_FILE_TYPE_PLFILE       FileType = 107
	FileType_FILE_TYPE_PLNFILE      FileType = 108
	FileType_FILE_TYPE_PLUGINFILE   FileType = 109
	FileType_FILE_TYPE_PNGFILE      FileType = 110
	FileType_FILE_TYPE_PPSFILE      FileType = 111
	FileType_FILE_TYPE_PPTFILE      FileType = 112
	FileType_FILE_TYPE_PPTXFILE     FileType = 113
	FileType_FILE_TYPE_PRFFILE      FileType = 114
	FileType_FILE_TYPE_PSDFILE      FileType = 115
	FileType_FILE_TYPE_PSFILE       FileType = 116
	FileType_FILE_TYPE_PSPIMAGEFILE FileType = 117
	FileType_FILE_TYPE_PTSFILE      FileType = 118
	FileType_FILE_TYPE_QXDFILE      FileType = 119
	FileType_FILE_TYPE_QXPFILE      FileType = 120
	FileType_FILE_TYPE_RAFILE       FileType = 121
	FileType_FILE_TYPE_RARFILE      FileType = 122
	FileType_FILE_TYPE_RELSFILE     FileType = 123
	FileType_FILE_TYPE_RMFILE       FileType = 124
	FileType_FILE_TYPE_ROMFILE      FileType = 125
	FileType_FILE_TYPE_RSSFILE      FileType = 126
	FileType_FILE_TYPE_RTFFILE      FileType = 127
	FileType_FILE_TYPE_SAVFILE      FileType = 128
	FileType_FILE_TYPE_SD2FILE      FileType = 129
	FileType_FILE_TYPE_SDFFILE      FileType = 130
	FileType_FILE_TYPE_SITFILE      FileType = 131
	FileType_FILE_TYPE_SITXFILE     FileType = 132
	FileType_FILE_TYPE_SQLFILE      FileType = 133
	FileType_FILE_TYPE_SVGFILE      FileType = 134
	FileType_FILE_TYPE_SWFFILE      FileType = 135
	FileType_FILE_TYPE_SYSFILE      FileType = 136
	FileType_FILE_TYPE_TARFILE      FileType = 137
	FileType_FILE_TYPE_TARGZFILE    FileType = 138
	FileType_FILE_TYPE_THMFILE      FileType = 139
	FileType_FILE_TYPE_TIFFILE      FileType = 140
	FileType_FILE_TYPE_TMPFILE      FileType = 141
	FileType_FILE_TYPE_TOASTFILE    FileType = 142
	FileType_FILE_TYPE_TTFFILE      FileType = 143
	FileType_FILE_TYPE_TXTFILE      FileType = 144
	FileType_FILE_TYPE_UUEFILE      FileType = 145
	FileType_FILE_TYPE_VBFILE       FileType = 146
	FileType_FILE_TYPE_VCDFILE      FileType = 147
	FileType_FILE_TYPE_VCFFILE      FileType = 148
	FileType_FILE_TYPE_VOBFILE      FileType = 149
	FileType_FILE_TYPE_WAVFILE      FileType = 150
	FileType_FILE_TYPE_WKSFILE      FileType = 151
	FileType_FILE_TYPE_WMAFILE      FileType = 152
	FileType_FILE_TYPE_WMVFILE      FileType = 153
	FileType_FILE_TYPE_WPDFILE      FileType = 154
	FileType_FILE_TYPE_WPSFILE      FileType = 155
	FileType_FILE_TYPE_WSFFILE      FileType = 156
	FileType_FILE_TYPE_XHTMLFILE    FileType = 157
	FileType_FILE_TYPE_XLLFILE      FileType = 158
	FileType_FILE_TYPE_XLSFILE      FileType = 159
	FileType_FILE_TYPE_XLSXFILE     FileType = 160
	FileType_FILE_TYPE_XMLFILE      FileType = 161
	FileType_FILE_TYPE_YUVFILE      FileType = 162
	FileType_FILE_TYPE_ZIPFILE      FileType = 163
	FileType_FILE_TYPE_ZIPXFILE     FileType = 164
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0:   "FILE_TYPE_UNSPECIFIED",
		1:   "FILE_TYPE_E_3DMFILE",
		2:   "FILE_TYPE_E_3G2FILE",
		3:   "FILE_TYPE_E_3GPFILE",
		4:   "FILE_TYPE_E_7ZFILE",
		5:   "FILE_TYPE_E_8BIFILE",
		6:   "FILE_TYPE_AACFILE",
		7:   "FILE_TYPE_ACCDBFILE",
		8:   "FILE_TYPE_AIFFILE",
		9:   "FILE_TYPE_AIFILE",
		10:  "FILE_TYPE_ANAFILE",
		11:  "FILE_TYPE_APPFILE",
		12:  "FILE_TYPE_ASFFILE",
		13:  "FILE_TYPE_ASPFILE",
		14:  "FILE_TYPE_ASXFILE",
		15:  "FILE_TYPE_AUDFILE",
		16:  "FILE_TYPE_AVIFILE",
		17:  "FILE_TYPE_BAKFILE",
		18:  "FILE_TYPE_BATFILE",
		19:  "FILE_TYPE_BINFILE",
		20:  "FILE_TYPE_BMPFILE",
		21:  "FILE_TYPE_BTFILE",
		22:  "FILE_TYPE_BWFFILE",
		23:  "FILE_TYPE_CABFILE",
		24:  "FILE_TYPE_CERFILE",
		25:  "FILE_TYPE_CFGFILE",
		26:  "FILE_TYPE_CFILE",
		27:  "FILE_TYPE_CGIFILE",
		28:  "FILE_TYPE_CLASSFILE",
		29:  "FILE_TYPE_COMFILE",
		30:  "FILE_TYPE_CPLFILE",
		31:  "FILE_TYPE_CPPFILE",
		32:  "FILE_TYPE_CSFILE",
		33:  "FILE_TYPE_CSRFILE",
		34:  "FILE_TYPE_CSSFILE",
		35:  "FILE_TYPE_CSVFILE",
		36:  "FILE_TYPE_CURFILE",
		37:  "FILE_TYPE_DATFILE",
		38:  "FILE_TYPE_DBFILE",
		39:  "FILE_TYPE_DBXFILE",
		40:  "FILE_TYPE_DEBFILE",
		41:  "FILE_TYPE_DLLFILE",
		42:  "FILE_TYPE_DMGFILE",
		43:  "FILE_TYPE_DMPFILE",
		44:  "FILE_TYPE_DOCFILE",
		45:  "FILE_TYPE_DOCXFILE",
		46:  "FILE_TYPE_DRVFILE",
		47:  "FILE_TYPE_DRWFILE",
		48:  "FILE_TYPE_DSDFILE",
		49:  "FILE_TYPE_DTDFILE",
		50:  "FILE_TYPE_DVFILE",
		51:  "FILE_TYPE_DWGFILE",
		52:  "FILE_TYPE_DXFFILE",
		53:  "FILE_TYPE_EFXFILE",
		54:  "FILE_TYPE_EPSFILE",
		55:  "FILE_TYPE_EXEFILE",
		56:  "FILE_TYPE_FLAFILE",
		57:  "FILE_TYPE_FLVFILE",
		58:  "FILE_TYPE_FNTFILE",
		59:  "FILE_TYPE_FONFILE",
		60:  "FILE_TYPE_GADGETFILE",
		61:  "FILE_TYPE_GAMFILE",
		62:  "FILE_TYPE_GHOFILE",
		63:  "FILE_TYPE_GIFFILE",
		64:  "FILE_TYPE_GPXFILE",
		65:  "FILE_TYPE_GZFILE",
		66:  "FILE_TYPE_HQXFILE",
		67:  "FILE_TYPE_HTMFILE",
		68:  "FILE_TYPE_HTMLFILE",
		69:  "FILE_TYPE_IFFFILE",
		70:  "FILE_TYPE_INDDFILE",
		71:  "FILE_TYPE_INIFILE",
		72:  "FILE_TYPE_ISOFILE",
		73:  "FILE_TYPE_JARFILE",
		74:  "FILE_TYPE_JAVAFILE",
		75:  "FILE_TYPE_JPGFILE",
		76:  "FILE_TYPE_JSFILE",
		77:  "FILE_TYPE_JSPFILE",
		78:  "FILE_TYPE_KEYCHAINFILE",
		79:  "FILE_TYPE_KEYFILE",
		80:  "FILE_TYPE_KMLFILE",
		81:  "FILE_TYPE_LNKFILE",
		82:  "FILE_TYPE_LOGFILE",
		83:  "FILE_TYPE_M3UFILE",
		84:  "FILE_TYPE_MAXFILE",
		85:  "FILE_TYPE_MDBFILE",
		86:  "FILE_TYPE_MFILE",
		87:  "FILE_TYPE_MIDFILE",
		88:  "FILE_TYPE_MIMFILE",
		89:  "FILE_TYPE_MOVFILE",
		90:  "FILE_TYPE_MP3FILE",
		91:  "FILE_TYPE_MP4FILE",
		92:  "FILE_TYPE_MPAFILE",
		93:  "FILE_TYPE_MPGFILE",
		94:  "FILE_TYPE_MSGFILE",
		95:  "FILE_TYPE_NESFILE",
		96:  "FILE_TYPE_NEUFILE",
		97:  "FILE_TYPE_ORIFILE",
		98:  "FILE_TYPE_OTFFILE",
		99:  "FILE_TYPE_PAGESFILE",
		100: "FILE_TYPE_PCMFILE",
		101: "FILE_TYPE_PCTFILE",
		102: "FILE_TYPE_PDBFILE",
		103: "FILE_TYPE_PDFFILE",
		104: "FILE_TYPE_PHPFILE",
		105: "FILE_TYPE_PIFFILE",
		106: "FILE_TYPE_PKGFILE",
		107: "FILE_TYPE_PLFILE",
		108: "FILE_TYPE_PLNFILE",
		109: "FILE_TYPE_PLUGINFILE",
		110: "FILE_TYPE_PNGFILE",
		111: "FILE_TYPE_PPSFILE",
		112: "FILE_TYPE_PPTFILE",
		113: "FILE_TYPE_PPTXFILE",
		114: "FILE_TYPE_PRFFILE",
		115: "FILE_TYPE_PSDFILE",
		116: "FILE_TYPE_PSFILE",
		117: "FILE_TYPE_PSPIMAGEFILE",
		118: "FILE_TYPE_PTSFILE",
		119: "FILE_TYPE_QXDFILE",
		120: "FILE_TYPE_QXPFILE",
		121: "FILE_TYPE_RAFILE",
		122: "FILE_TYPE_RARFILE",
		123: "FILE_TYPE_RELSFILE",
		124: "FILE_TYPE_RMFILE",
		125: "FILE_TYPE_ROMFILE",
		126: "FILE_TYPE_RSSFILE",
		127: "FILE_TYPE_RTFFILE",
		128: "FILE_TYPE_SAVFILE",
		129: "FILE_TYPE_SD2FILE",
		130: "FILE_TYPE_SDFFILE",
		131: "FILE_TYPE_SITFILE",
		132: "FILE_TYPE_SITXFILE",
		133: "FILE_TYPE_SQLFILE",
		134: "FILE_TYPE_SVGFILE",
		135: "FILE_TYPE_SWFFILE",
		136: "FILE_TYPE_SYSFILE",
		137: "FILE_TYPE_TARFILE",
		138: "FILE_TYPE_TARGZFILE",
		139: "FILE_TYPE_THMFILE",
		140: "FILE_TYPE_TIFFILE",
		141: "FILE_TYPE_TMPFILE",
		142: "FILE_TYPE_TOASTFILE",
		143: "FILE_TYPE_TTFFILE",
		144: "FILE_TYPE_TXTFILE",
		145: "FILE_TYPE_UUEFILE",
		146: "FILE_TYPE_VBFILE",
		147: "FILE_TYPE_VCDFILE",
		148: "FILE_TYPE_VCFFILE",
		149: "FILE_TYPE_VOBFILE",
		150: "FILE_TYPE_WAVFILE",
		151: "FILE_TYPE_WKSFILE",
		152: "FILE_TYPE_WMAFILE",
		153: "FILE_TYPE_WMVFILE",
		154: "FILE_TYPE_WPDFILE",
		155: "FILE_TYPE_WPSFILE",
		156: "FILE_TYPE_WSFFILE",
		157: "FILE_TYPE_XHTMLFILE",
		158: "FILE_TYPE_XLLFILE",
		159: "FILE_TYPE_XLSFILE",
		160: "FILE_TYPE_XLSXFILE",
		161: "FILE_TYPE_XMLFILE",
		162: "FILE_TYPE_YUVFILE",
		163: "FILE_TYPE_ZIPFILE",
		164: "FILE_TYPE_ZIPXFILE",
	}
	FileType_value = map[string]int32{
		"FILE_TYPE_UNSPECIFIED":  0,
		"FILE_TYPE_E_3DMFILE":    1,
		"FILE_TYPE_E_3G2FILE":    2,
		"FILE_TYPE_E_3GPFILE":    3,
		"FILE_TYPE_E_7ZFILE":     4,
		"FILE_TYPE_E_8BIFILE":    5,
		"FILE_TYPE_AACFILE":      6,
		"FILE_TYPE_ACCDBFILE":    7,
		"FILE_TYPE_AIFFILE":      8,
		"FILE_TYPE_AIFILE":       9,
		"FILE_TYPE_ANAFILE":      10,
		"FILE_TYPE_APPFILE":      11,
		"FILE_TYPE_ASFFILE":      12,
		"FILE_TYPE_ASPFILE":      13,
		"FILE_TYPE_ASXFILE":      14,
		"FILE_TYPE_AUDFILE":      15,
		"FILE_TYPE_AVIFILE":      16,
		"FILE_TYPE_BAKFILE":      17,
		"FILE_TYPE_BATFILE":      18,
		"FILE_TYPE_BINFILE":      19,
		"FILE_TYPE_BMPFILE":      20,
		"FILE_TYPE_BTFILE":       21,
		"FILE_TYPE_BWFFILE":      22,
		"FILE_TYPE_CABFILE":      23,
		"FILE_TYPE_CERFILE":      24,
		"FILE_TYPE_CFGFILE":      25,
		"FILE_TYPE_CFILE":        26,
		"FILE_TYPE_CGIFILE":      27,
		"FILE_TYPE_CLASSFILE":    28,
		"FILE_TYPE_COMFILE":      29,
		"FILE_TYPE_CPLFILE":      30,
		"FILE_TYPE_CPPFILE":      31,
		"FILE_TYPE_CSFILE":       32,
		"FILE_TYPE_CSRFILE":      33,
		"FILE_TYPE_CSSFILE":      34,
		"FILE_TYPE_CSVFILE":      35,
		"FILE_TYPE_CURFILE":      36,
		"FILE_TYPE_DATFILE":      37,
		"FILE_TYPE_DBFILE":       38,
		"FILE_TYPE_DBXFILE":      39,
		"FILE_TYPE_DEBFILE":      40,
		"FILE_TYPE_DLLFILE":      41,
		"FILE_TYPE_DMGFILE":      42,
		"FILE_TYPE_DMPFILE":      43,
		"FILE_TYPE_DOCFILE":      44,
		"FILE_TYPE_DOCXFILE":     45,
		"FILE_TYPE_DRVFILE":      46,
		"FILE_TYPE_DRWFILE":      47,
		"FILE_TYPE_DSDFILE":      48,
		"FILE_TYPE_DTDFILE":      49,
		"FILE_TYPE_DVFILE":       50,
		"FILE_TYPE_DWGFILE":      51,
		"FILE_TYPE_DXFFILE":      52,
		"FILE_TYPE_EFXFILE":      53,
		"FILE_TYPE_EPSFILE":      54,
		"FILE_TYPE_EXEFILE":      55,
		"FILE_TYPE_FLAFILE":      56,
		"FILE_TYPE_FLVFILE":      57,
		"FILE_TYPE_FNTFILE":      58,
		"FILE_TYPE_FONFILE":      59,
		"FILE_TYPE_GADGETFILE":   60,
		"FILE_TYPE_GAMFILE":      61,
		"FILE_TYPE_GHOFILE":      62,
		"FILE_TYPE_GIFFILE":      63,
		"FILE_TYPE_GPXFILE":      64,
		"FILE_TYPE_GZFILE":       65,
		"FILE_TYPE_HQXFILE":      66,
		"FILE_TYPE_HTMFILE":      67,
		"FILE_TYPE_HTMLFILE":     68,
		"FILE_TYPE_IFFFILE":      69,
		"FILE_TYPE_INDDFILE":     70,
		"FILE_TYPE_INIFILE":      71,
		"FILE_TYPE_ISOFILE":      72,
		"FILE_TYPE_JARFILE":      73,
		"FILE_TYPE_JAVAFILE":     74,
		"FILE_TYPE_JPGFILE":      75,
		"FILE_TYPE_JSFILE":       76,
		"FILE_TYPE_JSPFILE":      77,
		"FILE_TYPE_KEYCHAINFILE": 78,
		"FILE_TYPE_KEYFILE":      79,
		"FILE_TYPE_KMLFILE":      80,
		"FILE_TYPE_LNKFILE":      81,
		"FILE_TYPE_LOGFILE":      82,
		"FILE_TYPE_M3UFILE":      83,
		"FILE_TYPE_MAXFILE":      84,
		"FILE_TYPE_MDBFILE":      85,
		"FILE_TYPE_MFILE":        86,
		"FILE_TYPE_MIDFILE":      87,
		"FILE_TYPE_MIMFILE":      88,
		"FILE_TYPE_MOVFILE":      89,
		"FILE_TYPE_MP3FILE":      90,
		"FILE_TYPE_MP4FILE":      91,
		"FILE_TYPE_MPAFILE":      92,
		"FILE_TYPE_MPGFILE":      93,
		"FILE_TYPE_MSGFILE":      94,
		"FILE_TYPE_NESFILE":      95,
		"FILE_TYPE_NEUFILE":      96,
		"FILE_TYPE_ORIFILE":      97,
		"FILE_TYPE_OTFFILE":      98,
		"FILE_TYPE_PAGESFILE":    99,
		"FILE_TYPE_PCMFILE":      100,
		"FILE_TYPE_PCTFILE":      101,
		"FILE_TYPE_PDBFILE":      102,
		"FILE_TYPE_PDFFILE":      103,
		"FILE_TYPE_PHPFILE":      104,
		"FILE_TYPE_PIFFILE":      105,
		"FILE_TYPE_PKGFILE":      106,
		"FILE_TYPE_PLFILE":       107,
		"FILE_TYPE_PLNFILE":      108,
		"FILE_TYPE_PLUGINFILE":   109,
		"FILE_TYPE_PNGFILE":      110,
		"FILE_TYPE_PPSFILE":      111,
		"FILE_TYPE_PPTFILE":      112,
		"FILE_TYPE_PPTXFILE":     113,
		"FILE_TYPE_PRFFILE":      114,
		"FILE_TYPE_PSDFILE":      115,
		"FILE_TYPE_PSFILE":       116,
		"FILE_TYPE_PSPIMAGEFILE": 117,
		"FILE_TYPE_PTSFILE":      118,
		"FILE_TYPE_QXDFILE":      119,
		"FILE_TYPE_QXPFILE":      120,
		"FILE_TYPE_RAFILE":       121,
		"FILE_TYPE_RARFILE":      122,
		"FILE_TYPE_RELSFILE":     123,
		"FILE_TYPE_RMFILE":       124,
		"FILE_TYPE_ROMFILE":      125,
		"FILE_TYPE_RSSFILE":      126,
		"FILE_TYPE_RTFFILE":      127,
		"FILE_TYPE_SAVFILE":      128,
		"FILE_TYPE_SD2FILE":      129,
		"FILE_TYPE_SDFFILE":      130,
		"FILE_TYPE_SITFILE":      131,
		"FILE_TYPE_SITXFILE":     132,
		"FILE_TYPE_SQLFILE":      133,
		"FILE_TYPE_SVGFILE":      134,
		"FILE_TYPE_SWFFILE":      135,
		"FILE_TYPE_SYSFILE":      136,
		"FILE_TYPE_TARFILE":      137,
		"FILE_TYPE_TARGZFILE":    138,
		"FILE_TYPE_THMFILE":      139,
		"FILE_TYPE_TIFFILE":      140,
		"FILE_TYPE_TMPFILE":      141,
		"FILE_TYPE_TOASTFILE":    142,
		"FILE_TYPE_TTFFILE":      143,
		"FILE_TYPE_TXTFILE":      144,
		"FILE_TYPE_UUEFILE":      145,
		"FILE_TYPE_VBFILE":       146,
		"FILE_TYPE_VCDFILE":      147,
		"FILE_TYPE_VCFFILE":      148,
		"FILE_TYPE_VOBFILE":      149,
		"FILE_TYPE_WAVFILE":      150,
		"FILE_TYPE_WKSFILE":      151,
		"FILE_TYPE_WMAFILE":      152,
		"FILE_TYPE_WMVFILE":      153,
		"FILE_TYPE_WPDFILE":      154,
		"FILE_TYPE_WPSFILE":      155,
		"FILE_TYPE_WSFFILE":      156,
		"FILE_TYPE_XHTMLFILE":    157,
		"FILE_TYPE_XLLFILE":      158,
		"FILE_TYPE_XLSFILE":      159,
		"FILE_TYPE_XLSXFILE":     160,
		"FILE_TYPE_XMLFILE":      161,
		"FILE_TYPE_YUVFILE":      162,
		"FILE_TYPE_ZIPFILE":      163,
		"FILE_TYPE_ZIPXFILE":     164,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[66].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[66]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{66}
}

type FingerprintAlgorithmType int32

const (
	FingerprintAlgorithmType_FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED FingerprintAlgorithmType = 0
	FingerprintAlgorithmType_FINGERPRINT_ALGORITHM_TYPE_USERDEFINED FingerprintAlgorithmType = 1
)

// Enum value maps for FingerprintAlgorithmType.
var (
	FingerprintAlgorithmType_name = map[int32]string{
		0: "FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED",
		1: "FINGERPRINT_ALGORITHM_TYPE_USERDEFINED",
	}
	FingerprintAlgorithmType_value = map[string]int32{
		"FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED": 0,
		"FINGERPRINT_ALGORITHM_TYPE_USERDEFINED": 1,
	}
)

func (x FingerprintAlgorithmType) Enum() *FingerprintAlgorithmType {
	p := new(FingerprintAlgorithmType)
	*p = x
	return p
}

func (x FingerprintAlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FingerprintAlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[67].Descriptor()
}

func (FingerprintAlgorithmType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[67]
}

func (x FingerprintAlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FingerprintAlgorithmType.Descriptor instead.
func (FingerprintAlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{67}
}

type Form int32

const (
	Form_FORM_UNSPECIFIED         Form = 0
	Form_FORM_ADAGIO              Form = 1
	Form_FORM_ALLEMANDE           Form = 2
	Form_FORM_ARIA                Form = 3
	Form_FORM_ARTSONG             Form = 4
	Form_FORM_BAGATELLE           Form = 5
	Form_FORM_BALLADE             Form = 6
	Form_FORM_BALLATA             Form = 7
	Form_FORM_BARCAROLLE          Form = 8
	Form_FORM_BOLERO              Form = 9
	Form_FORM_CANCAN              Form = 10
	Form_FORM_CANON               Form = 11
	Form_FORM_CANTATA             Form = 12
	Form_FORM_CANZONA             Form = 13
	Form_FORM_CAPRICE             Form = 14
	Form_FORM_CAROL               Form = 15
	Form_FORM_CAVATINA            Form = 16
	Form_FORM_CHACONNE            Form = 17
	Form_FORM_CHANSON             Form = 18
	Form_FORM_CONCERTO            Form = 19
	Form_FORM_COURANTE            Form = 20
	Form_FORM_DANCE               Form = 21
	Form_FORM_DIVERTIMENTO        Form = 22
	Form_FORM_DUMKA               Form = 23
	Form_FORM_ESTAMPIE            Form = 24
	Form_FORM_ETUDE               Form = 25
	Form_FORM_FANFARE             Form = 26
	Form_FORM_FANTASY             Form = 27
	Form_FORM_FUGUE               Form = 28
	Form_FORM_FURIANT             Form = 29
	Form_FORM_GALLIARD            Form = 30
	Form_FORM_GIGUE               Form = 31
	Form_FORM_HYMN                Form = 32
	Form_FORM_IMPROVISATION       Form = 33
	Form_FORM_INTERLUDE           Form = 34
	Form_FORM_INTERMEZZO          Form = 35
	Form_FORM_LAUDE               Form = 36
	Form_FORM_LIED                Form = 37
	Form_FORM_MADRIGAL            Form = 38
	Form_FORM_MARCH               Form = 39
	Form_FORM_MASS                Form = 40
	Form_FORM_MAZURKA             Form = 41
	Form_FORM_MELODIE             Form = 42
	Form_FORM_MINIMAL             Form = 43
	Form_FORM_MINUET              Form = 44
	Form_FORM_MOMENTFORM          Form = 45
	Form_FORM_MOTET               Form = 46
	Form_FORM_NOCTURNE            Form = 47
	Form_FORM_OVERTURE            Form = 48
	Form_FORM_PARTITA             Form = 49
	Form_FORM_PASSACAGLIA         Form = 50
	Form_FORM_PAVANE              Form = 51
	Form_FORM_PERPETUUMMOBILE     Form = 52
	Form_FORM_POLONAISE           Form = 53
	Form_FORM_PRELUDE             Form = 54
	Form_FORM_RAGA                Form = 55
	Form_FORM_RHAPSODY            Form = 56
	Form_FORM_RICERCAR            Form = 57
	Form_FORM_RONDO               Form = 58
	Form_FORM_SALTARELLO          Form = 59
	Form_FORM_SARABANDE           Form = 60
	Form_FORM_SCHERZO             Form = 61
	Form_FORM_SEQUENCE            Form = 62
	Form_FORM_SERENADE            Form = 63
	Form_FORM_SINFONIACONCERTANTE Form = 64
	Form_FORM_SONATA              Form = 65
	Form_FORM_SONATINA            Form = 66
	Form_FORM_SUITE               Form = 67
	Form_FORM_SYMPHONICPOEM       Form = 68
	Form_FORM_SYMPHONY            Form = 69
	Form_FORM_TARANTELLA          Form = 70
	Form_FORM_TIENTO              Form = 71
	Form_FORM_TOCCATA             Form = 72
	Form_FORM_VARIATION           Form = 73
	Form_FORM_VOCALISE            Form = 74
	Form_FORM_WALTZ               Form = 75
	Form_FORM_TWELVEBARBLUES      Form = 76
	Form_FORM_EIGHTBARBLUES       Form = 77
	Form_FORM_BALLAD              Form = 78
	Form_FORM_POWERBALLAD         Form = 79
	Form_FORM_RAG                 Form = 80
	Form_FORM_RHYTHMCHANGES       Form = 81
	Form_FORM_VERSEONLY           Form = 82
	Form_FORM_USERDEFINED         Form = 83
)

// Enum value maps for Form.
var (
	Form_name = map[int32]string{
		0:  "FORM_UNSPECIFIED",
		1:  "FORM_ADAGIO",
		2:  "FORM_ALLEMANDE",
		3:  "FORM_ARIA",
		4:  "FORM_ARTSONG",
		5:  "FORM_BAGATELLE",
		6:  "FORM_BALLADE",
		7:  "FORM_BALLATA",
		8:  "FORM_BARCAROLLE",
		9:  "FORM_BOLERO",
		10: "FORM_CANCAN",
		11: "FORM_CANON",
		12: "FORM_CANTATA",
		13: "FORM_CANZONA",
		14: "FORM_CAPRICE",
		15: "FORM_CAROL",
		16: "FORM_CAVATINA",
		17: "FORM_CHACONNE",
		18: "FORM_CHANSON",
		19: "FORM_CONCERTO",
		20: "FORM_COURANTE",
		21: "FORM_DANCE",
		22: "FORM_DIVERTIMENTO",
		23: "FORM_DUMKA",
		24: "FORM_ESTAMPIE",
		25: "FORM_ETUDE",
		26: "FORM_FANFARE",
		27: "FORM_FANTASY",
		28: "FORM_FUGUE",
		29: "FORM_FURIANT",
		30: "FORM_GALLIARD",
		31: "FORM_GIGUE",
		32: "FORM_HYMN",
		33: "FORM_IMPROVISATION",
		34: "FORM_INTERLUDE",
		35: "FORM_INTERMEZZO",
		36: "FORM_LAUDE",
		37: "FORM_LIED",
		38: "FORM_MADRIGAL",
		39: "FORM_MARCH",
		40: "FORM_MASS",
		41: "FORM_MAZURKA",
		42: "FORM_MELODIE",
		43: "FORM_MINIMAL",
		44: "FORM_MINUET",
		45: "FORM_MOMENTFORM",
		46: "FORM_MOTET",
		47: "FORM_NOCTURNE",
		48: "FORM_OVERTURE",
		49: "FORM_PARTITA",
		50: "FORM_PASSACAGLIA",
		51: "FORM_PAVANE",
		52: "FORM_PERPETUUMMOBILE",
		53: "FORM_POLONAISE",
		54: "FORM_PRELUDE",
		55: "FORM_RAGA",
		56: "FORM_RHAPSODY",
		57: "FORM_RICERCAR",
		58: "FORM_RONDO",
		59: "FORM_SALTARELLO",
		60: "FORM_SARABANDE",
		61: "FORM_SCHERZO",
		62: "FORM_SEQUENCE",
		63: "FORM_SERENADE",
		64: "FORM_SINFONIACONCERTANTE",
		65: "FORM_SONATA",
		66: "FORM_SONATINA",
		67: "FORM_SUITE",
		68: "FORM_SYMPHONICPOEM",
		69: "FORM_SYMPHONY",
		70: "FORM_TARANTELLA",
		71: "FORM_TIENTO",
		72: "FORM_TOCCATA",
		73: "FORM_VARIATION",
		74: "FORM_VOCALISE",
		75: "FORM_WALTZ",
		76: "FORM_TWELVEBARBLUES",
		77: "FORM_EIGHTBARBLUES",
		78: "FORM_BALLAD",
		79: "FORM_POWERBALLAD",
		80: "FORM_RAG",
		81: "FORM_RHYTHMCHANGES",
		82: "FORM_VERSEONLY",
		83: "FORM_USERDEFINED",
	}
	Form_value = map[string]int32{
		"FORM_UNSPECIFIED":         0,
		"FORM_ADAGIO":              1,
		"FORM_ALLEMANDE":           2,
		"FORM_ARIA":                3,
		"FORM_ARTSONG":             4,
		"FORM_BAGATELLE":           5,
		"FORM_BALLADE":             6,
		"FORM_BALLATA":             7,
		"FORM_BARCAROLLE":          8,
		"FORM_BOLERO":              9,
		"FORM_CANCAN":              10,
		"FORM_CANON":               11,
		"FORM_CANTATA":             12,
		"FORM_CANZONA":             13,
		"FORM_CAPRICE":             14,
		"FORM_CAROL":               15,
		"FORM_CAVATINA":            16,
		"FORM_CHACONNE":            17,
		"FORM_CHANSON":             18,
		"FORM_CONCERTO":            19,
		"FORM_COURANTE":            20,
		"FORM_DANCE":               21,
		"FORM_DIVERTIMENTO":        22,
		"FORM_DUMKA":               23,
		"FORM_ESTAMPIE":            24,
		"FORM_ETUDE":               25,
		"FORM_FANFARE":             26,
		"FORM_FANTASY":             27,
		"FORM_FUGUE":               28,
		"FORM_FURIANT":             29,
		"FORM_GALLIARD":            30,
		"FORM_GIGUE":               31,
		"FORM_HYMN":                32,
		"FORM_IMPROVISATION":       33,
		"FORM_INTERLUDE":           34,
		"FORM_INTERMEZZO":          35,
		"FORM_LAUDE":               36,
		"FORM_LIED":                37,
		"FORM_MADRIGAL":            38,
		"FORM_MARCH":               39,
		"FORM_MASS":                40,
		"FORM_MAZURKA":             41,
		"FORM_MELODIE":             42,
		"FORM_MINIMAL":             43,
		"FORM_MINUET":              44,
		"FORM_MOMENTFORM":          45,
		"FORM_MOTET":               46,
		"FORM_NOCTURNE":            47,
		"FORM_OVERTURE":            48,
		"FORM_PARTITA":             49,
		"FORM_PASSACAGLIA":         50,
		"FORM_PAVANE":              51,
		"FORM_PERPETUUMMOBILE":     52,
		"FORM_POLONAISE":           53,
		"FORM_PRELUDE":             54,
		"FORM_RAGA":                55,
		"FORM_RHAPSODY":            56,
		"FORM_RICERCAR":            57,
		"FORM_RONDO":               58,
		"FORM_SALTARELLO":          59,
		"FORM_SARABANDE":           60,
		"FORM_SCHERZO":             61,
		"FORM_SEQUENCE":            62,
		"FORM_SERENADE":            63,
		"FORM_SINFONIACONCERTANTE": 64,
		"FORM_SONATA":              65,
		"FORM_SONATINA":            66,
		"FORM_SUITE":               67,
		"FORM_SYMPHONICPOEM":       68,
		"FORM_SYMPHONY":            69,
		"FORM_TARANTELLA":          70,
		"FORM_TIENTO":              71,
		"FORM_TOCCATA":             72,
		"FORM_VARIATION":           73,
		"FORM_VOCALISE":            74,
		"FORM_WALTZ":               75,
		"FORM_TWELVEBARBLUES":      76,
		"FORM_EIGHTBARBLUES":       77,
		"FORM_BALLAD":              78,
		"FORM_POWERBALLAD":         79,
		"FORM_RAG":                 80,
		"FORM_RHYTHMCHANGES":       81,
		"FORM_VERSEONLY":           82,
		"FORM_USERDEFINED":         83,
	}
)

func (x Form) Enum() *Form {
	p := new(Form)
	*p = x
	return p
}

func (x Form) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Form) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[68].Descriptor()
}

func (Form) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[68]
}

func (x Form) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Form.Descriptor instead.
func (Form) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{68}
}

type FrameRate int32

const (
	FrameRate_FRAME_RATE_UNSPECIFIED FrameRate = 0
	FrameRate_FRAME_RATE_E_24        FrameRate = 1
	FrameRate_FRAME_RATE_E_25        FrameRate = 2
	FrameRate_FRAME_RATE_E_29_97     FrameRate = 3
	FrameRate_FRAME_RATE_E_30        FrameRate = 4
)

// Enum value maps for FrameRate.
var (
	FrameRate_name = map[int32]string{
		0: "FRAME_RATE_UNSPECIFIED",
		1: "FRAME_RATE_E_24",
		2: "FRAME_RATE_E_25",
		3: "FRAME_RATE_E_29_97",
		4: "FRAME_RATE_E_30",
	}
	FrameRate_value = map[string]int32{
		"FRAME_RATE_UNSPECIFIED": 0,
		"FRAME_RATE_E_24":        1,
		"FRAME_RATE_E_25":        2,
		"FRAME_RATE_E_29_97":     3,
		"FRAME_RATE_E_30":        4,
	}
)

func (x FrameRate) Enum() *FrameRate {
	p := new(FrameRate)
	*p = x
	return p
}

func (x FrameRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameRate) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[69].Descriptor()
}

func (FrameRate) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[69]
}

func (x FrameRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrameRate.Descriptor instead.
func (FrameRate) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{69}
}

type Gender int32

const (
	Gender_GENDER_UNSPECIFIED Gender = 0
	Gender_GENDER_ANDROGYNOUS Gender = 1
	Gender_GENDER_FEMININE    Gender = 2
	Gender_GENDER_MASCULINE   Gender = 3
	Gender_GENDER_UNKNOWN     Gender = 4
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "GENDER_ANDROGYNOUS",
		2: "GENDER_FEMININE",
		3: "GENDER_MASCULINE",
		4: "GENDER_UNKNOWN",
	}
	Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"GENDER_ANDROGYNOUS": 1,
		"GENDER_FEMININE":    2,
		"GENDER_MASCULINE":   3,
		"GENDER_UNKNOWN":     4,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[70].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[70]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{70}
}

type GoverningAgreementType int32

const (
	GoverningAgreementType_GOVERNING_AGREEMENT_TYPE_UNSPECIFIED                GoverningAgreementType = 0
	GoverningAgreementType_GOVERNING_AGREEMENT_TYPE_USERDEFINED                GoverningAgreementType = 1
	GoverningAgreementType_GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT GoverningAgreementType = 2
)

// Enum value maps for GoverningAgreementType.
var (
	GoverningAgreementType_name = map[int32]string{
		0: "GOVERNING_AGREEMENT_TYPE_UNSPECIFIED",
		1: "GOVERNING_AGREEMENT_TYPE_USERDEFINED",
		2: "GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT",
	}
	GoverningAgreementType_value = map[string]int32{
		"GOVERNING_AGREEMENT_TYPE_UNSPECIFIED":                0,
		"GOVERNING_AGREEMENT_TYPE_USERDEFINED":                1,
		"GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT": 2,
	}
)

func (x GoverningAgreementType) Enum() *GoverningAgreementType {
	p := new(GoverningAgreementType)
	*p = x
	return p
}

func (x GoverningAgreementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoverningAgreementType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[71].Descriptor()
}

func (GoverningAgreementType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[71]
}

func (x GoverningAgreementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoverningAgreementType.Descriptor instead.
func (GoverningAgreementType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{71}
}

type HashSumAlgorithmType int32

const (
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_UNSPECIFIED HashSumAlgorithmType = 0
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_CRC32       HashSumAlgorithmType = 1
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MD2         HashSumAlgorithmType = 2
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MD4         HashSumAlgorithmType = 3
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MD4_MLNET   HashSumAlgorithmType = 4
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MD5         HashSumAlgorithmType = 5
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_MDC2        HashSumAlgorithmType = 6
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_RMD160      HashSumAlgorithmType = 7
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA         HashSumAlgorithmType = 8
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA1        HashSumAlgorithmType = 9
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA2        HashSumAlgorithmType = 10
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA_224     HashSumAlgorithmType = 11
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA_256     HashSumAlgorithmType = 12
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA3        HashSumAlgorithmType = 13
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA_384     HashSumAlgorithmType = 14
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_SHA_512     HashSumAlgorithmType = 15
	HashSumAlgorithmType_HASH_SUM_ALGORITHM_TYPE_USERDEFINED HashSumAlgorithmType = 16
)

// Enum value maps for HashSumAlgorithmType.
var (
	HashSumAlgorithmType_name = map[int32]string{
		0:  "HASH_SUM_ALGORITHM_TYPE_UNSPECIFIED",
		1:  "HASH_SUM_ALGORITHM_TYPE_CRC32",
		2:  "HASH_SUM_ALGORITHM_TYPE_MD2",
		3:  "HASH_SUM_ALGORITHM_TYPE_MD4",
		4:  "HASH_SUM_ALGORITHM_TYPE_MD4_MLNET",
		5:  "HASH_SUM_ALGORITHM_TYPE_MD5",
		6:  "HASH_SUM_ALGORITHM_TYPE_MDC2",
		7:  "HASH_SUM_ALGORITHM_TYPE_RMD160",
		8:  "HASH_SUM_ALGORITHM_TYPE_SHA",
		9:  "HASH_SUM_ALGORITHM_TYPE_SHA1",
		10: "HASH_SUM_ALGORITHM_TYPE_SHA2",
		11: "HASH_SUM_ALGORITHM_TYPE_SHA_224",
		12: "HASH_SUM_ALGORITHM_TYPE_SHA_256",
		13: "HASH_SUM_ALGORITHM_TYPE_SHA3",
		14: "HASH_SUM_ALGORITHM_TYPE_SHA_384",
		15: "HASH_SUM_ALGORITHM_TYPE_SHA_512",
		16: "HASH_SUM_ALGORITHM_TYPE_USERDEFINED",
	}
	HashSumAlgorithmType_value = map[string]int32{
		"HASH_SUM_ALGORITHM_TYPE_UNSPECIFIED": 0,
		"HASH_SUM_ALGORITHM_TYPE_CRC32":       1,
		"HASH_SUM_ALGORITHM_TYPE_MD2":         2,
		"HASH_SUM_ALGORITHM_TYPE_MD4":         3,
		"HASH_SUM_ALGORITHM_TYPE_MD4_MLNET":   4,
		"HASH_SUM_ALGORITHM_TYPE_MD5":         5,
		"HASH_SUM_ALGORITHM_TYPE_MDC2":        6,
		"HASH_SUM_ALGORITHM_TYPE_RMD160":      7,
		"HASH_SUM_ALGORITHM_TYPE_SHA":         8,
		"HASH_SUM_ALGORITHM_TYPE_SHA1":        9,
		"HASH_SUM_ALGORITHM_TYPE_SHA2":        10,
		"HASH_SUM_ALGORITHM_TYPE_SHA_224":     11,
		"HASH_SUM_ALGORITHM_TYPE_SHA_256":     12,
		"HASH_SUM_ALGORITHM_TYPE_SHA3":        13,
		"HASH_SUM_ALGORITHM_TYPE_SHA_384":     14,
		"HASH_SUM_ALGORITHM_TYPE_SHA_512":     15,
		"HASH_SUM_ALGORITHM_TYPE_USERDEFINED": 16,
	}
)

func (x HashSumAlgorithmType) Enum() *HashSumAlgorithmType {
	p := new(HashSumAlgorithmType)
	*p = x
	return p
}

func (x HashSumAlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashSumAlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[72].Descriptor()
}

func (HashSumAlgorithmType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[72]
}

func (x HashSumAlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashSumAlgorithmType.Descriptor instead.
func (HashSumAlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{72}
}

type ImageCodecType int32

const (
	ImageCodecType_IMAGE_CODEC_TYPE_UNSPECIFIED ImageCodecType = 0
	ImageCodecType_IMAGE_CODEC_TYPE_GIF         ImageCodecType = 1
	ImageCodecType_IMAGE_CODEC_TYPE_JPEG        ImageCodecType = 2
	ImageCodecType_IMAGE_CODEC_TYPE_JPEG2000    ImageCodecType = 3
	ImageCodecType_IMAGE_CODEC_TYPE_PNG         ImageCodecType = 4
	ImageCodecType_IMAGE_CODEC_TYPE_TIFF        ImageCodecType = 5
	ImageCodecType_IMAGE_CODEC_TYPE_UNKNOWN     ImageCodecType = 6
	ImageCodecType_IMAGE_CODEC_TYPE_USERDEFINED ImageCodecType = 7
)

// Enum value maps for ImageCodecType.
var (
	ImageCodecType_name = map[int32]string{
		0: "IMAGE_CODEC_TYPE_UNSPECIFIED",
		1: "IMAGE_CODEC_TYPE_GIF",
		2: "IMAGE_CODEC_TYPE_JPEG",
		3: "IMAGE_CODEC_TYPE_JPEG2000",
		4: "IMAGE_CODEC_TYPE_PNG",
		5: "IMAGE_CODEC_TYPE_TIFF",
		6: "IMAGE_CODEC_TYPE_UNKNOWN",
		7: "IMAGE_CODEC_TYPE_USERDEFINED",
	}
	ImageCodecType_value = map[string]int32{
		"IMAGE_CODEC_TYPE_UNSPECIFIED": 0,
		"IMAGE_CODEC_TYPE_GIF":         1,
		"IMAGE_CODEC_TYPE_JPEG":        2,
		"IMAGE_CODEC_TYPE_JPEG2000":    3,
		"IMAGE_CODEC_TYPE_PNG":         4,
		"IMAGE_CODEC_TYPE_TIFF":        5,
		"IMAGE_CODEC_TYPE_UNKNOWN":     6,
		"IMAGE_CODEC_TYPE_USERDEFINED": 7,
	}
)

func (x ImageCodecType) Enum() *ImageCodecType {
	p := new(ImageCodecType)
	*p = x
	return p
}

func (x ImageCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[73].Descriptor()
}

func (ImageCodecType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[73]
}

func (x ImageCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageCodecType.Descriptor instead.
func (ImageCodecType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{73}
}

type ImageType int32

const (
	ImageType_IMAGE_TYPE_UNSPECIFIED        ImageType = 0
	ImageType_IMAGE_TYPE_BACKCOVERIMAGE     ImageType = 1
	ImageType_IMAGE_TYPE_BOOKLETBACKIMAGE   ImageType = 2
	ImageType_IMAGE_TYPE_BOOKLETFRONTIMAGE  ImageType = 3
	ImageType_IMAGE_TYPE_DOCUMENTIMAGE      ImageType = 4
	ImageType_IMAGE_TYPE_FRONTCOVERIMAGE    ImageType = 5
	ImageType_IMAGE_TYPE_ICON               ImageType = 6
	ImageType_IMAGE_TYPE_LOGO               ImageType = 7
	ImageType_IMAGE_TYPE_PHOTOGRAPH         ImageType = 8
	ImageType_IMAGE_TYPE_POSTER             ImageType = 9
	ImageType_IMAGE_TYPE_TRAYIMAGE          ImageType = 10
	ImageType_IMAGE_TYPE_UNKNOWN            ImageType = 11
	ImageType_IMAGE_TYPE_USERDEFINED        ImageType = 12
	ImageType_IMAGE_TYPE_VIDEOSCREENCAPTURE ImageType = 13
	ImageType_IMAGE_TYPE_WALLPAPER          ImageType = 14
	ImageType_IMAGE_TYPE_PORTRAIT           ImageType = 15
)

// Enum value maps for ImageType.
var (
	ImageType_name = map[int32]string{
		0:  "IMAGE_TYPE_UNSPECIFIED",
		1:  "IMAGE_TYPE_BACKCOVERIMAGE",
		2:  "IMAGE_TYPE_BOOKLETBACKIMAGE",
		3:  "IMAGE_TYPE_BOOKLETFRONTIMAGE",
		4:  "IMAGE_TYPE_DOCUMENTIMAGE",
		5:  "IMAGE_TYPE_FRONTCOVERIMAGE",
		6:  "IMAGE_TYPE_ICON",
		7:  "IMAGE_TYPE_LOGO",
		8:  "IMAGE_TYPE_PHOTOGRAPH",
		9:  "IMAGE_TYPE_POSTER",
		10: "IMAGE_TYPE_TRAYIMAGE",
		11: "IMAGE_TYPE_UNKNOWN",
		12: "IMAGE_TYPE_USERDEFINED",
		13: "IMAGE_TYPE_VIDEOSCREENCAPTURE",
		14: "IMAGE_TYPE_WALLPAPER",
		15: "IMAGE_TYPE_PORTRAIT",
	}
	ImageType_value = map[string]int32{
		"IMAGE_TYPE_UNSPECIFIED":        0,
		"IMAGE_TYPE_BACKCOVERIMAGE":     1,
		"IMAGE_TYPE_BOOKLETBACKIMAGE":   2,
		"IMAGE_TYPE_BOOKLETFRONTIMAGE":  3,
		"IMAGE_TYPE_DOCUMENTIMAGE":      4,
		"IMAGE_TYPE_FRONTCOVERIMAGE":    5,
		"IMAGE_TYPE_ICON":               6,
		"IMAGE_TYPE_LOGO":               7,
		"IMAGE_TYPE_PHOTOGRAPH":         8,
		"IMAGE_TYPE_POSTER":             9,
		"IMAGE_TYPE_TRAYIMAGE":          10,
		"IMAGE_TYPE_UNKNOWN":            11,
		"IMAGE_TYPE_USERDEFINED":        12,
		"IMAGE_TYPE_VIDEOSCREENCAPTURE": 13,
		"IMAGE_TYPE_WALLPAPER":          14,
		"IMAGE_TYPE_PORTRAIT":           15,
	}
)

func (x ImageType) Enum() *ImageType {
	p := new(ImageType)
	*p = x
	return p
}

func (x ImageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[74].Descriptor()
}

func (ImageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[74]
}

func (x ImageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageType.Descriptor instead.
func (ImageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{74}
}

type InstrumentType int32

const (
	InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED                   InstrumentType = 0
	InstrumentType_INSTRUMENT_TYPE_ACCORDION                     InstrumentType = 1
	InstrumentType_INSTRUMENT_TYPE_BANDONEON                     InstrumentType = 2
	InstrumentType_INSTRUMENT_TYPE_CHROMATICBUTTONACCORDION      InstrumentType = 3
	InstrumentType_INSTRUMENT_TYPE_CONCERTINA                    InstrumentType = 4
	InstrumentType_INSTRUMENT_TYPE_CORDOVOX                      InstrumentType = 5
	InstrumentType_INSTRUMENT_TYPE_MELODEON                      InstrumentType = 6
	InstrumentType_INSTRUMENT_TYPE_MUSETTE                       InstrumentType = 7
	InstrumentType_INSTRUMENT_TYPE_PIANOACCORDION                InstrumentType = 8
	InstrumentType_INSTRUMENT_TYPE_TOYACCORDION                  InstrumentType = 9
	InstrumentType_INSTRUMENT_TYPE_ACOUSTICBASSGUITAR            InstrumentType = 10
	InstrumentType_INSTRUMENT_TYPE_BABYBASS                      InstrumentType = 11
	InstrumentType_INSTRUMENT_TYPE_BASS                          InstrumentType = 12
	InstrumentType_INSTRUMENT_TYPE_ELECTRICBASSGUITAR            InstrumentType = 13
	InstrumentType_INSTRUMENT_TYPE_FRETLESSBASSGUITAR            InstrumentType = 14
	InstrumentType_INSTRUMENT_TYPE_PICCOLOBASS                   InstrumentType = 15
	InstrumentType_INSTRUMENT_TYPE_UPRIGHTBASS                   InstrumentType = 16
	InstrumentType_INSTRUMENT_TYPE_WASHTUBBASS                   InstrumentType = 17
	InstrumentType_INSTRUMENT_TYPE_DRUMMACHINE                   InstrumentType = 18
	InstrumentType_INSTRUMENT_TYPE_BREAKBEAT                     InstrumentType = 19
	InstrumentType_INSTRUMENT_TYPE_DRUMKIT                       InstrumentType = 20
	InstrumentType_INSTRUMENT_TYPE_DRUMSAMPLE                    InstrumentType = 21
	InstrumentType_INSTRUMENT_TYPE_E_12_STRINGELECTRICGUITAR     InstrumentType = 22
	InstrumentType_INSTRUMENT_TYPE_E_12_STRINGGUITAR             InstrumentType = 23
	InstrumentType_INSTRUMENT_TYPE_ACOUSTICGUITAR                InstrumentType = 24
	InstrumentType_INSTRUMENT_TYPE_BAHIANGUITAR                  InstrumentType = 25
	InstrumentType_INSTRUMENT_TYPE_BAJOSEXTO                     InstrumentType = 26
	InstrumentType_INSTRUMENT_TYPE_BARITONEGUITAR                InstrumentType = 27
	InstrumentType_INSTRUMENT_TYPE_BAROQUEGUITAR                 InstrumentType = 28
	InstrumentType_INSTRUMENT_TYPE_CHAPMANSTICK                  InstrumentType = 29
	InstrumentType_INSTRUMENT_TYPE_NYLONSTRINGGUITAR             InstrumentType = 30
	InstrumentType_INSTRUMENT_TYPE_DOBROGUITAR                   InstrumentType = 31
	InstrumentType_INSTRUMENT_TYPE_ELECTRICGUITAR                InstrumentType = 32
	InstrumentType_INSTRUMENT_TYPE_ELECTRICSITAR                 InstrumentType = 33
	InstrumentType_INSTRUMENT_TYPE_FRYINGPANGUITAR               InstrumentType = 34
	InstrumentType_INSTRUMENT_TYPE_GUITAR                        InstrumentType = 35
	InstrumentType_INSTRUMENT_TYPE_GUITARRON                     InstrumentType = 36
	InstrumentType_INSTRUMENT_TYPE_LAPSTEELGUITAR                InstrumentType = 37
	InstrumentType_INSTRUMENT_TYPE_PEDABRO                       InstrumentType = 38
	InstrumentType_INSTRUMENT_TYPE_PEDALSTEELGUITAR              InstrumentType = 39
	InstrumentType_INSTRUMENT_TYPE_PORTUGUESEGUITAR              InstrumentType = 40
	InstrumentType_INSTRUMENT_TYPE_RENAISSANCEGUITAR             InstrumentType = 41
	InstrumentType_INSTRUMENT_TYPE_ROMANTICGUITAR                InstrumentType = 42
	InstrumentType_INSTRUMENT_TYPE_TENORGUITAR                   InstrumentType = 43
	InstrumentType_INSTRUMENT_TYPE_TIPLE                         InstrumentType = 44
	InstrumentType_INSTRUMENT_TYPE_TOUCHGUITAR                   InstrumentType = 45
	InstrumentType_INSTRUMENT_TYPE_TRES                          InstrumentType = 46
	InstrumentType_INSTRUMENT_TYPE_VIOLACAIPIRA                  InstrumentType = 47
	InstrumentType_INSTRUMENT_TYPE_ACOUSTICKEYBOARD              InstrumentType = 48
	InstrumentType_INSTRUMENT_TYPE_CELESTA                       InstrumentType = 49
	InstrumentType_INSTRUMENT_TYPE_CHAMBERLIN                    InstrumentType = 50
	InstrumentType_INSTRUMENT_TYPE_CLAVICHORD                    InstrumentType = 51
	InstrumentType_INSTRUMENT_TYPE_CLAVINET                      InstrumentType = 52
	InstrumentType_INSTRUMENT_TYPE_DULCITONE                     InstrumentType = 53
	InstrumentType_INSTRUMENT_TYPE_ELECTRICPIANO                 InstrumentType = 54
	InstrumentType_INSTRUMENT_TYPE_HARPSICHORD                   InstrumentType = 55
	InstrumentType_INSTRUMENT_TYPE_KEYBOARD                      InstrumentType = 56
	InstrumentType_INSTRUMENT_TYPE_MELLOTRON                     InstrumentType = 57
	InstrumentType_INSTRUMENT_TYPE_OPTIGAN                       InstrumentType = 58
	InstrumentType_INSTRUMENT_TYPE_PIANET                        InstrumentType = 59
	InstrumentType_INSTRUMENT_TYPE_RHODES                        InstrumentType = 60
	InstrumentType_INSTRUMENT_TYPE_SAMPLEDKEYBOARD               InstrumentType = 61
	InstrumentType_INSTRUMENT_TYPE_SPINET                        InstrumentType = 62
	InstrumentType_INSTRUMENT_TYPE_VAKOORCHESTRON                InstrumentType = 63
	InstrumentType_INSTRUMENT_TYPE_VIRGINALS                     InstrumentType = 64
	InstrumentType_INSTRUMENT_TYPE_ELECTRICORGAN                 InstrumentType = 65
	InstrumentType_INSTRUMENT_TYPE_HAMMONDORGAN                  InstrumentType = 66
	InstrumentType_INSTRUMENT_TYPE_LOWREYORGAN                   InstrumentType = 67
	InstrumentType_INSTRUMENT_TYPE_ORGAN                         InstrumentType = 68
	InstrumentType_INSTRUMENT_TYPE_PIPEORGAN                     InstrumentType = 69
	InstrumentType_INSTRUMENT_TYPE_POSITIVEORGAN                 InstrumentType = 70
	InstrumentType_INSTRUMENT_TYPE_PUMPORGAN                     InstrumentType = 71
	InstrumentType_INSTRUMENT_TYPE_BARRELORGAN                   InstrumentType = 72
	InstrumentType_INSTRUMENT_TYPE_BICYCLEPUMP                   InstrumentType = 73
	InstrumentType_INSTRUMENT_TYPE_CHURCHBELLS                   InstrumentType = 74
	InstrumentType_INSTRUMENT_TYPE_COMB                          InstrumentType = 75
	InstrumentType_INSTRUMENT_TYPE_DICTOPHONE                    InstrumentType = 76
	InstrumentType_INSTRUMENT_TYPE_HOHNERGUITARET                InstrumentType = 77
	InstrumentType_INSTRUMENT_TYPE_JEWSHARP                      InstrumentType = 78
	InstrumentType_INSTRUMENT_TYPE_KAZOO                         InstrumentType = 79
	InstrumentType_INSTRUMENT_TYPE_MUSICBOX                      InstrumentType = 80
	InstrumentType_INSTRUMENT_TYPE_OMNICHORD                     InstrumentType = 81
	InstrumentType_INSTRUMENT_TYPE_OTHERINSTRUMENT               InstrumentType = 82
	InstrumentType_INSTRUMENT_TYPE_SPECTRASONICSOMNISPHERE       InstrumentType = 83
	InstrumentType_INSTRUMENT_TYPE_TOYPIANO                      InstrumentType = 84
	InstrumentType_INSTRUMENT_TYPE_TURNTABLE                     InstrumentType = 85
	InstrumentType_INSTRUMENT_TYPE_AFRICANPERCUSSION             InstrumentType = 86
	InstrumentType_INSTRUMENT_TYPE_AGOGOBELLS                    InstrumentType = 87
	InstrumentType_INSTRUMENT_TYPE_ANGKLUNG                      InstrumentType = 88
	InstrumentType_INSTRUMENT_TYPE_ANVIL                         InstrumentType = 89
	InstrumentType_INSTRUMENT_TYPE_ATUMPAN                       InstrumentType = 90
	InstrumentType_INSTRUMENT_TYPE_BALAFON                       InstrumentType = 91
	InstrumentType_INSTRUMENT_TYPE_BASSDRUM_CONCERT              InstrumentType = 92
	InstrumentType_INSTRUMENT_TYPE_BASSDRUM_KICK                 InstrumentType = 93
	InstrumentType_INSTRUMENT_TYPE_BATA                          InstrumentType = 94
	InstrumentType_INSTRUMENT_TYPE_BELLTREE                      InstrumentType = 95
	InstrumentType_INSTRUMENT_TYPE_BENDIR                        InstrumentType = 96
	InstrumentType_INSTRUMENT_TYPE_BERIMBAU                      InstrumentType = 97
	InstrumentType_INSTRUMENT_TYPE_BINGHIDRUM                    InstrumentType = 98
	InstrumentType_INSTRUMENT_TYPE_BODHRAN                       InstrumentType = 99
	InstrumentType_INSTRUMENT_TYPE_BODYPERCUSSION                InstrumentType = 100
	InstrumentType_INSTRUMENT_TYPE_BOMBO                         InstrumentType = 101
	InstrumentType_INSTRUMENT_TYPE_BOMBOLEGUERO                  InstrumentType = 102
	InstrumentType_INSTRUMENT_TYPE_BONES                         InstrumentType = 103
	InstrumentType_INSTRUMENT_TYPE_BONGOS                        InstrumentType = 104
	InstrumentType_INSTRUMENT_TYPE_BOTTLES                       InstrumentType = 105
	InstrumentType_INSTRUMENT_TYPE_BRAZILIANPERCUSSION           InstrumentType = 106
	InstrumentType_INSTRUMENT_TYPE_CABASA                        InstrumentType = 107
	InstrumentType_INSTRUMENT_TYPE_CAIXA                         InstrumentType = 108
	InstrumentType_INSTRUMENT_TYPE_CAJA                          InstrumentType = 109
	InstrumentType_INSTRUMENT_TYPE_CAJON                         InstrumentType = 110
	InstrumentType_INSTRUMENT_TYPE_CALABASH                      InstrumentType = 111
	InstrumentType_INSTRUMENT_TYPE_CARILLON                      InstrumentType = 112
	InstrumentType_INSTRUMENT_TYPE_CASTANET                      InstrumentType = 113
	InstrumentType_INSTRUMENT_TYPE_CAXIXI                        InstrumentType = 114
	InstrumentType_INSTRUMENT_TYPE_CHIMES                        InstrumentType = 115
	InstrumentType_INSTRUMENT_TYPE_CHOCALHO                      InstrumentType = 116
	InstrumentType_INSTRUMENT_TYPE_CLAPSTICK                     InstrumentType = 117
	InstrumentType_INSTRUMENT_TYPE_CLAVES                        InstrumentType = 118
	InstrumentType_INSTRUMENT_TYPE_CLAYPOT                       InstrumentType = 119
	InstrumentType_INSTRUMENT_TYPE_CONGAS                        InstrumentType = 120
	InstrumentType_INSTRUMENT_TYPE_COWBELL                       InstrumentType = 121
	InstrumentType_INSTRUMENT_TYPE_CROTALES                      InstrumentType = 122
	InstrumentType_INSTRUMENT_TYPE_CUICA                         InstrumentType = 123
	InstrumentType_INSTRUMENT_TYPE_CYMBAL_CRASH                  InstrumentType = 124
	InstrumentType_INSTRUMENT_TYPE_CYMBAL_RIDE                   InstrumentType = 125
	InstrumentType_INSTRUMENT_TYPE_CYMBAL_SUSPENDED              InstrumentType = 126
	InstrumentType_INSTRUMENT_TYPE_CYMBALS                       InstrumentType = 127
	InstrumentType_INSTRUMENT_TYPE_DAF                           InstrumentType = 128
	InstrumentType_INSTRUMENT_TYPE_DAMARU                        InstrumentType = 129
	InstrumentType_INSTRUMENT_TYPE_DAVUL                         InstrumentType = 130
	InstrumentType_INSTRUMENT_TYPE_DAYEREH                       InstrumentType = 131
	InstrumentType_INSTRUMENT_TYPE_DEFI                          InstrumentType = 132
	InstrumentType_INSTRUMENT_TYPE_DHOL                          InstrumentType = 133
	InstrumentType_INSTRUMENT_TYPE_DHOLAK                        InstrumentType = 134
	InstrumentType_INSTRUMENT_TYPE_DJEMBE                        InstrumentType = 135
	InstrumentType_INSTRUMENT_TYPE_DOHOL                         InstrumentType = 136
	InstrumentType_INSTRUMENT_TYPE_DOUMBEK                       InstrumentType = 137
	InstrumentType_INSTRUMENT_TYPE_DRUMSTICKS                    InstrumentType = 138
	InstrumentType_INSTRUMENT_TYPE_DUGGI                         InstrumentType = 139
	InstrumentType_INSTRUMENT_TYPE_DUNUN                         InstrumentType = 140
	InstrumentType_INSTRUMENT_TYPE_ELEPHANTBELL                  InstrumentType = 141
	InstrumentType_INSTRUMENT_TYPE_FINGERCLICKS                  InstrumentType = 142
	InstrumentType_INSTRUMENT_TYPE_FINGERCYMBALS                 InstrumentType = 143
	InstrumentType_INSTRUMENT_TYPE_FINGERSNAPS                   InstrumentType = 144
	InstrumentType_INSTRUMENT_TYPE_FLEXATONE                     InstrumentType = 145
	InstrumentType_INSTRUMENT_TYPE_FOLKLORICPERCUSSION           InstrumentType = 146
	InstrumentType_INSTRUMENT_TYPE_FOOTSTOMP                     InstrumentType = 147
	InstrumentType_INSTRUMENT_TYPE_FROG                          InstrumentType = 148
	InstrumentType_INSTRUMENT_TYPE_GAMBANG                       InstrumentType = 149
	InstrumentType_INSTRUMENT_TYPE_GAMELAN                       InstrumentType = 150
	InstrumentType_INSTRUMENT_TYPE_GANGA                         InstrumentType = 151
	InstrumentType_INSTRUMENT_TYPE_GLASSHARMONICA                InstrumentType = 152
	InstrumentType_INSTRUMENT_TYPE_GLASSHARP                     InstrumentType = 153
	InstrumentType_INSTRUMENT_TYPE_GLOCKENSPIEL                  InstrumentType = 154
	InstrumentType_INSTRUMENT_TYPE_GONG                          InstrumentType = 155
	InstrumentType_INSTRUMENT_TYPE_GUACHARACA                    InstrumentType = 156
	InstrumentType_INSTRUMENT_TYPE_GUACHE                        InstrumentType = 157
	InstrumentType_INSTRUMENT_TYPE_GUIRA                         InstrumentType = 158
	InstrumentType_INSTRUMENT_TYPE_GUIRO                         InstrumentType = 159
	InstrumentType_INSTRUMENT_TYPE_HANDBELLS                     InstrumentType = 160
	InstrumentType_INSTRUMENT_TYPE_HANDCHIMES                    InstrumentType = 161
	InstrumentType_INSTRUMENT_TYPE_HANDCLAPS                     InstrumentType = 162
	InstrumentType_INSTRUMENT_TYPE_HIHATCYMBAL                   InstrumentType = 163
	InstrumentType_INSTRUMENT_TYPE_JAMBLOCK                      InstrumentType = 164
	InstrumentType_INSTRUMENT_TYPE_JAWBONE                       InstrumentType = 165
	InstrumentType_INSTRUMENT_TYPE_JAWHARP                       InstrumentType = 166
	InstrumentType_INSTRUMENT_TYPE_JUG                           InstrumentType = 167
	InstrumentType_INSTRUMENT_TYPE_KANJIRA                       InstrumentType = 168
	InstrumentType_INSTRUMENT_TYPE_KATSA                         InstrumentType = 169
	InstrumentType_INSTRUMENT_TYPE_KENDANG                       InstrumentType = 170
	InstrumentType_INSTRUMENT_TYPE_KHAMAK                        InstrumentType = 171
	InstrumentType_INSTRUMENT_TYPE_KHARTAL                       InstrumentType = 172
	InstrumentType_INSTRUMENT_TYPE_KHOL                          InstrumentType = 173
	InstrumentType_INSTRUMENT_TYPE_KHONGWONGLEK                  InstrumentType = 174
	InstrumentType_INSTRUMENT_TYPE_KHONGWONGYAI                  InstrumentType = 175
	InstrumentType_INSTRUMENT_TYPE_KNUCKLES                      InstrumentType = 176
	InstrumentType_INSTRUMENT_TYPE_LATINPERCUSSION               InstrumentType = 177
	InstrumentType_INSTRUMENT_TYPE_LITHOPHONE                    InstrumentType = 178
	InstrumentType_INSTRUMENT_TYPE_LOKOLE                        InstrumentType = 179
	InstrumentType_INSTRUMENT_TYPE_MADAL                         InstrumentType = 180
	InstrumentType_INSTRUMENT_TYPE_MARACAS                       InstrumentType = 181
	InstrumentType_INSTRUMENT_TYPE_MARIMBA                       InstrumentType = 182
	InstrumentType_INSTRUMENT_TYPE_MARIMBAPHONE                  InstrumentType = 183
	InstrumentType_INSTRUMENT_TYPE_MARIMBULA                     InstrumentType = 184
	InstrumentType_INSTRUMENT_TYPE_MAZHAR                        InstrumentType = 185
	InstrumentType_INSTRUMENT_TYPE_KALIMBA                       InstrumentType = 186
	InstrumentType_INSTRUMENT_TYPE_METALCANS                     InstrumentType = 187
	InstrumentType_INSTRUMENT_TYPE_MOUTHPERCUSSION               InstrumentType = 188
	InstrumentType_INSTRUMENT_TYPE_MRIDANGAM                     InstrumentType = 189
	InstrumentType_INSTRUMENT_TYPE_MUHARSING                     InstrumentType = 190
	InstrumentType_INSTRUMENT_TYPE_NAAL                          InstrumentType = 191
	InstrumentType_INSTRUMENT_TYPE_NAGARA                        InstrumentType = 192
	InstrumentType_INSTRUMENT_TYPE_OBOROMDRUM                    InstrumentType = 193
	InstrumentType_INSTRUMENT_TYPE_OCTOBAN                       InstrumentType = 194
	InstrumentType_INSTRUMENT_TYPE_ORCHESTRALPERCUSSION          InstrumentType = 195
	InstrumentType_INSTRUMENT_TYPE_PADDLEDRUMS                   InstrumentType = 196
	InstrumentType_INSTRUMENT_TYPE_PANDEIRO                      InstrumentType = 197
	InstrumentType_INSTRUMENT_TYPE_PERCUSSIONINSTRUMENT          InstrumentType = 198
	InstrumentType_INSTRUMENT_TYPE_PITCHEDPERCUSSIONINSTRUMENT   InstrumentType = 199
	InstrumentType_INSTRUMENT_TYPE_PONGLANG                      InstrumentType = 200
	InstrumentType_INSTRUMENT_TYPE_POTSANDPANS                   InstrumentType = 201
	InstrumentType_INSTRUMENT_TYPE_QARKABEB                      InstrumentType = 202
	InstrumentType_INSTRUMENT_TYPE_RAINSTICK                     InstrumentType = 203
	InstrumentType_INSTRUMENT_TYPE_RANAT                         InstrumentType = 204
	InstrumentType_INSTRUMENT_TYPE_RATCHET                       InstrumentType = 205
	InstrumentType_INSTRUMENT_TYPE_RATTLE                        InstrumentType = 206
	InstrumentType_INSTRUMENT_TYPE_RECORECO                      InstrumentType = 207
	InstrumentType_INSTRUMENT_TYPE_REPINIQUE                     InstrumentType = 208
	InstrumentType_INSTRUMENT_TYPE_RHYTHMSTICK                   InstrumentType = 209
	InstrumentType_INSTRUMENT_TYPE_RIQ                           InstrumentType = 210
	InstrumentType_INSTRUMENT_TYPE_RNGA                          InstrumentType = 211
	InstrumentType_INSTRUMENT_TYPE_ROLMO                         InstrumentType = 212
	InstrumentType_INSTRUMENT_TYPE_ROTOTOMS                      InstrumentType = 213
	InstrumentType_INSTRUMENT_TYPE_SABAR                         InstrumentType = 214
	InstrumentType_INSTRUMENT_TYPE_SANDBLOCKS                    InstrumentType = 215
	InstrumentType_INSTRUMENT_TYPE_SAW                           InstrumentType = 216
	InstrumentType_INSTRUMENT_TYPE_SCRATCHER                     InstrumentType = 217
	InstrumentType_INSTRUMENT_TYPE_SHAKER                        InstrumentType = 218
	InstrumentType_INSTRUMENT_TYPE_SHEKERE                       InstrumentType = 219
	InstrumentType_INSTRUMENT_TYPE_SINGINGBOWLS                  InstrumentType = 220
	InstrumentType_INSTRUMENT_TYPE_SISTRUM                       InstrumentType = 221
	InstrumentType_INSTRUMENT_TYPE_SLAPSTICK                     InstrumentType = 222
	InstrumentType_INSTRUMENT_TYPE_SLEIGHBELLS                   InstrumentType = 223
	InstrumentType_INSTRUMENT_TYPE_SNAREDRUM                     InstrumentType = 224
	InstrumentType_INSTRUMENT_TYPE_SNAREDRUM_MARCHING            InstrumentType = 225
	InstrumentType_INSTRUMENT_TYPE_SPOONS                        InstrumentType = 226
	InstrumentType_INSTRUMENT_TYPE_SPRINGDRUM                    InstrumentType = 227
	InstrumentType_INSTRUMENT_TYPE_STEELDRUMS                    InstrumentType = 228
	InstrumentType_INSTRUMENT_TYPE_STICKS                        InstrumentType = 229
	InstrumentType_INSTRUMENT_TYPE_SURDO                         InstrumentType = 230
	InstrumentType_INSTRUMENT_TYPE_TAAL                          InstrumentType = 231
	InstrumentType_INSTRUMENT_TYPE_TAARIJA                       InstrumentType = 232
	InstrumentType_INSTRUMENT_TYPE_TABLA                         InstrumentType = 233
	InstrumentType_INSTRUMENT_TYPE_TABOR                         InstrumentType = 234
	InstrumentType_INSTRUMENT_TYPE_TAIKO                         InstrumentType = 235
	InstrumentType_INSTRUMENT_TYPE_TALKINGDRUM                   InstrumentType = 236
	InstrumentType_INSTRUMENT_TYPE_TAMBORA                       InstrumentType = 237
	InstrumentType_INSTRUMENT_TYPE_TAMBORIM                      InstrumentType = 238
	InstrumentType_INSTRUMENT_TYPE_TAMBOURINE                    InstrumentType = 239
	InstrumentType_INSTRUMENT_TYPE_TAONGAPUORO                   InstrumentType = 240
	InstrumentType_INSTRUMENT_TYPE_TAR_PERCUSSION                InstrumentType = 241
	InstrumentType_INSTRUMENT_TYPE_TAROL                         InstrumentType = 242
	InstrumentType_INSTRUMENT_TYPE_TEMPLEBELL                    InstrumentType = 243
	InstrumentType_INSTRUMENT_TYPE_TEMPLEBLOCKS                  InstrumentType = 244
	InstrumentType_INSTRUMENT_TYPE_TENORDRUM                     InstrumentType = 245
	InstrumentType_INSTRUMENT_TYPE_THAVIL                        InstrumentType = 246
	InstrumentType_INSTRUMENT_TYPE_THUNDERSHEET                  InstrumentType = 247
	InstrumentType_INSTRUMENT_TYPE_TIBETANBELLS                  InstrumentType = 248
	InstrumentType_INSTRUMENT_TYPE_TIMBALES                      InstrumentType = 249
	InstrumentType_INSTRUMENT_TYPE_TIMBAU                        InstrumentType = 250
	InstrumentType_INSTRUMENT_TYPE_TIMPANI                       InstrumentType = 251
	InstrumentType_INSTRUMENT_TYPE_TINGSHA                       InstrumentType = 252
	InstrumentType_INSTRUMENT_TYPE_TOMPAK                        InstrumentType = 253
	InstrumentType_INSTRUMENT_TYPE_TOMS                          InstrumentType = 254
	InstrumentType_INSTRUMENT_TYPE_TONGUEDRUM                    InstrumentType = 255
	InstrumentType_INSTRUMENT_TYPE_TRIANGLE                      InstrumentType = 256
	InstrumentType_INSTRUMENT_TYPE_TXALAPARTA                    InstrumentType = 257
	InstrumentType_INSTRUMENT_TYPE_UDU                           InstrumentType = 258
	InstrumentType_INSTRUMENT_TYPE_ULIULI                        InstrumentType = 259
	InstrumentType_INSTRUMENT_TYPE_UNPITCHEDPERCUSSIONINSTRUMENT InstrumentType = 260
	InstrumentType_INSTRUMENT_TYPE_URUMEE                        InstrumentType = 261
	InstrumentType_INSTRUMENT_TYPE_VIBRAPHONE                    InstrumentType = 262
	InstrumentType_INSTRUMENT_TYPE_VIBRASLAP                     InstrumentType = 263
	InstrumentType_INSTRUMENT_TYPE_WASHBOARD                     InstrumentType = 264
	InstrumentType_INSTRUMENT_TYPE_WATERPHONE                    InstrumentType = 265
	InstrumentType_INSTRUMENT_TYPE_WINDCHIMES                    InstrumentType = 266
	InstrumentType_INSTRUMENT_TYPE_WINDMACHINE                   InstrumentType = 267
	InstrumentType_INSTRUMENT_TYPE_WOBBLEBOARD                   InstrumentType = 268
	InstrumentType_INSTRUMENT_TYPE_WOODBLOCK                     InstrumentType = 269
	InstrumentType_INSTRUMENT_TYPE_XYLOPHONE                     InstrumentType = 270
	InstrumentType_INSTRUMENT_TYPE_XYLORIMBA                     InstrumentType = 271
	InstrumentType_INSTRUMENT_TYPE_ZERBAGHALI                    InstrumentType = 272
	InstrumentType_INSTRUMENT_TYPE_ZYDECORUBBOARD                InstrumentType = 273
	InstrumentType_INSTRUMENT_TYPE_FORTEPIANO                    InstrumentType = 274
	InstrumentType_INSTRUMENT_TYPE_GRANDPIANO                    InstrumentType = 275
	InstrumentType_INSTRUMENT_TYPE_LUTHEAL                       InstrumentType = 276
	InstrumentType_INSTRUMENT_TYPE_PIANO                         InstrumentType = 277
	InstrumentType_INSTRUMENT_TYPE_PIANOHARP                     InstrumentType = 278
	InstrumentType_INSTRUMENT_TYPE_PIANOLA                       InstrumentType = 279
	InstrumentType_INSTRUMENT_TYPE_PREPAREDPIANO                 InstrumentType = 280
	InstrumentType_INSTRUMENT_TYPE_SQUAREPIANO                   InstrumentType = 281
	InstrumentType_INSTRUMENT_TYPE_TACKPIANO                     InstrumentType = 282
	InstrumentType_INSTRUMENT_TYPE_UPRIGHTPIANO                  InstrumentType = 283
	InstrumentType_INSTRUMENT_TYPE_ANIMALSOUNDS                  InstrumentType = 284
	InstrumentType_INSTRUMENT_TYPE_APPLAUSE                      InstrumentType = 285
	InstrumentType_INSTRUMENT_TYPE_BIRDSONG                      InstrumentType = 286
	InstrumentType_INSTRUMENT_TYPE_CARSOUNDS                     InstrumentType = 287
	InstrumentType_INSTRUMENT_TYPE_CHATTER                       InstrumentType = 288
	InstrumentType_INSTRUMENT_TYPE_CHEWINGSOUNDS                 InstrumentType = 289
	InstrumentType_INSTRUMENT_TYPE_GIZMO                         InstrumentType = 290
	InstrumentType_INSTRUMENT_TYPE_GUNSHOTS                      InstrumentType = 291
	InstrumentType_INSTRUMENT_TYPE_MAGNETICTAPETREATMENTS        InstrumentType = 292
	InstrumentType_INSTRUMENT_TYPE_ORCHESTRALHIT                 InstrumentType = 293
	InstrumentType_INSTRUMENT_TYPE_RECORDNOISE                   InstrumentType = 294
	InstrumentType_INSTRUMENT_TYPE_SIREN                         InstrumentType = 295
	InstrumentType_INSTRUMENT_TYPE_SOUNDDESIGN                   InstrumentType = 296
	InstrumentType_INSTRUMENT_TYPE_SOUNDEFFECTS                  InstrumentType = 297
	InstrumentType_INSTRUMENT_TYPE_TRAINSOUNDS                   InstrumentType = 298
	InstrumentType_INSTRUMENT_TYPE_TREATMENTS                    InstrumentType = 299
	InstrumentType_INSTRUMENT_TYPE_UNINTENDEDARTIFACTS           InstrumentType = 300
	InstrumentType_INSTRUMENT_TYPE_E_5_STRINGBANJO               InstrumentType = 301
	InstrumentType_INSTRUMENT_TYPE_AFRICANHARP                   InstrumentType = 302
	InstrumentType_INSTRUMENT_TYPE_ALTOVIOL                      InstrumentType = 303
	InstrumentType_INSTRUMENT_TYPE_ANDEANHARP                    InstrumentType = 304
	InstrumentType_INSTRUMENT_TYPE_ARCHLUTE                      InstrumentType = 305
	InstrumentType_INSTRUMENT_TYPE_AUTOHARP                      InstrumentType = 306
	InstrumentType_INSTRUMENT_TYPE_BAGLAMA                       InstrumentType = 307
	InstrumentType_INSTRUMENT_TYPE_BALALAIKA                     InstrumentType = 308
	InstrumentType_INSTRUMENT_TYPE_BANDURA                       InstrumentType = 309
	InstrumentType_INSTRUMENT_TYPE_BANDURRIA                     InstrumentType = 310
	InstrumentType_INSTRUMENT_TYPE_BANHU                         InstrumentType = 311
	InstrumentType_INSTRUMENT_TYPE_BANJO                         InstrumentType = 312
	InstrumentType_INSTRUMENT_TYPE_BANJOGUITAR                   InstrumentType = 313
	InstrumentType_INSTRUMENT_TYPE_BANJOLIN                      InstrumentType = 314
	InstrumentType_INSTRUMENT_TYPE_BAROQUECELLO                  InstrumentType = 315
	InstrumentType_INSTRUMENT_TYPE_BAROQUEVIOLA                  InstrumentType = 316
	InstrumentType_INSTRUMENT_TYPE_BAROQUEVIOLIN                 InstrumentType = 317
	InstrumentType_INSTRUMENT_TYPE_BARYTON                       InstrumentType = 318
	InstrumentType_INSTRUMENT_TYPE_BASSBANJO                     InstrumentType = 319
	InstrumentType_INSTRUMENT_TYPE_BASSCITTERN                   InstrumentType = 320
	InstrumentType_INSTRUMENT_TYPE_BASSREBEC                     InstrumentType = 321
	InstrumentType_INSTRUMENT_TYPE_BASSVIOL                      InstrumentType = 322
	InstrumentType_INSTRUMENT_TYPE_BASSODABRACCIO                InstrumentType = 323
	InstrumentType_INSTRUMENT_TYPE_BIWA                          InstrumentType = 324
	InstrumentType_INSTRUMENT_TYPE_BOUZOUKI                      InstrumentType = 325
	InstrumentType_INSTRUMENT_TYPE_BOWEDSTRINGS                  InstrumentType = 326
	InstrumentType_INSTRUMENT_TYPE_BOZOQ                         InstrumentType = 327
	InstrumentType_INSTRUMENT_TYPE_BUFOBASS                      InstrumentType = 328
	InstrumentType_INSTRUMENT_TYPE_CAVAQUINHO                    InstrumentType = 329
	InstrumentType_INSTRUMENT_TYPE_CELLO                         InstrumentType = 330
	InstrumentType_INSTRUMENT_TYPE_CELLOBANJO                    InstrumentType = 331
	InstrumentType_INSTRUMENT_TYPE_CELTICHARP                    InstrumentType = 332
	InstrumentType_INSTRUMENT_TYPE_CHARANGO                      InstrumentType = 333
	InstrumentType_INSTRUMENT_TYPE_CIMBALOM                      InstrumentType = 334
	InstrumentType_INSTRUMENT_TYPE_CITOLE                        InstrumentType = 335
	InstrumentType_INSTRUMENT_TYPE_CITTERN                       InstrumentType = 336
	InstrumentType_INSTRUMENT_TYPE_CONCERTHARP                   InstrumentType = 337
	InstrumentType_INSTRUMENT_TYPE_CRAVIOLA                      InstrumentType = 338
	InstrumentType_INSTRUMENT_TYPE_CRWTH                         InstrumentType = 339
	InstrumentType_INSTRUMENT_TYPE_CUATRO                        InstrumentType = 340
	InstrumentType_INSTRUMENT_TYPE_CUMBUS                        InstrumentType = 341
	InstrumentType_INSTRUMENT_TYPE_DANBAU                        InstrumentType = 342
	InstrumentType_INSTRUMENT_TYPE_DANTRANH                      InstrumentType = 343
	InstrumentType_INSTRUMENT_TYPE_DILRUBA                       InstrumentType = 344
	InstrumentType_INSTRUMENT_TYPE_DOMBRA                        InstrumentType = 345
	InstrumentType_INSTRUMENT_TYPE_DOMRA                         InstrumentType = 346
	InstrumentType_INSTRUMENT_TYPE_DOUBLEBASS                    InstrumentType = 347
	InstrumentType_INSTRUMENT_TYPE_DOUBLEHARP                    InstrumentType = 348
	InstrumentType_INSTRUMENT_TYPE_DOUBLEVIOLIN                  InstrumentType = 349
	InstrumentType_INSTRUMENT_TYPE_DOUBLEBASSVIOL                InstrumentType = 350
	InstrumentType_INSTRUMENT_TYPE_DRANYEN                       InstrumentType = 351
	InstrumentType_INSTRUMENT_TYPE_DUTAR                         InstrumentType = 352
	InstrumentType_INSTRUMENT_TYPE_DZUDDAHORD                    InstrumentType = 353
	InstrumentType_INSTRUMENT_TYPE_EKTARA                        InstrumentType = 354
	InstrumentType_INSTRUMENT_TYPE_ELECTRIC6STRINGVIOLIN         InstrumentType = 355
	InstrumentType_INSTRUMENT_TYPE_ELECTRICCELLO                 InstrumentType = 356
	InstrumentType_INSTRUMENT_TYPE_ELECTRICHARP                  InstrumentType = 357
	InstrumentType_INSTRUMENT_TYPE_ELECTRICMANDOLIN              InstrumentType = 358
	InstrumentType_INSTRUMENT_TYPE_ELECTRICVIOLA                 InstrumentType = 359
	InstrumentType_INSTRUMENT_TYPE_ELECTRICVIOLIN                InstrumentType = 360
	InstrumentType_INSTRUMENT_TYPE_ELECTROACOUSTICHURDYGURDY     InstrumentType = 361
	InstrumentType_INSTRUMENT_TYPE_ENNANGA                       InstrumentType = 362
	InstrumentType_INSTRUMENT_TYPE_EPINETTEDESVOSGES             InstrumentType = 363
	InstrumentType_INSTRUMENT_TYPE_ERHU                          InstrumentType = 364
	InstrumentType_INSTRUMENT_TYPE_ESRAJ                         InstrumentType = 365
	InstrumentType_INSTRUMENT_TYPE_FIDDLE                        InstrumentType = 366
	InstrumentType_INSTRUMENT_TYPE_FOLKHARP                      InstrumentType = 367
	InstrumentType_INSTRUMENT_TYPE_GADULKA                       InstrumentType = 368
	InstrumentType_INSTRUMENT_TYPE_GARDON                        InstrumentType = 369
	InstrumentType_INSTRUMENT_TYPE_GAYAGEUM                      InstrumentType = 370
	InstrumentType_INSTRUMENT_TYPE_GHAYCHAK                      InstrumentType = 371
	InstrumentType_INSTRUMENT_TYPE_GITTERN                       InstrumentType = 372
	InstrumentType_INSTRUMENT_TYPE_GUQIN                         InstrumentType = 373
	InstrumentType_INSTRUMENT_TYPE_GUSLI                         InstrumentType = 374
	InstrumentType_INSTRUMENT_TYPE_GUZHENG                       InstrumentType = 375
	InstrumentType_INSTRUMENT_TYPE_HAEGEUM                       InstrumentType = 376
	InstrumentType_INSTRUMENT_TYPE_HAMMEREDDULCIMER              InstrumentType = 377
	InstrumentType_INSTRUMENT_TYPE_HAMMEREDSTRINGS               InstrumentType = 378
	InstrumentType_INSTRUMENT_TYPE_HARDANGERFIDDLE               InstrumentType = 379
	InstrumentType_INSTRUMENT_TYPE_HARP                          InstrumentType = 380
	InstrumentType_INSTRUMENT_TYPE_HUAPANGUERA                   InstrumentType = 381
	InstrumentType_INSTRUMENT_TYPE_HURDYGURDY                    InstrumentType = 382
	InstrumentType_INSTRUMENT_TYPE_IRISHBOUZOUKI                 InstrumentType = 383
	InstrumentType_INSTRUMENT_TYPE_JAKHAY                        InstrumentType = 384
	InstrumentType_INSTRUMENT_TYPE_JARANAJAROCHA                 InstrumentType = 385
	InstrumentType_INSTRUMENT_TYPE_JINGHU                        InstrumentType = 386
	InstrumentType_INSTRUMENT_TYPE_KACAPI                        InstrumentType = 387
	InstrumentType_INSTRUMENT_TYPE_KANTELE                       InstrumentType = 388
	InstrumentType_INSTRUMENT_TYPE_KANUN                         InstrumentType = 389
	InstrumentType_INSTRUMENT_TYPE_KEMENCHE                      InstrumentType = 390
	InstrumentType_INSTRUMENT_TYPE_KHIM                          InstrumentType = 391
	InstrumentType_INSTRUMENT_TYPE_KORA                          InstrumentType = 392
	InstrumentType_INSTRUMENT_TYPE_KOTO                          InstrumentType = 393
	InstrumentType_INSTRUMENT_TYPE_KUGO                          InstrumentType = 394
	InstrumentType_INSTRUMENT_TYPE_LANGELEIK                     InstrumentType = 395
	InstrumentType_INSTRUMENT_TYPE_LAOUTO                        InstrumentType = 396
	InstrumentType_INSTRUMENT_TYPE_LEONA                         InstrumentType = 397
	InstrumentType_INSTRUMENT_TYPE_LIRONE                        InstrumentType = 398
	InstrumentType_INSTRUMENT_TYPE_LUTE                          InstrumentType = 399
	InstrumentType_INSTRUMENT_TYPE_LYRAVIOL                      InstrumentType = 400
	InstrumentType_INSTRUMENT_TYPE_LYRE                          InstrumentType = 401
	InstrumentType_INSTRUMENT_TYPE_MANDOCELLO                    InstrumentType = 402
	InstrumentType_INSTRUMENT_TYPE_MANDOLA                       InstrumentType = 403
	InstrumentType_INSTRUMENT_TYPE_MANDOLELE                     InstrumentType = 404
	InstrumentType_INSTRUMENT_TYPE_MANDOLIN                      InstrumentType = 405
	InstrumentType_INSTRUMENT_TYPE_MANDOLINO                     InstrumentType = 406
	InstrumentType_INSTRUMENT_TYPE_MANDORE                       InstrumentType = 407
	InstrumentType_INSTRUMENT_TYPE_MARXOPHONE                    InstrumentType = 408
	InstrumentType_INSTRUMENT_TYPE_MEDIEVALFIDDLE                InstrumentType = 409
	InstrumentType_INSTRUMENT_TYPE_MEDIEVALHARP                  InstrumentType = 410
	InstrumentType_INSTRUMENT_TYPE_MOHANVEENA                    InstrumentType = 411
	InstrumentType_INSTRUMENT_TYPE_MUSICALBOW                    InstrumentType = 412
	InstrumentType_INSTRUMENT_TYPE_NGONI                         InstrumentType = 413
	InstrumentType_INSTRUMENT_TYPE_NJARKA                        InstrumentType = 414
	InstrumentType_INSTRUMENT_TYPE_NYATITI                       InstrumentType = 415
	InstrumentType_INSTRUMENT_TYPE_NYCKELHARPA                   InstrumentType = 416
	InstrumentType_INSTRUMENT_TYPE_ORGANISTRUM                   InstrumentType = 417
	InstrumentType_INSTRUMENT_TYPE_ORPHARION                     InstrumentType = 418
	InstrumentType_INSTRUMENT_TYPE_OUD                           InstrumentType = 419
	InstrumentType_INSTRUMENT_TYPE_PANDURA                       InstrumentType = 420
	InstrumentType_INSTRUMENT_TYPE_PARAGUAYANHARP                InstrumentType = 421
	InstrumentType_INSTRUMENT_TYPE_PHIN                          InstrumentType = 422
	InstrumentType_INSTRUMENT_TYPE_PHONOFIDDLE                   InstrumentType = 423
	InstrumentType_INSTRUMENT_TYPE_PIPA                          InstrumentType = 424
	InstrumentType_INSTRUMENT_TYPE_PLUCKEDDULCIMER               InstrumentType = 425
	InstrumentType_INSTRUMENT_TYPE_PLUCKEDSTRINGS                InstrumentType = 426
	InstrumentType_INSTRUMENT_TYPE_PSALTERY                      InstrumentType = 427
	InstrumentType_INSTRUMENT_TYPE_RABEL                         InstrumentType = 428
	InstrumentType_INSTRUMENT_TYPE_REBAB                         InstrumentType = 429
	InstrumentType_INSTRUMENT_TYPE_REBEC                         InstrumentType = 430
	InstrumentType_INSTRUMENT_TYPE_SANTOOR                       InstrumentType = 431
	InstrumentType_INSTRUMENT_TYPE_SARANGI                       InstrumentType = 432
	InstrumentType_INSTRUMENT_TYPE_SAROD                         InstrumentType = 433
	InstrumentType_INSTRUMENT_TYPE_SAUNG                         InstrumentType = 434
	InstrumentType_INSTRUMENT_TYPE_SAWDUANG                      InstrumentType = 435
	InstrumentType_INSTRUMENT_TYPE_SHAMISEN                      InstrumentType = 436
	InstrumentType_INSTRUMENT_TYPE_SIMSIMIYYA                    InstrumentType = 437
	InstrumentType_INSTRUMENT_TYPE_SINTIR                        InstrumentType = 438
	InstrumentType_INSTRUMENT_TYPE_SITAR                         InstrumentType = 439
	InstrumentType_INSTRUMENT_TYPE_SOPRANODOMRA                  InstrumentType = 440
	InstrumentType_INSTRUMENT_TYPE_STRINGINSTRUMENT              InstrumentType = 441
	InstrumentType_INSTRUMENT_TYPE_STROHLVIOLIN                  InstrumentType = 442
	InstrumentType_INSTRUMENT_TYPE_SURBAHAR                      InstrumentType = 443
	InstrumentType_INSTRUMENT_TYPE_SWARMANDAL                    InstrumentType = 444
	InstrumentType_INSTRUMENT_TYPE_TAMBURA                       InstrumentType = 445
	InstrumentType_INSTRUMENT_TYPE_TANBOUR                       InstrumentType = 446
	InstrumentType_INSTRUMENT_TYPE_TANPURA                       InstrumentType = 447
	InstrumentType_INSTRUMENT_TYPE_TAR_STRING                    InstrumentType = 448
	InstrumentType_INSTRUMENT_TYPE_TENORBANJO                    InstrumentType = 449
	InstrumentType_INSTRUMENT_TYPE_TENORREBEC                    InstrumentType = 450
	InstrumentType_INSTRUMENT_TYPE_TENORVIOL                     InstrumentType = 451
	InstrumentType_INSTRUMENT_TYPE_THEORBO                       InstrumentType = 452
	InstrumentType_INSTRUMENT_TYPE_TIMPLE                        InstrumentType = 453
	InstrumentType_INSTRUMENT_TYPE_TOGAMANGUITARVIOL             InstrumentType = 454
	InstrumentType_INSTRUMENT_TYPE_TREBLEREBEC                   InstrumentType = 455
	InstrumentType_INSTRUMENT_TYPE_TREBLEVIOL                    InstrumentType = 456
	InstrumentType_INSTRUMENT_TYPE_TROMBAMARINA                  InstrumentType = 457
	InstrumentType_INSTRUMENT_TYPE_TUMBI                         InstrumentType = 458
	InstrumentType_INSTRUMENT_TYPE_TZOURAS                       InstrumentType = 459
	InstrumentType_INSTRUMENT_TYPE_UKULELE                       InstrumentType = 460
	InstrumentType_INSTRUMENT_TYPE_VALIHA                        InstrumentType = 461
	InstrumentType_INSTRUMENT_TYPE_VEENA                         InstrumentType = 462
	InstrumentType_INSTRUMENT_TYPE_VENEZUELANHARP                InstrumentType = 463
	InstrumentType_INSTRUMENT_TYPE_VERACRUZHARP                  InstrumentType = 464
	InstrumentType_INSTRUMENT_TYPE_VITAR                         InstrumentType = 465
	InstrumentType_INSTRUMENT_TYPE_VICHITRAVEENA                 InstrumentType = 466
	InstrumentType_INSTRUMENT_TYPE_VIELLE                        InstrumentType = 467
	InstrumentType_INSTRUMENT_TYPE_VIHUELA                       InstrumentType = 468
	InstrumentType_INSTRUMENT_TYPE_VIOL                          InstrumentType = 469
	InstrumentType_INSTRUMENT_TYPE_VIOLA                         InstrumentType = 470
	InstrumentType_INSTRUMENT_TYPE_VIOLADAMORE                   InstrumentType = 471
	InstrumentType_INSTRUMENT_TYPE_VIOLAPOMPOSA                  InstrumentType = 472
	InstrumentType_INSTRUMENT_TYPE_VIOLIN                        InstrumentType = 473
	InstrumentType_INSTRUMENT_TYPE_VIOLINOPICCOLO                InstrumentType = 474
	InstrumentType_INSTRUMENT_TYPE_WELSHTRIPLEHARP               InstrumentType = 475
	InstrumentType_INSTRUMENT_TYPE_WIRESTRUNGHARP                InstrumentType = 476
	InstrumentType_INSTRUMENT_TYPE_XALAM                         InstrumentType = 477
	InstrumentType_INSTRUMENT_TYPE_YANGQIN                       InstrumentType = 478
	InstrumentType_INSTRUMENT_TYPE_YAYLITAMBUR                   InstrumentType = 479
	InstrumentType_INSTRUMENT_TYPE_YOKIN                         InstrumentType = 480
	InstrumentType_INSTRUMENT_TYPE_YUEQIN                        InstrumentType = 481
	InstrumentType_INSTRUMENT_TYPE_ZEZE                          InstrumentType = 482
	InstrumentType_INSTRUMENT_TYPE_ZHONGHU                       InstrumentType = 483
	InstrumentType_INSTRUMENT_TYPE_ZITHER                        InstrumentType = 484
	InstrumentType_INSTRUMENT_TYPE_ARPEGGIATINGSYNTH             InstrumentType = 485
	InstrumentType_INSTRUMENT_TYPE_SYNTHBASS                     InstrumentType = 486
	InstrumentType_INSTRUMENT_TYPE_SYNTHBRASS                    InstrumentType = 487
	InstrumentType_INSTRUMENT_TYPE_SYNTHCHOIR                    InstrumentType = 488
	InstrumentType_INSTRUMENT_TYPE_SYNTHFX                       InstrumentType = 489
	InstrumentType_INSTRUMENT_TYPE_SYNTHLEAD                     InstrumentType = 490
	InstrumentType_INSTRUMENT_TYPE_SYNTHPAD                      InstrumentType = 491
	InstrumentType_INSTRUMENT_TYPE_SYNTHSTEELDRUMS               InstrumentType = 492
	InstrumentType_INSTRUMENT_TYPE_SYNTHSTRINGS                  InstrumentType = 493
	InstrumentType_INSTRUMENT_TYPE_SYNTHESIZER                   InstrumentType = 494
	InstrumentType_INSTRUMENT_TYPE_GROUPBACKGROUNDVOCALISTS      InstrumentType = 495
	InstrumentType_INSTRUMENT_TYPE_BOYVOICE                      InstrumentType = 496
	InstrumentType_INSTRUMENT_TYPE_CHILDVOICE                    InstrumentType = 497
	InstrumentType_INSTRUMENT_TYPE_CHILDRENSBACKGROUNDVOCALIST   InstrumentType = 498
	InstrumentType_INSTRUMENT_TYPE_FEMALEVOICE                   InstrumentType = 499
	InstrumentType_INSTRUMENT_TYPE_FEMALEBACKGROUNDVOCALIST      InstrumentType = 500
	InstrumentType_INSTRUMENT_TYPE_GIRLVOICE                     InstrumentType = 501
	InstrumentType_INSTRUMENT_TYPE_LEADVOCALIST                  InstrumentType = 502
	InstrumentType_INSTRUMENT_TYPE_MALEVOICE                     InstrumentType = 503
	InstrumentType_INSTRUMENT_TYPE_MALEBACKGROUNDVOCALIST        InstrumentType = 504
	InstrumentType_INSTRUMENT_TYPE_MIXEDVOICE                    InstrumentType = 505
	InstrumentType_INSTRUMENT_TYPE_MIXEDBACKGROUNDVOCALIST       InstrumentType = 506
	InstrumentType_INSTRUMENT_TYPE_NEUTRALVOICE                  InstrumentType = 507
	InstrumentType_INSTRUMENT_TYPE_ALBOKA                        InstrumentType = 508
	InstrumentType_INSTRUMENT_TYPE_ALPENHORN                     InstrumentType = 509
	InstrumentType_INSTRUMENT_TYPE_ALTOCLARINET                  InstrumentType = 510
	InstrumentType_INSTRUMENT_TYPE_ALTOCRUMHORN                  InstrumentType = 511
	InstrumentType_INSTRUMENT_TYPE_ALTOFLUTE                     InstrumentType = 512
	InstrumentType_INSTRUMENT_TYPE_ALTOHORN                      InstrumentType = 513
	InstrumentType_INSTRUMENT_TYPE_ALTORECORDER                  InstrumentType = 514
	InstrumentType_INSTRUMENT_TYPE_ALTOSACKBUT                   InstrumentType = 515
	InstrumentType_INSTRUMENT_TYPE_ALTOSAXOPHONE                 InstrumentType = 516
	InstrumentType_INSTRUMENT_TYPE_ALTOSHAWM                     InstrumentType = 517
	InstrumentType_INSTRUMENT_TYPE_ALTOTROMBONE                  InstrumentType = 518
	InstrumentType_INSTRUMENT_TYPE_APITO                         InstrumentType = 519
	InstrumentType_INSTRUMENT_TYPE_ARGHUL                        InstrumentType = 520
	InstrumentType_INSTRUMENT_TYPE_AULOCHROME                    InstrumentType = 521
	InstrumentType_INSTRUMENT_TYPE_BAGPIPES                      InstrumentType = 522
	InstrumentType_INSTRUMENT_TYPE_BANSURI                       InstrumentType = 523
	InstrumentType_INSTRUMENT_TYPE_BARITONEHORN                  InstrumentType = 524
	InstrumentType_INSTRUMENT_TYPE_BARITONEOBOE                  InstrumentType = 525
	InstrumentType_INSTRUMENT_TYPE_BARITONESAXOPHONE             InstrumentType = 526
	InstrumentType_INSTRUMENT_TYPE_BAROQUEBASSOON                InstrumentType = 527
	InstrumentType_INSTRUMENT_TYPE_BAROQUECLARINET               InstrumentType = 528
	InstrumentType_INSTRUMENT_TYPE_BAROQUEFLUTE                  InstrumentType = 529
	InstrumentType_INSTRUMENT_TYPE_BAROQUEOBOE                   InstrumentType = 530
	InstrumentType_INSTRUMENT_TYPE_BAROQUERECORDER               InstrumentType = 531
	InstrumentType_INSTRUMENT_TYPE_BASSCLARINET                  InstrumentType = 532
	InstrumentType_INSTRUMENT_TYPE_BASSDULCIAN                   InstrumentType = 533
	InstrumentType_INSTRUMENT_TYPE_BASSFLUTE                     InstrumentType = 534
	InstrumentType_INSTRUMENT_TYPE_BASSHARMONICA                 InstrumentType = 535
	InstrumentType_INSTRUMENT_TYPE_BASSRECORDER                  InstrumentType = 536
	InstrumentType_INSTRUMENT_TYPE_BASSSACKBUT                   InstrumentType = 537
	InstrumentType_INSTRUMENT_TYPE_BASSSAXOPHONE                 InstrumentType = 538
	InstrumentType_INSTRUMENT_TYPE_BASSSHAWM                     InstrumentType = 539
	InstrumentType_INSTRUMENT_TYPE_BASSTROMBONE                  InstrumentType = 540
	InstrumentType_INSTRUMENT_TYPE_BASSTRUMPET                   InstrumentType = 541
	InstrumentType_INSTRUMENT_TYPE_BASSTUBA                      InstrumentType = 542
	InstrumentType_INSTRUMENT_TYPE_BASSETCLARINET                InstrumentType = 543
	InstrumentType_INSTRUMENT_TYPE_BASSETHORN                    InstrumentType = 544
	InstrumentType_INSTRUMENT_TYPE_BASSOON                       InstrumentType = 545
	InstrumentType_INSTRUMENT_TYPE_BAWU                          InstrumentType = 546
	InstrumentType_INSTRUMENT_TYPE_BIRDWHISTLE                   InstrumentType = 547
	InstrumentType_INSTRUMENT_TYPE_BOMBARD                       InstrumentType = 548
	InstrumentType_INSTRUMENT_TYPE_BOSUNSWHISTLE                 InstrumentType = 549
	InstrumentType_INSTRUMENT_TYPE_BRASSINSTRUMENT               InstrumentType = 550
	InstrumentType_INSTRUMENT_TYPE_BUGLE                         InstrumentType = 551
	InstrumentType_INSTRUMENT_TYPE_CALLIOPE                      InstrumentType = 552
	InstrumentType_INSTRUMENT_TYPE_CHALUMEAU                     InstrumentType = 553
	InstrumentType_INSTRUMENT_TYPE_CHROMATICHARMONICA            InstrumentType = 554
	InstrumentType_INSTRUMENT_TYPE_CIMBASSO                      InstrumentType = 555
	InstrumentType_INSTRUMENT_TYPE_CLARINET                      InstrumentType = 556
	InstrumentType_INSTRUMENT_TYPE_CLARINOTRUMPET                InstrumentType = 557
	InstrumentType_INSTRUMENT_TYPE_CONCHSHELL                    InstrumentType = 558
	InstrumentType_INSTRUMENT_TYPE_CONTRAALTOCLARINET            InstrumentType = 559
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSCLARINET            InstrumentType = 560
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSRECORDER            InstrumentType = 561
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSSARRUSOPHONE        InstrumentType = 562
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSSAXOPHONE           InstrumentType = 563
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSTROMBONE            InstrumentType = 564
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSOON                 InstrumentType = 565
	InstrumentType_INSTRUMENT_TYPE_CORNET                        InstrumentType = 566
	InstrumentType_INSTRUMENT_TYPE_CORNETTO                      InstrumentType = 567
	InstrumentType_INSTRUMENT_TYPE_CRUMHORN                      InstrumentType = 568
	InstrumentType_INSTRUMENT_TYPE_DAEGEUM                       InstrumentType = 569
	InstrumentType_INSTRUMENT_TYPE_DIDGERIDOO                    InstrumentType = 570
	InstrumentType_INSTRUMENT_TYPE_DIPLE                         InstrumentType = 571
	InstrumentType_INSTRUMENT_TYPE_DIZI                          InstrumentType = 572
	InstrumentType_INSTRUMENT_TYPE_DUDUK                         InstrumentType = 573
	InstrumentType_INSTRUMENT_TYPE_DULCIAN                       InstrumentType = 574
	InstrumentType_INSTRUMENT_TYPE_DUNGCHEN                      InstrumentType = 575
	InstrumentType_INSTRUMENT_TYPE_ENGLISHHORN                   InstrumentType = 576
	InstrumentType_INSTRUMENT_TYPE_EUPHONIUM                     InstrumentType = 577
	InstrumentType_INSTRUMENT_TYPE_FIFE                          InstrumentType = 578
	InstrumentType_INSTRUMENT_TYPE_FISCORN                       InstrumentType = 579
	InstrumentType_INSTRUMENT_TYPE_FLABIOL                       InstrumentType = 580
	InstrumentType_INSTRUMENT_TYPE_FLAGEOLET                     InstrumentType = 581
	InstrumentType_INSTRUMENT_TYPE_FLOYERA                       InstrumentType = 582
	InstrumentType_INSTRUMENT_TYPE_FLUGELHORN                    InstrumentType = 583
	InstrumentType_INSTRUMENT_TYPE_FLUTE                         InstrumentType = 584
	InstrumentType_INSTRUMENT_TYPE_FRENCHHORN                    InstrumentType = 585
	InstrumentType_INSTRUMENT_TYPE_FUJARA                        InstrumentType = 586
	InstrumentType_INSTRUMENT_TYPE_GASBA                         InstrumentType = 587
	InstrumentType_INSTRUMENT_TYPE_GEMSHORN                      InstrumentType = 588
	InstrumentType_INSTRUMENT_TYPE_GERMANFLUTE                   InstrumentType = 589
	InstrumentType_INSTRUMENT_TYPE_GHAITA                        InstrumentType = 590
	InstrumentType_INSTRUMENT_TYPE_GREATBASSRECORDER             InstrumentType = 591
	InstrumentType_INSTRUMENT_TYPE_GUANZI                        InstrumentType = 592
	InstrumentType_INSTRUMENT_TYPE_GYALING                       InstrumentType = 593
	InstrumentType_INSTRUMENT_TYPE_HARMONICA                     InstrumentType = 594
	InstrumentType_INSTRUMENT_TYPE_HECKELPHONE                   InstrumentType = 595
	InstrumentType_INSTRUMENT_TYPE_HELICON                       InstrumentType = 596
	InstrumentType_INSTRUMENT_TYPE_HERALDTRUMPET                 InstrumentType = 597
	InstrumentType_INSTRUMENT_TYPE_HIGHLANDPIPES                 InstrumentType = 598
	InstrumentType_INSTRUMENT_TYPE_HOTFOUNTAINPEN                InstrumentType = 599
	InstrumentType_INSTRUMENT_TYPE_IRISHLOWWHISTLE               InstrumentType = 600
	InstrumentType_INSTRUMENT_TYPE_JAGDHORN                      InstrumentType = 601
	InstrumentType_INSTRUMENT_TYPE_KAVAL                         InstrumentType = 602
	InstrumentType_INSTRUMENT_TYPE_KEYEDTRUMPET                  InstrumentType = 603
	InstrumentType_INSTRUMENT_TYPE_KHENE                         InstrumentType = 604
	InstrumentType_INSTRUMENT_TYPE_KHLUI                         InstrumentType = 605
	InstrumentType_INSTRUMENT_TYPE_LAUNEDDAS                     InstrumentType = 606
	InstrumentType_INSTRUMENT_TYPE_LUR                           InstrumentType = 607
	InstrumentType_INSTRUMENT_TYPE_MELLOPHONE                    InstrumentType = 608
	InstrumentType_INSTRUMENT_TYPE_MELODICA                      InstrumentType = 609
	InstrumentType_INSTRUMENT_TYPE_MIJWIZ                        InstrumentType = 610
	InstrumentType_INSTRUMENT_TYPE_MINIATUREKHENE                InstrumentType = 611
	InstrumentType_INSTRUMENT_TYPE_MIZMAR                        InstrumentType = 612
	InstrumentType_INSTRUMENT_TYPE_MOUTHORGAN                    InstrumentType = 613
	InstrumentType_INSTRUMENT_TYPE_NADASWARAM                    InstrumentType = 614
	InstrumentType_INSTRUMENT_TYPE_NAI                           InstrumentType = 615
	InstrumentType_INSTRUMENT_TYPE_NATIVEAMERICANFLUTE           InstrumentType = 616
	InstrumentType_INSTRUMENT_TYPE_NATURALHORN                   InstrumentType = 617
	InstrumentType_INSTRUMENT_TYPE_NATURALTRUMPET                InstrumentType = 618
	InstrumentType_INSTRUMENT_TYPE_NEYFLUTE                      InstrumentType = 619
	InstrumentType_INSTRUMENT_TYPE_OBOE                          InstrumentType = 620
	InstrumentType_INSTRUMENT_TYPE_OBOEDAMORE                    InstrumentType = 621
	InstrumentType_INSTRUMENT_TYPE_OBOEDACACCIA                  InstrumentType = 622
	InstrumentType_INSTRUMENT_TYPE_OCARINA                       InstrumentType = 623
	InstrumentType_INSTRUMENT_TYPE_OPHICLEIDE                    InstrumentType = 624
	InstrumentType_INSTRUMENT_TYPE_PAIXIAO                       InstrumentType = 625
	InstrumentType_INSTRUMENT_TYPE_PANFLUTE                      InstrumentType = 626
	InstrumentType_INSTRUMENT_TYPE_PI                            InstrumentType = 627
	InstrumentType_INSTRUMENT_TYPE_PICCOLOCLARINET               InstrumentType = 628
	InstrumentType_INSTRUMENT_TYPE_PICCOLOFLUTE                  InstrumentType = 629
	InstrumentType_INSTRUMENT_TYPE_PICCOLOTRUMPET                InstrumentType = 630
	InstrumentType_INSTRUMENT_TYPE_PINKILLU                      InstrumentType = 631
	InstrumentType_INSTRUMENT_TYPE_POCKETTRUMPET                 InstrumentType = 632
	InstrumentType_INSTRUMENT_TYPE_POLICEWHISTLE                 InstrumentType = 633
	InstrumentType_INSTRUMENT_TYPE_POSTHORN                      InstrumentType = 634
	InstrumentType_INSTRUMENT_TYPE_PUNGI                         InstrumentType = 635
	InstrumentType_INSTRUMENT_TYPE_QUENA                         InstrumentType = 636
	InstrumentType_INSTRUMENT_TYPE_QUENACHO                      InstrumentType = 637
	InstrumentType_INSTRUMENT_TYPE_RACKETT                       InstrumentType = 638
	InstrumentType_INSTRUMENT_TYPE_RAUSCHPFEIFE                  InstrumentType = 639
	InstrumentType_INSTRUMENT_TYPE_RECORDER                      InstrumentType = 640
	InstrumentType_INSTRUMENT_TYPE_REEDINSTRUMENT                InstrumentType = 641
	InstrumentType_INSTRUMENT_TYPE_REGAL                         InstrumentType = 642
	InstrumentType_INSTRUMENT_TYPE_RONDADOR                      InstrumentType = 643
	InstrumentType_INSTRUMENT_TYPE_SACKBUT                       InstrumentType = 644
	InstrumentType_INSTRUMENT_TYPE_SARRUSOPHONE                  InstrumentType = 645
	InstrumentType_INSTRUMENT_TYPE_SAXOPHONE                     InstrumentType = 646
	InstrumentType_INSTRUMENT_TYPE_SERPENT                       InstrumentType = 647
	InstrumentType_INSTRUMENT_TYPE_SHAKUHACHI                    InstrumentType = 648
	InstrumentType_INSTRUMENT_TYPE_SHAWM                         InstrumentType = 649
	InstrumentType_INSTRUMENT_TYPE_SHENAI                        InstrumentType = 650
	InstrumentType_INSTRUMENT_TYPE_SHELLTONE                     InstrumentType = 651
	InstrumentType_INSTRUMENT_TYPE_SHENG                         InstrumentType = 652
	InstrumentType_INSTRUMENT_TYPE_SHO                           InstrumentType = 653
	InstrumentType_INSTRUMENT_TYPE_SHOFAR                        InstrumentType = 654
	InstrumentType_INSTRUMENT_TYPE_SHRUTIBOX                     InstrumentType = 655
	InstrumentType_INSTRUMENT_TYPE_SHVIWHISTLE                   InstrumentType = 656
	InstrumentType_INSTRUMENT_TYPE_SIKU                          InstrumentType = 657
	InstrumentType_INSTRUMENT_TYPE_SLIDESAXOPHONE                InstrumentType = 658
	InstrumentType_INSTRUMENT_TYPE_SLIDETRUMPET                  InstrumentType = 659
	InstrumentType_INSTRUMENT_TYPE_SLIDEWHISTLE                  InstrumentType = 660
	InstrumentType_INSTRUMENT_TYPE_SOPRANINORECORDER             InstrumentType = 661
	InstrumentType_INSTRUMENT_TYPE_SOPRANINOSAXOPHONE            InstrumentType = 662
	InstrumentType_INSTRUMENT_TYPE_SOPRANOCLARINET               InstrumentType = 663
	InstrumentType_INSTRUMENT_TYPE_SOPRANOCORNET                 InstrumentType = 664
	InstrumentType_INSTRUMENT_TYPE_SOPRANOCRUMHORN               InstrumentType = 665
	InstrumentType_INSTRUMENT_TYPE_SOPRANODULCIAN                InstrumentType = 666
	InstrumentType_INSTRUMENT_TYPE_SOPRANORECORDER               InstrumentType = 667
	InstrumentType_INSTRUMENT_TYPE_SOPRANOSAXOPHONE              InstrumentType = 668
	InstrumentType_INSTRUMENT_TYPE_SOPRANOSHAWM                  InstrumentType = 669
	InstrumentType_INSTRUMENT_TYPE_SOPRANOTRUMPET                InstrumentType = 670
	InstrumentType_INSTRUMENT_TYPE_SORDUN                        InstrumentType = 671
	InstrumentType_INSTRUMENT_TYPE_SOUSAPHONE                    InstrumentType = 672
	InstrumentType_INSTRUMENT_TYPE_SULING                        InstrumentType = 673
	InstrumentType_INSTRUMENT_TYPE_SUONA                         InstrumentType = 674
	InstrumentType_INSTRUMENT_TYPE_TARKA                         InstrumentType = 675
	InstrumentType_INSTRUMENT_TYPE_TAROGATO                      InstrumentType = 676
	InstrumentType_INSTRUMENT_TYPE_TENORCRUMHORN                 InstrumentType = 677
	InstrumentType_INSTRUMENT_TYPE_TENORDULCIAN                  InstrumentType = 678
	InstrumentType_INSTRUMENT_TYPE_TENORFLUTE                    InstrumentType = 679
	InstrumentType_INSTRUMENT_TYPE_TENORRECORDER                 InstrumentType = 680
	InstrumentType_INSTRUMENT_TYPE_TENORSACKBUT                  InstrumentType = 681
	InstrumentType_INSTRUMENT_TYPE_TENORSAXOPHONE                InstrumentType = 682
	InstrumentType_INSTRUMENT_TYPE_TENORSHAWM                    InstrumentType = 683
	InstrumentType_INSTRUMENT_TYPE_TENORTROMBONE                 InstrumentType = 684
	InstrumentType_INSTRUMENT_TYPE_TINWHISTLE                    InstrumentType = 685
	InstrumentType_INSTRUMENT_TYPE_TROMBONE                      InstrumentType = 686
	InstrumentType_INSTRUMENT_TYPE_TRUMPET                       InstrumentType = 687
	InstrumentType_INSTRUMENT_TYPE_TUBA                          InstrumentType = 688
	InstrumentType_INSTRUMENT_TYPE_TUSSELFLOYTE                  InstrumentType = 689
	InstrumentType_INSTRUMENT_TYPE_UILLEANPIPES                  InstrumentType = 690
	InstrumentType_INSTRUMENT_TYPE_VALVETROMBONE                 InstrumentType = 691
	InstrumentType_INSTRUMENT_TYPE_VUVUZELA                      InstrumentType = 692
	InstrumentType_INSTRUMENT_TYPE_WAGNERTUBA                    InstrumentType = 693
	InstrumentType_INSTRUMENT_TYPE_WILLOWFLUTE                   InstrumentType = 694
	InstrumentType_INSTRUMENT_TYPE_WINDINSTRUMENT                InstrumentType = 695
	InstrumentType_INSTRUMENT_TYPE_WOODFLUTE                     InstrumentType = 696
	InstrumentType_INSTRUMENT_TYPE_WOODTRUMPET                   InstrumentType = 697
	InstrumentType_INSTRUMENT_TYPE_WOT                           InstrumentType = 698
	InstrumentType_INSTRUMENT_TYPE_XAPHOON                       InstrumentType = 699
	InstrumentType_INSTRUMENT_TYPE_XIAO                          InstrumentType = 700
	InstrumentType_INSTRUMENT_TYPE_XUN                           InstrumentType = 701
	InstrumentType_INSTRUMENT_TYPE_ZUMMARA                       InstrumentType = 702
	InstrumentType_INSTRUMENT_TYPE_ZURNA                         InstrumentType = 703
	InstrumentType_INSTRUMENT_TYPE_CHOIR                         InstrumentType = 704
	InstrumentType_INSTRUMENT_TYPE_PERCUSSIONSECTION             InstrumentType = 705
	InstrumentType_INSTRUMENT_TYPE_STRINGSECTION                 InstrumentType = 706
	InstrumentType_INSTRUMENT_TYPE_WINDSECTION                   InstrumentType = 707
	InstrumentType_INSTRUMENT_TYPE_USERDEFINED                   InstrumentType = 708
	InstrumentType_INSTRUMENT_TYPE_VOICE                         InstrumentType = 709
)

// Enum value maps for InstrumentType.
var (
	InstrumentType_name = map[int32]string{
		0:   "INSTRUMENT_TYPE_UNSPECIFIED",
		1:   "INSTRUMENT_TYPE_ACCORDION",
		2:   "INSTRUMENT_TYPE_BANDONEON",
		3:   "INSTRUMENT_TYPE_CHROMATICBUTTONACCORDION",
		4:   "INSTRUMENT_TYPE_CONCERTINA",
		5:   "INSTRUMENT_TYPE_CORDOVOX",
		6:   "INSTRUMENT_TYPE_MELODEON",
		7:   "INSTRUMENT_TYPE_MUSETTE",
		8:   "INSTRUMENT_TYPE_PIANOACCORDION",
		9:   "INSTRUMENT_TYPE_TOYACCORDION",
		10:  "INSTRUMENT_TYPE_ACOUSTICBASSGUITAR",
		11:  "INSTRUMENT_TYPE_BABYBASS",
		12:  "INSTRUMENT_TYPE_BASS",
		13:  "INSTRUMENT_TYPE_ELECTRICBASSGUITAR",
		14:  "INSTRUMENT_TYPE_FRETLESSBASSGUITAR",
		15:  "INSTRUMENT_TYPE_PICCOLOBASS",
		16:  "INSTRUMENT_TYPE_UPRIGHTBASS",
		17:  "INSTRUMENT_TYPE_WASHTUBBASS",
		18:  "INSTRUMENT_TYPE_DRUMMACHINE",
		19:  "INSTRUMENT_TYPE_BREAKBEAT",
		20:  "INSTRUMENT_TYPE_DRUMKIT",
		21:  "INSTRUMENT_TYPE_DRUMSAMPLE",
		22:  "INSTRUMENT_TYPE_E_12_STRINGELECTRICGUITAR",
		23:  "INSTRUMENT_TYPE_E_12_STRINGGUITAR",
		24:  "INSTRUMENT_TYPE_ACOUSTICGUITAR",
		25:  "INSTRUMENT_TYPE_BAHIANGUITAR",
		26:  "INSTRUMENT_TYPE_BAJOSEXTO",
		27:  "INSTRUMENT_TYPE_BARITONEGUITAR",
		28:  "INSTRUMENT_TYPE_BAROQUEGUITAR",
		29:  "INSTRUMENT_TYPE_CHAPMANSTICK",
		30:  "INSTRUMENT_TYPE_NYLONSTRINGGUITAR",
		31:  "INSTRUMENT_TYPE_DOBROGUITAR",
		32:  "INSTRUMENT_TYPE_ELECTRICGUITAR",
		33:  "INSTRUMENT_TYPE_ELECTRICSITAR",
		34:  "INSTRUMENT_TYPE_FRYINGPANGUITAR",
		35:  "INSTRUMENT_TYPE_GUITAR",
		36:  "INSTRUMENT_TYPE_GUITARRON",
		37:  "INSTRUMENT_TYPE_LAPSTEELGUITAR",
		38:  "INSTRUMENT_TYPE_PEDABRO",
		39:  "INSTRUMENT_TYPE_PEDALSTEELGUITAR",
		40:  "INSTRUMENT_TYPE_PORTUGUESEGUITAR",
		41:  "INSTRUMENT_TYPE_RENAISSANCEGUITAR",
		42:  "INSTRUMENT_TYPE_ROMANTICGUITAR",
		43:  "INSTRUMENT_TYPE_TENORGUITAR",
		44:  "INSTRUMENT_TYPE_TIPLE",
		45:  "INSTRUMENT_TYPE_TOUCHGUITAR",
		46:  "INSTRUMENT_TYPE_TRES",
		47:  "INSTRUMENT_TYPE_VIOLACAIPIRA",
		48:  "INSTRUMENT_TYPE_ACOUSTICKEYBOARD",
		49:  "INSTRUMENT_TYPE_CELESTA",
		50:  "INSTRUMENT_TYPE_CHAMBERLIN",
		51:  "INSTRUMENT_TYPE_CLAVICHORD",
		52:  "INSTRUMENT_TYPE_CLAVINET",
		53:  "INSTRUMENT_TYPE_DULCITONE",
		54:  "INSTRUMENT_TYPE_ELECTRICPIANO",
		55:  "INSTRUMENT_TYPE_HARPSICHORD",
		56:  "INSTRUMENT_TYPE_KEYBOARD",
		57:  "INSTRUMENT_TYPE_MELLOTRON",
		58:  "INSTRUMENT_TYPE_OPTIGAN",
		59:  "INSTRUMENT_TYPE_PIANET",
		60:  "INSTRUMENT_TYPE_RHODES",
		61:  "INSTRUMENT_TYPE_SAMPLEDKEYBOARD",
		62:  "INSTRUMENT_TYPE_SPINET",
		63:  "INSTRUMENT_TYPE_VAKOORCHESTRON",
		64:  "INSTRUMENT_TYPE_VIRGINALS",
		65:  "INSTRUMENT_TYPE_ELECTRICORGAN",
		66:  "INSTRUMENT_TYPE_HAMMONDORGAN",
		67:  "INSTRUMENT_TYPE_LOWREYORGAN",
		68:  "INSTRUMENT_TYPE_ORGAN",
		69:  "INSTRUMENT_TYPE_PIPEORGAN",
		70:  "INSTRUMENT_TYPE_POSITIVEORGAN",
		71:  "INSTRUMENT_TYPE_PUMPORGAN",
		72:  "INSTRUMENT_TYPE_BARRELORGAN",
		73:  "INSTRUMENT_TYPE_BICYCLEPUMP",
		74:  "INSTRUMENT_TYPE_CHURCHBELLS",
		75:  "INSTRUMENT_TYPE_COMB",
		76:  "INSTRUMENT_TYPE_DICTOPHONE",
		77:  "INSTRUMENT_TYPE_HOHNERGUITARET",
		78:  "INSTRUMENT_TYPE_JEWSHARP",
		79:  "INSTRUMENT_TYPE_KAZOO",
		80:  "INSTRUMENT_TYPE_MUSICBOX",
		81:  "INSTRUMENT_TYPE_OMNICHORD",
		82:  "INSTRUMENT_TYPE_OTHERINSTRUMENT",
		83:  "INSTRUMENT_TYPE_SPECTRASONICSOMNISPHERE",
		84:  "INSTRUMENT_TYPE_TOYPIANO",
		85:  "INSTRUMENT_TYPE_TURNTABLE",
		86:  "INSTRUMENT_TYPE_AFRICANPERCUSSION",
		87:  "INSTRUMENT_TYPE_AGOGOBELLS",
		88:  "INSTRUMENT_TYPE_ANGKLUNG",
		89:  "INSTRUMENT_TYPE_ANVIL",
		90:  "INSTRUMENT_TYPE_ATUMPAN",
		91:  "INSTRUMENT_TYPE_BALAFON",
		92:  "INSTRUMENT_TYPE_BASSDRUM_CONCERT",
		93:  "INSTRUMENT_TYPE_BASSDRUM_KICK",
		94:  "INSTRUMENT_TYPE_BATA",
		95:  "INSTRUMENT_TYPE_BELLTREE",
		96:  "INSTRUMENT_TYPE_BENDIR",
		97:  "INSTRUMENT_TYPE_BERIMBAU",
		98:  "INSTRUMENT_TYPE_BINGHIDRUM",
		99:  "INSTRUMENT_TYPE_BODHRAN",
		100: "INSTRUMENT_TYPE_BODYPERCUSSION",
		101: "INSTRUMENT_TYPE_BOMBO",
		102: "INSTRUMENT_TYPE_BOMBOLEGUERO",
		103: "INSTRUMENT_TYPE_BONES",
		104: "INSTRUMENT_TYPE_BONGOS",
		105: "INSTRUMENT_TYPE_BOTTLES",
		106: "INSTRUMENT_TYPE_BRAZILIANPERCUSSION",
		107: "INSTRUMENT_TYPE_CABASA",
		108: "INSTRUMENT_TYPE_CAIXA",
		109: "INSTRUMENT_TYPE_CAJA",
		110: "INSTRUMENT_TYPE_CAJON",
		111: "INSTRUMENT_TYPE_CALABASH",
		112: "INSTRUMENT_TYPE_CARILLON",
		113: "INSTRUMENT_TYPE_CASTANET",
		114: "INSTRUMENT_TYPE_CAXIXI",
		115: "INSTRUMENT_TYPE_CHIMES",
		116: "INSTRUMENT_TYPE_CHOCALHO",
		117: "INSTRUMENT_TYPE_CLAPSTICK",
		118: "INSTRUMENT_TYPE_CLAVES",
		119: "INSTRUMENT_TYPE_CLAYPOT",
		120: "INSTRUMENT_TYPE_CONGAS",
		121: "INSTRUMENT_TYPE_COWBELL",
		122: "INSTRUMENT_TYPE_CROTALES",
		123: "INSTRUMENT_TYPE_CUICA",
		124: "INSTRUMENT_TYPE_CYMBAL_CRASH",
		125: "INSTRUMENT_TYPE_CYMBAL_RIDE",
		126: "INSTRUMENT_TYPE_CYMBAL_SUSPENDED",
		127: "INSTRUMENT_TYPE_CYMBALS",
		128: "INSTRUMENT_TYPE_DAF",
		129: "INSTRUMENT_TYPE_DAMARU",
		130: "INSTRUMENT_TYPE_DAVUL",
		131: "INSTRUMENT_TYPE_DAYEREH",
		132: "INSTRUMENT_TYPE_DEFI",
		133: "INSTRUMENT_TYPE_DHOL",
		134: "INSTRUMENT_TYPE_DHOLAK",
		135: "INSTRUMENT_TYPE_DJEMBE",
		136: "INSTRUMENT_TYPE_DOHOL",
		137: "INSTRUMENT_TYPE_DOUMBEK",
		138: "INSTRUMENT_TYPE_DRUMSTICKS",
		139: "INSTRUMENT_TYPE_DUGGI",
		140: "INSTRUMENT_TYPE_DUNUN",
		141: "INSTRUMENT_TYPE_ELEPHANTBELL",
		142: "INSTRUMENT_TYPE_FINGERCLICKS",
		143: "INSTRUMENT_TYPE_FINGERCYMBALS",
		144: "INSTRUMENT_TYPE_FINGERSNAPS",
		145: "INSTRUMENT_TYPE_FLEXATONE",
		146: "INSTRUMENT_TYPE_FOLKLORICPERCUSSION",
		147: "INSTRUMENT_TYPE_FOOTSTOMP",
		148: "INSTRUMENT_TYPE_FROG",
		149: "INSTRUMENT_TYPE_GAMBANG",
		150: "INSTRUMENT_TYPE_GAMELAN",
		151: "INSTRUMENT_TYPE_GANGA",
		152: "INSTRUMENT_TYPE_GLASSHARMONICA",
		153: "INSTRUMENT_TYPE_GLASSHARP",
		154: "INSTRUMENT_TYPE_GLOCKENSPIEL",
		155: "INSTRUMENT_TYPE_GONG",
		156: "INSTRUMENT_TYPE_GUACHARACA",
		157: "INSTRUMENT_TYPE_GUACHE",
		158: "INSTRUMENT_TYPE_GUIRA",
		159: "INSTRUMENT_TYPE_GUIRO",
		160: "INSTRUMENT_TYPE_HANDBELLS",
		161: "INSTRUMENT_TYPE_HANDCHIMES",
		162: "INSTRUMENT_TYPE_HANDCLAPS",
		163: "INSTRUMENT_TYPE_HIHATCYMBAL",
		164: "INSTRUMENT_TYPE_JAMBLOCK",
		165: "INSTRUMENT_TYPE_JAWBONE",
		166: "INSTRUMENT_TYPE_JAWHARP",
		167: "INSTRUMENT_TYPE_JUG",
		168: "INSTRUMENT_TYPE_KANJIRA",
		169: "INSTRUMENT_TYPE_KATSA",
		170: "INSTRUMENT_TYPE_KENDANG",
		171: "INSTRUMENT_TYPE_KHAMAK",
		172: "INSTRUMENT_TYPE_KHARTAL",
		173: "INSTRUMENT_TYPE_KHOL",
		174: "INSTRUMENT_TYPE_KHONGWONGLEK",
		175: "INSTRUMENT_TYPE_KHONGWONGYAI",
		176: "INSTRUMENT_TYPE_KNUCKLES",
		177: "INSTRUMENT_TYPE_LATINPERCUSSION",
		178: "INSTRUMENT_TYPE_LITHOPHONE",
		179: "INSTRUMENT_TYPE_LOKOLE",
		180: "INSTRUMENT_TYPE_MADAL",
		181: "INSTRUMENT_TYPE_MARACAS",
		182: "INSTRUMENT_TYPE_MARIMBA",
		183: "INSTRUMENT_TYPE_MARIMBAPHONE",
		184: "INSTRUMENT_TYPE_MARIMBULA",
		185: "INSTRUMENT_TYPE_MAZHAR",
		186: "INSTRUMENT_TYPE_KALIMBA",
		187: "INSTRUMENT_TYPE_METALCANS",
		188: "INSTRUMENT_TYPE_MOUTHPERCUSSION",
		189: "INSTRUMENT_TYPE_MRIDANGAM",
		190: "INSTRUMENT_TYPE_MUHARSING",
		191: "INSTRUMENT_TYPE_NAAL",
		192: "INSTRUMENT_TYPE_NAGARA",
		193: "INSTRUMENT_TYPE_OBOROMDRUM",
		194: "INSTRUMENT_TYPE_OCTOBAN",
		195: "INSTRUMENT_TYPE_ORCHESTRALPERCUSSION",
		196: "INSTRUMENT_TYPE_PADDLEDRUMS",
		197: "INSTRUMENT_TYPE_PANDEIRO",
		198: "INSTRUMENT_TYPE_PERCUSSIONINSTRUMENT",
		199: "INSTRUMENT_TYPE_PITCHEDPERCUSSIONINSTRUMENT",
		200: "INSTRUMENT_TYPE_PONGLANG",
		201: "INSTRUMENT_TYPE_POTSANDPANS",
		202: "INSTRUMENT_TYPE_QARKABEB",
		203: "INSTRUMENT_TYPE_RAINSTICK",
		204: "INSTRUMENT_TYPE_RANAT",
		205: "INSTRUMENT_TYPE_RATCHET",
		206: "INSTRUMENT_TYPE_RATTLE",
		207: "INSTRUMENT_TYPE_RECORECO",
		208: "INSTRUMENT_TYPE_REPINIQUE",
		209: "INSTRUMENT_TYPE_RHYTHMSTICK",
		210: "INSTRUMENT_TYPE_RIQ",
		211: "INSTRUMENT_TYPE_RNGA",
		212: "INSTRUMENT_TYPE_ROLMO",
		213: "INSTRUMENT_TYPE_ROTOTOMS",
		214: "INSTRUMENT_TYPE_SABAR",
		215: "INSTRUMENT_TYPE_SANDBLOCKS",
		216: "INSTRUMENT_TYPE_SAW",
		217: "INSTRUMENT_TYPE_SCRATCHER",
		218: "INSTRUMENT_TYPE_SHAKER",
		219: "INSTRUMENT_TYPE_SHEKERE",
		220: "INSTRUMENT_TYPE_SINGINGBOWLS",
		221: "INSTRUMENT_TYPE_SISTRUM",
		222: "INSTRUMENT_TYPE_SLAPSTICK",
		223: "INSTRUMENT_TYPE_SLEIGHBELLS",
		224: "INSTRUMENT_TYPE_SNAREDRUM",
		225: "INSTRUMENT_TYPE_SNAREDRUM_MARCHING",
		226: "INSTRUMENT_TYPE_SPOONS",
		227: "INSTRUMENT_TYPE_SPRINGDRUM",
		228: "INSTRUMENT_TYPE_STEELDRUMS",
		229: "INSTRUMENT_TYPE_STICKS",
		230: "INSTRUMENT_TYPE_SURDO",
		231: "INSTRUMENT_TYPE_TAAL",
		232: "INSTRUMENT_TYPE_TAARIJA",
		233: "INSTRUMENT_TYPE_TABLA",
		234: "INSTRUMENT_TYPE_TABOR",
		235: "INSTRUMENT_TYPE_TAIKO",
		236: "INSTRUMENT_TYPE_TALKINGDRUM",
		237: "INSTRUMENT_TYPE_TAMBORA",
		238: "INSTRUMENT_TYPE_TAMBORIM",
		239: "INSTRUMENT_TYPE_TAMBOURINE",
		240: "INSTRUMENT_TYPE_TAONGAPUORO",
		241: "INSTRUMENT_TYPE_TAR_PERCUSSION",
		242: "INSTRUMENT_TYPE_TAROL",
		243: "INSTRUMENT_TYPE_TEMPLEBELL",
		244: "INSTRUMENT_TYPE_TEMPLEBLOCKS",
		245: "INSTRUMENT_TYPE_TENORDRUM",
		246: "INSTRUMENT_TYPE_THAVIL",
		247: "INSTRUMENT_TYPE_THUNDERSHEET",
		248: "INSTRUMENT_TYPE_TIBETANBELLS",
		249: "INSTRUMENT_TYPE_TIMBALES",
		250: "INSTRUMENT_TYPE_TIMBAU",
		251: "INSTRUMENT_TYPE_TIMPANI",
		252: "INSTRUMENT_TYPE_TINGSHA",
		253: "INSTRUMENT_TYPE_TOMPAK",
		254: "INSTRUMENT_TYPE_TOMS",
		255: "INSTRUMENT_TYPE_TONGUEDRUM",
		256: "INSTRUMENT_TYPE_TRIANGLE",
		257: "INSTRUMENT_TYPE_TXALAPARTA",
		258: "INSTRUMENT_TYPE_UDU",
		259: "INSTRUMENT_TYPE_ULIULI",
		260: "INSTRUMENT_TYPE_UNPITCHEDPERCUSSIONINSTRUMENT",
		261: "INSTRUMENT_TYPE_URUMEE",
		262: "INSTRUMENT_TYPE_VIBRAPHONE",
		263: "INSTRUMENT_TYPE_VIBRASLAP",
		264: "INSTRUMENT_TYPE_WASHBOARD",
		265: "INSTRUMENT_TYPE_WATERPHONE",
		266: "INSTRUMENT_TYPE_WINDCHIMES",
		267: "INSTRUMENT_TYPE_WINDMACHINE",
		268: "INSTRUMENT_TYPE_WOBBLEBOARD",
		269: "INSTRUMENT_TYPE_WOODBLOCK",
		270: "INSTRUMENT_TYPE_XYLOPHONE",
		271: "INSTRUMENT_TYPE_XYLORIMBA",
		272: "INSTRUMENT_TYPE_ZERBAGHALI",
		273: "INSTRUMENT_TYPE_ZYDECORUBBOARD",
		274: "INSTRUMENT_TYPE_FORTEPIANO",
		275: "INSTRUMENT_TYPE_GRANDPIANO",
		276: "INSTRUMENT_TYPE_LUTHEAL",
		277: "INSTRUMENT_TYPE_PIANO",
		278: "INSTRUMENT_TYPE_PIANOHARP",
		279: "INSTRUMENT_TYPE_PIANOLA",
		280: "INSTRUMENT_TYPE_PREPAREDPIANO",
		281: "INSTRUMENT_TYPE_SQUAREPIANO",
		282: "INSTRUMENT_TYPE_TACKPIANO",
		283: "INSTRUMENT_TYPE_UPRIGHTPIANO",
		284: "INSTRUMENT_TYPE_ANIMALSOUNDS",
		285: "INSTRUMENT_TYPE_APPLAUSE",
		286: "INSTRUMENT_TYPE_BIRDSONG",
		287: "INSTRUMENT_TYPE_CARSOUNDS",
		288: "INSTRUMENT_TYPE_CHATTER",
		289: "INSTRUMENT_TYPE_CHEWINGSOUNDS",
		290: "INSTRUMENT_TYPE_GIZMO",
		291: "INSTRUMENT_TYPE_GUNSHOTS",
		292: "INSTRUMENT_TYPE_MAGNETICTAPETREATMENTS",
		293: "INSTRUMENT_TYPE_ORCHESTRALHIT",
		294: "INSTRUMENT_TYPE_RECORDNOISE",
		295: "INSTRUMENT_TYPE_SIREN",
		296: "INSTRUMENT_TYPE_SOUNDDESIGN",
		297: "INSTRUMENT_TYPE_SOUNDEFFECTS",
		298: "INSTRUMENT_TYPE_TRAINSOUNDS",
		299: "INSTRUMENT_TYPE_TREATMENTS",
		300: "INSTRUMENT_TYPE_UNINTENDEDARTIFACTS",
		301: "INSTRUMENT_TYPE_E_5_STRINGBANJO",
		302: "INSTRUMENT_TYPE_AFRICANHARP",
		303: "INSTRUMENT_TYPE_ALTOVIOL",
		304: "INSTRUMENT_TYPE_ANDEANHARP",
		305: "INSTRUMENT_TYPE_ARCHLUTE",
		306: "INSTRUMENT_TYPE_AUTOHARP",
		307: "INSTRUMENT_TYPE_BAGLAMA",
		308: "INSTRUMENT_TYPE_BALALAIKA",
		309: "INSTRUMENT_TYPE_BANDURA",
		310: "INSTRUMENT_TYPE_BANDURRIA",
		311: "INSTRUMENT_TYPE_BANHU",
		312: "INSTRUMENT_TYPE_BANJO",
		313: "INSTRUMENT_TYPE_BANJOGUITAR",
		314: "INSTRUMENT_TYPE_BANJOLIN",
		315: "INSTRUMENT_TYPE_BAROQUECELLO",
		316: "INSTRUMENT_TYPE_BAROQUEVIOLA",
		317: "INSTRUMENT_TYPE_BAROQUEVIOLIN",
		318: "INSTRUMENT_TYPE_BARYTON",
		319: "INSTRUMENT_TYPE_BASSBANJO",
		320: "INSTRUMENT_TYPE_BASSCITTERN",
		321: "INSTRUMENT_TYPE_BASSREBEC",
		322: "INSTRUMENT_TYPE_BASSVIOL",
		323: "INSTRUMENT_TYPE_BASSODABRACCIO",
		324: "INSTRUMENT_TYPE_BIWA",
		325: "INSTRUMENT_TYPE_BOUZOUKI",
		326: "INSTRUMENT_TYPE_BOWEDSTRINGS",
		327: "INSTRUMENT_TYPE_BOZOQ",
		328: "INSTRUMENT_TYPE_BUFOBASS",
		329: "INSTRUMENT_TYPE_CAVAQUINHO",
		330: "INSTRUMENT_TYPE_CELLO",
		331: "INSTRUMENT_TYPE_CELLOBANJO",
		332: "INSTRUMENT_TYPE_CELTICHARP",
		333: "INSTRUMENT_TYPE_CHARANGO",
		334: "INSTRUMENT_TYPE_CIMBALOM",
		335: "INSTRUMENT_TYPE_CITOLE",
		336: "INSTRUMENT_TYPE_CITTERN",
		337: "INSTRUMENT_TYPE_CONCERTHARP",
		338: "INSTRUMENT_TYPE_CRAVIOLA",
		339: "INSTRUMENT_TYPE_CRWTH",
		340: "INSTRUMENT_TYPE_CUATRO",
		341: "INSTRUMENT_TYPE_CUMBUS",
		342: "INSTRUMENT_TYPE_DANBAU",
		343: "INSTRUMENT_TYPE_DANTRANH",
		344: "INSTRUMENT_TYPE_DILRUBA",
		345: "INSTRUMENT_TYPE_DOMBRA",
		346: "INSTRUMENT_TYPE_DOMRA",
		347: "INSTRUMENT_TYPE_DOUBLEBASS",
		348: "INSTRUMENT_TYPE_DOUBLEHARP",
		349: "INSTRUMENT_TYPE_DOUBLEVIOLIN",
		350: "INSTRUMENT_TYPE_DOUBLEBASSVIOL",
		351: "INSTRUMENT_TYPE_DRANYEN",
		352: "INSTRUMENT_TYPE_DUTAR",
		353: "INSTRUMENT_TYPE_DZUDDAHORD",
		354: "INSTRUMENT_TYPE_EKTARA",
		355: "INSTRUMENT_TYPE_ELECTRIC6STRINGVIOLIN",
		356: "INSTRUMENT_TYPE_ELECTRICCELLO",
		357: "INSTRUMENT_TYPE_ELECTRICHARP",
		358: "INSTRUMENT_TYPE_ELECTRICMANDOLIN",
		359: "INSTRUMENT_TYPE_ELECTRICVIOLA",
		360: "INSTRUMENT_TYPE_ELECTRICVIOLIN",
		361: "INSTRUMENT_TYPE_ELECTROACOUSTICHURDYGURDY",
		362: "INSTRUMENT_TYPE_ENNANGA",
		363: "INSTRUMENT_TYPE_EPINETTEDESVOSGES",
		364: "INSTRUMENT_TYPE_ERHU",
		365: "INSTRUMENT_TYPE_ESRAJ",
		366: "INSTRUMENT_TYPE_FIDDLE",
		367: "INSTRUMENT_TYPE_FOLKHARP",
		368: "INSTRUMENT_TYPE_GADULKA",
		369: "INSTRUMENT_TYPE_GARDON",
		370: "INSTRUMENT_TYPE_GAYAGEUM",
		371: "INSTRUMENT_TYPE_GHAYCHAK",
		372: "INSTRUMENT_TYPE_GITTERN",
		373: "INSTRUMENT_TYPE_GUQIN",
		374: "INSTRUMENT_TYPE_GUSLI",
		375: "INSTRUMENT_TYPE_GUZHENG",
		376: "INSTRUMENT_TYPE_HAEGEUM",
		377: "INSTRUMENT_TYPE_HAMMEREDDULCIMER",
		378: "INSTRUMENT_TYPE_HAMMEREDSTRINGS",
		379: "INSTRUMENT_TYPE_HARDANGERFIDDLE",
		380: "INSTRUMENT_TYPE_HARP",
		381: "INSTRUMENT_TYPE_HUAPANGUERA",
		382: "INSTRUMENT_TYPE_HURDYGURDY",
		383: "INSTRUMENT_TYPE_IRISHBOUZOUKI",
		384: "INSTRUMENT_TYPE_JAKHAY",
		385: "INSTRUMENT_TYPE_JARANAJAROCHA",
		386: "INSTRUMENT_TYPE_JINGHU",
		387: "INSTRUMENT_TYPE_KACAPI",
		388: "INSTRUMENT_TYPE_KANTELE",
		389: "INSTRUMENT_TYPE_KANUN",
		390: "INSTRUMENT_TYPE_KEMENCHE",
		391: "INSTRUMENT_TYPE_KHIM",
		392: "INSTRUMENT_TYPE_KORA",
		393: "INSTRUMENT_TYPE_KOTO",
		394: "INSTRUMENT_TYPE_KUGO",
		395: "INSTRUMENT_TYPE_LANGELEIK",
		396: "INSTRUMENT_TYPE_LAOUTO",
		397: "INSTRUMENT_TYPE_LEONA",
		398: "INSTRUMENT_TYPE_LIRONE",
		399: "INSTRUMENT_TYPE_LUTE",
		400: "INSTRUMENT_TYPE_LYRAVIOL",
		401: "INSTRUMENT_TYPE_LYRE",
		402: "INSTRUMENT_TYPE_MANDOCELLO",
		403: "INSTRUMENT_TYPE_MANDOLA",
		404: "INSTRUMENT_TYPE_MANDOLELE",
		405: "INSTRUMENT_TYPE_MANDOLIN",
		406: "INSTRUMENT_TYPE_MANDOLINO",
		407: "INSTRUMENT_TYPE_MANDORE",
		408: "INSTRUMENT_TYPE_MARXOPHONE",
		409: "INSTRUMENT_TYPE_MEDIEVALFIDDLE",
		410: "INSTRUMENT_TYPE_MEDIEVALHARP",
		411: "INSTRUMENT_TYPE_MOHANVEENA",
		412: "INSTRUMENT_TYPE_MUSICALBOW",
		413: "INSTRUMENT_TYPE_NGONI",
		414: "INSTRUMENT_TYPE_NJARKA",
		415: "INSTRUMENT_TYPE_NYATITI",
		416: "INSTRUMENT_TYPE_NYCKELHARPA",
		417: "INSTRUMENT_TYPE_ORGANISTRUM",
		418: "INSTRUMENT_TYPE_ORPHARION",
		419: "INSTRUMENT_TYPE_OUD",
		420: "INSTRUMENT_TYPE_PANDURA",
		421: "INSTRUMENT_TYPE_PARAGUAYANHARP",
		422: "INSTRUMENT_TYPE_PHIN",
		423: "INSTRUMENT_TYPE_PHONOFIDDLE",
		424: "INSTRUMENT_TYPE_PIPA",
		425: "INSTRUMENT_TYPE_PLUCKEDDULCIMER",
		426: "INSTRUMENT_TYPE_PLUCKEDSTRINGS",
		427: "INSTRUMENT_TYPE_PSALTERY",
		428: "INSTRUMENT_TYPE_RABEL",
		429: "INSTRUMENT_TYPE_REBAB",
		430: "INSTRUMENT_TYPE_REBEC",
		431: "INSTRUMENT_TYPE_SANTOOR",
		432: "INSTRUMENT_TYPE_SARANGI",
		433: "INSTRUMENT_TYPE_SAROD",
		434: "INSTRUMENT_TYPE_SAUNG",
		435: "INSTRUMENT_TYPE_SAWDUANG",
		436: "INSTRUMENT_TYPE_SHAMISEN",
		437: "INSTRUMENT_TYPE_SIMSIMIYYA",
		438: "INSTRUMENT_TYPE_SINTIR",
		439: "INSTRUMENT_TYPE_SITAR",
		440: "INSTRUMENT_TYPE_SOPRANODOMRA",
		441: "INSTRUMENT_TYPE_STRINGINSTRUMENT",
		442: "INSTRUMENT_TYPE_STROHLVIOLIN",
		443: "INSTRUMENT_TYPE_SURBAHAR",
		444: "INSTRUMENT_TYPE_SWARMANDAL",
		445: "INSTRUMENT_TYPE_TAMBURA",
		446: "INSTRUMENT_TYPE_TANBOUR",
		447: "INSTRUMENT_TYPE_TANPURA",
		448: "INSTRUMENT_TYPE_TAR_STRING",
		449: "INSTRUMENT_TYPE_TENORBANJO",
		450: "INSTRUMENT_TYPE_TENORREBEC",
		451: "INSTRUMENT_TYPE_TENORVIOL",
		452: "INSTRUMENT_TYPE_THEORBO",
		453: "INSTRUMENT_TYPE_TIMPLE",
		454: "INSTRUMENT_TYPE_TOGAMANGUITARVIOL",
		455: "INSTRUMENT_TYPE_TREBLEREBEC",
		456: "INSTRUMENT_TYPE_TREBLEVIOL",
		457: "INSTRUMENT_TYPE_TROMBAMARINA",
		458: "INSTRUMENT_TYPE_TUMBI",
		459: "INSTRUMENT_TYPE_TZOURAS",
		460: "INSTRUMENT_TYPE_UKULELE",
		461: "INSTRUMENT_TYPE_VALIHA",
		462: "INSTRUMENT_TYPE_VEENA",
		463: "INSTRUMENT_TYPE_VENEZUELANHARP",
		464: "INSTRUMENT_TYPE_VERACRUZHARP",
		465: "INSTRUMENT_TYPE_VITAR",
		466: "INSTRUMENT_TYPE_VICHITRAVEENA",
		467: "INSTRUMENT_TYPE_VIELLE",
		468: "INSTRUMENT_TYPE_VIHUELA",
		469: "INSTRUMENT_TYPE_VIOL",
		470: "INSTRUMENT_TYPE_VIOLA",
		471: "INSTRUMENT_TYPE_VIOLADAMORE",
		472: "INSTRUMENT_TYPE_VIOLAPOMPOSA",
		473: "INSTRUMENT_TYPE_VIOLIN",
		474: "INSTRUMENT_TYPE_VIOLINOPICCOLO",
		475: "INSTRUMENT_TYPE_WELSHTRIPLEHARP",
		476: "INSTRUMENT_TYPE_WIRESTRUNGHARP",
		477: "INSTRUMENT_TYPE_XALAM",
		478: "INSTRUMENT_TYPE_YANGQIN",
		479: "INSTRUMENT_TYPE_YAYLITAMBUR",
		480: "INSTRUMENT_TYPE_YOKIN",
		481: "INSTRUMENT_TYPE_YUEQIN",
		482: "INSTRUMENT_TYPE_ZEZE",
		483: "INSTRUMENT_TYPE_ZHONGHU",
		484: "INSTRUMENT_TYPE_ZITHER",
		485: "INSTRUMENT_TYPE_ARPEGGIATINGSYNTH",
		486: "INSTRUMENT_TYPE_SYNTHBASS",
		487: "INSTRUMENT_TYPE_SYNTHBRASS",
		488: "INSTRUMENT_TYPE_SYNTHCHOIR",
		489: "INSTRUMENT_TYPE_SYNTHFX",
		490: "INSTRUMENT_TYPE_SYNTHLEAD",
		491: "INSTRUMENT_TYPE_SYNTHPAD",
		492: "INSTRUMENT_TYPE_SYNTHSTEELDRUMS",
		493: "INSTRUMENT_TYPE_SYNTHSTRINGS",
		494: "INSTRUMENT_TYPE_SYNTHESIZER",
		495: "INSTRUMENT_TYPE_GROUPBACKGROUNDVOCALISTS",
		496: "INSTRUMENT_TYPE_BOYVOICE",
		497: "INSTRUMENT_TYPE_CHILDVOICE",
		498: "INSTRUMENT_TYPE_CHILDRENSBACKGROUNDVOCALIST",
		499: "INSTRUMENT_TYPE_FEMALEVOICE",
		500: "INSTRUMENT_TYPE_FEMALEBACKGROUNDVOCALIST",
		501: "INSTRUMENT_TYPE_GIRLVOICE",
		502: "INSTRUMENT_TYPE_LEADVOCALIST",
		503: "INSTRUMENT_TYPE_MALEVOICE",
		504: "INSTRUMENT_TYPE_MALEBACKGROUNDVOCALIST",
		505: "INSTRUMENT_TYPE_MIXEDVOICE",
		506: "INSTRUMENT_TYPE_MIXEDBACKGROUNDVOCALIST",
		507: "INSTRUMENT_TYPE_NEUTRALVOICE",
		508: "INSTRUMENT_TYPE_ALBOKA",
		509: "INSTRUMENT_TYPE_ALPENHORN",
		510: "INSTRUMENT_TYPE_ALTOCLARINET",
		511: "INSTRUMENT_TYPE_ALTOCRUMHORN",
		512: "INSTRUMENT_TYPE_ALTOFLUTE",
		513: "INSTRUMENT_TYPE_ALTOHORN",
		514: "INSTRUMENT_TYPE_ALTORECORDER",
		515: "INSTRUMENT_TYPE_ALTOSACKBUT",
		516: "INSTRUMENT_TYPE_ALTOSAXOPHONE",
		517: "INSTRUMENT_TYPE_ALTOSHAWM",
		518: "INSTRUMENT_TYPE_ALTOTROMBONE",
		519: "INSTRUMENT_TYPE_APITO",
		520: "INSTRUMENT_TYPE_ARGHUL",
		521: "INSTRUMENT_TYPE_AULOCHROME",
		522: "INSTRUMENT_TYPE_BAGPIPES",
		523: "INSTRUMENT_TYPE_BANSURI",
		524: "INSTRUMENT_TYPE_BARITONEHORN",
		525: "INSTRUMENT_TYPE_BARITONEOBOE",
		526: "INSTRUMENT_TYPE_BARITONESAXOPHONE",
		527: "INSTRUMENT_TYPE_BAROQUEBASSOON",
		528: "INSTRUMENT_TYPE_BAROQUECLARINET",
		529: "INSTRUMENT_TYPE_BAROQUEFLUTE",
		530: "INSTRUMENT_TYPE_BAROQUEOBOE",
		531: "INSTRUMENT_TYPE_BAROQUERECORDER",
		532: "INSTRUMENT_TYPE_BASSCLARINET",
		533: "INSTRUMENT_TYPE_BASSDULCIAN",
		534: "INSTRUMENT_TYPE_BASSFLUTE",
		535: "INSTRUMENT_TYPE_BASSHARMONICA",
		536: "INSTRUMENT_TYPE_BASSRECORDER",
		537: "INSTRUMENT_TYPE_BASSSACKBUT",
		538: "INSTRUMENT_TYPE_BASSSAXOPHONE",
		539: "INSTRUMENT_TYPE_BASSSHAWM",
		540: "INSTRUMENT_TYPE_BASSTROMBONE",
		541: "INSTRUMENT_TYPE_BASSTRUMPET",
		542: "INSTRUMENT_TYPE_BASSTUBA",
		543: "INSTRUMENT_TYPE_BASSETCLARINET",
		544: "INSTRUMENT_TYPE_BASSETHORN",
		545: "INSTRUMENT_TYPE_BASSOON",
		546: "INSTRUMENT_TYPE_BAWU",
		547: "INSTRUMENT_TYPE_BIRDWHISTLE",
		548: "INSTRUMENT_TYPE_BOMBARD",
		549: "INSTRUMENT_TYPE_BOSUNSWHISTLE",
		550: "INSTRUMENT_TYPE_BRASSINSTRUMENT",
		551: "INSTRUMENT_TYPE_BUGLE",
		552: "INSTRUMENT_TYPE_CALLIOPE",
		553: "INSTRUMENT_TYPE_CHALUMEAU",
		554: "INSTRUMENT_TYPE_CHROMATICHARMONICA",
		555: "INSTRUMENT_TYPE_CIMBASSO",
		556: "INSTRUMENT_TYPE_CLARINET",
		557: "INSTRUMENT_TYPE_CLARINOTRUMPET",
		558: "INSTRUMENT_TYPE_CONCHSHELL",
		559: "INSTRUMENT_TYPE_CONTRAALTOCLARINET",
		560: "INSTRUMENT_TYPE_CONTRABASSCLARINET",
		561: "INSTRUMENT_TYPE_CONTRABASSRECORDER",
		562: "INSTRUMENT_TYPE_CONTRABASSSARRUSOPHONE",
		563: "INSTRUMENT_TYPE_CONTRABASSSAXOPHONE",
		564: "INSTRUMENT_TYPE_CONTRABASSTROMBONE",
		565: "INSTRUMENT_TYPE_CONTRABASSOON",
		566: "INSTRUMENT_TYPE_CORNET",
		567: "INSTRUMENT_TYPE_CORNETTO",
		568: "INSTRUMENT_TYPE_CRUMHORN",
		569: "INSTRUMENT_TYPE_DAEGEUM",
		570: "INSTRUMENT_TYPE_DIDGERIDOO",
		571: "INSTRUMENT_TYPE_DIPLE",
		572: "INSTRUMENT_TYPE_DIZI",
		573: "INSTRUMENT_TYPE_DUDUK",
		574: "INSTRUMENT_TYPE_DULCIAN",
		575: "INSTRUMENT_TYPE_DUNGCHEN",
		576: "INSTRUMENT_TYPE_ENGLISHHORN",
		577: "INSTRUMENT_TYPE_EUPHONIUM",
		578: "INSTRUMENT_TYPE_FIFE",
		579: "INSTRUMENT_TYPE_FISCORN",
		580: "INSTRUMENT_TYPE_FLABIOL",
		581: "INSTRUMENT_TYPE_FLAGEOLET",
		582: "INSTRUMENT_TYPE_FLOYERA",
		583: "INSTRUMENT_TYPE_FLUGELHORN",
		584: "INSTRUMENT_TYPE_FLUTE",
		585: "INSTRUMENT_TYPE_FRENCHHORN",
		586: "INSTRUMENT_TYPE_FUJARA",
		587: "INSTRUMENT_TYPE_GASBA",
		588: "INSTRUMENT_TYPE_GEMSHORN",
		589: "INSTRUMENT_TYPE_GERMANFLUTE",
		590: "INSTRUMENT_TYPE_GHAITA",
		591: "INSTRUMENT_TYPE_GREATBASSRECORDER",
		592: "INSTRUMENT_TYPE_GUANZI",
		593: "INSTRUMENT_TYPE_GYALING",
		594: "INSTRUMENT_TYPE_HARMONICA",
		595: "INSTRUMENT_TYPE_HECKELPHONE",
		596: "INSTRUMENT_TYPE_HELICON",
		597: "INSTRUMENT_TYPE_HERALDTRUMPET",
		598: "INSTRUMENT_TYPE_HIGHLANDPIPES",
		599: "INSTRUMENT_TYPE_HOTFOUNTAINPEN",
		600: "INSTRUMENT_TYPE_IRISHLOWWHISTLE",
		601: "INSTRUMENT_TYPE_JAGDHORN",
		602: "INSTRUMENT_TYPE_KAVAL",
		603: "INSTRUMENT_TYPE_KEYEDTRUMPET",
		604: "INSTRUMENT_TYPE_KHENE",
		605: "INSTRUMENT_TYPE_KHLUI",
		606: "INSTRUMENT_TYPE_LAUNEDDAS",
		607: "INSTRUMENT_TYPE_LUR",
		608: "INSTRUMENT_TYPE_MELLOPHONE",
		609: "INSTRUMENT_TYPE_MELODICA",
		610: "INSTRUMENT_TYPE_MIJWIZ",
		611: "INSTRUMENT_TYPE_MINIATUREKHENE",
		612: "INSTRUMENT_TYPE_MIZMAR",
		613: "INSTRUMENT_TYPE_MOUTHORGAN",
		614: "INSTRUMENT_TYPE_NADASWARAM",
		615: "INSTRUMENT_TYPE_NAI",
		616: "INSTRUMENT_TYPE_NATIVEAMERICANFLUTE",
		617: "INSTRUMENT_TYPE_NATURALHORN",
		618: "INSTRUMENT_TYPE_NATURALTRUMPET",
		619: "INSTRUMENT_TYPE_NEYFLUTE",
		620: "INSTRUMENT_TYPE_OBOE",
		621: "INSTRUMENT_TYPE_OBOEDAMORE",
		622: "INSTRUMENT_TYPE_OBOEDACACCIA",
		623: "INSTRUMENT_TYPE_OCARINA",
		624: "INSTRUMENT_TYPE_OPHICLEIDE",
		625: "INSTRUMENT_TYPE_PAIXIAO",
		626: "INSTRUMENT_TYPE_PANFLUTE",
		627: "INSTRUMENT_TYPE_PI",
		628: "INSTRUMENT_TYPE_PICCOLOCLARINET",
		629: "INSTRUMENT_TYPE_PICCOLOFLUTE",
		630: "INSTRUMENT_TYPE_PICCOLOTRUMPET",
		631: "INSTRUMENT_TYPE_PINKILLU",
		632: "INSTRUMENT_TYPE_POCKETTRUMPET",
		633: "INSTRUMENT_TYPE_POLICEWHISTLE",
		634: "INSTRUMENT_TYPE_POSTHORN",
		635: "INSTRUMENT_TYPE_PUNGI",
		636: "INSTRUMENT_TYPE_QUENA",
		637: "INSTRUMENT_TYPE_QUENACHO",
		638: "INSTRUMENT_TYPE_RACKETT",
		639: "INSTRUMENT_TYPE_RAUSCHPFEIFE",
		640: "INSTRUMENT_TYPE_RECORDER",
		641: "INSTRUMENT_TYPE_REEDINSTRUMENT",
		642: "INSTRUMENT_TYPE_REGAL",
		643: "INSTRUMENT_TYPE_RONDADOR",
		644: "INSTRUMENT_TYPE_SACKBUT",
		645: "INSTRUMENT_TYPE_SARRUSOPHONE",
		646: "INSTRUMENT_TYPE_SAXOPHONE",
		647: "INSTRUMENT_TYPE_SERPENT",
		648: "INSTRUMENT_TYPE_SHAKUHACHI",
		649: "INSTRUMENT_TYPE_SHAWM",
		650: "INSTRUMENT_TYPE_SHENAI",
		651: "INSTRUMENT_TYPE_SHELLTONE",
		652: "INSTRUMENT_TYPE_SHENG",
		653: "INSTRUMENT_TYPE_SHO",
		654: "INSTRUMENT_TYPE_SHOFAR",
		655: "INSTRUMENT_TYPE_SHRUTIBOX",
		656: "INSTRUMENT_TYPE_SHVIWHISTLE",
		657: "INSTRUMENT_TYPE_SIKU",
		658: "INSTRUMENT_TYPE_SLIDESAXOPHONE",
		659: "INSTRUMENT_TYPE_SLIDETRUMPET",
		660: "INSTRUMENT_TYPE_SLIDEWHISTLE",
		661: "INSTRUMENT_TYPE_SOPRANINORECORDER",
		662: "INSTRUMENT_TYPE_SOPRANINOSAXOPHONE",
		663: "INSTRUMENT_TYPE_SOPRANOCLARINET",
		664: "INSTRUMENT_TYPE_SOPRANOCORNET",
		665: "INSTRUMENT_TYPE_SOPRANOCRUMHORN",
		666: "INSTRUMENT_TYPE_SOPRANODULCIAN",
		667: "INSTRUMENT_TYPE_SOPRANORECORDER",
		668: "INSTRUMENT_TYPE_SOPRANOSAXOPHONE",
		669: "INSTRUMENT_TYPE_SOPRANOSHAWM",
		670: "INSTRUMENT_TYPE_SOPRANOTRUMPET",
		671: "INSTRUMENT_TYPE_SORDUN",
		672: "INSTRUMENT_TYPE_SOUSAPHONE",
		673: "INSTRUMENT_TYPE_SULING",
		674: "INSTRUMENT_TYPE_SUONA",
		675: "INSTRUMENT_TYPE_TARKA",
		676: "INSTRUMENT_TYPE_TAROGATO",
		677: "INSTRUMENT_TYPE_TENORCRUMHORN",
		678: "INSTRUMENT_TYPE_TENORDULCIAN",
		679: "INSTRUMENT_TYPE_TENORFLUTE",
		680: "INSTRUMENT_TYPE_TENORRECORDER",
		681: "INSTRUMENT_TYPE_TENORSACKBUT",
		682: "INSTRUMENT_TYPE_TENORSAXOPHONE",
		683: "INSTRUMENT_TYPE_TENORSHAWM",
		684: "INSTRUMENT_TYPE_TENORTROMBONE",
		685: "INSTRUMENT_TYPE_TINWHISTLE",
		686: "INSTRUMENT_TYPE_TROMBONE",
		687: "INSTRUMENT_TYPE_TRUMPET",
		688: "INSTRUMENT_TYPE_TUBA",
		689: "INSTRUMENT_TYPE_TUSSELFLOYTE",
		690: "INSTRUMENT_TYPE_UILLEANPIPES",
		691: "INSTRUMENT_TYPE_VALVETROMBONE",
		692: "INSTRUMENT_TYPE_VUVUZELA",
		693: "INSTRUMENT_TYPE_WAGNERTUBA",
		694: "INSTRUMENT_TYPE_WILLOWFLUTE",
		695: "INSTRUMENT_TYPE_WINDINSTRUMENT",
		696: "INSTRUMENT_TYPE_WOODFLUTE",
		697: "INSTRUMENT_TYPE_WOODTRUMPET",
		698: "INSTRUMENT_TYPE_WOT",
		699: "INSTRUMENT_TYPE_XAPHOON",
		700: "INSTRUMENT_TYPE_XIAO",
		701: "INSTRUMENT_TYPE_XUN",
		702: "INSTRUMENT_TYPE_ZUMMARA",
		703: "INSTRUMENT_TYPE_ZURNA",
		704: "INSTRUMENT_TYPE_CHOIR",
		705: "INSTRUMENT_TYPE_PERCUSSIONSECTION",
		706: "INSTRUMENT_TYPE_STRINGSECTION",
		707: "INSTRUMENT_TYPE_WINDSECTION",
		708: "INSTRUMENT_TYPE_USERDEFINED",
		709: "INSTRUMENT_TYPE_VOICE",
	}
	InstrumentType_value = map[string]int32{
		"INSTRUMENT_TYPE_UNSPECIFIED":                   0,
		"INSTRUMENT_TYPE_ACCORDION":                     1,
		"INSTRUMENT_TYPE_BANDONEON":                     2,
		"INSTRUMENT_TYPE_CHROMATICBUTTONACCORDION":      3,
		"INSTRUMENT_TYPE_CONCERTINA":                    4,
		"INSTRUMENT_TYPE_CORDOVOX":                      5,
		"INSTRUMENT_TYPE_MELODEON":                      6,
		"INSTRUMENT_TYPE_MUSETTE":                       7,
		"INSTRUMENT_TYPE_PIANOACCORDION":                8,
		"INSTRUMENT_TYPE_TOYACCORDION":                  9,
		"INSTRUMENT_TYPE_ACOUSTICBASSGUITAR":            10,
		"INSTRUMENT_TYPE_BABYBASS":                      11,
		"INSTRUMENT_TYPE_BASS":                          12,
		"INSTRUMENT_TYPE_ELECTRICBASSGUITAR":            13,
		"INSTRUMENT_TYPE_FRETLESSBASSGUITAR":            14,
		"INSTRUMENT_TYPE_PICCOLOBASS":                   15,
		"INSTRUMENT_TYPE_UPRIGHTBASS":                   16,
		"INSTRUMENT_TYPE_WASHTUBBASS":                   17,
		"INSTRUMENT_TYPE_DRUMMACHINE":                   18,
		"INSTRUMENT_TYPE_BREAKBEAT":                     19,
		"INSTRUMENT_TYPE_DRUMKIT":                       20,
		"INSTRUMENT_TYPE_DRUMSAMPLE":                    21,
		"INSTRUMENT_TYPE_E_12_STRINGELECTRICGUITAR":     22,
		"INSTRUMENT_TYPE_E_12_STRINGGUITAR":             23,
		"INSTRUMENT_TYPE_ACOUSTICGUITAR":                24,
		"INSTRUMENT_TYPE_BAHIANGUITAR":                  25,
		"INSTRUMENT_TYPE_BAJOSEXTO":                     26,
		"INSTRUMENT_TYPE_BARITONEGUITAR":                27,
		"INSTRUMENT_TYPE_BAROQUEGUITAR":                 28,
		"INSTRUMENT_TYPE_CHAPMANSTICK":                  29,
		"INSTRUMENT_TYPE_NYLONSTRINGGUITAR":             30,
		"INSTRUMENT_TYPE_DOBROGUITAR":                   31,
		"INSTRUMENT_TYPE_ELECTRICGUITAR":                32,
		"INSTRUMENT_TYPE_ELECTRICSITAR":                 33,
		"INSTRUMENT_TYPE_FRYINGPANGUITAR":               34,
		"INSTRUMENT_TYPE_GUITAR":                        35,
		"INSTRUMENT_TYPE_GUITARRON":                     36,
		"INSTRUMENT_TYPE_LAPSTEELGUITAR":                37,
		"INSTRUMENT_TYPE_PEDABRO":                       38,
		"INSTRUMENT_TYPE_PEDALSTEELGUITAR":              39,
		"INSTRUMENT_TYPE_PORTUGUESEGUITAR":              40,
		"INSTRUMENT_TYPE_RENAISSANCEGUITAR":             41,
		"INSTRUMENT_TYPE_ROMANTICGUITAR":                42,
		"INSTRUMENT_TYPE_TENORGUITAR":                   43,
		"INSTRUMENT_TYPE_TIPLE":                         44,
		"INSTRUMENT_TYPE_TOUCHGUITAR":                   45,
		"INSTRUMENT_TYPE_TRES":                          46,
		"INSTRUMENT_TYPE_VIOLACAIPIRA":                  47,
		"INSTRUMENT_TYPE_ACOUSTICKEYBOARD":              48,
		"INSTRUMENT_TYPE_CELESTA":                       49,
		"INSTRUMENT_TYPE_CHAMBERLIN":                    50,
		"INSTRUMENT_TYPE_CLAVICHORD":                    51,
		"INSTRUMENT_TYPE_CLAVINET":                      52,
		"INSTRUMENT_TYPE_DULCITONE":                     53,
		"INSTRUMENT_TYPE_ELECTRICPIANO":                 54,
		"INSTRUMENT_TYPE_HARPSICHORD":                   55,
		"INSTRUMENT_TYPE_KEYBOARD":                      56,
		"INSTRUMENT_TYPE_MELLOTRON":                     57,
		"INSTRUMENT_TYPE_OPTIGAN":                       58,
		"INSTRUMENT_TYPE_PIANET":                        59,
		"INSTRUMENT_TYPE_RHODES":                        60,
		"INSTRUMENT_TYPE_SAMPLEDKEYBOARD":               61,
		"INSTRUMENT_TYPE_SPINET":                        62,
		"INSTRUMENT_TYPE_VAKOORCHESTRON":                63,
		"INSTRUMENT_TYPE_VIRGINALS":                     64,
		"INSTRUMENT_TYPE_ELECTRICORGAN":                 65,
		"INSTRUMENT_TYPE_HAMMONDORGAN":                  66,
		"INSTRUMENT_TYPE_LOWREYORGAN":                   67,
		"INSTRUMENT_TYPE_ORGAN":                         68,
		"INSTRUMENT_TYPE_PIPEORGAN":                     69,
		"INSTRUMENT_TYPE_POSITIVEORGAN":                 70,
		"INSTRUMENT_TYPE_PUMPORGAN":                     71,
		"INSTRUMENT_TYPE_BARRELORGAN":                   72,
		"INSTRUMENT_TYPE_BICYCLEPUMP":                   73,
		"INSTRUMENT_TYPE_CHURCHBELLS":                   74,
		"INSTRUMENT_TYPE_COMB":                          75,
		"INSTRUMENT_TYPE_DICTOPHONE":                    76,
		"INSTRUMENT_TYPE_HOHNERGUITARET":                77,
		"INSTRUMENT_TYPE_JEWSHARP":                      78,
		"INSTRUMENT_TYPE_KAZOO":                         79,
		"INSTRUMENT_TYPE_MUSICBOX":                      80,
		"INSTRUMENT_TYPE_OMNICHORD":                     81,
		"INSTRUMENT_TYPE_OTHERINSTRUMENT":               82,
		"INSTRUMENT_TYPE_SPECTRASONICSOMNISPHERE":       83,
		"INSTRUMENT_TYPE_TOYPIANO":                      84,
		"INSTRUMENT_TYPE_TURNTABLE":                     85,
		"INSTRUMENT_TYPE_AFRICANPERCUSSION":             86,
		"INSTRUMENT_TYPE_AGOGOBELLS":                    87,
		"INSTRUMENT_TYPE_ANGKLUNG":                      88,
		"INSTRUMENT_TYPE_ANVIL":                         89,
		"INSTRUMENT_TYPE_ATUMPAN":                       90,
		"INSTRUMENT_TYPE_BALAFON":                       91,
		"INSTRUMENT_TYPE_BASSDRUM_CONCERT":              92,
		"INSTRUMENT_TYPE_BASSDRUM_KICK":                 93,
		"INSTRUMENT_TYPE_BATA":                          94,
		"INSTRUMENT_TYPE_BELLTREE":                      95,
		"INSTRUMENT_TYPE_BENDIR":                        96,
		"INSTRUMENT_TYPE_BERIMBAU":                      97,
		"INSTRUMENT_TYPE_BINGHIDRUM":                    98,
		"INSTRUMENT_TYPE_BODHRAN":                       99,
		"INSTRUMENT_TYPE_BODYPERCUSSION":                100,
		"INSTRUMENT_TYPE_BOMBO":                         101,
		"INSTRUMENT_TYPE_BOMBOLEGUERO":                  102,
		"INSTRUMENT_TYPE_BONES":                         103,
		"INSTRUMENT_TYPE_BONGOS":                        104,
		"INSTRUMENT_TYPE_BOTTLES":                       105,
		"INSTRUMENT_TYPE_BRAZILIANPERCUSSION":           106,
		"INSTRUMENT_TYPE_CABASA":                        107,
		"INSTRUMENT_TYPE_CAIXA":                         108,
		"INSTRUMENT_TYPE_CAJA":                          109,
		"INSTRUMENT_TYPE_CAJON":                         110,
		"INSTRUMENT_TYPE_CALABASH":                      111,
		"INSTRUMENT_TYPE_CARILLON":                      112,
		"INSTRUMENT_TYPE_CASTANET":                      113,
		"INSTRUMENT_TYPE_CAXIXI":                        114,
		"INSTRUMENT_TYPE_CHIMES":                        115,
		"INSTRUMENT_TYPE_CHOCALHO":                      116,
		"INSTRUMENT_TYPE_CLAPSTICK":                     117,
		"INSTRUMENT_TYPE_CLAVES":                        118,
		"INSTRUMENT_TYPE_CLAYPOT":                       119,
		"INSTRUMENT_TYPE_CONGAS":                        120,
		"INSTRUMENT_TYPE_COWBELL":                       121,
		"INSTRUMENT_TYPE_CROTALES":                      122,
		"INSTRUMENT_TYPE_CUICA":                         123,
		"INSTRUMENT_TYPE_CYMBAL_CRASH":                  124,
		"INSTRUMENT_TYPE_CYMBAL_RIDE":                   125,
		"INSTRUMENT_TYPE_CYMBAL_SUSPENDED":              126,
		"INSTRUMENT_TYPE_CYMBALS":                       127,
		"INSTRUMENT_TYPE_DAF":                           128,
		"INSTRUMENT_TYPE_DAMARU":                        129,
		"INSTRUMENT_TYPE_DAVUL":                         130,
		"INSTRUMENT_TYPE_DAYEREH":                       131,
		"INSTRUMENT_TYPE_DEFI":                          132,
		"INSTRUMENT_TYPE_DHOL":                          133,
		"INSTRUMENT_TYPE_DHOLAK":                        134,
		"INSTRUMENT_TYPE_DJEMBE":                        135,
		"INSTRUMENT_TYPE_DOHOL":                         136,
		"INSTRUMENT_TYPE_DOUMBEK":                       137,
		"INSTRUMENT_TYPE_DRUMSTICKS":                    138,
		"INSTRUMENT_TYPE_DUGGI":                         139,
		"INSTRUMENT_TYPE_DUNUN":                         140,
		"INSTRUMENT_TYPE_ELEPHANTBELL":                  141,
		"INSTRUMENT_TYPE_FINGERCLICKS":                  142,
		"INSTRUMENT_TYPE_FINGERCYMBALS":                 143,
		"INSTRUMENT_TYPE_FINGERSNAPS":                   144,
		"INSTRUMENT_TYPE_FLEXATONE":                     145,
		"INSTRUMENT_TYPE_FOLKLORICPERCUSSION":           146,
		"INSTRUMENT_TYPE_FOOTSTOMP":                     147,
		"INSTRUMENT_TYPE_FROG":                          148,
		"INSTRUMENT_TYPE_GAMBANG":                       149,
		"INSTRUMENT_TYPE_GAMELAN":                       150,
		"INSTRUMENT_TYPE_GANGA":                         151,
		"INSTRUMENT_TYPE_GLASSHARMONICA":                152,
		"INSTRUMENT_TYPE_GLASSHARP":                     153,
		"INSTRUMENT_TYPE_GLOCKENSPIEL":                  154,
		"INSTRUMENT_TYPE_GONG":                          155,
		"INSTRUMENT_TYPE_GUACHARACA":                    156,
		"INSTRUMENT_TYPE_GUACHE":                        157,
		"INSTRUMENT_TYPE_GUIRA":                         158,
		"INSTRUMENT_TYPE_GUIRO":                         159,
		"INSTRUMENT_TYPE_HANDBELLS":                     160,
		"INSTRUMENT_TYPE_HANDCHIMES":                    161,
		"INSTRUMENT_TYPE_HANDCLAPS":                     162,
		"INSTRUMENT_TYPE_HIHATCYMBAL":                   163,
		"INSTRUMENT_TYPE_JAMBLOCK":                      164,
		"INSTRUMENT_TYPE_JAWBONE":                       165,
		"INSTRUMENT_TYPE_JAWHARP":                       166,
		"INSTRUMENT_TYPE_JUG":                           167,
		"INSTRUMENT_TYPE_KANJIRA":                       168,
		"INSTRUMENT_TYPE_KATSA":                         169,
		"INSTRUMENT_TYPE_KENDANG":                       170,
		"INSTRUMENT_TYPE_KHAMAK":                        171,
		"INSTRUMENT_TYPE_KHARTAL":                       172,
		"INSTRUMENT_TYPE_KHOL":                          173,
		"INSTRUMENT_TYPE_KHONGWONGLEK":                  174,
		"INSTRUMENT_TYPE_KHONGWONGYAI":                  175,
		"INSTRUMENT_TYPE_KNUCKLES":                      176,
		"INSTRUMENT_TYPE_LATINPERCUSSION":               177,
		"INSTRUMENT_TYPE_LITHOPHONE":                    178,
		"INSTRUMENT_TYPE_LOKOLE":                        179,
		"INSTRUMENT_TYPE_MADAL":                         180,
		"INSTRUMENT_TYPE_MARACAS":                       181,
		"INSTRUMENT_TYPE_MARIMBA":                       182,
		"INSTRUMENT_TYPE_MARIMBAPHONE":                  183,
		"INSTRUMENT_TYPE_MARIMBULA":                     184,
		"INSTRUMENT_TYPE_MAZHAR":                        185,
		"INSTRUMENT_TYPE_KALIMBA":                       186,
		"INSTRUMENT_TYPE_METALCANS":                     187,
		"INSTRUMENT_TYPE_MOUTHPERCUSSION":               188,
		"INSTRUMENT_TYPE_MRIDANGAM":                     189,
		"INSTRUMENT_TYPE_MUHARSING":                     190,
		"INSTRUMENT_TYPE_NAAL":                          191,
		"INSTRUMENT_TYPE_NAGARA":                        192,
		"INSTRUMENT_TYPE_OBOROMDRUM":                    193,
		"INSTRUMENT_TYPE_OCTOBAN":                       194,
		"INSTRUMENT_TYPE_ORCHESTRALPERCUSSION":          195,
		"INSTRUMENT_TYPE_PADDLEDRUMS":                   196,
		"INSTRUMENT_TYPE_PANDEIRO":                      197,
		"INSTRUMENT_TYPE_PERCUSSIONINSTRUMENT":          198,
		"INSTRUMENT_TYPE_PITCHEDPERCUSSIONINSTRUMENT":   199,
		"INSTRUMENT_TYPE_PONGLANG":                      200,
		"INSTRUMENT_TYPE_POTSANDPANS":                   201,
		"INSTRUMENT_TYPE_QARKABEB":                      202,
		"INSTRUMENT_TYPE_RAINSTICK":                     203,
		"INSTRUMENT_TYPE_RANAT":                         204,
		"INSTRUMENT_TYPE_RATCHET":                       205,
		"INSTRUMENT_TYPE_RATTLE":                        206,
		"INSTRUMENT_TYPE_RECORECO":                      207,
		"INSTRUMENT_TYPE_REPINIQUE":                     208,
		"INSTRUMENT_TYPE_RHYTHMSTICK":                   209,
		"INSTRUMENT_TYPE_RIQ":                           210,
		"INSTRUMENT_TYPE_RNGA":                          211,
		"INSTRUMENT_TYPE_ROLMO":                         212,
		"INSTRUMENT_TYPE_ROTOTOMS":                      213,
		"INSTRUMENT_TYPE_SABAR":                         214,
		"INSTRUMENT_TYPE_SANDBLOCKS":                    215,
		"INSTRUMENT_TYPE_SAW":                           216,
		"INSTRUMENT_TYPE_SCRATCHER":                     217,
		"INSTRUMENT_TYPE_SHAKER":                        218,
		"INSTRUMENT_TYPE_SHEKERE":                       219,
		"INSTRUMENT_TYPE_SINGINGBOWLS":                  220,
		"INSTRUMENT_TYPE_SISTRUM":                       221,
		"INSTRUMENT_TYPE_SLAPSTICK":                     222,
		"INSTRUMENT_TYPE_SLEIGHBELLS":                   223,
		"INSTRUMENT_TYPE_SNAREDRUM":                     224,
		"INSTRUMENT_TYPE_SNAREDRUM_MARCHING":            225,
		"INSTRUMENT_TYPE_SPOONS":                        226,
		"INSTRUMENT_TYPE_SPRINGDRUM":                    227,
		"INSTRUMENT_TYPE_STEELDRUMS":                    228,
		"INSTRUMENT_TYPE_STICKS":                        229,
		"INSTRUMENT_TYPE_SURDO":                         230,
		"INSTRUMENT_TYPE_TAAL":                          231,
		"INSTRUMENT_TYPE_TAARIJA":                       232,
		"INSTRUMENT_TYPE_TABLA":                         233,
		"INSTRUMENT_TYPE_TABOR":                         234,
		"INSTRUMENT_TYPE_TAIKO":                         235,
		"INSTRUMENT_TYPE_TALKINGDRUM":                   236,
		"INSTRUMENT_TYPE_TAMBORA":                       237,
		"INSTRUMENT_TYPE_TAMBORIM":                      238,
		"INSTRUMENT_TYPE_TAMBOURINE":                    239,
		"INSTRUMENT_TYPE_TAONGAPUORO":                   240,
		"INSTRUMENT_TYPE_TAR_PERCUSSION":                241,
		"INSTRUMENT_TYPE_TAROL":                         242,
		"INSTRUMENT_TYPE_TEMPLEBELL":                    243,
		"INSTRUMENT_TYPE_TEMPLEBLOCKS":                  244,
		"INSTRUMENT_TYPE_TENORDRUM":                     245,
		"INSTRUMENT_TYPE_THAVIL":                        246,
		"INSTRUMENT_TYPE_THUNDERSHEET":                  247,
		"INSTRUMENT_TYPE_TIBETANBELLS":                  248,
		"INSTRUMENT_TYPE_TIMBALES":                      249,
		"INSTRUMENT_TYPE_TIMBAU":                        250,
		"INSTRUMENT_TYPE_TIMPANI":                       251,
		"INSTRUMENT_TYPE_TINGSHA":                       252,
		"INSTRUMENT_TYPE_TOMPAK":                        253,
		"INSTRUMENT_TYPE_TOMS":                          254,
		"INSTRUMENT_TYPE_TONGUEDRUM":                    255,
		"INSTRUMENT_TYPE_TRIANGLE":                      256,
		"INSTRUMENT_TYPE_TXALAPARTA":                    257,
		"INSTRUMENT_TYPE_UDU":                           258,
		"INSTRUMENT_TYPE_ULIULI":                        259,
		"INSTRUMENT_TYPE_UNPITCHEDPERCUSSIONINSTRUMENT": 260,
		"INSTRUMENT_TYPE_URUMEE":                        261,
		"INSTRUMENT_TYPE_VIBRAPHONE":                    262,
		"INSTRUMENT_TYPE_VIBRASLAP":                     263,
		"INSTRUMENT_TYPE_WASHBOARD":                     264,
		"INSTRUMENT_TYPE_WATERPHONE":                    265,
		"INSTRUMENT_TYPE_WINDCHIMES":                    266,
		"INSTRUMENT_TYPE_WINDMACHINE":                   267,
		"INSTRUMENT_TYPE_WOBBLEBOARD":                   268,
		"INSTRUMENT_TYPE_WOODBLOCK":                     269,
		"INSTRUMENT_TYPE_XYLOPHONE":                     270,
		"INSTRUMENT_TYPE_XYLORIMBA":                     271,
		"INSTRUMENT_TYPE_ZERBAGHALI":                    272,
		"INSTRUMENT_TYPE_ZYDECORUBBOARD":                273,
		"INSTRUMENT_TYPE_FORTEPIANO":                    274,
		"INSTRUMENT_TYPE_GRANDPIANO":                    275,
		"INSTRUMENT_TYPE_LUTHEAL":                       276,
		"INSTRUMENT_TYPE_PIANO":                         277,
		"INSTRUMENT_TYPE_PIANOHARP":                     278,
		"INSTRUMENT_TYPE_PIANOLA":                       279,
		"INSTRUMENT_TYPE_PREPAREDPIANO":                 280,
		"INSTRUMENT_TYPE_SQUAREPIANO":                   281,
		"INSTRUMENT_TYPE_TACKPIANO":                     282,
		"INSTRUMENT_TYPE_UPRIGHTPIANO":                  283,
		"INSTRUMENT_TYPE_ANIMALSOUNDS":                  284,
		"INSTRUMENT_TYPE_APPLAUSE":                      285,
		"INSTRUMENT_TYPE_BIRDSONG":                      286,
		"INSTRUMENT_TYPE_CARSOUNDS":                     287,
		"INSTRUMENT_TYPE_CHATTER":                       288,
		"INSTRUMENT_TYPE_CHEWINGSOUNDS":                 289,
		"INSTRUMENT_TYPE_GIZMO":                         290,
		"INSTRUMENT_TYPE_GUNSHOTS":                      291,
		"INSTRUMENT_TYPE_MAGNETICTAPETREATMENTS":        292,
		"INSTRUMENT_TYPE_ORCHESTRALHIT":                 293,
		"INSTRUMENT_TYPE_RECORDNOISE":                   294,
		"INSTRUMENT_TYPE_SIREN":                         295,
		"INSTRUMENT_TYPE_SOUNDDESIGN":                   296,
		"INSTRUMENT_TYPE_SOUNDEFFECTS":                  297,
		"INSTRUMENT_TYPE_TRAINSOUNDS":                   298,
		"INSTRUMENT_TYPE_TREATMENTS":                    299,
		"INSTRUMENT_TYPE_UNINTENDEDARTIFACTS":           300,
		"INSTRUMENT_TYPE_E_5_STRINGBANJO":               301,
		"INSTRUMENT_TYPE_AFRICANHARP":                   302,
		"INSTRUMENT_TYPE_ALTOVIOL":                      303,
		"INSTRUMENT_TYPE_ANDEANHARP":                    304,
		"INSTRUMENT_TYPE_ARCHLUTE":                      305,
		"INSTRUMENT_TYPE_AUTOHARP":                      306,
		"INSTRUMENT_TYPE_BAGLAMA":                       307,
		"INSTRUMENT_TYPE_BALALAIKA":                     308,
		"INSTRUMENT_TYPE_BANDURA":                       309,
		"INSTRUMENT_TYPE_BANDURRIA":                     310,
		"INSTRUMENT_TYPE_BANHU":                         311,
		"INSTRUMENT_TYPE_BANJO":                         312,
		"INSTRUMENT_TYPE_BANJOGUITAR":                   313,
		"INSTRUMENT_TYPE_BANJOLIN":                      314,
		"INSTRUMENT_TYPE_BAROQUECELLO":                  315,
		"INSTRUMENT_TYPE_BAROQUEVIOLA":                  316,
		"INSTRUMENT_TYPE_BAROQUEVIOLIN":                 317,
		"INSTRUMENT_TYPE_BARYTON":                       318,
		"INSTRUMENT_TYPE_BASSBANJO":                     319,
		"INSTRUMENT_TYPE_BASSCITTERN":                   320,
		"INSTRUMENT_TYPE_BASSREBEC":                     321,
		"INSTRUMENT_TYPE_BASSVIOL":                      322,
		"INSTRUMENT_TYPE_BASSODABRACCIO":                323,
		"INSTRUMENT_TYPE_BIWA":                          324,
		"INSTRUMENT_TYPE_BOUZOUKI":                      325,
		"INSTRUMENT_TYPE_BOWEDSTRINGS":                  326,
		"INSTRUMENT_TYPE_BOZOQ":                         327,
		"INSTRUMENT_TYPE_BUFOBASS":                      328,
		"INSTRUMENT_TYPE_CAVAQUINHO":                    329,
		"INSTRUMENT_TYPE_CELLO":                         330,
		"INSTRUMENT_TYPE_CELLOBANJO":                    331,
		"INSTRUMENT_TYPE_CELTICHARP":                    332,
		"INSTRUMENT_TYPE_CHARANGO":                      333,
		"INSTRUMENT_TYPE_CIMBALOM":                      334,
		"INSTRUMENT_TYPE_CITOLE":                        335,
		"INSTRUMENT_TYPE_CITTERN":                       336,
		"INSTRUMENT_TYPE_CONCERTHARP":                   337,
		"INSTRUMENT_TYPE_CRAVIOLA":                      338,
		"INSTRUMENT_TYPE_CRWTH":                         339,
		"INSTRUMENT_TYPE_CUATRO":                        340,
		"INSTRUMENT_TYPE_CUMBUS":                        341,
		"INSTRUMENT_TYPE_DANBAU":                        342,
		"INSTRUMENT_TYPE_DANTRANH":                      343,
		"INSTRUMENT_TYPE_DILRUBA":                       344,
		"INSTRUMENT_TYPE_DOMBRA":                        345,
		"INSTRUMENT_TYPE_DOMRA":                         346,
		"INSTRUMENT_TYPE_DOUBLEBASS":                    347,
		"INSTRUMENT_TYPE_DOUBLEHARP":                    348,
		"INSTRUMENT_TYPE_DOUBLEVIOLIN":                  349,
		"INSTRUMENT_TYPE_DOUBLEBASSVIOL":                350,
		"INSTRUMENT_TYPE_DRANYEN":                       351,
		"INSTRUMENT_TYPE_DUTAR":                         352,
		"INSTRUMENT_TYPE_DZUDDAHORD":                    353,
		"INSTRUMENT_TYPE_EKTARA":                        354,
		"INSTRUMENT_TYPE_ELECTRIC6STRINGVIOLIN":         355,
		"INSTRUMENT_TYPE_ELECTRICCELLO":                 356,
		"INSTRUMENT_TYPE_ELECTRICHARP":                  357,
		"INSTRUMENT_TYPE_ELECTRICMANDOLIN":              358,
		"INSTRUMENT_TYPE_ELECTRICVIOLA":                 359,
		"INSTRUMENT_TYPE_ELECTRICVIOLIN":                360,
		"INSTRUMENT_TYPE_ELECTROACOUSTICHURDYGURDY":     361,
		"INSTRUMENT_TYPE_ENNANGA":                       362,
		"INSTRUMENT_TYPE_EPINETTEDESVOSGES":             363,
		"INSTRUMENT_TYPE_ERHU":                          364,
		"INSTRUMENT_TYPE_ESRAJ":                         365,
		"INSTRUMENT_TYPE_FIDDLE":                        366,
		"INSTRUMENT_TYPE_FOLKHARP":                      367,
		"INSTRUMENT_TYPE_GADULKA":                       368,
		"INSTRUMENT_TYPE_GARDON":                        369,
		"INSTRUMENT_TYPE_GAYAGEUM":                      370,
		"INSTRUMENT_TYPE_GHAYCHAK":                      371,
		"INSTRUMENT_TYPE_GITTERN":                       372,
		"INSTRUMENT_TYPE_GUQIN":                         373,
		"INSTRUMENT_TYPE_GUSLI":                         374,
		"INSTRUMENT_TYPE_GUZHENG":                       375,
		"INSTRUMENT_TYPE_HAEGEUM":                       376,
		"INSTRUMENT_TYPE_HAMMEREDDULCIMER":              377,
		"INSTRUMENT_TYPE_HAMMEREDSTRINGS":               378,
		"INSTRUMENT_TYPE_HARDANGERFIDDLE":               379,
		"INSTRUMENT_TYPE_HARP":                          380,
		"INSTRUMENT_TYPE_HUAPANGUERA":                   381,
		"INSTRUMENT_TYPE_HURDYGURDY":                    382,
		"INSTRUMENT_TYPE_IRISHBOUZOUKI":                 383,
		"INSTRUMENT_TYPE_JAKHAY":                        384,
		"INSTRUMENT_TYPE_JARANAJAROCHA":                 385,
		"INSTRUMENT_TYPE_JINGHU":                        386,
		"INSTRUMENT_TYPE_KACAPI":                        387,
		"INSTRUMENT_TYPE_KANTELE":                       388,
		"INSTRUMENT_TYPE_KANUN":                         389,
		"INSTRUMENT_TYPE_KEMENCHE":                      390,
		"INSTRUMENT_TYPE_KHIM":                          391,
		"INSTRUMENT_TYPE_KORA":                          392,
		"INSTRUMENT_TYPE_KOTO":                          393,
		"INSTRUMENT_TYPE_KUGO":                          394,
		"INSTRUMENT_TYPE_LANGELEIK":                     395,
		"INSTRUMENT_TYPE_LAOUTO":                        396,
		"INSTRUMENT_TYPE_LEONA":                         397,
		"INSTRUMENT_TYPE_LIRONE":                        398,
		"INSTRUMENT_TYPE_LUTE":                          399,
		"INSTRUMENT_TYPE_LYRAVIOL":                      400,
		"INSTRUMENT_TYPE_LYRE":                          401,
		"INSTRUMENT_TYPE_MANDOCELLO":                    402,
		"INSTRUMENT_TYPE_MANDOLA":                       403,
		"INSTRUMENT_TYPE_MANDOLELE":                     404,
		"INSTRUMENT_TYPE_MANDOLIN":                      405,
		"INSTRUMENT_TYPE_MANDOLINO":                     406,
		"INSTRUMENT_TYPE_MANDORE":                       407,
		"INSTRUMENT_TYPE_MARXOPHONE":                    408,
		"INSTRUMENT_TYPE_MEDIEVALFIDDLE":                409,
		"INSTRUMENT_TYPE_MEDIEVALHARP":                  410,
		"INSTRUMENT_TYPE_MOHANVEENA":                    411,
		"INSTRUMENT_TYPE_MUSICALBOW":                    412,
		"INSTRUMENT_TYPE_NGONI":                         413,
		"INSTRUMENT_TYPE_NJARKA":                        414,
		"INSTRUMENT_TYPE_NYATITI":                       415,
		"INSTRUMENT_TYPE_NYCKELHARPA":                   416,
		"INSTRUMENT_TYPE_ORGANISTRUM":                   417,
		"INSTRUMENT_TYPE_ORPHARION":                     418,
		"INSTRUMENT_TYPE_OUD":                           419,
		"INSTRUMENT_TYPE_PANDURA":                       420,
		"INSTRUMENT_TYPE_PARAGUAYANHARP":                421,
		"INSTRUMENT_TYPE_PHIN":                          422,
		"INSTRUMENT_TYPE_PHONOFIDDLE":                   423,
		"INSTRUMENT_TYPE_PIPA":                          424,
		"INSTRUMENT_TYPE_PLUCKEDDULCIMER":               425,
		"INSTRUMENT_TYPE_PLUCKEDSTRINGS":                426,
		"INSTRUMENT_TYPE_PSALTERY":                      427,
		"INSTRUMENT_TYPE_RABEL":                         428,
		"INSTRUMENT_TYPE_REBAB":                         429,
		"INSTRUMENT_TYPE_REBEC":                         430,
		"INSTRUMENT_TYPE_SANTOOR":                       431,
		"INSTRUMENT_TYPE_SARANGI":                       432,
		"INSTRUMENT_TYPE_SAROD":                         433,
		"INSTRUMENT_TYPE_SAUNG":                         434,
		"INSTRUMENT_TYPE_SAWDUANG":                      435,
		"INSTRUMENT_TYPE_SHAMISEN":                      436,
		"INSTRUMENT_TYPE_SIMSIMIYYA":                    437,
		"INSTRUMENT_TYPE_SINTIR":                        438,
		"INSTRUMENT_TYPE_SITAR":                         439,
		"INSTRUMENT_TYPE_SOPRANODOMRA":                  440,
		"INSTRUMENT_TYPE_STRINGINSTRUMENT":              441,
		"INSTRUMENT_TYPE_STROHLVIOLIN":                  442,
		"INSTRUMENT_TYPE_SURBAHAR":                      443,
		"INSTRUMENT_TYPE_SWARMANDAL":                    444,
		"INSTRUMENT_TYPE_TAMBURA":                       445,
		"INSTRUMENT_TYPE_TANBOUR":                       446,
		"INSTRUMENT_TYPE_TANPURA":                       447,
		"INSTRUMENT_TYPE_TAR_STRING":                    448,
		"INSTRUMENT_TYPE_TENORBANJO":                    449,
		"INSTRUMENT_TYPE_TENORREBEC":                    450,
		"INSTRUMENT_TYPE_TENORVIOL":                     451,
		"INSTRUMENT_TYPE_THEORBO":                       452,
		"INSTRUMENT_TYPE_TIMPLE":                        453,
		"INSTRUMENT_TYPE_TOGAMANGUITARVIOL":             454,
		"INSTRUMENT_TYPE_TREBLEREBEC":                   455,
		"INSTRUMENT_TYPE_TREBLEVIOL":                    456,
		"INSTRUMENT_TYPE_TROMBAMARINA":                  457,
		"INSTRUMENT_TYPE_TUMBI":                         458,
		"INSTRUMENT_TYPE_TZOURAS":                       459,
		"INSTRUMENT_TYPE_UKULELE":                       460,
		"INSTRUMENT_TYPE_VALIHA":                        461,
		"INSTRUMENT_TYPE_VEENA":                         462,
		"INSTRUMENT_TYPE_VENEZUELANHARP":                463,
		"INSTRUMENT_TYPE_VERACRUZHARP":                  464,
		"INSTRUMENT_TYPE_VITAR":                         465,
		"INSTRUMENT_TYPE_VICHITRAVEENA":                 466,
		"INSTRUMENT_TYPE_VIELLE":                        467,
		"INSTRUMENT_TYPE_VIHUELA":                       468,
		"INSTRUMENT_TYPE_VIOL":                          469,
		"INSTRUMENT_TYPE_VIOLA":                         470,
		"INSTRUMENT_TYPE_VIOLADAMORE":                   471,
		"INSTRUMENT_TYPE_VIOLAPOMPOSA":                  472,
		"INSTRUMENT_TYPE_VIOLIN":                        473,
		"INSTRUMENT_TYPE_VIOLINOPICCOLO":                474,
		"INSTRUMENT_TYPE_WELSHTRIPLEHARP":               475,
		"INSTRUMENT_TYPE_WIRESTRUNGHARP":                476,
		"INSTRUMENT_TYPE_XALAM":                         477,
		"INSTRUMENT_TYPE_YANGQIN":                       478,
		"INSTRUMENT_TYPE_YAYLITAMBUR":                   479,
		"INSTRUMENT_TYPE_YOKIN":                         480,
		"INSTRUMENT_TYPE_YUEQIN":                        481,
		"INSTRUMENT_TYPE_ZEZE":                          482,
		"INSTRUMENT_TYPE_ZHONGHU":                       483,
		"INSTRUMENT_TYPE_ZITHER":                        484,
		"INSTRUMENT_TYPE_ARPEGGIATINGSYNTH":             485,
		"INSTRUMENT_TYPE_SYNTHBASS":                     486,
		"INSTRUMENT_TYPE_SYNTHBRASS":                    487,
		"INSTRUMENT_TYPE_SYNTHCHOIR":                    488,
		"INSTRUMENT_TYPE_SYNTHFX":                       489,
		"INSTRUMENT_TYPE_SYNTHLEAD":                     490,
		"INSTRUMENT_TYPE_SYNTHPAD":                      491,
		"INSTRUMENT_TYPE_SYNTHSTEELDRUMS":               492,
		"INSTRUMENT_TYPE_SYNTHSTRINGS":                  493,
		"INSTRUMENT_TYPE_SYNTHESIZER":                   494,
		"INSTRUMENT_TYPE_GROUPBACKGROUNDVOCALISTS":      495,
		"INSTRUMENT_TYPE_BOYVOICE":                      496,
		"INSTRUMENT_TYPE_CHILDVOICE":                    497,
		"INSTRUMENT_TYPE_CHILDRENSBACKGROUNDVOCALIST":   498,
		"INSTRUMENT_TYPE_FEMALEVOICE":                   499,
		"INSTRUMENT_TYPE_FEMALEBACKGROUNDVOCALIST":      500,
		"INSTRUMENT_TYPE_GIRLVOICE":                     501,
		"INSTRUMENT_TYPE_LEADVOCALIST":                  502,
		"INSTRUMENT_TYPE_MALEVOICE":                     503,
		"INSTRUMENT_TYPE_MALEBACKGROUNDVOCALIST":        504,
		"INSTRUMENT_TYPE_MIXEDVOICE":                    505,
		"INSTRUMENT_TYPE_MIXEDBACKGROUNDVOCALIST":       506,
		"INSTRUMENT_TYPE_NEUTRALVOICE":                  507,
		"INSTRUMENT_TYPE_ALBOKA":                        508,
		"INSTRUMENT_TYPE_ALPENHORN":                     509,
		"INSTRUMENT_TYPE_ALTOCLARINET":                  510,
		"INSTRUMENT_TYPE_ALTOCRUMHORN":                  511,
		"INSTRUMENT_TYPE_ALTOFLUTE":                     512,
		"INSTRUMENT_TYPE_ALTOHORN":                      513,
		"INSTRUMENT_TYPE_ALTORECORDER":                  514,
		"INSTRUMENT_TYPE_ALTOSACKBUT":                   515,
		"INSTRUMENT_TYPE_ALTOSAXOPHONE":                 516,
		"INSTRUMENT_TYPE_ALTOSHAWM":                     517,
		"INSTRUMENT_TYPE_ALTOTROMBONE":                  518,
		"INSTRUMENT_TYPE_APITO":                         519,
		"INSTRUMENT_TYPE_ARGHUL":                        520,
		"INSTRUMENT_TYPE_AULOCHROME":                    521,
		"INSTRUMENT_TYPE_BAGPIPES":                      522,
		"INSTRUMENT_TYPE_BANSURI":                       523,
		"INSTRUMENT_TYPE_BARITONEHORN":                  524,
		"INSTRUMENT_TYPE_BARITONEOBOE":                  525,
		"INSTRUMENT_TYPE_BARITONESAXOPHONE":             526,
		"INSTRUMENT_TYPE_BAROQUEBASSOON":                527,
		"INSTRUMENT_TYPE_BAROQUECLARINET":               528,
		"INSTRUMENT_TYPE_BAROQUEFLUTE":                  529,
		"INSTRUMENT_TYPE_BAROQUEOBOE":                   530,
		"INSTRUMENT_TYPE_BAROQUERECORDER":               531,
		"INSTRUMENT_TYPE_BASSCLARINET":                  532,
		"INSTRUMENT_TYPE_BASSDULCIAN":                   533,
		"INSTRUMENT_TYPE_BASSFLUTE":                     534,
		"INSTRUMENT_TYPE_BASSHARMONICA":                 535,
		"INSTRUMENT_TYPE_BASSRECORDER":                  536,
		"INSTRUMENT_TYPE_BASSSACKBUT":                   537,
		"INSTRUMENT_TYPE_BASSSAXOPHONE":                 538,
		"INSTRUMENT_TYPE_BASSSHAWM":                     539,
		"INSTRUMENT_TYPE_BASSTROMBONE":                  540,
		"INSTRUMENT_TYPE_BASSTRUMPET":                   541,
		"INSTRUMENT_TYPE_BASSTUBA":                      542,
		"INSTRUMENT_TYPE_BASSETCLARINET":                543,
		"INSTRUMENT_TYPE_BASSETHORN":                    544,
		"INSTRUMENT_TYPE_BASSOON":                       545,
		"INSTRUMENT_TYPE_BAWU":                          546,
		"INSTRUMENT_TYPE_BIRDWHISTLE":                   547,
		"INSTRUMENT_TYPE_BOMBARD":                       548,
		"INSTRUMENT_TYPE_BOSUNSWHISTLE":                 549,
		"INSTRUMENT_TYPE_BRASSINSTRUMENT":               550,
		"INSTRUMENT_TYPE_BUGLE":                         551,
		"INSTRUMENT_TYPE_CALLIOPE":                      552,
		"INSTRUMENT_TYPE_CHALUMEAU":                     553,
		"INSTRUMENT_TYPE_CHROMATICHARMONICA":            554,
		"INSTRUMENT_TYPE_CIMBASSO":                      555,
		"INSTRUMENT_TYPE_CLARINET":                      556,
		"INSTRUMENT_TYPE_CLARINOTRUMPET":                557,
		"INSTRUMENT_TYPE_CONCHSHELL":                    558,
		"INSTRUMENT_TYPE_CONTRAALTOCLARINET":            559,
		"INSTRUMENT_TYPE_CONTRABASSCLARINET":            560,
		"INSTRUMENT_TYPE_CONTRABASSRECORDER":            561,
		"INSTRUMENT_TYPE_CONTRABASSSARRUSOPHONE":        562,
		"INSTRUMENT_TYPE_CONTRABASSSAXOPHONE":           563,
		"INSTRUMENT_TYPE_CONTRABASSTROMBONE":            564,
		"INSTRUMENT_TYPE_CONTRABASSOON":                 565,
		"INSTRUMENT_TYPE_CORNET":                        566,
		"INSTRUMENT_TYPE_CORNETTO":                      567,
		"INSTRUMENT_TYPE_CRUMHORN":                      568,
		"INSTRUMENT_TYPE_DAEGEUM":                       569,
		"INSTRUMENT_TYPE_DIDGERIDOO":                    570,
		"INSTRUMENT_TYPE_DIPLE":                         571,
		"INSTRUMENT_TYPE_DIZI":                          572,
		"INSTRUMENT_TYPE_DUDUK":                         573,
		"INSTRUMENT_TYPE_DULCIAN":                       574,
		"INSTRUMENT_TYPE_DUNGCHEN":                      575,
		"INSTRUMENT_TYPE_ENGLISHHORN":                   576,
		"INSTRUMENT_TYPE_EUPHONIUM":                     577,
		"INSTRUMENT_TYPE_FIFE":                          578,
		"INSTRUMENT_TYPE_FISCORN":                       579,
		"INSTRUMENT_TYPE_FLABIOL":                       580,
		"INSTRUMENT_TYPE_FLAGEOLET":                     581,
		"INSTRUMENT_TYPE_FLOYERA":                       582,
		"INSTRUMENT_TYPE_FLUGELHORN":                    583,
		"INSTRUMENT_TYPE_FLUTE":                         584,
		"INSTRUMENT_TYPE_FRENCHHORN":                    585,
		"INSTRUMENT_TYPE_FUJARA":                        586,
		"INSTRUMENT_TYPE_GASBA":                         587,
		"INSTRUMENT_TYPE_GEMSHORN":                      588,
		"INSTRUMENT_TYPE_GERMANFLUTE":                   589,
		"INSTRUMENT_TYPE_GHAITA":                        590,
		"INSTRUMENT_TYPE_GREATBASSRECORDER":             591,
		"INSTRUMENT_TYPE_GUANZI":                        592,
		"INSTRUMENT_TYPE_GYALING":                       593,
		"INSTRUMENT_TYPE_HARMONICA":                     594,
		"INSTRUMENT_TYPE_HECKELPHONE":                   595,
		"INSTRUMENT_TYPE_HELICON":                       596,
		"INSTRUMENT_TYPE_HERALDTRUMPET":                 597,
		"INSTRUMENT_TYPE_HIGHLANDPIPES":                 598,
		"INSTRUMENT_TYPE_HOTFOUNTAINPEN":                599,
		"INSTRUMENT_TYPE_IRISHLOWWHISTLE":               600,
		"INSTRUMENT_TYPE_JAGDHORN":                      601,
		"INSTRUMENT_TYPE_KAVAL":                         602,
		"INSTRUMENT_TYPE_KEYEDTRUMPET":                  603,
		"INSTRUMENT_TYPE_KHENE":                         604,
		"INSTRUMENT_TYPE_KHLUI":                         605,
		"INSTRUMENT_TYPE_LAUNEDDAS":                     606,
		"INSTRUMENT_TYPE_LUR":                           607,
		"INSTRUMENT_TYPE_MELLOPHONE":                    608,
		"INSTRUMENT_TYPE_MELODICA":                      609,
		"INSTRUMENT_TYPE_MIJWIZ":                        610,
		"INSTRUMENT_TYPE_MINIATUREKHENE":                611,
		"INSTRUMENT_TYPE_MIZMAR":                        612,
		"INSTRUMENT_TYPE_MOUTHORGAN":                    613,
		"INSTRUMENT_TYPE_NADASWARAM":                    614,
		"INSTRUMENT_TYPE_NAI":                           615,
		"INSTRUMENT_TYPE_NATIVEAMERICANFLUTE":           616,
		"INSTRUMENT_TYPE_NATURALHORN":                   617,
		"INSTRUMENT_TYPE_NATURALTRUMPET":                618,
		"INSTRUMENT_TYPE_NEYFLUTE":                      619,
		"INSTRUMENT_TYPE_OBOE":                          620,
		"INSTRUMENT_TYPE_OBOEDAMORE":                    621,
		"INSTRUMENT_TYPE_OBOEDACACCIA":                  622,
		"INSTRUMENT_TYPE_OCARINA":                       623,
		"INSTRUMENT_TYPE_OPHICLEIDE":                    624,
		"INSTRUMENT_TYPE_PAIXIAO":                       625,
		"INSTRUMENT_TYPE_PANFLUTE":                      626,
		"INSTRUMENT_TYPE_PI":                            627,
		"INSTRUMENT_TYPE_PICCOLOCLARINET":               628,
		"INSTRUMENT_TYPE_PICCOLOFLUTE":                  629,
		"INSTRUMENT_TYPE_PICCOLOTRUMPET":                630,
		"INSTRUMENT_TYPE_PINKILLU":                      631,
		"INSTRUMENT_TYPE_POCKETTRUMPET":                 632,
		"INSTRUMENT_TYPE_POLICEWHISTLE":                 633,
		"INSTRUMENT_TYPE_POSTHORN":                      634,
		"INSTRUMENT_TYPE_PUNGI":                         635,
		"INSTRUMENT_TYPE_QUENA":                         636,
		"INSTRUMENT_TYPE_QUENACHO":                      637,
		"INSTRUMENT_TYPE_RACKETT":                       638,
		"INSTRUMENT_TYPE_RAUSCHPFEIFE":                  639,
		"INSTRUMENT_TYPE_RECORDER":                      640,
		"INSTRUMENT_TYPE_REEDINSTRUMENT":                641,
		"INSTRUMENT_TYPE_REGAL":                         642,
		"INSTRUMENT_TYPE_RONDADOR":                      643,
		"INSTRUMENT_TYPE_SACKBUT":                       644,
		"INSTRUMENT_TYPE_SARRUSOPHONE":                  645,
		"INSTRUMENT_TYPE_SAXOPHONE":                     646,
		"INSTRUMENT_TYPE_SERPENT":                       647,
		"INSTRUMENT_TYPE_SHAKUHACHI":                    648,
		"INSTRUMENT_TYPE_SHAWM":                         649,
		"INSTRUMENT_TYPE_SHENAI":                        650,
		"INSTRUMENT_TYPE_SHELLTONE":                     651,
		"INSTRUMENT_TYPE_SHENG":                         652,
		"INSTRUMENT_TYPE_SHO":                           653,
		"INSTRUMENT_TYPE_SHOFAR":                        654,
		"INSTRUMENT_TYPE_SHRUTIBOX":                     655,
		"INSTRUMENT_TYPE_SHVIWHISTLE":                   656,
		"INSTRUMENT_TYPE_SIKU":                          657,
		"INSTRUMENT_TYPE_SLIDESAXOPHONE":                658,
		"INSTRUMENT_TYPE_SLIDETRUMPET":                  659,
		"INSTRUMENT_TYPE_SLIDEWHISTLE":                  660,
		"INSTRUMENT_TYPE_SOPRANINORECORDER":             661,
		"INSTRUMENT_TYPE_SOPRANINOSAXOPHONE":            662,
		"INSTRUMENT_TYPE_SOPRANOCLARINET":               663,
		"INSTRUMENT_TYPE_SOPRANOCORNET":                 664,
		"INSTRUMENT_TYPE_SOPRANOCRUMHORN":               665,
		"INSTRUMENT_TYPE_SOPRANODULCIAN":                666,
		"INSTRUMENT_TYPE_SOPRANORECORDER":               667,
		"INSTRUMENT_TYPE_SOPRANOSAXOPHONE":              668,
		"INSTRUMENT_TYPE_SOPRANOSHAWM":                  669,
		"INSTRUMENT_TYPE_SOPRANOTRUMPET":                670,
		"INSTRUMENT_TYPE_SORDUN":                        671,
		"INSTRUMENT_TYPE_SOUSAPHONE":                    672,
		"INSTRUMENT_TYPE_SULING":                        673,
		"INSTRUMENT_TYPE_SUONA":                         674,
		"INSTRUMENT_TYPE_TARKA":                         675,
		"INSTRUMENT_TYPE_TAROGATO":                      676,
		"INSTRUMENT_TYPE_TENORCRUMHORN":                 677,
		"INSTRUMENT_TYPE_TENORDULCIAN":                  678,
		"INSTRUMENT_TYPE_TENORFLUTE":                    679,
		"INSTRUMENT_TYPE_TENORRECORDER":                 680,
		"INSTRUMENT_TYPE_TENORSACKBUT":                  681,
		"INSTRUMENT_TYPE_TENORSAXOPHONE":                682,
		"INSTRUMENT_TYPE_TENORSHAWM":                    683,
		"INSTRUMENT_TYPE_TENORTROMBONE":                 684,
		"INSTRUMENT_TYPE_TINWHISTLE":                    685,
		"INSTRUMENT_TYPE_TROMBONE":                      686,
		"INSTRUMENT_TYPE_TRUMPET":                       687,
		"INSTRUMENT_TYPE_TUBA":                          688,
		"INSTRUMENT_TYPE_TUSSELFLOYTE":                  689,
		"INSTRUMENT_TYPE_UILLEANPIPES":                  690,
		"INSTRUMENT_TYPE_VALVETROMBONE":                 691,
		"INSTRUMENT_TYPE_VUVUZELA":                      692,
		"INSTRUMENT_TYPE_WAGNERTUBA":                    693,
		"INSTRUMENT_TYPE_WILLOWFLUTE":                   694,
		"INSTRUMENT_TYPE_WINDINSTRUMENT":                695,
		"INSTRUMENT_TYPE_WOODFLUTE":                     696,
		"INSTRUMENT_TYPE_WOODTRUMPET":                   697,
		"INSTRUMENT_TYPE_WOT":                           698,
		"INSTRUMENT_TYPE_XAPHOON":                       699,
		"INSTRUMENT_TYPE_XIAO":                          700,
		"INSTRUMENT_TYPE_XUN":                           701,
		"INSTRUMENT_TYPE_ZUMMARA":                       702,
		"INSTRUMENT_TYPE_ZURNA":                         703,
		"INSTRUMENT_TYPE_CHOIR":                         704,
		"INSTRUMENT_TYPE_PERCUSSIONSECTION":             705,
		"INSTRUMENT_TYPE_STRINGSECTION":                 706,
		"INSTRUMENT_TYPE_WINDSECTION":                   707,
		"INSTRUMENT_TYPE_USERDEFINED":                   708,
		"INSTRUMENT_TYPE_VOICE":                         709,
	}
)

func (x InstrumentType) Enum() *InstrumentType {
	p := new(InstrumentType)
	*p = x
	return p
}

func (x InstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[75].Descriptor()
}

func (InstrumentType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[75]
}

func (x InstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentType.Descriptor instead.
func (InstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{75}
}

type Iso639Part12LanguageCode int32

const (
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UNSPECIFIED Iso639Part12LanguageCode = 0
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AA          Iso639Part12LanguageCode = 1
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AAR         Iso639Part12LanguageCode = 2
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AB          Iso639Part12LanguageCode = 3
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ABK         Iso639Part12LanguageCode = 4
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AE          Iso639Part12LanguageCode = 5
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AVE         Iso639Part12LanguageCode = 6
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AF          Iso639Part12LanguageCode = 7
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AFR         Iso639Part12LanguageCode = 8
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AK          Iso639Part12LanguageCode = 9
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AKA         Iso639Part12LanguageCode = 10
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AM          Iso639Part12LanguageCode = 11
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AMH         Iso639Part12LanguageCode = 12
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AN          Iso639Part12LanguageCode = 13
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARG         Iso639Part12LanguageCode = 14
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AR          Iso639Part12LanguageCode = 15
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARA         Iso639Part12LanguageCode = 16
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AS          Iso639Part12LanguageCode = 17
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ASM         Iso639Part12LanguageCode = 18
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AV          Iso639Part12LanguageCode = 19
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AVA         Iso639Part12LanguageCode = 20
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AY          Iso639Part12LanguageCode = 21
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AYM         Iso639Part12LanguageCode = 22
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AZ          Iso639Part12LanguageCode = 23
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AZE         Iso639Part12LanguageCode = 24
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BA          Iso639Part12LanguageCode = 25
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAK         Iso639Part12LanguageCode = 26
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BE          Iso639Part12LanguageCode = 27
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BEL         Iso639Part12LanguageCode = 28
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BG          Iso639Part12LanguageCode = 29
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BUL         Iso639Part12LanguageCode = 30
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BH          Iso639Part12LanguageCode = 31
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BIH         Iso639Part12LanguageCode = 32
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BI          Iso639Part12LanguageCode = 33
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BIS         Iso639Part12LanguageCode = 34
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BM          Iso639Part12LanguageCode = 35
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAM         Iso639Part12LanguageCode = 36
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BN          Iso639Part12LanguageCode = 37
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BEN         Iso639Part12LanguageCode = 38
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BO          Iso639Part12LanguageCode = 39
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BOD         Iso639Part12LanguageCode = 40
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BR          Iso639Part12LanguageCode = 41
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BRE         Iso639Part12LanguageCode = 42
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BS          Iso639Part12LanguageCode = 43
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BOS         Iso639Part12LanguageCode = 44
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CA          Iso639Part12LanguageCode = 45
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAT         Iso639Part12LanguageCode = 46
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CE          Iso639Part12LanguageCode = 47
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHE         Iso639Part12LanguageCode = 48
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CH          Iso639Part12LanguageCode = 49
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHA         Iso639Part12LanguageCode = 50
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CO          Iso639Part12LanguageCode = 51
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_COS         Iso639Part12LanguageCode = 52
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CR          Iso639Part12LanguageCode = 53
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CRE         Iso639Part12LanguageCode = 54
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CS          Iso639Part12LanguageCode = 55
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CES         Iso639Part12LanguageCode = 56
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CU          Iso639Part12LanguageCode = 57
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHU         Iso639Part12LanguageCode = 58
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CV          Iso639Part12LanguageCode = 59
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHV         Iso639Part12LanguageCode = 60
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CY          Iso639Part12LanguageCode = 61
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CYM         Iso639Part12LanguageCode = 62
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DA          Iso639Part12LanguageCode = 63
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DAN         Iso639Part12LanguageCode = 64
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DE          Iso639Part12LanguageCode = 65
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DEU         Iso639Part12LanguageCode = 66
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DV          Iso639Part12LanguageCode = 67
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DIV         Iso639Part12LanguageCode = 68
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DZ          Iso639Part12LanguageCode = 69
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DZO         Iso639Part12LanguageCode = 70
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EE          Iso639Part12LanguageCode = 71
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EWE         Iso639Part12LanguageCode = 72
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EL          Iso639Part12LanguageCode = 73
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ELL         Iso639Part12LanguageCode = 74
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EN          Iso639Part12LanguageCode = 75
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ENG         Iso639Part12LanguageCode = 76
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EO          Iso639Part12LanguageCode = 77
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EPO         Iso639Part12LanguageCode = 78
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ES          Iso639Part12LanguageCode = 79
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SPA         Iso639Part12LanguageCode = 80
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ET          Iso639Part12LanguageCode = 81
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EST         Iso639Part12LanguageCode = 82
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EU          Iso639Part12LanguageCode = 83
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EUS         Iso639Part12LanguageCode = 84
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FA          Iso639Part12LanguageCode = 85
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FAS         Iso639Part12LanguageCode = 86
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FF          Iso639Part12LanguageCode = 87
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FUL         Iso639Part12LanguageCode = 88
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FI          Iso639Part12LanguageCode = 89
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FIN         Iso639Part12LanguageCode = 90
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FJ          Iso639Part12LanguageCode = 91
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FIJ         Iso639Part12LanguageCode = 92
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FO          Iso639Part12LanguageCode = 93
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FAO         Iso639Part12LanguageCode = 94
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FR          Iso639Part12LanguageCode = 95
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRA         Iso639Part12LanguageCode = 96
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FY          Iso639Part12LanguageCode = 97
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRY         Iso639Part12LanguageCode = 98
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GA          Iso639Part12LanguageCode = 99
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GLE         Iso639Part12LanguageCode = 100
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GD          Iso639Part12LanguageCode = 101
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GLA         Iso639Part12LanguageCode = 102
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GL          Iso639Part12LanguageCode = 103
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GLG         Iso639Part12LanguageCode = 104
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GN          Iso639Part12LanguageCode = 105
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GRN         Iso639Part12LanguageCode = 106
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GU          Iso639Part12LanguageCode = 107
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GUJ         Iso639Part12LanguageCode = 108
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GV          Iso639Part12LanguageCode = 109
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GLV         Iso639Part12LanguageCode = 110
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HA          Iso639Part12LanguageCode = 111
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HAU         Iso639Part12LanguageCode = 112
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HE          Iso639Part12LanguageCode = 113
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HEB         Iso639Part12LanguageCode = 114
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HI          Iso639Part12LanguageCode = 115
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HIN         Iso639Part12LanguageCode = 116
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HO          Iso639Part12LanguageCode = 117
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HMO         Iso639Part12LanguageCode = 118
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HR          Iso639Part12LanguageCode = 119
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HRV         Iso639Part12LanguageCode = 120
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HT          Iso639Part12LanguageCode = 121
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HAT         Iso639Part12LanguageCode = 122
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HU          Iso639Part12LanguageCode = 123
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HUN         Iso639Part12LanguageCode = 124
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HY          Iso639Part12LanguageCode = 125
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HYE         Iso639Part12LanguageCode = 126
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HZ          Iso639Part12LanguageCode = 127
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HER         Iso639Part12LanguageCode = 128
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IA          Iso639Part12LanguageCode = 129
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_INA         Iso639Part12LanguageCode = 130
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ID          Iso639Part12LanguageCode = 131
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IND         Iso639Part12LanguageCode = 132
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IE          Iso639Part12LanguageCode = 133
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ILE         Iso639Part12LanguageCode = 134
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IG          Iso639Part12LanguageCode = 135
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IBO         Iso639Part12LanguageCode = 136
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_II          Iso639Part12LanguageCode = 137
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_III         Iso639Part12LanguageCode = 138
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IK          Iso639Part12LanguageCode = 139
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IPK         Iso639Part12LanguageCode = 140
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IO          Iso639Part12LanguageCode = 141
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IDO         Iso639Part12LanguageCode = 142
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IS          Iso639Part12LanguageCode = 143
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ISL         Iso639Part12LanguageCode = 144
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IT          Iso639Part12LanguageCode = 145
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ITA         Iso639Part12LanguageCode = 146
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IU          Iso639Part12LanguageCode = 147
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IKU         Iso639Part12LanguageCode = 148
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JA          Iso639Part12LanguageCode = 149
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JPN         Iso639Part12LanguageCode = 150
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JV          Iso639Part12LanguageCode = 151
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JAV         Iso639Part12LanguageCode = 152
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KA          Iso639Part12LanguageCode = 153
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAT         Iso639Part12LanguageCode = 154
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KG          Iso639Part12LanguageCode = 155
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KON         Iso639Part12LanguageCode = 156
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KI          Iso639Part12LanguageCode = 157
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KIK         Iso639Part12LanguageCode = 158
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KJ          Iso639Part12LanguageCode = 159
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KUA         Iso639Part12LanguageCode = 160
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KK          Iso639Part12LanguageCode = 161
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAZ         Iso639Part12LanguageCode = 162
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KL          Iso639Part12LanguageCode = 163
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAL         Iso639Part12LanguageCode = 164
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KM          Iso639Part12LanguageCode = 165
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KHM         Iso639Part12LanguageCode = 166
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KN          Iso639Part12LanguageCode = 167
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAN         Iso639Part12LanguageCode = 168
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KO          Iso639Part12LanguageCode = 169
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KOR         Iso639Part12LanguageCode = 170
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KR          Iso639Part12LanguageCode = 171
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAU         Iso639Part12LanguageCode = 172
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KS          Iso639Part12LanguageCode = 173
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAS         Iso639Part12LanguageCode = 174
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KU          Iso639Part12LanguageCode = 175
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KUR         Iso639Part12LanguageCode = 176
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KV          Iso639Part12LanguageCode = 177
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KOM         Iso639Part12LanguageCode = 178
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KW          Iso639Part12LanguageCode = 179
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_COR         Iso639Part12LanguageCode = 180
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KY          Iso639Part12LanguageCode = 181
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KIR         Iso639Part12LanguageCode = 182
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LA          Iso639Part12LanguageCode = 183
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAT         Iso639Part12LanguageCode = 184
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LB          Iso639Part12LanguageCode = 185
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LTZ         Iso639Part12LanguageCode = 186
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LG          Iso639Part12LanguageCode = 187
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUG         Iso639Part12LanguageCode = 188
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LI          Iso639Part12LanguageCode = 189
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LIM         Iso639Part12LanguageCode = 190
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LN          Iso639Part12LanguageCode = 191
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LIN         Iso639Part12LanguageCode = 192
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LO          Iso639Part12LanguageCode = 193
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAO         Iso639Part12LanguageCode = 194
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LT          Iso639Part12LanguageCode = 195
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LIT         Iso639Part12LanguageCode = 196
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LU          Iso639Part12LanguageCode = 197
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUB         Iso639Part12LanguageCode = 198
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LV          Iso639Part12LanguageCode = 199
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAV         Iso639Part12LanguageCode = 200
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MG          Iso639Part12LanguageCode = 201
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MLG         Iso639Part12LanguageCode = 202
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MH          Iso639Part12LanguageCode = 203
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAH         Iso639Part12LanguageCode = 204
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MI          Iso639Part12LanguageCode = 205
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MRI         Iso639Part12LanguageCode = 206
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MK          Iso639Part12LanguageCode = 207
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MKD         Iso639Part12LanguageCode = 208
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ML          Iso639Part12LanguageCode = 209
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAL         Iso639Part12LanguageCode = 210
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MN          Iso639Part12LanguageCode = 211
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MON         Iso639Part12LanguageCode = 212
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MO          Iso639Part12LanguageCode = 213
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MR          Iso639Part12LanguageCode = 214
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAR         Iso639Part12LanguageCode = 215
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MS          Iso639Part12LanguageCode = 216
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MSA         Iso639Part12LanguageCode = 217
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MT          Iso639Part12LanguageCode = 218
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MLT         Iso639Part12LanguageCode = 219
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MY          Iso639Part12LanguageCode = 220
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MYA         Iso639Part12LanguageCode = 221
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NA          Iso639Part12LanguageCode = 222
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAU         Iso639Part12LanguageCode = 223
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NB          Iso639Part12LanguageCode = 224
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NOB         Iso639Part12LanguageCode = 225
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ND          Iso639Part12LanguageCode = 226
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NDE         Iso639Part12LanguageCode = 227
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NE          Iso639Part12LanguageCode = 228
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NEP         Iso639Part12LanguageCode = 229
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NG          Iso639Part12LanguageCode = 230
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NDO         Iso639Part12LanguageCode = 231
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NL          Iso639Part12LanguageCode = 232
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NLD         Iso639Part12LanguageCode = 233
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NN          Iso639Part12LanguageCode = 234
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NNO         Iso639Part12LanguageCode = 235
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NO          Iso639Part12LanguageCode = 236
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NOR         Iso639Part12LanguageCode = 237
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NR          Iso639Part12LanguageCode = 238
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NBL         Iso639Part12LanguageCode = 239
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NV          Iso639Part12LanguageCode = 240
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAV         Iso639Part12LanguageCode = 241
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NY          Iso639Part12LanguageCode = 242
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NYA         Iso639Part12LanguageCode = 243
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OC          Iso639Part12LanguageCode = 244
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OCI         Iso639Part12LanguageCode = 245
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OJ          Iso639Part12LanguageCode = 246
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OJI         Iso639Part12LanguageCode = 247
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OM          Iso639Part12LanguageCode = 248
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ORM         Iso639Part12LanguageCode = 249
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OR          Iso639Part12LanguageCode = 250
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ORI         Iso639Part12LanguageCode = 251
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OS          Iso639Part12LanguageCode = 252
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OSS         Iso639Part12LanguageCode = 253
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PA          Iso639Part12LanguageCode = 254
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAN         Iso639Part12LanguageCode = 255
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PI          Iso639Part12LanguageCode = 256
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PLI         Iso639Part12LanguageCode = 257
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PL          Iso639Part12LanguageCode = 258
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_POL         Iso639Part12LanguageCode = 259
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PS          Iso639Part12LanguageCode = 260
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PUS         Iso639Part12LanguageCode = 261
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PT          Iso639Part12LanguageCode = 262
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_POR         Iso639Part12LanguageCode = 263
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QU          Iso639Part12LanguageCode = 264
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QUE         Iso639Part12LanguageCode = 265
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RM          Iso639Part12LanguageCode = 266
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ROH         Iso639Part12LanguageCode = 267
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RN          Iso639Part12LanguageCode = 268
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RUN         Iso639Part12LanguageCode = 269
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RO          Iso639Part12LanguageCode = 270
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RON         Iso639Part12LanguageCode = 271
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RU          Iso639Part12LanguageCode = 272
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RUS         Iso639Part12LanguageCode = 273
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RW          Iso639Part12LanguageCode = 274
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KIN         Iso639Part12LanguageCode = 275
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SA          Iso639Part12LanguageCode = 276
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAN         Iso639Part12LanguageCode = 277
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SC          Iso639Part12LanguageCode = 278
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SRD         Iso639Part12LanguageCode = 279
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SD          Iso639Part12LanguageCode = 280
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SND         Iso639Part12LanguageCode = 281
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SE          Iso639Part12LanguageCode = 282
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SME         Iso639Part12LanguageCode = 283
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SG          Iso639Part12LanguageCode = 284
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAG         Iso639Part12LanguageCode = 285
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SI          Iso639Part12LanguageCode = 286
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SIN         Iso639Part12LanguageCode = 287
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SK          Iso639Part12LanguageCode = 288
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SLK         Iso639Part12LanguageCode = 289
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SL          Iso639Part12LanguageCode = 290
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SLV         Iso639Part12LanguageCode = 291
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SM          Iso639Part12LanguageCode = 292
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMO         Iso639Part12LanguageCode = 293
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SN          Iso639Part12LanguageCode = 294
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SNA         Iso639Part12LanguageCode = 295
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SO          Iso639Part12LanguageCode = 296
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SOM         Iso639Part12LanguageCode = 297
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SQ          Iso639Part12LanguageCode = 298
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SQI         Iso639Part12LanguageCode = 299
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SR          Iso639Part12LanguageCode = 300
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SRP         Iso639Part12LanguageCode = 301
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SS          Iso639Part12LanguageCode = 302
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SSW         Iso639Part12LanguageCode = 303
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ST          Iso639Part12LanguageCode = 304
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SOT         Iso639Part12LanguageCode = 305
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SU          Iso639Part12LanguageCode = 306
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SUN         Iso639Part12LanguageCode = 307
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SV          Iso639Part12LanguageCode = 308
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SWE         Iso639Part12LanguageCode = 309
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SW          Iso639Part12LanguageCode = 310
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SWA         Iso639Part12LanguageCode = 311
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TA          Iso639Part12LanguageCode = 312
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TAM         Iso639Part12LanguageCode = 313
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TE          Iso639Part12LanguageCode = 314
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TEL         Iso639Part12LanguageCode = 315
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TG          Iso639Part12LanguageCode = 316
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TGK         Iso639Part12LanguageCode = 317
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TH          Iso639Part12LanguageCode = 318
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_THA         Iso639Part12LanguageCode = 319
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TI          Iso639Part12LanguageCode = 320
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TIR         Iso639Part12LanguageCode = 321
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TK          Iso639Part12LanguageCode = 322
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUK         Iso639Part12LanguageCode = 323
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TL          Iso639Part12LanguageCode = 324
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TGL         Iso639Part12LanguageCode = 325
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TN          Iso639Part12LanguageCode = 326
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TSN         Iso639Part12LanguageCode = 327
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TO          Iso639Part12LanguageCode = 328
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TON         Iso639Part12LanguageCode = 329
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TR          Iso639Part12LanguageCode = 330
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUR         Iso639Part12LanguageCode = 331
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TS          Iso639Part12LanguageCode = 332
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TSO         Iso639Part12LanguageCode = 333
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TT          Iso639Part12LanguageCode = 334
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TAT         Iso639Part12LanguageCode = 335
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TW          Iso639Part12LanguageCode = 336
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TWI         Iso639Part12LanguageCode = 337
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TY          Iso639Part12LanguageCode = 338
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TAH         Iso639Part12LanguageCode = 339
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UG          Iso639Part12LanguageCode = 340
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UIG         Iso639Part12LanguageCode = 341
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UK          Iso639Part12LanguageCode = 342
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UKR         Iso639Part12LanguageCode = 343
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UR          Iso639Part12LanguageCode = 344
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_URD         Iso639Part12LanguageCode = 345
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UZ          Iso639Part12LanguageCode = 346
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UZB         Iso639Part12LanguageCode = 347
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VE          Iso639Part12LanguageCode = 348
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VEN         Iso639Part12LanguageCode = 349
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VI          Iso639Part12LanguageCode = 350
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VIE         Iso639Part12LanguageCode = 351
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VO          Iso639Part12LanguageCode = 352
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VOL         Iso639Part12LanguageCode = 353
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WA          Iso639Part12LanguageCode = 354
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WLN         Iso639Part12LanguageCode = 355
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WO          Iso639Part12LanguageCode = 356
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WOL         Iso639Part12LanguageCode = 357
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_XH          Iso639Part12LanguageCode = 358
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_XHO         Iso639Part12LanguageCode = 359
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YI          Iso639Part12LanguageCode = 360
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YID         Iso639Part12LanguageCode = 361
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YO          Iso639Part12LanguageCode = 362
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YOR         Iso639Part12LanguageCode = 363
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZA          Iso639Part12LanguageCode = 364
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZHA         Iso639Part12LanguageCode = 365
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZH          Iso639Part12LanguageCode = 366
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZHO         Iso639Part12LanguageCode = 367
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZU          Iso639Part12LanguageCode = 368
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZUL         Iso639Part12LanguageCode = 369
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ACE         Iso639Part12LanguageCode = 370
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ACH         Iso639Part12LanguageCode = 371
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ADA         Iso639Part12LanguageCode = 372
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ADY         Iso639Part12LanguageCode = 373
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AFA         Iso639Part12LanguageCode = 374
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AFH         Iso639Part12LanguageCode = 375
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AIN         Iso639Part12LanguageCode = 376
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AKK         Iso639Part12LanguageCode = 377
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ALE         Iso639Part12LanguageCode = 378
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ALG         Iso639Part12LanguageCode = 379
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ALT         Iso639Part12LanguageCode = 380
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ANG         Iso639Part12LanguageCode = 381
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ANP         Iso639Part12LanguageCode = 382
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_APA         Iso639Part12LanguageCode = 383
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARC         Iso639Part12LanguageCode = 384
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARN         Iso639Part12LanguageCode = 385
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARP         Iso639Part12LanguageCode = 386
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ART         Iso639Part12LanguageCode = 387
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARW         Iso639Part12LanguageCode = 388
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AST         Iso639Part12LanguageCode = 389
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ATH         Iso639Part12LanguageCode = 390
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AUS         Iso639Part12LanguageCode = 391
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AWA         Iso639Part12LanguageCode = 392
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAD         Iso639Part12LanguageCode = 393
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAI         Iso639Part12LanguageCode = 394
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAL         Iso639Part12LanguageCode = 395
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAN         Iso639Part12LanguageCode = 396
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAS         Iso639Part12LanguageCode = 397
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAT         Iso639Part12LanguageCode = 398
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BEJ         Iso639Part12LanguageCode = 399
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BEM         Iso639Part12LanguageCode = 400
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BER         Iso639Part12LanguageCode = 401
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BGC         Iso639Part12LanguageCode = 402
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BHO         Iso639Part12LanguageCode = 403
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BIK         Iso639Part12LanguageCode = 404
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BIN         Iso639Part12LanguageCode = 405
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BLA         Iso639Part12LanguageCode = 406
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BNT         Iso639Part12LanguageCode = 407
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BRA         Iso639Part12LanguageCode = 408
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BTK         Iso639Part12LanguageCode = 409
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BUA         Iso639Part12LanguageCode = 410
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BUG         Iso639Part12LanguageCode = 411
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BYN         Iso639Part12LanguageCode = 412
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAD         Iso639Part12LanguageCode = 413
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAI         Iso639Part12LanguageCode = 414
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAR         Iso639Part12LanguageCode = 415
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAU         Iso639Part12LanguageCode = 416
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CEB         Iso639Part12LanguageCode = 417
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CEL         Iso639Part12LanguageCode = 418
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHB         Iso639Part12LanguageCode = 419
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHG         Iso639Part12LanguageCode = 420
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHK         Iso639Part12LanguageCode = 421
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHM         Iso639Part12LanguageCode = 422
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHN         Iso639Part12LanguageCode = 423
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHO         Iso639Part12LanguageCode = 424
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHP         Iso639Part12LanguageCode = 425
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHR         Iso639Part12LanguageCode = 426
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHY         Iso639Part12LanguageCode = 427
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CMC         Iso639Part12LanguageCode = 428
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CNR         Iso639Part12LanguageCode = 429
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_COP         Iso639Part12LanguageCode = 430
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CPE         Iso639Part12LanguageCode = 431
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CPF         Iso639Part12LanguageCode = 432
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CPP         Iso639Part12LanguageCode = 433
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CRH         Iso639Part12LanguageCode = 434
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CRP         Iso639Part12LanguageCode = 435
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CSB         Iso639Part12LanguageCode = 436
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CUS         Iso639Part12LanguageCode = 437
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DAK         Iso639Part12LanguageCode = 438
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DAR         Iso639Part12LanguageCode = 439
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DAY         Iso639Part12LanguageCode = 440
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DEL         Iso639Part12LanguageCode = 441
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DEN         Iso639Part12LanguageCode = 442
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DGR         Iso639Part12LanguageCode = 443
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DIN         Iso639Part12LanguageCode = 444
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DOI         Iso639Part12LanguageCode = 445
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DRA         Iso639Part12LanguageCode = 446
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DSB         Iso639Part12LanguageCode = 447
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DUA         Iso639Part12LanguageCode = 448
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DUM         Iso639Part12LanguageCode = 449
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DYU         Iso639Part12LanguageCode = 450
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EFI         Iso639Part12LanguageCode = 451
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EGY         Iso639Part12LanguageCode = 452
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EKA         Iso639Part12LanguageCode = 453
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ELX         Iso639Part12LanguageCode = 454
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ENM         Iso639Part12LanguageCode = 455
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EWO         Iso639Part12LanguageCode = 456
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FAN         Iso639Part12LanguageCode = 457
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FAT         Iso639Part12LanguageCode = 458
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FIL         Iso639Part12LanguageCode = 459
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FIU         Iso639Part12LanguageCode = 460
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FON         Iso639Part12LanguageCode = 461
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRM         Iso639Part12LanguageCode = 462
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRO         Iso639Part12LanguageCode = 463
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRR         Iso639Part12LanguageCode = 464
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRS         Iso639Part12LanguageCode = 465
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FUR         Iso639Part12LanguageCode = 466
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GAA         Iso639Part12LanguageCode = 467
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GAY         Iso639Part12LanguageCode = 468
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GBA         Iso639Part12LanguageCode = 469
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GEM         Iso639Part12LanguageCode = 470
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GEZ         Iso639Part12LanguageCode = 471
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GIL         Iso639Part12LanguageCode = 472
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GMH         Iso639Part12LanguageCode = 473
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GOH         Iso639Part12LanguageCode = 474
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GON         Iso639Part12LanguageCode = 475
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GOR         Iso639Part12LanguageCode = 476
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GOT         Iso639Part12LanguageCode = 477
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GRB         Iso639Part12LanguageCode = 478
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GRC         Iso639Part12LanguageCode = 479
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GSW         Iso639Part12LanguageCode = 480
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GWI         Iso639Part12LanguageCode = 481
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HAI         Iso639Part12LanguageCode = 482
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HAW         Iso639Part12LanguageCode = 483
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HIL         Iso639Part12LanguageCode = 484
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HIM         Iso639Part12LanguageCode = 485
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HIT         Iso639Part12LanguageCode = 486
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HMN         Iso639Part12LanguageCode = 487
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HSB         Iso639Part12LanguageCode = 488
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HUP         Iso639Part12LanguageCode = 489
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IBA         Iso639Part12LanguageCode = 490
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IJO         Iso639Part12LanguageCode = 491
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ILO         Iso639Part12LanguageCode = 492
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_INC         Iso639Part12LanguageCode = 493
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_INE         Iso639Part12LanguageCode = 494
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_INH         Iso639Part12LanguageCode = 495
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IRA         Iso639Part12LanguageCode = 496
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IRO         Iso639Part12LanguageCode = 497
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JBO         Iso639Part12LanguageCode = 498
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JPR         Iso639Part12LanguageCode = 499
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JRB         Iso639Part12LanguageCode = 500
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAA         Iso639Part12LanguageCode = 501
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAB         Iso639Part12LanguageCode = 502
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAC         Iso639Part12LanguageCode = 503
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAM         Iso639Part12LanguageCode = 504
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAR         Iso639Part12LanguageCode = 505
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAW         Iso639Part12LanguageCode = 506
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KBD         Iso639Part12LanguageCode = 507
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KHA         Iso639Part12LanguageCode = 508
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KHI         Iso639Part12LanguageCode = 509
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KHO         Iso639Part12LanguageCode = 510
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KMB         Iso639Part12LanguageCode = 511
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KOK         Iso639Part12LanguageCode = 512
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KOS         Iso639Part12LanguageCode = 513
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KPE         Iso639Part12LanguageCode = 514
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KRC         Iso639Part12LanguageCode = 515
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KRL         Iso639Part12LanguageCode = 516
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KRO         Iso639Part12LanguageCode = 517
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KRU         Iso639Part12LanguageCode = 518
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KUM         Iso639Part12LanguageCode = 519
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KUT         Iso639Part12LanguageCode = 520
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAD         Iso639Part12LanguageCode = 521
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAH         Iso639Part12LanguageCode = 522
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAM         Iso639Part12LanguageCode = 523
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LEZ         Iso639Part12LanguageCode = 524
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LOL         Iso639Part12LanguageCode = 525
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LOZ         Iso639Part12LanguageCode = 526
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUA         Iso639Part12LanguageCode = 527
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUI         Iso639Part12LanguageCode = 528
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUN         Iso639Part12LanguageCode = 529
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUO         Iso639Part12LanguageCode = 530
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUS         Iso639Part12LanguageCode = 531
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAD         Iso639Part12LanguageCode = 532
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAG         Iso639Part12LanguageCode = 533
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAI         Iso639Part12LanguageCode = 534
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAK         Iso639Part12LanguageCode = 535
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAN         Iso639Part12LanguageCode = 536
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAP         Iso639Part12LanguageCode = 537
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAS         Iso639Part12LanguageCode = 538
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MDF         Iso639Part12LanguageCode = 539
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MDR         Iso639Part12LanguageCode = 540
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MEN         Iso639Part12LanguageCode = 541
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MGA         Iso639Part12LanguageCode = 542
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MIC         Iso639Part12LanguageCode = 543
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MIN         Iso639Part12LanguageCode = 544
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MIS         Iso639Part12LanguageCode = 545
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MKH         Iso639Part12LanguageCode = 546
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MNC         Iso639Part12LanguageCode = 547
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MNI         Iso639Part12LanguageCode = 548
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MNO         Iso639Part12LanguageCode = 549
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MOH         Iso639Part12LanguageCode = 550
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MOS         Iso639Part12LanguageCode = 551
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MUL         Iso639Part12LanguageCode = 552
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MUN         Iso639Part12LanguageCode = 553
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MUS         Iso639Part12LanguageCode = 554
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MWL         Iso639Part12LanguageCode = 555
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MWR         Iso639Part12LanguageCode = 556
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MYN         Iso639Part12LanguageCode = 557
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MYV         Iso639Part12LanguageCode = 558
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAH         Iso639Part12LanguageCode = 559
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAI         Iso639Part12LanguageCode = 560
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAP         Iso639Part12LanguageCode = 561
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NDS         Iso639Part12LanguageCode = 562
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NEW         Iso639Part12LanguageCode = 563
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NIA         Iso639Part12LanguageCode = 564
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NIC         Iso639Part12LanguageCode = 565
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NIU         Iso639Part12LanguageCode = 566
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NOG         Iso639Part12LanguageCode = 567
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NON         Iso639Part12LanguageCode = 568
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NQO         Iso639Part12LanguageCode = 569
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NSO         Iso639Part12LanguageCode = 570
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NUB         Iso639Part12LanguageCode = 571
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NWC         Iso639Part12LanguageCode = 572
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NYM         Iso639Part12LanguageCode = 573
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NYN         Iso639Part12LanguageCode = 574
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NYO         Iso639Part12LanguageCode = 575
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NZI         Iso639Part12LanguageCode = 576
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OSA         Iso639Part12LanguageCode = 577
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OTA         Iso639Part12LanguageCode = 578
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OTO         Iso639Part12LanguageCode = 579
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAA         Iso639Part12LanguageCode = 580
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAG         Iso639Part12LanguageCode = 581
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAL         Iso639Part12LanguageCode = 582
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAM         Iso639Part12LanguageCode = 583
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAP         Iso639Part12LanguageCode = 584
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAU         Iso639Part12LanguageCode = 585
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PEO         Iso639Part12LanguageCode = 586
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PHI         Iso639Part12LanguageCode = 587
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PHN         Iso639Part12LanguageCode = 588
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PON         Iso639Part12LanguageCode = 589
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PRA         Iso639Part12LanguageCode = 590
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PRO         Iso639Part12LanguageCode = 591
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQA         Iso639Part12LanguageCode = 592
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQB         Iso639Part12LanguageCode = 593
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQC         Iso639Part12LanguageCode = 594
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQD         Iso639Part12LanguageCode = 595
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQE         Iso639Part12LanguageCode = 596
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQF         Iso639Part12LanguageCode = 597
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQG         Iso639Part12LanguageCode = 598
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQH         Iso639Part12LanguageCode = 599
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQI         Iso639Part12LanguageCode = 600
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQJ         Iso639Part12LanguageCode = 601
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RAJ         Iso639Part12LanguageCode = 602
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RAP         Iso639Part12LanguageCode = 603
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RAR         Iso639Part12LanguageCode = 604
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ROA         Iso639Part12LanguageCode = 605
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ROM         Iso639Part12LanguageCode = 606
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RUP         Iso639Part12LanguageCode = 607
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAD         Iso639Part12LanguageCode = 608
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAH         Iso639Part12LanguageCode = 609
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAI         Iso639Part12LanguageCode = 610
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAL         Iso639Part12LanguageCode = 611
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAM         Iso639Part12LanguageCode = 612
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAS         Iso639Part12LanguageCode = 613
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAT         Iso639Part12LanguageCode = 614
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SCN         Iso639Part12LanguageCode = 615
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SCO         Iso639Part12LanguageCode = 616
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SEL         Iso639Part12LanguageCode = 617
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SEM         Iso639Part12LanguageCode = 618
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SGA         Iso639Part12LanguageCode = 619
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SGN         Iso639Part12LanguageCode = 620
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SHN         Iso639Part12LanguageCode = 621
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SID         Iso639Part12LanguageCode = 622
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SIO         Iso639Part12LanguageCode = 623
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SIT         Iso639Part12LanguageCode = 624
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SLA         Iso639Part12LanguageCode = 625
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMA         Iso639Part12LanguageCode = 626
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMI         Iso639Part12LanguageCode = 627
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMJ         Iso639Part12LanguageCode = 628
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMN         Iso639Part12LanguageCode = 629
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMS         Iso639Part12LanguageCode = 630
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SNK         Iso639Part12LanguageCode = 631
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SOG         Iso639Part12LanguageCode = 632
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SON         Iso639Part12LanguageCode = 633
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SRN         Iso639Part12LanguageCode = 634
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SRR         Iso639Part12LanguageCode = 635
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SSA         Iso639Part12LanguageCode = 636
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SUK         Iso639Part12LanguageCode = 637
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SUS         Iso639Part12LanguageCode = 638
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SUX         Iso639Part12LanguageCode = 639
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SYC         Iso639Part12LanguageCode = 640
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SYR         Iso639Part12LanguageCode = 641
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TAI         Iso639Part12LanguageCode = 642
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TEM         Iso639Part12LanguageCode = 643
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TER         Iso639Part12LanguageCode = 644
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TET         Iso639Part12LanguageCode = 645
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TIG         Iso639Part12LanguageCode = 646
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TIV         Iso639Part12LanguageCode = 647
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TKL         Iso639Part12LanguageCode = 648
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TLH         Iso639Part12LanguageCode = 649
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TLI         Iso639Part12LanguageCode = 650
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TMH         Iso639Part12LanguageCode = 651
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TOG         Iso639Part12LanguageCode = 652
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TPI         Iso639Part12LanguageCode = 653
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TSI         Iso639Part12LanguageCode = 654
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUM         Iso639Part12LanguageCode = 655
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUP         Iso639Part12LanguageCode = 656
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUT         Iso639Part12LanguageCode = 657
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TVL         Iso639Part12LanguageCode = 658
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TYV         Iso639Part12LanguageCode = 659
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UDM         Iso639Part12LanguageCode = 660
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UGA         Iso639Part12LanguageCode = 661
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UMB         Iso639Part12LanguageCode = 662
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UND         Iso639Part12LanguageCode = 663
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VAI         Iso639Part12LanguageCode = 664
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VOT         Iso639Part12LanguageCode = 665
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WAK         Iso639Part12LanguageCode = 666
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WAL         Iso639Part12LanguageCode = 667
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WAR         Iso639Part12LanguageCode = 668
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WAS         Iso639Part12LanguageCode = 669
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WEN         Iso639Part12LanguageCode = 670
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_XAL         Iso639Part12LanguageCode = 671
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YAO         Iso639Part12LanguageCode = 672
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YAP         Iso639Part12LanguageCode = 673
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YPK         Iso639Part12LanguageCode = 674
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZAP         Iso639Part12LanguageCode = 675
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZBL         Iso639Part12LanguageCode = 676
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZEN         Iso639Part12LanguageCode = 677
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZGH         Iso639Part12LanguageCode = 678
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZND         Iso639Part12LanguageCode = 679
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZUN         Iso639Part12LanguageCode = 680
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZXX         Iso639Part12LanguageCode = 681
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZZA         Iso639Part12LanguageCode = 682
)

// Enum value maps for Iso639Part12LanguageCode.
var (
	Iso639Part12LanguageCode_name = map[int32]string{
		0:   "ISO639_PART12_LANGUAGE_CODE_UNSPECIFIED",
		1:   "ISO639_PART12_LANGUAGE_CODE_AA",
		2:   "ISO639_PART12_LANGUAGE_CODE_AAR",
		3:   "ISO639_PART12_LANGUAGE_CODE_AB",
		4:   "ISO639_PART12_LANGUAGE_CODE_ABK",
		5:   "ISO639_PART12_LANGUAGE_CODE_AE",
		6:   "ISO639_PART12_LANGUAGE_CODE_AVE",
		7:   "ISO639_PART12_LANGUAGE_CODE_AF",
		8:   "ISO639_PART12_LANGUAGE_CODE_AFR",
		9:   "ISO639_PART12_LANGUAGE_CODE_AK",
		10:  "ISO639_PART12_LANGUAGE_CODE_AKA",
		11:  "ISO639_PART12_LANGUAGE_CODE_AM",
		12:  "ISO639_PART12_LANGUAGE_CODE_AMH",
		13:  "ISO639_PART12_LANGUAGE_CODE_AN",
		14:  "ISO639_PART12_LANGUAGE_CODE_ARG",
		15:  "ISO639_PART12_LANGUAGE_CODE_AR",
		16:  "ISO639_PART12_LANGUAGE_CODE_ARA",
		17:  "ISO639_PART12_LANGUAGE_CODE_AS",
		18:  "ISO639_PART12_LANGUAGE_CODE_ASM",
		19:  "ISO639_PART12_LANGUAGE_CODE_AV",
		20:  "ISO639_PART12_LANGUAGE_CODE_AVA",
		21:  "ISO639_PART12_LANGUAGE_CODE_AY",
		22:  "ISO639_PART12_LANGUAGE_CODE_AYM",
		23:  "ISO639_PART12_LANGUAGE_CODE_AZ",
		24:  "ISO639_PART12_LANGUAGE_CODE_AZE",
		25:  "ISO639_PART12_LANGUAGE_CODE_BA",
		26:  "ISO639_PART12_LANGUAGE_CODE_BAK",
		27:  "ISO639_PART12_LANGUAGE_CODE_BE",
		28:  "ISO639_PART12_LANGUAGE_CODE_BEL",
		29:  "ISO639_PART12_LANGUAGE_CODE_BG",
		30:  "ISO639_PART12_LANGUAGE_CODE_BUL",
		31:  "ISO639_PART12_LANGUAGE_CODE_BH",
		32:  "ISO639_PART12_LANGUAGE_CODE_BIH",
		33:  "ISO639_PART12_LANGUAGE_CODE_BI",
		34:  "ISO639_PART12_LANGUAGE_CODE_BIS",
		35:  "ISO639_PART12_LANGUAGE_CODE_BM",
		36:  "ISO639_PART12_LANGUAGE_CODE_BAM",
		37:  "ISO639_PART12_LANGUAGE_CODE_BN",
		38:  "ISO639_PART12_LANGUAGE_CODE_BEN",
		39:  "ISO639_PART12_LANGUAGE_CODE_BO",
		40:  "ISO639_PART12_LANGUAGE_CODE_BOD",
		41:  "ISO639_PART12_LANGUAGE_CODE_BR",
		42:  "ISO639_PART12_LANGUAGE_CODE_BRE",
		43:  "ISO639_PART12_LANGUAGE_CODE_BS",
		44:  "ISO639_PART12_LANGUAGE_CODE_BOS",
		45:  "ISO639_PART12_LANGUAGE_CODE_CA",
		46:  "ISO639_PART12_LANGUAGE_CODE_CAT",
		47:  "ISO639_PART12_LANGUAGE_CODE_CE",
		48:  "ISO639_PART12_LANGUAGE_CODE_CHE",
		49:  "ISO639_PART12_LANGUAGE_CODE_CH",
		50:  "ISO639_PART12_LANGUAGE_CODE_CHA",
		51:  "ISO639_PART12_LANGUAGE_CODE_CO",
		52:  "ISO639_PART12_LANGUAGE_CODE_COS",
		53:  "ISO639_PART12_LANGUAGE_CODE_CR",
		54:  "ISO639_PART12_LANGUAGE_CODE_CRE",
		55:  "ISO639_PART12_LANGUAGE_CODE_CS",
		56:  "ISO639_PART12_LANGUAGE_CODE_CES",
		57:  "ISO639_PART12_LANGUAGE_CODE_CU",
		58:  "ISO639_PART12_LANGUAGE_CODE_CHU",
		59:  "ISO639_PART12_LANGUAGE_CODE_CV",
		60:  "ISO639_PART12_LANGUAGE_CODE_CHV",
		61:  "ISO639_PART12_LANGUAGE_CODE_CY",
		62:  "ISO639_PART12_LANGUAGE_CODE_CYM",
		63:  "ISO639_PART12_LANGUAGE_CODE_DA",
		64:  "ISO639_PART12_LANGUAGE_CODE_DAN",
		65:  "ISO639_PART12_LANGUAGE_CODE_DE",
		66:  "ISO639_PART12_LANGUAGE_CODE_DEU",
		67:  "ISO639_PART12_LANGUAGE_CODE_DV",
		68:  "ISO639_PART12_LANGUAGE_CODE_DIV",
		69:  "ISO639_PART12_LANGUAGE_CODE_DZ",
		70:  "ISO639_PART12_LANGUAGE_CODE_DZO",
		71:  "ISO639_PART12_LANGUAGE_CODE_EE",
		72:  "ISO639_PART12_LANGUAGE_CODE_EWE",
		73:  "ISO639_PART12_LANGUAGE_CODE_EL",
		74:  "ISO639_PART12_LANGUAGE_CODE_ELL",
		75:  "ISO639_PART12_LANGUAGE_CODE_EN",
		76:  "ISO639_PART12_LANGUAGE_CODE_ENG",
		77:  "ISO639_PART12_LANGUAGE_CODE_EO",
		78:  "ISO639_PART12_LANGUAGE_CODE_EPO",
		79:  "ISO639_PART12_LANGUAGE_CODE_ES",
		80:  "ISO639_PART12_LANGUAGE_CODE_SPA",
		81:  "ISO639_PART12_LANGUAGE_CODE_ET",
		82:  "ISO639_PART12_LANGUAGE_CODE_EST",
		83:  "ISO639_PART12_LANGUAGE_CODE_EU",
		84:  "ISO639_PART12_LANGUAGE_CODE_EUS",
		85:  "ISO639_PART12_LANGUAGE_CODE_FA",
		86:  "ISO639_PART12_LANGUAGE_CODE_FAS",
		87:  "ISO639_PART12_LANGUAGE_CODE_FF",
		88:  "ISO639_PART12_LANGUAGE_CODE_FUL",
		89:  "ISO639_PART12_LANGUAGE_CODE_FI",
		90:  "ISO639_PART12_LANGUAGE_CODE_FIN",
		91:  "ISO639_PART12_LANGUAGE_CODE_FJ",
		92:  "ISO639_PART12_LANGUAGE_CODE_FIJ",
		93:  "ISO639_PART12_LANGUAGE_CODE_FO",
		94:  "ISO639_PART12_LANGUAGE_CODE_FAO",
		95:  "ISO639_PART12_LANGUAGE_CODE_FR",
		96:  "ISO639_PART12_LANGUAGE_CODE_FRA",
		97:  "ISO639_PART12_LANGUAGE_CODE_FY",
		98:  "ISO639_PART12_LANGUAGE_CODE_FRY",
		99:  "ISO639_PART12_LANGUAGE_CODE_GA",
		100: "ISO639_PART12_LANGUAGE_CODE_GLE",
		101: "ISO639_PART12_LANGUAGE_CODE_GD",
		102: "ISO639_PART12_LANGUAGE_CODE_GLA",
		103: "ISO639_PART12_LANGUAGE_CODE_GL",
		104: "ISO639_PART12_LANGUAGE_CODE_GLG",
		105: "ISO639_PART12_LANGUAGE_CODE_GN",
		106: "ISO639_PART12_LANGUAGE_CODE_GRN",
		107: "ISO639_PART12_LANGUAGE_CODE_GU",
		108: "ISO639_PART12_LANGUAGE_CODE_GUJ",
		109: "ISO639_PART12_LANGUAGE_CODE_GV",
		110: "ISO639_PART12_LANGUAGE_CODE_GLV",
		111: "ISO639_PART12_LANGUAGE_CODE_HA",
		112: "ISO639_PART12_LANGUAGE_CODE_HAU",
		113: "ISO639_PART12_LANGUAGE_CODE_HE",
		114: "ISO639_PART12_LANGUAGE_CODE_HEB",
		115: "ISO639_PART12_LANGUAGE_CODE_HI",
		116: "ISO639_PART12_LANGUAGE_CODE_HIN",
		117: "ISO639_PART12_LANGUAGE_CODE_HO",
		118: "ISO639_PART12_LANGUAGE_CODE_HMO",
		119: "ISO639_PART12_LANGUAGE_CODE_HR",
		120: "ISO639_PART12_LANGUAGE_CODE_HRV",
		121: "ISO639_PART12_LANGUAGE_CODE_HT",
		122: "ISO639_PART12_LANGUAGE_CODE_HAT",
		123: "ISO639_PART12_LANGUAGE_CODE_HU",
		124: "ISO639_PART12_LANGUAGE_CODE_HUN",
		125: "ISO639_PART12_LANGUAGE_CODE_HY",
		126: "ISO639_PART12_LANGUAGE_CODE_HYE",
		127: "ISO639_PART12_LANGUAGE_CODE_HZ",
		128: "ISO639_PART12_LANGUAGE_CODE_HER",
		129: "ISO639_PART12_LANGUAGE_CODE_IA",
		130: "ISO639_PART12_LANGUAGE_CODE_INA",
		131: "ISO639_PART12_LANGUAGE_CODE_ID",
		132: "ISO639_PART12_LANGUAGE_CODE_IND",
		133: "ISO639_PART12_LANGUAGE_CODE_IE",
		134: "ISO639_PART12_LANGUAGE_CODE_ILE",
		135: "ISO639_PART12_LANGUAGE_CODE_IG",
		136: "ISO639_PART12_LANGUAGE_CODE_IBO",
		137: "ISO639_PART12_LANGUAGE_CODE_II",
		138: "ISO639_PART12_LANGUAGE_CODE_III",
		139: "ISO639_PART12_LANGUAGE_CODE_IK",
		140: "ISO639_PART12_LANGUAGE_CODE_IPK",
		141: "ISO639_PART12_LANGUAGE_CODE_IO",
		142: "ISO639_PART12_LANGUAGE_CODE_IDO",
		143: "ISO639_PART12_LANGUAGE_CODE_IS",
		144: "ISO639_PART12_LANGUAGE_CODE_ISL",
		145: "ISO639_PART12_LANGUAGE_CODE_IT",
		146: "ISO639_PART12_LANGUAGE_CODE_ITA",
		147: "ISO639_PART12_LANGUAGE_CODE_IU",
		148: "ISO639_PART12_LANGUAGE_CODE_IKU",
		149: "ISO639_PART12_LANGUAGE_CODE_JA",
		150: "ISO639_PART12_LANGUAGE_CODE_JPN",
		151: "ISO639_PART12_LANGUAGE_CODE_JV",
		152: "ISO639_PART12_LANGUAGE_CODE_JAV",
		153: "ISO639_PART12_LANGUAGE_CODE_KA",
		154: "ISO639_PART12_LANGUAGE_CODE_KAT",
		155: "ISO639_PART12_LANGUAGE_CODE_KG",
		156: "ISO639_PART12_LANGUAGE_CODE_KON",
		157: "ISO639_PART12_LANGUAGE_CODE_KI",
		158: "ISO639_PART12_LANGUAGE_CODE_KIK",
		159: "ISO639_PART12_LANGUAGE_CODE_KJ",
		160: "ISO639_PART12_LANGUAGE_CODE_KUA",
		161: "ISO639_PART12_LANGUAGE_CODE_KK",
		162: "ISO639_PART12_LANGUAGE_CODE_KAZ",
		163: "ISO639_PART12_LANGUAGE_CODE_KL",
		164: "ISO639_PART12_LANGUAGE_CODE_KAL",
		165: "ISO639_PART12_LANGUAGE_CODE_KM",
		166: "ISO639_PART12_LANGUAGE_CODE_KHM",
		167: "ISO639_PART12_LANGUAGE_CODE_KN",
		168: "ISO639_PART12_LANGUAGE_CODE_KAN",
		169: "ISO639_PART12_LANGUAGE_CODE_KO",
		170: "ISO639_PART12_LANGUAGE_CODE_KOR",
		171: "ISO639_PART12_LANGUAGE_CODE_KR",
		172: "ISO639_PART12_LANGUAGE_CODE_KAU",
		173: "ISO639_PART12_LANGUAGE_CODE_KS",
		174: "ISO639_PART12_LANGUAGE_CODE_KAS",
		175: "ISO639_PART12_LANGUAGE_CODE_KU",
		176: "ISO639_PART12_LANGUAGE_CODE_KUR",
		177: "ISO639_PART12_LANGUAGE_CODE_KV",
		178: "ISO639_PART12_LANGUAGE_CODE_KOM",
		179: "ISO639_PART12_LANGUAGE_CODE_KW",
		180: "ISO639_PART12_LANGUAGE_CODE_COR",
		181: "ISO639_PART12_LANGUAGE_CODE_KY",
		182: "ISO639_PART12_LANGUAGE_CODE_KIR",
		183: "ISO639_PART12_LANGUAGE_CODE_LA",
		184: "ISO639_PART12_LANGUAGE_CODE_LAT",
		185: "ISO639_PART12_LANGUAGE_CODE_LB",
		186: "ISO639_PART12_LANGUAGE_CODE_LTZ",
		187: "ISO639_PART12_LANGUAGE_CODE_LG",
		188: "ISO639_PART12_LANGUAGE_CODE_LUG",
		189: "ISO639_PART12_LANGUAGE_CODE_LI",
		190: "ISO639_PART12_LANGUAGE_CODE_LIM",
		191: "ISO639_PART12_LANGUAGE_CODE_LN",
		192: "ISO639_PART12_LANGUAGE_CODE_LIN",
		193: "ISO639_PART12_LANGUAGE_CODE_LO",
		194: "ISO639_PART12_LANGUAGE_CODE_LAO",
		195: "ISO639_PART12_LANGUAGE_CODE_LT",
		196: "ISO639_PART12_LANGUAGE_CODE_LIT",
		197: "ISO639_PART12_LANGUAGE_CODE_LU",
		198: "ISO639_PART12_LANGUAGE_CODE_LUB",
		199: "ISO639_PART12_LANGUAGE_CODE_LV",
		200: "ISO639_PART12_LANGUAGE_CODE_LAV",
		201: "ISO639_PART12_LANGUAGE_CODE_MG",
		202: "ISO639_PART12_LANGUAGE_CODE_MLG",
		203: "ISO639_PART12_LANGUAGE_CODE_MH",
		204: "ISO639_PART12_LANGUAGE_CODE_MAH",
		205: "ISO639_PART12_LANGUAGE_CODE_MI",
		206: "ISO639_PART12_LANGUAGE_CODE_MRI",
		207: "ISO639_PART12_LANGUAGE_CODE_MK",
		208: "ISO639_PART12_LANGUAGE_CODE_MKD",
		209: "ISO639_PART12_LANGUAGE_CODE_ML",
		210: "ISO639_PART12_LANGUAGE_CODE_MAL",
		211: "ISO639_PART12_LANGUAGE_CODE_MN",
		212: "ISO639_PART12_LANGUAGE_CODE_MON",
		213: "ISO639_PART12_LANGUAGE_CODE_MO",
		214: "ISO639_PART12_LANGUAGE_CODE_MR",
		215: "ISO639_PART12_LANGUAGE_CODE_MAR",
		216: "ISO639_PART12_LANGUAGE_CODE_MS",
		217: "ISO639_PART12_LANGUAGE_CODE_MSA",
		218: "ISO639_PART12_LANGUAGE_CODE_MT",
		219: "ISO639_PART12_LANGUAGE_CODE_MLT",
		220: "ISO639_PART12_LANGUAGE_CODE_MY",
		221: "ISO639_PART12_LANGUAGE_CODE_MYA",
		222: "ISO639_PART12_LANGUAGE_CODE_NA",
		223: "ISO639_PART12_LANGUAGE_CODE_NAU",
		224: "ISO639_PART12_LANGUAGE_CODE_NB",
		225: "ISO639_PART12_LANGUAGE_CODE_NOB",
		226: "ISO639_PART12_LANGUAGE_CODE_ND",
		227: "ISO639_PART12_LANGUAGE_CODE_NDE",
		228: "ISO639_PART12_LANGUAGE_CODE_NE",
		229: "ISO639_PART12_LANGUAGE_CODE_NEP",
		230: "ISO639_PART12_LANGUAGE_CODE_NG",
		231: "ISO639_PART12_LANGUAGE_CODE_NDO",
		232: "ISO639_PART12_LANGUAGE_CODE_NL",
		233: "ISO639_PART12_LANGUAGE_CODE_NLD",
		234: "ISO639_PART12_LANGUAGE_CODE_NN",
		235: "ISO639_PART12_LANGUAGE_CODE_NNO",
		236: "ISO639_PART12_LANGUAGE_CODE_NO",
		237: "ISO639_PART12_LANGUAGE_CODE_NOR",
		238: "ISO639_PART12_LANGUAGE_CODE_NR",
		239: "ISO639_PART12_LANGUAGE_CODE_NBL",
		240: "ISO639_PART12_LANGUAGE_CODE_NV",
		241: "ISO639_PART12_LANGUAGE_CODE_NAV",
		242: "ISO639_PART12_LANGUAGE_CODE_NY",
		243: "ISO639_PART12_LANGUAGE_CODE_NYA",
		244: "ISO639_PART12_LANGUAGE_CODE_OC",
		245: "ISO639_PART12_LANGUAGE_CODE_OCI",
		246: "ISO639_PART12_LANGUAGE_CODE_OJ",
		247: "ISO639_PART12_LANGUAGE_CODE_OJI",
		248: "ISO639_PART12_LANGUAGE_CODE_OM",
		249: "ISO639_PART12_LANGUAGE_CODE_ORM",
		250: "ISO639_PART12_LANGUAGE_CODE_OR",
		251: "ISO639_PART12_LANGUAGE_CODE_ORI",
		252: "ISO639_PART12_LANGUAGE_CODE_OS",
		253: "ISO639_PART12_LANGUAGE_CODE_OSS",
		254: "ISO639_PART12_LANGUAGE_CODE_PA",
		255: "ISO639_PART12_LANGUAGE_CODE_PAN",
		256: "ISO639_PART12_LANGUAGE_CODE_PI",
		257: "ISO639_PART12_LANGUAGE_CODE_PLI",
		258: "ISO639_PART12_LANGUAGE_CODE_PL",
		259: "ISO639_PART12_LANGUAGE_CODE_POL",
		260: "ISO639_PART12_LANGUAGE_CODE_PS",
		261: "ISO639_PART12_LANGUAGE_CODE_PUS",
		262: "ISO639_PART12_LANGUAGE_CODE_PT",
		263: "ISO639_PART12_LANGUAGE_CODE_POR",
		264: "ISO639_PART12_LANGUAGE_CODE_QU",
		265: "ISO639_PART12_LANGUAGE_CODE_QUE",
		266: "ISO639_PART12_LANGUAGE_CODE_RM",
		267: "ISO639_PART12_LANGUAGE_CODE_ROH",
		268: "ISO639_PART12_LANGUAGE_CODE_RN",
		269: "ISO639_PART12_LANGUAGE_CODE_RUN",
		270: "ISO639_PART12_LANGUAGE_CODE_RO",
		271: "ISO639_PART12_LANGUAGE_CODE_RON",
		272: "ISO639_PART12_LANGUAGE_CODE_RU",
		273: "ISO639_PART12_LANGUAGE_CODE_RUS",
		274: "ISO639_PART12_LANGUAGE_CODE_RW",
		275: "ISO639_PART12_LANGUAGE_CODE_KIN",
		276: "ISO639_PART12_LANGUAGE_CODE_SA",
		277: "ISO639_PART12_LANGUAGE_CODE_SAN",
		278: "ISO639_PART12_LANGUAGE_CODE_SC",
		279: "ISO639_PART12_LANGUAGE_CODE_SRD",
		280: "ISO639_PART12_LANGUAGE_CODE_SD",
		281: "ISO639_PART12_LANGUAGE_CODE_SND",
		282: "ISO639_PART12_LANGUAGE_CODE_SE",
		283: "ISO639_PART12_LANGUAGE_CODE_SME",
		284: "ISO639_PART12_LANGUAGE_CODE_SG",
		285: "ISO639_PART12_LANGUAGE_CODE_SAG",
		286: "ISO639_PART12_LANGUAGE_CODE_SI",
		287: "ISO639_PART12_LANGUAGE_CODE_SIN",
		288: "ISO639_PART12_LANGUAGE_CODE_SK",
		289: "ISO639_PART12_LANGUAGE_CODE_SLK",
		290: "ISO639_PART12_LANGUAGE_CODE_SL",
		291: "ISO639_PART12_LANGUAGE_CODE_SLV",
		292: "ISO639_PART12_LANGUAGE_CODE_SM",
		293: "ISO639_PART12_LANGUAGE_CODE_SMO",
		294: "ISO639_PART12_LANGUAGE_CODE_SN",
		295: "ISO639_PART12_LANGUAGE_CODE_SNA",
		296: "ISO639_PART12_LANGUAGE_CODE_SO",
		297: "ISO639_PART12_LANGUAGE_CODE_SOM",
		298: "ISO639_PART12_LANGUAGE_CODE_SQ",
		299: "ISO639_PART12_LANGUAGE_CODE_SQI",
		300: "ISO639_PART12_LANGUAGE_CODE_SR",
		301: "ISO639_PART12_LANGUAGE_CODE_SRP",
		302: "ISO639_PART12_LANGUAGE_CODE_SS",
		303: "ISO639_PART12_LANGUAGE_CODE_SSW",
		304: "ISO639_PART12_LANGUAGE_CODE_ST",
		305: "ISO639_PART12_LANGUAGE_CODE_SOT",
		306: "ISO639_PART12_LANGUAGE_CODE_SU",
		307: "ISO639_PART12_LANGUAGE_CODE_SUN",
		308: "ISO639_PART12_LANGUAGE_CODE_SV",
		309: "ISO639_PART12_LANGUAGE_CODE_SWE",
		310: "ISO639_PART12_LANGUAGE_CODE_SW",
		311: "ISO639_PART12_LANGUAGE_CODE_SWA",
		312: "ISO639_PART12_LANGUAGE_CODE_TA",
		313: "ISO639_PART12_LANGUAGE_CODE_TAM",
		314: "ISO639_PART12_LANGUAGE_CODE_TE",
		315: "ISO639_PART12_LANGUAGE_CODE_TEL",
		316: "ISO639_PART12_LANGUAGE_CODE_TG",
		317: "ISO639_PART12_LANGUAGE_CODE_TGK",
		318: "ISO639_PART12_LANGUAGE_CODE_TH",
		319: "ISO639_PART12_LANGUAGE_CODE_THA",
		320: "ISO639_PART12_LANGUAGE_CODE_TI",
		321: "ISO639_PART12_LANGUAGE_CODE_TIR",
		322: "ISO639_PART12_LANGUAGE_CODE_TK",
		323: "ISO639_PART12_LANGUAGE_CODE_TUK",
		324: "ISO639_PART12_LANGUAGE_CODE_TL",
		325: "ISO639_PART12_LANGUAGE_CODE_TGL",
		326: "ISO639_PART12_LANGUAGE_CODE_TN",
		327: "ISO639_PART12_LANGUAGE_CODE_TSN",
		328: "ISO639_PART12_LANGUAGE_CODE_TO",
		329: "ISO639_PART12_LANGUAGE_CODE_TON",
		330: "ISO639_PART12_LANGUAGE_CODE_TR",
		331: "ISO639_PART12_LANGUAGE_CODE_TUR",
		332: "ISO639_PART12_LANGUAGE_CODE_TS",
		333: "ISO639_PART12_LANGUAGE_CODE_TSO",
		334: "ISO639_PART12_LANGUAGE_CODE_TT",
		335: "ISO639_PART12_LANGUAGE_CODE_TAT",
		336: "ISO639_PART12_LANGUAGE_CODE_TW",
		337: "ISO639_PART12_LANGUAGE_CODE_TWI",
		338: "ISO639_PART12_LANGUAGE_CODE_TY",
		339: "ISO639_PART12_LANGUAGE_CODE_TAH",
		340: "ISO639_PART12_LANGUAGE_CODE_UG",
		341: "ISO639_PART12_LANGUAGE_CODE_UIG",
		342: "ISO639_PART12_LANGUAGE_CODE_UK",
		343: "ISO639_PART12_LANGUAGE_CODE_UKR",
		344: "ISO639_PART12_LANGUAGE_CODE_UR",
		345: "ISO639_PART12_LANGUAGE_CODE_URD",
		346: "ISO639_PART12_LANGUAGE_CODE_UZ",
		347: "ISO639_PART12_LANGUAGE_CODE_UZB",
		348: "ISO639_PART12_LANGUAGE_CODE_VE",
		349: "ISO639_PART12_LANGUAGE_CODE_VEN",
		350: "ISO639_PART12_LANGUAGE_CODE_VI",
		351: "ISO639_PART12_LANGUAGE_CODE_VIE",
		352: "ISO639_PART12_LANGUAGE_CODE_VO",
		353: "ISO639_PART12_LANGUAGE_CODE_VOL",
		354: "ISO639_PART12_LANGUAGE_CODE_WA",
		355: "ISO639_PART12_LANGUAGE_CODE_WLN",
		356: "ISO639_PART12_LANGUAGE_CODE_WO",
		357: "ISO639_PART12_LANGUAGE_CODE_WOL",
		358: "ISO639_PART12_LANGUAGE_CODE_XH",
		359: "ISO639_PART12_LANGUAGE_CODE_XHO",
		360: "ISO639_PART12_LANGUAGE_CODE_YI",
		361: "ISO639_PART12_LANGUAGE_CODE_YID",
		362: "ISO639_PART12_LANGUAGE_CODE_YO",
		363: "ISO639_PART12_LANGUAGE_CODE_YOR",
		364: "ISO639_PART12_LANGUAGE_CODE_ZA",
		365: "ISO639_PART12_LANGUAGE_CODE_ZHA",
		366: "ISO639_PART12_LANGUAGE_CODE_ZH",
		367: "ISO639_PART12_LANGUAGE_CODE_ZHO",
		368: "ISO639_PART12_LANGUAGE_CODE_ZU",
		369: "ISO639_PART12_LANGUAGE_CODE_ZUL",
		370: "ISO639_PART12_LANGUAGE_CODE_ACE",
		371: "ISO639_PART12_LANGUAGE_CODE_ACH",
		372: "ISO639_PART12_LANGUAGE_CODE_ADA",
		373: "ISO639_PART12_LANGUAGE_CODE_ADY",
		374: "ISO639_PART12_LANGUAGE_CODE_AFA",
		375: "ISO639_PART12_LANGUAGE_CODE_AFH",
		376: "ISO639_PART12_LANGUAGE_CODE_AIN",
		377: "ISO639_PART12_LANGUAGE_CODE_AKK",
		378: "ISO639_PART12_LANGUAGE_CODE_ALE",
		379: "ISO639_PART12_LANGUAGE_CODE_ALG",
		380: "ISO639_PART12_LANGUAGE_CODE_ALT",
		381: "ISO639_PART12_LANGUAGE_CODE_ANG",
		382: "ISO639_PART12_LANGUAGE_CODE_ANP",
		383: "ISO639_PART12_LANGUAGE_CODE_APA",
		384: "ISO639_PART12_LANGUAGE_CODE_ARC",
		385: "ISO639_PART12_LANGUAGE_CODE_ARN",
		386: "ISO639_PART12_LANGUAGE_CODE_ARP",
		387: "ISO639_PART12_LANGUAGE_CODE_ART",
		388: "ISO639_PART12_LANGUAGE_CODE_ARW",
		389: "ISO639_PART12_LANGUAGE_CODE_AST",
		390: "ISO639_PART12_LANGUAGE_CODE_ATH",
		391: "ISO639_PART12_LANGUAGE_CODE_AUS",
		392: "ISO639_PART12_LANGUAGE_CODE_AWA",
		393: "ISO639_PART12_LANGUAGE_CODE_BAD",
		394: "ISO639_PART12_LANGUAGE_CODE_BAI",
		395: "ISO639_PART12_LANGUAGE_CODE_BAL",
		396: "ISO639_PART12_LANGUAGE_CODE_BAN",
		397: "ISO639_PART12_LANGUAGE_CODE_BAS",
		398: "ISO639_PART12_LANGUAGE_CODE_BAT",
		399: "ISO639_PART12_LANGUAGE_CODE_BEJ",
		400: "ISO639_PART12_LANGUAGE_CODE_BEM",
		401: "ISO639_PART12_LANGUAGE_CODE_BER",
		402: "ISO639_PART12_LANGUAGE_CODE_BGC",
		403: "ISO639_PART12_LANGUAGE_CODE_BHO",
		404: "ISO639_PART12_LANGUAGE_CODE_BIK",
		405: "ISO639_PART12_LANGUAGE_CODE_BIN",
		406: "ISO639_PART12_LANGUAGE_CODE_BLA",
		407: "ISO639_PART12_LANGUAGE_CODE_BNT",
		408: "ISO639_PART12_LANGUAGE_CODE_BRA",
		409: "ISO639_PART12_LANGUAGE_CODE_BTK",
		410: "ISO639_PART12_LANGUAGE_CODE_BUA",
		411: "ISO639_PART12_LANGUAGE_CODE_BUG",
		412: "ISO639_PART12_LANGUAGE_CODE_BYN",
		413: "ISO639_PART12_LANGUAGE_CODE_CAD",
		414: "ISO639_PART12_LANGUAGE_CODE_CAI",
		415: "ISO639_PART12_LANGUAGE_CODE_CAR",
		416: "ISO639_PART12_LANGUAGE_CODE_CAU",
		417: "ISO639_PART12_LANGUAGE_CODE_CEB",
		418: "ISO639_PART12_LANGUAGE_CODE_CEL",
		419: "ISO639_PART12_LANGUAGE_CODE_CHB",
		420: "ISO639_PART12_LANGUAGE_CODE_CHG",
		421: "ISO639_PART12_LANGUAGE_CODE_CHK",
		422: "ISO639_PART12_LANGUAGE_CODE_CHM",
		423: "ISO639_PART12_LANGUAGE_CODE_CHN",
		424: "ISO639_PART12_LANGUAGE_CODE_CHO",
		425: "ISO639_PART12_LANGUAGE_CODE_CHP",
		426: "ISO639_PART12_LANGUAGE_CODE_CHR",
		427: "ISO639_PART12_LANGUAGE_CODE_CHY",
		428: "ISO639_PART12_LANGUAGE_CODE_CMC",
		429: "ISO639_PART12_LANGUAGE_CODE_CNR",
		430: "ISO639_PART12_LANGUAGE_CODE_COP",
		431: "ISO639_PART12_LANGUAGE_CODE_CPE",
		432: "ISO639_PART12_LANGUAGE_CODE_CPF",
		433: "ISO639_PART12_LANGUAGE_CODE_CPP",
		434: "ISO639_PART12_LANGUAGE_CODE_CRH",
		435: "ISO639_PART12_LANGUAGE_CODE_CRP",
		436: "ISO639_PART12_LANGUAGE_CODE_CSB",
		437: "ISO639_PART12_LANGUAGE_CODE_CUS",
		438: "ISO639_PART12_LANGUAGE_CODE_DAK",
		439: "ISO639_PART12_LANGUAGE_CODE_DAR",
		440: "ISO639_PART12_LANGUAGE_CODE_DAY",
		441: "ISO639_PART12_LANGUAGE_CODE_DEL",
		442: "ISO639_PART12_LANGUAGE_CODE_DEN",
		443: "ISO639_PART12_LANGUAGE_CODE_DGR",
		444: "ISO639_PART12_LANGUAGE_CODE_DIN",
		445: "ISO639_PART12_LANGUAGE_CODE_DOI",
		446: "ISO639_PART12_LANGUAGE_CODE_DRA",
		447: "ISO639_PART12_LANGUAGE_CODE_DSB",
		448: "ISO639_PART12_LANGUAGE_CODE_DUA",
		449: "ISO639_PART12_LANGUAGE_CODE_DUM",
		450: "ISO639_PART12_LANGUAGE_CODE_DYU",
		451: "ISO639_PART12_LANGUAGE_CODE_EFI",
		452: "ISO639_PART12_LANGUAGE_CODE_EGY",
		453: "ISO639_PART12_LANGUAGE_CODE_EKA",
		454: "ISO639_PART12_LANGUAGE_CODE_ELX",
		455: "ISO639_PART12_LANGUAGE_CODE_ENM",
		456: "ISO639_PART12_LANGUAGE_CODE_EWO",
		457: "ISO639_PART12_LANGUAGE_CODE_FAN",
		458: "ISO639_PART12_LANGUAGE_CODE_FAT",
		459: "ISO639_PART12_LANGUAGE_CODE_FIL",
		460: "ISO639_PART12_LANGUAGE_CODE_FIU",
		461: "ISO639_PART12_LANGUAGE_CODE_FON",
		462: "ISO639_PART12_LANGUAGE_CODE_FRM",
		463: "ISO639_PART12_LANGUAGE_CODE_FRO",
		464: "ISO639_PART12_LANGUAGE_CODE_FRR",
		465: "ISO639_PART12_LANGUAGE_CODE_FRS",
		466: "ISO639_PART12_LANGUAGE_CODE_FUR",
		467: "ISO639_PART12_LANGUAGE_CODE_GAA",
		468: "ISO639_PART12_LANGUAGE_CODE_GAY",
		469: "ISO639_PART12_LANGUAGE_CODE_GBA",
		470: "ISO639_PART12_LANGUAGE_CODE_GEM",
		471: "ISO639_PART12_LANGUAGE_CODE_GEZ",
		472: "ISO639_PART12_LANGUAGE_CODE_GIL",
		473: "ISO639_PART12_LANGUAGE_CODE_GMH",
		474: "ISO639_PART12_LANGUAGE_CODE_GOH",
		475: "ISO639_PART12_LANGUAGE_CODE_GON",
		476: "ISO639_PART12_LANGUAGE_CODE_GOR",
		477: "ISO639_PART12_LANGUAGE_CODE_GOT",
		478: "ISO639_PART12_LANGUAGE_CODE_GRB",
		479: "ISO639_PART12_LANGUAGE_CODE_GRC",
		480: "ISO639_PART12_LANGUAGE_CODE_GSW",
		481: "ISO639_PART12_LANGUAGE_CODE_GWI",
		482: "ISO639_PART12_LANGUAGE_CODE_HAI",
		483: "ISO639_PART12_LANGUAGE_CODE_HAW",
		484: "ISO639_PART12_LANGUAGE_CODE_HIL",
		485: "ISO639_PART12_LANGUAGE_CODE_HIM",
		486: "ISO639_PART12_LANGUAGE_CODE_HIT",
		487: "ISO639_PART12_LANGUAGE_CODE_HMN",
		488: "ISO639_PART12_LANGUAGE_CODE_HSB",
		489: "ISO639_PART12_LANGUAGE_CODE_HUP",
		490: "ISO639_PART12_LANGUAGE_CODE_IBA",
		491: "ISO639_PART12_LANGUAGE_CODE_IJO",
		492: "ISO639_PART12_LANGUAGE_CODE_ILO",
		493: "ISO639_PART12_LANGUAGE_CODE_INC",
		494: "ISO639_PART12_LANGUAGE_CODE_INE",
		495: "ISO639_PART12_LANGUAGE_CODE_INH",
		496: "ISO639_PART12_LANGUAGE_CODE_IRA",
		497: "ISO639_PART12_LANGUAGE_CODE_IRO",
		498: "ISO639_PART12_LANGUAGE_CODE_JBO",
		499: "ISO639_PART12_LANGUAGE_CODE_JPR",
		500: "ISO639_PART12_LANGUAGE_CODE_JRB",
		501: "ISO639_PART12_LANGUAGE_CODE_KAA",
		502: "ISO639_PART12_LANGUAGE_CODE_KAB",
		503: "ISO639_PART12_LANGUAGE_CODE_KAC",
		504: "ISO639_PART12_LANGUAGE_CODE_KAM",
		505: "ISO639_PART12_LANGUAGE_CODE_KAR",
		506: "ISO639_PART12_LANGUAGE_CODE_KAW",
		507: "ISO639_PART12_LANGUAGE_CODE_KBD",
		508: "ISO639_PART12_LANGUAGE_CODE_KHA",
		509: "ISO639_PART12_LANGUAGE_CODE_KHI",
		510: "ISO639_PART12_LANGUAGE_CODE_KHO",
		511: "ISO639_PART12_LANGUAGE_CODE_KMB",
		512: "ISO639_PART12_LANGUAGE_CODE_KOK",
		513: "ISO639_PART12_LANGUAGE_CODE_KOS",
		514: "ISO639_PART12_LANGUAGE_CODE_KPE",
		515: "ISO639_PART12_LANGUAGE_CODE_KRC",
		516: "ISO639_PART12_LANGUAGE_CODE_KRL",
		517: "ISO639_PART12_LANGUAGE_CODE_KRO",
		518: "ISO639_PART12_LANGUAGE_CODE_KRU",
		519: "ISO639_PART12_LANGUAGE_CODE_KUM",
		520: "ISO639_PART12_LANGUAGE_CODE_KUT",
		521: "ISO639_PART12_LANGUAGE_CODE_LAD",
		522: "ISO639_PART12_LANGUAGE_CODE_LAH",
		523: "ISO639_PART12_LANGUAGE_CODE_LAM",
		524: "ISO639_PART12_LANGUAGE_CODE_LEZ",
		525: "ISO639_PART12_LANGUAGE_CODE_LOL",
		526: "ISO639_PART12_LANGUAGE_CODE_LOZ",
		527: "ISO639_PART12_LANGUAGE_CODE_LUA",
		528: "ISO639_PART12_LANGUAGE_CODE_LUI",
		529: "ISO639_PART12_LANGUAGE_CODE_LUN",
		530: "ISO639_PART12_LANGUAGE_CODE_LUO",
		531: "ISO639_PART12_LANGUAGE_CODE_LUS",
		532: "ISO639_PART12_LANGUAGE_CODE_MAD",
		533: "ISO639_PART12_LANGUAGE_CODE_MAG",
		534: "ISO639_PART12_LANGUAGE_CODE_MAI",
		535: "ISO639_PART12_LANGUAGE_CODE_MAK",
		536: "ISO639_PART12_LANGUAGE_CODE_MAN",
		537: "ISO639_PART12_LANGUAGE_CODE_MAP",
		538: "ISO639_PART12_LANGUAGE_CODE_MAS",
		539: "ISO639_PART12_LANGUAGE_CODE_MDF",
		540: "ISO639_PART12_LANGUAGE_CODE_MDR",
		541: "ISO639_PART12_LANGUAGE_CODE_MEN",
		542: "ISO639_PART12_LANGUAGE_CODE_MGA",
		543: "ISO639_PART12_LANGUAGE_CODE_MIC",
		544: "ISO639_PART12_LANGUAGE_CODE_MIN",
		545: "ISO639_PART12_LANGUAGE_CODE_MIS",
		546: "ISO639_PART12_LANGUAGE_CODE_MKH",
		547: "ISO639_PART12_LANGUAGE_CODE_MNC",
		548: "ISO639_PART12_LANGUAGE_CODE_MNI",
		549: "ISO639_PART12_LANGUAGE_CODE_MNO",
		550: "ISO639_PART12_LANGUAGE_CODE_MOH",
		551: "ISO639_PART12_LANGUAGE_CODE_MOS",
		552: "ISO639_PART12_LANGUAGE_CODE_MUL",
		553: "ISO639_PART12_LANGUAGE_CODE_MUN",
		554: "ISO639_PART12_LANGUAGE_CODE_MUS",
		555: "ISO639_PART12_LANGUAGE_CODE_MWL",
		556: "ISO639_PART12_LANGUAGE_CODE_MWR",
		557: "ISO639_PART12_LANGUAGE_CODE_MYN",
		558: "ISO639_PART12_LANGUAGE_CODE_MYV",
		559: "ISO639_PART12_LANGUAGE_CODE_NAH",
		560: "ISO639_PART12_LANGUAGE_CODE_NAI",
		561: "ISO639_PART12_LANGUAGE_CODE_NAP",
		562: "ISO639_PART12_LANGUAGE_CODE_NDS",
		563: "ISO639_PART12_LANGUAGE_CODE_NEW",
		564: "ISO639_PART12_LANGUAGE_CODE_NIA",
		565: "ISO639_PART12_LANGUAGE_CODE_NIC",
		566: "ISO639_PART12_LANGUAGE_CODE_NIU",
		567: "ISO639_PART12_LANGUAGE_CODE_NOG",
		568: "ISO639_PART12_LANGUAGE_CODE_NON",
		569: "ISO639_PART12_LANGUAGE_CODE_NQO",
		570: "ISO639_PART12_LANGUAGE_CODE_NSO",
		571: "ISO639_PART12_LANGUAGE_CODE_NUB",
		572: "ISO639_PART12_LANGUAGE_CODE_NWC",
		573: "ISO639_PART12_LANGUAGE_CODE_NYM",
		574: "ISO639_PART12_LANGUAGE_CODE_NYN",
		575: "ISO639_PART12_LANGUAGE_CODE_NYO",
		576: "ISO639_PART12_LANGUAGE_CODE_NZI",
		577: "ISO639_PART12_LANGUAGE_CODE_OSA",
		578: "ISO639_PART12_LANGUAGE_CODE_OTA",
		579: "ISO639_PART12_LANGUAGE_CODE_OTO",
		580: "ISO639_PART12_LANGUAGE_CODE_PAA",
		581: "ISO639_PART12_LANGUAGE_CODE_PAG",
		582: "ISO639_PART12_LANGUAGE_CODE_PAL",
		583: "ISO639_PART12_LANGUAGE_CODE_PAM",
		584: "ISO639_PART12_LANGUAGE_CODE_PAP",
		585: "ISO639_PART12_LANGUAGE_CODE_PAU",
		586: "ISO639_PART12_LANGUAGE_CODE_PEO",
		587: "ISO639_PART12_LANGUAGE_CODE_PHI",
		588: "ISO639_PART12_LANGUAGE_CODE_PHN",
		589: "ISO639_PART12_LANGUAGE_CODE_PON",
		590: "ISO639_PART12_LANGUAGE_CODE_PRA",
		591: "ISO639_PART12_LANGUAGE_CODE_PRO",
		592: "ISO639_PART12_LANGUAGE_CODE_QQA",
		593: "ISO639_PART12_LANGUAGE_CODE_QQB",
		594: "ISO639_PART12_LANGUAGE_CODE_QQC",
		595: "ISO639_PART12_LANGUAGE_CODE_QQD",
		596: "ISO639_PART12_LANGUAGE_CODE_QQE",
		597: "ISO639_PART12_LANGUAGE_CODE_QQF",
		598: "ISO639_PART12_LANGUAGE_CODE_QQG",
		599: "ISO639_PART12_LANGUAGE_CODE_QQH",
		600: "ISO639_PART12_LANGUAGE_CODE_QQI",
		601: "ISO639_PART12_LANGUAGE_CODE_QQJ",
		602: "ISO639_PART12_LANGUAGE_CODE_RAJ",
		603: "ISO639_PART12_LANGUAGE_CODE_RAP",
		604: "ISO639_PART12_LANGUAGE_CODE_RAR",
		605: "ISO639_PART12_LANGUAGE_CODE_ROA",
		606: "ISO639_PART12_LANGUAGE_CODE_ROM",
		607: "ISO639_PART12_LANGUAGE_CODE_RUP",
		608: "ISO639_PART12_LANGUAGE_CODE_SAD",
		609: "ISO639_PART12_LANGUAGE_CODE_SAH",
		610: "ISO639_PART12_LANGUAGE_CODE_SAI",
		611: "ISO639_PART12_LANGUAGE_CODE_SAL",
		612: "ISO639_PART12_LANGUAGE_CODE_SAM",
		613: "ISO639_PART12_LANGUAGE_CODE_SAS",
		614: "ISO639_PART12_LANGUAGE_CODE_SAT",
		615: "ISO639_PART12_LANGUAGE_CODE_SCN",
		616: "ISO639_PART12_LANGUAGE_CODE_SCO",
		617: "ISO639_PART12_LANGUAGE_CODE_SEL",
		618: "ISO639_PART12_LANGUAGE_CODE_SEM",
		619: "ISO639_PART12_LANGUAGE_CODE_SGA",
		620: "ISO639_PART12_LANGUAGE_CODE_SGN",
		621: "ISO639_PART12_LANGUAGE_CODE_SHN",
		622: "ISO639_PART12_LANGUAGE_CODE_SID",
		623: "ISO639_PART12_LANGUAGE_CODE_SIO",
		624: "ISO639_PART12_LANGUAGE_CODE_SIT",
		625: "ISO639_PART12_LANGUAGE_CODE_SLA",
		626: "ISO639_PART12_LANGUAGE_CODE_SMA",
		627: "ISO639_PART12_LANGUAGE_CODE_SMI",
		628: "ISO639_PART12_LANGUAGE_CODE_SMJ",
		629: "ISO639_PART12_LANGUAGE_CODE_SMN",
		630: "ISO639_PART12_LANGUAGE_CODE_SMS",
		631: "ISO639_PART12_LANGUAGE_CODE_SNK",
		632: "ISO639_PART12_LANGUAGE_CODE_SOG",
		633: "ISO639_PART12_LANGUAGE_CODE_SON",
		634: "ISO639_PART12_LANGUAGE_CODE_SRN",
		635: "ISO639_PART12_LANGUAGE_CODE_SRR",
		636: "ISO639_PART12_LANGUAGE_CODE_SSA",
		637: "ISO639_PART12_LANGUAGE_CODE_SUK",
		638: "ISO639_PART12_LANGUAGE_CODE_SUS",
		639: "ISO639_PART12_LANGUAGE_CODE_SUX",
		640: "ISO639_PART12_LANGUAGE_CODE_SYC",
		641: "ISO639_PART12_LANGUAGE_CODE_SYR",
		642: "ISO639_PART12_LANGUAGE_CODE_TAI",
		643: "ISO639_PART12_LANGUAGE_CODE_TEM",
		644: "ISO639_PART12_LANGUAGE_CODE_TER",
		645: "ISO639_PART12_LANGUAGE_CODE_TET",
		646: "ISO639_PART12_LANGUAGE_CODE_TIG",
		647: "ISO639_PART12_LANGUAGE_CODE_TIV",
		648: "ISO639_PART12_LANGUAGE_CODE_TKL",
		649: "ISO639_PART12_LANGUAGE_CODE_TLH",
		650: "ISO639_PART12_LANGUAGE_CODE_TLI",
		651: "ISO639_PART12_LANGUAGE_CODE_TMH",
		652: "ISO639_PART12_LANGUAGE_CODE_TOG",
		653: "ISO639_PART12_LANGUAGE_CODE_TPI",
		654: "ISO639_PART12_LANGUAGE_CODE_TSI",
		655: "ISO639_PART12_LANGUAGE_CODE_TUM",
		656: "ISO639_PART12_LANGUAGE_CODE_TUP",
		657: "ISO639_PART12_LANGUAGE_CODE_TUT",
		658: "ISO639_PART12_LANGUAGE_CODE_TVL",
		659: "ISO639_PART12_LANGUAGE_CODE_TYV",
		660: "ISO639_PART12_LANGUAGE_CODE_UDM",
		661: "ISO639_PART12_LANGUAGE_CODE_UGA",
		662: "ISO639_PART12_LANGUAGE_CODE_UMB",
		663: "ISO639_PART12_LANGUAGE_CODE_UND",
		664: "ISO639_PART12_LANGUAGE_CODE_VAI",
		665: "ISO639_PART12_LANGUAGE_CODE_VOT",
		666: "ISO639_PART12_LANGUAGE_CODE_WAK",
		667: "ISO639_PART12_LANGUAGE_CODE_WAL",
		668: "ISO639_PART12_LANGUAGE_CODE_WAR",
		669: "ISO639_PART12_LANGUAGE_CODE_WAS",
		670: "ISO639_PART12_LANGUAGE_CODE_WEN",
		671: "ISO639_PART12_LANGUAGE_CODE_XAL",
		672: "ISO639_PART12_LANGUAGE_CODE_YAO",
		673: "ISO639_PART12_LANGUAGE_CODE_YAP",
		674: "ISO639_PART12_LANGUAGE_CODE_YPK",
		675: "ISO639_PART12_LANGUAGE_CODE_ZAP",
		676: "ISO639_PART12_LANGUAGE_CODE_ZBL",
		677: "ISO639_PART12_LANGUAGE_CODE_ZEN",
		678: "ISO639_PART12_LANGUAGE_CODE_ZGH",
		679: "ISO639_PART12_LANGUAGE_CODE_ZND",
		680: "ISO639_PART12_LANGUAGE_CODE_ZUN",
		681: "ISO639_PART12_LANGUAGE_CODE_ZXX",
		682: "ISO639_PART12_LANGUAGE_CODE_ZZA",
	}
	Iso639Part12LanguageCode_value = map[string]int32{
		"ISO639_PART12_LANGUAGE_CODE_UNSPECIFIED": 0,
		"ISO639_PART12_LANGUAGE_CODE_AA":          1,
		"ISO639_PART12_LANGUAGE_CODE_AAR":         2,
		"ISO639_PART12_LANGUAGE_CODE_AB":          3,
		"ISO639_PART12_LANGUAGE_CODE_ABK":         4,
		"ISO639_PART12_LANGUAGE_CODE_AE":          5,
		"ISO639_PART12_LANGUAGE_CODE_AVE":         6,
		"ISO639_PART12_LANGUAGE_CODE_AF":          7,
		"ISO639_PART12_LANGUAGE_CODE_AFR":         8,
		"ISO639_PART12_LANGUAGE_CODE_AK":          9,
		"ISO639_PART12_LANGUAGE_CODE_AKA":         10,
		"ISO639_PART12_LANGUAGE_CODE_AM":          11,
		"ISO639_PART12_LANGUAGE_CODE_AMH":         12,
		"ISO639_PART12_LANGUAGE_CODE_AN":          13,
		"ISO639_PART12_LANGUAGE_CODE_ARG":         14,
		"ISO639_PART12_LANGUAGE_CODE_AR":          15,
		"ISO639_PART12_LANGUAGE_CODE_ARA":         16,
		"ISO639_PART12_LANGUAGE_CODE_AS":          17,
		"ISO639_PART12_LANGUAGE_CODE_ASM":         18,
		"ISO639_PART12_LANGUAGE_CODE_AV":          19,
		"ISO639_PART12_LANGUAGE_CODE_AVA":         20,
		"ISO639_PART12_LANGUAGE_CODE_AY":          21,
		"ISO639_PART12_LANGUAGE_CODE_AYM":         22,
		"ISO639_PART12_LANGUAGE_CODE_AZ":          23,
		"ISO639_PART12_LANGUAGE_CODE_AZE":         24,
		"ISO639_PART12_LANGUAGE_CODE_BA":          25,
		"ISO639_PART12_LANGUAGE_CODE_BAK":         26,
		"ISO639_PART12_LANGUAGE_CODE_BE":          27,
		"ISO639_PART12_LANGUAGE_CODE_BEL":         28,
		"ISO639_PART12_LANGUAGE_CODE_BG":          29,
		"ISO639_PART12_LANGUAGE_CODE_BUL":         30,
		"ISO639_PART12_LANGUAGE_CODE_BH":          31,
		"ISO639_PART12_LANGUAGE_CODE_BIH":         32,
		"ISO639_PART12_LANGUAGE_CODE_BI":          33,
		"ISO639_PART12_LANGUAGE_CODE_BIS":         34,
		"ISO639_PART12_LANGUAGE_CODE_BM":          35,
		"ISO639_PART12_LANGUAGE_CODE_BAM":         36,
		"ISO639_PART12_LANGUAGE_CODE_BN":          37,
		"ISO639_PART12_LANGUAGE_CODE_BEN":         38,
		"ISO639_PART12_LANGUAGE_CODE_BO":          39,
		"ISO639_PART12_LANGUAGE_CODE_BOD":         40,
		"ISO639_PART12_LANGUAGE_CODE_BR":          41,
		"ISO639_PART12_LANGUAGE_CODE_BRE":         42,
		"ISO639_PART12_LANGUAGE_CODE_BS":          43,
		"ISO639_PART12_LANGUAGE_CODE_BOS":         44,
		"ISO639_PART12_LANGUAGE_CODE_CA":          45,
		"ISO639_PART12_LANGUAGE_CODE_CAT":         46,
		"ISO639_PART12_LANGUAGE_CODE_CE":          47,
		"ISO639_PART12_LANGUAGE_CODE_CHE":         48,
		"ISO639_PART12_LANGUAGE_CODE_CH":          49,
		"ISO639_PART12_LANGUAGE_CODE_CHA":         50,
		"ISO639_PART12_LANGUAGE_CODE_CO":          51,
		"ISO639_PART12_LANGUAGE_CODE_COS":         52,
		"ISO639_PART12_LANGUAGE_CODE_CR":          53,
		"ISO639_PART12_LANGUAGE_CODE_CRE":         54,
		"ISO639_PART12_LANGUAGE_CODE_CS":          55,
		"ISO639_PART12_LANGUAGE_CODE_CES":         56,
		"ISO639_PART12_LANGUAGE_CODE_CU":          57,
		"ISO639_PART12_LANGUAGE_CODE_CHU":         58,
		"ISO639_PART12_LANGUAGE_CODE_CV":          59,
		"ISO639_PART12_LANGUAGE_CODE_CHV":         60,
		"ISO639_PART12_LANGUAGE_CODE_CY":          61,
		"ISO639_PART12_LANGUAGE_CODE_CYM":         62,
		"ISO639_PART12_LANGUAGE_CODE_DA":          63,
		"ISO639_PART12_LANGUAGE_CODE_DAN":         64,
		"ISO639_PART12_LANGUAGE_CODE_DE":          65,
		"ISO639_PART12_LANGUAGE_CODE_DEU":         66,
		"ISO639_PART12_LANGUAGE_CODE_DV":          67,
		"ISO639_PART12_LANGUAGE_CODE_DIV":         68,
		"ISO639_PART12_LANGUAGE_CODE_DZ":          69,
		"ISO639_PART12_LANGUAGE_CODE_DZO":         70,
		"ISO639_PART12_LANGUAGE_CODE_EE":          71,
		"ISO639_PART12_LANGUAGE_CODE_EWE":         72,
		"ISO639_PART12_LANGUAGE_CODE_EL":          73,
		"ISO639_PART12_LANGUAGE_CODE_ELL":         74,
		"ISO639_PART12_LANGUAGE_CODE_EN":          75,
		"ISO639_PART12_LANGUAGE_CODE_ENG":         76,
		"ISO639_PART12_LANGUAGE_CODE_EO":          77,
		"ISO639_PART12_LANGUAGE_CODE_EPO":         78,
		"ISO639_PART12_LANGUAGE_CODE_ES":          79,
		"ISO639_PART12_LANGUAGE_CODE_SPA":         80,
		"ISO639_PART12_LANGUAGE_CODE_ET":          81,
		"ISO639_PART12_LANGUAGE_CODE_EST":         82,
		"ISO639_PART12_LANGUAGE_CODE_EU":          83,
		"ISO639_PART12_LANGUAGE_CODE_EUS":         84,
		"ISO639_PART12_LANGUAGE_CODE_FA":          85,
		"ISO639_PART12_LANGUAGE_CODE_FAS":         86,
		"ISO639_PART12_LANGUAGE_CODE_FF":          87,
		"ISO639_PART12_LANGUAGE_CODE_FUL":         88,
		"ISO639_PART12_LANGUAGE_CODE_FI":          89,
		"ISO639_PART12_LANGUAGE_CODE_FIN":         90,
		"ISO639_PART12_LANGUAGE_CODE_FJ":          91,
		"ISO639_PART12_LANGUAGE_CODE_FIJ":         92,
		"ISO639_PART12_LANGUAGE_CODE_FO":          93,
		"ISO639_PART12_LANGUAGE_CODE_FAO":         94,
		"ISO639_PART12_LANGUAGE_CODE_FR":          95,
		"ISO639_PART12_LANGUAGE_CODE_FRA":         96,
		"ISO639_PART12_LANGUAGE_CODE_FY":          97,
		"ISO639_PART12_LANGUAGE_CODE_FRY":         98,
		"ISO639_PART12_LANGUAGE_CODE_GA":          99,
		"ISO639_PART12_LANGUAGE_CODE_GLE":         100,
		"ISO639_PART12_LANGUAGE_CODE_GD":          101,
		"ISO639_PART12_LANGUAGE_CODE_GLA":         102,
		"ISO639_PART12_LANGUAGE_CODE_GL":          103,
		"ISO639_PART12_LANGUAGE_CODE_GLG":         104,
		"ISO639_PART12_LANGUAGE_CODE_GN":          105,
		"ISO639_PART12_LANGUAGE_CODE_GRN":         106,
		"ISO639_PART12_LANGUAGE_CODE_GU":          107,
		"ISO639_PART12_LANGUAGE_CODE_GUJ":         108,
		"ISO639_PART12_LANGUAGE_CODE_GV":          109,
		"ISO639_PART12_LANGUAGE_CODE_GLV":         110,
		"ISO639_PART12_LANGUAGE_CODE_HA":          111,
		"ISO639_PART12_LANGUAGE_CODE_HAU":         112,
		"ISO639_PART12_LANGUAGE_CODE_HE":          113,
		"ISO639_PART12_LANGUAGE_CODE_HEB":         114,
		"ISO639_PART12_LANGUAGE_CODE_HI":          115,
		"ISO639_PART12_LANGUAGE_CODE_HIN":         116,
		"ISO639_PART12_LANGUAGE_CODE_HO":          117,
		"ISO639_PART12_LANGUAGE_CODE_HMO":         118,
		"ISO639_PART12_LANGUAGE_CODE_HR":          119,
		"ISO639_PART12_LANGUAGE_CODE_HRV":         120,
		"ISO639_PART12_LANGUAGE_CODE_HT":          121,
		"ISO639_PART12_LANGUAGE_CODE_HAT":         122,
		"ISO639_PART12_LANGUAGE_CODE_HU":          123,
		"ISO639_PART12_LANGUAGE_CODE_HUN":         124,
		"ISO639_PART12_LANGUAGE_CODE_HY":          125,
		"ISO639_PART12_LANGUAGE_CODE_HYE":         126,
		"ISO639_PART12_LANGUAGE_CODE_HZ":          127,
		"ISO639_PART12_LANGUAGE_CODE_HER":         128,
		"ISO639_PART12_LANGUAGE_CODE_IA":          129,
		"ISO639_PART12_LANGUAGE_CODE_INA":         130,
		"ISO639_PART12_LANGUAGE_CODE_ID":          131,
		"ISO639_PART12_LANGUAGE_CODE_IND":         132,
		"ISO639_PART12_LANGUAGE_CODE_IE":          133,
		"ISO639_PART12_LANGUAGE_CODE_ILE":         134,
		"ISO639_PART12_LANGUAGE_CODE_IG":          135,
		"ISO639_PART12_LANGUAGE_CODE_IBO":         136,
		"ISO639_PART12_LANGUAGE_CODE_II":          137,
		"ISO639_PART12_LANGUAGE_CODE_III":         138,
		"ISO639_PART12_LANGUAGE_CODE_IK":          139,
		"ISO639_PART12_LANGUAGE_CODE_IPK":         140,
		"ISO639_PART12_LANGUAGE_CODE_IO":          141,
		"ISO639_PART12_LANGUAGE_CODE_IDO":         142,
		"ISO639_PART12_LANGUAGE_CODE_IS":          143,
		"ISO639_PART12_LANGUAGE_CODE_ISL":         144,
		"ISO639_PART12_LANGUAGE_CODE_IT":          145,
		"ISO639_PART12_LANGUAGE_CODE_ITA":         146,
		"ISO639_PART12_LANGUAGE_CODE_IU":          147,
		"ISO639_PART12_LANGUAGE_CODE_IKU":         148,
		"ISO639_PART12_LANGUAGE_CODE_JA":          149,
		"ISO639_PART12_LANGUAGE_CODE_JPN":         150,
		"ISO639_PART12_LANGUAGE_CODE_JV":          151,
		"ISO639_PART12_LANGUAGE_CODE_JAV":         152,
		"ISO639_PART12_LANGUAGE_CODE_KA":          153,
		"ISO639_PART12_LANGUAGE_CODE_KAT":         154,
		"ISO639_PART12_LANGUAGE_CODE_KG":          155,
		"ISO639_PART12_LANGUAGE_CODE_KON":         156,
		"ISO639_PART12_LANGUAGE_CODE_KI":          157,
		"ISO639_PART12_LANGUAGE_CODE_KIK":         158,
		"ISO639_PART12_LANGUAGE_CODE_KJ":          159,
		"ISO639_PART12_LANGUAGE_CODE_KUA":         160,
		"ISO639_PART12_LANGUAGE_CODE_KK":          161,
		"ISO639_PART12_LANGUAGE_CODE_KAZ":         162,
		"ISO639_PART12_LANGUAGE_CODE_KL":          163,
		"ISO639_PART12_LANGUAGE_CODE_KAL":         164,
		"ISO639_PART12_LANGUAGE_CODE_KM":          165,
		"ISO639_PART12_LANGUAGE_CODE_KHM":         166,
		"ISO639_PART12_LANGUAGE_CODE_KN":          167,
		"ISO639_PART12_LANGUAGE_CODE_KAN":         168,
		"ISO639_PART12_LANGUAGE_CODE_KO":          169,
		"ISO639_PART12_LANGUAGE_CODE_KOR":         170,
		"ISO639_PART12_LANGUAGE_CODE_KR":          171,
		"ISO639_PART12_LANGUAGE_CODE_KAU":         172,
		"ISO639_PART12_LANGUAGE_CODE_KS":          173,
		"ISO639_PART12_LANGUAGE_CODE_KAS":         174,
		"ISO639_PART12_LANGUAGE_CODE_KU":          175,
		"ISO639_PART12_LANGUAGE_CODE_KUR":         176,
		"ISO639_PART12_LANGUAGE_CODE_KV":          177,
		"ISO639_PART12_LANGUAGE_CODE_KOM":         178,
		"ISO639_PART12_LANGUAGE_CODE_KW":          179,
		"ISO639_PART12_LANGUAGE_CODE_COR":         180,
		"ISO639_PART12_LANGUAGE_CODE_KY":          181,
		"ISO639_PART12_LANGUAGE_CODE_KIR":         182,
		"ISO639_PART12_LANGUAGE_CODE_LA":          183,
		"ISO639_PART12_LANGUAGE_CODE_LAT":         184,
		"ISO639_PART12_LANGUAGE_CODE_LB":          185,
		"ISO639_PART12_LANGUAGE_CODE_LTZ":         186,
		"ISO639_PART12_LANGUAGE_CODE_LG":          187,
		"ISO639_PART12_LANGUAGE_CODE_LUG":         188,
		"ISO639_PART12_LANGUAGE_CODE_LI":          189,
		"ISO639_PART12_LANGUAGE_CODE_LIM":         190,
		"ISO639_PART12_LANGUAGE_CODE_LN":          191,
		"ISO639_PART12_LANGUAGE_CODE_LIN":         192,
		"ISO639_PART12_LANGUAGE_CODE_LO":          193,
		"ISO639_PART12_LANGUAGE_CODE_LAO":         194,
		"ISO639_PART12_LANGUAGE_CODE_LT":          195,
		"ISO639_PART12_LANGUAGE_CODE_LIT":         196,
		"ISO639_PART12_LANGUAGE_CODE_LU":          197,
		"ISO639_PART12_LANGUAGE_CODE_LUB":         198,
		"ISO639_PART12_LANGUAGE_CODE_LV":          199,
		"ISO639_PART12_LANGUAGE_CODE_LAV":         200,
		"ISO639_PART12_LANGUAGE_CODE_MG":          201,
		"ISO639_PART12_LANGUAGE_CODE_MLG":         202,
		"ISO639_PART12_LANGUAGE_CODE_MH":          203,
		"ISO639_PART12_LANGUAGE_CODE_MAH":         204,
		"ISO639_PART12_LANGUAGE_CODE_MI":          205,
		"ISO639_PART12_LANGUAGE_CODE_MRI":         206,
		"ISO639_PART12_LANGUAGE_CODE_MK":          207,
		"ISO639_PART12_LANGUAGE_CODE_MKD":         208,
		"ISO639_PART12_LANGUAGE_CODE_ML":          209,
		"ISO639_PART12_LANGUAGE_CODE_MAL":         210,
		"ISO639_PART12_LANGUAGE_CODE_MN":          211,
		"ISO639_PART12_LANGUAGE_CODE_MON":         212,
		"ISO639_PART12_LANGUAGE_CODE_MO":          213,
		"ISO639_PART12_LANGUAGE_CODE_MR":          214,
		"ISO639_PART12_LANGUAGE_CODE_MAR":         215,
		"ISO639_PART12_LANGUAGE_CODE_MS":          216,
		"ISO639_PART12_LANGUAGE_CODE_MSA":         217,
		"ISO639_PART12_LANGUAGE_CODE_MT":          218,
		"ISO639_PART12_LANGUAGE_CODE_MLT":         219,
		"ISO639_PART12_LANGUAGE_CODE_MY":          220,
		"ISO639_PART12_LANGUAGE_CODE_MYA":         221,
		"ISO639_PART12_LANGUAGE_CODE_NA":          222,
		"ISO639_PART12_LANGUAGE_CODE_NAU":         223,
		"ISO639_PART12_LANGUAGE_CODE_NB":          224,
		"ISO639_PART12_LANGUAGE_CODE_NOB":         225,
		"ISO639_PART12_LANGUAGE_CODE_ND":          226,
		"ISO639_PART12_LANGUAGE_CODE_NDE":         227,
		"ISO639_PART12_LANGUAGE_CODE_NE":          228,
		"ISO639_PART12_LANGUAGE_CODE_NEP":         229,
		"ISO639_PART12_LANGUAGE_CODE_NG":          230,
		"ISO639_PART12_LANGUAGE_CODE_NDO":         231,
		"ISO639_PART12_LANGUAGE_CODE_NL":          232,
		"ISO639_PART12_LANGUAGE_CODE_NLD":         233,
		"ISO639_PART12_LANGUAGE_CODE_NN":          234,
		"ISO639_PART12_LANGUAGE_CODE_NNO":         235,
		"ISO639_PART12_LANGUAGE_CODE_NO":          236,
		"ISO639_PART12_LANGUAGE_CODE_NOR":         237,
		"ISO639_PART12_LANGUAGE_CODE_NR":          238,
		"ISO639_PART12_LANGUAGE_CODE_NBL":         239,
		"ISO639_PART12_LANGUAGE_CODE_NV":          240,
		"ISO639_PART12_LANGUAGE_CODE_NAV":         241,
		"ISO639_PART12_LANGUAGE_CODE_NY":          242,
		"ISO639_PART12_LANGUAGE_CODE_NYA":         243,
		"ISO639_PART12_LANGUAGE_CODE_OC":          244,
		"ISO639_PART12_LANGUAGE_CODE_OCI":         245,
		"ISO639_PART12_LANGUAGE_CODE_OJ":          246,
		"ISO639_PART12_LANGUAGE_CODE_OJI":         247,
		"ISO639_PART12_LANGUAGE_CODE_OM":          248,
		"ISO639_PART12_LANGUAGE_CODE_ORM":         249,
		"ISO639_PART12_LANGUAGE_CODE_OR":          250,
		"ISO639_PART12_LANGUAGE_CODE_ORI":         251,
		"ISO639_PART12_LANGUAGE_CODE_OS":          252,
		"ISO639_PART12_LANGUAGE_CODE_OSS":         253,
		"ISO639_PART12_LANGUAGE_CODE_PA":          254,
		"ISO639_PART12_LANGUAGE_CODE_PAN":         255,
		"ISO639_PART12_LANGUAGE_CODE_PI":          256,
		"ISO639_PART12_LANGUAGE_CODE_PLI":         257,
		"ISO639_PART12_LANGUAGE_CODE_PL":          258,
		"ISO639_PART12_LANGUAGE_CODE_POL":         259,
		"ISO639_PART12_LANGUAGE_CODE_PS":          260,
		"ISO639_PART12_LANGUAGE_CODE_PUS":         261,
		"ISO639_PART12_LANGUAGE_CODE_PT":          262,
		"ISO639_PART12_LANGUAGE_CODE_POR":         263,
		"ISO639_PART12_LANGUAGE_CODE_QU":          264,
		"ISO639_PART12_LANGUAGE_CODE_QUE":         265,
		"ISO639_PART12_LANGUAGE_CODE_RM":          266,
		"ISO639_PART12_LANGUAGE_CODE_ROH":         267,
		"ISO639_PART12_LANGUAGE_CODE_RN":          268,
		"ISO639_PART12_LANGUAGE_CODE_RUN":         269,
		"ISO639_PART12_LANGUAGE_CODE_RO":          270,
		"ISO639_PART12_LANGUAGE_CODE_RON":         271,
		"ISO639_PART12_LANGUAGE_CODE_RU":          272,
		"ISO639_PART12_LANGUAGE_CODE_RUS":         273,
		"ISO639_PART12_LANGUAGE_CODE_RW":          274,
		"ISO639_PART12_LANGUAGE_CODE_KIN":         275,
		"ISO639_PART12_LANGUAGE_CODE_SA":          276,
		"ISO639_PART12_LANGUAGE_CODE_SAN":         277,
		"ISO639_PART12_LANGUAGE_CODE_SC":          278,
		"ISO639_PART12_LANGUAGE_CODE_SRD":         279,
		"ISO639_PART12_LANGUAGE_CODE_SD":          280,
		"ISO639_PART12_LANGUAGE_CODE_SND":         281,
		"ISO639_PART12_LANGUAGE_CODE_SE":          282,
		"ISO639_PART12_LANGUAGE_CODE_SME":         283,
		"ISO639_PART12_LANGUAGE_CODE_SG":          284,
		"ISO639_PART12_LANGUAGE_CODE_SAG":         285,
		"ISO639_PART12_LANGUAGE_CODE_SI":          286,
		"ISO639_PART12_LANGUAGE_CODE_SIN":         287,
		"ISO639_PART12_LANGUAGE_CODE_SK":          288,
		"ISO639_PART12_LANGUAGE_CODE_SLK":         289,
		"ISO639_PART12_LANGUAGE_CODE_SL":          290,
		"ISO639_PART12_LANGUAGE_CODE_SLV":         291,
		"ISO639_PART12_LANGUAGE_CODE_SM":          292,
		"ISO639_PART12_LANGUAGE_CODE_SMO":         293,
		"ISO639_PART12_LANGUAGE_CODE_SN":          294,
		"ISO639_PART12_LANGUAGE_CODE_SNA":         295,
		"ISO639_PART12_LANGUAGE_CODE_SO":          296,
		"ISO639_PART12_LANGUAGE_CODE_SOM":         297,
		"ISO639_PART12_LANGUAGE_CODE_SQ":          298,
		"ISO639_PART12_LANGUAGE_CODE_SQI":         299,
		"ISO639_PART12_LANGUAGE_CODE_SR":          300,
		"ISO639_PART12_LANGUAGE_CODE_SRP":         301,
		"ISO639_PART12_LANGUAGE_CODE_SS":          302,
		"ISO639_PART12_LANGUAGE_CODE_SSW":         303,
		"ISO639_PART12_LANGUAGE_CODE_ST":          304,
		"ISO639_PART12_LANGUAGE_CODE_SOT":         305,
		"ISO639_PART12_LANGUAGE_CODE_SU":          306,
		"ISO639_PART12_LANGUAGE_CODE_SUN":         307,
		"ISO639_PART12_LANGUAGE_CODE_SV":          308,
		"ISO639_PART12_LANGUAGE_CODE_SWE":         309,
		"ISO639_PART12_LANGUAGE_CODE_SW":          310,
		"ISO639_PART12_LANGUAGE_CODE_SWA":         311,
		"ISO639_PART12_LANGUAGE_CODE_TA":          312,
		"ISO639_PART12_LANGUAGE_CODE_TAM":         313,
		"ISO639_PART12_LANGUAGE_CODE_TE":          314,
		"ISO639_PART12_LANGUAGE_CODE_TEL":         315,
		"ISO639_PART12_LANGUAGE_CODE_TG":          316,
		"ISO639_PART12_LANGUAGE_CODE_TGK":         317,
		"ISO639_PART12_LANGUAGE_CODE_TH":          318,
		"ISO639_PART12_LANGUAGE_CODE_THA":         319,
		"ISO639_PART12_LANGUAGE_CODE_TI":          320,
		"ISO639_PART12_LANGUAGE_CODE_TIR":         321,
		"ISO639_PART12_LANGUAGE_CODE_TK":          322,
		"ISO639_PART12_LANGUAGE_CODE_TUK":         323,
		"ISO639_PART12_LANGUAGE_CODE_TL":          324,
		"ISO639_PART12_LANGUAGE_CODE_TGL":         325,
		"ISO639_PART12_LANGUAGE_CODE_TN":          326,
		"ISO639_PART12_LANGUAGE_CODE_TSN":         327,
		"ISO639_PART12_LANGUAGE_CODE_TO":          328,
		"ISO639_PART12_LANGUAGE_CODE_TON":         329,
		"ISO639_PART12_LANGUAGE_CODE_TR":          330,
		"ISO639_PART12_LANGUAGE_CODE_TUR":         331,
		"ISO639_PART12_LANGUAGE_CODE_TS":          332,
		"ISO639_PART12_LANGUAGE_CODE_TSO":         333,
		"ISO639_PART12_LANGUAGE_CODE_TT":          334,
		"ISO639_PART12_LANGUAGE_CODE_TAT":         335,
		"ISO639_PART12_LANGUAGE_CODE_TW":          336,
		"ISO639_PART12_LANGUAGE_CODE_TWI":         337,
		"ISO639_PART12_LANGUAGE_CODE_TY":          338,
		"ISO639_PART12_LANGUAGE_CODE_TAH":         339,
		"ISO639_PART12_LANGUAGE_CODE_UG":          340,
		"ISO639_PART12_LANGUAGE_CODE_UIG":         341,
		"ISO639_PART12_LANGUAGE_CODE_UK":          342,
		"ISO639_PART12_LANGUAGE_CODE_UKR":         343,
		"ISO639_PART12_LANGUAGE_CODE_UR":          344,
		"ISO639_PART12_LANGUAGE_CODE_URD":         345,
		"ISO639_PART12_LANGUAGE_CODE_UZ":          346,
		"ISO639_PART12_LANGUAGE_CODE_UZB":         347,
		"ISO639_PART12_LANGUAGE_CODE_VE":          348,
		"ISO639_PART12_LANGUAGE_CODE_VEN":         349,
		"ISO639_PART12_LANGUAGE_CODE_VI":          350,
		"ISO639_PART12_LANGUAGE_CODE_VIE":         351,
		"ISO639_PART12_LANGUAGE_CODE_VO":          352,
		"ISO639_PART12_LANGUAGE_CODE_VOL":         353,
		"ISO639_PART12_LANGUAGE_CODE_WA":          354,
		"ISO639_PART12_LANGUAGE_CODE_WLN":         355,
		"ISO639_PART12_LANGUAGE_CODE_WO":          356,
		"ISO639_PART12_LANGUAGE_CODE_WOL":         357,
		"ISO639_PART12_LANGUAGE_CODE_XH":          358,
		"ISO639_PART12_LANGUAGE_CODE_XHO":         359,
		"ISO639_PART12_LANGUAGE_CODE_YI":          360,
		"ISO639_PART12_LANGUAGE_CODE_YID":         361,
		"ISO639_PART12_LANGUAGE_CODE_YO":          362,
		"ISO639_PART12_LANGUAGE_CODE_YOR":         363,
		"ISO639_PART12_LANGUAGE_CODE_ZA":          364,
		"ISO639_PART12_LANGUAGE_CODE_ZHA":         365,
		"ISO639_PART12_LANGUAGE_CODE_ZH":          366,
		"ISO639_PART12_LANGUAGE_CODE_ZHO":         367,
		"ISO639_PART12_LANGUAGE_CODE_ZU":          368,
		"ISO639_PART12_LANGUAGE_CODE_ZUL":         369,
		"ISO639_PART12_LANGUAGE_CODE_ACE":         370,
		"ISO639_PART12_LANGUAGE_CODE_ACH":         371,
		"ISO639_PART12_LANGUAGE_CODE_ADA":         372,
		"ISO639_PART12_LANGUAGE_CODE_ADY":         373,
		"ISO639_PART12_LANGUAGE_CODE_AFA":         374,
		"ISO639_PART12_LANGUAGE_CODE_AFH":         375,
		"ISO639_PART12_LANGUAGE_CODE_AIN":         376,
		"ISO639_PART12_LANGUAGE_CODE_AKK":         377,
		"ISO639_PART12_LANGUAGE_CODE_ALE":         378,
		"ISO639_PART12_LANGUAGE_CODE_ALG":         379,
		"ISO639_PART12_LANGUAGE_CODE_ALT":         380,
		"ISO639_PART12_LANGUAGE_CODE_ANG":         381,
		"ISO639_PART12_LANGUAGE_CODE_ANP":         382,
		"ISO639_PART12_LANGUAGE_CODE_APA":         383,
		"ISO639_PART12_LANGUAGE_CODE_ARC":         384,
		"ISO639_PART12_LANGUAGE_CODE_ARN":         385,
		"ISO639_PART12_LANGUAGE_CODE_ARP":         386,
		"ISO639_PART12_LANGUAGE_CODE_ART":         387,
		"ISO639_PART12_LANGUAGE_CODE_ARW":         388,
		"ISO639_PART12_LANGUAGE_CODE_AST":         389,
		"ISO639_PART12_LANGUAGE_CODE_ATH":         390,
		"ISO639_PART12_LANGUAGE_CODE_AUS":         391,
		"ISO639_PART12_LANGUAGE_CODE_AWA":         392,
		"ISO639_PART12_LANGUAGE_CODE_BAD":         393,
		"ISO639_PART12_LANGUAGE_CODE_BAI":         394,
		"ISO639_PART12_LANGUAGE_CODE_BAL":         395,
		"ISO639_PART12_LANGUAGE_CODE_BAN":         396,
		"ISO639_PART12_LANGUAGE_CODE_BAS":         397,
		"ISO639_PART12_LANGUAGE_CODE_BAT":         398,
		"ISO639_PART12_LANGUAGE_CODE_BEJ":         399,
		"ISO639_PART12_LANGUAGE_CODE_BEM":         400,
		"ISO639_PART12_LANGUAGE_CODE_BER":         401,
		"ISO639_PART12_LANGUAGE_CODE_BGC":         402,
		"ISO639_PART12_LANGUAGE_CODE_BHO":         403,
		"ISO639_PART12_LANGUAGE_CODE_BIK":         404,
		"ISO639_PART12_LANGUAGE_CODE_BIN":         405,
		"ISO639_PART12_LANGUAGE_CODE_BLA":         406,
		"ISO639_PART12_LANGUAGE_CODE_BNT":         407,
		"ISO639_PART12_LANGUAGE_CODE_BRA":         408,
		"ISO639_PART12_LANGUAGE_CODE_BTK":         409,
		"ISO639_PART12_LANGUAGE_CODE_BUA":         410,
		"ISO639_PART12_LANGUAGE_CODE_BUG":         411,
		"ISO639_PART12_LANGUAGE_CODE_BYN":         412,
		"ISO639_PART12_LANGUAGE_CODE_CAD":         413,
		"ISO639_PART12_LANGUAGE_CODE_CAI":         414,
		"ISO639_PART12_LANGUAGE_CODE_CAR":         415,
		"ISO639_PART12_LANGUAGE_CODE_CAU":         416,
		"ISO639_PART12_LANGUAGE_CODE_CEB":         417,
		"ISO639_PART12_LANGUAGE_CODE_CEL":         418,
		"ISO639_PART12_LANGUAGE_CODE_CHB":         419,
		"ISO639_PART12_LANGUAGE_CODE_CHG":         420,
		"ISO639_PART12_LANGUAGE_CODE_CHK":         421,
		"ISO639_PART12_LANGUAGE_CODE_CHM":         422,
		"ISO639_PART12_LANGUAGE_CODE_CHN":         423,
		"ISO639_PART12_LANGUAGE_CODE_CHO":         424,
		"ISO639_PART12_LANGUAGE_CODE_CHP":         425,
		"ISO639_PART12_LANGUAGE_CODE_CHR":         426,
		"ISO639_PART12_LANGUAGE_CODE_CHY":         427,
		"ISO639_PART12_LANGUAGE_CODE_CMC":         428,
		"ISO639_PART12_LANGUAGE_CODE_CNR":         429,
		"ISO639_PART12_LANGUAGE_CODE_COP":         430,
		"ISO639_PART12_LANGUAGE_CODE_CPE":         431,
		"ISO639_PART12_LANGUAGE_CODE_CPF":         432,
		"ISO639_PART12_LANGUAGE_CODE_CPP":         433,
		"ISO639_PART12_LANGUAGE_CODE_CRH":         434,
		"ISO639_PART12_LANGUAGE_CODE_CRP":         435,
		"ISO639_PART12_LANGUAGE_CODE_CSB":         436,
		"ISO639_PART12_LANGUAGE_CODE_CUS":         437,
		"ISO639_PART12_LANGUAGE_CODE_DAK":         438,
		"ISO639_PART12_LANGUAGE_CODE_DAR":         439,
		"ISO639_PART12_LANGUAGE_CODE_DAY":         440,
		"ISO639_PART12_LANGUAGE_CODE_DEL":         441,
		"ISO639_PART12_LANGUAGE_CODE_DEN":         442,
		"ISO639_PART12_LANGUAGE_CODE_DGR":         443,
		"ISO639_PART12_LANGUAGE_CODE_DIN":         444,
		"ISO639_PART12_LANGUAGE_CODE_DOI":         445,
		"ISO639_PART12_LANGUAGE_CODE_DRA":         446,
		"ISO639_PART12_LANGUAGE_CODE_DSB":         447,
		"ISO639_PART12_LANGUAGE_CODE_DUA":         448,
		"ISO639_PART12_LANGUAGE_CODE_DUM":         449,
		"ISO639_PART12_LANGUAGE_CODE_DYU":         450,
		"ISO639_PART12_LANGUAGE_CODE_EFI":         451,
		"ISO639_PART12_LANGUAGE_CODE_EGY":         452,
		"ISO639_PART12_LANGUAGE_CODE_EKA":         453,
		"ISO639_PART12_LANGUAGE_CODE_ELX":         454,
		"ISO639_PART12_LANGUAGE_CODE_ENM":         455,
		"ISO639_PART12_LANGUAGE_CODE_EWO":         456,
		"ISO639_PART12_LANGUAGE_CODE_FAN":         457,
		"ISO639_PART12_LANGUAGE_CODE_FAT":         458,
		"ISO639_PART12_LANGUAGE_CODE_FIL":         459,
		"ISO639_PART12_LANGUAGE_CODE_FIU":         460,
		"ISO639_PART12_LANGUAGE_CODE_FON":         461,
		"ISO639_PART12_LANGUAGE_CODE_FRM":         462,
		"ISO639_PART12_LANGUAGE_CODE_FRO":         463,
		"ISO639_PART12_LANGUAGE_CODE_FRR":         464,
		"ISO639_PART12_LANGUAGE_CODE_FRS":         465,
		"ISO639_PART12_LANGUAGE_CODE_FUR":         466,
		"ISO639_PART12_LANGUAGE_CODE_GAA":         467,
		"ISO639_PART12_LANGUAGE_CODE_GAY":         468,
		"ISO639_PART12_LANGUAGE_CODE_GBA":         469,
		"ISO639_PART12_LANGUAGE_CODE_GEM":         470,
		"ISO639_PART12_LANGUAGE_CODE_GEZ":         471,
		"ISO639_PART12_LANGUAGE_CODE_GIL":         472,
		"ISO639_PART12_LANGUAGE_CODE_GMH":         473,
		"ISO639_PART12_LANGUAGE_CODE_GOH":         474,
		"ISO639_PART12_LANGUAGE_CODE_GON":         475,
		"ISO639_PART12_LANGUAGE_CODE_GOR":         476,
		"ISO639_PART12_LANGUAGE_CODE_GOT":         477,
		"ISO639_PART12_LANGUAGE_CODE_GRB":         478,
		"ISO639_PART12_LANGUAGE_CODE_GRC":         479,
		"ISO639_PART12_LANGUAGE_CODE_GSW":         480,
		"ISO639_PART12_LANGUAGE_CODE_GWI":         481,
		"ISO639_PART12_LANGUAGE_CODE_HAI":         482,
		"ISO639_PART12_LANGUAGE_CODE_HAW":         483,
		"ISO639_PART12_LANGUAGE_CODE_HIL":         484,
		"ISO639_PART12_LANGUAGE_CODE_HIM":         485,
		"ISO639_PART12_LANGUAGE_CODE_HIT":         486,
		"ISO639_PART12_LANGUAGE_CODE_HMN":         487,
		"ISO639_PART12_LANGUAGE_CODE_HSB":         488,
		"ISO639_PART12_LANGUAGE_CODE_HUP":         489,
		"ISO639_PART12_LANGUAGE_CODE_IBA":         490,
		"ISO639_PART12_LANGUAGE_CODE_IJO":         491,
		"ISO639_PART12_LANGUAGE_CODE_ILO":         492,
		"ISO639_PART12_LANGUAGE_CODE_INC":         493,
		"ISO639_PART12_LANGUAGE_CODE_INE":         494,
		"ISO639_PART12_LANGUAGE_CODE_INH":         495,
		"ISO639_PART12_LANGUAGE_CODE_IRA":         496,
		"ISO639_PART12_LANGUAGE_CODE_IRO":         497,
		"ISO639_PART12_LANGUAGE_CODE_JBO":         498,
		"ISO639_PART12_LANGUAGE_CODE_JPR":         499,
		"ISO639_PART12_LANGUAGE_CODE_JRB":         500,
		"ISO639_PART12_LANGUAGE_CODE_KAA":         501,
		"ISO639_PART12_LANGUAGE_CODE_KAB":         502,
		"ISO639_PART12_LANGUAGE_CODE_KAC":         503,
		"ISO639_PART12_LANGUAGE_CODE_KAM":         504,
		"ISO639_PART12_LANGUAGE_CODE_KAR":         505,
		"ISO639_PART12_LANGUAGE_CODE_KAW":         506,
		"ISO639_PART12_LANGUAGE_CODE_KBD":         507,
		"ISO639_PART12_LANGUAGE_CODE_KHA":         508,
		"ISO639_PART12_LANGUAGE_CODE_KHI":         509,
		"ISO639_PART12_LANGUAGE_CODE_KHO":         510,
		"ISO639_PART12_LANGUAGE_CODE_KMB":         511,
		"ISO639_PART12_LANGUAGE_CODE_KOK":         512,
		"ISO639_PART12_LANGUAGE_CODE_KOS":         513,
		"ISO639_PART12_LANGUAGE_CODE_KPE":         514,
		"ISO639_PART12_LANGUAGE_CODE_KRC":         515,
		"ISO639_PART12_LANGUAGE_CODE_KRL":         516,
		"ISO639_PART12_LANGUAGE_CODE_KRO":         517,
		"ISO639_PART12_LANGUAGE_CODE_KRU":         518,
		"ISO639_PART12_LANGUAGE_CODE_KUM":         519,
		"ISO639_PART12_LANGUAGE_CODE_KUT":         520,
		"ISO639_PART12_LANGUAGE_CODE_LAD":         521,
		"ISO639_PART12_LANGUAGE_CODE_LAH":         522,
		"ISO639_PART12_LANGUAGE_CODE_LAM":         523,
		"ISO639_PART12_LANGUAGE_CODE_LEZ":         524,
		"ISO639_PART12_LANGUAGE_CODE_LOL":         525,
		"ISO639_PART12_LANGUAGE_CODE_LOZ":         526,
		"ISO639_PART12_LANGUAGE_CODE_LUA":         527,
		"ISO639_PART12_LANGUAGE_CODE_LUI":         528,
		"ISO639_PART12_LANGUAGE_CODE_LUN":         529,
		"ISO639_PART12_LANGUAGE_CODE_LUO":         530,
		"ISO639_PART12_LANGUAGE_CODE_LUS":         531,
		"ISO639_PART12_LANGUAGE_CODE_MAD":         532,
		"ISO639_PART12_LANGUAGE_CODE_MAG":         533,
		"ISO639_PART12_LANGUAGE_CODE_MAI":         534,
		"ISO639_PART12_LANGUAGE_CODE_MAK":         535,
		"ISO639_PART12_LANGUAGE_CODE_MAN":         536,
		"ISO639_PART12_LANGUAGE_CODE_MAP":         537,
		"ISO639_PART12_LANGUAGE_CODE_MAS":         538,
		"ISO639_PART12_LANGUAGE_CODE_MDF":         539,
		"ISO639_PART12_LANGUAGE_CODE_MDR":         540,
		"ISO639_PART12_LANGUAGE_CODE_MEN":         541,
		"ISO639_PART12_LANGUAGE_CODE_MGA":         542,
		"ISO639_PART12_LANGUAGE_CODE_MIC":         543,
		"ISO639_PART12_LANGUAGE_CODE_MIN":         544,
		"ISO639_PART12_LANGUAGE_CODE_MIS":         545,
		"ISO639_PART12_LANGUAGE_CODE_MKH":         546,
		"ISO639_PART12_LANGUAGE_CODE_MNC":         547,
		"ISO639_PART12_LANGUAGE_CODE_MNI":         548,
		"ISO639_PART12_LANGUAGE_CODE_MNO":         549,
		"ISO639_PART12_LANGUAGE_CODE_MOH":         550,
		"ISO639_PART12_LANGUAGE_CODE_MOS":         551,
		"ISO639_PART12_LANGUAGE_CODE_MUL":         552,
		"ISO639_PART12_LANGUAGE_CODE_MUN":         553,
		"ISO639_PART12_LANGUAGE_CODE_MUS":         554,
		"ISO639_PART12_LANGUAGE_CODE_MWL":         555,
		"ISO639_PART12_LANGUAGE_CODE_MWR":         556,
		"ISO639_PART12_LANGUAGE_CODE_MYN":         557,
		"ISO639_PART12_LANGUAGE_CODE_MYV":         558,
		"ISO639_PART12_LANGUAGE_CODE_NAH":         559,
		"ISO639_PART12_LANGUAGE_CODE_NAI":         560,
		"ISO639_PART12_LANGUAGE_CODE_NAP":         561,
		"ISO639_PART12_LANGUAGE_CODE_NDS":         562,
		"ISO639_PART12_LANGUAGE_CODE_NEW":         563,
		"ISO639_PART12_LANGUAGE_CODE_NIA":         564,
		"ISO639_PART12_LANGUAGE_CODE_NIC":         565,
		"ISO639_PART12_LANGUAGE_CODE_NIU":         566,
		"ISO639_PART12_LANGUAGE_CODE_NOG":         567,
		"ISO639_PART12_LANGUAGE_CODE_NON":         568,
		"ISO639_PART12_LANGUAGE_CODE_NQO":         569,
		"ISO639_PART12_LANGUAGE_CODE_NSO":         570,
		"ISO639_PART12_LANGUAGE_CODE_NUB":         571,
		"ISO639_PART12_LANGUAGE_CODE_NWC":         572,
		"ISO639_PART12_LANGUAGE_CODE_NYM":         573,
		"ISO639_PART12_LANGUAGE_CODE_NYN":         574,
		"ISO639_PART12_LANGUAGE_CODE_NYO":         575,
		"ISO639_PART12_LANGUAGE_CODE_NZI":         576,
		"ISO639_PART12_LANGUAGE_CODE_OSA":         577,
		"ISO639_PART12_LANGUAGE_CODE_OTA":         578,
		"ISO639_PART12_LANGUAGE_CODE_OTO":         579,
		"ISO639_PART12_LANGUAGE_CODE_PAA":         580,
		"ISO639_PART12_LANGUAGE_CODE_PAG":         581,
		"ISO639_PART12_LANGUAGE_CODE_PAL":         582,
		"ISO639_PART12_LANGUAGE_CODE_PAM":         583,
		"ISO639_PART12_LANGUAGE_CODE_PAP":         584,
		"ISO639_PART12_LANGUAGE_CODE_PAU":         585,
		"ISO639_PART12_LANGUAGE_CODE_PEO":         586,
		"ISO639_PART12_LANGUAGE_CODE_PHI":         587,
		"ISO639_PART12_LANGUAGE_CODE_PHN":         588,
		"ISO639_PART12_LANGUAGE_CODE_PON":         589,
		"ISO639_PART12_LANGUAGE_CODE_PRA":         590,
		"ISO639_PART12_LANGUAGE_CODE_PRO":         591,
		"ISO639_PART12_LANGUAGE_CODE_QQA":         592,
		"ISO639_PART12_LANGUAGE_CODE_QQB":         593,
		"ISO639_PART12_LANGUAGE_CODE_QQC":         594,
		"ISO639_PART12_LANGUAGE_CODE_QQD":         595,
		"ISO639_PART12_LANGUAGE_CODE_QQE":         596,
		"ISO639_PART12_LANGUAGE_CODE_QQF":         597,
		"ISO639_PART12_LANGUAGE_CODE_QQG":         598,
		"ISO639_PART12_LANGUAGE_CODE_QQH":         599,
		"ISO639_PART12_LANGUAGE_CODE_QQI":         600,
		"ISO639_PART12_LANGUAGE_CODE_QQJ":         601,
		"ISO639_PART12_LANGUAGE_CODE_RAJ":         602,
		"ISO639_PART12_LANGUAGE_CODE_RAP":         603,
		"ISO639_PART12_LANGUAGE_CODE_RAR":         604,
		"ISO639_PART12_LANGUAGE_CODE_ROA":         605,
		"ISO639_PART12_LANGUAGE_CODE_ROM":         606,
		"ISO639_PART12_LANGUAGE_CODE_RUP":         607,
		"ISO639_PART12_LANGUAGE_CODE_SAD":         608,
		"ISO639_PART12_LANGUAGE_CODE_SAH":         609,
		"ISO639_PART12_LANGUAGE_CODE_SAI":         610,
		"ISO639_PART12_LANGUAGE_CODE_SAL":         611,
		"ISO639_PART12_LANGUAGE_CODE_SAM":         612,
		"ISO639_PART12_LANGUAGE_CODE_SAS":         613,
		"ISO639_PART12_LANGUAGE_CODE_SAT":         614,
		"ISO639_PART12_LANGUAGE_CODE_SCN":         615,
		"ISO639_PART12_LANGUAGE_CODE_SCO":         616,
		"ISO639_PART12_LANGUAGE_CODE_SEL":         617,
		"ISO639_PART12_LANGUAGE_CODE_SEM":         618,
		"ISO639_PART12_LANGUAGE_CODE_SGA":         619,
		"ISO639_PART12_LANGUAGE_CODE_SGN":         620,
		"ISO639_PART12_LANGUAGE_CODE_SHN":         621,
		"ISO639_PART12_LANGUAGE_CODE_SID":         622,
		"ISO639_PART12_LANGUAGE_CODE_SIO":         623,
		"ISO639_PART12_LANGUAGE_CODE_SIT":         624,
		"ISO639_PART12_LANGUAGE_CODE_SLA":         625,
		"ISO639_PART12_LANGUAGE_CODE_SMA":         626,
		"ISO639_PART12_LANGUAGE_CODE_SMI":         627,
		"ISO639_PART12_LANGUAGE_CODE_SMJ":         628,
		"ISO639_PART12_LANGUAGE_CODE_SMN":         629,
		"ISO639_PART12_LANGUAGE_CODE_SMS":         630,
		"ISO639_PART12_LANGUAGE_CODE_SNK":         631,
		"ISO639_PART12_LANGUAGE_CODE_SOG":         632,
		"ISO639_PART12_LANGUAGE_CODE_SON":         633,
		"ISO639_PART12_LANGUAGE_CODE_SRN":         634,
		"ISO639_PART12_LANGUAGE_CODE_SRR":         635,
		"ISO639_PART12_LANGUAGE_CODE_SSA":         636,
		"ISO639_PART12_LANGUAGE_CODE_SUK":         637,
		"ISO639_PART12_LANGUAGE_CODE_SUS":         638,
		"ISO639_PART12_LANGUAGE_CODE_SUX":         639,
		"ISO639_PART12_LANGUAGE_CODE_SYC":         640,
		"ISO639_PART12_LANGUAGE_CODE_SYR":         641,
		"ISO639_PART12_LANGUAGE_CODE_TAI":         642,
		"ISO639_PART12_LANGUAGE_CODE_TEM":         643,
		"ISO639_PART12_LANGUAGE_CODE_TER":         644,
		"ISO639_PART12_LANGUAGE_CODE_TET":         645,
		"ISO639_PART12_LANGUAGE_CODE_TIG":         646,
		"ISO639_PART12_LANGUAGE_CODE_TIV":         647,
		"ISO639_PART12_LANGUAGE_CODE_TKL":         648,
		"ISO639_PART12_LANGUAGE_CODE_TLH":         649,
		"ISO639_PART12_LANGUAGE_CODE_TLI":         650,
		"ISO639_PART12_LANGUAGE_CODE_TMH":         651,
		"ISO639_PART12_LANGUAGE_CODE_TOG":         652,
		"ISO639_PART12_LANGUAGE_CODE_TPI":         653,
		"ISO639_PART12_LANGUAGE_CODE_TSI":         654,
		"ISO639_PART12_LANGUAGE_CODE_TUM":         655,
		"ISO639_PART12_LANGUAGE_CODE_TUP":         656,
		"ISO639_PART12_LANGUAGE_CODE_TUT":         657,
		"ISO639_PART12_LANGUAGE_CODE_TVL":         658,
		"ISO639_PART12_LANGUAGE_CODE_TYV":         659,
		"ISO639_PART12_LANGUAGE_CODE_UDM":         660,
		"ISO639_PART12_LANGUAGE_CODE_UGA":         661,
		"ISO639_PART12_LANGUAGE_CODE_UMB":         662,
		"ISO639_PART12_LANGUAGE_CODE_UND":         663,
		"ISO639_PART12_LANGUAGE_CODE_VAI":         664,
		"ISO639_PART12_LANGUAGE_CODE_VOT":         665,
		"ISO639_PART12_LANGUAGE_CODE_WAK":         666,
		"ISO639_PART12_LANGUAGE_CODE_WAL":         667,
		"ISO639_PART12_LANGUAGE_CODE_WAR":         668,
		"ISO639_PART12_LANGUAGE_CODE_WAS":         669,
		"ISO639_PART12_LANGUAGE_CODE_WEN":         670,
		"ISO639_PART12_LANGUAGE_CODE_XAL":         671,
		"ISO639_PART12_LANGUAGE_CODE_YAO":         672,
		"ISO639_PART12_LANGUAGE_CODE_YAP":         673,
		"ISO639_PART12_LANGUAGE_CODE_YPK":         674,
		"ISO639_PART12_LANGUAGE_CODE_ZAP":         675,
		"ISO639_PART12_LANGUAGE_CODE_ZBL":         676,
		"ISO639_PART12_LANGUAGE_CODE_ZEN":         677,
		"ISO639_PART12_LANGUAGE_CODE_ZGH":         678,
		"ISO639_PART12_LANGUAGE_CODE_ZND":         679,
		"ISO639_PART12_LANGUAGE_CODE_ZUN":         680,
		"ISO639_PART12_LANGUAGE_CODE_ZXX":         681,
		"ISO639_PART12_LANGUAGE_CODE_ZZA":         682,
	}
)

func (x Iso639Part12LanguageCode) Enum() *Iso639Part12LanguageCode {
	p := new(Iso639Part12LanguageCode)
	*p = x
	return p
}

func (x Iso639Part12LanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Iso639Part12LanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[76].Descriptor()
}

func (Iso639Part12LanguageCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[76]
}

func (x Iso639Part12LanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Iso639Part12LanguageCode.Descriptor instead.
func (Iso639Part12LanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{76}
}

type Iso639Part3LanguageCode int32

const (
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_UNSPECIFIED Iso639Part3LanguageCode = 0
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_AAA         Iso639Part3LanguageCode = 1
)

// Enum value maps for Iso639Part3LanguageCode.
var (
	Iso639Part3LanguageCode_name = map[int32]string{
		0: "ISO639_PART3_LANGUAGE_CODE_UNSPECIFIED",
		1: "ISO639_PART3_LANGUAGE_CODE_AAA",
	}
	Iso639Part3LanguageCode_value = map[string]int32{
		"ISO639_PART3_LANGUAGE_CODE_UNSPECIFIED": 0,
		"ISO639_PART3_LANGUAGE_CODE_AAA":         1,
	}
)

func (x Iso639Part3LanguageCode) Enum() *Iso639Part3LanguageCode {
	p := new(Iso639Part3LanguageCode)
	*p = x
	return p
}

func (x Iso639Part3LanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Iso639Part3LanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[77].Descriptor()
}

func (Iso639Part3LanguageCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[77]
}

func (x Iso639Part3LanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Iso639Part3LanguageCode.Descriptor instead.
func (Iso639Part3LanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{77}
}

type IsoCurrencyCode int32

const (
	IsoCurrencyCode_ISO_CURRENCY_CODE_UNSPECIFIED IsoCurrencyCode = 0
	IsoCurrencyCode_ISO_CURRENCY_CODE_AED         IsoCurrencyCode = 1
	IsoCurrencyCode_ISO_CURRENCY_CODE_AFN         IsoCurrencyCode = 2
	IsoCurrencyCode_ISO_CURRENCY_CODE_ALL         IsoCurrencyCode = 3
	IsoCurrencyCode_ISO_CURRENCY_CODE_AMD         IsoCurrencyCode = 4
	IsoCurrencyCode_ISO_CURRENCY_CODE_ANG         IsoCurrencyCode = 5
	IsoCurrencyCode_ISO_CURRENCY_CODE_AOA         IsoCurrencyCode = 6
	IsoCurrencyCode_ISO_CURRENCY_CODE_ARS         IsoCurrencyCode = 7
	IsoCurrencyCode_ISO_CURRENCY_CODE_AUD         IsoCurrencyCode = 8
	IsoCurrencyCode_ISO_CURRENCY_CODE_AWG         IsoCurrencyCode = 9
	IsoCurrencyCode_ISO_CURRENCY_CODE_AZN         IsoCurrencyCode = 10
	IsoCurrencyCode_ISO_CURRENCY_CODE_BAM         IsoCurrencyCode = 11
	IsoCurrencyCode_ISO_CURRENCY_CODE_BBD         IsoCurrencyCode = 12
	IsoCurrencyCode_ISO_CURRENCY_CODE_BDT         IsoCurrencyCode = 13
	IsoCurrencyCode_ISO_CURRENCY_CODE_BGN         IsoCurrencyCode = 14
	IsoCurrencyCode_ISO_CURRENCY_CODE_BHD         IsoCurrencyCode = 15
	IsoCurrencyCode_ISO_CURRENCY_CODE_BIF         IsoCurrencyCode = 16
	IsoCurrencyCode_ISO_CURRENCY_CODE_BMD         IsoCurrencyCode = 17
	IsoCurrencyCode_ISO_CURRENCY_CODE_BND         IsoCurrencyCode = 18
	IsoCurrencyCode_ISO_CURRENCY_CODE_BOB         IsoCurrencyCode = 19
	IsoCurrencyCode_ISO_CURRENCY_CODE_BOV         IsoCurrencyCode = 20
	IsoCurrencyCode_ISO_CURRENCY_CODE_BRL         IsoCurrencyCode = 21
	IsoCurrencyCode_ISO_CURRENCY_CODE_BSD         IsoCurrencyCode = 22
	IsoCurrencyCode_ISO_CURRENCY_CODE_BTN         IsoCurrencyCode = 23
	IsoCurrencyCode_ISO_CURRENCY_CODE_BWP         IsoCurrencyCode = 24
	IsoCurrencyCode_ISO_CURRENCY_CODE_BYR         IsoCurrencyCode = 25
	IsoCurrencyCode_ISO_CURRENCY_CODE_BZD         IsoCurrencyCode = 26
	IsoCurrencyCode_ISO_CURRENCY_CODE_CAD         IsoCurrencyCode = 27
	IsoCurrencyCode_ISO_CURRENCY_CODE_CDF         IsoCurrencyCode = 28
	IsoCurrencyCode_ISO_CURRENCY_CODE_CHF         IsoCurrencyCode = 29
	IsoCurrencyCode_ISO_CURRENCY_CODE_CLF         IsoCurrencyCode = 30
	IsoCurrencyCode_ISO_CURRENCY_CODE_CLP         IsoCurrencyCode = 31
	IsoCurrencyCode_ISO_CURRENCY_CODE_CNY         IsoCurrencyCode = 32
	IsoCurrencyCode_ISO_CURRENCY_CODE_COP         IsoCurrencyCode = 33
	IsoCurrencyCode_ISO_CURRENCY_CODE_COU         IsoCurrencyCode = 34
	IsoCurrencyCode_ISO_CURRENCY_CODE_CRC         IsoCurrencyCode = 35
	IsoCurrencyCode_ISO_CURRENCY_CODE_CUC         IsoCurrencyCode = 36
	IsoCurrencyCode_ISO_CURRENCY_CODE_CUP         IsoCurrencyCode = 37
	IsoCurrencyCode_ISO_CURRENCY_CODE_CVE         IsoCurrencyCode = 38
	IsoCurrencyCode_ISO_CURRENCY_CODE_CZK         IsoCurrencyCode = 39
	IsoCurrencyCode_ISO_CURRENCY_CODE_DJF         IsoCurrencyCode = 40
	IsoCurrencyCode_ISO_CURRENCY_CODE_DKK         IsoCurrencyCode = 41
	IsoCurrencyCode_ISO_CURRENCY_CODE_DOP         IsoCurrencyCode = 42
	IsoCurrencyCode_ISO_CURRENCY_CODE_DZD         IsoCurrencyCode = 43
	IsoCurrencyCode_ISO_CURRENCY_CODE_EGP         IsoCurrencyCode = 44
	IsoCurrencyCode_ISO_CURRENCY_CODE_ERN         IsoCurrencyCode = 45
	IsoCurrencyCode_ISO_CURRENCY_CODE_ETB         IsoCurrencyCode = 46
	IsoCurrencyCode_ISO_CURRENCY_CODE_EUR         IsoCurrencyCode = 47
	IsoCurrencyCode_ISO_CURRENCY_CODE_FJD         IsoCurrencyCode = 48
	IsoCurrencyCode_ISO_CURRENCY_CODE_FKP         IsoCurrencyCode = 49
	IsoCurrencyCode_ISO_CURRENCY_CODE_GBP         IsoCurrencyCode = 50
	IsoCurrencyCode_ISO_CURRENCY_CODE_GEL         IsoCurrencyCode = 51
	IsoCurrencyCode_ISO_CURRENCY_CODE_GHS         IsoCurrencyCode = 52
	IsoCurrencyCode_ISO_CURRENCY_CODE_GIP         IsoCurrencyCode = 53
	IsoCurrencyCode_ISO_CURRENCY_CODE_GMD         IsoCurrencyCode = 54
	IsoCurrencyCode_ISO_CURRENCY_CODE_GNF         IsoCurrencyCode = 55
	IsoCurrencyCode_ISO_CURRENCY_CODE_GTQ         IsoCurrencyCode = 56
	IsoCurrencyCode_ISO_CURRENCY_CODE_GYD         IsoCurrencyCode = 57
	IsoCurrencyCode_ISO_CURRENCY_CODE_HKD         IsoCurrencyCode = 58
	IsoCurrencyCode_ISO_CURRENCY_CODE_HNL         IsoCurrencyCode = 59
	IsoCurrencyCode_ISO_CURRENCY_CODE_HRK         IsoCurrencyCode = 60
	IsoCurrencyCode_ISO_CURRENCY_CODE_HTG         IsoCurrencyCode = 61
	IsoCurrencyCode_ISO_CURRENCY_CODE_HUF         IsoCurrencyCode = 62
	IsoCurrencyCode_ISO_CURRENCY_CODE_IDR         IsoCurrencyCode = 63
	IsoCurrencyCode_ISO_CURRENCY_CODE_ILS         IsoCurrencyCode = 64
	IsoCurrencyCode_ISO_CURRENCY_CODE_INR         IsoCurrencyCode = 65
	IsoCurrencyCode_ISO_CURRENCY_CODE_IQD         IsoCurrencyCode = 66
	IsoCurrencyCode_ISO_CURRENCY_CODE_IRR         IsoCurrencyCode = 67
	IsoCurrencyCode_ISO_CURRENCY_CODE_ISK         IsoCurrencyCode = 68
	IsoCurrencyCode_ISO_CURRENCY_CODE_JMD         IsoCurrencyCode = 69
	IsoCurrencyCode_ISO_CURRENCY_CODE_JOD         IsoCurrencyCode = 70
	IsoCurrencyCode_ISO_CURRENCY_CODE_JPY         IsoCurrencyCode = 71
	IsoCurrencyCode_ISO_CURRENCY_CODE_KES         IsoCurrencyCode = 72
	IsoCurrencyCode_ISO_CURRENCY_CODE_KGS         IsoCurrencyCode = 73
	IsoCurrencyCode_ISO_CURRENCY_CODE_KHR         IsoCurrencyCode = 74
	IsoCurrencyCode_ISO_CURRENCY_CODE_KMF         IsoCurrencyCode = 75
	IsoCurrencyCode_ISO_CURRENCY_CODE_KPW         IsoCurrencyCode = 76
	IsoCurrencyCode_ISO_CURRENCY_CODE_KRW         IsoCurrencyCode = 77
	IsoCurrencyCode_ISO_CURRENCY_CODE_KWD         IsoCurrencyCode = 78
	IsoCurrencyCode_ISO_CURRENCY_CODE_KYD         IsoCurrencyCode = 79
	IsoCurrencyCode_ISO_CURRENCY_CODE_KZT         IsoCurrencyCode = 80
	IsoCurrencyCode_ISO_CURRENCY_CODE_LAK         IsoCurrencyCode = 81
	IsoCurrencyCode_ISO_CURRENCY_CODE_LBP         IsoCurrencyCode = 82
	IsoCurrencyCode_ISO_CURRENCY_CODE_LKR         IsoCurrencyCode = 83
	IsoCurrencyCode_ISO_CURRENCY_CODE_LRD         IsoCurrencyCode = 84
	IsoCurrencyCode_ISO_CURRENCY_CODE_LSL         IsoCurrencyCode = 85
	IsoCurrencyCode_ISO_CURRENCY_CODE_LYD         IsoCurrencyCode = 86
	IsoCurrencyCode_ISO_CURRENCY_CODE_MAD         IsoCurrencyCode = 87
	IsoCurrencyCode_ISO_CURRENCY_CODE_MDL         IsoCurrencyCode = 88
	IsoCurrencyCode_ISO_CURRENCY_CODE_MGA         IsoCurrencyCode = 89
	IsoCurrencyCode_ISO_CURRENCY_CODE_MKD         IsoCurrencyCode = 90
	IsoCurrencyCode_ISO_CURRENCY_CODE_MMK         IsoCurrencyCode = 91
	IsoCurrencyCode_ISO_CURRENCY_CODE_MNT         IsoCurrencyCode = 92
	IsoCurrencyCode_ISO_CURRENCY_CODE_MOP         IsoCurrencyCode = 93
	IsoCurrencyCode_ISO_CURRENCY_CODE_MRU         IsoCurrencyCode = 94
	IsoCurrencyCode_ISO_CURRENCY_CODE_MUR         IsoCurrencyCode = 95
	IsoCurrencyCode_ISO_CURRENCY_CODE_MVR         IsoCurrencyCode = 96
	IsoCurrencyCode_ISO_CURRENCY_CODE_MWK         IsoCurrencyCode = 97
	IsoCurrencyCode_ISO_CURRENCY_CODE_MXN         IsoCurrencyCode = 98
	IsoCurrencyCode_ISO_CURRENCY_CODE_MXV         IsoCurrencyCode = 99
	IsoCurrencyCode_ISO_CURRENCY_CODE_MYR         IsoCurrencyCode = 100
	IsoCurrencyCode_ISO_CURRENCY_CODE_MZN         IsoCurrencyCode = 101
	IsoCurrencyCode_ISO_CURRENCY_CODE_NAD         IsoCurrencyCode = 102
	IsoCurrencyCode_ISO_CURRENCY_CODE_NGN         IsoCurrencyCode = 103
	IsoCurrencyCode_ISO_CURRENCY_CODE_NIO         IsoCurrencyCode = 104
	IsoCurrencyCode_ISO_CURRENCY_CODE_NOK         IsoCurrencyCode = 105
	IsoCurrencyCode_ISO_CURRENCY_CODE_NPR         IsoCurrencyCode = 106
	IsoCurrencyCode_ISO_CURRENCY_CODE_NZD         IsoCurrencyCode = 107
	IsoCurrencyCode_ISO_CURRENCY_CODE_OMR         IsoCurrencyCode = 108
	IsoCurrencyCode_ISO_CURRENCY_CODE_PAB         IsoCurrencyCode = 109
	IsoCurrencyCode_ISO_CURRENCY_CODE_PEN         IsoCurrencyCode = 110
	IsoCurrencyCode_ISO_CURRENCY_CODE_PGK         IsoCurrencyCode = 111
	IsoCurrencyCode_ISO_CURRENCY_CODE_PHP         IsoCurrencyCode = 112
	IsoCurrencyCode_ISO_CURRENCY_CODE_PKR         IsoCurrencyCode = 113
	IsoCurrencyCode_ISO_CURRENCY_CODE_PLN         IsoCurrencyCode = 114
	IsoCurrencyCode_ISO_CURRENCY_CODE_PYG         IsoCurrencyCode = 115
	IsoCurrencyCode_ISO_CURRENCY_CODE_QAR         IsoCurrencyCode = 116
	IsoCurrencyCode_ISO_CURRENCY_CODE_RON         IsoCurrencyCode = 117
	IsoCurrencyCode_ISO_CURRENCY_CODE_RSD         IsoCurrencyCode = 118
	IsoCurrencyCode_ISO_CURRENCY_CODE_RUB         IsoCurrencyCode = 119
	IsoCurrencyCode_ISO_CURRENCY_CODE_RWF         IsoCurrencyCode = 120
	IsoCurrencyCode_ISO_CURRENCY_CODE_SAR         IsoCurrencyCode = 121
	IsoCurrencyCode_ISO_CURRENCY_CODE_SBD         IsoCurrencyCode = 122
	IsoCurrencyCode_ISO_CURRENCY_CODE_SCR         IsoCurrencyCode = 123
	IsoCurrencyCode_ISO_CURRENCY_CODE_SDG         IsoCurrencyCode = 124
	IsoCurrencyCode_ISO_CURRENCY_CODE_SEK         IsoCurrencyCode = 125
	IsoCurrencyCode_ISO_CURRENCY_CODE_SGD         IsoCurrencyCode = 126
	IsoCurrencyCode_ISO_CURRENCY_CODE_SHP         IsoCurrencyCode = 127
	IsoCurrencyCode_ISO_CURRENCY_CODE_SLL         IsoCurrencyCode = 128
	IsoCurrencyCode_ISO_CURRENCY_CODE_SOS         IsoCurrencyCode = 129
	IsoCurrencyCode_ISO_CURRENCY_CODE_SRD         IsoCurrencyCode = 130
	IsoCurrencyCode_ISO_CURRENCY_CODE_SSP         IsoCurrencyCode = 131
	IsoCurrencyCode_ISO_CURRENCY_CODE_STN         IsoCurrencyCode = 132
	IsoCurrencyCode_ISO_CURRENCY_CODE_SVC         IsoCurrencyCode = 133
	IsoCurrencyCode_ISO_CURRENCY_CODE_SYP         IsoCurrencyCode = 134
	IsoCurrencyCode_ISO_CURRENCY_CODE_SZL         IsoCurrencyCode = 135
	IsoCurrencyCode_ISO_CURRENCY_CODE_THB         IsoCurrencyCode = 136
	IsoCurrencyCode_ISO_CURRENCY_CODE_TJS         IsoCurrencyCode = 137
	IsoCurrencyCode_ISO_CURRENCY_CODE_TMT         IsoCurrencyCode = 138
	IsoCurrencyCode_ISO_CURRENCY_CODE_TND         IsoCurrencyCode = 139
	IsoCurrencyCode_ISO_CURRENCY_CODE_TOP         IsoCurrencyCode = 140
	IsoCurrencyCode_ISO_CURRENCY_CODE_TRY         IsoCurrencyCode = 141
	IsoCurrencyCode_ISO_CURRENCY_CODE_TTD         IsoCurrencyCode = 142
	IsoCurrencyCode_ISO_CURRENCY_CODE_TWD         IsoCurrencyCode = 143
	IsoCurrencyCode_ISO_CURRENCY_CODE_TZS         IsoCurrencyCode = 144
	IsoCurrencyCode_ISO_CURRENCY_CODE_UAH         IsoCurrencyCode = 145
	IsoCurrencyCode_ISO_CURRENCY_CODE_UGX         IsoCurrencyCode = 146
	IsoCurrencyCode_ISO_CURRENCY_CODE_USD         IsoCurrencyCode = 147
	IsoCurrencyCode_ISO_CURRENCY_CODE_UYI         IsoCurrencyCode = 148
	IsoCurrencyCode_ISO_CURRENCY_CODE_UYU         IsoCurrencyCode = 149
	IsoCurrencyCode_ISO_CURRENCY_CODE_UZS         IsoCurrencyCode = 150
	IsoCurrencyCode_ISO_CURRENCY_CODE_VES         IsoCurrencyCode = 151
	IsoCurrencyCode_ISO_CURRENCY_CODE_VND         IsoCurrencyCode = 152
	IsoCurrencyCode_ISO_CURRENCY_CODE_VUV         IsoCurrencyCode = 153
	IsoCurrencyCode_ISO_CURRENCY_CODE_WST         IsoCurrencyCode = 154
	IsoCurrencyCode_ISO_CURRENCY_CODE_XAF         IsoCurrencyCode = 155
	IsoCurrencyCode_ISO_CURRENCY_CODE_XCD         IsoCurrencyCode = 156
	IsoCurrencyCode_ISO_CURRENCY_CODE_XOF         IsoCurrencyCode = 157
	IsoCurrencyCode_ISO_CURRENCY_CODE_XPF         IsoCurrencyCode = 158
	IsoCurrencyCode_ISO_CURRENCY_CODE_YER         IsoCurrencyCode = 159
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZAR         IsoCurrencyCode = 160
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZMW         IsoCurrencyCode = 161
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZWL         IsoCurrencyCode = 162
)

// Enum value maps for IsoCurrencyCode.
var (
	IsoCurrencyCode_name = map[int32]string{
		0:   "ISO_CURRENCY_CODE_UNSPECIFIED",
		1:   "ISO_CURRENCY_CODE_AED",
		2:   "ISO_CURRENCY_CODE_AFN",
		3:   "ISO_CURRENCY_CODE_ALL",
		4:   "ISO_CURRENCY_CODE_AMD",
		5:   "ISO_CURRENCY_CODE_ANG",
		6:   "ISO_CURRENCY_CODE_AOA",
		7:   "ISO_CURRENCY_CODE_ARS",
		8:   "ISO_CURRENCY_CODE_AUD",
		9:   "ISO_CURRENCY_CODE_AWG",
		10:  "ISO_CURRENCY_CODE_AZN",
		11:  "ISO_CURRENCY_CODE_BAM",
		12:  "ISO_CURRENCY_CODE_BBD",
		13:  "ISO_CURRENCY_CODE_BDT",
		14:  "ISO_CURRENCY_CODE_BGN",
		15:  "ISO_CURRENCY_CODE_BHD",
		16:  "ISO_CURRENCY_CODE_BIF",
		17:  "ISO_CURRENCY_CODE_BMD",
		18:  "ISO_CURRENCY_CODE_BND",
		19:  "ISO_CURRENCY_CODE_BOB",
		20:  "ISO_CURRENCY_CODE_BOV",
		21:  "ISO_CURRENCY_CODE_BRL",
		22:  "ISO_CURRENCY_CODE_BSD",
		23:  "ISO_CURRENCY_CODE_BTN",
		24:  "ISO_CURRENCY_CODE_BWP",
		25:  "ISO_CURRENCY_CODE_BYR",
		26:  "ISO_CURRENCY_CODE_BZD",
		27:  "ISO_CURRENCY_CODE_CAD",
		28:  "ISO_CURRENCY_CODE_CDF",
		29:  "ISO_CURRENCY_CODE_CHF",
		30:  "ISO_CURRENCY_CODE_CLF",
		31:  "ISO_CURRENCY_CODE_CLP",
		32:  "ISO_CURRENCY_CODE_CNY",
		33:  "ISO_CURRENCY_CODE_COP",
		34:  "ISO_CURRENCY_CODE_COU",
		35:  "ISO_CURRENCY_CODE_CRC",
		36:  "ISO_CURRENCY_CODE_CUC",
		37:  "ISO_CURRENCY_CODE_CUP",
		38:  "ISO_CURRENCY_CODE_CVE",
		39:  "ISO_CURRENCY_CODE_CZK",
		40:  "ISO_CURRENCY_CODE_DJF",
		41:  "ISO_CURRENCY_CODE_DKK",
		42:  "ISO_CURRENCY_CODE_DOP",
		43:  "ISO_CURRENCY_CODE_DZD",
		44:  "ISO_CURRENCY_CODE_EGP",
		45:  "ISO_CURRENCY_CODE_ERN",
		46:  "ISO_CURRENCY_CODE_ETB",
		47:  "ISO_CURRENCY_CODE_EUR",
		48:  "ISO_CURRENCY_CODE_FJD",
		49:  "ISO_CURRENCY_CODE_FKP",
		50:  "ISO_CURRENCY_CODE_GBP",
		51:  "ISO_CURRENCY_CODE_GEL",
		52:  "ISO_CURRENCY_CODE_GHS",
		53:  "ISO_CURRENCY_CODE_GIP",
		54:  "ISO_CURRENCY_CODE_GMD",
		55:  "ISO_CURRENCY_CODE_GNF",
		56:  "ISO_CURRENCY_CODE_GTQ",
		57:  "ISO_CURRENCY_CODE_GYD",
		58:  "ISO_CURRENCY_CODE_HKD",
		59:  "ISO_CURRENCY_CODE_HNL",
		60:  "ISO_CURRENCY_CODE_HRK",
		61:  "ISO_CURRENCY_CODE_HTG",
		62:  "ISO_CURRENCY_CODE_HUF",
		63:  "ISO_CURRENCY_CODE_IDR",
		64:  "ISO_CURRENCY_CODE_ILS",
		65:  "ISO_CURRENCY_CODE_INR",
		66:  "ISO_CURRENCY_CODE_IQD",
		67:  "ISO_CURRENCY_CODE_IRR",
		68:  "ISO_CURRENCY_CODE_ISK",
		69:  "ISO_CURRENCY_CODE_JMD",
		70:  "ISO_CURRENCY_CODE_JOD",
		71:  "ISO_CURRENCY_CODE_JPY",
		72:  "ISO_CURRENCY_CODE_KES",
		73:  "ISO_CURRENCY_CODE_KGS",
		74:  "ISO_CURRENCY_CODE_KHR",
		75:  "ISO_CURRENCY_CODE_KMF",
		76:  "ISO_CURRENCY_CODE_KPW",
		77:  "ISO_CURRENCY_CODE_KRW",
		78:  "ISO_CURRENCY_CODE_KWD",
		79:  "ISO_CURRENCY_CODE_KYD",
		80:  "ISO_CURRENCY_CODE_KZT",
		81:  "ISO_CURRENCY_CODE_LAK",
		82:  "ISO_CURRENCY_CODE_LBP",
		83:  "ISO_CURRENCY_CODE_LKR",
		84:  "ISO_CURRENCY_CODE_LRD",
		85:  "ISO_CURRENCY_CODE_LSL",
		86:  "ISO_CURRENCY_CODE_LYD",
		87:  "ISO_CURRENCY_CODE_MAD",
		88:  "ISO_CURRENCY_CODE_MDL",
		89:  "ISO_CURRENCY_CODE_MGA",
		90:  "ISO_CURRENCY_CODE_MKD",
		91:  "ISO_CURRENCY_CODE_MMK",
		92:  "ISO_CURRENCY_CODE_MNT",
		93:  "ISO_CURRENCY_CODE_MOP",
		94:  "ISO_CURRENCY_CODE_MRU",
		95:  "ISO_CURRENCY_CODE_MUR",
		96:  "ISO_CURRENCY_CODE_MVR",
		97:  "ISO_CURRENCY_CODE_MWK",
		98:  "ISO_CURRENCY_CODE_MXN",
		99:  "ISO_CURRENCY_CODE_MXV",
		100: "ISO_CURRENCY_CODE_MYR",
		101: "ISO_CURRENCY_CODE_MZN",
		102: "ISO_CURRENCY_CODE_NAD",
		103: "ISO_CURRENCY_CODE_NGN",
		104: "ISO_CURRENCY_CODE_NIO",
		105: "ISO_CURRENCY_CODE_NOK",
		106: "ISO_CURRENCY_CODE_NPR",
		107: "ISO_CURRENCY_CODE_NZD",
		108: "ISO_CURRENCY_CODE_OMR",
		109: "ISO_CURRENCY_CODE_PAB",
		110: "ISO_CURRENCY_CODE_PEN",
		111: "ISO_CURRENCY_CODE_PGK",
		112: "ISO_CURRENCY_CODE_PHP",
		113: "ISO_CURRENCY_CODE_PKR",
		114: "ISO_CURRENCY_CODE_PLN",
		115: "ISO_CURRENCY_CODE_PYG",
		116: "ISO_CURRENCY_CODE_QAR",
		117: "ISO_CURRENCY_CODE_RON",
		118: "ISO_CURRENCY_CODE_RSD",
		119: "ISO_CURRENCY_CODE_RUB",
		120: "ISO_CURRENCY_CODE_RWF",
		121: "ISO_CURRENCY_CODE_SAR",
		122: "ISO_CURRENCY_CODE_SBD",
		123: "ISO_CURRENCY_CODE_SCR",
		124: "ISO_CURRENCY_CODE_SDG",
		125: "ISO_CURRENCY_CODE_SEK",
		126: "ISO_CURRENCY_CODE_SGD",
		127: "ISO_CURRENCY_CODE_SHP",
		128: "ISO_CURRENCY_CODE_SLL",
		129: "ISO_CURRENCY_CODE_SOS",
		130: "ISO_CURRENCY_CODE_SRD",
		131: "ISO_CURRENCY_CODE_SSP",
		132: "ISO_CURRENCY_CODE_STN",
		133: "ISO_CURRENCY_CODE_SVC",
		134: "ISO_CURRENCY_CODE_SYP",
		135: "ISO_CURRENCY_CODE_SZL",
		136: "ISO_CURRENCY_CODE_THB",
		137: "ISO_CURRENCY_CODE_TJS",
		138: "ISO_CURRENCY_CODE_TMT",
		139: "ISO_CURRENCY_CODE_TND",
		140: "ISO_CURRENCY_CODE_TOP",
		141: "ISO_CURRENCY_CODE_TRY",
		142: "ISO_CURRENCY_CODE_TTD",
		143: "ISO_CURRENCY_CODE_TWD",
		144: "ISO_CURRENCY_CODE_TZS",
		145: "ISO_CURRENCY_CODE_UAH",
		146: "ISO_CURRENCY_CODE_UGX",
		147: "ISO_CURRENCY_CODE_USD",
		148: "ISO_CURRENCY_CODE_UYI",
		149: "ISO_CURRENCY_CODE_UYU",
		150: "ISO_CURRENCY_CODE_UZS",
		151: "ISO_CURRENCY_CODE_VES",
		152: "ISO_CURRENCY_CODE_VND",
		153: "ISO_CURRENCY_CODE_VUV",
		154: "ISO_CURRENCY_CODE_WST",
		155: "ISO_CURRENCY_CODE_XAF",
		156: "ISO_CURRENCY_CODE_XCD",
		157: "ISO_CURRENCY_CODE_XOF",
		158: "ISO_CURRENCY_CODE_XPF",
		159: "ISO_CURRENCY_CODE_YER",
		160: "ISO_CURRENCY_CODE_ZAR",
		161: "ISO_CURRENCY_CODE_ZMW",
		162: "ISO_CURRENCY_CODE_ZWL",
	}
	IsoCurrencyCode_value = map[string]int32{
		"ISO_CURRENCY_CODE_UNSPECIFIED": 0,
		"ISO_CURRENCY_CODE_AED":         1,
		"ISO_CURRENCY_CODE_AFN":         2,
		"ISO_CURRENCY_CODE_ALL":         3,
		"ISO_CURRENCY_CODE_AMD":         4,
		"ISO_CURRENCY_CODE_ANG":         5,
		"ISO_CURRENCY_CODE_AOA":         6,
		"ISO_CURRENCY_CODE_ARS":         7,
		"ISO_CURRENCY_CODE_AUD":         8,
		"ISO_CURRENCY_CODE_AWG":         9,
		"ISO_CURRENCY_CODE_AZN":         10,
		"ISO_CURRENCY_CODE_BAM":         11,
		"ISO_CURRENCY_CODE_BBD":         12,
		"ISO_CURRENCY_CODE_BDT":         13,
		"ISO_CURRENCY_CODE_BGN":         14,
		"ISO_CURRENCY_CODE_BHD":         15,
		"ISO_CURRENCY_CODE_BIF":         16,
		"ISO_CURRENCY_CODE_BMD":         17,
		"ISO_CURRENCY_CODE_BND":         18,
		"ISO_CURRENCY_CODE_BOB":         19,
		"ISO_CURRENCY_CODE_BOV":         20,
		"ISO_CURRENCY_CODE_BRL":         21,
		"ISO_CURRENCY_CODE_BSD":         22,
		"ISO_CURRENCY_CODE_BTN":         23,
		"ISO_CURRENCY_CODE_BWP":         24,
		"ISO_CURRENCY_CODE_BYR":         25,
		"ISO_CURRENCY_CODE_BZD":         26,
		"ISO_CURRENCY_CODE_CAD":         27,
		"ISO_CURRENCY_CODE_CDF":         28,
		"ISO_CURRENCY_CODE_CHF":         29,
		"ISO_CURRENCY_CODE_CLF":         30,
		"ISO_CURRENCY_CODE_CLP":         31,
		"ISO_CURRENCY_CODE_CNY":         32,
		"ISO_CURRENCY_CODE_COP":         33,
		"ISO_CURRENCY_CODE_COU":         34,
		"ISO_CURRENCY_CODE_CRC":         35,
		"ISO_CURRENCY_CODE_CUC":         36,
		"ISO_CURRENCY_CODE_CUP":         37,
		"ISO_CURRENCY_CODE_CVE":         38,
		"ISO_CURRENCY_CODE_CZK":         39,
		"ISO_CURRENCY_CODE_DJF":         40,
		"ISO_CURRENCY_CODE_DKK":         41,
		"ISO_CURRENCY_CODE_DOP":         42,
		"ISO_CURRENCY_CODE_DZD":         43,
		"ISO_CURRENCY_CODE_EGP":         44,
		"ISO_CURRENCY_CODE_ERN":         45,
		"ISO_CURRENCY_CODE_ETB":         46,
		"ISO_CURRENCY_CODE_EUR":         47,
		"ISO_CURRENCY_CODE_FJD":         48,
		"ISO_CURRENCY_CODE_FKP":         49,
		"ISO_CURRENCY_CODE_GBP":         50,
		"ISO_CURRENCY_CODE_GEL":         51,
		"ISO_CURRENCY_CODE_GHS":         52,
		"ISO_CURRENCY_CODE_GIP":         53,
		"ISO_CURRENCY_CODE_GMD":         54,
		"ISO_CURRENCY_CODE_GNF":         55,
		"ISO_CURRENCY_CODE_GTQ":         56,
		"ISO_CURRENCY_CODE_GYD":         57,
		"ISO_CURRENCY_CODE_HKD":         58,
		"ISO_CURRENCY_CODE_HNL":         59,
		"ISO_CURRENCY_CODE_HRK":         60,
		"ISO_CURRENCY_CODE_HTG":         61,
		"ISO_CURRENCY_CODE_HUF":         62,
		"ISO_CURRENCY_CODE_IDR":         63,
		"ISO_CURRENCY_CODE_ILS":         64,
		"ISO_CURRENCY_CODE_INR":         65,
		"ISO_CURRENCY_CODE_IQD":         66,
		"ISO_CURRENCY_CODE_IRR":         67,
		"ISO_CURRENCY_CODE_ISK":         68,
		"ISO_CURRENCY_CODE_JMD":         69,
		"ISO_CURRENCY_CODE_JOD":         70,
		"ISO_CURRENCY_CODE_JPY":         71,
		"ISO_CURRENCY_CODE_KES":         72,
		"ISO_CURRENCY_CODE_KGS":         73,
		"ISO_CURRENCY_CODE_KHR":         74,
		"ISO_CURRENCY_CODE_KMF":         75,
		"ISO_CURRENCY_CODE_KPW":         76,
		"ISO_CURRENCY_CODE_KRW":         77,
		"ISO_CURRENCY_CODE_KWD":         78,
		"ISO_CURRENCY_CODE_KYD":         79,
		"ISO_CURRENCY_CODE_KZT":         80,
		"ISO_CURRENCY_CODE_LAK":         81,
		"ISO_CURRENCY_CODE_LBP":         82,
		"ISO_CURRENCY_CODE_LKR":         83,
		"ISO_CURRENCY_CODE_LRD":         84,
		"ISO_CURRENCY_CODE_LSL":         85,
		"ISO_CURRENCY_CODE_LYD":         86,
		"ISO_CURRENCY_CODE_MAD":         87,
		"ISO_CURRENCY_CODE_MDL":         88,
		"ISO_CURRENCY_CODE_MGA":         89,
		"ISO_CURRENCY_CODE_MKD":         90,
		"ISO_CURRENCY_CODE_MMK":         91,
		"ISO_CURRENCY_CODE_MNT":         92,
		"ISO_CURRENCY_CODE_MOP":         93,
		"ISO_CURRENCY_CODE_MRU":         94,
		"ISO_CURRENCY_CODE_MUR":         95,
		"ISO_CURRENCY_CODE_MVR":         96,
		"ISO_CURRENCY_CODE_MWK":         97,
		"ISO_CURRENCY_CODE_MXN":         98,
		"ISO_CURRENCY_CODE_MXV":         99,
		"ISO_CURRENCY_CODE_MYR":         100,
		"ISO_CURRENCY_CODE_MZN":         101,
		"ISO_CURRENCY_CODE_NAD":         102,
		"ISO_CURRENCY_CODE_NGN":         103,
		"ISO_CURRENCY_CODE_NIO":         104,
		"ISO_CURRENCY_CODE_NOK":         105,
		"ISO_CURRENCY_CODE_NPR":         106,
		"ISO_CURRENCY_CODE_NZD":         107,
		"ISO_CURRENCY_CODE_OMR":         108,
		"ISO_CURRENCY_CODE_PAB":         109,
		"ISO_CURRENCY_CODE_PEN":         110,
		"ISO_CURRENCY_CODE_PGK":         111,
		"ISO_CURRENCY_CODE_PHP":         112,
		"ISO_CURRENCY_CODE_PKR":         113,
		"ISO_CURRENCY_CODE_PLN":         114,
		"ISO_CURRENCY_CODE_PYG":         115,
		"ISO_CURRENCY_CODE_QAR":         116,
		"ISO_CURRENCY_CODE_RON":         117,
		"ISO_CURRENCY_CODE_RSD":         118,
		"ISO_CURRENCY_CODE_RUB":         119,
		"ISO_CURRENCY_CODE_RWF":         120,
		"ISO_CURRENCY_CODE_SAR":         121,
		"ISO_CURRENCY_CODE_SBD":         122,
		"ISO_CURRENCY_CODE_SCR":         123,
		"ISO_CURRENCY_CODE_SDG":         124,
		"ISO_CURRENCY_CODE_SEK":         125,
		"ISO_CURRENCY_CODE_SGD":         126,
		"ISO_CURRENCY_CODE_SHP":         127,
		"ISO_CURRENCY_CODE_SLL":         128,
		"ISO_CURRENCY_CODE_SOS":         129,
		"ISO_CURRENCY_CODE_SRD":         130,
		"ISO_CURRENCY_CODE_SSP":         131,
		"ISO_CURRENCY_CODE_STN":         132,
		"ISO_CURRENCY_CODE_SVC":         133,
		"ISO_CURRENCY_CODE_SYP":         134,
		"ISO_CURRENCY_CODE_SZL":         135,
		"ISO_CURRENCY_CODE_THB":         136,
		"ISO_CURRENCY_CODE_TJS":         137,
		"ISO_CURRENCY_CODE_TMT":         138,
		"ISO_CURRENCY_CODE_TND":         139,
		"ISO_CURRENCY_CODE_TOP":         140,
		"ISO_CURRENCY_CODE_TRY":         141,
		"ISO_CURRENCY_CODE_TTD":         142,
		"ISO_CURRENCY_CODE_TWD":         143,
		"ISO_CURRENCY_CODE_TZS":         144,
		"ISO_CURRENCY_CODE_UAH":         145,
		"ISO_CURRENCY_CODE_UGX":         146,
		"ISO_CURRENCY_CODE_USD":         147,
		"ISO_CURRENCY_CODE_UYI":         148,
		"ISO_CURRENCY_CODE_UYU":         149,
		"ISO_CURRENCY_CODE_UZS":         150,
		"ISO_CURRENCY_CODE_VES":         151,
		"ISO_CURRENCY_CODE_VND":         152,
		"ISO_CURRENCY_CODE_VUV":         153,
		"ISO_CURRENCY_CODE_WST":         154,
		"ISO_CURRENCY_CODE_XAF":         155,
		"ISO_CURRENCY_CODE_XCD":         156,
		"ISO_CURRENCY_CODE_XOF":         157,
		"ISO_CURRENCY_CODE_XPF":         158,
		"ISO_CURRENCY_CODE_YER":         159,
		"ISO_CURRENCY_CODE_ZAR":         160,
		"ISO_CURRENCY_CODE_ZMW":         161,
		"ISO_CURRENCY_CODE_ZWL":         162,
	}
)

func (x IsoCurrencyCode) Enum() *IsoCurrencyCode {
	p := new(IsoCurrencyCode)
	*p = x
	return p
}

func (x IsoCurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoCurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[78].Descriptor()
}

func (IsoCurrencyCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[78]
}

func (x IsoCurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoCurrencyCode.Descriptor instead.
func (IsoCurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{78}
}

type IsoLanguageCode int32

const (
	IsoLanguageCode_ISO_LANGUAGE_CODE_UNSPECIFIED IsoLanguageCode = 0
	IsoLanguageCode_ISO_LANGUAGE_CODE_AA          IsoLanguageCode = 1
	IsoLanguageCode_ISO_LANGUAGE_CODE_AAR         IsoLanguageCode = 2
	IsoLanguageCode_ISO_LANGUAGE_CODE_AB          IsoLanguageCode = 3
	IsoLanguageCode_ISO_LANGUAGE_CODE_ABK         IsoLanguageCode = 4
	IsoLanguageCode_ISO_LANGUAGE_CODE_AE          IsoLanguageCode = 5
	IsoLanguageCode_ISO_LANGUAGE_CODE_AVE         IsoLanguageCode = 6
	IsoLanguageCode_ISO_LANGUAGE_CODE_AF          IsoLanguageCode = 7
	IsoLanguageCode_ISO_LANGUAGE_CODE_AFR         IsoLanguageCode = 8
	IsoLanguageCode_ISO_LANGUAGE_CODE_AK          IsoLanguageCode = 9
	IsoLanguageCode_ISO_LANGUAGE_CODE_AKA         IsoLanguageCode = 10
	IsoLanguageCode_ISO_LANGUAGE_CODE_AM          IsoLanguageCode = 11
	IsoLanguageCode_ISO_LANGUAGE_CODE_AMH         IsoLanguageCode = 12
	IsoLanguageCode_ISO_LANGUAGE_CODE_AN          IsoLanguageCode = 13
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARG         IsoLanguageCode = 14
	IsoLanguageCode_ISO_LANGUAGE_CODE_AR          IsoLanguageCode = 15
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARA         IsoLanguageCode = 16
	IsoLanguageCode_ISO_LANGUAGE_CODE_AS          IsoLanguageCode = 17
	IsoLanguageCode_ISO_LANGUAGE_CODE_ASM         IsoLanguageCode = 18
	IsoLanguageCode_ISO_LANGUAGE_CODE_AV          IsoLanguageCode = 19
	IsoLanguageCode_ISO_LANGUAGE_CODE_AVA         IsoLanguageCode = 20
	IsoLanguageCode_ISO_LANGUAGE_CODE_AY          IsoLanguageCode = 21
	IsoLanguageCode_ISO_LANGUAGE_CODE_AYM         IsoLanguageCode = 22
	IsoLanguageCode_ISO_LANGUAGE_CODE_AZ          IsoLanguageCode = 23
	IsoLanguageCode_ISO_LANGUAGE_CODE_AZE         IsoLanguageCode = 24
	IsoLanguageCode_ISO_LANGUAGE_CODE_BA          IsoLanguageCode = 25
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAK         IsoLanguageCode = 26
	IsoLanguageCode_ISO_LANGUAGE_CODE_BE          IsoLanguageCode = 27
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEL         IsoLanguageCode = 28
	IsoLanguageCode_ISO_LANGUAGE_CODE_BG          IsoLanguageCode = 29
	IsoLanguageCode_ISO_LANGUAGE_CODE_BUL         IsoLanguageCode = 30
	IsoLanguageCode_ISO_LANGUAGE_CODE_BH          IsoLanguageCode = 31
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIH         IsoLanguageCode = 32
	IsoLanguageCode_ISO_LANGUAGE_CODE_BI          IsoLanguageCode = 33
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIS         IsoLanguageCode = 34
	IsoLanguageCode_ISO_LANGUAGE_CODE_BM          IsoLanguageCode = 35
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAM         IsoLanguageCode = 36
	IsoLanguageCode_ISO_LANGUAGE_CODE_BN          IsoLanguageCode = 37
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEN         IsoLanguageCode = 38
	IsoLanguageCode_ISO_LANGUAGE_CODE_BO          IsoLanguageCode = 39
	IsoLanguageCode_ISO_LANGUAGE_CODE_BOD         IsoLanguageCode = 40
	IsoLanguageCode_ISO_LANGUAGE_CODE_BR          IsoLanguageCode = 41
	IsoLanguageCode_ISO_LANGUAGE_CODE_BRE         IsoLanguageCode = 42
	IsoLanguageCode_ISO_LANGUAGE_CODE_BS          IsoLanguageCode = 43
	IsoLanguageCode_ISO_LANGUAGE_CODE_BOS         IsoLanguageCode = 44
	IsoLanguageCode_ISO_LANGUAGE_CODE_CA          IsoLanguageCode = 45
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAT         IsoLanguageCode = 46
	IsoLanguageCode_ISO_LANGUAGE_CODE_CE          IsoLanguageCode = 47
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHE         IsoLanguageCode = 48
	IsoLanguageCode_ISO_LANGUAGE_CODE_CH          IsoLanguageCode = 49
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHA         IsoLanguageCode = 50
	IsoLanguageCode_ISO_LANGUAGE_CODE_CO          IsoLanguageCode = 51
	IsoLanguageCode_ISO_LANGUAGE_CODE_COS         IsoLanguageCode = 52
	IsoLanguageCode_ISO_LANGUAGE_CODE_CR          IsoLanguageCode = 53
	IsoLanguageCode_ISO_LANGUAGE_CODE_CRE         IsoLanguageCode = 54
	IsoLanguageCode_ISO_LANGUAGE_CODE_CS          IsoLanguageCode = 55
	IsoLanguageCode_ISO_LANGUAGE_CODE_CES         IsoLanguageCode = 56
	IsoLanguageCode_ISO_LANGUAGE_CODE_CU          IsoLanguageCode = 57
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHU         IsoLanguageCode = 58
	IsoLanguageCode_ISO_LANGUAGE_CODE_CV          IsoLanguageCode = 59
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHV         IsoLanguageCode = 60
	IsoLanguageCode_ISO_LANGUAGE_CODE_CY          IsoLanguageCode = 61
	IsoLanguageCode_ISO_LANGUAGE_CODE_CYM         IsoLanguageCode = 62
	IsoLanguageCode_ISO_LANGUAGE_CODE_DA          IsoLanguageCode = 63
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAN         IsoLanguageCode = 64
	IsoLanguageCode_ISO_LANGUAGE_CODE_DE          IsoLanguageCode = 65
	IsoLanguageCode_ISO_LANGUAGE_CODE_DEU         IsoLanguageCode = 66
	IsoLanguageCode_ISO_LANGUAGE_CODE_DV          IsoLanguageCode = 67
	IsoLanguageCode_ISO_LANGUAGE_CODE_DIV         IsoLanguageCode = 68
	IsoLanguageCode_ISO_LANGUAGE_CODE_DZ          IsoLanguageCode = 69
	IsoLanguageCode_ISO_LANGUAGE_CODE_DZO         IsoLanguageCode = 70
	IsoLanguageCode_ISO_LANGUAGE_CODE_EE          IsoLanguageCode = 71
	IsoLanguageCode_ISO_LANGUAGE_CODE_EWE         IsoLanguageCode = 72
	IsoLanguageCode_ISO_LANGUAGE_CODE_EL          IsoLanguageCode = 73
	IsoLanguageCode_ISO_LANGUAGE_CODE_ELL         IsoLanguageCode = 74
	IsoLanguageCode_ISO_LANGUAGE_CODE_EN          IsoLanguageCode = 75
	IsoLanguageCode_ISO_LANGUAGE_CODE_ENG         IsoLanguageCode = 76
	IsoLanguageCode_ISO_LANGUAGE_CODE_EO          IsoLanguageCode = 77
	IsoLanguageCode_ISO_LANGUAGE_CODE_EPO         IsoLanguageCode = 78
	IsoLanguageCode_ISO_LANGUAGE_CODE_ES          IsoLanguageCode = 79
	IsoLanguageCode_ISO_LANGUAGE_CODE_SPA         IsoLanguageCode = 80
	IsoLanguageCode_ISO_LANGUAGE_CODE_ET          IsoLanguageCode = 81
	IsoLanguageCode_ISO_LANGUAGE_CODE_EST         IsoLanguageCode = 82
	IsoLanguageCode_ISO_LANGUAGE_CODE_EU          IsoLanguageCode = 83
	IsoLanguageCode_ISO_LANGUAGE_CODE_EUS         IsoLanguageCode = 84
	IsoLanguageCode_ISO_LANGUAGE_CODE_FA          IsoLanguageCode = 85
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAS         IsoLanguageCode = 86
	IsoLanguageCode_ISO_LANGUAGE_CODE_FF          IsoLanguageCode = 87
	IsoLanguageCode_ISO_LANGUAGE_CODE_FUL         IsoLanguageCode = 88
	IsoLanguageCode_ISO_LANGUAGE_CODE_FI          IsoLanguageCode = 89
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIN         IsoLanguageCode = 90
	IsoLanguageCode_ISO_LANGUAGE_CODE_FJ          IsoLanguageCode = 91
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIJ         IsoLanguageCode = 92
	IsoLanguageCode_ISO_LANGUAGE_CODE_FO          IsoLanguageCode = 93
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAO         IsoLanguageCode = 94
	IsoLanguageCode_ISO_LANGUAGE_CODE_FR          IsoLanguageCode = 95
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRA         IsoLanguageCode = 96
	IsoLanguageCode_ISO_LANGUAGE_CODE_FY          IsoLanguageCode = 97
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRY         IsoLanguageCode = 98
	IsoLanguageCode_ISO_LANGUAGE_CODE_GA          IsoLanguageCode = 99
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLE         IsoLanguageCode = 100
	IsoLanguageCode_ISO_LANGUAGE_CODE_GD          IsoLanguageCode = 101
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLA         IsoLanguageCode = 102
	IsoLanguageCode_ISO_LANGUAGE_CODE_GL          IsoLanguageCode = 103
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLG         IsoLanguageCode = 104
	IsoLanguageCode_ISO_LANGUAGE_CODE_GN          IsoLanguageCode = 105
	IsoLanguageCode_ISO_LANGUAGE_CODE_GRN         IsoLanguageCode = 106
	IsoLanguageCode_ISO_LANGUAGE_CODE_GU          IsoLanguageCode = 107
	IsoLanguageCode_ISO_LANGUAGE_CODE_GUJ         IsoLanguageCode = 108
	IsoLanguageCode_ISO_LANGUAGE_CODE_GV          IsoLanguageCode = 109
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLV         IsoLanguageCode = 110
	IsoLanguageCode_ISO_LANGUAGE_CODE_HA          IsoLanguageCode = 111
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAU         IsoLanguageCode = 112
	IsoLanguageCode_ISO_LANGUAGE_CODE_HE          IsoLanguageCode = 113
	IsoLanguageCode_ISO_LANGUAGE_CODE_HEB         IsoLanguageCode = 114
	IsoLanguageCode_ISO_LANGUAGE_CODE_HI          IsoLanguageCode = 115
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIN         IsoLanguageCode = 116
	IsoLanguageCode_ISO_LANGUAGE_CODE_HO          IsoLanguageCode = 117
	IsoLanguageCode_ISO_LANGUAGE_CODE_HMO         IsoLanguageCode = 118
	IsoLanguageCode_ISO_LANGUAGE_CODE_HR          IsoLanguageCode = 119
	IsoLanguageCode_ISO_LANGUAGE_CODE_HRV         IsoLanguageCode = 120
	IsoLanguageCode_ISO_LANGUAGE_CODE_HT          IsoLanguageCode = 121
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAT         IsoLanguageCode = 122
	IsoLanguageCode_ISO_LANGUAGE_CODE_HU          IsoLanguageCode = 123
	IsoLanguageCode_ISO_LANGUAGE_CODE_HUN         IsoLanguageCode = 124
	IsoLanguageCode_ISO_LANGUAGE_CODE_HY          IsoLanguageCode = 125
	IsoLanguageCode_ISO_LANGUAGE_CODE_HYE         IsoLanguageCode = 126
	IsoLanguageCode_ISO_LANGUAGE_CODE_HZ          IsoLanguageCode = 127
	IsoLanguageCode_ISO_LANGUAGE_CODE_HER         IsoLanguageCode = 128
	IsoLanguageCode_ISO_LANGUAGE_CODE_IA          IsoLanguageCode = 129
	IsoLanguageCode_ISO_LANGUAGE_CODE_INA         IsoLanguageCode = 130
	IsoLanguageCode_ISO_LANGUAGE_CODE_ID          IsoLanguageCode = 131
	IsoLanguageCode_ISO_LANGUAGE_CODE_IND         IsoLanguageCode = 132
	IsoLanguageCode_ISO_LANGUAGE_CODE_IE          IsoLanguageCode = 133
	IsoLanguageCode_ISO_LANGUAGE_CODE_ILE         IsoLanguageCode = 134
	IsoLanguageCode_ISO_LANGUAGE_CODE_IG          IsoLanguageCode = 135
	IsoLanguageCode_ISO_LANGUAGE_CODE_IBO         IsoLanguageCode = 136
	IsoLanguageCode_ISO_LANGUAGE_CODE_II          IsoLanguageCode = 137
	IsoLanguageCode_ISO_LANGUAGE_CODE_III         IsoLanguageCode = 138
	IsoLanguageCode_ISO_LANGUAGE_CODE_IK          IsoLanguageCode = 139
	IsoLanguageCode_ISO_LANGUAGE_CODE_IPK         IsoLanguageCode = 140
	IsoLanguageCode_ISO_LANGUAGE_CODE_IO          IsoLanguageCode = 141
	IsoLanguageCode_ISO_LANGUAGE_CODE_IDO         IsoLanguageCode = 142
	IsoLanguageCode_ISO_LANGUAGE_CODE_IS          IsoLanguageCode = 143
	IsoLanguageCode_ISO_LANGUAGE_CODE_ISL         IsoLanguageCode = 144
	IsoLanguageCode_ISO_LANGUAGE_CODE_IT          IsoLanguageCode = 145
	IsoLanguageCode_ISO_LANGUAGE_CODE_ITA         IsoLanguageCode = 146
	IsoLanguageCode_ISO_LANGUAGE_CODE_IU          IsoLanguageCode = 147
	IsoLanguageCode_ISO_LANGUAGE_CODE_IKU         IsoLanguageCode = 148
	IsoLanguageCode_ISO_LANGUAGE_CODE_JA          IsoLanguageCode = 149
	IsoLanguageCode_ISO_LANGUAGE_CODE_JPN         IsoLanguageCode = 150
	IsoLanguageCode_ISO_LANGUAGE_CODE_JV          IsoLanguageCode = 151
	IsoLanguageCode_ISO_LANGUAGE_CODE_JAV         IsoLanguageCode = 152
	IsoLanguageCode_ISO_LANGUAGE_CODE_KA          IsoLanguageCode = 153
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAT         IsoLanguageCode = 154
	IsoLanguageCode_ISO_LANGUAGE_CODE_KG          IsoLanguageCode = 155
	IsoLanguageCode_ISO_LANGUAGE_CODE_KON         IsoLanguageCode = 156
	IsoLanguageCode_ISO_LANGUAGE_CODE_KI          IsoLanguageCode = 157
	IsoLanguageCode_ISO_LANGUAGE_CODE_KIK         IsoLanguageCode = 158
	IsoLanguageCode_ISO_LANGUAGE_CODE_KJ          IsoLanguageCode = 159
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUA         IsoLanguageCode = 160
	IsoLanguageCode_ISO_LANGUAGE_CODE_KK          IsoLanguageCode = 161
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAZ         IsoLanguageCode = 162
	IsoLanguageCode_ISO_LANGUAGE_CODE_KL          IsoLanguageCode = 163
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAL         IsoLanguageCode = 164
	IsoLanguageCode_ISO_LANGUAGE_CODE_KM          IsoLanguageCode = 165
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHM         IsoLanguageCode = 166
	IsoLanguageCode_ISO_LANGUAGE_CODE_KN          IsoLanguageCode = 167
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAN         IsoLanguageCode = 168
	IsoLanguageCode_ISO_LANGUAGE_CODE_KO          IsoLanguageCode = 169
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOR         IsoLanguageCode = 170
	IsoLanguageCode_ISO_LANGUAGE_CODE_KR          IsoLanguageCode = 171
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAU         IsoLanguageCode = 172
	IsoLanguageCode_ISO_LANGUAGE_CODE_KS          IsoLanguageCode = 173
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAS         IsoLanguageCode = 174
	IsoLanguageCode_ISO_LANGUAGE_CODE_KU          IsoLanguageCode = 175
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUR         IsoLanguageCode = 176
	IsoLanguageCode_ISO_LANGUAGE_CODE_KV          IsoLanguageCode = 177
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOM         IsoLanguageCode = 178
	IsoLanguageCode_ISO_LANGUAGE_CODE_KW          IsoLanguageCode = 179
	IsoLanguageCode_ISO_LANGUAGE_CODE_COR         IsoLanguageCode = 180
	IsoLanguageCode_ISO_LANGUAGE_CODE_KY          IsoLanguageCode = 181
	IsoLanguageCode_ISO_LANGUAGE_CODE_KIR         IsoLanguageCode = 182
	IsoLanguageCode_ISO_LANGUAGE_CODE_LA          IsoLanguageCode = 183
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAT         IsoLanguageCode = 184
	IsoLanguageCode_ISO_LANGUAGE_CODE_LB          IsoLanguageCode = 185
	IsoLanguageCode_ISO_LANGUAGE_CODE_LTZ         IsoLanguageCode = 186
	IsoLanguageCode_ISO_LANGUAGE_CODE_LG          IsoLanguageCode = 187
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUG         IsoLanguageCode = 188
	IsoLanguageCode_ISO_LANGUAGE_CODE_LI          IsoLanguageCode = 189
	IsoLanguageCode_ISO_LANGUAGE_CODE_LIM         IsoLanguageCode = 190
	IsoLanguageCode_ISO_LANGUAGE_CODE_LN          IsoLanguageCode = 191
	IsoLanguageCode_ISO_LANGUAGE_CODE_LIN         IsoLanguageCode = 192
	IsoLanguageCode_ISO_LANGUAGE_CODE_LO          IsoLanguageCode = 193
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAO         IsoLanguageCode = 194
	IsoLanguageCode_ISO_LANGUAGE_CODE_LT          IsoLanguageCode = 195
	IsoLanguageCode_ISO_LANGUAGE_CODE_LIT         IsoLanguageCode = 196
	IsoLanguageCode_ISO_LANGUAGE_CODE_LU          IsoLanguageCode = 197
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUB         IsoLanguageCode = 198
	IsoLanguageCode_ISO_LANGUAGE_CODE_LV          IsoLanguageCode = 199
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAV         IsoLanguageCode = 200
	IsoLanguageCode_ISO_LANGUAGE_CODE_MG          IsoLanguageCode = 201
	IsoLanguageCode_ISO_LANGUAGE_CODE_MLG         IsoLanguageCode = 202
	IsoLanguageCode_ISO_LANGUAGE_CODE_MH          IsoLanguageCode = 203
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAH         IsoLanguageCode = 204
	IsoLanguageCode_ISO_LANGUAGE_CODE_MI          IsoLanguageCode = 205
	IsoLanguageCode_ISO_LANGUAGE_CODE_MRI         IsoLanguageCode = 206
	IsoLanguageCode_ISO_LANGUAGE_CODE_MK          IsoLanguageCode = 207
	IsoLanguageCode_ISO_LANGUAGE_CODE_MKD         IsoLanguageCode = 208
	IsoLanguageCode_ISO_LANGUAGE_CODE_ML          IsoLanguageCode = 209
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAL         IsoLanguageCode = 210
	IsoLanguageCode_ISO_LANGUAGE_CODE_MN          IsoLanguageCode = 211
	IsoLanguageCode_ISO_LANGUAGE_CODE_MON         IsoLanguageCode = 212
	IsoLanguageCode_ISO_LANGUAGE_CODE_MO          IsoLanguageCode = 213
	IsoLanguageCode_ISO_LANGUAGE_CODE_MR          IsoLanguageCode = 214
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAR         IsoLanguageCode = 215
	IsoLanguageCode_ISO_LANGUAGE_CODE_MS          IsoLanguageCode = 216
	IsoLanguageCode_ISO_LANGUAGE_CODE_MSA         IsoLanguageCode = 217
	IsoLanguageCode_ISO_LANGUAGE_CODE_MT          IsoLanguageCode = 218
	IsoLanguageCode_ISO_LANGUAGE_CODE_MLT         IsoLanguageCode = 219
	IsoLanguageCode_ISO_LANGUAGE_CODE_MY          IsoLanguageCode = 220
	IsoLanguageCode_ISO_LANGUAGE_CODE_MYA         IsoLanguageCode = 221
	IsoLanguageCode_ISO_LANGUAGE_CODE_NA          IsoLanguageCode = 222
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAU         IsoLanguageCode = 223
	IsoLanguageCode_ISO_LANGUAGE_CODE_NB          IsoLanguageCode = 224
	IsoLanguageCode_ISO_LANGUAGE_CODE_NOB         IsoLanguageCode = 225
	IsoLanguageCode_ISO_LANGUAGE_CODE_ND          IsoLanguageCode = 226
	IsoLanguageCode_ISO_LANGUAGE_CODE_NDE         IsoLanguageCode = 227
	IsoLanguageCode_ISO_LANGUAGE_CODE_NE          IsoLanguageCode = 228
	IsoLanguageCode_ISO_LANGUAGE_CODE_NEP         IsoLanguageCode = 229
	IsoLanguageCode_ISO_LANGUAGE_CODE_NG          IsoLanguageCode = 230
	IsoLanguageCode_ISO_LANGUAGE_CODE_NDO         IsoLanguageCode = 231
	IsoLanguageCode_ISO_LANGUAGE_CODE_NL          IsoLanguageCode = 232
	IsoLanguageCode_ISO_LANGUAGE_CODE_NLD         IsoLanguageCode = 233
	IsoLanguageCode_ISO_LANGUAGE_CODE_NN          IsoLanguageCode = 234
	IsoLanguageCode_ISO_LANGUAGE_CODE_NNO         IsoLanguageCode = 235
	IsoLanguageCode_ISO_LANGUAGE_CODE_NO          IsoLanguageCode = 236
	IsoLanguageCode_ISO_LANGUAGE_CODE_NOR         IsoLanguageCode = 237
	IsoLanguageCode_ISO_LANGUAGE_CODE_NR          IsoLanguageCode = 238
	IsoLanguageCode_ISO_LANGUAGE_CODE_NBL         IsoLanguageCode = 239
	IsoLanguageCode_ISO_LANGUAGE_CODE_NV          IsoLanguageCode = 240
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAV         IsoLanguageCode = 241
	IsoLanguageCode_ISO_LANGUAGE_CODE_NY          IsoLanguageCode = 242
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYA         IsoLanguageCode = 243
	IsoLanguageCode_ISO_LANGUAGE_CODE_OC          IsoLanguageCode = 244
	IsoLanguageCode_ISO_LANGUAGE_CODE_OCI         IsoLanguageCode = 245
	IsoLanguageCode_ISO_LANGUAGE_CODE_OJ          IsoLanguageCode = 246
	IsoLanguageCode_ISO_LANGUAGE_CODE_OJI         IsoLanguageCode = 247
	IsoLanguageCode_ISO_LANGUAGE_CODE_OM          IsoLanguageCode = 248
	IsoLanguageCode_ISO_LANGUAGE_CODE_ORM         IsoLanguageCode = 249
	IsoLanguageCode_ISO_LANGUAGE_CODE_OR          IsoLanguageCode = 250
	IsoLanguageCode_ISO_LANGUAGE_CODE_ORI         IsoLanguageCode = 251
	IsoLanguageCode_ISO_LANGUAGE_CODE_OS          IsoLanguageCode = 252
	IsoLanguageCode_ISO_LANGUAGE_CODE_OSS         IsoLanguageCode = 253
	IsoLanguageCode_ISO_LANGUAGE_CODE_PA          IsoLanguageCode = 254
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAN         IsoLanguageCode = 255
	IsoLanguageCode_ISO_LANGUAGE_CODE_PI          IsoLanguageCode = 256
	IsoLanguageCode_ISO_LANGUAGE_CODE_PLI         IsoLanguageCode = 257
	IsoLanguageCode_ISO_LANGUAGE_CODE_PL          IsoLanguageCode = 258
	IsoLanguageCode_ISO_LANGUAGE_CODE_POL         IsoLanguageCode = 259
	IsoLanguageCode_ISO_LANGUAGE_CODE_PS          IsoLanguageCode = 260
	IsoLanguageCode_ISO_LANGUAGE_CODE_PUS         IsoLanguageCode = 261
	IsoLanguageCode_ISO_LANGUAGE_CODE_PT          IsoLanguageCode = 262
	IsoLanguageCode_ISO_LANGUAGE_CODE_POR         IsoLanguageCode = 263
	IsoLanguageCode_ISO_LANGUAGE_CODE_QU          IsoLanguageCode = 264
	IsoLanguageCode_ISO_LANGUAGE_CODE_QUE         IsoLanguageCode = 265
	IsoLanguageCode_ISO_LANGUAGE_CODE_RM          IsoLanguageCode = 266
	IsoLanguageCode_ISO_LANGUAGE_CODE_ROH         IsoLanguageCode = 267
	IsoLanguageCode_ISO_LANGUAGE_CODE_RN          IsoLanguageCode = 268
	IsoLanguageCode_ISO_LANGUAGE_CODE_RUN         IsoLanguageCode = 269
	IsoLanguageCode_ISO_LANGUAGE_CODE_RO          IsoLanguageCode = 270
	IsoLanguageCode_ISO_LANGUAGE_CODE_RON         IsoLanguageCode = 271
	IsoLanguageCode_ISO_LANGUAGE_CODE_RU          IsoLanguageCode = 272
	IsoLanguageCode_ISO_LANGUAGE_CODE_RUS         IsoLanguageCode = 273
	IsoLanguageCode_ISO_LANGUAGE_CODE_RW          IsoLanguageCode = 274
	IsoLanguageCode_ISO_LANGUAGE_CODE_KIN         IsoLanguageCode = 275
	IsoLanguageCode_ISO_LANGUAGE_CODE_SA          IsoLanguageCode = 276
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAN         IsoLanguageCode = 277
	IsoLanguageCode_ISO_LANGUAGE_CODE_SC          IsoLanguageCode = 278
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRD         IsoLanguageCode = 279
	IsoLanguageCode_ISO_LANGUAGE_CODE_SD          IsoLanguageCode = 280
	IsoLanguageCode_ISO_LANGUAGE_CODE_SND         IsoLanguageCode = 281
	IsoLanguageCode_ISO_LANGUAGE_CODE_SE          IsoLanguageCode = 282
	IsoLanguageCode_ISO_LANGUAGE_CODE_SME         IsoLanguageCode = 283
	IsoLanguageCode_ISO_LANGUAGE_CODE_SG          IsoLanguageCode = 284
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAG         IsoLanguageCode = 285
	IsoLanguageCode_ISO_LANGUAGE_CODE_SI          IsoLanguageCode = 286
	IsoLanguageCode_ISO_LANGUAGE_CODE_SIN         IsoLanguageCode = 287
	IsoLanguageCode_ISO_LANGUAGE_CODE_SK          IsoLanguageCode = 288
	IsoLanguageCode_ISO_LANGUAGE_CODE_SLK         IsoLanguageCode = 289
	IsoLanguageCode_ISO_LANGUAGE_CODE_SL          IsoLanguageCode = 290
	IsoLanguageCode_ISO_LANGUAGE_CODE_SLV         IsoLanguageCode = 291
	IsoLanguageCode_ISO_LANGUAGE_CODE_SM          IsoLanguageCode = 292
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMO         IsoLanguageCode = 293
	IsoLanguageCode_ISO_LANGUAGE_CODE_SN          IsoLanguageCode = 294
	IsoLanguageCode_ISO_LANGUAGE_CODE_SNA         IsoLanguageCode = 295
	IsoLanguageCode_ISO_LANGUAGE_CODE_SO          IsoLanguageCode = 296
	IsoLanguageCode_ISO_LANGUAGE_CODE_SOM         IsoLanguageCode = 297
	IsoLanguageCode_ISO_LANGUAGE_CODE_SQ          IsoLanguageCode = 298
	IsoLanguageCode_ISO_LANGUAGE_CODE_SQI         IsoLanguageCode = 299
	IsoLanguageCode_ISO_LANGUAGE_CODE_SR          IsoLanguageCode = 300
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRP         IsoLanguageCode = 301
	IsoLanguageCode_ISO_LANGUAGE_CODE_SS          IsoLanguageCode = 302
	IsoLanguageCode_ISO_LANGUAGE_CODE_SSW         IsoLanguageCode = 303
	IsoLanguageCode_ISO_LANGUAGE_CODE_ST          IsoLanguageCode = 304
	IsoLanguageCode_ISO_LANGUAGE_CODE_SOT         IsoLanguageCode = 305
	IsoLanguageCode_ISO_LANGUAGE_CODE_SU          IsoLanguageCode = 306
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUN         IsoLanguageCode = 307
	IsoLanguageCode_ISO_LANGUAGE_CODE_SV          IsoLanguageCode = 308
	IsoLanguageCode_ISO_LANGUAGE_CODE_SWE         IsoLanguageCode = 309
	IsoLanguageCode_ISO_LANGUAGE_CODE_SW          IsoLanguageCode = 310
	IsoLanguageCode_ISO_LANGUAGE_CODE_SWA         IsoLanguageCode = 311
	IsoLanguageCode_ISO_LANGUAGE_CODE_TA          IsoLanguageCode = 312
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAM         IsoLanguageCode = 313
	IsoLanguageCode_ISO_LANGUAGE_CODE_TE          IsoLanguageCode = 314
	IsoLanguageCode_ISO_LANGUAGE_CODE_TEL         IsoLanguageCode = 315
	IsoLanguageCode_ISO_LANGUAGE_CODE_TG          IsoLanguageCode = 316
	IsoLanguageCode_ISO_LANGUAGE_CODE_TGK         IsoLanguageCode = 317
	IsoLanguageCode_ISO_LANGUAGE_CODE_TH          IsoLanguageCode = 318
	IsoLanguageCode_ISO_LANGUAGE_CODE_THA         IsoLanguageCode = 319
	IsoLanguageCode_ISO_LANGUAGE_CODE_TI          IsoLanguageCode = 320
	IsoLanguageCode_ISO_LANGUAGE_CODE_TIR         IsoLanguageCode = 321
	IsoLanguageCode_ISO_LANGUAGE_CODE_TK          IsoLanguageCode = 322
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUK         IsoLanguageCode = 323
	IsoLanguageCode_ISO_LANGUAGE_CODE_TL          IsoLanguageCode = 324
	IsoLanguageCode_ISO_LANGUAGE_CODE_TGL         IsoLanguageCode = 325
	IsoLanguageCode_ISO_LANGUAGE_CODE_TN          IsoLanguageCode = 326
	IsoLanguageCode_ISO_LANGUAGE_CODE_TSN         IsoLanguageCode = 327
	IsoLanguageCode_ISO_LANGUAGE_CODE_TO          IsoLanguageCode = 328
	IsoLanguageCode_ISO_LANGUAGE_CODE_TON         IsoLanguageCode = 329
	IsoLanguageCode_ISO_LANGUAGE_CODE_TR          IsoLanguageCode = 330
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUR         IsoLanguageCode = 331
	IsoLanguageCode_ISO_LANGUAGE_CODE_TS          IsoLanguageCode = 332
	IsoLanguageCode_ISO_LANGUAGE_CODE_TSO         IsoLanguageCode = 333
	IsoLanguageCode_ISO_LANGUAGE_CODE_TT          IsoLanguageCode = 334
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAT         IsoLanguageCode = 335
	IsoLanguageCode_ISO_LANGUAGE_CODE_TW          IsoLanguageCode = 336
	IsoLanguageCode_ISO_LANGUAGE_CODE_TWI         IsoLanguageCode = 337
	IsoLanguageCode_ISO_LANGUAGE_CODE_TY          IsoLanguageCode = 338
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAH         IsoLanguageCode = 339
	IsoLanguageCode_ISO_LANGUAGE_CODE_UG          IsoLanguageCode = 340
	IsoLanguageCode_ISO_LANGUAGE_CODE_UIG         IsoLanguageCode = 341
	IsoLanguageCode_ISO_LANGUAGE_CODE_UK          IsoLanguageCode = 342
	IsoLanguageCode_ISO_LANGUAGE_CODE_UKR         IsoLanguageCode = 343
	IsoLanguageCode_ISO_LANGUAGE_CODE_UR          IsoLanguageCode = 344
	IsoLanguageCode_ISO_LANGUAGE_CODE_URD         IsoLanguageCode = 345
	IsoLanguageCode_ISO_LANGUAGE_CODE_UZ          IsoLanguageCode = 346
	IsoLanguageCode_ISO_LANGUAGE_CODE_UZB         IsoLanguageCode = 347
	IsoLanguageCode_ISO_LANGUAGE_CODE_VE          IsoLanguageCode = 348
	IsoLanguageCode_ISO_LANGUAGE_CODE_VEN         IsoLanguageCode = 349
	IsoLanguageCode_ISO_LANGUAGE_CODE_VI          IsoLanguageCode = 350
	IsoLanguageCode_ISO_LANGUAGE_CODE_VIE         IsoLanguageCode = 351
	IsoLanguageCode_ISO_LANGUAGE_CODE_VO          IsoLanguageCode = 352
	IsoLanguageCode_ISO_LANGUAGE_CODE_VOL         IsoLanguageCode = 353
	IsoLanguageCode_ISO_LANGUAGE_CODE_WA          IsoLanguageCode = 354
	IsoLanguageCode_ISO_LANGUAGE_CODE_WLN         IsoLanguageCode = 355
	IsoLanguageCode_ISO_LANGUAGE_CODE_WO          IsoLanguageCode = 356
	IsoLanguageCode_ISO_LANGUAGE_CODE_WOL         IsoLanguageCode = 357
	IsoLanguageCode_ISO_LANGUAGE_CODE_XH          IsoLanguageCode = 358
	IsoLanguageCode_ISO_LANGUAGE_CODE_XHO         IsoLanguageCode = 359
	IsoLanguageCode_ISO_LANGUAGE_CODE_YI          IsoLanguageCode = 360
	IsoLanguageCode_ISO_LANGUAGE_CODE_YID         IsoLanguageCode = 361
	IsoLanguageCode_ISO_LANGUAGE_CODE_YO          IsoLanguageCode = 362
	IsoLanguageCode_ISO_LANGUAGE_CODE_YOR         IsoLanguageCode = 363
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZA          IsoLanguageCode = 364
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZHA         IsoLanguageCode = 365
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZH          IsoLanguageCode = 366
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZHO         IsoLanguageCode = 367
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZU          IsoLanguageCode = 368
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZUL         IsoLanguageCode = 369
	IsoLanguageCode_ISO_LANGUAGE_CODE_ACE         IsoLanguageCode = 370
	IsoLanguageCode_ISO_LANGUAGE_CODE_ACH         IsoLanguageCode = 371
	IsoLanguageCode_ISO_LANGUAGE_CODE_ADA         IsoLanguageCode = 372
	IsoLanguageCode_ISO_LANGUAGE_CODE_ADY         IsoLanguageCode = 373
	IsoLanguageCode_ISO_LANGUAGE_CODE_AFA         IsoLanguageCode = 374
	IsoLanguageCode_ISO_LANGUAGE_CODE_AFH         IsoLanguageCode = 375
	IsoLanguageCode_ISO_LANGUAGE_CODE_AIN         IsoLanguageCode = 376
	IsoLanguageCode_ISO_LANGUAGE_CODE_AKK         IsoLanguageCode = 377
	IsoLanguageCode_ISO_LANGUAGE_CODE_ALE         IsoLanguageCode = 378
	IsoLanguageCode_ISO_LANGUAGE_CODE_ALG         IsoLanguageCode = 379
	IsoLanguageCode_ISO_LANGUAGE_CODE_ALT         IsoLanguageCode = 380
	IsoLanguageCode_ISO_LANGUAGE_CODE_ANG         IsoLanguageCode = 381
	IsoLanguageCode_ISO_LANGUAGE_CODE_ANP         IsoLanguageCode = 382
	IsoLanguageCode_ISO_LANGUAGE_CODE_APA         IsoLanguageCode = 383
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARC         IsoLanguageCode = 384
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARN         IsoLanguageCode = 385
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARP         IsoLanguageCode = 386
	IsoLanguageCode_ISO_LANGUAGE_CODE_ART         IsoLanguageCode = 387
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARW         IsoLanguageCode = 388
	IsoLanguageCode_ISO_LANGUAGE_CODE_AST         IsoLanguageCode = 389
	IsoLanguageCode_ISO_LANGUAGE_CODE_ATH         IsoLanguageCode = 390
	IsoLanguageCode_ISO_LANGUAGE_CODE_AUS         IsoLanguageCode = 391
	IsoLanguageCode_ISO_LANGUAGE_CODE_AWA         IsoLanguageCode = 392
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAD         IsoLanguageCode = 393
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAI         IsoLanguageCode = 394
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAL         IsoLanguageCode = 395
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAN         IsoLanguageCode = 396
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAS         IsoLanguageCode = 397
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAT         IsoLanguageCode = 398
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEJ         IsoLanguageCode = 399
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEM         IsoLanguageCode = 400
	IsoLanguageCode_ISO_LANGUAGE_CODE_BER         IsoLanguageCode = 401
	IsoLanguageCode_ISO_LANGUAGE_CODE_BGC         IsoLanguageCode = 402
	IsoLanguageCode_ISO_LANGUAGE_CODE_BHO         IsoLanguageCode = 403
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIK         IsoLanguageCode = 404
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIN         IsoLanguageCode = 405
	IsoLanguageCode_ISO_LANGUAGE_CODE_BLA         IsoLanguageCode = 406
	IsoLanguageCode_ISO_LANGUAGE_CODE_BNT         IsoLanguageCode = 407
	IsoLanguageCode_ISO_LANGUAGE_CODE_BRA         IsoLanguageCode = 408
	IsoLanguageCode_ISO_LANGUAGE_CODE_BTK         IsoLanguageCode = 409
	IsoLanguageCode_ISO_LANGUAGE_CODE_BUA         IsoLanguageCode = 410
	IsoLanguageCode_ISO_LANGUAGE_CODE_BUG         IsoLanguageCode = 411
	IsoLanguageCode_ISO_LANGUAGE_CODE_BYN         IsoLanguageCode = 412
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAD         IsoLanguageCode = 413
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAI         IsoLanguageCode = 414
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAR         IsoLanguageCode = 415
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAU         IsoLanguageCode = 416
	IsoLanguageCode_ISO_LANGUAGE_CODE_CEB         IsoLanguageCode = 417
	IsoLanguageCode_ISO_LANGUAGE_CODE_CEL         IsoLanguageCode = 418
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHB         IsoLanguageCode = 419
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHG         IsoLanguageCode = 420
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHK         IsoLanguageCode = 421
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHM         IsoLanguageCode = 422
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHN         IsoLanguageCode = 423
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHO         IsoLanguageCode = 424
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHP         IsoLanguageCode = 425
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHR         IsoLanguageCode = 426
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHY         IsoLanguageCode = 427
	IsoLanguageCode_ISO_LANGUAGE_CODE_CMC         IsoLanguageCode = 428
	IsoLanguageCode_ISO_LANGUAGE_CODE_CNR         IsoLanguageCode = 429
	IsoLanguageCode_ISO_LANGUAGE_CODE_COP         IsoLanguageCode = 430
	IsoLanguageCode_ISO_LANGUAGE_CODE_CPE         IsoLanguageCode = 431
	IsoLanguageCode_ISO_LANGUAGE_CODE_CPF         IsoLanguageCode = 432
	IsoLanguageCode_ISO_LANGUAGE_CODE_CPP         IsoLanguageCode = 433
	IsoLanguageCode_ISO_LANGUAGE_CODE_CRH         IsoLanguageCode = 434
	IsoLanguageCode_ISO_LANGUAGE_CODE_CRP         IsoLanguageCode = 435
	IsoLanguageCode_ISO_LANGUAGE_CODE_CSB         IsoLanguageCode = 436
	IsoLanguageCode_ISO_LANGUAGE_CODE_CUS         IsoLanguageCode = 437
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAK         IsoLanguageCode = 438
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAR         IsoLanguageCode = 439
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAY         IsoLanguageCode = 440
	IsoLanguageCode_ISO_LANGUAGE_CODE_DEL         IsoLanguageCode = 441
	IsoLanguageCode_ISO_LANGUAGE_CODE_DEN         IsoLanguageCode = 442
	IsoLanguageCode_ISO_LANGUAGE_CODE_DGR         IsoLanguageCode = 443
	IsoLanguageCode_ISO_LANGUAGE_CODE_DIN         IsoLanguageCode = 444
	IsoLanguageCode_ISO_LANGUAGE_CODE_DOI         IsoLanguageCode = 445
	IsoLanguageCode_ISO_LANGUAGE_CODE_DRA         IsoLanguageCode = 446
	IsoLanguageCode_ISO_LANGUAGE_CODE_DSB         IsoLanguageCode = 447
	IsoLanguageCode_ISO_LANGUAGE_CODE_DUA         IsoLanguageCode = 448
	IsoLanguageCode_ISO_LANGUAGE_CODE_DUM         IsoLanguageCode = 449
	IsoLanguageCode_ISO_LANGUAGE_CODE_DYU         IsoLanguageCode = 450
	IsoLanguageCode_ISO_LANGUAGE_CODE_EFI         IsoLanguageCode = 451
	IsoLanguageCode_ISO_LANGUAGE_CODE_EGY         IsoLanguageCode = 452
	IsoLanguageCode_ISO_LANGUAGE_CODE_EKA         IsoLanguageCode = 453
	IsoLanguageCode_ISO_LANGUAGE_CODE_ELX         IsoLanguageCode = 454
	IsoLanguageCode_ISO_LANGUAGE_CODE_ENM         IsoLanguageCode = 455
	IsoLanguageCode_ISO_LANGUAGE_CODE_EWO         IsoLanguageCode = 456
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAN         IsoLanguageCode = 457
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAT         IsoLanguageCode = 458
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIL         IsoLanguageCode = 459
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIU         IsoLanguageCode = 460
	IsoLanguageCode_ISO_LANGUAGE_CODE_FON         IsoLanguageCode = 461
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRM         IsoLanguageCode = 462
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRO         IsoLanguageCode = 463
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRR         IsoLanguageCode = 464
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRS         IsoLanguageCode = 465
	IsoLanguageCode_ISO_LANGUAGE_CODE_FUR         IsoLanguageCode = 466
	IsoLanguageCode_ISO_LANGUAGE_CODE_GAA         IsoLanguageCode = 467
	IsoLanguageCode_ISO_LANGUAGE_CODE_GAY         IsoLanguageCode = 468
	IsoLanguageCode_ISO_LANGUAGE_CODE_GBA         IsoLanguageCode = 469
	IsoLanguageCode_ISO_LANGUAGE_CODE_GEM         IsoLanguageCode = 470
	IsoLanguageCode_ISO_LANGUAGE_CODE_GEZ         IsoLanguageCode = 471
	IsoLanguageCode_ISO_LANGUAGE_CODE_GIL         IsoLanguageCode = 472
	IsoLanguageCode_ISO_LANGUAGE_CODE_GMH         IsoLanguageCode = 473
	IsoLanguageCode_ISO_LANGUAGE_CODE_GOH         IsoLanguageCode = 474
	IsoLanguageCode_ISO_LANGUAGE_CODE_GON         IsoLanguageCode = 475
	IsoLanguageCode_ISO_LANGUAGE_CODE_GOR         IsoLanguageCode = 476
	IsoLanguageCode_ISO_LANGUAGE_CODE_GOT         IsoLanguageCode = 477
	IsoLanguageCode_ISO_LANGUAGE_CODE_GRB         IsoLanguageCode = 478
	IsoLanguageCode_ISO_LANGUAGE_CODE_GRC         IsoLanguageCode = 479
	IsoLanguageCode_ISO_LANGUAGE_CODE_GSW         IsoLanguageCode = 480
	IsoLanguageCode_ISO_LANGUAGE_CODE_GWI         IsoLanguageCode = 481
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAI         IsoLanguageCode = 482
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAW         IsoLanguageCode = 483
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIL         IsoLanguageCode = 484
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIM         IsoLanguageCode = 485
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIT         IsoLanguageCode = 486
	IsoLanguageCode_ISO_LANGUAGE_CODE_HMN         IsoLanguageCode = 487
	IsoLanguageCode_ISO_LANGUAGE_CODE_HSB         IsoLanguageCode = 488
	IsoLanguageCode_ISO_LANGUAGE_CODE_HUP         IsoLanguageCode = 489
	IsoLanguageCode_ISO_LANGUAGE_CODE_IBA         IsoLanguageCode = 490
	IsoLanguageCode_ISO_LANGUAGE_CODE_IJO         IsoLanguageCode = 491
	IsoLanguageCode_ISO_LANGUAGE_CODE_ILO         IsoLanguageCode = 492
	IsoLanguageCode_ISO_LANGUAGE_CODE_INC         IsoLanguageCode = 493
	IsoLanguageCode_ISO_LANGUAGE_CODE_INE         IsoLanguageCode = 494
	IsoLanguageCode_ISO_LANGUAGE_CODE_INH         IsoLanguageCode = 495
	IsoLanguageCode_ISO_LANGUAGE_CODE_IRA         IsoLanguageCode = 496
	IsoLanguageCode_ISO_LANGUAGE_CODE_IRO         IsoLanguageCode = 497
	IsoLanguageCode_ISO_LANGUAGE_CODE_JBO         IsoLanguageCode = 498
	IsoLanguageCode_ISO_LANGUAGE_CODE_JPR         IsoLanguageCode = 499
	IsoLanguageCode_ISO_LANGUAGE_CODE_JRB         IsoLanguageCode = 500
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAA         IsoLanguageCode = 501
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAB         IsoLanguageCode = 502
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAC         IsoLanguageCode = 503
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAM         IsoLanguageCode = 504
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAR         IsoLanguageCode = 505
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAW         IsoLanguageCode = 506
	IsoLanguageCode_ISO_LANGUAGE_CODE_KBD         IsoLanguageCode = 507
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHA         IsoLanguageCode = 508
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHI         IsoLanguageCode = 509
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHO         IsoLanguageCode = 510
	IsoLanguageCode_ISO_LANGUAGE_CODE_KMB         IsoLanguageCode = 511
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOK         IsoLanguageCode = 512
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOS         IsoLanguageCode = 513
	IsoLanguageCode_ISO_LANGUAGE_CODE_KPE         IsoLanguageCode = 514
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRC         IsoLanguageCode = 515
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRL         IsoLanguageCode = 516
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRO         IsoLanguageCode = 517
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRU         IsoLanguageCode = 518
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUM         IsoLanguageCode = 519
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUT         IsoLanguageCode = 520
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAD         IsoLanguageCode = 521
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAH         IsoLanguageCode = 522
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAM         IsoLanguageCode = 523
	IsoLanguageCode_ISO_LANGUAGE_CODE_LEZ         IsoLanguageCode = 524
	IsoLanguageCode_ISO_LANGUAGE_CODE_LOL         IsoLanguageCode = 525
	IsoLanguageCode_ISO_LANGUAGE_CODE_LOZ         IsoLanguageCode = 526
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUA         IsoLanguageCode = 527
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUI         IsoLanguageCode = 528
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUN         IsoLanguageCode = 529
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUO         IsoLanguageCode = 530
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUS         IsoLanguageCode = 531
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAD         IsoLanguageCode = 532
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAG         IsoLanguageCode = 533
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAI         IsoLanguageCode = 534
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAK         IsoLanguageCode = 535
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAN         IsoLanguageCode = 536
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAP         IsoLanguageCode = 537
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAS         IsoLanguageCode = 538
	IsoLanguageCode_ISO_LANGUAGE_CODE_MDF         IsoLanguageCode = 539
	IsoLanguageCode_ISO_LANGUAGE_CODE_MDR         IsoLanguageCode = 540
	IsoLanguageCode_ISO_LANGUAGE_CODE_MEN         IsoLanguageCode = 541
	IsoLanguageCode_ISO_LANGUAGE_CODE_MGA         IsoLanguageCode = 542
	IsoLanguageCode_ISO_LANGUAGE_CODE_MIC         IsoLanguageCode = 543
	IsoLanguageCode_ISO_LANGUAGE_CODE_MIN         IsoLanguageCode = 544
	IsoLanguageCode_ISO_LANGUAGE_CODE_MIS         IsoLanguageCode = 545
	IsoLanguageCode_ISO_LANGUAGE_CODE_MKH         IsoLanguageCode = 546
	IsoLanguageCode_ISO_LANGUAGE_CODE_MNC         IsoLanguageCode = 547
	IsoLanguageCode_ISO_LANGUAGE_CODE_MNI         IsoLanguageCode = 548
	IsoLanguageCode_ISO_LANGUAGE_CODE_MNO         IsoLanguageCode = 549
	IsoLanguageCode_ISO_LANGUAGE_CODE_MOH         IsoLanguageCode = 550
	IsoLanguageCode_ISO_LANGUAGE_CODE_MOS         IsoLanguageCode = 551
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUL         IsoLanguageCode = 552
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUN         IsoLanguageCode = 553
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUS         IsoLanguageCode = 554
	IsoLanguageCode_ISO_LANGUAGE_CODE_MWL         IsoLanguageCode = 555
	IsoLanguageCode_ISO_LANGUAGE_CODE_MWR         IsoLanguageCode = 556
	IsoLanguageCode_ISO_LANGUAGE_CODE_MYN         IsoLanguageCode = 557
	IsoLanguageCode_ISO_LANGUAGE_CODE_MYV         IsoLanguageCode = 558
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAH         IsoLanguageCode = 559
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAI         IsoLanguageCode = 560
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAP         IsoLanguageCode = 561
	IsoLanguageCode_ISO_LANGUAGE_CODE_NDS         IsoLanguageCode = 562
	IsoLanguageCode_ISO_LANGUAGE_CODE_NEW         IsoLanguageCode = 563
	IsoLanguageCode_ISO_LANGUAGE_CODE_NIA         IsoLanguageCode = 564
	IsoLanguageCode_ISO_LANGUAGE_CODE_NIC         IsoLanguageCode = 565
	IsoLanguageCode_ISO_LANGUAGE_CODE_NIU         IsoLanguageCode = 566
	IsoLanguageCode_ISO_LANGUAGE_CODE_NOG         IsoLanguageCode = 567
	IsoLanguageCode_ISO_LANGUAGE_CODE_NON         IsoLanguageCode = 568
	IsoLanguageCode_ISO_LANGUAGE_CODE_NQO         IsoLanguageCode = 569
	IsoLanguageCode_ISO_LANGUAGE_CODE_NSO         IsoLanguageCode = 570
	IsoLanguageCode_ISO_LANGUAGE_CODE_NUB         IsoLanguageCode = 571
	IsoLanguageCode_ISO_LANGUAGE_CODE_NWC         IsoLanguageCode = 572
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYM         IsoLanguageCode = 573
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYN         IsoLanguageCode = 574
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYO         IsoLanguageCode = 575
	IsoLanguageCode_ISO_LANGUAGE_CODE_NZI         IsoLanguageCode = 576
	IsoLanguageCode_ISO_LANGUAGE_CODE_OSA         IsoLanguageCode = 577
	IsoLanguageCode_ISO_LANGUAGE_CODE_OTA         IsoLanguageCode = 578
	IsoLanguageCode_ISO_LANGUAGE_CODE_OTO         IsoLanguageCode = 579
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAA         IsoLanguageCode = 580
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAG         IsoLanguageCode = 581
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAL         IsoLanguageCode = 582
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAM         IsoLanguageCode = 583
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAP         IsoLanguageCode = 584
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAU         IsoLanguageCode = 585
	IsoLanguageCode_ISO_LANGUAGE_CODE_PEO         IsoLanguageCode = 586
	IsoLanguageCode_ISO_LANGUAGE_CODE_PHI         IsoLanguageCode = 587
	IsoLanguageCode_ISO_LANGUAGE_CODE_PHN         IsoLanguageCode = 588
	IsoLanguageCode_ISO_LANGUAGE_CODE_PON         IsoLanguageCode = 589
	IsoLanguageCode_ISO_LANGUAGE_CODE_PRA         IsoLanguageCode = 590
	IsoLanguageCode_ISO_LANGUAGE_CODE_PRO         IsoLanguageCode = 591
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQA         IsoLanguageCode = 592
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQB         IsoLanguageCode = 593
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQC         IsoLanguageCode = 594
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQD         IsoLanguageCode = 595
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQE         IsoLanguageCode = 596
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQF         IsoLanguageCode = 597
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQG         IsoLanguageCode = 598
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQH         IsoLanguageCode = 599
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQI         IsoLanguageCode = 600
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQJ         IsoLanguageCode = 601
	IsoLanguageCode_ISO_LANGUAGE_CODE_RAJ         IsoLanguageCode = 602
	IsoLanguageCode_ISO_LANGUAGE_CODE_RAP         IsoLanguageCode = 603
	IsoLanguageCode_ISO_LANGUAGE_CODE_RAR         IsoLanguageCode = 604
	IsoLanguageCode_ISO_LANGUAGE_CODE_ROA         IsoLanguageCode = 605
	IsoLanguageCode_ISO_LANGUAGE_CODE_ROM         IsoLanguageCode = 606
	IsoLanguageCode_ISO_LANGUAGE_CODE_RUP         IsoLanguageCode = 607
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAD         IsoLanguageCode = 608
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAH         IsoLanguageCode = 609
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAI         IsoLanguageCode = 610
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAL         IsoLanguageCode = 611
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAM         IsoLanguageCode = 612
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAS         IsoLanguageCode = 613
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAT         IsoLanguageCode = 614
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCN         IsoLanguageCode = 615
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCO         IsoLanguageCode = 616
	IsoLanguageCode_ISO_LANGUAGE_CODE_SEL         IsoLanguageCode = 617
	IsoLanguageCode_ISO_LANGUAGE_CODE_SEM         IsoLanguageCode = 618
	IsoLanguageCode_ISO_LANGUAGE_CODE_SGA         IsoLanguageCode = 619
	IsoLanguageCode_ISO_LANGUAGE_CODE_SGN         IsoLanguageCode = 620
	IsoLanguageCode_ISO_LANGUAGE_CODE_SHN         IsoLanguageCode = 621
	IsoLanguageCode_ISO_LANGUAGE_CODE_SID         IsoLanguageCode = 622
	IsoLanguageCode_ISO_LANGUAGE_CODE_SIO         IsoLanguageCode = 623
	IsoLanguageCode_ISO_LANGUAGE_CODE_SIT         IsoLanguageCode = 624
	IsoLanguageCode_ISO_LANGUAGE_CODE_SLA         IsoLanguageCode = 625
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMA         IsoLanguageCode = 626
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMI         IsoLanguageCode = 627
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMJ         IsoLanguageCode = 628
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMN         IsoLanguageCode = 629
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMS         IsoLanguageCode = 630
	IsoLanguageCode_ISO_LANGUAGE_CODE_SNK         IsoLanguageCode = 631
	IsoLanguageCode_ISO_LANGUAGE_CODE_SOG         IsoLanguageCode = 632
	IsoLanguageCode_ISO_LANGUAGE_CODE_SON         IsoLanguageCode = 633
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRN         IsoLanguageCode = 634
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRR         IsoLanguageCode = 635
	IsoLanguageCode_ISO_LANGUAGE_CODE_SSA         IsoLanguageCode = 636
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUK         IsoLanguageCode = 637
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUS         IsoLanguageCode = 638
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUX         IsoLanguageCode = 639
	IsoLanguageCode_ISO_LANGUAGE_CODE_SYC         IsoLanguageCode = 640
	IsoLanguageCode_ISO_LANGUAGE_CODE_SYR         IsoLanguageCode = 641
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAI         IsoLanguageCode = 642
	IsoLanguageCode_ISO_LANGUAGE_CODE_TEM         IsoLanguageCode = 643
	IsoLanguageCode_ISO_LANGUAGE_CODE_TER         IsoLanguageCode = 644
	IsoLanguageCode_ISO_LANGUAGE_CODE_TET         IsoLanguageCode = 645
	IsoLanguageCode_ISO_LANGUAGE_CODE_TIG         IsoLanguageCode = 646
	IsoLanguageCode_ISO_LANGUAGE_CODE_TIV         IsoLanguageCode = 647
	IsoLanguageCode_ISO_LANGUAGE_CODE_TKL         IsoLanguageCode = 648
	IsoLanguageCode_ISO_LANGUAGE_CODE_TLH         IsoLanguageCode = 649
	IsoLanguageCode_ISO_LANGUAGE_CODE_TLI         IsoLanguageCode = 650
	IsoLanguageCode_ISO_LANGUAGE_CODE_TMH         IsoLanguageCode = 651
	IsoLanguageCode_ISO_LANGUAGE_CODE_TOG         IsoLanguageCode = 652
	IsoLanguageCode_ISO_LANGUAGE_CODE_TPI         IsoLanguageCode = 653
	IsoLanguageCode_ISO_LANGUAGE_CODE_TSI         IsoLanguageCode = 654
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUM         IsoLanguageCode = 655
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUP         IsoLanguageCode = 656
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUT         IsoLanguageCode = 657
	IsoLanguageCode_ISO_LANGUAGE_CODE_TVL         IsoLanguageCode = 658
	IsoLanguageCode_ISO_LANGUAGE_CODE_TYV         IsoLanguageCode = 659
	IsoLanguageCode_ISO_LANGUAGE_CODE_UDM         IsoLanguageCode = 660
	IsoLanguageCode_ISO_LANGUAGE_CODE_UGA         IsoLanguageCode = 661
	IsoLanguageCode_ISO_LANGUAGE_CODE_UMB         IsoLanguageCode = 662
	IsoLanguageCode_ISO_LANGUAGE_CODE_UND         IsoLanguageCode = 663
	IsoLanguageCode_ISO_LANGUAGE_CODE_VAI         IsoLanguageCode = 664
	IsoLanguageCode_ISO_LANGUAGE_CODE_VOT         IsoLanguageCode = 665
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAK         IsoLanguageCode = 666
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAL         IsoLanguageCode = 667
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAR         IsoLanguageCode = 668
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAS         IsoLanguageCode = 669
	IsoLanguageCode_ISO_LANGUAGE_CODE_WEN         IsoLanguageCode = 670
	IsoLanguageCode_ISO_LANGUAGE_CODE_XAL         IsoLanguageCode = 671
	IsoLanguageCode_ISO_LANGUAGE_CODE_YAO         IsoLanguageCode = 672
	IsoLanguageCode_ISO_LANGUAGE_CODE_YAP         IsoLanguageCode = 673
	IsoLanguageCode_ISO_LANGUAGE_CODE_YPK         IsoLanguageCode = 674
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZAP         IsoLanguageCode = 675
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZBL         IsoLanguageCode = 676
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZEN         IsoLanguageCode = 677
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZGH         IsoLanguageCode = 678
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZND         IsoLanguageCode = 679
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZUN         IsoLanguageCode = 680
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZXX         IsoLanguageCode = 681
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZZA         IsoLanguageCode = 682
	IsoLanguageCode_ISO_LANGUAGE_CODE_AAA         IsoLanguageCode = 683
)

// Enum value maps for IsoLanguageCode.
var (
	IsoLanguageCode_name = map[int32]string{
		0:   "ISO_LANGUAGE_CODE_UNSPECIFIED",
		1:   "ISO_LANGUAGE_CODE_AA",
		2:   "ISO_LANGUAGE_CODE_AAR",
		3:   "ISO_LANGUAGE_CODE_AB",
		4:   "ISO_LANGUAGE_CODE_ABK",
		5:   "ISO_LANGUAGE_CODE_AE",
		6:   "ISO_LANGUAGE_CODE_AVE",
		7:   "ISO_LANGUAGE_CODE_AF",
		8:   "ISO_LANGUAGE_CODE_AFR",
		9:   "ISO_LANGUAGE_CODE_AK",
		10:  "ISO_LANGUAGE_CODE_AKA",
		11:  "ISO_LANGUAGE_CODE_AM",
		12:  "ISO_LANGUAGE_CODE_AMH",
		13:  "ISO_LANGUAGE_CODE_AN",
		14:  "ISO_LANGUAGE_CODE_ARG",
		15:  "ISO_LANGUAGE_CODE_AR",
		16:  "ISO_LANGUAGE_CODE_ARA",
		17:  "ISO_LANGUAGE_CODE_AS",
		18:  "ISO_LANGUAGE_CODE_ASM",
		19:  "ISO_LANGUAGE_CODE_AV",
		20:  "ISO_LANGUAGE_CODE_AVA",
		21:  "ISO_LANGUAGE_CODE_AY",
		22:  "ISO_LANGUAGE_CODE_AYM",
		23:  "ISO_LANGUAGE_CODE_AZ",
		24:  "ISO_LANGUAGE_CODE_AZE",
		25:  "ISO_LANGUAGE_CODE_BA",
		26:  "ISO_LANGUAGE_CODE_BAK",
		27:  "ISO_LANGUAGE_CODE_BE",
		28:  "ISO_LANGUAGE_CODE_BEL",
		29:  "ISO_LANGUAGE_CODE_BG",
		30:  "ISO_LANGUAGE_CODE_BUL",
		31:  "ISO_LANGUAGE_CODE_BH",
		32:  "ISO_LANGUAGE_CODE_BIH",
		33:  "ISO_LANGUAGE_CODE_BI",
		34:  "ISO_LANGUAGE_CODE_BIS",
		35:  "ISO_LANGUAGE_CODE_BM",
		36:  "ISO_LANGUAGE_CODE_BAM",
		37:  "ISO_LANGUAGE_CODE_BN",
		38:  "ISO_LANGUAGE_CODE_BEN",
		39:  "ISO_LANGUAGE_CODE_BO",
		40:  "ISO_LANGUAGE_CODE_BOD",
		41:  "ISO_LANGUAGE_CODE_BR",
		42:  "ISO_LANGUAGE_CODE_BRE",
		43:  "ISO_LANGUAGE_CODE_BS",
		44:  "ISO_LANGUAGE_CODE_BOS",
		45:  "ISO_LANGUAGE_CODE_CA",
		46:  "ISO_LANGUAGE_CODE_CAT",
		47:  "ISO_LANGUAGE_CODE_CE",
		48:  "ISO_LANGUAGE_CODE_CHE",
		49:  "ISO_LANGUAGE_CODE_CH",
		50:  "ISO_LANGUAGE_CODE_CHA",
		51:  "ISO_LANGUAGE_CODE_CO",
		52:  "ISO_LANGUAGE_CODE_COS",
		53:  "ISO_LANGUAGE_CODE_CR",
		54:  "ISO_LANGUAGE_CODE_CRE",
		55:  "ISO_LANGUAGE_CODE_CS",
		56:  "ISO_LANGUAGE_CODE_CES",
		57:  "ISO_LANGUAGE_CODE_CU",
		58:  "ISO_LANGUAGE_CODE_CHU",
		59:  "ISO_LANGUAGE_CODE_CV",
		60:  "ISO_LANGUAGE_CODE_CHV",
		61:  "ISO_LANGUAGE_CODE_CY",
		62:  "ISO_LANGUAGE_CODE_CYM",
		63:  "ISO_LANGUAGE_CODE_DA",
		64:  "ISO_LANGUAGE_CODE_DAN",
		65:  "ISO_LANGUAGE_CODE_DE",
		66:  "ISO_LANGUAGE_CODE_DEU",
		67:  "ISO_LANGUAGE_CODE_DV",
		68:  "ISO_LANGUAGE_CODE_DIV",
		69:  "ISO_LANGUAGE_CODE_DZ",
		70:  "ISO_LANGUAGE_CODE_DZO",
		71:  "ISO_LANGUAGE_CODE_EE",
		72:  "ISO_LANGUAGE_CODE_EWE",
		73:  "ISO_LANGUAGE_CODE_EL",
		74:  "ISO_LANGUAGE_CODE_ELL",
		75:  "ISO_LANGUAGE_CODE_EN",
		76:  "ISO_LANGUAGE_CODE_ENG",
		77:  "ISO_LANGUAGE_CODE_EO",
		78:  "ISO_LANGUAGE_CODE_EPO",
		79:  "ISO_LANGUAGE_CODE_ES",
		80:  "ISO_LANGUAGE_CODE_SPA",
		81:  "ISO_LANGUAGE_CODE_ET",
		82:  "ISO_LANGUAGE_CODE_EST",
		83:  "ISO_LANGUAGE_CODE_EU",
		84:  "ISO_LANGUAGE_CODE_EUS",
		85:  "ISO_LANGUAGE_CODE_FA",
		86:  "ISO_LANGUAGE_CODE_FAS",
		87:  "ISO_LANGUAGE_CODE_FF",
		88:  "ISO_LANGUAGE_CODE_FUL",
		89:  "ISO_LANGUAGE_CODE_FI",
		90:  "ISO_LANGUAGE_CODE_FIN",
		91:  "ISO_LANGUAGE_CODE_FJ",
		92:  "ISO_LANGUAGE_CODE_FIJ",
		93:  "ISO_LANGUAGE_CODE_FO",
		94:  "ISO_LANGUAGE_CODE_FAO",
		95:  "ISO_LANGUAGE_CODE_FR",
		96:  "ISO_LANGUAGE_CODE_FRA",
		97:  "ISO_LANGUAGE_CODE_FY",
		98:  "ISO_LANGUAGE_CODE_FRY",
		99:  "ISO_LANGUAGE_CODE_GA",
		100: "ISO_LANGUAGE_CODE_GLE",
		101: "ISO_LANGUAGE_CODE_GD",
		102: "ISO_LANGUAGE_CODE_GLA",
		103: "ISO_LANGUAGE_CODE_GL",
		104: "ISO_LANGUAGE_CODE_GLG",
		105: "ISO_LANGUAGE_CODE_GN",
		106: "ISO_LANGUAGE_CODE_GRN",
		107: "ISO_LANGUAGE_CODE_GU",
		108: "ISO_LANGUAGE_CODE_GUJ",
		109: "ISO_LANGUAGE_CODE_GV",
		110: "ISO_LANGUAGE_CODE_GLV",
		111: "ISO_LANGUAGE_CODE_HA",
		112: "ISO_LANGUAGE_CODE_HAU",
		113: "ISO_LANGUAGE_CODE_HE",
		114: "ISO_LANGUAGE_CODE_HEB",
		115: "ISO_LANGUAGE_CODE_HI",
		116: "ISO_LANGUAGE_CODE_HIN",
		117: "ISO_LANGUAGE_CODE_HO",
		118: "ISO_LANGUAGE_CODE_HMO",
		119: "ISO_LANGUAGE_CODE_HR",
		120: "ISO_LANGUAGE_CODE_HRV",
		121: "ISO_LANGUAGE_CODE_HT",
		122: "ISO_LANGUAGE_CODE_HAT",
		123: "ISO_LANGUAGE_CODE_HU",
		124: "ISO_LANGUAGE_CODE_HUN",
		125: "ISO_LANGUAGE_CODE_HY",
		126: "ISO_LANGUAGE_CODE_HYE",
		127: "ISO_LANGUAGE_CODE_HZ",
		128: "ISO_LANGUAGE_CODE_HER",
		129: "ISO_LANGUAGE_CODE_IA",
		130: "ISO_LANGUAGE_CODE_INA",
		131: "ISO_LANGUAGE_CODE_ID",
		132: "ISO_LANGUAGE_CODE_IND",
		133: "ISO_LANGUAGE_CODE_IE",
		134: "ISO_LANGUAGE_CODE_ILE",
		135: "ISO_LANGUAGE_CODE_IG",
		136: "ISO_LANGUAGE_CODE_IBO",
		137: "ISO_LANGUAGE_CODE_II",
		138: "ISO_LANGUAGE_CODE_III",
		139: "ISO_LANGUAGE_CODE_IK",
		140: "ISO_LANGUAGE_CODE_IPK",
		141: "ISO_LANGUAGE_CODE_IO",
		142: "ISO_LANGUAGE_CODE_IDO",
		143: "ISO_LANGUAGE_CODE_IS",
		144: "ISO_LANGUAGE_CODE_ISL",
		145: "ISO_LANGUAGE_CODE_IT",
		146: "ISO_LANGUAGE_CODE_ITA",
		147: "ISO_LANGUAGE_CODE_IU",
		148: "ISO_LANGUAGE_CODE_IKU",
		149: "ISO_LANGUAGE_CODE_JA",
		150: "ISO_LANGUAGE_CODE_JPN",
		151: "ISO_LANGUAGE_CODE_JV",
		152: "ISO_LANGUAGE_CODE_JAV",
		153: "ISO_LANGUAGE_CODE_KA",
		154: "ISO_LANGUAGE_CODE_KAT",
		155: "ISO_LANGUAGE_CODE_KG",
		156: "ISO_LANGUAGE_CODE_KON",
		157: "ISO_LANGUAGE_CODE_KI",
		158: "ISO_LANGUAGE_CODE_KIK",
		159: "ISO_LANGUAGE_CODE_KJ",
		160: "ISO_LANGUAGE_CODE_KUA",
		161: "ISO_LANGUAGE_CODE_KK",
		162: "ISO_LANGUAGE_CODE_KAZ",
		163: "ISO_LANGUAGE_CODE_KL",
		164: "ISO_LANGUAGE_CODE_KAL",
		165: "ISO_LANGUAGE_CODE_KM",
		166: "ISO_LANGUAGE_CODE_KHM",
		167: "ISO_LANGUAGE_CODE_KN",
		168: "ISO_LANGUAGE_CODE_KAN",
		169: "ISO_LANGUAGE_CODE_KO",
		170: "ISO_LANGUAGE_CODE_KOR",
		171: "ISO_LANGUAGE_CODE_KR",
		172: "ISO_LANGUAGE_CODE_KAU",
		173: "ISO_LANGUAGE_CODE_KS",
		174: "ISO_LANGUAGE_CODE_KAS",
		175: "ISO_LANGUAGE_CODE_KU",
		176: "ISO_LANGUAGE_CODE_KUR",
		177: "ISO_LANGUAGE_CODE_KV",
		178: "ISO_LANGUAGE_CODE_KOM",
		179: "ISO_LANGUAGE_CODE_KW",
		180: "ISO_LANGUAGE_CODE_COR",
		181: "ISO_LANGUAGE_CODE_KY",
		182: "ISO_LANGUAGE_CODE_KIR",
		183: "ISO_LANGUAGE_CODE_LA",
		184: "ISO_LANGUAGE_CODE_LAT",
		185: "ISO_LANGUAGE_CODE_LB",
		186: "ISO_LANGUAGE_CODE_LTZ",
		187: "ISO_LANGUAGE_CODE_LG",
		188: "ISO_LANGUAGE_CODE_LUG",
		189: "ISO_LANGUAGE_CODE_LI",
		190: "ISO_LANGUAGE_CODE_LIM",
		191: "ISO_LANGUAGE_CODE_LN",
		192: "ISO_LANGUAGE_CODE_LIN",
		193: "ISO_LANGUAGE_CODE_LO",
		194: "ISO_LANGUAGE_CODE_LAO",
		195: "ISO_LANGUAGE_CODE_LT",
		196: "ISO_LANGUAGE_CODE_LIT",
		197: "ISO_LANGUAGE_CODE_LU",
		198: "ISO_LANGUAGE_CODE_LUB",
		199: "ISO_LANGUAGE_CODE_LV",
		200: "ISO_LANGUAGE_CODE_LAV",
		201: "ISO_LANGUAGE_CODE_MG",
		202: "ISO_LANGUAGE_CODE_MLG",
		203: "ISO_LANGUAGE_CODE_MH",
		204: "ISO_LANGUAGE_CODE_MAH",
		205: "ISO_LANGUAGE_CODE_MI",
		206: "ISO_LANGUAGE_CODE_MRI",
		207: "ISO_LANGUAGE_CODE_MK",
		208: "ISO_LANGUAGE_CODE_MKD",
		209: "ISO_LANGUAGE_CODE_ML",
		210: "ISO_LANGUAGE_CODE_MAL",
		211: "ISO_LANGUAGE_CODE_MN",
		212: "ISO_LANGUAGE_CODE_MON",
		213: "ISO_LANGUAGE_CODE_MO",
		214: "ISO_LANGUAGE_CODE_MR",
		215: "ISO_LANGUAGE_CODE_MAR",
		216: "ISO_LANGUAGE_CODE_MS",
		217: "ISO_LANGUAGE_CODE_MSA",
		218: "ISO_LANGUAGE_CODE_MT",
		219: "ISO_LANGUAGE_CODE_MLT",
		220: "ISO_LANGUAGE_CODE_MY",
		221: "ISO_LANGUAGE_CODE_MYA",
		222: "ISO_LANGUAGE_CODE_NA",
		223: "ISO_LANGUAGE_CODE_NAU",
		224: "ISO_LANGUAGE_CODE_NB",
		225: "ISO_LANGUAGE_CODE_NOB",
		226: "ISO_LANGUAGE_CODE_ND",
		227: "ISO_LANGUAGE_CODE_NDE",
		228: "ISO_LANGUAGE_CODE_NE",
		229: "ISO_LANGUAGE_CODE_NEP",
		230: "ISO_LANGUAGE_CODE_NG",
		231: "ISO_LANGUAGE_CODE_NDO",
		232: "ISO_LANGUAGE_CODE_NL",
		233: "ISO_LANGUAGE_CODE_NLD",
		234: "ISO_LANGUAGE_CODE_NN",
		235: "ISO_LANGUAGE_CODE_NNO",
		236: "ISO_LANGUAGE_CODE_NO",
		237: "ISO_LANGUAGE_CODE_NOR",
		238: "ISO_LANGUAGE_CODE_NR",
		239: "ISO_LANGUAGE_CODE_NBL",
		240: "ISO_LANGUAGE_CODE_NV",
		241: "ISO_LANGUAGE_CODE_NAV",
		242: "ISO_LANGUAGE_CODE_NY",
		243: "ISO_LANGUAGE_CODE_NYA",
		244: "ISO_LANGUAGE_CODE_OC",
		245: "ISO_LANGUAGE_CODE_OCI",
		246: "ISO_LANGUAGE_CODE_OJ",
		247: "ISO_LANGUAGE_CODE_OJI",
		248: "ISO_LANGUAGE_CODE_OM",
		249: "ISO_LANGUAGE_CODE_ORM",
		250: "ISO_LANGUAGE_CODE_OR",
		251: "ISO_LANGUAGE_CODE_ORI",
		252: "ISO_LANGUAGE_CODE_OS",
		253: "ISO_LANGUAGE_CODE_OSS",
		254: "ISO_LANGUAGE_CODE_PA",
		255: "ISO_LANGUAGE_CODE_PAN",
		256: "ISO_LANGUAGE_CODE_PI",
		257: "ISO_LANGUAGE_CODE_PLI",
		258: "ISO_LANGUAGE_CODE_PL",
		259: "ISO_LANGUAGE_CODE_POL",
		260: "ISO_LANGUAGE_CODE_PS",
		261: "ISO_LANGUAGE_CODE_PUS",
		262: "ISO_LANGUAGE_CODE_PT",
		263: "ISO_LANGUAGE_CODE_POR",
		264: "ISO_LANGUAGE_CODE_QU",
		265: "ISO_LANGUAGE_CODE_QUE",
		266: "ISO_LANGUAGE_CODE_RM",
		267: "ISO_LANGUAGE_CODE_ROH",
		268: "ISO_LANGUAGE_CODE_RN",
		269: "ISO_LANGUAGE_CODE_RUN",
		270: "ISO_LANGUAGE_CODE_RO",
		271: "ISO_LANGUAGE_CODE_RON",
		272: "ISO_LANGUAGE_CODE_RU",
		273: "ISO_LANGUAGE_CODE_RUS",
		274: "ISO_LANGUAGE_CODE_RW",
		275: "ISO_LANGUAGE_CODE_KIN",
		276: "ISO_LANGUAGE_CODE_SA",
		277: "ISO_LANGUAGE_CODE_SAN",
		278: "ISO_LANGUAGE_CODE_SC",
		279: "ISO_LANGUAGE_CODE_SRD",
		280: "ISO_LANGUAGE_CODE_SD",
		281: "ISO_LANGUAGE_CODE_SND",
		282: "ISO_LANGUAGE_CODE_SE",
		283: "ISO_LANGUAGE_CODE_SME",
		284: "ISO_LANGUAGE_CODE_SG",
		285: "ISO_LANGUAGE_CODE_SAG",
		286: "ISO_LANGUAGE_CODE_SI",
		287: "ISO_LANGUAGE_CODE_SIN",
		288: "ISO_LANGUAGE_CODE_SK",
		289: "ISO_LANGUAGE_CODE_SLK",
		290: "ISO_LANGUAGE_CODE_SL",
		291: "ISO_LANGUAGE_CODE_SLV",
		292: "ISO_LANGUAGE_CODE_SM",
		293: "ISO_LANGUAGE_CODE_SMO",
		294: "ISO_LANGUAGE_CODE_SN",
		295: "ISO_LANGUAGE_CODE_SNA",
		296: "ISO_LANGUAGE_CODE_SO",
		297: "ISO_LANGUAGE_CODE_SOM",
		298: "ISO_LANGUAGE_CODE_SQ",
		299: "ISO_LANGUAGE_CODE_SQI",
		300: "ISO_LANGUAGE_CODE_SR",
		301: "ISO_LANGUAGE_CODE_SRP",
		302: "ISO_LANGUAGE_CODE_SS",
		303: "ISO_LANGUAGE_CODE_SSW",
		304: "ISO_LANGUAGE_CODE_ST",
		305: "ISO_LANGUAGE_CODE_SOT",
		306: "ISO_LANGUAGE_CODE_SU",
		307: "ISO_LANGUAGE_CODE_SUN",
		308: "ISO_LANGUAGE_CODE_SV",
		309: "ISO_LANGUAGE_CODE_SWE",
		310: "ISO_LANGUAGE_CODE_SW",
		311: "ISO_LANGUAGE_CODE_SWA",
		312: "ISO_LANGUAGE_CODE_TA",
		313: "ISO_LANGUAGE_CODE_TAM",
		314: "ISO_LANGUAGE_CODE_TE",
		315: "ISO_LANGUAGE_CODE_TEL",
		316: "ISO_LANGUAGE_CODE_TG",
		317: "ISO_LANGUAGE_CODE_TGK",
		318: "ISO_LANGUAGE_CODE_TH",
		319: "ISO_LANGUAGE_CODE_THA",
		320: "ISO_LANGUAGE_CODE_TI",
		321: "ISO_LANGUAGE_CODE_TIR",
		322: "ISO_LANGUAGE_CODE_TK",
		323: "ISO_LANGUAGE_CODE_TUK",
		324: "ISO_LANGUAGE_CODE_TL",
		325: "ISO_LANGUAGE_CODE_TGL",
		326: "ISO_LANGUAGE_CODE_TN",
		327: "ISO_LANGUAGE_CODE_TSN",
		328: "ISO_LANGUAGE_CODE_TO",
		329: "ISO_LANGUAGE_CODE_TON",
		330: "ISO_LANGUAGE_CODE_TR",
		331: "ISO_LANGUAGE_CODE_TUR",
		332: "ISO_LANGUAGE_CODE_TS",
		333: "ISO_LANGUAGE_CODE_TSO",
		334: "ISO_LANGUAGE_CODE_TT",
		335: "ISO_LANGUAGE_CODE_TAT",
		336: "ISO_LANGUAGE_CODE_TW",
		337: "ISO_LANGUAGE_CODE_TWI",
		338: "ISO_LANGUAGE_CODE_TY",
		339: "ISO_LANGUAGE_CODE_TAH",
		340: "ISO_LANGUAGE_CODE_UG",
		341: "ISO_LANGUAGE_CODE_UIG",
		342: "ISO_LANGUAGE_CODE_UK",
		343: "ISO_LANGUAGE_CODE_UKR",
		344: "ISO_LANGUAGE_CODE_UR",
		345: "ISO_LANGUAGE_CODE_URD",
		346: "ISO_LANGUAGE_CODE_UZ",
		347: "ISO_LANGUAGE_CODE_UZB",
		348: "ISO_LANGUAGE_CODE_VE",
		349: "ISO_LANGUAGE_CODE_VEN",
		350: "ISO_LANGUAGE_CODE_VI",
		351: "ISO_LANGUAGE_CODE_VIE",
		352: "ISO_LANGUAGE_CODE_VO",
		353: "ISO_LANGUAGE_CODE_VOL",
		354: "ISO_LANGUAGE_CODE_WA",
		355: "ISO_LANGUAGE_CODE_WLN",
		356: "ISO_LANGUAGE_CODE_WO",
		357: "ISO_LANGUAGE_CODE_WOL",
		358: "ISO_LANGUAGE_CODE_XH",
		359: "ISO_LANGUAGE_CODE_XHO",
		360: "ISO_LANGUAGE_CODE_YI",
		361: "ISO_LANGUAGE_CODE_YID",
		362: "ISO_LANGUAGE_CODE_YO",
		363: "ISO_LANGUAGE_CODE_YOR",
		364: "ISO_LANGUAGE_CODE_ZA",
		365: "ISO_LANGUAGE_CODE_ZHA",
		366: "ISO_LANGUAGE_CODE_ZH",
		367: "ISO_LANGUAGE_CODE_ZHO",
		368: "ISO_LANGUAGE_CODE_ZU",
		369: "ISO_LANGUAGE_CODE_ZUL",
		370: "ISO_LANGUAGE_CODE_ACE",
		371: "ISO_LANGUAGE_CODE_ACH",
		372: "ISO_LANGUAGE_CODE_ADA",
		373: "ISO_LANGUAGE_CODE_ADY",
		374: "ISO_LANGUAGE_CODE_AFA",
		375: "ISO_LANGUAGE_CODE_AFH",
		376: "ISO_LANGUAGE_CODE_AIN",
		377: "ISO_LANGUAGE_CODE_AKK",
		378: "ISO_LANGUAGE_CODE_ALE",
		379: "ISO_LANGUAGE_CODE_ALG",
		380: "ISO_LANGUAGE_CODE_ALT",
		381: "ISO_LANGUAGE_CODE_ANG",
		382: "ISO_LANGUAGE_CODE_ANP",
		383: "ISO_LANGUAGE_CODE_APA",
		384: "ISO_LANGUAGE_CODE_ARC",
		385: "ISO_LANGUAGE_CODE_ARN",
		386: "ISO_LANGUAGE_CODE_ARP",
		387: "ISO_LANGUAGE_CODE_ART",
		388: "ISO_LANGUAGE_CODE_ARW",
		389: "ISO_LANGUAGE_CODE_AST",
		390: "ISO_LANGUAGE_CODE_ATH",
		391: "ISO_LANGUAGE_CODE_AUS",
		392: "ISO_LANGUAGE_CODE_AWA",
		393: "ISO_LANGUAGE_CODE_BAD",
		394: "ISO_LANGUAGE_CODE_BAI",
		395: "ISO_LANGUAGE_CODE_BAL",
		396: "ISO_LANGUAGE_CODE_BAN",
		397: "ISO_LANGUAGE_CODE_BAS",
		398: "ISO_LANGUAGE_CODE_BAT",
		399: "ISO_LANGUAGE_CODE_BEJ",
		400: "ISO_LANGUAGE_CODE_BEM",
		401: "ISO_LANGUAGE_CODE_BER",
		402: "ISO_LANGUAGE_CODE_BGC",
		403: "ISO_LANGUAGE_CODE_BHO",
		404: "ISO_LANGUAGE_CODE_BIK",
		405: "ISO_LANGUAGE_CODE_BIN",
		406: "ISO_LANGUAGE_CODE_BLA",
		407: "ISO_LANGUAGE_CODE_BNT",
		408: "ISO_LANGUAGE_CODE_BRA",
		409: "ISO_LANGUAGE_CODE_BTK",
		410: "ISO_LANGUAGE_CODE_BUA",
		411: "ISO_LANGUAGE_CODE_BUG",
		412: "ISO_LANGUAGE_CODE_BYN",
		413: "ISO_LANGUAGE_CODE_CAD",
		414: "ISO_LANGUAGE_CODE_CAI",
		415: "ISO_LANGUAGE_CODE_CAR",
		416: "ISO_LANGUAGE_CODE_CAU",
		417: "ISO_LANGUAGE_CODE_CEB",
		418: "ISO_LANGUAGE_CODE_CEL",
		419: "ISO_LANGUAGE_CODE_CHB",
		420: "ISO_LANGUAGE_CODE_CHG",
		421: "ISO_LANGUAGE_CODE_CHK",
		422: "ISO_LANGUAGE_CODE_CHM",
		423: "ISO_LANGUAGE_CODE_CHN",
		424: "ISO_LANGUAGE_CODE_CHO",
		425: "ISO_LANGUAGE_CODE_CHP",
		426: "ISO_LANGUAGE_CODE_CHR",
		427: "ISO_LANGUAGE_CODE_CHY",
		428: "ISO_LANGUAGE_CODE_CMC",
		429: "ISO_LANGUAGE_CODE_CNR",
		430: "ISO_LANGUAGE_CODE_COP",
		431: "ISO_LANGUAGE_CODE_CPE",
		432: "ISO_LANGUAGE_CODE_CPF",
		433: "ISO_LANGUAGE_CODE_CPP",
		434: "ISO_LANGUAGE_CODE_CRH",
		435: "ISO_LANGUAGE_CODE_CRP",
		436: "ISO_LANGUAGE_CODE_CSB",
		437: "ISO_LANGUAGE_CODE_CUS",
		438: "ISO_LANGUAGE_CODE_DAK",
		439: "ISO_LANGUAGE_CODE_DAR",
		440: "ISO_LANGUAGE_CODE_DAY",
		441: "ISO_LANGUAGE_CODE_DEL",
		442: "ISO_LANGUAGE_CODE_DEN",
		443: "ISO_LANGUAGE_CODE_DGR",
		444: "ISO_LANGUAGE_CODE_DIN",
		445: "ISO_LANGUAGE_CODE_DOI",
		446: "ISO_LANGUAGE_CODE_DRA",
		447: "ISO_LANGUAGE_CODE_DSB",
		448: "ISO_LANGUAGE_CODE_DUA",
		449: "ISO_LANGUAGE_CODE_DUM",
		450: "ISO_LANGUAGE_CODE_DYU",
		451: "ISO_LANGUAGE_CODE_EFI",
		452: "ISO_LANGUAGE_CODE_EGY",
		453: "ISO_LANGUAGE_CODE_EKA",
		454: "ISO_LANGUAGE_CODE_ELX",
		455: "ISO_LANGUAGE_CODE_ENM",
		456: "ISO_LANGUAGE_CODE_EWO",
		457: "ISO_LANGUAGE_CODE_FAN",
		458: "ISO_LANGUAGE_CODE_FAT",
		459: "ISO_LANGUAGE_CODE_FIL",
		460: "ISO_LANGUAGE_CODE_FIU",
		461: "ISO_LANGUAGE_CODE_FON",
		462: "ISO_LANGUAGE_CODE_FRM",
		463: "ISO_LANGUAGE_CODE_FRO",
		464: "ISO_LANGUAGE_CODE_FRR",
		465: "ISO_LANGUAGE_CODE_FRS",
		466: "ISO_LANGUAGE_CODE_FUR",
		467: "ISO_LANGUAGE_CODE_GAA",
		468: "ISO_LANGUAGE_CODE_GAY",
		469: "ISO_LANGUAGE_CODE_GBA",
		470: "ISO_LANGUAGE_CODE_GEM",
		471: "ISO_LANGUAGE_CODE_GEZ",
		472: "ISO_LANGUAGE_CODE_GIL",
		473: "ISO_LANGUAGE_CODE_GMH",
		474: "ISO_LANGUAGE_CODE_GOH",
		475: "ISO_LANGUAGE_CODE_GON",
		476: "ISO_LANGUAGE_CODE_GOR",
		477: "ISO_LANGUAGE_CODE_GOT",
		478: "ISO_LANGUAGE_CODE_GRB",
		479: "ISO_LANGUAGE_CODE_GRC",
		480: "ISO_LANGUAGE_CODE_GSW",
		481: "ISO_LANGUAGE_CODE_GWI",
		482: "ISO_LANGUAGE_CODE_HAI",
		483: "ISO_LANGUAGE_CODE_HAW",
		484: "ISO_LANGUAGE_CODE_HIL",
		485: "ISO_LANGUAGE_CODE_HIM",
		486: "ISO_LANGUAGE_CODE_HIT",
		487: "ISO_LANGUAGE_CODE_HMN",
		488: "ISO_LANGUAGE_CODE_HSB",
		489: "ISO_LANGUAGE_CODE_HUP",
		490: "ISO_LANGUAGE_CODE_IBA",
		491: "ISO_LANGUAGE_CODE_IJO",
		492: "ISO_LANGUAGE_CODE_ILO",
		493: "ISO_LANGUAGE_CODE_INC",
		494: "ISO_LANGUAGE_CODE_INE",
		495: "ISO_LANGUAGE_CODE_INH",
		496: "ISO_LANGUAGE_CODE_IRA",
		497: "ISO_LANGUAGE_CODE_IRO",
		498: "ISO_LANGUAGE_CODE_JBO",
		499: "ISO_LANGUAGE_CODE_JPR",
		500: "ISO_LANGUAGE_CODE_JRB",
		501: "ISO_LANGUAGE_CODE_KAA",
		502: "ISO_LANGUAGE_CODE_KAB",
		503: "ISO_LANGUAGE_CODE_KAC",
		504: "ISO_LANGUAGE_CODE_KAM",
		505: "ISO_LANGUAGE_CODE_KAR",
		506: "ISO_LANGUAGE_CODE_KAW",
		507: "ISO_LANGUAGE_CODE_KBD",
		508: "ISO_LANGUAGE_CODE_KHA",
		509: "ISO_LANGUAGE_CODE_KHI",
		510: "ISO_LANGUAGE_CODE_KHO",
		511: "ISO_LANGUAGE_CODE_KMB",
		512: "ISO_LANGUAGE_CODE_KOK",
		513: "ISO_LANGUAGE_CODE_KOS",
		514: "ISO_LANGUAGE_CODE_KPE",
		515: "ISO_LANGUAGE_CODE_KRC",
		516: "ISO_LANGUAGE_CODE_KRL",
		517: "ISO_LANGUAGE_CODE_KRO",
		518: "ISO_LANGUAGE_CODE_KRU",
		519: "ISO_LANGUAGE_CODE_KUM",
		520: "ISO_LANGUAGE_CODE_KUT",
		521: "ISO_LANGUAGE_CODE_LAD",
		522: "ISO_LANGUAGE_CODE_LAH",
		523: "ISO_LANGUAGE_CODE_LAM",
		524: "ISO_LANGUAGE_CODE_LEZ",
		525: "ISO_LANGUAGE_CODE_LOL",
		526: "ISO_LANGUAGE_CODE_LOZ",
		527: "ISO_LANGUAGE_CODE_LUA",
		528: "ISO_LANGUAGE_CODE_LUI",
		529: "ISO_LANGUAGE_CODE_LUN",
		530: "ISO_LANGUAGE_CODE_LUO",
		531: "ISO_LANGUAGE_CODE_LUS",
		532: "ISO_LANGUAGE_CODE_MAD",
		533: "ISO_LANGUAGE_CODE_MAG",
		534: "ISO_LANGUAGE_CODE_MAI",
		535: "ISO_LANGUAGE_CODE_MAK",
		536: "ISO_LANGUAGE_CODE_MAN",
		537: "ISO_LANGUAGE_CODE_MAP",
		538: "ISO_LANGUAGE_CODE_MAS",
		539: "ISO_LANGUAGE_CODE_MDF",
		540: "ISO_LANGUAGE_CODE_MDR",
		541: "ISO_LANGUAGE_CODE_MEN",
		542: "ISO_LANGUAGE_CODE_MGA",
		543: "ISO_LANGUAGE_CODE_MIC",
		544: "ISO_LANGUAGE_CODE_MIN",
		545: "ISO_LANGUAGE_CODE_MIS",
		546: "ISO_LANGUAGE_CODE_MKH",
		547: "ISO_LANGUAGE_CODE_MNC",
		548: "ISO_LANGUAGE_CODE_MNI",
		549: "ISO_LANGUAGE_CODE_MNO",
		550: "ISO_LANGUAGE_CODE_MOH",
		551: "ISO_LANGUAGE_CODE_MOS",
		552: "ISO_LANGUAGE_CODE_MUL",
		553: "ISO_LANGUAGE_CODE_MUN",
		554: "ISO_LANGUAGE_CODE_MUS",
		555: "ISO_LANGUAGE_CODE_MWL",
		556: "ISO_LANGUAGE_CODE_MWR",
		557: "ISO_LANGUAGE_CODE_MYN",
		558: "ISO_LANGUAGE_CODE_MYV",
		559: "ISO_LANGUAGE_CODE_NAH",
		560: "ISO_LANGUAGE_CODE_NAI",
		561: "ISO_LANGUAGE_CODE_NAP",
		562: "ISO_LANGUAGE_CODE_NDS",
		563: "ISO_LANGUAGE_CODE_NEW",
		564: "ISO_LANGUAGE_CODE_NIA",
		565: "ISO_LANGUAGE_CODE_NIC",
		566: "ISO_LANGUAGE_CODE_NIU",
		567: "ISO_LANGUAGE_CODE_NOG",
		568: "ISO_LANGUAGE_CODE_NON",
		569: "ISO_LANGUAGE_CODE_NQO",
		570: "ISO_LANGUAGE_CODE_NSO",
		571: "ISO_LANGUAGE_CODE_NUB",
		572: "ISO_LANGUAGE_CODE_NWC",
		573: "ISO_LANGUAGE_CODE_NYM",
		574: "ISO_LANGUAGE_CODE_NYN",
		575: "ISO_LANGUAGE_CODE_NYO",
		576: "ISO_LANGUAGE_CODE_NZI",
		577: "ISO_LANGUAGE_CODE_OSA",
		578: "ISO_LANGUAGE_CODE_OTA",
		579: "ISO_LANGUAGE_CODE_OTO",
		580: "ISO_LANGUAGE_CODE_PAA",
		581: "ISO_LANGUAGE_CODE_PAG",
		582: "ISO_LANGUAGE_CODE_PAL",
		583: "ISO_LANGUAGE_CODE_PAM",
		584: "ISO_LANGUAGE_CODE_PAP",
		585: "ISO_LANGUAGE_CODE_PAU",
		586: "ISO_LANGUAGE_CODE_PEO",
		587: "ISO_LANGUAGE_CODE_PHI",
		588: "ISO_LANGUAGE_CODE_PHN",
		589: "ISO_LANGUAGE_CODE_PON",
		590: "ISO_LANGUAGE_CODE_PRA",
		591: "ISO_LANGUAGE_CODE_PRO",
		592: "ISO_LANGUAGE_CODE_QQA",
		593: "ISO_LANGUAGE_CODE_QQB",
		594: "ISO_LANGUAGE_CODE_QQC",
		595: "ISO_LANGUAGE_CODE_QQD",
		596: "ISO_LANGUAGE_CODE_QQE",
		597: "ISO_LANGUAGE_CODE_QQF",
		598: "ISO_LANGUAGE_CODE_QQG",
		599: "ISO_LANGUAGE_CODE_QQH",
		600: "ISO_LANGUAGE_CODE_QQI",
		601: "ISO_LANGUAGE_CODE_QQJ",
		602: "ISO_LANGUAGE_CODE_RAJ",
		603: "ISO_LANGUAGE_CODE_RAP",
		604: "ISO_LANGUAGE_CODE_RAR",
		605: "ISO_LANGUAGE_CODE_ROA",
		606: "ISO_LANGUAGE_CODE_ROM",
		607: "ISO_LANGUAGE_CODE_RUP",
		608: "ISO_LANGUAGE_CODE_SAD",
		609: "ISO_LANGUAGE_CODE_SAH",
		610: "ISO_LANGUAGE_CODE_SAI",
		611: "ISO_LANGUAGE_CODE_SAL",
		612: "ISO_LANGUAGE_CODE_SAM",
		613: "ISO_LANGUAGE_CODE_SAS",
		614: "ISO_LANGUAGE_CODE_SAT",
		615: "ISO_LANGUAGE_CODE_SCN",
		616: "ISO_LANGUAGE_CODE_SCO",
		617: "ISO_LANGUAGE_CODE_SEL",
		618: "ISO_LANGUAGE_CODE_SEM",
		619: "ISO_LANGUAGE_CODE_SGA",
		620: "ISO_LANGUAGE_CODE_SGN",
		621: "ISO_LANGUAGE_CODE_SHN",
		622: "ISO_LANGUAGE_CODE_SID",
		623: "ISO_LANGUAGE_CODE_SIO",
		624: "ISO_LANGUAGE_CODE_SIT",
		625: "ISO_LANGUAGE_CODE_SLA",
		626: "ISO_LANGUAGE_CODE_SMA",
		627: "ISO_LANGUAGE_CODE_SMI",
		628: "ISO_LANGUAGE_CODE_SMJ",
		629: "ISO_LANGUAGE_CODE_SMN",
		630: "ISO_LANGUAGE_CODE_SMS",
		631: "ISO_LANGUAGE_CODE_SNK",
		632: "ISO_LANGUAGE_CODE_SOG",
		633: "ISO_LANGUAGE_CODE_SON",
		634: "ISO_LANGUAGE_CODE_SRN",
		635: "ISO_LANGUAGE_CODE_SRR",
		636: "ISO_LANGUAGE_CODE_SSA",
		637: "ISO_LANGUAGE_CODE_SUK",
		638: "ISO_LANGUAGE_CODE_SUS",
		639: "ISO_LANGUAGE_CODE_SUX",
		640: "ISO_LANGUAGE_CODE_SYC",
		641: "ISO_LANGUAGE_CODE_SYR",
		642: "ISO_LANGUAGE_CODE_TAI",
		643: "ISO_LANGUAGE_CODE_TEM",
		644: "ISO_LANGUAGE_CODE_TER",
		645: "ISO_LANGUAGE_CODE_TET",
		646: "ISO_LANGUAGE_CODE_TIG",
		647: "ISO_LANGUAGE_CODE_TIV",
		648: "ISO_LANGUAGE_CODE_TKL",
		649: "ISO_LANGUAGE_CODE_TLH",
		650: "ISO_LANGUAGE_CODE_TLI",
		651: "ISO_LANGUAGE_CODE_TMH",
		652: "ISO_LANGUAGE_CODE_TOG",
		653: "ISO_LANGUAGE_CODE_TPI",
		654: "ISO_LANGUAGE_CODE_TSI",
		655: "ISO_LANGUAGE_CODE_TUM",
		656: "ISO_LANGUAGE_CODE_TUP",
		657: "ISO_LANGUAGE_CODE_TUT",
		658: "ISO_LANGUAGE_CODE_TVL",
		659: "ISO_LANGUAGE_CODE_TYV",
		660: "ISO_LANGUAGE_CODE_UDM",
		661: "ISO_LANGUAGE_CODE_UGA",
		662: "ISO_LANGUAGE_CODE_UMB",
		663: "ISO_LANGUAGE_CODE_UND",
		664: "ISO_LANGUAGE_CODE_VAI",
		665: "ISO_LANGUAGE_CODE_VOT",
		666: "ISO_LANGUAGE_CODE_WAK",
		667: "ISO_LANGUAGE_CODE_WAL",
		668: "ISO_LANGUAGE_CODE_WAR",
		669: "ISO_LANGUAGE_CODE_WAS",
		670: "ISO_LANGUAGE_CODE_WEN",
		671: "ISO_LANGUAGE_CODE_XAL",
		672: "ISO_LANGUAGE_CODE_YAO",
		673: "ISO_LANGUAGE_CODE_YAP",
		674: "ISO_LANGUAGE_CODE_YPK",
		675: "ISO_LANGUAGE_CODE_ZAP",
		676: "ISO_LANGUAGE_CODE_ZBL",
		677: "ISO_LANGUAGE_CODE_ZEN",
		678: "ISO_LANGUAGE_CODE_ZGH",
		679: "ISO_LANGUAGE_CODE_ZND",
		680: "ISO_LANGUAGE_CODE_ZUN",
		681: "ISO_LANGUAGE_CODE_ZXX",
		682: "ISO_LANGUAGE_CODE_ZZA",
		683: "ISO_LANGUAGE_CODE_AAA",
	}
	IsoLanguageCode_value = map[string]int32{
		"ISO_LANGUAGE_CODE_UNSPECIFIED": 0,
		"ISO_LANGUAGE_CODE_AA":          1,
		"ISO_LANGUAGE_CODE_AAR":         2,
		"ISO_LANGUAGE_CODE_AB":          3,
		"ISO_LANGUAGE_CODE_ABK":         4,
		"ISO_LANGUAGE_CODE_AE":          5,
		"ISO_LANGUAGE_CODE_AVE":         6,
		"ISO_LANGUAGE_CODE_AF":          7,
		"ISO_LANGUAGE_CODE_AFR":         8,
		"ISO_LANGUAGE_CODE_AK":          9,
		"ISO_LANGUAGE_CODE_AKA":         10,
		"ISO_LANGUAGE_CODE_AM":          11,
		"ISO_LANGUAGE_CODE_AMH":         12,
		"ISO_LANGUAGE_CODE_AN":          13,
		"ISO_LANGUAGE_CODE_ARG":         14,
		"ISO_LANGUAGE_CODE_AR":          15,
		"ISO_LANGUAGE_CODE_ARA":         16,
		"ISO_LANGUAGE_CODE_AS":          17,
		"ISO_LANGUAGE_CODE_ASM":         18,
		"ISO_LANGUAGE_CODE_AV":          19,
		"ISO_LANGUAGE_CODE_AVA":         20,
		"ISO_LANGUAGE_CODE_AY":          21,
		"ISO_LANGUAGE_CODE_AYM":         22,
		"ISO_LANGUAGE_CODE_AZ":          23,
		"ISO_LANGUAGE_CODE_AZE":         24,
		"ISO_LANGUAGE_CODE_BA":          25,
		"ISO_LANGUAGE_CODE_BAK":         26,
		"ISO_LANGUAGE_CODE_BE":          27,
		"ISO_LANGUAGE_CODE_BEL":         28,
		"ISO_LANGUAGE_CODE_BG":          29,
		"ISO_LANGUAGE_CODE_BUL":         30,
		"ISO_LANGUAGE_CODE_BH":          31,
		"ISO_LANGUAGE_CODE_BIH":         32,
		"ISO_LANGUAGE_CODE_BI":          33,
		"ISO_LANGUAGE_CODE_BIS":         34,
		"ISO_LANGUAGE_CODE_BM":          35,
		"ISO_LANGUAGE_CODE_BAM":         36,
		"ISO_LANGUAGE_CODE_BN":          37,
		"ISO_LANGUAGE_CODE_BEN":         38,
		"ISO_LANGUAGE_CODE_BO":          39,
		"ISO_LANGUAGE_CODE_BOD":         40,
		"ISO_LANGUAGE_CODE_BR":          41,
		"ISO_LANGUAGE_CODE_BRE":         42,
		"ISO_LANGUAGE_CODE_BS":          43,
		"ISO_LANGUAGE_CODE_BOS":         44,
		"ISO_LANGUAGE_CODE_CA":          45,
		"ISO_LANGUAGE_CODE_CAT":         46,
		"ISO_LANGUAGE_CODE_CE":          47,
		"ISO_LANGUAGE_CODE_CHE":         48,
		"ISO_LANGUAGE_CODE_CH":          49,
		"ISO_LANGUAGE_CODE_CHA":         50,
		"ISO_LANGUAGE_CODE_CO":          51,
		"ISO_LANGUAGE_CODE_COS":         52,
		"ISO_LANGUAGE_CODE_CR":          53,
		"ISO_LANGUAGE_CODE_CRE":         54,
		"ISO_LANGUAGE_CODE_CS":          55,
		"ISO_LANGUAGE_CODE_CES":         56,
		"ISO_LANGUAGE_CODE_CU":          57,
		"ISO_LANGUAGE_CODE_CHU":         58,
		"ISO_LANGUAGE_CODE_CV":          59,
		"ISO_LANGUAGE_CODE_CHV":         60,
		"ISO_LANGUAGE_CODE_CY":          61,
		"ISO_LANGUAGE_CODE_CYM":         62,
		"ISO_LANGUAGE_CODE_DA":          63,
		"ISO_LANGUAGE_CODE_DAN":         64,
		"ISO_LANGUAGE_CODE_DE":          65,
		"ISO_LANGUAGE_CODE_DEU":         66,
		"ISO_LANGUAGE_CODE_DV":          67,
		"ISO_LANGUAGE_CODE_DIV":         68,
		"ISO_LANGUAGE_CODE_DZ":          69,
		"ISO_LANGUAGE_CODE_DZO":         70,
		"ISO_LANGUAGE_CODE_EE":          71,
		"ISO_LANGUAGE_CODE_EWE":         72,
		"ISO_LANGUAGE_CODE_EL":          73,
		"ISO_LANGUAGE_CODE_ELL":         74,
		"ISO_LANGUAGE_CODE_EN":          75,
		"ISO_LANGUAGE_CODE_ENG":         76,
		"ISO_LANGUAGE_CODE_EO":          77,
		"ISO_LANGUAGE_CODE_EPO":         78,
		"ISO_LANGUAGE_CODE_ES":          79,
		"ISO_LANGUAGE_CODE_SPA":         80,
		"ISO_LANGUAGE_CODE_ET":          81,
		"ISO_LANGUAGE_CODE_EST":         82,
		"ISO_LANGUAGE_CODE_EU":          83,
		"ISO_LANGUAGE_CODE_EUS":         84,
		"ISO_LANGUAGE_CODE_FA":          85,
		"ISO_LANGUAGE_CODE_FAS":         86,
		"ISO_LANGUAGE_CODE_FF":          87,
		"ISO_LANGUAGE_CODE_FUL":         88,
		"ISO_LANGUAGE_CODE_FI":          89,
		"ISO_LANGUAGE_CODE_FIN":         90,
		"ISO_LANGUAGE_CODE_FJ":          91,
		"ISO_LANGUAGE_CODE_FIJ":         92,
		"ISO_LANGUAGE_CODE_FO":          93,
		"ISO_LANGUAGE_CODE_FAO":         94,
		"ISO_LANGUAGE_CODE_FR":          95,
		"ISO_LANGUAGE_CODE_FRA":         96,
		"ISO_LANGUAGE_CODE_FY":          97,
		"ISO_LANGUAGE_CODE_FRY":         98,
		"ISO_LANGUAGE_CODE_GA":          99,
		"ISO_LANGUAGE_CODE_GLE":         100,
		"ISO_LANGUAGE_CODE_GD":          101,
		"ISO_LANGUAGE_CODE_GLA":         102,
		"ISO_LANGUAGE_CODE_GL":          103,
		"ISO_LANGUAGE_CODE_GLG":         104,
		"ISO_LANGUAGE_CODE_GN":          105,
		"ISO_LANGUAGE_CODE_GRN":         106,
		"ISO_LANGUAGE_CODE_GU":          107,
		"ISO_LANGUAGE_CODE_GUJ":         108,
		"ISO_LANGUAGE_CODE_GV":          109,
		"ISO_LANGUAGE_CODE_GLV":         110,
		"ISO_LANGUAGE_CODE_HA":          111,
		"ISO_LANGUAGE_CODE_HAU":         112,
		"ISO_LANGUAGE_CODE_HE":          113,
		"ISO_LANGUAGE_CODE_HEB":         114,
		"ISO_LANGUAGE_CODE_HI":          115,
		"ISO_LANGUAGE_CODE_HIN":         116,
		"ISO_LANGUAGE_CODE_HO":          117,
		"ISO_LANGUAGE_CODE_HMO":         118,
		"ISO_LANGUAGE_CODE_HR":          119,
		"ISO_LANGUAGE_CODE_HRV":         120,
		"ISO_LANGUAGE_CODE_HT":          121,
		"ISO_LANGUAGE_CODE_HAT":         122,
		"ISO_LANGUAGE_CODE_HU":          123,
		"ISO_LANGUAGE_CODE_HUN":         124,
		"ISO_LANGUAGE_CODE_HY":          125,
		"ISO_LANGUAGE_CODE_HYE":         126,
		"ISO_LANGUAGE_CODE_HZ":          127,
		"ISO_LANGUAGE_CODE_HER":         128,
		"ISO_LANGUAGE_CODE_IA":          129,
		"ISO_LANGUAGE_CODE_INA":         130,
		"ISO_LANGUAGE_CODE_ID":          131,
		"ISO_LANGUAGE_CODE_IND":         132,
		"ISO_LANGUAGE_CODE_IE":          133,
		"ISO_LANGUAGE_CODE_ILE":         134,
		"ISO_LANGUAGE_CODE_IG":          135,
		"ISO_LANGUAGE_CODE_IBO":         136,
		"ISO_LANGUAGE_CODE_II":          137,
		"ISO_LANGUAGE_CODE_III":         138,
		"ISO_LANGUAGE_CODE_IK":          139,
		"ISO_LANGUAGE_CODE_IPK":         140,
		"ISO_LANGUAGE_CODE_IO":          141,
		"ISO_LANGUAGE_CODE_IDO":         142,
		"ISO_LANGUAGE_CODE_IS":          143,
		"ISO_LANGUAGE_CODE_ISL":         144,
		"ISO_LANGUAGE_CODE_IT":          145,
		"ISO_LANGUAGE_CODE_ITA":         146,
		"ISO_LANGUAGE_CODE_IU":          147,
		"ISO_LANGUAGE_CODE_IKU":         148,
		"ISO_LANGUAGE_CODE_JA":          149,
		"ISO_LANGUAGE_CODE_JPN":         150,
		"ISO_LANGUAGE_CODE_JV":          151,
		"ISO_LANGUAGE_CODE_JAV":         152,
		"ISO_LANGUAGE_CODE_KA":          153,
		"ISO_LANGUAGE_CODE_KAT":         154,
		"ISO_LANGUAGE_CODE_KG":          155,
		"ISO_LANGUAGE_CODE_KON":         156,
		"ISO_LANGUAGE_CODE_KI":          157,
		"ISO_LANGUAGE_CODE_KIK":         158,
		"ISO_LANGUAGE_CODE_KJ":          159,
		"ISO_LANGUAGE_CODE_KUA":         160,
		"ISO_LANGUAGE_CODE_KK":          161,
		"ISO_LANGUAGE_CODE_KAZ":         162,
		"ISO_LANGUAGE_CODE_KL":          163,
		"ISO_LANGUAGE_CODE_KAL":         164,
		"ISO_LANGUAGE_CODE_KM":          165,
		"ISO_LANGUAGE_CODE_KHM":         166,
		"ISO_LANGUAGE_CODE_KN":          167,
		"ISO_LANGUAGE_CODE_KAN":         168,
		"ISO_LANGUAGE_CODE_KO":          169,
		"ISO_LANGUAGE_CODE_KOR":         170,
		"ISO_LANGUAGE_CODE_KR":          171,
		"ISO_LANGUAGE_CODE_KAU":         172,
		"ISO_LANGUAGE_CODE_KS":          173,
		"ISO_LANGUAGE_CODE_KAS":         174,
		"ISO_LANGUAGE_CODE_KU":          175,
		"ISO_LANGUAGE_CODE_KUR":         176,
		"ISO_LANGUAGE_CODE_KV":          177,
		"ISO_LANGUAGE_CODE_KOM":         178,
		"ISO_LANGUAGE_CODE_KW":          179,
		"ISO_LANGUAGE_CODE_COR":         180,
		"ISO_LANGUAGE_CODE_KY":          181,
		"ISO_LANGUAGE_CODE_KIR":         182,
		"ISO_LANGUAGE_CODE_LA":          183,
		"ISO_LANGUAGE_CODE_LAT":         184,
		"ISO_LANGUAGE_CODE_LB":          185,
		"ISO_LANGUAGE_CODE_LTZ":         186,
		"ISO_LANGUAGE_CODE_LG":          187,
		"ISO_LANGUAGE_CODE_LUG":         188,
		"ISO_LANGUAGE_CODE_LI":          189,
		"ISO_LANGUAGE_CODE_LIM":         190,
		"ISO_LANGUAGE_CODE_LN":          191,
		"ISO_LANGUAGE_CODE_LIN":         192,
		"ISO_LANGUAGE_CODE_LO":          193,
		"ISO_LANGUAGE_CODE_LAO":         194,
		"ISO_LANGUAGE_CODE_LT":          195,
		"ISO_LANGUAGE_CODE_LIT":         196,
		"ISO_LANGUAGE_CODE_LU":          197,
		"ISO_LANGUAGE_CODE_LUB":         198,
		"ISO_LANGUAGE_CODE_LV":          199,
		"ISO_LANGUAGE_CODE_LAV":         200,
		"ISO_LANGUAGE_CODE_MG":          201,
		"ISO_LANGUAGE_CODE_MLG":         202,
		"ISO_LANGUAGE_CODE_MH":          203,
		"ISO_LANGUAGE_CODE_MAH":         204,
		"ISO_LANGUAGE_CODE_MI":          205,
		"ISO_LANGUAGE_CODE_MRI":         206,
		"ISO_LANGUAGE_CODE_MK":          207,
		"ISO_LANGUAGE_CODE_MKD":         208,
		"ISO_LANGUAGE_CODE_ML":          209,
		"ISO_LANGUAGE_CODE_MAL":         210,
		"ISO_LANGUAGE_CODE_MN":          211,
		"ISO_LANGUAGE_CODE_MON":         212,
		"ISO_LANGUAGE_CODE_MO":          213,
		"ISO_LANGUAGE_CODE_MR":          214,
		"ISO_LANGUAGE_CODE_MAR":         215,
		"ISO_LANGUAGE_CODE_MS":          216,
		"ISO_LANGUAGE_CODE_MSA":         217,
		"ISO_LANGUAGE_CODE_MT":          218,
		"ISO_LANGUAGE_CODE_MLT":         219,
		"ISO_LANGUAGE_CODE_MY":          220,
		"ISO_LANGUAGE_CODE_MYA":         221,
		"ISO_LANGUAGE_CODE_NA":          222,
		"ISO_LANGUAGE_CODE_NAU":         223,
		"ISO_LANGUAGE_CODE_NB":          224,
		"ISO_LANGUAGE_CODE_NOB":         225,
		"ISO_LANGUAGE_CODE_ND":          226,
		"ISO_LANGUAGE_CODE_NDE":         227,
		"ISO_LANGUAGE_CODE_NE":          228,
		"ISO_LANGUAGE_CODE_NEP":         229,
		"ISO_LANGUAGE_CODE_NG":          230,
		"ISO_LANGUAGE_CODE_NDO":         231,
		"ISO_LANGUAGE_CODE_NL":          232,
		"ISO_LANGUAGE_CODE_NLD":         233,
		"ISO_LANGUAGE_CODE_NN":          234,
		"ISO_LANGUAGE_CODE_NNO":         235,
		"ISO_LANGUAGE_CODE_NO":          236,
		"ISO_LANGUAGE_CODE_NOR":         237,
		"ISO_LANGUAGE_CODE_NR":          238,
		"ISO_LANGUAGE_CODE_NBL":         239,
		"ISO_LANGUAGE_CODE_NV":          240,
		"ISO_LANGUAGE_CODE_NAV":         241,
		"ISO_LANGUAGE_CODE_NY":          242,
		"ISO_LANGUAGE_CODE_NYA":         243,
		"ISO_LANGUAGE_CODE_OC":          244,
		"ISO_LANGUAGE_CODE_OCI":         245,
		"ISO_LANGUAGE_CODE_OJ":          246,
		"ISO_LANGUAGE_CODE_OJI":         247,
		"ISO_LANGUAGE_CODE_OM":          248,
		"ISO_LANGUAGE_CODE_ORM":         249,
		"ISO_LANGUAGE_CODE_OR":          250,
		"ISO_LANGUAGE_CODE_ORI":         251,
		"ISO_LANGUAGE_CODE_OS":          252,
		"ISO_LANGUAGE_CODE_OSS":         253,
		"ISO_LANGUAGE_CODE_PA":          254,
		"ISO_LANGUAGE_CODE_PAN":         255,
		"ISO_LANGUAGE_CODE_PI":          256,
		"ISO_LANGUAGE_CODE_PLI":         257,
		"ISO_LANGUAGE_CODE_PL":          258,
		"ISO_LANGUAGE_CODE_POL":         259,
		"ISO_LANGUAGE_CODE_PS":          260,
		"ISO_LANGUAGE_CODE_PUS":         261,
		"ISO_LANGUAGE_CODE_PT":          262,
		"ISO_LANGUAGE_CODE_POR":         263,
		"ISO_LANGUAGE_CODE_QU":          264,
		"ISO_LANGUAGE_CODE_QUE":         265,
		"ISO_LANGUAGE_CODE_RM":          266,
		"ISO_LANGUAGE_CODE_ROH":         267,
		"ISO_LANGUAGE_CODE_RN":          268,
		"ISO_LANGUAGE_CODE_RUN":         269,
		"ISO_LANGUAGE_CODE_RO":          270,
		"ISO_LANGUAGE_CODE_RON":         271,
		"ISO_LANGUAGE_CODE_RU":          272,
		"ISO_LANGUAGE_CODE_RUS":         273,
		"ISO_LANGUAGE_CODE_RW":          274,
		"ISO_LANGUAGE_CODE_KIN":         275,
		"ISO_LANGUAGE_CODE_SA":          276,
		"ISO_LANGUAGE_CODE_SAN":         277,
		"ISO_LANGUAGE_CODE_SC":          278,
		"ISO_LANGUAGE_CODE_SRD":         279,
		"ISO_LANGUAGE_CODE_SD":          280,
		"ISO_LANGUAGE_CODE_SND":         281,
		"ISO_LANGUAGE_CODE_SE":          282,
		"ISO_LANGUAGE_CODE_SME":         283,
		"ISO_LANGUAGE_CODE_SG":          284,
		"ISO_LANGUAGE_CODE_SAG":         285,
		"ISO_LANGUAGE_CODE_SI":          286,
		"ISO_LANGUAGE_CODE_SIN":         287,
		"ISO_LANGUAGE_CODE_SK":          288,
		"ISO_LANGUAGE_CODE_SLK":         289,
		"ISO_LANGUAGE_CODE_SL":          290,
		"ISO_LANGUAGE_CODE_SLV":         291,
		"ISO_LANGUAGE_CODE_SM":          292,
		"ISO_LANGUAGE_CODE_SMO":         293,
		"ISO_LANGUAGE_CODE_SN":          294,
		"ISO_LANGUAGE_CODE_SNA":         295,
		"ISO_LANGUAGE_CODE_SO":          296,
		"ISO_LANGUAGE_CODE_SOM":         297,
		"ISO_LANGUAGE_CODE_SQ":          298,
		"ISO_LANGUAGE_CODE_SQI":         299,
		"ISO_LANGUAGE_CODE_SR":          300,
		"ISO_LANGUAGE_CODE_SRP":         301,
		"ISO_LANGUAGE_CODE_SS":          302,
		"ISO_LANGUAGE_CODE_SSW":         303,
		"ISO_LANGUAGE_CODE_ST":          304,
		"ISO_LANGUAGE_CODE_SOT":         305,
		"ISO_LANGUAGE_CODE_SU":          306,
		"ISO_LANGUAGE_CODE_SUN":         307,
		"ISO_LANGUAGE_CODE_SV":          308,
		"ISO_LANGUAGE_CODE_SWE":         309,
		"ISO_LANGUAGE_CODE_SW":          310,
		"ISO_LANGUAGE_CODE_SWA":         311,
		"ISO_LANGUAGE_CODE_TA":          312,
		"ISO_LANGUAGE_CODE_TAM":         313,
		"ISO_LANGUAGE_CODE_TE":          314,
		"ISO_LANGUAGE_CODE_TEL":         315,
		"ISO_LANGUAGE_CODE_TG":          316,
		"ISO_LANGUAGE_CODE_TGK":         317,
		"ISO_LANGUAGE_CODE_TH":          318,
		"ISO_LANGUAGE_CODE_THA":         319,
		"ISO_LANGUAGE_CODE_TI":          320,
		"ISO_LANGUAGE_CODE_TIR":         321,
		"ISO_LANGUAGE_CODE_TK":          322,
		"ISO_LANGUAGE_CODE_TUK":         323,
		"ISO_LANGUAGE_CODE_TL":          324,
		"ISO_LANGUAGE_CODE_TGL":         325,
		"ISO_LANGUAGE_CODE_TN":          326,
		"ISO_LANGUAGE_CODE_TSN":         327,
		"ISO_LANGUAGE_CODE_TO":          328,
		"ISO_LANGUAGE_CODE_TON":         329,
		"ISO_LANGUAGE_CODE_TR":          330,
		"ISO_LANGUAGE_CODE_TUR":         331,
		"ISO_LANGUAGE_CODE_TS":          332,
		"ISO_LANGUAGE_CODE_TSO":         333,
		"ISO_LANGUAGE_CODE_TT":          334,
		"ISO_LANGUAGE_CODE_TAT":         335,
		"ISO_LANGUAGE_CODE_TW":          336,
		"ISO_LANGUAGE_CODE_TWI":         337,
		"ISO_LANGUAGE_CODE_TY":          338,
		"ISO_LANGUAGE_CODE_TAH":         339,
		"ISO_LANGUAGE_CODE_UG":          340,
		"ISO_LANGUAGE_CODE_UIG":         341,
		"ISO_LANGUAGE_CODE_UK":          342,
		"ISO_LANGUAGE_CODE_UKR":         343,
		"ISO_LANGUAGE_CODE_UR":          344,
		"ISO_LANGUAGE_CODE_URD":         345,
		"ISO_LANGUAGE_CODE_UZ":          346,
		"ISO_LANGUAGE_CODE_UZB":         347,
		"ISO_LANGUAGE_CODE_VE":          348,
		"ISO_LANGUAGE_CODE_VEN":         349,
		"ISO_LANGUAGE_CODE_VI":          350,
		"ISO_LANGUAGE_CODE_VIE":         351,
		"ISO_LANGUAGE_CODE_VO":          352,
		"ISO_LANGUAGE_CODE_VOL":         353,
		"ISO_LANGUAGE_CODE_WA":          354,
		"ISO_LANGUAGE_CODE_WLN":         355,
		"ISO_LANGUAGE_CODE_WO":          356,
		"ISO_LANGUAGE_CODE_WOL":         357,
		"ISO_LANGUAGE_CODE_XH":          358,
		"ISO_LANGUAGE_CODE_XHO":         359,
		"ISO_LANGUAGE_CODE_YI":          360,
		"ISO_LANGUAGE_CODE_YID":         361,
		"ISO_LANGUAGE_CODE_YO":          362,
		"ISO_LANGUAGE_CODE_YOR":         363,
		"ISO_LANGUAGE_CODE_ZA":          364,
		"ISO_LANGUAGE_CODE_ZHA":         365,
		"ISO_LANGUAGE_CODE_ZH":          366,
		"ISO_LANGUAGE_CODE_ZHO":         367,
		"ISO_LANGUAGE_CODE_ZU":          368,
		"ISO_LANGUAGE_CODE_ZUL":         369,
		"ISO_LANGUAGE_CODE_ACE":         370,
		"ISO_LANGUAGE_CODE_ACH":         371,
		"ISO_LANGUAGE_CODE_ADA":         372,
		"ISO_LANGUAGE_CODE_ADY":         373,
		"ISO_LANGUAGE_CODE_AFA":         374,
		"ISO_LANGUAGE_CODE_AFH":         375,
		"ISO_LANGUAGE_CODE_AIN":         376,
		"ISO_LANGUAGE_CODE_AKK":         377,
		"ISO_LANGUAGE_CODE_ALE":         378,
		"ISO_LANGUAGE_CODE_ALG":         379,
		"ISO_LANGUAGE_CODE_ALT":         380,
		"ISO_LANGUAGE_CODE_ANG":         381,
		"ISO_LANGUAGE_CODE_ANP":         382,
		"ISO_LANGUAGE_CODE_APA":         383,
		"ISO_LANGUAGE_CODE_ARC":         384,
		"ISO_LANGUAGE_CODE_ARN":         385,
		"ISO_LANGUAGE_CODE_ARP":         386,
		"ISO_LANGUAGE_CODE_ART":         387,
		"ISO_LANGUAGE_CODE_ARW":         388,
		"ISO_LANGUAGE_CODE_AST":         389,
		"ISO_LANGUAGE_CODE_ATH":         390,
		"ISO_LANGUAGE_CODE_AUS":         391,
		"ISO_LANGUAGE_CODE_AWA":         392,
		"ISO_LANGUAGE_CODE_BAD":         393,
		"ISO_LANGUAGE_CODE_BAI":         394,
		"ISO_LANGUAGE_CODE_BAL":         395,
		"ISO_LANGUAGE_CODE_BAN":         396,
		"ISO_LANGUAGE_CODE_BAS":         397,
		"ISO_LANGUAGE_CODE_BAT":         398,
		"ISO_LANGUAGE_CODE_BEJ":         399,
		"ISO_LANGUAGE_CODE_BEM":         400,
		"ISO_LANGUAGE_CODE_BER":         401,
		"ISO_LANGUAGE_CODE_BGC":         402,
		"ISO_LANGUAGE_CODE_BHO":         403,
		"ISO_LANGUAGE_CODE_BIK":         404,
		"ISO_LANGUAGE_CODE_BIN":         405,
		"ISO_LANGUAGE_CODE_BLA":         406,
		"ISO_LANGUAGE_CODE_BNT":         407,
		"ISO_LANGUAGE_CODE_BRA":         408,
		"ISO_LANGUAGE_CODE_BTK":         409,
		"ISO_LANGUAGE_CODE_BUA":         410,
		"ISO_LANGUAGE_CODE_BUG":         411,
		"ISO_LANGUAGE_CODE_BYN":         412,
		"ISO_LANGUAGE_CODE_CAD":         413,
		"ISO_LANGUAGE_CODE_CAI":         414,
		"ISO_LANGUAGE_CODE_CAR":         415,
		"ISO_LANGUAGE_CODE_CAU":         416,
		"ISO_LANGUAGE_CODE_CEB":         417,
		"ISO_LANGUAGE_CODE_CEL":         418,
		"ISO_LANGUAGE_CODE_CHB":         419,
		"ISO_LANGUAGE_CODE_CHG":         420,
		"ISO_LANGUAGE_CODE_CHK":         421,
		"ISO_LANGUAGE_CODE_CHM":         422,
		"ISO_LANGUAGE_CODE_CHN":         423,
		"ISO_LANGUAGE_CODE_CHO":         424,
		"ISO_LANGUAGE_CODE_CHP":         425,
		"ISO_LANGUAGE_CODE_CHR":         426,
		"ISO_LANGUAGE_CODE_CHY":         427,
		"ISO_LANGUAGE_CODE_CMC":         428,
		"ISO_LANGUAGE_CODE_CNR":         429,
		"ISO_LANGUAGE_CODE_COP":         430,
		"ISO_LANGUAGE_CODE_CPE":         431,
		"ISO_LANGUAGE_CODE_CPF":         432,
		"ISO_LANGUAGE_CODE_CPP":         433,
		"ISO_LANGUAGE_CODE_CRH":         434,
		"ISO_LANGUAGE_CODE_CRP":         435,
		"ISO_LANGUAGE_CODE_CSB":         436,
		"ISO_LANGUAGE_CODE_CUS":         437,
		"ISO_LANGUAGE_CODE_DAK":         438,
		"ISO_LANGUAGE_CODE_DAR":         439,
		"ISO_LANGUAGE_CODE_DAY":         440,
		"ISO_LANGUAGE_CODE_DEL":         441,
		"ISO_LANGUAGE_CODE_DEN":         442,
		"ISO_LANGUAGE_CODE_DGR":         443,
		"ISO_LANGUAGE_CODE_DIN":         444,
		"ISO_LANGUAGE_CODE_DOI":         445,
		"ISO_LANGUAGE_CODE_DRA":         446,
		"ISO_LANGUAGE_CODE_DSB":         447,
		"ISO_LANGUAGE_CODE_DUA":         448,
		"ISO_LANGUAGE_CODE_DUM":         449,
		"ISO_LANGUAGE_CODE_DYU":         450,
		"ISO_LANGUAGE_CODE_EFI":         451,
		"ISO_LANGUAGE_CODE_EGY":         452,
		"ISO_LANGUAGE_CODE_EKA":         453,
		"ISO_LANGUAGE_CODE_ELX":         454,
		"ISO_LANGUAGE_CODE_ENM":         455,
		"ISO_LANGUAGE_CODE_EWO":         456,
		"ISO_LANGUAGE_CODE_FAN":         457,
		"ISO_LANGUAGE_CODE_FAT":         458,
		"ISO_LANGUAGE_CODE_FIL":         459,
		"ISO_LANGUAGE_CODE_FIU":         460,
		"ISO_LANGUAGE_CODE_FON":         461,
		"ISO_LANGUAGE_CODE_FRM":         462,
		"ISO_LANGUAGE_CODE_FRO":         463,
		"ISO_LANGUAGE_CODE_FRR":         464,
		"ISO_LANGUAGE_CODE_FRS":         465,
		"ISO_LANGUAGE_CODE_FUR":         466,
		"ISO_LANGUAGE_CODE_GAA":         467,
		"ISO_LANGUAGE_CODE_GAY":         468,
		"ISO_LANGUAGE_CODE_GBA":         469,
		"ISO_LANGUAGE_CODE_GEM":         470,
		"ISO_LANGUAGE_CODE_GEZ":         471,
		"ISO_LANGUAGE_CODE_GIL":         472,
		"ISO_LANGUAGE_CODE_GMH":         473,
		"ISO_LANGUAGE_CODE_GOH":         474,
		"ISO_LANGUAGE_CODE_GON":         475,
		"ISO_LANGUAGE_CODE_GOR":         476,
		"ISO_LANGUAGE_CODE_GOT":         477,
		"ISO_LANGUAGE_CODE_GRB":         478,
		"ISO_LANGUAGE_CODE_GRC":         479,
		"ISO_LANGUAGE_CODE_GSW":         480,
		"ISO_LANGUAGE_CODE_GWI":         481,
		"ISO_LANGUAGE_CODE_HAI":         482,
		"ISO_LANGUAGE_CODE_HAW":         483,
		"ISO_LANGUAGE_CODE_HIL":         484,
		"ISO_LANGUAGE_CODE_HIM":         485,
		"ISO_LANGUAGE_CODE_HIT":         486,
		"ISO_LANGUAGE_CODE_HMN":         487,
		"ISO_LANGUAGE_CODE_HSB":         488,
		"ISO_LANGUAGE_CODE_HUP":         489,
		"ISO_LANGUAGE_CODE_IBA":         490,
		"ISO_LANGUAGE_CODE_IJO":         491,
		"ISO_LANGUAGE_CODE_ILO":         492,
		"ISO_LANGUAGE_CODE_INC":         493,
		"ISO_LANGUAGE_CODE_INE":         494,
		"ISO_LANGUAGE_CODE_INH":         495,
		"ISO_LANGUAGE_CODE_IRA":         496,
		"ISO_LANGUAGE_CODE_IRO":         497,
		"ISO_LANGUAGE_CODE_JBO":         498,
		"ISO_LANGUAGE_CODE_JPR":         499,
		"ISO_LANGUAGE_CODE_JRB":         500,
		"ISO_LANGUAGE_CODE_KAA":         501,
		"ISO_LANGUAGE_CODE_KAB":         502,
		"ISO_LANGUAGE_CODE_KAC":         503,
		"ISO_LANGUAGE_CODE_KAM":         504,
		"ISO_LANGUAGE_CODE_KAR":         505,
		"ISO_LANGUAGE_CODE_KAW":         506,
		"ISO_LANGUAGE_CODE_KBD":         507,
		"ISO_LANGUAGE_CODE_KHA":         508,
		"ISO_LANGUAGE_CODE_KHI":         509,
		"ISO_LANGUAGE_CODE_KHO":         510,
		"ISO_LANGUAGE_CODE_KMB":         511,
		"ISO_LANGUAGE_CODE_KOK":         512,
		"ISO_LANGUAGE_CODE_KOS":         513,
		"ISO_LANGUAGE_CODE_KPE":         514,
		"ISO_LANGUAGE_CODE_KRC":         515,
		"ISO_LANGUAGE_CODE_KRL":         516,
		"ISO_LANGUAGE_CODE_KRO":         517,
		"ISO_LANGUAGE_CODE_KRU":         518,
		"ISO_LANGUAGE_CODE_KUM":         519,
		"ISO_LANGUAGE_CODE_KUT":         520,
		"ISO_LANGUAGE_CODE_LAD":         521,
		"ISO_LANGUAGE_CODE_LAH":         522,
		"ISO_LANGUAGE_CODE_LAM":         523,
		"ISO_LANGUAGE_CODE_LEZ":         524,
		"ISO_LANGUAGE_CODE_LOL":         525,
		"ISO_LANGUAGE_CODE_LOZ":         526,
		"ISO_LANGUAGE_CODE_LUA":         527,
		"ISO_LANGUAGE_CODE_LUI":         528,
		"ISO_LANGUAGE_CODE_LUN":         529,
		"ISO_LANGUAGE_CODE_LUO":         530,
		"ISO_LANGUAGE_CODE_LUS":         531,
		"ISO_LANGUAGE_CODE_MAD":         532,
		"ISO_LANGUAGE_CODE_MAG":         533,
		"ISO_LANGUAGE_CODE_MAI":         534,
		"ISO_LANGUAGE_CODE_MAK":         535,
		"ISO_LANGUAGE_CODE_MAN":         536,
		"ISO_LANGUAGE_CODE_MAP":         537,
		"ISO_LANGUAGE_CODE_MAS":         538,
		"ISO_LANGUAGE_CODE_MDF":         539,
		"ISO_LANGUAGE_CODE_MDR":         540,
		"ISO_LANGUAGE_CODE_MEN":         541,
		"ISO_LANGUAGE_CODE_MGA":         542,
		"ISO_LANGUAGE_CODE_MIC":         543,
		"ISO_LANGUAGE_CODE_MIN":         544,
		"ISO_LANGUAGE_CODE_MIS":         545,
		"ISO_LANGUAGE_CODE_MKH":         546,
		"ISO_LANGUAGE_CODE_MNC":         547,
		"ISO_LANGUAGE_CODE_MNI":         548,
		"ISO_LANGUAGE_CODE_MNO":         549,
		"ISO_LANGUAGE_CODE_MOH":         550,
		"ISO_LANGUAGE_CODE_MOS":         551,
		"ISO_LANGUAGE_CODE_MUL":         552,
		"ISO_LANGUAGE_CODE_MUN":         553,
		"ISO_LANGUAGE_CODE_MUS":         554,
		"ISO_LANGUAGE_CODE_MWL":         555,
		"ISO_LANGUAGE_CODE_MWR":         556,
		"ISO_LANGUAGE_CODE_MYN":         557,
		"ISO_LANGUAGE_CODE_MYV":         558,
		"ISO_LANGUAGE_CODE_NAH":         559,
		"ISO_LANGUAGE_CODE_NAI":         560,
		"ISO_LANGUAGE_CODE_NAP":         561,
		"ISO_LANGUAGE_CODE_NDS":         562,
		"ISO_LANGUAGE_CODE_NEW":         563,
		"ISO_LANGUAGE_CODE_NIA":         564,
		"ISO_LANGUAGE_CODE_NIC":         565,
		"ISO_LANGUAGE_CODE_NIU":         566,
		"ISO_LANGUAGE_CODE_NOG":         567,
		"ISO_LANGUAGE_CODE_NON":         568,
		"ISO_LANGUAGE_CODE_NQO":         569,
		"ISO_LANGUAGE_CODE_NSO":         570,
		"ISO_LANGUAGE_CODE_NUB":         571,
		"ISO_LANGUAGE_CODE_NWC":         572,
		"ISO_LANGUAGE_CODE_NYM":         573,
		"ISO_LANGUAGE_CODE_NYN":         574,
		"ISO_LANGUAGE_CODE_NYO":         575,
		"ISO_LANGUAGE_CODE_NZI":         576,
		"ISO_LANGUAGE_CODE_OSA":         577,
		"ISO_LANGUAGE_CODE_OTA":         578,
		"ISO_LANGUAGE_CODE_OTO":         579,
		"ISO_LANGUAGE_CODE_PAA":         580,
		"ISO_LANGUAGE_CODE_PAG":         581,
		"ISO_LANGUAGE_CODE_PAL":         582,
		"ISO_LANGUAGE_CODE_PAM":         583,
		"ISO_LANGUAGE_CODE_PAP":         584,
		"ISO_LANGUAGE_CODE_PAU":         585,
		"ISO_LANGUAGE_CODE_PEO":         586,
		"ISO_LANGUAGE_CODE_PHI":         587,
		"ISO_LANGUAGE_CODE_PHN":         588,
		"ISO_LANGUAGE_CODE_PON":         589,
		"ISO_LANGUAGE_CODE_PRA":         590,
		"ISO_LANGUAGE_CODE_PRO":         591,
		"ISO_LANGUAGE_CODE_QQA":         592,
		"ISO_LANGUAGE_CODE_QQB":         593,
		"ISO_LANGUAGE_CODE_QQC":         594,
		"ISO_LANGUAGE_CODE_QQD":         595,
		"ISO_LANGUAGE_CODE_QQE":         596,
		"ISO_LANGUAGE_CODE_QQF":         597,
		"ISO_LANGUAGE_CODE_QQG":         598,
		"ISO_LANGUAGE_CODE_QQH":         599,
		"ISO_LANGUAGE_CODE_QQI":         600,
		"ISO_LANGUAGE_CODE_QQJ":         601,
		"ISO_LANGUAGE_CODE_RAJ":         602,
		"ISO_LANGUAGE_CODE_RAP":         603,
		"ISO_LANGUAGE_CODE_RAR":         604,
		"ISO_LANGUAGE_CODE_ROA":         605,
		"ISO_LANGUAGE_CODE_ROM":         606,
		"ISO_LANGUAGE_CODE_RUP":         607,
		"ISO_LANGUAGE_CODE_SAD":         608,
		"ISO_LANGUAGE_CODE_SAH":         609,
		"ISO_LANGUAGE_CODE_SAI":         610,
		"ISO_LANGUAGE_CODE_SAL":         611,
		"ISO_LANGUAGE_CODE_SAM":         612,
		"ISO_LANGUAGE_CODE_SAS":         613,
		"ISO_LANGUAGE_CODE_SAT":         614,
		"ISO_LANGUAGE_CODE_SCN":         615,
		"ISO_LANGUAGE_CODE_SCO":         616,
		"ISO_LANGUAGE_CODE_SEL":         617,
		"ISO_LANGUAGE_CODE_SEM":         618,
		"ISO_LANGUAGE_CODE_SGA":         619,
		"ISO_LANGUAGE_CODE_SGN":         620,
		"ISO_LANGUAGE_CODE_SHN":         621,
		"ISO_LANGUAGE_CODE_SID":         622,
		"ISO_LANGUAGE_CODE_SIO":         623,
		"ISO_LANGUAGE_CODE_SIT":         624,
		"ISO_LANGUAGE_CODE_SLA":         625,
		"ISO_LANGUAGE_CODE_SMA":         626,
		"ISO_LANGUAGE_CODE_SMI":         627,
		"ISO_LANGUAGE_CODE_SMJ":         628,
		"ISO_LANGUAGE_CODE_SMN":         629,
		"ISO_LANGUAGE_CODE_SMS":         630,
		"ISO_LANGUAGE_CODE_SNK":         631,
		"ISO_LANGUAGE_CODE_SOG":         632,
		"ISO_LANGUAGE_CODE_SON":         633,
		"ISO_LANGUAGE_CODE_SRN":         634,
		"ISO_LANGUAGE_CODE_SRR":         635,
		"ISO_LANGUAGE_CODE_SSA":         636,
		"ISO_LANGUAGE_CODE_SUK":         637,
		"ISO_LANGUAGE_CODE_SUS":         638,
		"ISO_LANGUAGE_CODE_SUX":         639,
		"ISO_LANGUAGE_CODE_SYC":         640,
		"ISO_LANGUAGE_CODE_SYR":         641,
		"ISO_LANGUAGE_CODE_TAI":         642,
		"ISO_LANGUAGE_CODE_TEM":         643,
		"ISO_LANGUAGE_CODE_TER":         644,
		"ISO_LANGUAGE_CODE_TET":         645,
		"ISO_LANGUAGE_CODE_TIG":         646,
		"ISO_LANGUAGE_CODE_TIV":         647,
		"ISO_LANGUAGE_CODE_TKL":         648,
		"ISO_LANGUAGE_CODE_TLH":         649,
		"ISO_LANGUAGE_CODE_TLI":         650,
		"ISO_LANGUAGE_CODE_TMH":         651,
		"ISO_LANGUAGE_CODE_TOG":         652,
		"ISO_LANGUAGE_CODE_TPI":         653,
		"ISO_LANGUAGE_CODE_TSI":         654,
		"ISO_LANGUAGE_CODE_TUM":         655,
		"ISO_LANGUAGE_CODE_TUP":         656,
		"ISO_LANGUAGE_CODE_TUT":         657,
		"ISO_LANGUAGE_CODE_TVL":         658,
		"ISO_LANGUAGE_CODE_TYV":         659,
		"ISO_LANGUAGE_CODE_UDM":         660,
		"ISO_LANGUAGE_CODE_UGA":         661,
		"ISO_LANGUAGE_CODE_UMB":         662,
		"ISO_LANGUAGE_CODE_UND":         663,
		"ISO_LANGUAGE_CODE_VAI":         664,
		"ISO_LANGUAGE_CODE_VOT":         665,
		"ISO_LANGUAGE_CODE_WAK":         666,
		"ISO_LANGUAGE_CODE_WAL":         667,
		"ISO_LANGUAGE_CODE_WAR":         668,
		"ISO_LANGUAGE_CODE_WAS":         669,
		"ISO_LANGUAGE_CODE_WEN":         670,
		"ISO_LANGUAGE_CODE_XAL":         671,
		"ISO_LANGUAGE_CODE_YAO":         672,
		"ISO_LANGUAGE_CODE_YAP":         673,
		"ISO_LANGUAGE_CODE_YPK":         674,
		"ISO_LANGUAGE_CODE_ZAP":         675,
		"ISO_LANGUAGE_CODE_ZBL":         676,
		"ISO_LANGUAGE_CODE_ZEN":         677,
		"ISO_LANGUAGE_CODE_ZGH":         678,
		"ISO_LANGUAGE_CODE_ZND":         679,
		"ISO_LANGUAGE_CODE_ZUN":         680,
		"ISO_LANGUAGE_CODE_ZXX":         681,
		"ISO_LANGUAGE_CODE_ZZA":         682,
		"ISO_LANGUAGE_CODE_AAA":         683,
	}
)

func (x IsoLanguageCode) Enum() *IsoLanguageCode {
	p := new(IsoLanguageCode)
	*p = x
	return p
}

func (x IsoLanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoLanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[79].Descriptor()
}

func (IsoLanguageCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[79]
}

func (x IsoLanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoLanguageCode.Descriptor instead.
func (IsoLanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{79}
}

type IsoTerritoryCode int32

const (
	IsoTerritoryCode_ISO_TERRITORY_CODE_UNSPECIFIED IsoTerritoryCode = 0
	IsoTerritoryCode_ISO_TERRITORY_CODE_AD          IsoTerritoryCode = 1
	IsoTerritoryCode_ISO_TERRITORY_CODE_AE          IsoTerritoryCode = 2
	IsoTerritoryCode_ISO_TERRITORY_CODE_AF          IsoTerritoryCode = 3
	IsoTerritoryCode_ISO_TERRITORY_CODE_AG          IsoTerritoryCode = 4
	IsoTerritoryCode_ISO_TERRITORY_CODE_AI          IsoTerritoryCode = 5
	IsoTerritoryCode_ISO_TERRITORY_CODE_AL          IsoTerritoryCode = 6
	IsoTerritoryCode_ISO_TERRITORY_CODE_AM          IsoTerritoryCode = 7
	IsoTerritoryCode_ISO_TERRITORY_CODE_AN          IsoTerritoryCode = 8
	IsoTerritoryCode_ISO_TERRITORY_CODE_AO          IsoTerritoryCode = 9
	IsoTerritoryCode_ISO_TERRITORY_CODE_AQ          IsoTerritoryCode = 10
	IsoTerritoryCode_ISO_TERRITORY_CODE_AR          IsoTerritoryCode = 11
	IsoTerritoryCode_ISO_TERRITORY_CODE_AS          IsoTerritoryCode = 12
	IsoTerritoryCode_ISO_TERRITORY_CODE_AT          IsoTerritoryCode = 13
	IsoTerritoryCode_ISO_TERRITORY_CODE_AU          IsoTerritoryCode = 14
	IsoTerritoryCode_ISO_TERRITORY_CODE_AW          IsoTerritoryCode = 15
	IsoTerritoryCode_ISO_TERRITORY_CODE_AX          IsoTerritoryCode = 16
	IsoTerritoryCode_ISO_TERRITORY_CODE_AZ          IsoTerritoryCode = 17
	IsoTerritoryCode_ISO_TERRITORY_CODE_BA          IsoTerritoryCode = 18
	IsoTerritoryCode_ISO_TERRITORY_CODE_BB          IsoTerritoryCode = 19
	IsoTerritoryCode_ISO_TERRITORY_CODE_BD          IsoTerritoryCode = 20
	IsoTerritoryCode_ISO_TERRITORY_CODE_BE          IsoTerritoryCode = 21
	IsoTerritoryCode_ISO_TERRITORY_CODE_BF          IsoTerritoryCode = 22
	IsoTerritoryCode_ISO_TERRITORY_CODE_BG          IsoTerritoryCode = 23
	IsoTerritoryCode_ISO_TERRITORY_CODE_BH          IsoTerritoryCode = 24
	IsoTerritoryCode_ISO_TERRITORY_CODE_BI          IsoTerritoryCode = 25
	IsoTerritoryCode_ISO_TERRITORY_CODE_BJ          IsoTerritoryCode = 26
	IsoTerritoryCode_ISO_TERRITORY_CODE_BL          IsoTerritoryCode = 27
	IsoTerritoryCode_ISO_TERRITORY_CODE_BM          IsoTerritoryCode = 28
	IsoTerritoryCode_ISO_TERRITORY_CODE_BN          IsoTerritoryCode = 29
	IsoTerritoryCode_ISO_TERRITORY_CODE_BO          IsoTerritoryCode = 30
	IsoTerritoryCode_ISO_TERRITORY_CODE_BQ          IsoTerritoryCode = 31
	IsoTerritoryCode_ISO_TERRITORY_CODE_BR          IsoTerritoryCode = 32
	IsoTerritoryCode_ISO_TERRITORY_CODE_BS          IsoTerritoryCode = 33
	IsoTerritoryCode_ISO_TERRITORY_CODE_BT          IsoTerritoryCode = 34
	IsoTerritoryCode_ISO_TERRITORY_CODE_BV          IsoTerritoryCode = 35
	IsoTerritoryCode_ISO_TERRITORY_CODE_BW          IsoTerritoryCode = 36
	IsoTerritoryCode_ISO_TERRITORY_CODE_BY          IsoTerritoryCode = 37
	IsoTerritoryCode_ISO_TERRITORY_CODE_BZ          IsoTerritoryCode = 38
	IsoTerritoryCode_ISO_TERRITORY_CODE_CA          IsoTerritoryCode = 39
	IsoTerritoryCode_ISO_TERRITORY_CODE_CC          IsoTerritoryCode = 40
	IsoTerritoryCode_ISO_TERRITORY_CODE_CD          IsoTerritoryCode = 41
	IsoTerritoryCode_ISO_TERRITORY_CODE_CF          IsoTerritoryCode = 42
	IsoTerritoryCode_ISO_TERRITORY_CODE_CG          IsoTerritoryCode = 43
	IsoTerritoryCode_ISO_TERRITORY_CODE_CH          IsoTerritoryCode = 44
	IsoTerritoryCode_ISO_TERRITORY_CODE_CI          IsoTerritoryCode = 45
	IsoTerritoryCode_ISO_TERRITORY_CODE_CK          IsoTerritoryCode = 46
	IsoTerritoryCode_ISO_TERRITORY_CODE_CL          IsoTerritoryCode = 47
	IsoTerritoryCode_ISO_TERRITORY_CODE_CM          IsoTerritoryCode = 48
	IsoTerritoryCode_ISO_TERRITORY_CODE_CN          IsoTerritoryCode = 49
	IsoTerritoryCode_ISO_TERRITORY_CODE_CO          IsoTerritoryCode = 50
	IsoTerritoryCode_ISO_TERRITORY_CODE_CR          IsoTerritoryCode = 51
	IsoTerritoryCode_ISO_TERRITORY_CODE_CS          IsoTerritoryCode = 52
	IsoTerritoryCode_ISO_TERRITORY_CODE_CU          IsoTerritoryCode = 53
	IsoTerritoryCode_ISO_TERRITORY_CODE_CV          IsoTerritoryCode = 54
	IsoTerritoryCode_ISO_TERRITORY_CODE_CW          IsoTerritoryCode = 55
	IsoTerritoryCode_ISO_TERRITORY_CODE_CX          IsoTerritoryCode = 56
	IsoTerritoryCode_ISO_TERRITORY_CODE_CY          IsoTerritoryCode = 57
	IsoTerritoryCode_ISO_TERRITORY_CODE_CZ          IsoTerritoryCode = 58
	IsoTerritoryCode_ISO_TERRITORY_CODE_DE          IsoTerritoryCode = 59
	IsoTerritoryCode_ISO_TERRITORY_CODE_DJ          IsoTerritoryCode = 60
	IsoTerritoryCode_ISO_TERRITORY_CODE_DK          IsoTerritoryCode = 61
	IsoTerritoryCode_ISO_TERRITORY_CODE_DM          IsoTerritoryCode = 62
	IsoTerritoryCode_ISO_TERRITORY_CODE_DO          IsoTerritoryCode = 63
	IsoTerritoryCode_ISO_TERRITORY_CODE_DZ          IsoTerritoryCode = 64
	IsoTerritoryCode_ISO_TERRITORY_CODE_EC          IsoTerritoryCode = 65
	IsoTerritoryCode_ISO_TERRITORY_CODE_EE          IsoTerritoryCode = 66
	IsoTerritoryCode_ISO_TERRITORY_CODE_EG          IsoTerritoryCode = 67
	IsoTerritoryCode_ISO_TERRITORY_CODE_EH          IsoTerritoryCode = 68
	IsoTerritoryCode_ISO_TERRITORY_CODE_ER          IsoTerritoryCode = 69
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES          IsoTerritoryCode = 70
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES_CE       IsoTerritoryCode = 71
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES_CN       IsoTerritoryCode = 72
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES_ML       IsoTerritoryCode = 73
	IsoTerritoryCode_ISO_TERRITORY_CODE_ET          IsoTerritoryCode = 74
	IsoTerritoryCode_ISO_TERRITORY_CODE_FI          IsoTerritoryCode = 75
	IsoTerritoryCode_ISO_TERRITORY_CODE_FJ          IsoTerritoryCode = 76
	IsoTerritoryCode_ISO_TERRITORY_CODE_FK          IsoTerritoryCode = 77
	IsoTerritoryCode_ISO_TERRITORY_CODE_FM          IsoTerritoryCode = 78
	IsoTerritoryCode_ISO_TERRITORY_CODE_FO          IsoTerritoryCode = 79
	IsoTerritoryCode_ISO_TERRITORY_CODE_FR          IsoTerritoryCode = 80
	IsoTerritoryCode_ISO_TERRITORY_CODE_GA          IsoTerritoryCode = 81
	IsoTerritoryCode_ISO_TERRITORY_CODE_GB          IsoTerritoryCode = 82
	IsoTerritoryCode_ISO_TERRITORY_CODE_GD          IsoTerritoryCode = 83
	IsoTerritoryCode_ISO_TERRITORY_CODE_GE          IsoTerritoryCode = 84
	IsoTerritoryCode_ISO_TERRITORY_CODE_GF          IsoTerritoryCode = 85
	IsoTerritoryCode_ISO_TERRITORY_CODE_GG          IsoTerritoryCode = 86
	IsoTerritoryCode_ISO_TERRITORY_CODE_GH          IsoTerritoryCode = 87
	IsoTerritoryCode_ISO_TERRITORY_CODE_GI          IsoTerritoryCode = 88
	IsoTerritoryCode_ISO_TERRITORY_CODE_GL          IsoTerritoryCode = 89
	IsoTerritoryCode_ISO_TERRITORY_CODE_GM          IsoTerritoryCode = 90
	IsoTerritoryCode_ISO_TERRITORY_CODE_GN          IsoTerritoryCode = 91
	IsoTerritoryCode_ISO_TERRITORY_CODE_GP          IsoTerritoryCode = 92
	IsoTerritoryCode_ISO_TERRITORY_CODE_GQ          IsoTerritoryCode = 93
	IsoTerritoryCode_ISO_TERRITORY_CODE_GR          IsoTerritoryCode = 94
	IsoTerritoryCode_ISO_TERRITORY_CODE_GS          IsoTerritoryCode = 95
	IsoTerritoryCode_ISO_TERRITORY_CODE_GT          IsoTerritoryCode = 96
	IsoTerritoryCode_ISO_TERRITORY_CODE_GU          IsoTerritoryCode = 97
	IsoTerritoryCode_ISO_TERRITORY_CODE_GW          IsoTerritoryCode = 98
	IsoTerritoryCode_ISO_TERRITORY_CODE_GY          IsoTerritoryCode = 99
	IsoTerritoryCode_ISO_TERRITORY_CODE_HK          IsoTerritoryCode = 100
	IsoTerritoryCode_ISO_TERRITORY_CODE_HM          IsoTerritoryCode = 101
	IsoTerritoryCode_ISO_TERRITORY_CODE_HN          IsoTerritoryCode = 102
	IsoTerritoryCode_ISO_TERRITORY_CODE_HR          IsoTerritoryCode = 103
	IsoTerritoryCode_ISO_TERRITORY_CODE_HT          IsoTerritoryCode = 104
	IsoTerritoryCode_ISO_TERRITORY_CODE_HU          IsoTerritoryCode = 105
	IsoTerritoryCode_ISO_TERRITORY_CODE_ID          IsoTerritoryCode = 106
	IsoTerritoryCode_ISO_TERRITORY_CODE_IE          IsoTerritoryCode = 107
	IsoTerritoryCode_ISO_TERRITORY_CODE_IL          IsoTerritoryCode = 108
	IsoTerritoryCode_ISO_TERRITORY_CODE_IM          IsoTerritoryCode = 109
	IsoTerritoryCode_ISO_TERRITORY_CODE_IN          IsoTerritoryCode = 110
	IsoTerritoryCode_ISO_TERRITORY_CODE_IO          IsoTerritoryCode = 111
	IsoTerritoryCode_ISO_TERRITORY_CODE_IQ          IsoTerritoryCode = 112
	IsoTerritoryCode_ISO_TERRITORY_CODE_IR          IsoTerritoryCode = 113
	IsoTerritoryCode_ISO_TERRITORY_CODE_IS          IsoTerritoryCode = 114
	IsoTerritoryCode_ISO_TERRITORY_CODE_IT          IsoTerritoryCode = 115
	IsoTerritoryCode_ISO_TERRITORY_CODE_JE          IsoTerritoryCode = 116
	IsoTerritoryCode_ISO_TERRITORY_CODE_JM          IsoTerritoryCode = 117
	IsoTerritoryCode_ISO_TERRITORY_CODE_JO          IsoTerritoryCode = 118
	IsoTerritoryCode_ISO_TERRITORY_CODE_JP          IsoTerritoryCode = 119
	IsoTerritoryCode_ISO_TERRITORY_CODE_KE          IsoTerritoryCode = 120
	IsoTerritoryCode_ISO_TERRITORY_CODE_KG          IsoTerritoryCode = 121
	IsoTerritoryCode_ISO_TERRITORY_CODE_KH          IsoTerritoryCode = 122
	IsoTerritoryCode_ISO_TERRITORY_CODE_KI          IsoTerritoryCode = 123
	IsoTerritoryCode_ISO_TERRITORY_CODE_KM          IsoTerritoryCode = 124
	IsoTerritoryCode_ISO_TERRITORY_CODE_KN          IsoTerritoryCode = 125
	IsoTerritoryCode_ISO_TERRITORY_CODE_KP          IsoTerritoryCode = 126
	IsoTerritoryCode_ISO_TERRITORY_CODE_KR          IsoTerritoryCode = 127
	IsoTerritoryCode_ISO_TERRITORY_CODE_KW          IsoTerritoryCode = 128
	IsoTerritoryCode_ISO_TERRITORY_CODE_KY          IsoTerritoryCode = 129
	IsoTerritoryCode_ISO_TERRITORY_CODE_KZ          IsoTerritoryCode = 130
	IsoTerritoryCode_ISO_TERRITORY_CODE_LA          IsoTerritoryCode = 131
	IsoTerritoryCode_ISO_TERRITORY_CODE_LB          IsoTerritoryCode = 132
	IsoTerritoryCode_ISO_TERRITORY_CODE_LC          IsoTerritoryCode = 133
	IsoTerritoryCode_ISO_TERRITORY_CODE_LI          IsoTerritoryCode = 134
	IsoTerritoryCode_ISO_TERRITORY_CODE_LK          IsoTerritoryCode = 135
	IsoTerritoryCode_ISO_TERRITORY_CODE_LR          IsoTerritoryCode = 136
	IsoTerritoryCode_ISO_TERRITORY_CODE_LS          IsoTerritoryCode = 137
	IsoTerritoryCode_ISO_TERRITORY_CODE_LT          IsoTerritoryCode = 138
	IsoTerritoryCode_ISO_TERRITORY_CODE_LU          IsoTerritoryCode = 139
	IsoTerritoryCode_ISO_TERRITORY_CODE_LV          IsoTerritoryCode = 140
	IsoTerritoryCode_ISO_TERRITORY_CODE_LY          IsoTerritoryCode = 141
	IsoTerritoryCode_ISO_TERRITORY_CODE_MA          IsoTerritoryCode = 142
	IsoTerritoryCode_ISO_TERRITORY_CODE_MC          IsoTerritoryCode = 143
	IsoTerritoryCode_ISO_TERRITORY_CODE_MD          IsoTerritoryCode = 144
	IsoTerritoryCode_ISO_TERRITORY_CODE_ME          IsoTerritoryCode = 145
	IsoTerritoryCode_ISO_TERRITORY_CODE_MF          IsoTerritoryCode = 146
	IsoTerritoryCode_ISO_TERRITORY_CODE_MG          IsoTerritoryCode = 147
	IsoTerritoryCode_ISO_TERRITORY_CODE_MH          IsoTerritoryCode = 148
	IsoTerritoryCode_ISO_TERRITORY_CODE_MK          IsoTerritoryCode = 149
	IsoTerritoryCode_ISO_TERRITORY_CODE_ML          IsoTerritoryCode = 150
	IsoTerritoryCode_ISO_TERRITORY_CODE_MM          IsoTerritoryCode = 151
	IsoTerritoryCode_ISO_TERRITORY_CODE_MN          IsoTerritoryCode = 152
	IsoTerritoryCode_ISO_TERRITORY_CODE_MO          IsoTerritoryCode = 153
	IsoTerritoryCode_ISO_TERRITORY_CODE_MP          IsoTerritoryCode = 154
	IsoTerritoryCode_ISO_TERRITORY_CODE_MQ          IsoTerritoryCode = 155
	IsoTerritoryCode_ISO_TERRITORY_CODE_MR          IsoTerritoryCode = 156
	IsoTerritoryCode_ISO_TERRITORY_CODE_MS          IsoTerritoryCode = 157
	IsoTerritoryCode_ISO_TERRITORY_CODE_MT          IsoTerritoryCode = 158
	IsoTerritoryCode_ISO_TERRITORY_CODE_MU          IsoTerritoryCode = 159
	IsoTerritoryCode_ISO_TERRITORY_CODE_MV          IsoTerritoryCode = 160
	IsoTerritoryCode_ISO_TERRITORY_CODE_MW          IsoTerritoryCode = 161
	IsoTerritoryCode_ISO_TERRITORY_CODE_MX          IsoTerritoryCode = 162
	IsoTerritoryCode_ISO_TERRITORY_CODE_MY          IsoTerritoryCode = 163
	IsoTerritoryCode_ISO_TERRITORY_CODE_MZ          IsoTerritoryCode = 164
	IsoTerritoryCode_ISO_TERRITORY_CODE_NA          IsoTerritoryCode = 165
	IsoTerritoryCode_ISO_TERRITORY_CODE_NC          IsoTerritoryCode = 166
	IsoTerritoryCode_ISO_TERRITORY_CODE_NE          IsoTerritoryCode = 167
	IsoTerritoryCode_ISO_TERRITORY_CODE_NF          IsoTerritoryCode = 168
	IsoTerritoryCode_ISO_TERRITORY_CODE_NG          IsoTerritoryCode = 169
	IsoTerritoryCode_ISO_TERRITORY_CODE_NI          IsoTerritoryCode = 170
	IsoTerritoryCode_ISO_TERRITORY_CODE_NL          IsoTerritoryCode = 171
	IsoTerritoryCode_ISO_TERRITORY_CODE_NO          IsoTerritoryCode = 172
	IsoTerritoryCode_ISO_TERRITORY_CODE_NP          IsoTerritoryCode = 173
	IsoTerritoryCode_ISO_TERRITORY_CODE_NR          IsoTerritoryCode = 174
	IsoTerritoryCode_ISO_TERRITORY_CODE_NU          IsoTerritoryCode = 175
	IsoTerritoryCode_ISO_TERRITORY_CODE_NZ          IsoTerritoryCode = 176
	IsoTerritoryCode_ISO_TERRITORY_CODE_OM          IsoTerritoryCode = 177
	IsoTerritoryCode_ISO_TERRITORY_CODE_PA          IsoTerritoryCode = 178
	IsoTerritoryCode_ISO_TERRITORY_CODE_PE          IsoTerritoryCode = 179
	IsoTerritoryCode_ISO_TERRITORY_CODE_PF          IsoTerritoryCode = 180
	IsoTerritoryCode_ISO_TERRITORY_CODE_PG          IsoTerritoryCode = 181
	IsoTerritoryCode_ISO_TERRITORY_CODE_PH          IsoTerritoryCode = 182
	IsoTerritoryCode_ISO_TERRITORY_CODE_PK          IsoTerritoryCode = 183
	IsoTerritoryCode_ISO_TERRITORY_CODE_PL          IsoTerritoryCode = 184
	IsoTerritoryCode_ISO_TERRITORY_CODE_PM          IsoTerritoryCode = 185
	IsoTerritoryCode_ISO_TERRITORY_CODE_PN          IsoTerritoryCode = 186
	IsoTerritoryCode_ISO_TERRITORY_CODE_PR          IsoTerritoryCode = 187
	IsoTerritoryCode_ISO_TERRITORY_CODE_PS          IsoTerritoryCode = 188
	IsoTerritoryCode_ISO_TERRITORY_CODE_PT          IsoTerritoryCode = 189
	IsoTerritoryCode_ISO_TERRITORY_CODE_PW          IsoTerritoryCode = 190
	IsoTerritoryCode_ISO_TERRITORY_CODE_PY          IsoTerritoryCode = 191
	IsoTerritoryCode_ISO_TERRITORY_CODE_QA          IsoTerritoryCode = 192
	IsoTerritoryCode_ISO_TERRITORY_CODE_RE          IsoTerritoryCode = 193
	IsoTerritoryCode_ISO_TERRITORY_CODE_RO          IsoTerritoryCode = 194
	IsoTerritoryCode_ISO_TERRITORY_CODE_RS          IsoTerritoryCode = 195
	IsoTerritoryCode_ISO_TERRITORY_CODE_RU          IsoTerritoryCode = 196
	IsoTerritoryCode_ISO_TERRITORY_CODE_RW          IsoTerritoryCode = 197
	IsoTerritoryCode_ISO_TERRITORY_CODE_SA          IsoTerritoryCode = 198
	IsoTerritoryCode_ISO_TERRITORY_CODE_SB          IsoTerritoryCode = 199
	IsoTerritoryCode_ISO_TERRITORY_CODE_SC          IsoTerritoryCode = 200
	IsoTerritoryCode_ISO_TERRITORY_CODE_SD          IsoTerritoryCode = 201
	IsoTerritoryCode_ISO_TERRITORY_CODE_SE          IsoTerritoryCode = 202
	IsoTerritoryCode_ISO_TERRITORY_CODE_SG          IsoTerritoryCode = 203
	IsoTerritoryCode_ISO_TERRITORY_CODE_SH          IsoTerritoryCode = 204
	IsoTerritoryCode_ISO_TERRITORY_CODE_SI          IsoTerritoryCode = 205
	IsoTerritoryCode_ISO_TERRITORY_CODE_SJ          IsoTerritoryCode = 206
	IsoTerritoryCode_ISO_TERRITORY_CODE_SK          IsoTerritoryCode = 207
	IsoTerritoryCode_ISO_TERRITORY_CODE_SL          IsoTerritoryCode = 208
	IsoTerritoryCode_ISO_TERRITORY_CODE_SM          IsoTerritoryCode = 209
	IsoTerritoryCode_ISO_TERRITORY_CODE_SN          IsoTerritoryCode = 210
	IsoTerritoryCode_ISO_TERRITORY_CODE_SO          IsoTerritoryCode = 211
	IsoTerritoryCode_ISO_TERRITORY_CODE_SR          IsoTerritoryCode = 212
	IsoTerritoryCode_ISO_TERRITORY_CODE_SS          IsoTerritoryCode = 213
	IsoTerritoryCode_ISO_TERRITORY_CODE_ST          IsoTerritoryCode = 214
	IsoTerritoryCode_ISO_TERRITORY_CODE_SV          IsoTerritoryCode = 215
	IsoTerritoryCode_ISO_TERRITORY_CODE_SX          IsoTerritoryCode = 216
	IsoTerritoryCode_ISO_TERRITORY_CODE_SY          IsoTerritoryCode = 217
	IsoTerritoryCode_ISO_TERRITORY_CODE_SZ          IsoTerritoryCode = 218
	IsoTerritoryCode_ISO_TERRITORY_CODE_TC          IsoTerritoryCode = 219
	IsoTerritoryCode_ISO_TERRITORY_CODE_TD          IsoTerritoryCode = 220
	IsoTerritoryCode_ISO_TERRITORY_CODE_TF          IsoTerritoryCode = 221
	IsoTerritoryCode_ISO_TERRITORY_CODE_TG          IsoTerritoryCode = 222
	IsoTerritoryCode_ISO_TERRITORY_CODE_TH          IsoTerritoryCode = 223
	IsoTerritoryCode_ISO_TERRITORY_CODE_TJ          IsoTerritoryCode = 224
	IsoTerritoryCode_ISO_TERRITORY_CODE_TK          IsoTerritoryCode = 225
	IsoTerritoryCode_ISO_TERRITORY_CODE_TL          IsoTerritoryCode = 226
	IsoTerritoryCode_ISO_TERRITORY_CODE_TM          IsoTerritoryCode = 227
	IsoTerritoryCode_ISO_TERRITORY_CODE_TN          IsoTerritoryCode = 228
	IsoTerritoryCode_ISO_TERRITORY_CODE_TO          IsoTerritoryCode = 229
	IsoTerritoryCode_ISO_TERRITORY_CODE_TR          IsoTerritoryCode = 230
	IsoTerritoryCode_ISO_TERRITORY_CODE_TT          IsoTerritoryCode = 231
	IsoTerritoryCode_ISO_TERRITORY_CODE_TV          IsoTerritoryCode = 232
	IsoTerritoryCode_ISO_TERRITORY_CODE_TW          IsoTerritoryCode = 233
	IsoTerritoryCode_ISO_TERRITORY_CODE_TZ          IsoTerritoryCode = 234
	IsoTerritoryCode_ISO_TERRITORY_CODE_UA          IsoTerritoryCode = 235
	IsoTerritoryCode_ISO_TERRITORY_CODE_UG          IsoTerritoryCode = 236
	IsoTerritoryCode_ISO_TERRITORY_CODE_UM          IsoTerritoryCode = 237
	IsoTerritoryCode_ISO_TERRITORY_CODE_US          IsoTerritoryCode = 238
	IsoTerritoryCode_ISO_TERRITORY_CODE_UY          IsoTerritoryCode = 239
	IsoTerritoryCode_ISO_TERRITORY_CODE_UZ          IsoTerritoryCode = 240
	IsoTerritoryCode_ISO_TERRITORY_CODE_VA          IsoTerritoryCode = 241
	IsoTerritoryCode_ISO_TERRITORY_CODE_VC          IsoTerritoryCode = 242
	IsoTerritoryCode_ISO_TERRITORY_CODE_VE          IsoTerritoryCode = 243
	IsoTerritoryCode_ISO_TERRITORY_CODE_VG          IsoTerritoryCode = 244
	IsoTerritoryCode_ISO_TERRITORY_CODE_VI          IsoTerritoryCode = 245
	IsoTerritoryCode_ISO_TERRITORY_CODE_VN          IsoTerritoryCode = 246
	IsoTerritoryCode_ISO_TERRITORY_CODE_VU          IsoTerritoryCode = 247
	IsoTerritoryCode_ISO_TERRITORY_CODE_WF          IsoTerritoryCode = 248
	IsoTerritoryCode_ISO_TERRITORY_CODE_WS          IsoTerritoryCode = 249
	IsoTerritoryCode_ISO_TERRITORY_CODE_YE          IsoTerritoryCode = 250
	IsoTerritoryCode_ISO_TERRITORY_CODE_YT          IsoTerritoryCode = 251
	IsoTerritoryCode_ISO_TERRITORY_CODE_ZA          IsoTerritoryCode = 252
	IsoTerritoryCode_ISO_TERRITORY_CODE_ZM          IsoTerritoryCode = 253
	IsoTerritoryCode_ISO_TERRITORY_CODE_ZW          IsoTerritoryCode = 254
)

// Enum value maps for IsoTerritoryCode.
var (
	IsoTerritoryCode_name = map[int32]string{
		0:   "ISO_TERRITORY_CODE_UNSPECIFIED",
		1:   "ISO_TERRITORY_CODE_AD",
		2:   "ISO_TERRITORY_CODE_AE",
		3:   "ISO_TERRITORY_CODE_AF",
		4:   "ISO_TERRITORY_CODE_AG",
		5:   "ISO_TERRITORY_CODE_AI",
		6:   "ISO_TERRITORY_CODE_AL",
		7:   "ISO_TERRITORY_CODE_AM",
		8:   "ISO_TERRITORY_CODE_AN",
		9:   "ISO_TERRITORY_CODE_AO",
		10:  "ISO_TERRITORY_CODE_AQ",
		11:  "ISO_TERRITORY_CODE_AR",
		12:  "ISO_TERRITORY_CODE_AS",
		13:  "ISO_TERRITORY_CODE_AT",
		14:  "ISO_TERRITORY_CODE_AU",
		15:  "ISO_TERRITORY_CODE_AW",
		16:  "ISO_TERRITORY_CODE_AX",
		17:  "ISO_TERRITORY_CODE_AZ",
		18:  "ISO_TERRITORY_CODE_BA",
		19:  "ISO_TERRITORY_CODE_BB",
		20:  "ISO_TERRITORY_CODE_BD",
		21:  "ISO_TERRITORY_CODE_BE",
		22:  "ISO_TERRITORY_CODE_BF",
		23:  "ISO_TERRITORY_CODE_BG",
		24:  "ISO_TERRITORY_CODE_BH",
		25:  "ISO_TERRITORY_CODE_BI",
		26:  "ISO_TERRITORY_CODE_BJ",
		27:  "ISO_TERRITORY_CODE_BL",
		28:  "ISO_TERRITORY_CODE_BM",
		29:  "ISO_TERRITORY_CODE_BN",
		30:  "ISO_TERRITORY_CODE_BO",
		31:  "ISO_TERRITORY_CODE_BQ",
		32:  "ISO_TERRITORY_CODE_BR",
		33:  "ISO_TERRITORY_CODE_BS",
		34:  "ISO_TERRITORY_CODE_BT",
		35:  "ISO_TERRITORY_CODE_BV",
		36:  "ISO_TERRITORY_CODE_BW",
		37:  "ISO_TERRITORY_CODE_BY",
		38:  "ISO_TERRITORY_CODE_BZ",
		39:  "ISO_TERRITORY_CODE_CA",
		40:  "ISO_TERRITORY_CODE_CC",
		41:  "ISO_TERRITORY_CODE_CD",
		42:  "ISO_TERRITORY_CODE_CF",
		43:  "ISO_TERRITORY_CODE_CG",
		44:  "ISO_TERRITORY_CODE_CH",
		45:  "ISO_TERRITORY_CODE_CI",
		46:  "ISO_TERRITORY_CODE_CK",
		47:  "ISO_TERRITORY_CODE_CL",
		48:  "ISO_TERRITORY_CODE_CM",
		49:  "ISO_TERRITORY_CODE_CN",
		50:  "ISO_TERRITORY_CODE_CO",
		51:  "ISO_TERRITORY_CODE_CR",
		52:  "ISO_TERRITORY_CODE_CS",
		53:  "ISO_TERRITORY_CODE_CU",
		54:  "ISO_TERRITORY_CODE_CV",
		55:  "ISO_TERRITORY_CODE_CW",
		56:  "ISO_TERRITORY_CODE_CX",
		57:  "ISO_TERRITORY_CODE_CY",
		58:  "ISO_TERRITORY_CODE_CZ",
		59:  "ISO_TERRITORY_CODE_DE",
		60:  "ISO_TERRITORY_CODE_DJ",
		61:  "ISO_TERRITORY_CODE_DK",
		62:  "ISO_TERRITORY_CODE_DM",
		63:  "ISO_TERRITORY_CODE_DO",
		64:  "ISO_TERRITORY_CODE_DZ",
		65:  "ISO_TERRITORY_CODE_EC",
		66:  "ISO_TERRITORY_CODE_EE",
		67:  "ISO_TERRITORY_CODE_EG",
		68:  "ISO_TERRITORY_CODE_EH",
		69:  "ISO_TERRITORY_CODE_ER",
		70:  "ISO_TERRITORY_CODE_ES",
		71:  "ISO_TERRITORY_CODE_ES_CE",
		72:  "ISO_TERRITORY_CODE_ES_CN",
		73:  "ISO_TERRITORY_CODE_ES_ML",
		74:  "ISO_TERRITORY_CODE_ET",
		75:  "ISO_TERRITORY_CODE_FI",
		76:  "ISO_TERRITORY_CODE_FJ",
		77:  "ISO_TERRITORY_CODE_FK",
		78:  "ISO_TERRITORY_CODE_FM",
		79:  "ISO_TERRITORY_CODE_FO",
		80:  "ISO_TERRITORY_CODE_FR",
		81:  "ISO_TERRITORY_CODE_GA",
		82:  "ISO_TERRITORY_CODE_GB",
		83:  "ISO_TERRITORY_CODE_GD",
		84:  "ISO_TERRITORY_CODE_GE",
		85:  "ISO_TERRITORY_CODE_GF",
		86:  "ISO_TERRITORY_CODE_GG",
		87:  "ISO_TERRITORY_CODE_GH",
		88:  "ISO_TERRITORY_CODE_GI",
		89:  "ISO_TERRITORY_CODE_GL",
		90:  "ISO_TERRITORY_CODE_GM",
		91:  "ISO_TERRITORY_CODE_GN",
		92:  "ISO_TERRITORY_CODE_GP",
		93:  "ISO_TERRITORY_CODE_GQ",
		94:  "ISO_TERRITORY_CODE_GR",
		95:  "ISO_TERRITORY_CODE_GS",
		96:  "ISO_TERRITORY_CODE_GT",
		97:  "ISO_TERRITORY_CODE_GU",
		98:  "ISO_TERRITORY_CODE_GW",
		99:  "ISO_TERRITORY_CODE_GY",
		100: "ISO_TERRITORY_CODE_HK",
		101: "ISO_TERRITORY_CODE_HM",
		102: "ISO_TERRITORY_CODE_HN",
		103: "ISO_TERRITORY_CODE_HR",
		104: "ISO_TERRITORY_CODE_HT",
		105: "ISO_TERRITORY_CODE_HU",
		106: "ISO_TERRITORY_CODE_ID",
		107: "ISO_TERRITORY_CODE_IE",
		108: "ISO_TERRITORY_CODE_IL",
		109: "ISO_TERRITORY_CODE_IM",
		110: "ISO_TERRITORY_CODE_IN",
		111: "ISO_TERRITORY_CODE_IO",
		112: "ISO_TERRITORY_CODE_IQ",
		113: "ISO_TERRITORY_CODE_IR",
		114: "ISO_TERRITORY_CODE_IS",
		115: "ISO_TERRITORY_CODE_IT",
		116: "ISO_TERRITORY_CODE_JE",
		117: "ISO_TERRITORY_CODE_JM",
		118: "ISO_TERRITORY_CODE_JO",
		119: "ISO_TERRITORY_CODE_JP",
		120: "ISO_TERRITORY_CODE_KE",
		121: "ISO_TERRITORY_CODE_KG",
		122: "ISO_TERRITORY_CODE_KH",
		123: "ISO_TERRITORY_CODE_KI",
		124: "ISO_TERRITORY_CODE_KM",
		125: "ISO_TERRITORY_CODE_KN",
		126: "ISO_TERRITORY_CODE_KP",
		127: "ISO_TERRITORY_CODE_KR",
		128: "ISO_TERRITORY_CODE_KW",
		129: "ISO_TERRITORY_CODE_KY",
		130: "ISO_TERRITORY_CODE_KZ",
		131: "ISO_TERRITORY_CODE_LA",
		132: "ISO_TERRITORY_CODE_LB",
		133: "ISO_TERRITORY_CODE_LC",
		134: "ISO_TERRITORY_CODE_LI",
		135: "ISO_TERRITORY_CODE_LK",
		136: "ISO_TERRITORY_CODE_LR",
		137: "ISO_TERRITORY_CODE_LS",
		138: "ISO_TERRITORY_CODE_LT",
		139: "ISO_TERRITORY_CODE_LU",
		140: "ISO_TERRITORY_CODE_LV",
		141: "ISO_TERRITORY_CODE_LY",
		142: "ISO_TERRITORY_CODE_MA",
		143: "ISO_TERRITORY_CODE_MC",
		144: "ISO_TERRITORY_CODE_MD",
		145: "ISO_TERRITORY_CODE_ME",
		146: "ISO_TERRITORY_CODE_MF",
		147: "ISO_TERRITORY_CODE_MG",
		148: "ISO_TERRITORY_CODE_MH",
		149: "ISO_TERRITORY_CODE_MK",
		150: "ISO_TERRITORY_CODE_ML",
		151: "ISO_TERRITORY_CODE_MM",
		152: "ISO_TERRITORY_CODE_MN",
		153: "ISO_TERRITORY_CODE_MO",
		154: "ISO_TERRITORY_CODE_MP",
		155: "ISO_TERRITORY_CODE_MQ",
		156: "ISO_TERRITORY_CODE_MR",
		157: "ISO_TERRITORY_CODE_MS",
		158: "ISO_TERRITORY_CODE_MT",
		159: "ISO_TERRITORY_CODE_MU",
		160: "ISO_TERRITORY_CODE_MV",
		161: "ISO_TERRITORY_CODE_MW",
		162: "ISO_TERRITORY_CODE_MX",
		163: "ISO_TERRITORY_CODE_MY",
		164: "ISO_TERRITORY_CODE_MZ",
		165: "ISO_TERRITORY_CODE_NA",
		166: "ISO_TERRITORY_CODE_NC",
		167: "ISO_TERRITORY_CODE_NE",
		168: "ISO_TERRITORY_CODE_NF",
		169: "ISO_TERRITORY_CODE_NG",
		170: "ISO_TERRITORY_CODE_NI",
		171: "ISO_TERRITORY_CODE_NL",
		172: "ISO_TERRITORY_CODE_NO",
		173: "ISO_TERRITORY_CODE_NP",
		174: "ISO_TERRITORY_CODE_NR",
		175: "ISO_TERRITORY_CODE_NU",
		176: "ISO_TERRITORY_CODE_NZ",
		177: "ISO_TERRITORY_CODE_OM",
		178: "ISO_TERRITORY_CODE_PA",
		179: "ISO_TERRITORY_CODE_PE",
		180: "ISO_TERRITORY_CODE_PF",
		181: "ISO_TERRITORY_CODE_PG",
		182: "ISO_TERRITORY_CODE_PH",
		183: "ISO_TERRITORY_CODE_PK",
		184: "ISO_TERRITORY_CODE_PL",
		185: "ISO_TERRITORY_CODE_PM",
		186: "ISO_TERRITORY_CODE_PN",
		187: "ISO_TERRITORY_CODE_PR",
		188: "ISO_TERRITORY_CODE_PS",
		189: "ISO_TERRITORY_CODE_PT",
		190: "ISO_TERRITORY_CODE_PW",
		191: "ISO_TERRITORY_CODE_PY",
		192: "ISO_TERRITORY_CODE_QA",
		193: "ISO_TERRITORY_CODE_RE",
		194: "ISO_TERRITORY_CODE_RO",
		195: "ISO_TERRITORY_CODE_RS",
		196: "ISO_TERRITORY_CODE_RU",
		197: "ISO_TERRITORY_CODE_RW",
		198: "ISO_TERRITORY_CODE_SA",
		199: "ISO_TERRITORY_CODE_SB",
		200: "ISO_TERRITORY_CODE_SC",
		201: "ISO_TERRITORY_CODE_SD",
		202: "ISO_TERRITORY_CODE_SE",
		203: "ISO_TERRITORY_CODE_SG",
		204: "ISO_TERRITORY_CODE_SH",
		205: "ISO_TERRITORY_CODE_SI",
		206: "ISO_TERRITORY_CODE_SJ",
		207: "ISO_TERRITORY_CODE_SK",
		208: "ISO_TERRITORY_CODE_SL",
		209: "ISO_TERRITORY_CODE_SM",
		210: "ISO_TERRITORY_CODE_SN",
		211: "ISO_TERRITORY_CODE_SO",
		212: "ISO_TERRITORY_CODE_SR",
		213: "ISO_TERRITORY_CODE_SS",
		214: "ISO_TERRITORY_CODE_ST",
		215: "ISO_TERRITORY_CODE_SV",
		216: "ISO_TERRITORY_CODE_SX",
		217: "ISO_TERRITORY_CODE_SY",
		218: "ISO_TERRITORY_CODE_SZ",
		219: "ISO_TERRITORY_CODE_TC",
		220: "ISO_TERRITORY_CODE_TD",
		221: "ISO_TERRITORY_CODE_TF",
		222: "ISO_TERRITORY_CODE_TG",
		223: "ISO_TERRITORY_CODE_TH",
		224: "ISO_TERRITORY_CODE_TJ",
		225: "ISO_TERRITORY_CODE_TK",
		226: "ISO_TERRITORY_CODE_TL",
		227: "ISO_TERRITORY_CODE_TM",
		228: "ISO_TERRITORY_CODE_TN",
		229: "ISO_TERRITORY_CODE_TO",
		230: "ISO_TERRITORY_CODE_TR",
		231: "ISO_TERRITORY_CODE_TT",
		232: "ISO_TERRITORY_CODE_TV",
		233: "ISO_TERRITORY_CODE_TW",
		234: "ISO_TERRITORY_CODE_TZ",
		235: "ISO_TERRITORY_CODE_UA",
		236: "ISO_TERRITORY_CODE_UG",
		237: "ISO_TERRITORY_CODE_UM",
		238: "ISO_TERRITORY_CODE_US",
		239: "ISO_TERRITORY_CODE_UY",
		240: "ISO_TERRITORY_CODE_UZ",
		241: "ISO_TERRITORY_CODE_VA",
		242: "ISO_TERRITORY_CODE_VC",
		243: "ISO_TERRITORY_CODE_VE",
		244: "ISO_TERRITORY_CODE_VG",
		245: "ISO_TERRITORY_CODE_VI",
		246: "ISO_TERRITORY_CODE_VN",
		247: "ISO_TERRITORY_CODE_VU",
		248: "ISO_TERRITORY_CODE_WF",
		249: "ISO_TERRITORY_CODE_WS",
		250: "ISO_TERRITORY_CODE_YE",
		251: "ISO_TERRITORY_CODE_YT",
		252: "ISO_TERRITORY_CODE_ZA",
		253: "ISO_TERRITORY_CODE_ZM",
		254: "ISO_TERRITORY_CODE_ZW",
	}
	IsoTerritoryCode_value = map[string]int32{
		"ISO_TERRITORY_CODE_UNSPECIFIED": 0,
		"ISO_TERRITORY_CODE_AD":          1,
		"ISO_TERRITORY_CODE_AE":          2,
		"ISO_TERRITORY_CODE_AF":          3,
		"ISO_TERRITORY_CODE_AG":          4,
		"ISO_TERRITORY_CODE_AI":          5,
		"ISO_TERRITORY_CODE_AL":          6,
		"ISO_TERRITORY_CODE_AM":          7,
		"ISO_TERRITORY_CODE_AN":          8,
		"ISO_TERRITORY_CODE_AO":          9,
		"ISO_TERRITORY_CODE_AQ":          10,
		"ISO_TERRITORY_CODE_AR":          11,
		"ISO_TERRITORY_CODE_AS":          12,
		"ISO_TERRITORY_CODE_AT":          13,
		"ISO_TERRITORY_CODE_AU":          14,
		"ISO_TERRITORY_CODE_AW":          15,
		"ISO_TERRITORY_CODE_AX":          16,
		"ISO_TERRITORY_CODE_AZ":          17,
		"ISO_TERRITORY_CODE_BA":          18,
		"ISO_TERRITORY_CODE_BB":          19,
		"ISO_TERRITORY_CODE_BD":          20,
		"ISO_TERRITORY_CODE_BE":          21,
		"ISO_TERRITORY_CODE_BF":          22,
		"ISO_TERRITORY_CODE_BG":          23,
		"ISO_TERRITORY_CODE_BH":          24,
		"ISO_TERRITORY_CODE_BI":          25,
		"ISO_TERRITORY_CODE_BJ":          26,
		"ISO_TERRITORY_CODE_BL":          27,
		"ISO_TERRITORY_CODE_BM":          28,
		"ISO_TERRITORY_CODE_BN":          29,
		"ISO_TERRITORY_CODE_BO":          30,
		"ISO_TERRITORY_CODE_BQ":          31,
		"ISO_TERRITORY_CODE_BR":          32,
		"ISO_TERRITORY_CODE_BS":          33,
		"ISO_TERRITORY_CODE_BT":          34,
		"ISO_TERRITORY_CODE_BV":          35,
		"ISO_TERRITORY_CODE_BW":          36,
		"ISO_TERRITORY_CODE_BY":          37,
		"ISO_TERRITORY_CODE_BZ":          38,
		"ISO_TERRITORY_CODE_CA":          39,
		"ISO_TERRITORY_CODE_CC":          40,
		"ISO_TERRITORY_CODE_CD":          41,
		"ISO_TERRITORY_CODE_CF":          42,
		"ISO_TERRITORY_CODE_CG":          43,
		"ISO_TERRITORY_CODE_CH":          44,
		"ISO_TERRITORY_CODE_CI":          45,
		"ISO_TERRITORY_CODE_CK":          46,
		"ISO_TERRITORY_CODE_CL":          47,
		"ISO_TERRITORY_CODE_CM":          48,
		"ISO_TERRITORY_CODE_CN":          49,
		"ISO_TERRITORY_CODE_CO":          50,
		"ISO_TERRITORY_CODE_CR":          51,
		"ISO_TERRITORY_CODE_CS":          52,
		"ISO_TERRITORY_CODE_CU":          53,
		"ISO_TERRITORY_CODE_CV":          54,
		"ISO_TERRITORY_CODE_CW":          55,
		"ISO_TERRITORY_CODE_CX":          56,
		"ISO_TERRITORY_CODE_CY":          57,
		"ISO_TERRITORY_CODE_CZ":          58,
		"ISO_TERRITORY_CODE_DE":          59,
		"ISO_TERRITORY_CODE_DJ":          60,
		"ISO_TERRITORY_CODE_DK":          61,
		"ISO_TERRITORY_CODE_DM":          62,
		"ISO_TERRITORY_CODE_DO":          63,
		"ISO_TERRITORY_CODE_DZ":          64,
		"ISO_TERRITORY_CODE_EC":          65,
		"ISO_TERRITORY_CODE_EE":          66,
		"ISO_TERRITORY_CODE_EG":          67,
		"ISO_TERRITORY_CODE_EH":          68,
		"ISO_TERRITORY_CODE_ER":          69,
		"ISO_TERRITORY_CODE_ES":          70,
		"ISO_TERRITORY_CODE_ES_CE":       71,
		"ISO_TERRITORY_CODE_ES_CN":       72,
		"ISO_TERRITORY_CODE_ES_ML":       73,
		"ISO_TERRITORY_CODE_ET":          74,
		"ISO_TERRITORY_CODE_FI":          75,
		"ISO_TERRITORY_CODE_FJ":          76,
		"ISO_TERRITORY_CODE_FK":          77,
		"ISO_TERRITORY_CODE_FM":          78,
		"ISO_TERRITORY_CODE_FO":          79,
		"ISO_TERRITORY_CODE_FR":          80,
		"ISO_TERRITORY_CODE_GA":          81,
		"ISO_TERRITORY_CODE_GB":          82,
		"ISO_TERRITORY_CODE_GD":          83,
		"ISO_TERRITORY_CODE_GE":          84,
		"ISO_TERRITORY_CODE_GF":          85,
		"ISO_TERRITORY_CODE_GG":          86,
		"ISO_TERRITORY_CODE_GH":          87,
		"ISO_TERRITORY_CODE_GI":          88,
		"ISO_TERRITORY_CODE_GL":          89,
		"ISO_TERRITORY_CODE_GM":          90,
		"ISO_TERRITORY_CODE_GN":          91,
		"ISO_TERRITORY_CODE_GP":          92,
		"ISO_TERRITORY_CODE_GQ":          93,
		"ISO_TERRITORY_CODE_GR":          94,
		"ISO_TERRITORY_CODE_GS":          95,
		"ISO_TERRITORY_CODE_GT":          96,
		"ISO_TERRITORY_CODE_GU":          97,
		"ISO_TERRITORY_CODE_GW":          98,
		"ISO_TERRITORY_CODE_GY":          99,
		"ISO_TERRITORY_CODE_HK":          100,
		"ISO_TERRITORY_CODE_HM":          101,
		"ISO_TERRITORY_CODE_HN":          102,
		"ISO_TERRITORY_CODE_HR":          103,
		"ISO_TERRITORY_CODE_HT":          104,
		"ISO_TERRITORY_CODE_HU":          105,
		"ISO_TERRITORY_CODE_ID":          106,
		"ISO_TERRITORY_CODE_IE":          107,
		"ISO_TERRITORY_CODE_IL":          108,
		"ISO_TERRITORY_CODE_IM":          109,
		"ISO_TERRITORY_CODE_IN":          110,
		"ISO_TERRITORY_CODE_IO":          111,
		"ISO_TERRITORY_CODE_IQ":          112,
		"ISO_TERRITORY_CODE_IR":          113,
		"ISO_TERRITORY_CODE_IS":          114,
		"ISO_TERRITORY_CODE_IT":          115,
		"ISO_TERRITORY_CODE_JE":          116,
		"ISO_TERRITORY_CODE_JM":          117,
		"ISO_TERRITORY_CODE_JO":          118,
		"ISO_TERRITORY_CODE_JP":          119,
		"ISO_TERRITORY_CODE_KE":          120,
		"ISO_TERRITORY_CODE_KG":          121,
		"ISO_TERRITORY_CODE_KH":          122,
		"ISO_TERRITORY_CODE_KI":          123,
		"ISO_TERRITORY_CODE_KM":          124,
		"ISO_TERRITORY_CODE_KN":          125,
		"ISO_TERRITORY_CODE_KP":          126,
		"ISO_TERRITORY_CODE_KR":          127,
		"ISO_TERRITORY_CODE_KW":          128,
		"ISO_TERRITORY_CODE_KY":          129,
		"ISO_TERRITORY_CODE_KZ":          130,
		"ISO_TERRITORY_CODE_LA":          131,
		"ISO_TERRITORY_CODE_LB":          132,
		"ISO_TERRITORY_CODE_LC":          133,
		"ISO_TERRITORY_CODE_LI":          134,
		"ISO_TERRITORY_CODE_LK":          135,
		"ISO_TERRITORY_CODE_LR":          136,
		"ISO_TERRITORY_CODE_LS":          137,
		"ISO_TERRITORY_CODE_LT":          138,
		"ISO_TERRITORY_CODE_LU":          139,
		"ISO_TERRITORY_CODE_LV":          140,
		"ISO_TERRITORY_CODE_LY":          141,
		"ISO_TERRITORY_CODE_MA":          142,
		"ISO_TERRITORY_CODE_MC":          143,
		"ISO_TERRITORY_CODE_MD":          144,
		"ISO_TERRITORY_CODE_ME":          145,
		"ISO_TERRITORY_CODE_MF":          146,
		"ISO_TERRITORY_CODE_MG":          147,
		"ISO_TERRITORY_CODE_MH":          148,
		"ISO_TERRITORY_CODE_MK":          149,
		"ISO_TERRITORY_CODE_ML":          150,
		"ISO_TERRITORY_CODE_MM":          151,
		"ISO_TERRITORY_CODE_MN":          152,
		"ISO_TERRITORY_CODE_MO":          153,
		"ISO_TERRITORY_CODE_MP":          154,
		"ISO_TERRITORY_CODE_MQ":          155,
		"ISO_TERRITORY_CODE_MR":          156,
		"ISO_TERRITORY_CODE_MS":          157,
		"ISO_TERRITORY_CODE_MT":          158,
		"ISO_TERRITORY_CODE_MU":          159,
		"ISO_TERRITORY_CODE_MV":          160,
		"ISO_TERRITORY_CODE_MW":          161,
		"ISO_TERRITORY_CODE_MX":          162,
		"ISO_TERRITORY_CODE_MY":          163,
		"ISO_TERRITORY_CODE_MZ":          164,
		"ISO_TERRITORY_CODE_NA":          165,
		"ISO_TERRITORY_CODE_NC":          166,
		"ISO_TERRITORY_CODE_NE":          167,
		"ISO_TERRITORY_CODE_NF":          168,
		"ISO_TERRITORY_CODE_NG":          169,
		"ISO_TERRITORY_CODE_NI":          170,
		"ISO_TERRITORY_CODE_NL":          171,
		"ISO_TERRITORY_CODE_NO":          172,
		"ISO_TERRITORY_CODE_NP":          173,
		"ISO_TERRITORY_CODE_NR":          174,
		"ISO_TERRITORY_CODE_NU":          175,
		"ISO_TERRITORY_CODE_NZ":          176,
		"ISO_TERRITORY_CODE_OM":          177,
		"ISO_TERRITORY_CODE_PA":          178,
		"ISO_TERRITORY_CODE_PE":          179,
		"ISO_TERRITORY_CODE_PF":          180,
		"ISO_TERRITORY_CODE_PG":          181,
		"ISO_TERRITORY_CODE_PH":          182,
		"ISO_TERRITORY_CODE_PK":          183,
		"ISO_TERRITORY_CODE_PL":          184,
		"ISO_TERRITORY_CODE_PM":          185,
		"ISO_TERRITORY_CODE_PN":          186,
		"ISO_TERRITORY_CODE_PR":          187,
		"ISO_TERRITORY_CODE_PS":          188,
		"ISO_TERRITORY_CODE_PT":          189,
		"ISO_TERRITORY_CODE_PW":          190,
		"ISO_TERRITORY_CODE_PY":          191,
		"ISO_TERRITORY_CODE_QA":          192,
		"ISO_TERRITORY_CODE_RE":          193,
		"ISO_TERRITORY_CODE_RO":          194,
		"ISO_TERRITORY_CODE_RS":          195,
		"ISO_TERRITORY_CODE_RU":          196,
		"ISO_TERRITORY_CODE_RW":          197,
		"ISO_TERRITORY_CODE_SA":          198,
		"ISO_TERRITORY_CODE_SB":          199,
		"ISO_TERRITORY_CODE_SC":          200,
		"ISO_TERRITORY_CODE_SD":          201,
		"ISO_TERRITORY_CODE_SE":          202,
		"ISO_TERRITORY_CODE_SG":          203,
		"ISO_TERRITORY_CODE_SH":          204,
		"ISO_TERRITORY_CODE_SI":          205,
		"ISO_TERRITORY_CODE_SJ":          206,
		"ISO_TERRITORY_CODE_SK":          207,
		"ISO_TERRITORY_CODE_SL":          208,
		"ISO_TERRITORY_CODE_SM":          209,
		"ISO_TERRITORY_CODE_SN":          210,
		"ISO_TERRITORY_CODE_SO":          211,
		"ISO_TERRITORY_CODE_SR":          212,
		"ISO_TERRITORY_CODE_SS":          213,
		"ISO_TERRITORY_CODE_ST":          214,
		"ISO_TERRITORY_CODE_SV":          215,
		"ISO_TERRITORY_CODE_SX":          216,
		"ISO_TERRITORY_CODE_SY":          217,
		"ISO_TERRITORY_CODE_SZ":          218,
		"ISO_TERRITORY_CODE_TC":          219,
		"ISO_TERRITORY_CODE_TD":          220,
		"ISO_TERRITORY_CODE_TF":          221,
		"ISO_TERRITORY_CODE_TG":          222,
		"ISO_TERRITORY_CODE_TH":          223,
		"ISO_TERRITORY_CODE_TJ":          224,
		"ISO_TERRITORY_CODE_TK":          225,
		"ISO_TERRITORY_CODE_TL":          226,
		"ISO_TERRITORY_CODE_TM":          227,
		"ISO_TERRITORY_CODE_TN":          228,
		"ISO_TERRITORY_CODE_TO":          229,
		"ISO_TERRITORY_CODE_TR":          230,
		"ISO_TERRITORY_CODE_TT":          231,
		"ISO_TERRITORY_CODE_TV":          232,
		"ISO_TERRITORY_CODE_TW":          233,
		"ISO_TERRITORY_CODE_TZ":          234,
		"ISO_TERRITORY_CODE_UA":          235,
		"ISO_TERRITORY_CODE_UG":          236,
		"ISO_TERRITORY_CODE_UM":          237,
		"ISO_TERRITORY_CODE_US":          238,
		"ISO_TERRITORY_CODE_UY":          239,
		"ISO_TERRITORY_CODE_UZ":          240,
		"ISO_TERRITORY_CODE_VA":          241,
		"ISO_TERRITORY_CODE_VC":          242,
		"ISO_TERRITORY_CODE_VE":          243,
		"ISO_TERRITORY_CODE_VG":          244,
		"ISO_TERRITORY_CODE_VI":          245,
		"ISO_TERRITORY_CODE_VN":          246,
		"ISO_TERRITORY_CODE_VU":          247,
		"ISO_TERRITORY_CODE_WF":          248,
		"ISO_TERRITORY_CODE_WS":          249,
		"ISO_TERRITORY_CODE_YE":          250,
		"ISO_TERRITORY_CODE_YT":          251,
		"ISO_TERRITORY_CODE_ZA":          252,
		"ISO_TERRITORY_CODE_ZM":          253,
		"ISO_TERRITORY_CODE_ZW":          254,
	}
)

func (x IsoTerritoryCode) Enum() *IsoTerritoryCode {
	p := new(IsoTerritoryCode)
	*p = x
	return p
}

func (x IsoTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[80].Descriptor()
}

func (IsoTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[80]
}

func (x IsoTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoTerritoryCode.Descriptor instead.
func (IsoTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{80}
}

type LabelNameType int32

const (
	LabelNameType_LABEL_NAME_TYPE_UNSPECIFIED      LabelNameType = 0
	LabelNameType_LABEL_NAME_TYPE_DISPLAYLABELNAME LabelNameType = 1
	LabelNameType_LABEL_NAME_TYPE_USERDEFINED      LabelNameType = 2
)

// Enum value maps for LabelNameType.
var (
	LabelNameType_name = map[int32]string{
		0: "LABEL_NAME_TYPE_UNSPECIFIED",
		1: "LABEL_NAME_TYPE_DISPLAYLABELNAME",
		2: "LABEL_NAME_TYPE_USERDEFINED",
	}
	LabelNameType_value = map[string]int32{
		"LABEL_NAME_TYPE_UNSPECIFIED":      0,
		"LABEL_NAME_TYPE_DISPLAYLABELNAME": 1,
		"LABEL_NAME_TYPE_USERDEFINED":      2,
	}
)

func (x LabelNameType) Enum() *LabelNameType {
	p := new(LabelNameType)
	*p = x
	return p
}

func (x LabelNameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelNameType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[81].Descriptor()
}

func (LabelNameType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[81]
}

func (x LabelNameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelNameType.Descriptor instead.
func (LabelNameType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{81}
}

type LabelType int32

const (
	LabelType_LABEL_TYPE_UNSPECIFIED  LabelType = 0
	LabelType_LABEL_TYPE_DISPLAYLABEL LabelType = 1
	LabelType_LABEL_TYPE_USERDEFINED  LabelType = 2
)

// Enum value maps for LabelType.
var (
	LabelType_name = map[int32]string{
		0: "LABEL_TYPE_UNSPECIFIED",
		1: "LABEL_TYPE_DISPLAYLABEL",
		2: "LABEL_TYPE_USERDEFINED",
	}
	LabelType_value = map[string]int32{
		"LABEL_TYPE_UNSPECIFIED":  0,
		"LABEL_TYPE_DISPLAYLABEL": 1,
		"LABEL_TYPE_USERDEFINED":  2,
	}
)

func (x LabelType) Enum() *LabelType {
	p := new(LabelType)
	*p = x
	return p
}

func (x LabelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[82].Descriptor()
}

func (LabelType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[82]
}

func (x LabelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelType.Descriptor instead.
func (LabelType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{82}
}

type LanguageLocalizationType int32

const (
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_UNSPECIFIED  LanguageLocalizationType = 0
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_DUBBED       LanguageLocalizationType = 1
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_SUBTITLED    LanguageLocalizationType = 2
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_MULTILINGUAL LanguageLocalizationType = 3
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_ORIGINAL     LanguageLocalizationType = 4
)

// Enum value maps for LanguageLocalizationType.
var (
	LanguageLocalizationType_name = map[int32]string{
		0: "LANGUAGE_LOCALIZATION_TYPE_UNSPECIFIED",
		1: "LANGUAGE_LOCALIZATION_TYPE_DUBBED",
		2: "LANGUAGE_LOCALIZATION_TYPE_SUBTITLED",
		3: "LANGUAGE_LOCALIZATION_TYPE_MULTILINGUAL",
		4: "LANGUAGE_LOCALIZATION_TYPE_ORIGINAL",
	}
	LanguageLocalizationType_value = map[string]int32{
		"LANGUAGE_LOCALIZATION_TYPE_UNSPECIFIED":  0,
		"LANGUAGE_LOCALIZATION_TYPE_DUBBED":       1,
		"LANGUAGE_LOCALIZATION_TYPE_SUBTITLED":    2,
		"LANGUAGE_LOCALIZATION_TYPE_MULTILINGUAL": 3,
		"LANGUAGE_LOCALIZATION_TYPE_ORIGINAL":     4,
	}
)

func (x LanguageLocalizationType) Enum() *LanguageLocalizationType {
	p := new(LanguageLocalizationType)
	*p = x
	return p
}

func (x LanguageLocalizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageLocalizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[83].Descriptor()
}

func (LanguageLocalizationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[83]
}

func (x LanguageLocalizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageLocalizationType.Descriptor instead.
func (LanguageLocalizationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{83}
}

type LicenseRecord int32

const (
	LicenseRecord_LICENSE_RECORD_UNSPECIFIED  LicenseRecord = 0
	LicenseRecord_LICENSE_RECORD_HASLICENSE   LicenseRecord = 1
	LicenseRecord_LICENSE_RECORD_HASNOLICENSE LicenseRecord = 2
	LicenseRecord_LICENSE_RECORD_UNKNOWN      LicenseRecord = 3
)

// Enum value maps for LicenseRecord.
var (
	LicenseRecord_name = map[int32]string{
		0: "LICENSE_RECORD_UNSPECIFIED",
		1: "LICENSE_RECORD_HASLICENSE",
		2: "LICENSE_RECORD_HASNOLICENSE",
		3: "LICENSE_RECORD_UNKNOWN",
	}
	LicenseRecord_value = map[string]int32{
		"LICENSE_RECORD_UNSPECIFIED":  0,
		"LICENSE_RECORD_HASLICENSE":   1,
		"LICENSE_RECORD_HASNOLICENSE": 2,
		"LICENSE_RECORD_UNKNOWN":      3,
	}
)

func (x LicenseRecord) Enum() *LicenseRecord {
	p := new(LicenseRecord)
	*p = x
	return p
}

func (x LicenseRecord) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseRecord) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[84].Descriptor()
}

func (LicenseRecord) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[84]
}

func (x LicenseRecord) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseRecord.Descriptor instead.
func (LicenseRecord) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{84}
}

type LicenseRefusalReason int32

const (
	LicenseRefusalReason_LICENSE_REFUSAL_REASON_UNSPECIFIED        LicenseRefusalReason = 0
	LicenseRefusalReason_LICENSE_REFUSAL_REASON_USERDEFINED        LicenseRefusalReason = 1
	LicenseRefusalReason_LICENSE_REFUSAL_REASON_WORKINPUBLICDOMAIN LicenseRefusalReason = 2
)

// Enum value maps for LicenseRefusalReason.
var (
	LicenseRefusalReason_name = map[int32]string{
		0: "LICENSE_REFUSAL_REASON_UNSPECIFIED",
		1: "LICENSE_REFUSAL_REASON_USERDEFINED",
		2: "LICENSE_REFUSAL_REASON_WORKINPUBLICDOMAIN",
	}
	LicenseRefusalReason_value = map[string]int32{
		"LICENSE_REFUSAL_REASON_UNSPECIFIED":        0,
		"LICENSE_REFUSAL_REASON_USERDEFINED":        1,
		"LICENSE_REFUSAL_REASON_WORKINPUBLICDOMAIN": 2,
	}
)

func (x LicenseRefusalReason) Enum() *LicenseRefusalReason {
	p := new(LicenseRefusalReason)
	*p = x
	return p
}

func (x LicenseRefusalReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseRefusalReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[85].Descriptor()
}

func (LicenseRefusalReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[85]
}

func (x LicenseRefusalReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseRefusalReason.Descriptor instead.
func (LicenseRefusalReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{85}
}

type LicenseRejectionReason int32

const (
	LicenseRejectionReason_LICENSE_REJECTION_REASON_UNSPECIFIED                    LicenseRejectionReason = 0
	LicenseRejectionReason_LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES      LicenseRejectionReason = 1
	LicenseRejectionReason_LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE LicenseRejectionReason = 2
	LicenseRejectionReason_LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER  LicenseRejectionReason = 3
	LicenseRejectionReason_LICENSE_REJECTION_REASON_LICENSEBLOCKED                 LicenseRejectionReason = 4
	LicenseRejectionReason_LICENSE_REJECTION_REASON_LICENSEEXISTS                  LicenseRejectionReason = 5
	LicenseRejectionReason_LICENSE_REJECTION_REASON_LICENSENOTNEEDED               LicenseRejectionReason = 6
	LicenseRejectionReason_LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING      LicenseRejectionReason = 7
	LicenseRejectionReason_LICENSE_REJECTION_REASON_SHARESPLITSDIFFER              LicenseRejectionReason = 8
	LicenseRejectionReason_LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN             LicenseRejectionReason = 9
	LicenseRejectionReason_LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES          LicenseRejectionReason = 10
	LicenseRejectionReason_LICENSE_REJECTION_REASON_WRONGADDRESSEE                 LicenseRejectionReason = 11
	LicenseRejectionReason_LICENSE_REJECTION_REASON_USERDEFINED                    LicenseRejectionReason = 12
)

// Enum value maps for LicenseRejectionReason.
var (
	LicenseRejectionReason_name = map[int32]string{
		0:  "LICENSE_REJECTION_REASON_UNSPECIFIED",
		1:  "LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES",
		2:  "LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE",
		3:  "LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER",
		4:  "LICENSE_REJECTION_REASON_LICENSEBLOCKED",
		5:  "LICENSE_REJECTION_REASON_LICENSEEXISTS",
		6:  "LICENSE_REJECTION_REASON_LICENSENOTNEEDED",
		7:  "LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING",
		8:  "LICENSE_REJECTION_REASON_SHARESPLITSDIFFER",
		9:  "LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN",
		10: "LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES",
		11: "LICENSE_REJECTION_REASON_WRONGADDRESSEE",
		12: "LICENSE_REJECTION_REASON_USERDEFINED",
	}
	LicenseRejectionReason_value = map[string]int32{
		"LICENSE_REJECTION_REASON_UNSPECIFIED":                    0,
		"LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES":      1,
		"LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE": 2,
		"LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER":  3,
		"LICENSE_REJECTION_REASON_LICENSEBLOCKED":                 4,
		"LICENSE_REJECTION_REASON_LICENSEEXISTS":                  5,
		"LICENSE_REJECTION_REASON_LICENSENOTNEEDED":               6,
		"LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING":      7,
		"LICENSE_REJECTION_REASON_SHARESPLITSDIFFER":              8,
		"LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN":             9,
		"LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES":          10,
		"LICENSE_REJECTION_REASON_WRONGADDRESSEE":                 11,
		"LICENSE_REJECTION_REASON_USERDEFINED":                    12,
	}
)

func (x LicenseRejectionReason) Enum() *LicenseRejectionReason {
	p := new(LicenseRejectionReason)
	*p = x
	return p
}

func (x LicenseRejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseRejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[86].Descriptor()
}

func (LicenseRejectionReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[86]
}

func (x LicenseRejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseRejectionReason.Descriptor instead.
func (LicenseRejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{86}
}

type LinkAcknowledgementStatus int32

const (
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED  LinkAcknowledgementStatus = 0
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_ACCEPTED     LinkAcknowledgementStatus = 1
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED LinkAcknowledgementStatus = 2
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_CONFLICT     LinkAcknowledgementStatus = 3
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_USERDEFINED  LinkAcknowledgementStatus = 4
)

// Enum value maps for LinkAcknowledgementStatus.
var (
	LinkAcknowledgementStatus_name = map[int32]string{
		0: "LINK_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED",
		1: "LINK_ACKNOWLEDGEMENT_STATUS_ACCEPTED",
		2: "LINK_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED",
		3: "LINK_ACKNOWLEDGEMENT_STATUS_CONFLICT",
		4: "LINK_ACKNOWLEDGEMENT_STATUS_USERDEFINED",
	}
	LinkAcknowledgementStatus_value = map[string]int32{
		"LINK_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED":  0,
		"LINK_ACKNOWLEDGEMENT_STATUS_ACCEPTED":     1,
		"LINK_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED": 2,
		"LINK_ACKNOWLEDGEMENT_STATUS_CONFLICT":     3,
		"LINK_ACKNOWLEDGEMENT_STATUS_USERDEFINED":  4,
	}
)

func (x LinkAcknowledgementStatus) Enum() *LinkAcknowledgementStatus {
	p := new(LinkAcknowledgementStatus)
	*p = x
	return p
}

func (x LinkAcknowledgementStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkAcknowledgementStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[87].Descriptor()
}

func (LinkAcknowledgementStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[87]
}

func (x LinkAcknowledgementStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkAcknowledgementStatus.Descriptor instead.
func (LinkAcknowledgementStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{87}
}

type LinkDescription int32

const (
	LinkDescription_LINK_DESCRIPTION_UNSPECIFIED        LinkDescription = 0
	LinkDescription_LINK_DESCRIPTION_COVERART           LinkDescription = 1
	LinkDescription_LINK_DESCRIPTION_VIDEOSCREENCAPTURE LinkDescription = 2
	LinkDescription_LINK_DESCRIPTION_USERDEFINED        LinkDescription = 3
)

// Enum value maps for LinkDescription.
var (
	LinkDescription_name = map[int32]string{
		0: "LINK_DESCRIPTION_UNSPECIFIED",
		1: "LINK_DESCRIPTION_COVERART",
		2: "LINK_DESCRIPTION_VIDEOSCREENCAPTURE",
		3: "LINK_DESCRIPTION_USERDEFINED",
	}
	LinkDescription_value = map[string]int32{
		"LINK_DESCRIPTION_UNSPECIFIED":        0,
		"LINK_DESCRIPTION_COVERART":           1,
		"LINK_DESCRIPTION_VIDEOSCREENCAPTURE": 2,
		"LINK_DESCRIPTION_USERDEFINED":        3,
	}
)

func (x LinkDescription) Enum() *LinkDescription {
	p := new(LinkDescription)
	*p = x
	return p
}

func (x LinkDescription) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkDescription) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[88].Descriptor()
}

func (LinkDescription) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[88]
}

func (x LinkDescription) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkDescription.Descriptor instead.
func (LinkDescription) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{88}
}

type LyricsType int32

const (
	LyricsType_LYRICS_TYPE_UNSPECIFIED     LyricsType = 0
	LyricsType_LYRICS_TYPE_CHORUS          LyricsType = 1
	LyricsType_LYRICS_TYPE_CHORUSANDVERSE  LyricsType = 2
	LyricsType_LYRICS_TYPE_COMPLETE        LyricsType = 3
	LyricsType_LYRICS_TYPE_FIRSTLINEOFTEXT LyricsType = 4
	LyricsType_LYRICS_TYPE_HOOK            LyricsType = 5
	LyricsType_LYRICS_TYPE_JAZZSCATS       LyricsType = 6
	LyricsType_LYRICS_TYPE_STANZA          LyricsType = 7
	LyricsType_LYRICS_TYPE_UNKNOWN         LyricsType = 8
	LyricsType_LYRICS_TYPE_USERDEFINED     LyricsType = 9
	LyricsType_LYRICS_TYPE_VERSE           LyricsType = 10
)

// Enum value maps for LyricsType.
var (
	LyricsType_name = map[int32]string{
		0:  "LYRICS_TYPE_UNSPECIFIED",
		1:  "LYRICS_TYPE_CHORUS",
		2:  "LYRICS_TYPE_CHORUSANDVERSE",
		3:  "LYRICS_TYPE_COMPLETE",
		4:  "LYRICS_TYPE_FIRSTLINEOFTEXT",
		5:  "LYRICS_TYPE_HOOK",
		6:  "LYRICS_TYPE_JAZZSCATS",
		7:  "LYRICS_TYPE_STANZA",
		8:  "LYRICS_TYPE_UNKNOWN",
		9:  "LYRICS_TYPE_USERDEFINED",
		10: "LYRICS_TYPE_VERSE",
	}
	LyricsType_value = map[string]int32{
		"LYRICS_TYPE_UNSPECIFIED":     0,
		"LYRICS_TYPE_CHORUS":          1,
		"LYRICS_TYPE_CHORUSANDVERSE":  2,
		"LYRICS_TYPE_COMPLETE":        3,
		"LYRICS_TYPE_FIRSTLINEOFTEXT": 4,
		"LYRICS_TYPE_HOOK":            5,
		"LYRICS_TYPE_JAZZSCATS":       6,
		"LYRICS_TYPE_STANZA":          7,
		"LYRICS_TYPE_UNKNOWN":         8,
		"LYRICS_TYPE_USERDEFINED":     9,
		"LYRICS_TYPE_VERSE":           10,
	}
)

func (x LyricsType) Enum() *LyricsType {
	p := new(LyricsType)
	*p = x
	return p
}

func (x LyricsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LyricsType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[89].Descriptor()
}

func (LyricsType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[89]
}

func (x LyricsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LyricsType.Descriptor instead.
func (LyricsType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{89}
}

type MeasurementType int32

const (
	MeasurementType_MEASUREMENT_TYPE_UNSPECIFIED        MeasurementType = 0
	MeasurementType_MEASUREMENT_TYPE_BOTHAUDIOANDVIDEO  MeasurementType = 1
	MeasurementType_MEASUREMENT_TYPE_EITHERAUDIOORVIDEO MeasurementType = 2
	MeasurementType_MEASUREMENT_TYPE_AUDIO              MeasurementType = 3
	MeasurementType_MEASUREMENT_TYPE_VIDEO              MeasurementType = 4
)

// Enum value maps for MeasurementType.
var (
	MeasurementType_name = map[int32]string{
		0: "MEASUREMENT_TYPE_UNSPECIFIED",
		1: "MEASUREMENT_TYPE_BOTHAUDIOANDVIDEO",
		2: "MEASUREMENT_TYPE_EITHERAUDIOORVIDEO",
		3: "MEASUREMENT_TYPE_AUDIO",
		4: "MEASUREMENT_TYPE_VIDEO",
	}
	MeasurementType_value = map[string]int32{
		"MEASUREMENT_TYPE_UNSPECIFIED":        0,
		"MEASUREMENT_TYPE_BOTHAUDIOANDVIDEO":  1,
		"MEASUREMENT_TYPE_EITHERAUDIOORVIDEO": 2,
		"MEASUREMENT_TYPE_AUDIO":              3,
		"MEASUREMENT_TYPE_VIDEO":              4,
	}
)

func (x MeasurementType) Enum() *MeasurementType {
	p := new(MeasurementType)
	*p = x
	return p
}

func (x MeasurementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasurementType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[90].Descriptor()
}

func (MeasurementType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[90]
}

func (x MeasurementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasurementType.Descriptor instead.
func (MeasurementType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{90}
}

type MembershipType int32

const (
	MembershipType_MEMBERSHIP_TYPE_UNSPECIFIED     MembershipType = 0
	MembershipType_MEMBERSHIP_TYPE_NATIONALMEMBER  MembershipType = 1
	MembershipType_MEMBERSHIP_TYPE_REGIONALMEMBER  MembershipType = 2
	MembershipType_MEMBERSHIP_TYPE_WORLDWIDEMEMBER MembershipType = 3
)

// Enum value maps for MembershipType.
var (
	MembershipType_name = map[int32]string{
		0: "MEMBERSHIP_TYPE_UNSPECIFIED",
		1: "MEMBERSHIP_TYPE_NATIONALMEMBER",
		2: "MEMBERSHIP_TYPE_REGIONALMEMBER",
		3: "MEMBERSHIP_TYPE_WORLDWIDEMEMBER",
	}
	MembershipType_value = map[string]int32{
		"MEMBERSHIP_TYPE_UNSPECIFIED":     0,
		"MEMBERSHIP_TYPE_NATIONALMEMBER":  1,
		"MEMBERSHIP_TYPE_REGIONALMEMBER":  2,
		"MEMBERSHIP_TYPE_WORLDWIDEMEMBER": 3,
	}
)

func (x MembershipType) Enum() *MembershipType {
	p := new(MembershipType)
	*p = x
	return p
}

func (x MembershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[91].Descriptor()
}

func (MembershipType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[91]
}

func (x MembershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipType.Descriptor instead.
func (MembershipType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{91}
}

type MessageActionType int32

const (
	MessageActionType_MESSAGE_ACTION_TYPE_UNSPECIFIED          MessageActionType = 0
	MessageActionType_MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY  MessageActionType = 1
	MessageActionType_MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY MessageActionType = 2
	MessageActionType_MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY   MessageActionType = 3
	MessageActionType_MESSAGE_ACTION_TYPE_REDELIVERY           MessageActionType = 4
	MessageActionType_MESSAGE_ACTION_TYPE_TAKEDOWN             MessageActionType = 5
	MessageActionType_MESSAGE_ACTION_TYPE_USERDEFINED          MessageActionType = 6
)

// Enum value maps for MessageActionType.
var (
	MessageActionType_name = map[int32]string{
		0: "MESSAGE_ACTION_TYPE_UNSPECIFIED",
		1: "MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY",
		2: "MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY",
		3: "MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY",
		4: "MESSAGE_ACTION_TYPE_REDELIVERY",
		5: "MESSAGE_ACTION_TYPE_TAKEDOWN",
		6: "MESSAGE_ACTION_TYPE_USERDEFINED",
	}
	MessageActionType_value = map[string]int32{
		"MESSAGE_ACTION_TYPE_UNSPECIFIED":          0,
		"MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY":  1,
		"MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY": 2,
		"MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY":   3,
		"MESSAGE_ACTION_TYPE_REDELIVERY":           4,
		"MESSAGE_ACTION_TYPE_TAKEDOWN":             5,
		"MESSAGE_ACTION_TYPE_USERDEFINED":          6,
	}
)

func (x MessageActionType) Enum() *MessageActionType {
	p := new(MessageActionType)
	*p = x
	return p
}

func (x MessageActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[92].Descriptor()
}

func (MessageActionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[92]
}

func (x MessageActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageActionType.Descriptor instead.
func (MessageActionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{92}
}

type MessageControlType int32

const (
	MessageControlType_MESSAGE_CONTROL_TYPE_UNSPECIFIED MessageControlType = 0
	MessageControlType_MESSAGE_CONTROL_TYPE_LIVEMESSAGE MessageControlType = 1
	MessageControlType_MESSAGE_CONTROL_TYPE_TESTMESSAGE MessageControlType = 2
)

// Enum value maps for MessageControlType.
var (
	MessageControlType_name = map[int32]string{
		0: "MESSAGE_CONTROL_TYPE_UNSPECIFIED",
		1: "MESSAGE_CONTROL_TYPE_LIVEMESSAGE",
		2: "MESSAGE_CONTROL_TYPE_TESTMESSAGE",
	}
	MessageControlType_value = map[string]int32{
		"MESSAGE_CONTROL_TYPE_UNSPECIFIED": 0,
		"MESSAGE_CONTROL_TYPE_LIVEMESSAGE": 1,
		"MESSAGE_CONTROL_TYPE_TESTMESSAGE": 2,
	}
)

func (x MessageControlType) Enum() *MessageControlType {
	p := new(MessageControlType)
	*p = x
	return p
}

func (x MessageControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[93].Descriptor()
}

func (MessageControlType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[93]
}

func (x MessageControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageControlType.Descriptor instead.
func (MessageControlType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{93}
}

type MessagePurpose int32

const (
	MessagePurpose_MESSAGE_PURPOSE_UNSPECIFIED     MessagePurpose = 0
	MessagePurpose_MESSAGE_PURPOSE_LICENSE         MessagePurpose = 1
	MessagePurpose_MESSAGE_PURPOSE_NDMALICENSE     MessagePurpose = 2
	MessagePurpose_MESSAGE_PURPOSE_ACKNOWLEDGEMENT MessagePurpose = 3
)

// Enum value maps for MessagePurpose.
var (
	MessagePurpose_name = map[int32]string{
		0: "MESSAGE_PURPOSE_UNSPECIFIED",
		1: "MESSAGE_PURPOSE_LICENSE",
		2: "MESSAGE_PURPOSE_NDMALICENSE",
		3: "MESSAGE_PURPOSE_ACKNOWLEDGEMENT",
	}
	MessagePurpose_value = map[string]int32{
		"MESSAGE_PURPOSE_UNSPECIFIED":     0,
		"MESSAGE_PURPOSE_LICENSE":         1,
		"MESSAGE_PURPOSE_NDMALICENSE":     2,
		"MESSAGE_PURPOSE_ACKNOWLEDGEMENT": 3,
	}
)

func (x MessagePurpose) Enum() *MessagePurpose {
	p := new(MessagePurpose)
	*p = x
	return p
}

func (x MessagePurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagePurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[94].Descriptor()
}

func (MessagePurpose) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[94]
}

func (x MessagePurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagePurpose.Descriptor instead.
func (MessagePurpose) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{94}
}

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED                         MessageType = 0
	MessageType_MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE MessageType = 1
	MessageType_MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE      MessageType = 2
	MessageType_MESSAGE_TYPE_LICENSEREQUESTMESSAGE               MessageType = 3
	MessageType_MESSAGE_TYPE_LICENSEMESSAGE                      MessageType = 4
	MessageType_MESSAGE_TYPE_LICENSEREVOCATIONMESSAGE            MessageType = 5
	MessageType_MESSAGE_TYPE_LODMESSAGE                          MessageType = 6
	MessageType_MESSAGE_TYPE_LODCONFIRMATIONMESSAGE              MessageType = 7
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE",
		2: "MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE",
		3: "MESSAGE_TYPE_LICENSEREQUESTMESSAGE",
		4: "MESSAGE_TYPE_LICENSEMESSAGE",
		5: "MESSAGE_TYPE_LICENSEREVOCATIONMESSAGE",
		6: "MESSAGE_TYPE_LODMESSAGE",
		7: "MESSAGE_TYPE_LODCONFIRMATIONMESSAGE",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED":                         0,
		"MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE": 1,
		"MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE":      2,
		"MESSAGE_TYPE_LICENSEREQUESTMESSAGE":               3,
		"MESSAGE_TYPE_LICENSEMESSAGE":                      4,
		"MESSAGE_TYPE_LICENSEREVOCATIONMESSAGE":            5,
		"MESSAGE_TYPE_LODMESSAGE":                          6,
		"MESSAGE_TYPE_LODCONFIRMATIONMESSAGE":              7,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[95].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[95]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{95}
}

type MetadataSourceType int32

const (
	MetadataSourceType_METADATA_SOURCE_TYPE_UNSPECIFIED      MetadataSourceType = 0
	MetadataSourceType_METADATA_SOURCE_TYPE_JOURNALIST       MetadataSourceType = 1
	MetadataSourceType_METADATA_SOURCE_TYPE_METADATAPROVIDER MetadataSourceType = 2
	MetadataSourceType_METADATA_SOURCE_TYPE_RIGHTSCONTROLLER MetadataSourceType = 3
	MetadataSourceType_METADATA_SOURCE_TYPE_USERDEFINED      MetadataSourceType = 4
)

// Enum value maps for MetadataSourceType.
var (
	MetadataSourceType_name = map[int32]string{
		0: "METADATA_SOURCE_TYPE_UNSPECIFIED",
		1: "METADATA_SOURCE_TYPE_JOURNALIST",
		2: "METADATA_SOURCE_TYPE_METADATAPROVIDER",
		3: "METADATA_SOURCE_TYPE_RIGHTSCONTROLLER",
		4: "METADATA_SOURCE_TYPE_USERDEFINED",
	}
	MetadataSourceType_value = map[string]int32{
		"METADATA_SOURCE_TYPE_UNSPECIFIED":      0,
		"METADATA_SOURCE_TYPE_JOURNALIST":       1,
		"METADATA_SOURCE_TYPE_METADATAPROVIDER": 2,
		"METADATA_SOURCE_TYPE_RIGHTSCONTROLLER": 3,
		"METADATA_SOURCE_TYPE_USERDEFINED":      4,
	}
)

func (x MetadataSourceType) Enum() *MetadataSourceType {
	p := new(MetadataSourceType)
	*p = x
	return p
}

func (x MetadataSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[96].Descriptor()
}

func (MetadataSourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[96]
}

func (x MetadataSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataSourceType.Descriptor instead.
func (MetadataSourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{96}
}

type MissingLinkReason int32

const (
	MissingLinkReason_MISSING_LINK_REASON_UNSPECIFIED  MissingLinkReason = 0
	MissingLinkReason_MISSING_LINK_REASON_NOLINKFOUND  MissingLinkReason = 1
	MissingLinkReason_MISSING_LINK_REASON_NOMATCHFOUND MissingLinkReason = 2
	MissingLinkReason_MISSING_LINK_REASON_USERDEFINED  MissingLinkReason = 3
)

// Enum value maps for MissingLinkReason.
var (
	MissingLinkReason_name = map[int32]string{
		0: "MISSING_LINK_REASON_UNSPECIFIED",
		1: "MISSING_LINK_REASON_NOLINKFOUND",
		2: "MISSING_LINK_REASON_NOMATCHFOUND",
		3: "MISSING_LINK_REASON_USERDEFINED",
	}
	MissingLinkReason_value = map[string]int32{
		"MISSING_LINK_REASON_UNSPECIFIED":  0,
		"MISSING_LINK_REASON_NOLINKFOUND":  1,
		"MISSING_LINK_REASON_NOMATCHFOUND": 2,
		"MISSING_LINK_REASON_USERDEFINED":  3,
	}
)

func (x MissingLinkReason) Enum() *MissingLinkReason {
	p := new(MissingLinkReason)
	*p = x
	return p
}

func (x MissingLinkReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissingLinkReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[97].Descriptor()
}

func (MissingLinkReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[97]
}

func (x MissingLinkReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MissingLinkReason.Descriptor instead.
func (MissingLinkReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{97}
}

type Mode int32

const (
	Mode_MODE_UNSPECIFIED Mode = 0
	Mode_MODE_USERDEFINED Mode = 1
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_USERDEFINED",
	}
	Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_USERDEFINED": 1,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[98].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[98]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{98}
}

type Mood int32

const (
	Mood_MOOD_UNSPECIFIED  Mood = 0
	Mood_MOOD_ANGRY        Mood = 1
	Mood_MOOD_ANTICIPATION Mood = 2
	Mood_MOOD_CHILL        Mood = 3
	Mood_MOOD_CONFIDENT    Mood = 4
	Mood_MOOD_DARK         Mood = 5
	Mood_MOOD_DISGUST      Mood = 6
	Mood_MOOD_DRAMATIC     Mood = 7
	Mood_MOOD_EMPOWERED    Mood = 8
	Mood_MOOD_ENERGIZED    Mood = 9
	Mood_MOOD_EVIL         Mood = 10
	Mood_MOOD_FEELINGDOWN  Mood = 11
	Mood_MOOD_FEELINGGOOD  Mood = 12
	Mood_MOOD_FREE         Mood = 13
	Mood_MOOD_HAPPY        Mood = 14
	Mood_MOOD_HUNGOVER     Mood = 15
	Mood_MOOD_INSPIRING    Mood = 16
	Mood_MOOD_LOWKEY       Mood = 17
	Mood_MOOD_MELLOW       Mood = 18
	Mood_MOOD_MOTIVATED    Mood = 19
	Mood_MOOD_PEACEFUL     Mood = 20
	Mood_MOOD_QUIET        Mood = 21
	Mood_MOOD_RAINYDAY     Mood = 22
	Mood_MOOD_ROMANTIC     Mood = 23
	Mood_MOOD_SAD          Mood = 24
	Mood_MOOD_SOULFUL      Mood = 25
	Mood_MOOD_SURPRISE     Mood = 26
	Mood_MOOD_SWAGGER      Mood = 27
	Mood_MOOD_USERDEFINED  Mood = 28
)

// Enum value maps for Mood.
var (
	Mood_name = map[int32]string{
		0:  "MOOD_UNSPECIFIED",
		1:  "MOOD_ANGRY",
		2:  "MOOD_ANTICIPATION",
		3:  "MOOD_CHILL",
		4:  "MOOD_CONFIDENT",
		5:  "MOOD_DARK",
		6:  "MOOD_DISGUST",
		7:  "MOOD_DRAMATIC",
		8:  "MOOD_EMPOWERED",
		9:  "MOOD_ENERGIZED",
		10: "MOOD_EVIL",
		11: "MOOD_FEELINGDOWN",
		12: "MOOD_FEELINGGOOD",
		13: "MOOD_FREE",
		14: "MOOD_HAPPY",
		15: "MOOD_HUNGOVER",
		16: "MOOD_INSPIRING",
		17: "MOOD_LOWKEY",
		18: "MOOD_MELLOW",
		19: "MOOD_MOTIVATED",
		20: "MOOD_PEACEFUL",
		21: "MOOD_QUIET",
		22: "MOOD_RAINYDAY",
		23: "MOOD_ROMANTIC",
		24: "MOOD_SAD",
		25: "MOOD_SOULFUL",
		26: "MOOD_SURPRISE",
		27: "MOOD_SWAGGER",
		28: "MOOD_USERDEFINED",
	}
	Mood_value = map[string]int32{
		"MOOD_UNSPECIFIED":  0,
		"MOOD_ANGRY":        1,
		"MOOD_ANTICIPATION": 2,
		"MOOD_CHILL":        3,
		"MOOD_CONFIDENT":    4,
		"MOOD_DARK":         5,
		"MOOD_DISGUST":      6,
		"MOOD_DRAMATIC":     7,
		"MOOD_EMPOWERED":    8,
		"MOOD_ENERGIZED":    9,
		"MOOD_EVIL":         10,
		"MOOD_FEELINGDOWN":  11,
		"MOOD_FEELINGGOOD":  12,
		"MOOD_FREE":         13,
		"MOOD_HAPPY":        14,
		"MOOD_HUNGOVER":     15,
		"MOOD_INSPIRING":    16,
		"MOOD_LOWKEY":       17,
		"MOOD_MELLOW":       18,
		"MOOD_MOTIVATED":    19,
		"MOOD_PEACEFUL":     20,
		"MOOD_QUIET":        21,
		"MOOD_RAINYDAY":     22,
		"MOOD_ROMANTIC":     23,
		"MOOD_SAD":          24,
		"MOOD_SOULFUL":      25,
		"MOOD_SURPRISE":     26,
		"MOOD_SWAGGER":      27,
		"MOOD_USERDEFINED":  28,
	}
)

func (x Mood) Enum() *Mood {
	p := new(Mood)
	*p = x
	return p
}

func (x Mood) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mood) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[99].Descriptor()
}

func (Mood) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[99]
}

func (x Mood) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mood.Descriptor instead.
func (Mood) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{99}
}

type MoodOrThemeType int32

const (
	MoodOrThemeType_MOOD_OR_THEME_TYPE_UNSPECIFIED     MoodOrThemeType = 0
	MoodOrThemeType_MOOD_OR_THEME_TYPE_LYRICS          MoodOrThemeType = 1
	MoodOrThemeType_MOOD_OR_THEME_TYPE_LYRICSANDMELODY MoodOrThemeType = 2
	MoodOrThemeType_MOOD_OR_THEME_TYPE_MELODY          MoodOrThemeType = 3
)

// Enum value maps for MoodOrThemeType.
var (
	MoodOrThemeType_name = map[int32]string{
		0: "MOOD_OR_THEME_TYPE_UNSPECIFIED",
		1: "MOOD_OR_THEME_TYPE_LYRICS",
		2: "MOOD_OR_THEME_TYPE_LYRICSANDMELODY",
		3: "MOOD_OR_THEME_TYPE_MELODY",
	}
	MoodOrThemeType_value = map[string]int32{
		"MOOD_OR_THEME_TYPE_UNSPECIFIED":     0,
		"MOOD_OR_THEME_TYPE_LYRICS":          1,
		"MOOD_OR_THEME_TYPE_LYRICSANDMELODY": 2,
		"MOOD_OR_THEME_TYPE_MELODY":          3,
	}
)

func (x MoodOrThemeType) Enum() *MoodOrThemeType {
	p := new(MoodOrThemeType)
	*p = x
	return p
}

func (x MoodOrThemeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoodOrThemeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[100].Descriptor()
}

func (MoodOrThemeType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[100]
}

func (x MoodOrThemeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoodOrThemeType.Descriptor instead.
func (MoodOrThemeType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{100}
}

type MusicalWorkContributorRole int32

const (
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED                  MusicalWorkContributorRole = 0
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER                      MusicalWorkContributorRole = 1
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT                    MusicalWorkContributorRole = 2
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER                     MusicalWorkContributorRole = 3
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR                       MusicalWorkContributorRole = 4
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS           MusicalWorkContributorRole = 5
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD            MusicalWorkContributorRole = 6
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER                     MusicalWorkContributorRole = 7
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER                     MusicalWorkContributorRole = 8
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST             MusicalWorkContributorRole = 9
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR                    MusicalWorkContributorRole = 10
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR                      MusicalWorkContributorRole = 11
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR               MusicalWorkContributorRole = 12
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT                   MusicalWorkContributorRole = 13
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER                     MusicalWorkContributorRole = 14
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER                       MusicalWorkContributorRole = 15
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST                   MusicalWorkContributorRole = 16
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT           MusicalWorkContributorRole = 17
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST                   MusicalWorkContributorRole = 18
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER                 MusicalWorkContributorRole = 19
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST                     MusicalWorkContributorRole = 20
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER                MusicalWorkContributorRole = 21
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR               MusicalWorkContributorRole = 22
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER                   MusicalWorkContributorRole = 23
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT                   MusicalWorkContributorRole = 24
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER                     MusicalWorkContributorRole = 25
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER                     MusicalWorkContributorRole = 26
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR                   MusicalWorkContributorRole = 27
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR             MusicalWorkContributorRole = 28
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR                     MusicalWorkContributorRole = 29
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER                  MusicalWorkContributorRole = 30
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST                  MusicalWorkContributorRole = 31
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR                   MusicalWorkContributorRole = 32
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER                   MusicalWorkContributorRole = 33
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER                 MusicalWorkContributorRole = 34
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL MusicalWorkContributorRole = 35
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER                MusicalWorkContributorRole = 36
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT            MusicalWorkContributorRole = 37
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER              MusicalWorkContributorRole = 38
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER               MusicalWorkContributorRole = 39
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER           MusicalWorkContributorRole = 40
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER            MusicalWorkContributorRole = 41
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER          MusicalWorkContributorRole = 42
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER                 MusicalWorkContributorRole = 43
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER         MusicalWorkContributorRole = 44
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN                      MusicalWorkContributorRole = 45
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED                  MusicalWorkContributorRole = 46
)

// Enum value maps for MusicalWorkContributorRole.
var (
	MusicalWorkContributorRole_name = map[int32]string{
		0:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER",
		2:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT",
		3:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER",
		4:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR",
		5:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS",
		6:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD",
		7:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER",
		8:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER",
		9:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST",
		10: "MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR",
		11: "MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR",
		12: "MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR",
		13: "MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT",
		14: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER",
		15: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER",
		16: "MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST",
		17: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT",
		18: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST",
		19: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER",
		20: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST",
		21: "MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER",
		22: "MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR",
		23: "MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER",
		24: "MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT",
		25: "MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER",
		26: "MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER",
		27: "MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR",
		28: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR",
		29: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR",
		30: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER",
		31: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST",
		32: "MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR",
		33: "MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER",
		34: "MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER",
		35: "MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL",
		36: "MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER",
		37: "MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT",
		38: "MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER",
		39: "MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER",
		40: "MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER",
		41: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER",
		42: "MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER",
		43: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER",
		44: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER",
		45: "MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN",
		46: "MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED",
	}
	MusicalWorkContributorRole_value = map[string]int32{
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED":                  0,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER":                      1,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT":                    2,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER":                     3,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR":                       4,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS":           5,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD":            6,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER":                     7,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER":                     8,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST":             9,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR":                    10,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR":                      11,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR":               12,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT":                   13,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER":                     14,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER":                       15,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST":                   16,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT":           17,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST":                   18,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER":                 19,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST":                     20,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER":                21,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR":               22,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER":                   23,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT":                   24,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER":                     25,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER":                     26,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR":                   27,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR":             28,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR":                     29,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER":                  30,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST":                  31,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR":                   32,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER":                   33,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER":                 34,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL": 35,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER":                36,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT":            37,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER":              38,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER":               39,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER":           40,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER":            41,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER":          42,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER":                 43,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER":         44,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN":                      45,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED":                  46,
	}
)

func (x MusicalWorkContributorRole) Enum() *MusicalWorkContributorRole {
	p := new(MusicalWorkContributorRole)
	*p = x
	return p
}

func (x MusicalWorkContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MusicalWorkContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[101].Descriptor()
}

func (MusicalWorkContributorRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[101]
}

func (x MusicalWorkContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MusicalWorkContributorRole.Descriptor instead.
func (MusicalWorkContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{101}
}

type MusicalWorkType int32

const (
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIED                   MusicalWorkType = 0
	MusicalWorkType_MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE     MusicalWorkType = 1
	MusicalWorkType_MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK       MusicalWorkType = 2
	MusicalWorkType_MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS          MusicalWorkType = 3
	MusicalWorkType_MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC          MusicalWorkType = 4
	MusicalWorkType_MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK          MusicalWorkType = 5
	MusicalWorkType_MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK          MusicalWorkType = 6
	MusicalWorkType_MUSICAL_WORK_TYPE_LYRICREMOVAL                  MusicalWorkType = 7
	MusicalWorkType_MUSICAL_WORK_TYPE_LYRICREPLACEMENT              MusicalWorkType = 8
	MusicalWorkType_MUSICAL_WORK_TYPE_LYRICTRANSLATION              MusicalWorkType = 9
	MusicalWorkType_MUSICAL_WORK_TYPE_MASHUP                        MusicalWorkType = 10
	MusicalWorkType_MUSICAL_WORK_TYPE_MEDLEY                        MusicalWorkType = 11
	MusicalWorkType_MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK      MusicalWorkType = 12
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT           MusicalWorkType = 13
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES        MusicalWorkType = 14
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICARRANGEMENT              MusicalWorkType = 15
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT        MusicalWorkType = 16
	MusicalWorkType_MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT     MusicalWorkType = 17
	MusicalWorkType_MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION       MusicalWorkType = 18
	MusicalWorkType_MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK           MusicalWorkType = 19
	MusicalWorkType_MUSICAL_WORK_TYPE_POTPOURRI                     MusicalWorkType = 20
	MusicalWorkType_MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK    MusicalWorkType = 21
	MusicalWorkType_MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK           MusicalWorkType = 22
	MusicalWorkType_MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK         MusicalWorkType = 23
	MusicalWorkType_MUSICAL_WORK_TYPE_TVPRODUCTIONWORK              MusicalWorkType = 24
	MusicalWorkType_MUSICAL_WORK_TYPE_UNKNOWN                       MusicalWorkType = 25
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT        MusicalWorkType = 26
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT MusicalWorkType = 27
	MusicalWorkType_MUSICAL_WORK_TYPE_USERDEFINED                   MusicalWorkType = 28
	MusicalWorkType_MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK           MusicalWorkType = 29
)

// Enum value maps for MusicalWorkType.
var (
	MusicalWorkType_name = map[int32]string{
		0:  "MUSICAL_WORK_TYPE_UNSPECIFIED",
		1:  "MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE",
		2:  "MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK",
		3:  "MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS",
		4:  "MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC",
		5:  "MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK",
		6:  "MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK",
		7:  "MUSICAL_WORK_TYPE_LYRICREMOVAL",
		8:  "MUSICAL_WORK_TYPE_LYRICREPLACEMENT",
		9:  "MUSICAL_WORK_TYPE_LYRICTRANSLATION",
		10: "MUSICAL_WORK_TYPE_MASHUP",
		11: "MUSICAL_WORK_TYPE_MEDLEY",
		12: "MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK",
		13: "MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT",
		14: "MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES",
		15: "MUSICAL_WORK_TYPE_MUSICARRANGEMENT",
		16: "MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT",
		17: "MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT",
		18: "MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION",
		19: "MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK",
		20: "MUSICAL_WORK_TYPE_POTPOURRI",
		21: "MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK",
		22: "MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK",
		23: "MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK",
		24: "MUSICAL_WORK_TYPE_TVPRODUCTIONWORK",
		25: "MUSICAL_WORK_TYPE_UNKNOWN",
		26: "MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT",
		27: "MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT",
		28: "MUSICAL_WORK_TYPE_USERDEFINED",
		29: "MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK",
	}
	MusicalWorkType_value = map[string]int32{
		"MUSICAL_WORK_TYPE_UNSPECIFIED":                   0,
		"MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE":     1,
		"MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK":       2,
		"MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS":          3,
		"MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC":          4,
		"MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK":          5,
		"MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK":          6,
		"MUSICAL_WORK_TYPE_LYRICREMOVAL":                  7,
		"MUSICAL_WORK_TYPE_LYRICREPLACEMENT":              8,
		"MUSICAL_WORK_TYPE_LYRICTRANSLATION":              9,
		"MUSICAL_WORK_TYPE_MASHUP":                        10,
		"MUSICAL_WORK_TYPE_MEDLEY":                        11,
		"MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK":      12,
		"MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT":           13,
		"MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES":        14,
		"MUSICAL_WORK_TYPE_MUSICARRANGEMENT":              15,
		"MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT":        16,
		"MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT":     17,
		"MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION":       18,
		"MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK":           19,
		"MUSICAL_WORK_TYPE_POTPOURRI":                     20,
		"MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK":    21,
		"MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK":           22,
		"MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK":         23,
		"MUSICAL_WORK_TYPE_TVPRODUCTIONWORK":              24,
		"MUSICAL_WORK_TYPE_UNKNOWN":                       25,
		"MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT":        26,
		"MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT": 27,
		"MUSICAL_WORK_TYPE_USERDEFINED":                   28,
		"MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK":           29,
	}
)

func (x MusicalWorkType) Enum() *MusicalWorkType {
	p := new(MusicalWorkType)
	*p = x
	return p
}

func (x MusicalWorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MusicalWorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[102].Descriptor()
}

func (MusicalWorkType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[102]
}

func (x MusicalWorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MusicalWorkType.Descriptor instead.
func (MusicalWorkType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{102}
}

type MwnlFileStatus int32

const (
	MwnlFileStatus_MWNL_FILE_STATUS_UNSPECIFIED MwnlFileStatus = 0
	MwnlFileStatus_MWNL_FILE_STATUS_FILEOK      MwnlFileStatus = 1
	MwnlFileStatus_MWNL_FILE_STATUS_USERDEFINED MwnlFileStatus = 2
)

// Enum value maps for MwnlFileStatus.
var (
	MwnlFileStatus_name = map[int32]string{
		0: "MWNL_FILE_STATUS_UNSPECIFIED",
		1: "MWNL_FILE_STATUS_FILEOK",
		2: "MWNL_FILE_STATUS_USERDEFINED",
	}
	MwnlFileStatus_value = map[string]int32{
		"MWNL_FILE_STATUS_UNSPECIFIED": 0,
		"MWNL_FILE_STATUS_FILEOK":      1,
		"MWNL_FILE_STATUS_USERDEFINED": 2,
	}
)

func (x MwnlFileStatus) Enum() *MwnlFileStatus {
	p := new(MwnlFileStatus)
	*p = x
	return p
}

func (x MwnlFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MwnlFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[103].Descriptor()
}

func (MwnlFileStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[103]
}

func (x MwnlFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MwnlFileStatus.Descriptor instead.
func (MwnlFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{103}
}

type MwnlProposedActionType int32

const (
	MwnlProposedActionType_MWNL_PROPOSED_ACTION_TYPE_UNSPECIFIED MwnlProposedActionType = 0
	MwnlProposedActionType_MWNL_PROPOSED_ACTION_TYPE_RESUBMIT    MwnlProposedActionType = 1
	MwnlProposedActionType_MWNL_PROPOSED_ACTION_TYPE_USERDEFINED MwnlProposedActionType = 2
)

// Enum value maps for MwnlProposedActionType.
var (
	MwnlProposedActionType_name = map[int32]string{
		0: "MWNL_PROPOSED_ACTION_TYPE_UNSPECIFIED",
		1: "MWNL_PROPOSED_ACTION_TYPE_RESUBMIT",
		2: "MWNL_PROPOSED_ACTION_TYPE_USERDEFINED",
	}
	MwnlProposedActionType_value = map[string]int32{
		"MWNL_PROPOSED_ACTION_TYPE_UNSPECIFIED": 0,
		"MWNL_PROPOSED_ACTION_TYPE_RESUBMIT":    1,
		"MWNL_PROPOSED_ACTION_TYPE_USERDEFINED": 2,
	}
)

func (x MwnlProposedActionType) Enum() *MwnlProposedActionType {
	p := new(MwnlProposedActionType)
	*p = x
	return p
}

func (x MwnlProposedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MwnlProposedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[104].Descriptor()
}

func (MwnlProposedActionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[104]
}

func (x MwnlProposedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MwnlProposedActionType.Descriptor instead.
func (MwnlProposedActionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{104}
}

type NewStudioRole int32

const (
	NewStudioRole_NEW_STUDIO_ROLE_UNSPECIFIED                        NewStudioRole = 0
	NewStudioRole_NEW_STUDIO_ROLE_ADDITIONALENGINEER                 NewStudioRole = 1
	NewStudioRole_NEW_STUDIO_ROLE_ANIMALTRAINER                      NewStudioRole = 2
	NewStudioRole_NEW_STUDIO_ROLE_ANIMATOR                           NewStudioRole = 3
	NewStudioRole_NEW_STUDIO_ROLE_ANNOTATOR                          NewStudioRole = 4
	NewStudioRole_NEW_STUDIO_ROLE_AANDRCOORDINATOR                   NewStudioRole = 5
	NewStudioRole_NEW_STUDIO_ROLE_ARMOURER                           NewStudioRole = 6
	NewStudioRole_NEW_STUDIO_ROLE_ARTDIRECTOR                        NewStudioRole = 7
	NewStudioRole_NEW_STUDIO_ROLE_ARTISTBACKGROUNDVOCALENGINEER      NewStudioRole = 8
	NewStudioRole_NEW_STUDIO_ROLE_ARTISTVOCALENGINEER                NewStudioRole = 9
	NewStudioRole_NEW_STUDIO_ROLE_ARTISTVOCALSECONDENGINEER          NewStudioRole = 10
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTCAMERAOPERATOR            NewStudioRole = 11
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN   NewStudioRole = 12
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTDIRECTOR                  NewStudioRole = 13
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTPRODUCER                  NewStudioRole = 14
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTVISUALEDITOR              NewStudioRole = 15
	NewStudioRole_NEW_STUDIO_ROLE_AURALTRAINER                       NewStudioRole = 16
	NewStudioRole_NEW_STUDIO_ROLE_BINDER                             NewStudioRole = 17
	NewStudioRole_NEW_STUDIO_ROLE_BINDINGDESIGNER                    NewStudioRole = 18
	NewStudioRole_NEW_STUDIO_ROLE_BOOKDESIGNER                       NewStudioRole = 19
	NewStudioRole_NEW_STUDIO_ROLE_BOOKJACKDESIGNER                   NewStudioRole = 20
	NewStudioRole_NEW_STUDIO_ROLE_BOOKPLATEDESIGNER                  NewStudioRole = 21
	NewStudioRole_NEW_STUDIO_ROLE_BOOKPRODUCER                       NewStudioRole = 22
	NewStudioRole_NEW_STUDIO_ROLE_BROADCASTASSISTANT                 NewStudioRole = 23
	NewStudioRole_NEW_STUDIO_ROLE_BROADCASTJOURNALIST                NewStudioRole = 24
	NewStudioRole_NEW_STUDIO_ROLE_CAMERAOPERATOR                     NewStudioRole = 25
	NewStudioRole_NEW_STUDIO_ROLE_CARPENTER                          NewStudioRole = 26
	NewStudioRole_NEW_STUDIO_ROLE_CASTINGDIRECTOR                    NewStudioRole = 27
	NewStudioRole_NEW_STUDIO_ROLE_CENSOR                             NewStudioRole = 28
	NewStudioRole_NEW_STUDIO_ROLE_CHIEFLIGHTINGTECHNICIAN            NewStudioRole = 29
	NewStudioRole_NEW_STUDIO_ROLE_CHOREOGRAPHER                      NewStudioRole = 30
	NewStudioRole_NEW_STUDIO_ROLE_CLAPPERLOADER                      NewStudioRole = 31
	NewStudioRole_NEW_STUDIO_ROLE_COEXECUTIVEPRODUCER                NewStudioRole = 32
	NewStudioRole_NEW_STUDIO_ROLE_COMMISSIONINGBROADCASTER           NewStudioRole = 33
	NewStudioRole_NEW_STUDIO_ROLE_COMPILATIONPRODUCER                NewStudioRole = 34
	NewStudioRole_NEW_STUDIO_ROLE_CONSULTANT                         NewStudioRole = 35
	NewStudioRole_NEW_STUDIO_ROLE_CONTINUITYCHECKER                  NewStudioRole = 36
	NewStudioRole_NEW_STUDIO_ROLE_CONTRACTOR                         NewStudioRole = 37
	NewStudioRole_NEW_STUDIO_ROLE_COPRODUCER                         NewStudioRole = 38
	NewStudioRole_NEW_STUDIO_ROLE_CORRESPONDENT                      NewStudioRole = 39
	NewStudioRole_NEW_STUDIO_ROLE_COSTUMEDESIGNER                    NewStudioRole = 40
	NewStudioRole_NEW_STUDIO_ROLE_COVERDESIGNER                      NewStudioRole = 41
	NewStudioRole_NEW_STUDIO_ROLE_DESIGNER                           NewStudioRole = 42
	NewStudioRole_NEW_STUDIO_ROLE_DIALOGUECOACH                      NewStudioRole = 43
	NewStudioRole_NEW_STUDIO_ROLE_DIGITALAUDIOWORKSTATIONENGINEER    NewStudioRole = 44
	NewStudioRole_NEW_STUDIO_ROLE_DIGITALEDITINGENGINEER             NewStudioRole = 45
	NewStudioRole_NEW_STUDIO_ROLE_DIGITALEDITINGSECONDENGINEER       NewStudioRole = 46
	NewStudioRole_NEW_STUDIO_ROLE_DIRECTOR                           NewStudioRole = 47
	NewStudioRole_NEW_STUDIO_ROLE_DIRECTSTREAMDIGITALENGINEER        NewStudioRole = 48
	NewStudioRole_NEW_STUDIO_ROLE_DISTRIBUTIONCOMPANY                NewStudioRole = 49
	NewStudioRole_NEW_STUDIO_ROLE_DRESSER                            NewStudioRole = 50
	NewStudioRole_NEW_STUDIO_ROLE_DUBBER                             NewStudioRole = 51
	NewStudioRole_NEW_STUDIO_ROLE_EDITOR                             NewStudioRole = 52
	NewStudioRole_NEW_STUDIO_ROLE_EDITORINCHIEF                      NewStudioRole = 53
	NewStudioRole_NEW_STUDIO_ROLE_EDITOROFTHEDAY                     NewStudioRole = 54
	NewStudioRole_NEW_STUDIO_ROLE_ENCODER                            NewStudioRole = 55
	NewStudioRole_NEW_STUDIO_ROLE_ENGINEER                           NewStudioRole = 56
	NewStudioRole_NEW_STUDIO_ROLE_EXECUTIVEPRODUCER                  NewStudioRole = 57
	NewStudioRole_NEW_STUDIO_ROLE_EXPERT                             NewStudioRole = 58
	NewStudioRole_NEW_STUDIO_ROLE_FIGHTDIRECTOR                      NewStudioRole = 59
	NewStudioRole_NEW_STUDIO_ROLE_FILMDIRECTOR                       NewStudioRole = 60
	NewStudioRole_NEW_STUDIO_ROLE_FILMDISTRIBUTOR                    NewStudioRole = 61
	NewStudioRole_NEW_STUDIO_ROLE_FILMEDITOR                         NewStudioRole = 62
	NewStudioRole_NEW_STUDIO_ROLE_FILMPRODUCER                       NewStudioRole = 63
	NewStudioRole_NEW_STUDIO_ROLE_FILMSOUNDENGINEER                  NewStudioRole = 64
	NewStudioRole_NEW_STUDIO_ROLE_FLOORMANAGER                       NewStudioRole = 65
	NewStudioRole_NEW_STUDIO_ROLE_FOCUSPULLER                        NewStudioRole = 66
	NewStudioRole_NEW_STUDIO_ROLE_FOLEYARTIST                        NewStudioRole = 67
	NewStudioRole_NEW_STUDIO_ROLE_FOLEYEDITOR                        NewStudioRole = 68
	NewStudioRole_NEW_STUDIO_ROLE_FOLEYMIXER                         NewStudioRole = 69
	NewStudioRole_NEW_STUDIO_ROLE_GRAPHICASSISTANT                   NewStudioRole = 70
	NewStudioRole_NEW_STUDIO_ROLE_GRAPHICDESIGNER                    NewStudioRole = 71
	NewStudioRole_NEW_STUDIO_ROLE_GREENSMAN                          NewStudioRole = 72
	NewStudioRole_NEW_STUDIO_ROLE_GRIP                               NewStudioRole = 73
	NewStudioRole_NEW_STUDIO_ROLE_HAIRDRESSER                        NewStudioRole = 74
	NewStudioRole_NEW_STUDIO_ROLE_INITIALPRODUCER                    NewStudioRole = 75
	NewStudioRole_NEW_STUDIO_ROLE_KEYGRIP                            NewStudioRole = 76
	NewStudioRole_NEW_STUDIO_ROLE_LEADMAN                            NewStudioRole = 77
	NewStudioRole_NEW_STUDIO_ROLE_LIGHTINGDIRECTOR                   NewStudioRole = 78
	NewStudioRole_NEW_STUDIO_ROLE_LIGHTINGTECHNICIAN                 NewStudioRole = 79
	NewStudioRole_NEW_STUDIO_ROLE_LOCATIONMANAGER                    NewStudioRole = 80
	NewStudioRole_NEW_STUDIO_ROLE_MAKEUPARTIST                       NewStudioRole = 81
	NewStudioRole_NEW_STUDIO_ROLE_MANUFACTURER                       NewStudioRole = 82
	NewStudioRole_NEW_STUDIO_ROLE_MASTERINGENGINEER                  NewStudioRole = 83
	NewStudioRole_NEW_STUDIO_ROLE_MASTERINGSECONDENGINEER            NewStudioRole = 84
	NewStudioRole_NEW_STUDIO_ROLE_MATTEARTIST                        NewStudioRole = 85
	NewStudioRole_NEW_STUDIO_ROLE_MIXINGENGINEER                     NewStudioRole = 86
	NewStudioRole_NEW_STUDIO_ROLE_MIXINGSECONDENGINEER               NewStudioRole = 87
	NewStudioRole_NEW_STUDIO_ROLE_MUSICDIRECTOR                      NewStudioRole = 88
	NewStudioRole_NEW_STUDIO_ROLE_MUSICIAN                           NewStudioRole = 89
	NewStudioRole_NEW_STUDIO_ROLE_NEWSPRODUCER                       NewStudioRole = 90
	NewStudioRole_NEW_STUDIO_ROLE_OVERDUBENGINEER                    NewStudioRole = 91
	NewStudioRole_NEW_STUDIO_ROLE_OVERDUBSECONDENGINEER              NewStudioRole = 92
	NewStudioRole_NEW_STUDIO_ROLE_PHOTOGRAPHYDIRECTOR                NewStudioRole = 93
	NewStudioRole_NEW_STUDIO_ROLE_POSTPRODUCER                       NewStudioRole = 94
	NewStudioRole_NEW_STUDIO_ROLE_PROGRAMMINGENGINEER                NewStudioRole = 95
	NewStudioRole_NEW_STUDIO_ROLE_PREPRODUCTION                      NewStudioRole = 96
	NewStudioRole_NEW_STUDIO_ROLE_PREPRODUCTIONENGINEER              NewStudioRole = 97
	NewStudioRole_NEW_STUDIO_ROLE_PRODUCTIONCOMPANY                  NewStudioRole = 98
	NewStudioRole_NEW_STUDIO_ROLE_PRODUCTIONDEPARTMENT               NewStudioRole = 99
	NewStudioRole_NEW_STUDIO_ROLE_PRODUCTIONMANAGER                  NewStudioRole = 100
	NewStudioRole_NEW_STUDIO_ROLE_PRODUCTIONSECRETARY                NewStudioRole = 101
	NewStudioRole_NEW_STUDIO_ROLE_PROGRAMPRODUCER                    NewStudioRole = 102
	NewStudioRole_NEW_STUDIO_ROLE_PROGRAMPROPOSALWRITER              NewStudioRole = 103
	NewStudioRole_NEW_STUDIO_ROLE_PROPERTYMANAGER                    NewStudioRole = 104
	NewStudioRole_NEW_STUDIO_ROLE_PUBLISHINGDIRECTOR                 NewStudioRole = 105
	NewStudioRole_NEW_STUDIO_ROLE_PYROTECHNICIAN                     NewStudioRole = 106
	NewStudioRole_NEW_STUDIO_ROLE_RECORDINGENGINEER                  NewStudioRole = 107
	NewStudioRole_NEW_STUDIO_ROLE_RECORDINGSECONDENGINEER            NewStudioRole = 108
	NewStudioRole_NEW_STUDIO_ROLE_REDACTOR                           NewStudioRole = 109
	NewStudioRole_NEW_STUDIO_ROLE_REISSUEPRODUCER                    NewStudioRole = 110
	NewStudioRole_NEW_STUDIO_ROLE_REMIXINGENGINEER                   NewStudioRole = 111
	NewStudioRole_NEW_STUDIO_ROLE_REMIXINGSECONDENGINEER             NewStudioRole = 112
	NewStudioRole_NEW_STUDIO_ROLE_REPETITEUR                         NewStudioRole = 113
	NewStudioRole_NEW_STUDIO_ROLE_RESEARCHER                         NewStudioRole = 114
	NewStudioRole_NEW_STUDIO_ROLE_RESEARCHTEAMHEAD                   NewStudioRole = 115
	NewStudioRole_NEW_STUDIO_ROLE_RESEARCHTEAMMEMBER                 NewStudioRole = 116
	NewStudioRole_NEW_STUDIO_ROLE_RESTAGER                           NewStudioRole = 117
	NewStudioRole_NEW_STUDIO_ROLE_RIGGER                             NewStudioRole = 118
	NewStudioRole_NEW_STUDIO_ROLE_RIGHTSCONTROLLERONPRODUCT          NewStudioRole = 119
	NewStudioRole_NEW_STUDIO_ROLE_RUNNER                             NewStudioRole = 120
	NewStudioRole_NEW_STUDIO_ROLE_SCENICOPERATIVE                    NewStudioRole = 121
	NewStudioRole_NEW_STUDIO_ROLE_SCIENTIFICADVISOR                  NewStudioRole = 122
	NewStudioRole_NEW_STUDIO_ROLE_SCRIPTSUPERVISOR                   NewStudioRole = 123
	NewStudioRole_NEW_STUDIO_ROLE_SECONDASSISTANTCAMERAOPERATOR      NewStudioRole = 124
	NewStudioRole_NEW_STUDIO_ROLE_SECONDASSISTANTDIRECTOR            NewStudioRole = 125
	NewStudioRole_NEW_STUDIO_ROLE_SECONDENGINEER                     NewStudioRole = 126
	NewStudioRole_NEW_STUDIO_ROLE_SECONDUNITDIRECTOR                 NewStudioRole = 127
	NewStudioRole_NEW_STUDIO_ROLE_SERIESPRODUCER                     NewStudioRole = 128
	NewStudioRole_NEW_STUDIO_ROLE_SETDESIGNER                        NewStudioRole = 129
	NewStudioRole_NEW_STUDIO_ROLE_SETDRESSER                         NewStudioRole = 130
	NewStudioRole_NEW_STUDIO_ROLE_SOUNDDESIGNER                      NewStudioRole = 131
	NewStudioRole_NEW_STUDIO_ROLE_SOUNDMIXER                         NewStudioRole = 132
	NewStudioRole_NEW_STUDIO_ROLE_SOUNDRECORDIST                     NewStudioRole = 133
	NewStudioRole_NEW_STUDIO_ROLE_SPECIALEFFECTSTECHNICIAN           NewStudioRole = 134
	NewStudioRole_NEW_STUDIO_ROLE_SPONSOR                            NewStudioRole = 135
	NewStudioRole_NEW_STUDIO_ROLE_STAGEDIRECTOR                      NewStudioRole = 136
	NewStudioRole_NEW_STUDIO_ROLE_STRINGENGINEER                     NewStudioRole = 137
	NewStudioRole_NEW_STUDIO_ROLE_STRINGPRODUCER                     NewStudioRole = 138
	NewStudioRole_NEW_STUDIO_ROLE_STUDIOCONDUCTOR                    NewStudioRole = 139
	NewStudioRole_NEW_STUDIO_ROLE_STUDIOPERSONNEL                    NewStudioRole = 140
	NewStudioRole_NEW_STUDIO_ROLE_STUDIOPRODUCER                     NewStudioRole = 141
	NewStudioRole_NEW_STUDIO_ROLE_SUBTITLESEDITOR                    NewStudioRole = 142
	NewStudioRole_NEW_STUDIO_ROLE_SUBTITLESTRANSLATOR                NewStudioRole = 143
	NewStudioRole_NEW_STUDIO_ROLE_TAPEOPERATOR                       NewStudioRole = 144
	NewStudioRole_NEW_STUDIO_ROLE_TECHNICALDIRECTOR                  NewStudioRole = 145
	NewStudioRole_NEW_STUDIO_ROLE_TONMEISTER                         NewStudioRole = 146
	NewStudioRole_NEW_STUDIO_ROLE_TRACKINGENGINEER                   NewStudioRole = 147
	NewStudioRole_NEW_STUDIO_ROLE_TRACKINGSECONDENGINEER             NewStudioRole = 148
	NewStudioRole_NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESENGINEER       NewStudioRole = 149
	NewStudioRole_NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER NewStudioRole = 150
	NewStudioRole_NEW_STUDIO_ROLE_TRANSPORTATIONMANAGER              NewStudioRole = 151
	NewStudioRole_NEW_STUDIO_ROLE_VIDEOGRAPHER                       NewStudioRole = 152
	NewStudioRole_NEW_STUDIO_ROLE_USERDEFINED                        NewStudioRole = 153
	NewStudioRole_NEW_STUDIO_ROLE_VIDEOPRODUCER                      NewStudioRole = 154
	NewStudioRole_NEW_STUDIO_ROLE_VISIONMIXER                        NewStudioRole = 155
	NewStudioRole_NEW_STUDIO_ROLE_VISUALEDITOR                       NewStudioRole = 156
	NewStudioRole_NEW_STUDIO_ROLE_VISUALEFFECTSTECHNICIAN            NewStudioRole = 157
	NewStudioRole_NEW_STUDIO_ROLE_VOCALPRODUCER                      NewStudioRole = 158
	NewStudioRole_NEW_STUDIO_ROLE_WARDROBE                           NewStudioRole = 159
)

// Enum value maps for NewStudioRole.
var (
	NewStudioRole_name = map[int32]string{
		0:   "NEW_STUDIO_ROLE_UNSPECIFIED",
		1:   "NEW_STUDIO_ROLE_ADDITIONALENGINEER",
		2:   "NEW_STUDIO_ROLE_ANIMALTRAINER",
		3:   "NEW_STUDIO_ROLE_ANIMATOR",
		4:   "NEW_STUDIO_ROLE_ANNOTATOR",
		5:   "NEW_STUDIO_ROLE_AANDRCOORDINATOR",
		6:   "NEW_STUDIO_ROLE_ARMOURER",
		7:   "NEW_STUDIO_ROLE_ARTDIRECTOR",
		8:   "NEW_STUDIO_ROLE_ARTISTBACKGROUNDVOCALENGINEER",
		9:   "NEW_STUDIO_ROLE_ARTISTVOCALENGINEER",
		10:  "NEW_STUDIO_ROLE_ARTISTVOCALSECONDENGINEER",
		11:  "NEW_STUDIO_ROLE_ASSISTANTCAMERAOPERATOR",
		12:  "NEW_STUDIO_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN",
		13:  "NEW_STUDIO_ROLE_ASSISTANTDIRECTOR",
		14:  "NEW_STUDIO_ROLE_ASSISTANTPRODUCER",
		15:  "NEW_STUDIO_ROLE_ASSISTANTVISUALEDITOR",
		16:  "NEW_STUDIO_ROLE_AURALTRAINER",
		17:  "NEW_STUDIO_ROLE_BINDER",
		18:  "NEW_STUDIO_ROLE_BINDINGDESIGNER",
		19:  "NEW_STUDIO_ROLE_BOOKDESIGNER",
		20:  "NEW_STUDIO_ROLE_BOOKJACKDESIGNER",
		21:  "NEW_STUDIO_ROLE_BOOKPLATEDESIGNER",
		22:  "NEW_STUDIO_ROLE_BOOKPRODUCER",
		23:  "NEW_STUDIO_ROLE_BROADCASTASSISTANT",
		24:  "NEW_STUDIO_ROLE_BROADCASTJOURNALIST",
		25:  "NEW_STUDIO_ROLE_CAMERAOPERATOR",
		26:  "NEW_STUDIO_ROLE_CARPENTER",
		27:  "NEW_STUDIO_ROLE_CASTINGDIRECTOR",
		28:  "NEW_STUDIO_ROLE_CENSOR",
		29:  "NEW_STUDIO_ROLE_CHIEFLIGHTINGTECHNICIAN",
		30:  "NEW_STUDIO_ROLE_CHOREOGRAPHER",
		31:  "NEW_STUDIO_ROLE_CLAPPERLOADER",
		32:  "NEW_STUDIO_ROLE_COEXECUTIVEPRODUCER",
		33:  "NEW_STUDIO_ROLE_COMMISSIONINGBROADCASTER",
		34:  "NEW_STUDIO_ROLE_COMPILATIONPRODUCER",
		35:  "NEW_STUDIO_ROLE_CONSULTANT",
		36:  "NEW_STUDIO_ROLE_CONTINUITYCHECKER",
		37:  "NEW_STUDIO_ROLE_CONTRACTOR",
		38:  "NEW_STUDIO_ROLE_COPRODUCER",
		39:  "NEW_STUDIO_ROLE_CORRESPONDENT",
		40:  "NEW_STUDIO_ROLE_COSTUMEDESIGNER",
		41:  "NEW_STUDIO_ROLE_COVERDESIGNER",
		42:  "NEW_STUDIO_ROLE_DESIGNER",
		43:  "NEW_STUDIO_ROLE_DIALOGUECOACH",
		44:  "NEW_STUDIO_ROLE_DIGITALAUDIOWORKSTATIONENGINEER",
		45:  "NEW_STUDIO_ROLE_DIGITALEDITINGENGINEER",
		46:  "NEW_STUDIO_ROLE_DIGITALEDITINGSECONDENGINEER",
		47:  "NEW_STUDIO_ROLE_DIRECTOR",
		48:  "NEW_STUDIO_ROLE_DIRECTSTREAMDIGITALENGINEER",
		49:  "NEW_STUDIO_ROLE_DISTRIBUTIONCOMPANY",
		50:  "NEW_STUDIO_ROLE_DRESSER",
		51:  "NEW_STUDIO_ROLE_DUBBER",
		52:  "NEW_STUDIO_ROLE_EDITOR",
		53:  "NEW_STUDIO_ROLE_EDITORINCHIEF",
		54:  "NEW_STUDIO_ROLE_EDITOROFTHEDAY",
		55:  "NEW_STUDIO_ROLE_ENCODER",
		56:  "NEW_STUDIO_ROLE_ENGINEER",
		57:  "NEW_STUDIO_ROLE_EXECUTIVEPRODUCER",
		58:  "NEW_STUDIO_ROLE_EXPERT",
		59:  "NEW_STUDIO_ROLE_FIGHTDIRECTOR",
		60:  "NEW_STUDIO_ROLE_FILMDIRECTOR",
		61:  "NEW_STUDIO_ROLE_FILMDISTRIBUTOR",
		62:  "NEW_STUDIO_ROLE_FILMEDITOR",
		63:  "NEW_STUDIO_ROLE_FILMPRODUCER",
		64:  "NEW_STUDIO_ROLE_FILMSOUNDENGINEER",
		65:  "NEW_STUDIO_ROLE_FLOORMANAGER",
		66:  "NEW_STUDIO_ROLE_FOCUSPULLER",
		67:  "NEW_STUDIO_ROLE_FOLEYARTIST",
		68:  "NEW_STUDIO_ROLE_FOLEYEDITOR",
		69:  "NEW_STUDIO_ROLE_FOLEYMIXER",
		70:  "NEW_STUDIO_ROLE_GRAPHICASSISTANT",
		71:  "NEW_STUDIO_ROLE_GRAPHICDESIGNER",
		72:  "NEW_STUDIO_ROLE_GREENSMAN",
		73:  "NEW_STUDIO_ROLE_GRIP",
		74:  "NEW_STUDIO_ROLE_HAIRDRESSER",
		75:  "NEW_STUDIO_ROLE_INITIALPRODUCER",
		76:  "NEW_STUDIO_ROLE_KEYGRIP",
		77:  "NEW_STUDIO_ROLE_LEADMAN",
		78:  "NEW_STUDIO_ROLE_LIGHTINGDIRECTOR",
		79:  "NEW_STUDIO_ROLE_LIGHTINGTECHNICIAN",
		80:  "NEW_STUDIO_ROLE_LOCATIONMANAGER",
		81:  "NEW_STUDIO_ROLE_MAKEUPARTIST",
		82:  "NEW_STUDIO_ROLE_MANUFACTURER",
		83:  "NEW_STUDIO_ROLE_MASTERINGENGINEER",
		84:  "NEW_STUDIO_ROLE_MASTERINGSECONDENGINEER",
		85:  "NEW_STUDIO_ROLE_MATTEARTIST",
		86:  "NEW_STUDIO_ROLE_MIXINGENGINEER",
		87:  "NEW_STUDIO_ROLE_MIXINGSECONDENGINEER",
		88:  "NEW_STUDIO_ROLE_MUSICDIRECTOR",
		89:  "NEW_STUDIO_ROLE_MUSICIAN",
		90:  "NEW_STUDIO_ROLE_NEWSPRODUCER",
		91:  "NEW_STUDIO_ROLE_OVERDUBENGINEER",
		92:  "NEW_STUDIO_ROLE_OVERDUBSECONDENGINEER",
		93:  "NEW_STUDIO_ROLE_PHOTOGRAPHYDIRECTOR",
		94:  "NEW_STUDIO_ROLE_POSTPRODUCER",
		95:  "NEW_STUDIO_ROLE_PROGRAMMINGENGINEER",
		96:  "NEW_STUDIO_ROLE_PREPRODUCTION",
		97:  "NEW_STUDIO_ROLE_PREPRODUCTIONENGINEER",
		98:  "NEW_STUDIO_ROLE_PRODUCTIONCOMPANY",
		99:  "NEW_STUDIO_ROLE_PRODUCTIONDEPARTMENT",
		100: "NEW_STUDIO_ROLE_PRODUCTIONMANAGER",
		101: "NEW_STUDIO_ROLE_PRODUCTIONSECRETARY",
		102: "NEW_STUDIO_ROLE_PROGRAMPRODUCER",
		103: "NEW_STUDIO_ROLE_PROGRAMPROPOSALWRITER",
		104: "NEW_STUDIO_ROLE_PROPERTYMANAGER",
		105: "NEW_STUDIO_ROLE_PUBLISHINGDIRECTOR",
		106: "NEW_STUDIO_ROLE_PYROTECHNICIAN",
		107: "NEW_STUDIO_ROLE_RECORDINGENGINEER",
		108: "NEW_STUDIO_ROLE_RECORDINGSECONDENGINEER",
		109: "NEW_STUDIO_ROLE_REDACTOR",
		110: "NEW_STUDIO_ROLE_REISSUEPRODUCER",
		111: "NEW_STUDIO_ROLE_REMIXINGENGINEER",
		112: "NEW_STUDIO_ROLE_REMIXINGSECONDENGINEER",
		113: "NEW_STUDIO_ROLE_REPETITEUR",
		114: "NEW_STUDIO_ROLE_RESEARCHER",
		115: "NEW_STUDIO_ROLE_RESEARCHTEAMHEAD",
		116: "NEW_STUDIO_ROLE_RESEARCHTEAMMEMBER",
		117: "NEW_STUDIO_ROLE_RESTAGER",
		118: "NEW_STUDIO_ROLE_RIGGER",
		119: "NEW_STUDIO_ROLE_RIGHTSCONTROLLERONPRODUCT",
		120: "NEW_STUDIO_ROLE_RUNNER",
		121: "NEW_STUDIO_ROLE_SCENICOPERATIVE",
		122: "NEW_STUDIO_ROLE_SCIENTIFICADVISOR",
		123: "NEW_STUDIO_ROLE_SCRIPTSUPERVISOR",
		124: "NEW_STUDIO_ROLE_SECONDASSISTANTCAMERAOPERATOR",
		125: "NEW_STUDIO_ROLE_SECONDASSISTANTDIRECTOR",
		126: "NEW_STUDIO_ROLE_SECONDENGINEER",
		127: "NEW_STUDIO_ROLE_SECONDUNITDIRECTOR",
		128: "NEW_STUDIO_ROLE_SERIESPRODUCER",
		129: "NEW_STUDIO_ROLE_SETDESIGNER",
		130: "NEW_STUDIO_ROLE_SETDRESSER",
		131: "NEW_STUDIO_ROLE_SOUNDDESIGNER",
		132: "NEW_STUDIO_ROLE_SOUNDMIXER",
		133: "NEW_STUDIO_ROLE_SOUNDRECORDIST",
		134: "NEW_STUDIO_ROLE_SPECIALEFFECTSTECHNICIAN",
		135: "NEW_STUDIO_ROLE_SPONSOR",
		136: "NEW_STUDIO_ROLE_STAGEDIRECTOR",
		137: "NEW_STUDIO_ROLE_STRINGENGINEER",
		138: "NEW_STUDIO_ROLE_STRINGPRODUCER",
		139: "NEW_STUDIO_ROLE_STUDIOCONDUCTOR",
		140: "NEW_STUDIO_ROLE_STUDIOPERSONNEL",
		141: "NEW_STUDIO_ROLE_STUDIOPRODUCER",
		142: "NEW_STUDIO_ROLE_SUBTITLESEDITOR",
		143: "NEW_STUDIO_ROLE_SUBTITLESTRANSLATOR",
		144: "NEW_STUDIO_ROLE_TAPEOPERATOR",
		145: "NEW_STUDIO_ROLE_TECHNICALDIRECTOR",
		146: "NEW_STUDIO_ROLE_TONMEISTER",
		147: "NEW_STUDIO_ROLE_TRACKINGENGINEER",
		148: "NEW_STUDIO_ROLE_TRACKINGSECONDENGINEER",
		149: "NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESENGINEER",
		150: "NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER",
		151: "NEW_STUDIO_ROLE_TRANSPORTATIONMANAGER",
		152: "NEW_STUDIO_ROLE_VIDEOGRAPHER",
		153: "NEW_STUDIO_ROLE_USERDEFINED",
		154: "NEW_STUDIO_ROLE_VIDEOPRODUCER",
		155: "NEW_STUDIO_ROLE_VISIONMIXER",
		156: "NEW_STUDIO_ROLE_VISUALEDITOR",
		157: "NEW_STUDIO_ROLE_VISUALEFFECTSTECHNICIAN",
		158: "NEW_STUDIO_ROLE_VOCALPRODUCER",
		159: "NEW_STUDIO_ROLE_WARDROBE",
	}
	NewStudioRole_value = map[string]int32{
		"NEW_STUDIO_ROLE_UNSPECIFIED":                        0,
		"NEW_STUDIO_ROLE_ADDITIONALENGINEER":                 1,
		"NEW_STUDIO_ROLE_ANIMALTRAINER":                      2,
		"NEW_STUDIO_ROLE_ANIMATOR":                           3,
		"NEW_STUDIO_ROLE_ANNOTATOR":                          4,
		"NEW_STUDIO_ROLE_AANDRCOORDINATOR":                   5,
		"NEW_STUDIO_ROLE_ARMOURER":                           6,
		"NEW_STUDIO_ROLE_ARTDIRECTOR":                        7,
		"NEW_STUDIO_ROLE_ARTISTBACKGROUNDVOCALENGINEER":      8,
		"NEW_STUDIO_ROLE_ARTISTVOCALENGINEER":                9,
		"NEW_STUDIO_ROLE_ARTISTVOCALSECONDENGINEER":          10,
		"NEW_STUDIO_ROLE_ASSISTANTCAMERAOPERATOR":            11,
		"NEW_STUDIO_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN":   12,
		"NEW_STUDIO_ROLE_ASSISTANTDIRECTOR":                  13,
		"NEW_STUDIO_ROLE_ASSISTANTPRODUCER":                  14,
		"NEW_STUDIO_ROLE_ASSISTANTVISUALEDITOR":              15,
		"NEW_STUDIO_ROLE_AURALTRAINER":                       16,
		"NEW_STUDIO_ROLE_BINDER":                             17,
		"NEW_STUDIO_ROLE_BINDINGDESIGNER":                    18,
		"NEW_STUDIO_ROLE_BOOKDESIGNER":                       19,
		"NEW_STUDIO_ROLE_BOOKJACKDESIGNER":                   20,
		"NEW_STUDIO_ROLE_BOOKPLATEDESIGNER":                  21,
		"NEW_STUDIO_ROLE_BOOKPRODUCER":                       22,
		"NEW_STUDIO_ROLE_BROADCASTASSISTANT":                 23,
		"NEW_STUDIO_ROLE_BROADCASTJOURNALIST":                24,
		"NEW_STUDIO_ROLE_CAMERAOPERATOR":                     25,
		"NEW_STUDIO_ROLE_CARPENTER":                          26,
		"NEW_STUDIO_ROLE_CASTINGDIRECTOR":                    27,
		"NEW_STUDIO_ROLE_CENSOR":                             28,
		"NEW_STUDIO_ROLE_CHIEFLIGHTINGTECHNICIAN":            29,
		"NEW_STUDIO_ROLE_CHOREOGRAPHER":                      30,
		"NEW_STUDIO_ROLE_CLAPPERLOADER":                      31,
		"NEW_STUDIO_ROLE_COEXECUTIVEPRODUCER":                32,
		"NEW_STUDIO_ROLE_COMMISSIONINGBROADCASTER":           33,
		"NEW_STUDIO_ROLE_COMPILATIONPRODUCER":                34,
		"NEW_STUDIO_ROLE_CONSULTANT":                         35,
		"NEW_STUDIO_ROLE_CONTINUITYCHECKER":                  36,
		"NEW_STUDIO_ROLE_CONTRACTOR":                         37,
		"NEW_STUDIO_ROLE_COPRODUCER":                         38,
		"NEW_STUDIO_ROLE_CORRESPONDENT":                      39,
		"NEW_STUDIO_ROLE_COSTUMEDESIGNER":                    40,
		"NEW_STUDIO_ROLE_COVERDESIGNER":                      41,
		"NEW_STUDIO_ROLE_DESIGNER":                           42,
		"NEW_STUDIO_ROLE_DIALOGUECOACH":                      43,
		"NEW_STUDIO_ROLE_DIGITALAUDIOWORKSTATIONENGINEER":    44,
		"NEW_STUDIO_ROLE_DIGITALEDITINGENGINEER":             45,
		"NEW_STUDIO_ROLE_DIGITALEDITINGSECONDENGINEER":       46,
		"NEW_STUDIO_ROLE_DIRECTOR":                           47,
		"NEW_STUDIO_ROLE_DIRECTSTREAMDIGITALENGINEER":        48,
		"NEW_STUDIO_ROLE_DISTRIBUTIONCOMPANY":                49,
		"NEW_STUDIO_ROLE_DRESSER":                            50,
		"NEW_STUDIO_ROLE_DUBBER":                             51,
		"NEW_STUDIO_ROLE_EDITOR":                             52,
		"NEW_STUDIO_ROLE_EDITORINCHIEF":                      53,
		"NEW_STUDIO_ROLE_EDITOROFTHEDAY":                     54,
		"NEW_STUDIO_ROLE_ENCODER":                            55,
		"NEW_STUDIO_ROLE_ENGINEER":                           56,
		"NEW_STUDIO_ROLE_EXECUTIVEPRODUCER":                  57,
		"NEW_STUDIO_ROLE_EXPERT":                             58,
		"NEW_STUDIO_ROLE_FIGHTDIRECTOR":                      59,
		"NEW_STUDIO_ROLE_FILMDIRECTOR":                       60,
		"NEW_STUDIO_ROLE_FILMDISTRIBUTOR":                    61,
		"NEW_STUDIO_ROLE_FILMEDITOR":                         62,
		"NEW_STUDIO_ROLE_FILMPRODUCER":                       63,
		"NEW_STUDIO_ROLE_FILMSOUNDENGINEER":                  64,
		"NEW_STUDIO_ROLE_FLOORMANAGER":                       65,
		"NEW_STUDIO_ROLE_FOCUSPULLER":                        66,
		"NEW_STUDIO_ROLE_FOLEYARTIST":                        67,
		"NEW_STUDIO_ROLE_FOLEYEDITOR":                        68,
		"NEW_STUDIO_ROLE_FOLEYMIXER":                         69,
		"NEW_STUDIO_ROLE_GRAPHICASSISTANT":                   70,
		"NEW_STUDIO_ROLE_GRAPHICDESIGNER":                    71,
		"NEW_STUDIO_ROLE_GREENSMAN":                          72,
		"NEW_STUDIO_ROLE_GRIP":                               73,
		"NEW_STUDIO_ROLE_HAIRDRESSER":                        74,
		"NEW_STUDIO_ROLE_INITIALPRODUCER":                    75,
		"NEW_STUDIO_ROLE_KEYGRIP":                            76,
		"NEW_STUDIO_ROLE_LEADMAN":                            77,
		"NEW_STUDIO_ROLE_LIGHTINGDIRECTOR":                   78,
		"NEW_STUDIO_ROLE_LIGHTINGTECHNICIAN":                 79,
		"NEW_STUDIO_ROLE_LOCATIONMANAGER":                    80,
		"NEW_STUDIO_ROLE_MAKEUPARTIST":                       81,
		"NEW_STUDIO_ROLE_MANUFACTURER":                       82,
		"NEW_STUDIO_ROLE_MASTERINGENGINEER":                  83,
		"NEW_STUDIO_ROLE_MASTERINGSECONDENGINEER":            84,
		"NEW_STUDIO_ROLE_MATTEARTIST":                        85,
		"NEW_STUDIO_ROLE_MIXINGENGINEER":                     86,
		"NEW_STUDIO_ROLE_MIXINGSECONDENGINEER":               87,
		"NEW_STUDIO_ROLE_MUSICDIRECTOR":                      88,
		"NEW_STUDIO_ROLE_MUSICIAN":                           89,
		"NEW_STUDIO_ROLE_NEWSPRODUCER":                       90,
		"NEW_STUDIO_ROLE_OVERDUBENGINEER":                    91,
		"NEW_STUDIO_ROLE_OVERDUBSECONDENGINEER":              92,
		"NEW_STUDIO_ROLE_PHOTOGRAPHYDIRECTOR":                93,
		"NEW_STUDIO_ROLE_POSTPRODUCER":                       94,
		"NEW_STUDIO_ROLE_PROGRAMMINGENGINEER":                95,
		"NEW_STUDIO_ROLE_PREPRODUCTION":                      96,
		"NEW_STUDIO_ROLE_PREPRODUCTIONENGINEER":              97,
		"NEW_STUDIO_ROLE_PRODUCTIONCOMPANY":                  98,
		"NEW_STUDIO_ROLE_PRODUCTIONDEPARTMENT":               99,
		"NEW_STUDIO_ROLE_PRODUCTIONMANAGER":                  100,
		"NEW_STUDIO_ROLE_PRODUCTIONSECRETARY":                101,
		"NEW_STUDIO_ROLE_PROGRAMPRODUCER":                    102,
		"NEW_STUDIO_ROLE_PROGRAMPROPOSALWRITER":              103,
		"NEW_STUDIO_ROLE_PROPERTYMANAGER":                    104,
		"NEW_STUDIO_ROLE_PUBLISHINGDIRECTOR":                 105,
		"NEW_STUDIO_ROLE_PYROTECHNICIAN":                     106,
		"NEW_STUDIO_ROLE_RECORDINGENGINEER":                  107,
		"NEW_STUDIO_ROLE_RECORDINGSECONDENGINEER":            108,
		"NEW_STUDIO_ROLE_REDACTOR":                           109,
		"NEW_STUDIO_ROLE_REISSUEPRODUCER":                    110,
		"NEW_STUDIO_ROLE_REMIXINGENGINEER":                   111,
		"NEW_STUDIO_ROLE_REMIXINGSECONDENGINEER":             112,
		"NEW_STUDIO_ROLE_REPETITEUR":                         113,
		"NEW_STUDIO_ROLE_RESEARCHER":                         114,
		"NEW_STUDIO_ROLE_RESEARCHTEAMHEAD":                   115,
		"NEW_STUDIO_ROLE_RESEARCHTEAMMEMBER":                 116,
		"NEW_STUDIO_ROLE_RESTAGER":                           117,
		"NEW_STUDIO_ROLE_RIGGER":                             118,
		"NEW_STUDIO_ROLE_RIGHTSCONTROLLERONPRODUCT":          119,
		"NEW_STUDIO_ROLE_RUNNER":                             120,
		"NEW_STUDIO_ROLE_SCENICOPERATIVE":                    121,
		"NEW_STUDIO_ROLE_SCIENTIFICADVISOR":                  122,
		"NEW_STUDIO_ROLE_SCRIPTSUPERVISOR":                   123,
		"NEW_STUDIO_ROLE_SECONDASSISTANTCAMERAOPERATOR":      124,
		"NEW_STUDIO_ROLE_SECONDASSISTANTDIRECTOR":            125,
		"NEW_STUDIO_ROLE_SECONDENGINEER":                     126,
		"NEW_STUDIO_ROLE_SECONDUNITDIRECTOR":                 127,
		"NEW_STUDIO_ROLE_SERIESPRODUCER":                     128,
		"NEW_STUDIO_ROLE_SETDESIGNER":                        129,
		"NEW_STUDIO_ROLE_SETDRESSER":                         130,
		"NEW_STUDIO_ROLE_SOUNDDESIGNER":                      131,
		"NEW_STUDIO_ROLE_SOUNDMIXER":                         132,
		"NEW_STUDIO_ROLE_SOUNDRECORDIST":                     133,
		"NEW_STUDIO_ROLE_SPECIALEFFECTSTECHNICIAN":           134,
		"NEW_STUDIO_ROLE_SPONSOR":                            135,
		"NEW_STUDIO_ROLE_STAGEDIRECTOR":                      136,
		"NEW_STUDIO_ROLE_STRINGENGINEER":                     137,
		"NEW_STUDIO_ROLE_STRINGPRODUCER":                     138,
		"NEW_STUDIO_ROLE_STUDIOCONDUCTOR":                    139,
		"NEW_STUDIO_ROLE_STUDIOPERSONNEL":                    140,
		"NEW_STUDIO_ROLE_STUDIOPRODUCER":                     141,
		"NEW_STUDIO_ROLE_SUBTITLESEDITOR":                    142,
		"NEW_STUDIO_ROLE_SUBTITLESTRANSLATOR":                143,
		"NEW_STUDIO_ROLE_TAPEOPERATOR":                       144,
		"NEW_STUDIO_ROLE_TECHNICALDIRECTOR":                  145,
		"NEW_STUDIO_ROLE_TONMEISTER":                         146,
		"NEW_STUDIO_ROLE_TRACKINGENGINEER":                   147,
		"NEW_STUDIO_ROLE_TRACKINGSECONDENGINEER":             148,
		"NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESENGINEER":       149,
		"NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER": 150,
		"NEW_STUDIO_ROLE_TRANSPORTATIONMANAGER":              151,
		"NEW_STUDIO_ROLE_VIDEOGRAPHER":                       152,
		"NEW_STUDIO_ROLE_USERDEFINED":                        153,
		"NEW_STUDIO_ROLE_VIDEOPRODUCER":                      154,
		"NEW_STUDIO_ROLE_VISIONMIXER":                        155,
		"NEW_STUDIO_ROLE_VISUALEDITOR":                       156,
		"NEW_STUDIO_ROLE_VISUALEFFECTSTECHNICIAN":            157,
		"NEW_STUDIO_ROLE_VOCALPRODUCER":                      158,
		"NEW_STUDIO_ROLE_WARDROBE":                           159,
	}
)

func (x NewStudioRole) Enum() *NewStudioRole {
	p := new(NewStudioRole)
	*p = x
	return p
}

func (x NewStudioRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewStudioRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[105].Descriptor()
}

func (NewStudioRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[105]
}

func (x NewStudioRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewStudioRole.Descriptor instead.
func (NewStudioRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{105}
}

type OperatingSystemType int32

const (
	OperatingSystemType_OPERATING_SYSTEM_TYPE_UNSPECIFIED OperatingSystemType = 0
	OperatingSystemType_OPERATING_SYSTEM_TYPE_MACOS       OperatingSystemType = 1
	OperatingSystemType_OPERATING_SYSTEM_TYPE_MSWINDOWS   OperatingSystemType = 2
	OperatingSystemType_OPERATING_SYSTEM_TYPE_SYMBIAN     OperatingSystemType = 3
	OperatingSystemType_OPERATING_SYSTEM_TYPE_UNKNOWN     OperatingSystemType = 4
)

// Enum value maps for OperatingSystemType.
var (
	OperatingSystemType_name = map[int32]string{
		0: "OPERATING_SYSTEM_TYPE_UNSPECIFIED",
		1: "OPERATING_SYSTEM_TYPE_MACOS",
		2: "OPERATING_SYSTEM_TYPE_MSWINDOWS",
		3: "OPERATING_SYSTEM_TYPE_SYMBIAN",
		4: "OPERATING_SYSTEM_TYPE_UNKNOWN",
	}
	OperatingSystemType_value = map[string]int32{
		"OPERATING_SYSTEM_TYPE_UNSPECIFIED": 0,
		"OPERATING_SYSTEM_TYPE_MACOS":       1,
		"OPERATING_SYSTEM_TYPE_MSWINDOWS":   2,
		"OPERATING_SYSTEM_TYPE_SYMBIAN":     3,
		"OPERATING_SYSTEM_TYPE_UNKNOWN":     4,
	}
)

func (x OperatingSystemType) Enum() *OperatingSystemType {
	p := new(OperatingSystemType)
	*p = x
	return p
}

func (x OperatingSystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingSystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[106].Descriptor()
}

func (OperatingSystemType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[106]
}

func (x OperatingSystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatingSystemType.Descriptor instead.
func (OperatingSystemType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{106}
}

type PLineType int32

const (
	PLineType_P_LINE_TYPE_UNSPECIFIED      PLineType = 0
	PLineType_P_LINE_TYPE_ORIGINALPLINE    PLineType = 1
	PLineType_P_LINE_TYPE_REMASTERINGPLINE PLineType = 2
)

// Enum value maps for PLineType.
var (
	PLineType_name = map[int32]string{
		0: "P_LINE_TYPE_UNSPECIFIED",
		1: "P_LINE_TYPE_ORIGINALPLINE",
		2: "P_LINE_TYPE_REMASTERINGPLINE",
	}
	PLineType_value = map[string]int32{
		"P_LINE_TYPE_UNSPECIFIED":      0,
		"P_LINE_TYPE_ORIGINALPLINE":    1,
		"P_LINE_TYPE_REMASTERINGPLINE": 2,
	}
)

func (x PLineType) Enum() *PLineType {
	p := new(PLineType)
	*p = x
	return p
}

func (x PLineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLineType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[107].Descriptor()
}

func (PLineType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[107]
}

func (x PLineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PLineType.Descriptor instead.
func (PLineType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{107}
}

type ParentalWarningType int32

const (
	ParentalWarningType_PARENTAL_WARNING_TYPE_UNSPECIFIED           ParentalWarningType = 0
	ParentalWarningType_PARENTAL_WARNING_TYPE_EXPLICIT              ParentalWarningType = 1
	ParentalWarningType_PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED ParentalWarningType = 2
	ParentalWarningType_PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE     ParentalWarningType = 3
	ParentalWarningType_PARENTAL_WARNING_TYPE_NOTEXPLICIT           ParentalWarningType = 4
	ParentalWarningType_PARENTAL_WARNING_TYPE_UNKNOWN               ParentalWarningType = 5
	ParentalWarningType_PARENTAL_WARNING_TYPE_USERDEFINED           ParentalWarningType = 6
)

// Enum value maps for ParentalWarningType.
var (
	ParentalWarningType_name = map[int32]string{
		0: "PARENTAL_WARNING_TYPE_UNSPECIFIED",
		1: "PARENTAL_WARNING_TYPE_EXPLICIT",
		2: "PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED",
		3: "PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE",
		4: "PARENTAL_WARNING_TYPE_NOTEXPLICIT",
		5: "PARENTAL_WARNING_TYPE_UNKNOWN",
		6: "PARENTAL_WARNING_TYPE_USERDEFINED",
	}
	ParentalWarningType_value = map[string]int32{
		"PARENTAL_WARNING_TYPE_UNSPECIFIED":           0,
		"PARENTAL_WARNING_TYPE_EXPLICIT":              1,
		"PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED": 2,
		"PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE":     3,
		"PARENTAL_WARNING_TYPE_NOTEXPLICIT":           4,
		"PARENTAL_WARNING_TYPE_UNKNOWN":               5,
		"PARENTAL_WARNING_TYPE_USERDEFINED":           6,
	}
)

func (x ParentalWarningType) Enum() *ParentalWarningType {
	p := new(ParentalWarningType)
	*p = x
	return p
}

func (x ParentalWarningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentalWarningType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[108].Descriptor()
}

func (ParentalWarningType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[108]
}

func (x ParentalWarningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentalWarningType.Descriptor instead.
func (ParentalWarningType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{108}
}

type PartyRelationshipType int32

const (
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_UNSPECIFIED PartyRelationshipType = 0
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_HASMEMBER   PartyRelationshipType = 1
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_HASPART     PartyRelationshipType = 2
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_ISCHILDOF   PartyRelationshipType = 3
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_ISMEMBEROF  PartyRelationshipType = 4
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_ISPARENTOF  PartyRelationshipType = 5
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_ISPARTOF    PartyRelationshipType = 6
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_USERDEFINED PartyRelationshipType = 7
)

// Enum value maps for PartyRelationshipType.
var (
	PartyRelationshipType_name = map[int32]string{
		0: "PARTY_RELATIONSHIP_TYPE_UNSPECIFIED",
		1: "PARTY_RELATIONSHIP_TYPE_HASMEMBER",
		2: "PARTY_RELATIONSHIP_TYPE_HASPART",
		3: "PARTY_RELATIONSHIP_TYPE_ISCHILDOF",
		4: "PARTY_RELATIONSHIP_TYPE_ISMEMBEROF",
		5: "PARTY_RELATIONSHIP_TYPE_ISPARENTOF",
		6: "PARTY_RELATIONSHIP_TYPE_ISPARTOF",
		7: "PARTY_RELATIONSHIP_TYPE_USERDEFINED",
	}
	PartyRelationshipType_value = map[string]int32{
		"PARTY_RELATIONSHIP_TYPE_UNSPECIFIED": 0,
		"PARTY_RELATIONSHIP_TYPE_HASMEMBER":   1,
		"PARTY_RELATIONSHIP_TYPE_HASPART":     2,
		"PARTY_RELATIONSHIP_TYPE_ISCHILDOF":   3,
		"PARTY_RELATIONSHIP_TYPE_ISMEMBEROF":  4,
		"PARTY_RELATIONSHIP_TYPE_ISPARENTOF":  5,
		"PARTY_RELATIONSHIP_TYPE_ISPARTOF":    6,
		"PARTY_RELATIONSHIP_TYPE_USERDEFINED": 7,
	}
)

func (x PartyRelationshipType) Enum() *PartyRelationshipType {
	p := new(PartyRelationshipType)
	*p = x
	return p
}

func (x PartyRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[109].Descriptor()
}

func (PartyRelationshipType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[109]
}

func (x PartyRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyRelationshipType.Descriptor instead.
func (PartyRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{109}
}

type PercentageType int32

const (
	PercentageType_PERCENTAGE_TYPE_UNSPECIFIED                      PercentageType = 0
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED   PercentageType = 1
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE         PercentageType = 2
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE           PercentageType = 3
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFNETSALES             PercentageType = 4
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID    PercentageType = 5
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE PercentageType = 6
)

// Enum value maps for PercentageType.
var (
	PercentageType_name = map[int32]string{
		0: "PERCENTAGE_TYPE_UNSPECIFIED",
		1: "PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED",
		2: "PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE",
		3: "PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE",
		4: "PERCENTAGE_TYPE_PERCENTAGEOFNETSALES",
		5: "PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID",
		6: "PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE",
	}
	PercentageType_value = map[string]int32{
		"PERCENTAGE_TYPE_UNSPECIFIED":                      0,
		"PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED":   1,
		"PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE":         2,
		"PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE":           3,
		"PERCENTAGE_TYPE_PERCENTAGEOFNETSALES":             4,
		"PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID":    5,
		"PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE": 6,
	}
)

func (x PercentageType) Enum() *PercentageType {
	p := new(PercentageType)
	*p = x
	return p
}

func (x PercentageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PercentageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[110].Descriptor()
}

func (PercentageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[110]
}

func (x PercentageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PercentageType.Descriptor instead.
func (PercentageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{110}
}

type Period int32

const (
	Period_PERIOD_UNSPECIFIED   Period = 0
	Period_PERIOD_ANCIENTMUSIC  Period = 1
	Period_PERIOD_ARSANTIQUA    Period = 2
	Period_PERIOD_ARSNOVA       Period = 3
	Period_PERIOD_ARSSUBTILIOR  Period = 4
	Period_PERIOD_BAROQUE       Period = 5
	Period_PERIOD_CLASSICAL     Period = 6
	Period_PERIOD_CONTEMPORARY  Period = 7
	Period_PERIOD_EARLYROMANTIC Period = 8
	Period_PERIOD_EXPERIMENTAL  Period = 9
	Period_PERIOD_GALANTMUSIC   Period = 10
	Period_PERIOD_HIGHMODERN    Period = 11
	Period_PERIOD_IMPRESSIONISM Period = 12
	Period_PERIOD_LATEROMANTIC  Period = 13
	Period_PERIOD_MEDIEVAL      Period = 14
	Period_PERIOD_MODERN        Period = 15
	Period_PERIOD_NEOCLASSICISM Period = 16
	Period_PERIOD_POSTMODERN    Period = 17
	Period_PERIOD_RENAISSANCE   Period = 18
	Period_PERIOD_USERDEFINED   Period = 19
)

// Enum value maps for Period.
var (
	Period_name = map[int32]string{
		0:  "PERIOD_UNSPECIFIED",
		1:  "PERIOD_ANCIENTMUSIC",
		2:  "PERIOD_ARSANTIQUA",
		3:  "PERIOD_ARSNOVA",
		4:  "PERIOD_ARSSUBTILIOR",
		5:  "PERIOD_BAROQUE",
		6:  "PERIOD_CLASSICAL",
		7:  "PERIOD_CONTEMPORARY",
		8:  "PERIOD_EARLYROMANTIC",
		9:  "PERIOD_EXPERIMENTAL",
		10: "PERIOD_GALANTMUSIC",
		11: "PERIOD_HIGHMODERN",
		12: "PERIOD_IMPRESSIONISM",
		13: "PERIOD_LATEROMANTIC",
		14: "PERIOD_MEDIEVAL",
		15: "PERIOD_MODERN",
		16: "PERIOD_NEOCLASSICISM",
		17: "PERIOD_POSTMODERN",
		18: "PERIOD_RENAISSANCE",
		19: "PERIOD_USERDEFINED",
	}
	Period_value = map[string]int32{
		"PERIOD_UNSPECIFIED":   0,
		"PERIOD_ANCIENTMUSIC":  1,
		"PERIOD_ARSANTIQUA":    2,
		"PERIOD_ARSNOVA":       3,
		"PERIOD_ARSSUBTILIOR":  4,
		"PERIOD_BAROQUE":       5,
		"PERIOD_CLASSICAL":     6,
		"PERIOD_CONTEMPORARY":  7,
		"PERIOD_EARLYROMANTIC": 8,
		"PERIOD_EXPERIMENTAL":  9,
		"PERIOD_GALANTMUSIC":   10,
		"PERIOD_HIGHMODERN":    11,
		"PERIOD_IMPRESSIONISM": 12,
		"PERIOD_LATEROMANTIC":  13,
		"PERIOD_MEDIEVAL":      14,
		"PERIOD_MODERN":        15,
		"PERIOD_NEOCLASSICISM": 16,
		"PERIOD_POSTMODERN":    17,
		"PERIOD_RENAISSANCE":   18,
		"PERIOD_USERDEFINED":   19,
	}
)

func (x Period) Enum() *Period {
	p := new(Period)
	*p = x
	return p
}

func (x Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Period) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[111].Descriptor()
}

func (Period) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[111]
}

func (x Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Period.Descriptor instead.
func (Period) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{111}
}

type PhysicalCarrierType int32

const (
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_UNSPECIFIED     PhysicalCarrierType = 0
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_BLURAY          PhysicalCarrierType = 1
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_CD              PhysicalCarrierType = 2
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_COMBIPACK       PhysicalCarrierType = 3
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_COMPACTCASSETTE PhysicalCarrierType = 4
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_DUALDISC        PhysicalCarrierType = 5
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_DVD             PhysicalCarrierType = 6
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_MEMORYDEVICE    PhysicalCarrierType = 7
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_SACD            PhysicalCarrierType = 8
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_USERDEFINED     PhysicalCarrierType = 9
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_VIDEOCASSETTE   PhysicalCarrierType = 10
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_VINYLDISK       PhysicalCarrierType = 11
)

// Enum value maps for PhysicalCarrierType.
var (
	PhysicalCarrierType_name = map[int32]string{
		0:  "PHYSICAL_CARRIER_TYPE_UNSPECIFIED",
		1:  "PHYSICAL_CARRIER_TYPE_BLURAY",
		2:  "PHYSICAL_CARRIER_TYPE_CD",
		3:  "PHYSICAL_CARRIER_TYPE_COMBIPACK",
		4:  "PHYSICAL_CARRIER_TYPE_COMPACTCASSETTE",
		5:  "PHYSICAL_CARRIER_TYPE_DUALDISC",
		6:  "PHYSICAL_CARRIER_TYPE_DVD",
		7:  "PHYSICAL_CARRIER_TYPE_MEMORYDEVICE",
		8:  "PHYSICAL_CARRIER_TYPE_SACD",
		9:  "PHYSICAL_CARRIER_TYPE_USERDEFINED",
		10: "PHYSICAL_CARRIER_TYPE_VIDEOCASSETTE",
		11: "PHYSICAL_CARRIER_TYPE_VINYLDISK",
	}
	PhysicalCarrierType_value = map[string]int32{
		"PHYSICAL_CARRIER_TYPE_UNSPECIFIED":     0,
		"PHYSICAL_CARRIER_TYPE_BLURAY":          1,
		"PHYSICAL_CARRIER_TYPE_CD":              2,
		"PHYSICAL_CARRIER_TYPE_COMBIPACK":       3,
		"PHYSICAL_CARRIER_TYPE_COMPACTCASSETTE": 4,
		"PHYSICAL_CARRIER_TYPE_DUALDISC":        5,
		"PHYSICAL_CARRIER_TYPE_DVD":             6,
		"PHYSICAL_CARRIER_TYPE_MEMORYDEVICE":    7,
		"PHYSICAL_CARRIER_TYPE_SACD":            8,
		"PHYSICAL_CARRIER_TYPE_USERDEFINED":     9,
		"PHYSICAL_CARRIER_TYPE_VIDEOCASSETTE":   10,
		"PHYSICAL_CARRIER_TYPE_VINYLDISK":       11,
	}
)

func (x PhysicalCarrierType) Enum() *PhysicalCarrierType {
	p := new(PhysicalCarrierType)
	*p = x
	return p
}

func (x PhysicalCarrierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhysicalCarrierType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[112].Descriptor()
}

func (PhysicalCarrierType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[112]
}

func (x PhysicalCarrierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhysicalCarrierType.Descriptor instead.
func (PhysicalCarrierType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{112}
}

type PriceInformationType int32

const (
	PriceInformationType_PRICE_INFORMATION_TYPE_UNSPECIFIED         PriceInformationType = 0
	PriceInformationType_PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE PriceInformationType = 1
	PriceInformationType_PRICE_INFORMATION_TYPE_PREORDERPRICE       PriceInformationType = 2
	PriceInformationType_PRICE_INFORMATION_TYPE_USERDEFINED         PriceInformationType = 3
)

// Enum value maps for PriceInformationType.
var (
	PriceInformationType_name = map[int32]string{
		0: "PRICE_INFORMATION_TYPE_UNSPECIFIED",
		1: "PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE",
		2: "PRICE_INFORMATION_TYPE_PREORDERPRICE",
		3: "PRICE_INFORMATION_TYPE_USERDEFINED",
	}
	PriceInformationType_value = map[string]int32{
		"PRICE_INFORMATION_TYPE_UNSPECIFIED":         0,
		"PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE": 1,
		"PRICE_INFORMATION_TYPE_PREORDERPRICE":       2,
		"PRICE_INFORMATION_TYPE_USERDEFINED":         3,
	}
)

func (x PriceInformationType) Enum() *PriceInformationType {
	p := new(PriceInformationType)
	*p = x
	return p
}

func (x PriceInformationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceInformationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[113].Descriptor()
}

func (PriceInformationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[113]
}

func (x PriceInformationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceInformationType.Descriptor instead.
func (PriceInformationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{113}
}

type ProductType int32

const (
	ProductType_PRODUCT_TYPE_UNSPECIFIED             ProductType = 0
	ProductType_PRODUCT_TYPE_AUDIOPRODUCT            ProductType = 1
	ProductType_PRODUCT_TYPE_GRAPHICSPRODUCT         ProductType = 2
	ProductType_PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT ProductType = 3
	ProductType_PRODUCT_TYPE_MOBILEPRODUCT           ProductType = 4
	ProductType_PRODUCT_TYPE_USERDEFINED             ProductType = 5
	ProductType_PRODUCT_TYPE_VIDEOPRODUCT            ProductType = 6
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_UNSPECIFIED",
		1: "PRODUCT_TYPE_AUDIOPRODUCT",
		2: "PRODUCT_TYPE_GRAPHICSPRODUCT",
		3: "PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT",
		4: "PRODUCT_TYPE_MOBILEPRODUCT",
		5: "PRODUCT_TYPE_USERDEFINED",
		6: "PRODUCT_TYPE_VIDEOPRODUCT",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED":             0,
		"PRODUCT_TYPE_AUDIOPRODUCT":            1,
		"PRODUCT_TYPE_GRAPHICSPRODUCT":         2,
		"PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT": 3,
		"PRODUCT_TYPE_MOBILEPRODUCT":           4,
		"PRODUCT_TYPE_USERDEFINED":             5,
		"PRODUCT_TYPE_VIDEOPRODUCT":            6,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[114].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[114]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{114}
}

type ProfileId int32

const (
	ProfileId_PROFILE_ID_UNSPECIFIED                                   ProfileId = 0
	ProfileId_PROFILE_ID_BASICAUDIOPROFILE                             ProfileId = 1
	ProfileId_PROFILE_ID_BASICAUDIOPROFILESRB                          ProfileId = 2
	ProfileId_PROFILE_ID_UGCPROFILE                                    ProfileId = 3
	ProfileId_PROFILE_ID_AUDIOVISUALPROFILE                            ProfileId = 4
	ProfileId_PROFILE_ID_AUDIOVISUALPROFILESRB                         ProfileId = 5
	ProfileId_PROFILE_ID_ROYALTYREPORTINGPROFILE                       ProfileId = 6
	ProfileId_PROFILE_ID_RADIOBROADCASTPROFILE                         ProfileId = 7
	ProfileId_PROFILE_ID_FINANCIALREPORTINGTORECORDCOMPANIESPROFILESRB ProfileId = 8
	ProfileId_PROFILE_ID_MASTERLISTPROFILE                             ProfileId = 9
	ProfileId_PROFILE_ID_MASTERLISTPROFILESRB                          ProfileId = 10
	ProfileId_PROFILE_ID_BASICAUDIOPROFILEMLC                          ProfileId = 11
	ProfileId_PROFILE_ID_UGCPROFILESRB                                 ProfileId = 12
)

// Enum value maps for ProfileId.
var (
	ProfileId_name = map[int32]string{
		0:  "PROFILE_ID_UNSPECIFIED",
		1:  "PROFILE_ID_BASICAUDIOPROFILE",
		2:  "PROFILE_ID_BASICAUDIOPROFILESRB",
		3:  "PROFILE_ID_UGCPROFILE",
		4:  "PROFILE_ID_AUDIOVISUALPROFILE",
		5:  "PROFILE_ID_AUDIOVISUALPROFILESRB",
		6:  "PROFILE_ID_ROYALTYREPORTINGPROFILE",
		7:  "PROFILE_ID_RADIOBROADCASTPROFILE",
		8:  "PROFILE_ID_FINANCIALREPORTINGTORECORDCOMPANIESPROFILESRB",
		9:  "PROFILE_ID_MASTERLISTPROFILE",
		10: "PROFILE_ID_MASTERLISTPROFILESRB",
		11: "PROFILE_ID_BASICAUDIOPROFILEMLC",
		12: "PROFILE_ID_UGCPROFILESRB",
	}
	ProfileId_value = map[string]int32{
		"PROFILE_ID_UNSPECIFIED":                                   0,
		"PROFILE_ID_BASICAUDIOPROFILE":                             1,
		"PROFILE_ID_BASICAUDIOPROFILESRB":                          2,
		"PROFILE_ID_UGCPROFILE":                                    3,
		"PROFILE_ID_AUDIOVISUALPROFILE":                            4,
		"PROFILE_ID_AUDIOVISUALPROFILESRB":                         5,
		"PROFILE_ID_ROYALTYREPORTINGPROFILE":                       6,
		"PROFILE_ID_RADIOBROADCASTPROFILE":                         7,
		"PROFILE_ID_FINANCIALREPORTINGTORECORDCOMPANIESPROFILESRB": 8,
		"PROFILE_ID_MASTERLISTPROFILE":                             9,
		"PROFILE_ID_MASTERLISTPROFILESRB":                          10,
		"PROFILE_ID_BASICAUDIOPROFILEMLC":                          11,
		"PROFILE_ID_UGCPROFILESRB":                                 12,
	}
)

func (x ProfileId) Enum() *ProfileId {
	p := new(ProfileId)
	*p = x
	return p
}

func (x ProfileId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileId) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[115].Descriptor()
}

func (ProfileId) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[115]
}

func (x ProfileId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileId.Descriptor instead.
func (ProfileId) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{115}
}

type Purpose int32

const (
	Purpose_PURPOSE_UNSPECIFIED         Purpose = 0
	Purpose_PURPOSE_BACKGROUNDMUSIC     Purpose = 1
	Purpose_PURPOSE_CHANNELTRAILERMUSIC Purpose = 2
	Purpose_PURPOSE_EXTRACT             Purpose = 3
	Purpose_PURPOSE_FILMTRAILERMUSIC    Purpose = 4
	Purpose_PURPOSE_FOREGROUNDMUSIC     Purpose = 5
	Purpose_PURPOSE_TRAILERMUSIC        Purpose = 6
	Purpose_PURPOSE_USERDEFINED         Purpose = 7
)

// Enum value maps for Purpose.
var (
	Purpose_name = map[int32]string{
		0: "PURPOSE_UNSPECIFIED",
		1: "PURPOSE_BACKGROUNDMUSIC",
		2: "PURPOSE_CHANNELTRAILERMUSIC",
		3: "PURPOSE_EXTRACT",
		4: "PURPOSE_FILMTRAILERMUSIC",
		5: "PURPOSE_FOREGROUNDMUSIC",
		6: "PURPOSE_TRAILERMUSIC",
		7: "PURPOSE_USERDEFINED",
	}
	Purpose_value = map[string]int32{
		"PURPOSE_UNSPECIFIED":         0,
		"PURPOSE_BACKGROUNDMUSIC":     1,
		"PURPOSE_CHANNELTRAILERMUSIC": 2,
		"PURPOSE_EXTRACT":             3,
		"PURPOSE_FILMTRAILERMUSIC":    4,
		"PURPOSE_FOREGROUNDMUSIC":     5,
		"PURPOSE_TRAILERMUSIC":        6,
		"PURPOSE_USERDEFINED":         7,
	}
)

func (x Purpose) Enum() *Purpose {
	p := new(Purpose)
	*p = x
	return p
}

func (x Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[116].Descriptor()
}

func (Purpose) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[116]
}

func (x Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Purpose.Descriptor instead.
func (Purpose) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{116}
}

type RatingAgency int32

const (
	RatingAgency_RATING_AGENCY_UNSPECIFIED   RatingAgency = 0
	RatingAgency_RATING_AGENCY_ACMA          RatingAgency = 1
	RatingAgency_RATING_AGENCY_AFR           RatingAgency = 2
	RatingAgency_RATING_AGENCY_AGCOM         RatingAgency = 3
	RatingAgency_RATING_AGENCY_ANATEL        RatingAgency = 4
	RatingAgency_RATING_AGENCY_BBFC          RatingAgency = 5
	RatingAgency_RATING_AGENCY_BFCO          RatingAgency = 6
	RatingAgency_RATING_AGENCY_BFSC          RatingAgency = 7
	RatingAgency_RATING_AGENCY_BFVC          RatingAgency = 8
	RatingAgency_RATING_AGENCY_BMUKK         RatingAgency = 9
	RatingAgency_RATING_AGENCY_CBFC          RatingAgency = 10
	RatingAgency_RATING_AGENCY_CBSC          RatingAgency = 11
	RatingAgency_RATING_AGENCY_CBSC_F        RatingAgency = 12
	RatingAgency_RATING_AGENCY_CCC           RatingAgency = 13
	RatingAgency_RATING_AGENCY_CCE           RatingAgency = 14
	RatingAgency_RATING_AGENCY_CHVRS         RatingAgency = 15
	RatingAgency_RATING_AGENCY_CICF          RatingAgency = 16
	RatingAgency_RATING_AGENCY_CNA           RatingAgency = 17
	RatingAgency_RATING_AGENCY_CNC           RatingAgency = 18
	RatingAgency_RATING_AGENCY_CPBC          RatingAgency = 19
	RatingAgency_RATING_AGENCY_CSA           RatingAgency = 20
	RatingAgency_RATING_AGENCY_CSCF          RatingAgency = 21
	RatingAgency_RATING_AGENCY_DJCTQ         RatingAgency = 22
	RatingAgency_RATING_AGENCY_EIRIN         RatingAgency = 23
	RatingAgency_RATING_AGENCY_ESRB          RatingAgency = 24
	RatingAgency_RATING_AGENCY_FAB           RatingAgency = 25
	RatingAgency_RATING_AGENCY_FCB           RatingAgency = 26
	RatingAgency_RATING_AGENCY_FCO           RatingAgency = 27
	RatingAgency_RATING_AGENCY_FILM_CH       RatingAgency = 28
	RatingAgency_RATING_AGENCY_FILM_CZ       RatingAgency = 29
	RatingAgency_RATING_AGENCY_FILM_EG       RatingAgency = 30
	RatingAgency_RATING_AGENCY_FILM_EE       RatingAgency = 31
	RatingAgency_RATING_AGENCY_FILM_GR       RatingAgency = 32
	RatingAgency_RATING_AGENCY_FILM_PE       RatingAgency = 33
	RatingAgency_RATING_AGENCY_FILM_SK       RatingAgency = 34
	RatingAgency_RATING_AGENCY_FILMTILSYNET  RatingAgency = 35
	RatingAgency_RATING_AGENCY_FPB           RatingAgency = 36
	RatingAgency_RATING_AGENCY_FRB           RatingAgency = 37
	RatingAgency_RATING_AGENCY_FSK           RatingAgency = 38
	RatingAgency_RATING_AGENCY_ICAA          RatingAgency = 39
	RatingAgency_RATING_AGENCY_IFCO          RatingAgency = 40
	RatingAgency_RATING_AGENCY_IFCOF         RatingAgency = 41
	RatingAgency_RATING_AGENCY_INCAA         RatingAgency = 42
	RatingAgency_RATING_AGENCY_KFCB          RatingAgency = 43
	RatingAgency_RATING_AGENCY_KIJKWIJZER    RatingAgency = 44
	RatingAgency_RATING_AGENCY_KMRB          RatingAgency = 45
	RatingAgency_RATING_AGENCY_KR            RatingAgency = 46
	RatingAgency_RATING_AGENCY_KRRIT         RatingAgency = 47
	RatingAgency_RATING_AGENCY_LSF           RatingAgency = 48
	RatingAgency_RATING_AGENCY_MBACT         RatingAgency = 49
	RatingAgency_RATING_AGENCY_MBU           RatingAgency = 50
	RatingAgency_RATING_AGENCY_MCCAA         RatingAgency = 51
	RatingAgency_RATING_AGENCY_MDA           RatingAgency = 52
	RatingAgency_RATING_AGENCY_MDCB          RatingAgency = 53
	RatingAgency_RATING_AGENCY_MEDIETILSYNET RatingAgency = 54
	RatingAgency_RATING_AGENCY_MEKU          RatingAgency = 55
	RatingAgency_RATING_AGENCY_MFCB          RatingAgency = 56
	RatingAgency_RATING_AGENCY_MIC           RatingAgency = 57
	RatingAgency_RATING_AGENCY_MKRF          RatingAgency = 58
	RatingAgency_RATING_AGENCY_MOC           RatingAgency = 59
	RatingAgency_RATING_AGENCY_MOC_TW        RatingAgency = 60
	RatingAgency_RATING_AGENCY_MPAA          RatingAgency = 61
	RatingAgency_RATING_AGENCY_MPAAT         RatingAgency = 62
	RatingAgency_RATING_AGENCY_MTRCB         RatingAgency = 63
	RatingAgency_RATING_AGENCY_NBC           RatingAgency = 64
	RatingAgency_RATING_AGENCY_NCS           RatingAgency = 65
	RatingAgency_RATING_AGENCY_NFRC          RatingAgency = 66
	RatingAgency_RATING_AGENCY_NFVCB         RatingAgency = 67
	RatingAgency_RATING_AGENCY_NICAM         RatingAgency = 68
	RatingAgency_RATING_AGENCY_NKC           RatingAgency = 69
	RatingAgency_RATING_AGENCY_OFLC          RatingAgency = 70
	RatingAgency_RATING_AGENCY_OFLC_NZ       RatingAgency = 71
	RatingAgency_RATING_AGENCY_OFRB          RatingAgency = 72
	RatingAgency_RATING_AGENCY_PEGI          RatingAgency = 73
	RatingAgency_RATING_AGENCY_RCNOF         RatingAgency = 74
	RatingAgency_RATING_AGENCY_RDCQ          RatingAgency = 75
	RatingAgency_RATING_AGENCY_RIAA          RatingAgency = 76
	RatingAgency_RATING_AGENCY_RTC           RatingAgency = 77
	RatingAgency_RATING_AGENCY_RTE           RatingAgency = 78
	RatingAgency_RATING_AGENCY_SBB           RatingAgency = 79
	RatingAgency_RATING_AGENCY_SIBCI         RatingAgency = 80
	RatingAgency_RATING_AGENCY_SMAIS         RatingAgency = 81
	RatingAgency_RATING_AGENCY_SM_SA         RatingAgency = 82
	RatingAgency_RATING_AGENCY_SPIO_JK       RatingAgency = 83
	RatingAgency_RATING_AGENCY_USFA          RatingAgency = 84
	RatingAgency_RATING_AGENCY_TELA          RatingAgency = 85
	RatingAgency_RATING_AGENCY_TVPG          RatingAgency = 86
	RatingAgency_RATING_AGENCY_USERDEFINED   RatingAgency = 87
	RatingAgency_RATING_AGENCY_VET           RatingAgency = 88
)

// Enum value maps for RatingAgency.
var (
	RatingAgency_name = map[int32]string{
		0:  "RATING_AGENCY_UNSPECIFIED",
		1:  "RATING_AGENCY_ACMA",
		2:  "RATING_AGENCY_AFR",
		3:  "RATING_AGENCY_AGCOM",
		4:  "RATING_AGENCY_ANATEL",
		5:  "RATING_AGENCY_BBFC",
		6:  "RATING_AGENCY_BFCO",
		7:  "RATING_AGENCY_BFSC",
		8:  "RATING_AGENCY_BFVC",
		9:  "RATING_AGENCY_BMUKK",
		10: "RATING_AGENCY_CBFC",
		11: "RATING_AGENCY_CBSC",
		12: "RATING_AGENCY_CBSC_F",
		13: "RATING_AGENCY_CCC",
		14: "RATING_AGENCY_CCE",
		15: "RATING_AGENCY_CHVRS",
		16: "RATING_AGENCY_CICF",
		17: "RATING_AGENCY_CNA",
		18: "RATING_AGENCY_CNC",
		19: "RATING_AGENCY_CPBC",
		20: "RATING_AGENCY_CSA",
		21: "RATING_AGENCY_CSCF",
		22: "RATING_AGENCY_DJCTQ",
		23: "RATING_AGENCY_EIRIN",
		24: "RATING_AGENCY_ESRB",
		25: "RATING_AGENCY_FAB",
		26: "RATING_AGENCY_FCB",
		27: "RATING_AGENCY_FCO",
		28: "RATING_AGENCY_FILM_CH",
		29: "RATING_AGENCY_FILM_CZ",
		30: "RATING_AGENCY_FILM_EG",
		31: "RATING_AGENCY_FILM_EE",
		32: "RATING_AGENCY_FILM_GR",
		33: "RATING_AGENCY_FILM_PE",
		34: "RATING_AGENCY_FILM_SK",
		35: "RATING_AGENCY_FILMTILSYNET",
		36: "RATING_AGENCY_FPB",
		37: "RATING_AGENCY_FRB",
		38: "RATING_AGENCY_FSK",
		39: "RATING_AGENCY_ICAA",
		40: "RATING_AGENCY_IFCO",
		41: "RATING_AGENCY_IFCOF",
		42: "RATING_AGENCY_INCAA",
		43: "RATING_AGENCY_KFCB",
		44: "RATING_AGENCY_KIJKWIJZER",
		45: "RATING_AGENCY_KMRB",
		46: "RATING_AGENCY_KR",
		47: "RATING_AGENCY_KRRIT",
		48: "RATING_AGENCY_LSF",
		49: "RATING_AGENCY_MBACT",
		50: "RATING_AGENCY_MBU",
		51: "RATING_AGENCY_MCCAA",
		52: "RATING_AGENCY_MDA",
		53: "RATING_AGENCY_MDCB",
		54: "RATING_AGENCY_MEDIETILSYNET",
		55: "RATING_AGENCY_MEKU",
		56: "RATING_AGENCY_MFCB",
		57: "RATING_AGENCY_MIC",
		58: "RATING_AGENCY_MKRF",
		59: "RATING_AGENCY_MOC",
		60: "RATING_AGENCY_MOC_TW",
		61: "RATING_AGENCY_MPAA",
		62: "RATING_AGENCY_MPAAT",
		63: "RATING_AGENCY_MTRCB",
		64: "RATING_AGENCY_NBC",
		65: "RATING_AGENCY_NCS",
		66: "RATING_AGENCY_NFRC",
		67: "RATING_AGENCY_NFVCB",
		68: "RATING_AGENCY_NICAM",
		69: "RATING_AGENCY_NKC",
		70: "RATING_AGENCY_OFLC",
		71: "RATING_AGENCY_OFLC_NZ",
		72: "RATING_AGENCY_OFRB",
		73: "RATING_AGENCY_PEGI",
		74: "RATING_AGENCY_RCNOF",
		75: "RATING_AGENCY_RDCQ",
		76: "RATING_AGENCY_RIAA",
		77: "RATING_AGENCY_RTC",
		78: "RATING_AGENCY_RTE",
		79: "RATING_AGENCY_SBB",
		80: "RATING_AGENCY_SIBCI",
		81: "RATING_AGENCY_SMAIS",
		82: "RATING_AGENCY_SM_SA",
		83: "RATING_AGENCY_SPIO_JK",
		84: "RATING_AGENCY_USFA",
		85: "RATING_AGENCY_TELA",
		86: "RATING_AGENCY_TVPG",
		87: "RATING_AGENCY_USERDEFINED",
		88: "RATING_AGENCY_VET",
	}
	RatingAgency_value = map[string]int32{
		"RATING_AGENCY_UNSPECIFIED":   0,
		"RATING_AGENCY_ACMA":          1,
		"RATING_AGENCY_AFR":           2,
		"RATING_AGENCY_AGCOM":         3,
		"RATING_AGENCY_ANATEL":        4,
		"RATING_AGENCY_BBFC":          5,
		"RATING_AGENCY_BFCO":          6,
		"RATING_AGENCY_BFSC":          7,
		"RATING_AGENCY_BFVC":          8,
		"RATING_AGENCY_BMUKK":         9,
		"RATING_AGENCY_CBFC":          10,
		"RATING_AGENCY_CBSC":          11,
		"RATING_AGENCY_CBSC_F":        12,
		"RATING_AGENCY_CCC":           13,
		"RATING_AGENCY_CCE":           14,
		"RATING_AGENCY_CHVRS":         15,
		"RATING_AGENCY_CICF":          16,
		"RATING_AGENCY_CNA":           17,
		"RATING_AGENCY_CNC":           18,
		"RATING_AGENCY_CPBC":          19,
		"RATING_AGENCY_CSA":           20,
		"RATING_AGENCY_CSCF":          21,
		"RATING_AGENCY_DJCTQ":         22,
		"RATING_AGENCY_EIRIN":         23,
		"RATING_AGENCY_ESRB":          24,
		"RATING_AGENCY_FAB":           25,
		"RATING_AGENCY_FCB":           26,
		"RATING_AGENCY_FCO":           27,
		"RATING_AGENCY_FILM_CH":       28,
		"RATING_AGENCY_FILM_CZ":       29,
		"RATING_AGENCY_FILM_EG":       30,
		"RATING_AGENCY_FILM_EE":       31,
		"RATING_AGENCY_FILM_GR":       32,
		"RATING_AGENCY_FILM_PE":       33,
		"RATING_AGENCY_FILM_SK":       34,
		"RATING_AGENCY_FILMTILSYNET":  35,
		"RATING_AGENCY_FPB":           36,
		"RATING_AGENCY_FRB":           37,
		"RATING_AGENCY_FSK":           38,
		"RATING_AGENCY_ICAA":          39,
		"RATING_AGENCY_IFCO":          40,
		"RATING_AGENCY_IFCOF":         41,
		"RATING_AGENCY_INCAA":         42,
		"RATING_AGENCY_KFCB":          43,
		"RATING_AGENCY_KIJKWIJZER":    44,
		"RATING_AGENCY_KMRB":          45,
		"RATING_AGENCY_KR":            46,
		"RATING_AGENCY_KRRIT":         47,
		"RATING_AGENCY_LSF":           48,
		"RATING_AGENCY_MBACT":         49,
		"RATING_AGENCY_MBU":           50,
		"RATING_AGENCY_MCCAA":         51,
		"RATING_AGENCY_MDA":           52,
		"RATING_AGENCY_MDCB":          53,
		"RATING_AGENCY_MEDIETILSYNET": 54,
		"RATING_AGENCY_MEKU":          55,
		"RATING_AGENCY_MFCB":          56,
		"RATING_AGENCY_MIC":           57,
		"RATING_AGENCY_MKRF":          58,
		"RATING_AGENCY_MOC":           59,
		"RATING_AGENCY_MOC_TW":        60,
		"RATING_AGENCY_MPAA":          61,
		"RATING_AGENCY_MPAAT":         62,
		"RATING_AGENCY_MTRCB":         63,
		"RATING_AGENCY_NBC":           64,
		"RATING_AGENCY_NCS":           65,
		"RATING_AGENCY_NFRC":          66,
		"RATING_AGENCY_NFVCB":         67,
		"RATING_AGENCY_NICAM":         68,
		"RATING_AGENCY_NKC":           69,
		"RATING_AGENCY_OFLC":          70,
		"RATING_AGENCY_OFLC_NZ":       71,
		"RATING_AGENCY_OFRB":          72,
		"RATING_AGENCY_PEGI":          73,
		"RATING_AGENCY_RCNOF":         74,
		"RATING_AGENCY_RDCQ":          75,
		"RATING_AGENCY_RIAA":          76,
		"RATING_AGENCY_RTC":           77,
		"RATING_AGENCY_RTE":           78,
		"RATING_AGENCY_SBB":           79,
		"RATING_AGENCY_SIBCI":         80,
		"RATING_AGENCY_SMAIS":         81,
		"RATING_AGENCY_SM_SA":         82,
		"RATING_AGENCY_SPIO_JK":       83,
		"RATING_AGENCY_USFA":          84,
		"RATING_AGENCY_TELA":          85,
		"RATING_AGENCY_TVPG":          86,
		"RATING_AGENCY_USERDEFINED":   87,
		"RATING_AGENCY_VET":           88,
	}
)

func (x RatingAgency) Enum() *RatingAgency {
	p := new(RatingAgency)
	*p = x
	return p
}

func (x RatingAgency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RatingAgency) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[117].Descriptor()
}

func (RatingAgency) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[117]
}

func (x RatingAgency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RatingAgency.Descriptor instead.
func (RatingAgency) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{117}
}

type RatingReason int32

const (
	RatingReason_RATING_REASON_UNSPECIFIED               RatingReason = 0
	RatingReason_RATING_REASON_BEHAVIOUR                 RatingReason = 1
	RatingReason_RATING_REASON_BLASPHEMY                 RatingReason = 2
	RatingReason_RATING_REASON_CRIME                     RatingReason = 3
	RatingReason_RATING_REASON_DISCRIMINATIONORPREJUDICE RatingReason = 4
	RatingReason_RATING_REASON_DRUGS                     RatingReason = 5
	RatingReason_RATING_REASON_EXPLICITSEX               RatingReason = 6
	RatingReason_RATING_REASON_EXTREMEVIOLENCE           RatingReason = 7
	RatingReason_RATING_REASON_FEARORHORROR              RatingReason = 8
	RatingReason_RATING_REASON_GAMBLING                  RatingReason = 9
	RatingReason_RATING_REASON_ILLEGALDRUGS              RatingReason = 10
	RatingReason_RATING_REASON_LANGUAGE                  RatingReason = 11
	RatingReason_RATING_REASON_LEGALDRUGS                RatingReason = 12
	RatingReason_RATING_REASON_NUDITY                    RatingReason = 13
	RatingReason_RATING_REASON_ONLINEGAMEPLAY            RatingReason = 14
	RatingReason_RATING_REASON_SEX                       RatingReason = 15
	RatingReason_RATING_REASON_SEXUALVIOLENCE            RatingReason = 16
	RatingReason_RATING_REASON_THEME                     RatingReason = 17
	RatingReason_RATING_REASON_USERDEFINED               RatingReason = 18
	RatingReason_RATING_REASON_VIOLENCE                  RatingReason = 19
)

// Enum value maps for RatingReason.
var (
	RatingReason_name = map[int32]string{
		0:  "RATING_REASON_UNSPECIFIED",
		1:  "RATING_REASON_BEHAVIOUR",
		2:  "RATING_REASON_BLASPHEMY",
		3:  "RATING_REASON_CRIME",
		4:  "RATING_REASON_DISCRIMINATIONORPREJUDICE",
		5:  "RATING_REASON_DRUGS",
		6:  "RATING_REASON_EXPLICITSEX",
		7:  "RATING_REASON_EXTREMEVIOLENCE",
		8:  "RATING_REASON_FEARORHORROR",
		9:  "RATING_REASON_GAMBLING",
		10: "RATING_REASON_ILLEGALDRUGS",
		11: "RATING_REASON_LANGUAGE",
		12: "RATING_REASON_LEGALDRUGS",
		13: "RATING_REASON_NUDITY",
		14: "RATING_REASON_ONLINEGAMEPLAY",
		15: "RATING_REASON_SEX",
		16: "RATING_REASON_SEXUALVIOLENCE",
		17: "RATING_REASON_THEME",
		18: "RATING_REASON_USERDEFINED",
		19: "RATING_REASON_VIOLENCE",
	}
	RatingReason_value = map[string]int32{
		"RATING_REASON_UNSPECIFIED":               0,
		"RATING_REASON_BEHAVIOUR":                 1,
		"RATING_REASON_BLASPHEMY":                 2,
		"RATING_REASON_CRIME":                     3,
		"RATING_REASON_DISCRIMINATIONORPREJUDICE": 4,
		"RATING_REASON_DRUGS":                     5,
		"RATING_REASON_EXPLICITSEX":               6,
		"RATING_REASON_EXTREMEVIOLENCE":           7,
		"RATING_REASON_FEARORHORROR":              8,
		"RATING_REASON_GAMBLING":                  9,
		"RATING_REASON_ILLEGALDRUGS":              10,
		"RATING_REASON_LANGUAGE":                  11,
		"RATING_REASON_LEGALDRUGS":                12,
		"RATING_REASON_NUDITY":                    13,
		"RATING_REASON_ONLINEGAMEPLAY":            14,
		"RATING_REASON_SEX":                       15,
		"RATING_REASON_SEXUALVIOLENCE":            16,
		"RATING_REASON_THEME":                     17,
		"RATING_REASON_USERDEFINED":               18,
		"RATING_REASON_VIOLENCE":                  19,
	}
)

func (x RatingReason) Enum() *RatingReason {
	p := new(RatingReason)
	*p = x
	return p
}

func (x RatingReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RatingReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[118].Descriptor()
}

func (RatingReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[118]
}

func (x RatingReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RatingReason.Descriptor instead.
func (RatingReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{118}
}

type RdrMessageType int32

const (
	RdrMessageType_RDR_MESSAGE_TYPE_UNSPECIFIED                                     RdrMessageType = 0
	RdrMessageType_RDR_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE   RdrMessageType = 1
	RdrMessageType_RDR_MESSAGE_TYPE_REQUESTSOUNDRECORDINGRIGHTSCLAIMMESSAGE         RdrMessageType = 2
	RdrMessageType_RDR_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE          RdrMessageType = 3
	RdrMessageType_RDR_MESSAGE_TYPE_RIGHTSCLAIMSTATUSUPDATEMESSAGE                  RdrMessageType = 4
	RdrMessageType_RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATEMESSAGE             RdrMessageType = 5
	RdrMessageType_RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATESTATUSUPDATEMESSAGE RdrMessageType = 6
	RdrMessageType_RDR_MESSAGE_TYPE_REVOKECOLLECTIONMANDATEMESSAGE                  RdrMessageType = 7
	RdrMessageType_RDR_MESSAGE_TYPE_SALESREPORTMESSAGE                              RdrMessageType = 8
	RdrMessageType_RDR_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE                     RdrMessageType = 9
	RdrMessageType_RDR_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE                       RdrMessageType = 10
)

// Enum value maps for RdrMessageType.
var (
	RdrMessageType_name = map[int32]string{
		0:  "RDR_MESSAGE_TYPE_UNSPECIFIED",
		1:  "RDR_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE",
		2:  "RDR_MESSAGE_TYPE_REQUESTSOUNDRECORDINGRIGHTSCLAIMMESSAGE",
		3:  "RDR_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE",
		4:  "RDR_MESSAGE_TYPE_RIGHTSCLAIMSTATUSUPDATEMESSAGE",
		5:  "RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATEMESSAGE",
		6:  "RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATESTATUSUPDATEMESSAGE",
		7:  "RDR_MESSAGE_TYPE_REVOKECOLLECTIONMANDATEMESSAGE",
		8:  "RDR_MESSAGE_TYPE_SALESREPORTMESSAGE",
		9:  "RDR_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE",
		10: "RDR_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE",
	}
	RdrMessageType_value = map[string]int32{
		"RDR_MESSAGE_TYPE_UNSPECIFIED":                                     0,
		"RDR_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE":   1,
		"RDR_MESSAGE_TYPE_REQUESTSOUNDRECORDINGRIGHTSCLAIMMESSAGE":         2,
		"RDR_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE":          3,
		"RDR_MESSAGE_TYPE_RIGHTSCLAIMSTATUSUPDATEMESSAGE":                  4,
		"RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATEMESSAGE":             5,
		"RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATESTATUSUPDATEMESSAGE": 6,
		"RDR_MESSAGE_TYPE_REVOKECOLLECTIONMANDATEMESSAGE":                  7,
		"RDR_MESSAGE_TYPE_SALESREPORTMESSAGE":                              8,
		"RDR_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE":                     9,
		"RDR_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE":                       10,
	}
)

func (x RdrMessageType) Enum() *RdrMessageType {
	p := new(RdrMessageType)
	*p = x
	return p
}

func (x RdrMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RdrMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[119].Descriptor()
}

func (RdrMessageType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[119]
}

func (x RdrMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RdrMessageType.Descriptor instead.
func (RdrMessageType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{119}
}

type RdrcFileStatus int32

const (
	RdrcFileStatus_RDRC_FILE_STATUS_UNSPECIFIED  RdrcFileStatus = 0
	RdrcFileStatus_RDRC_FILE_STATUS_FILEOK       RdrcFileStatus = 1
	RdrcFileStatus_RDRC_FILE_STATUS_USERDEFINED  RdrcFileStatus = 2
	RdrcFileStatus_RDRC_FILE_STATUS_ERROR        RdrcFileStatus = 3
	RdrcFileStatus_RDRC_FILE_STATUS_FILERECEIVED RdrcFileStatus = 4
	RdrcFileStatus_RDRC_FILE_STATUS_FILEVALID    RdrcFileStatus = 5
)

// Enum value maps for RdrcFileStatus.
var (
	RdrcFileStatus_name = map[int32]string{
		0: "RDRC_FILE_STATUS_UNSPECIFIED",
		1: "RDRC_FILE_STATUS_FILEOK",
		2: "RDRC_FILE_STATUS_USERDEFINED",
		3: "RDRC_FILE_STATUS_ERROR",
		4: "RDRC_FILE_STATUS_FILERECEIVED",
		5: "RDRC_FILE_STATUS_FILEVALID",
	}
	RdrcFileStatus_value = map[string]int32{
		"RDRC_FILE_STATUS_UNSPECIFIED":  0,
		"RDRC_FILE_STATUS_FILEOK":       1,
		"RDRC_FILE_STATUS_USERDEFINED":  2,
		"RDRC_FILE_STATUS_ERROR":        3,
		"RDRC_FILE_STATUS_FILERECEIVED": 4,
		"RDRC_FILE_STATUS_FILEVALID":    5,
	}
)

func (x RdrcFileStatus) Enum() *RdrcFileStatus {
	p := new(RdrcFileStatus)
	*p = x
	return p
}

func (x RdrcFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RdrcFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[120].Descriptor()
}

func (RdrcFileStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[120]
}

func (x RdrcFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RdrcFileStatus.Descriptor instead.
func (RdrcFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{120}
}

type RecipientRevenueType int32

const (
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_UNSPECIFIED                 RecipientRevenueType = 0
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE RecipientRevenueType = 1
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE            RecipientRevenueType = 2
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE             RecipientRevenueType = 3
)

// Enum value maps for RecipientRevenueType.
var (
	RecipientRevenueType_name = map[int32]string{
		0: "RECIPIENT_REVENUE_TYPE_UNSPECIFIED",
		1: "RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE",
		2: "RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE",
		3: "RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE",
	}
	RecipientRevenueType_value = map[string]int32{
		"RECIPIENT_REVENUE_TYPE_UNSPECIFIED":                 0,
		"RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE": 1,
		"RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE":            2,
		"RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE":             3,
	}
)

func (x RecipientRevenueType) Enum() *RecipientRevenueType {
	p := new(RecipientRevenueType)
	*p = x
	return p
}

func (x RecipientRevenueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipientRevenueType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[121].Descriptor()
}

func (RecipientRevenueType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[121]
}

func (x RecipientRevenueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipientRevenueType.Descriptor instead.
func (RecipientRevenueType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{121}
}

type RecordingMode int32

const (
	RecordingMode_RECORDING_MODE_UNSPECIFIED       RecordingMode = 0
	RecordingMode_RECORDING_MODE_BINAURALAUDIO     RecordingMode = 1
	RecordingMode_RECORDING_MODE_LCR               RecordingMode = 2
	RecordingMode_RECORDING_MODE_MONO              RecordingMode = 3
	RecordingMode_RECORDING_MODE_MULTICHANNELAUDIO RecordingMode = 4
	RecordingMode_RECORDING_MODE_MULTITRACK        RecordingMode = 5
	RecordingMode_RECORDING_MODE_QUAD              RecordingMode = 6
	RecordingMode_RECORDING_MODE_STEMS             RecordingMode = 7
	RecordingMode_RECORDING_MODE_STEREO            RecordingMode = 8
	RecordingMode_RECORDING_MODE_SURROUNDSOUND     RecordingMode = 9
	RecordingMode_RECORDING_MODE_UNKNOWN           RecordingMode = 10
)

// Enum value maps for RecordingMode.
var (
	RecordingMode_name = map[int32]string{
		0:  "RECORDING_MODE_UNSPECIFIED",
		1:  "RECORDING_MODE_BINAURALAUDIO",
		2:  "RECORDING_MODE_LCR",
		3:  "RECORDING_MODE_MONO",
		4:  "RECORDING_MODE_MULTICHANNELAUDIO",
		5:  "RECORDING_MODE_MULTITRACK",
		6:  "RECORDING_MODE_QUAD",
		7:  "RECORDING_MODE_STEMS",
		8:  "RECORDING_MODE_STEREO",
		9:  "RECORDING_MODE_SURROUNDSOUND",
		10: "RECORDING_MODE_UNKNOWN",
	}
	RecordingMode_value = map[string]int32{
		"RECORDING_MODE_UNSPECIFIED":       0,
		"RECORDING_MODE_BINAURALAUDIO":     1,
		"RECORDING_MODE_LCR":               2,
		"RECORDING_MODE_MONO":              3,
		"RECORDING_MODE_MULTICHANNELAUDIO": 4,
		"RECORDING_MODE_MULTITRACK":        5,
		"RECORDING_MODE_QUAD":              6,
		"RECORDING_MODE_STEMS":             7,
		"RECORDING_MODE_STEREO":            8,
		"RECORDING_MODE_SURROUNDSOUND":     9,
		"RECORDING_MODE_UNKNOWN":           10,
	}
)

func (x RecordingMode) Enum() *RecordingMode {
	p := new(RecordingMode)
	*p = x
	return p
}

func (x RecordingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[122].Descriptor()
}

func (RecordingMode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[122]
}

func (x RecordingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordingMode.Descriptor instead.
func (RecordingMode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{122}
}

type RecordingPartType int32

const (
	RecordingPartType_RECORDING_PART_TYPE_UNSPECIFIED  RecordingPartType = 0
	RecordingPartType_RECORDING_PART_TYPE_BREAKDOWN    RecordingPartType = 1
	RecordingPartType_RECORDING_PART_TYPE_BRIDGE       RecordingPartType = 2
	RecordingPartType_RECORDING_PART_TYPE_CHORUS       RecordingPartType = 3
	RecordingPartType_RECORDING_PART_TYPE_CODA         RecordingPartType = 4
	RecordingPartType_RECORDING_PART_TYPE_DROP         RecordingPartType = 5
	RecordingPartType_RECORDING_PART_TYPE_HEAD         RecordingPartType = 6
	RecordingPartType_RECORDING_PART_TYPE_HOOK         RecordingPartType = 7
	RecordingPartType_RECORDING_PART_TYPE_INTRO        RecordingPartType = 8
	RecordingPartType_RECORDING_PART_TYPE_KEYCHANGE    RecordingPartType = 9
	RecordingPartType_RECORDING_PART_TYPE_MIDDLEEIGHTH RecordingPartType = 10
	RecordingPartType_RECORDING_PART_TYPE_OUTRO        RecordingPartType = 11
	RecordingPartType_RECORDING_PART_TYPE_PRECHORUS    RecordingPartType = 12
	RecordingPartType_RECORDING_PART_TYPE_PREVIEW      RecordingPartType = 13
	RecordingPartType_RECORDING_PART_TYPE_SOLOSECTION  RecordingPartType = 14
	RecordingPartType_RECORDING_PART_TYPE_USED         RecordingPartType = 15
	RecordingPartType_RECORDING_PART_TYPE_USERDEFINED  RecordingPartType = 16
	RecordingPartType_RECORDING_PART_TYPE_VERSE        RecordingPartType = 17
)

// Enum value maps for RecordingPartType.
var (
	RecordingPartType_name = map[int32]string{
		0:  "RECORDING_PART_TYPE_UNSPECIFIED",
		1:  "RECORDING_PART_TYPE_BREAKDOWN",
		2:  "RECORDING_PART_TYPE_BRIDGE",
		3:  "RECORDING_PART_TYPE_CHORUS",
		4:  "RECORDING_PART_TYPE_CODA",
		5:  "RECORDING_PART_TYPE_DROP",
		6:  "RECORDING_PART_TYPE_HEAD",
		7:  "RECORDING_PART_TYPE_HOOK",
		8:  "RECORDING_PART_TYPE_INTRO",
		9:  "RECORDING_PART_TYPE_KEYCHANGE",
		10: "RECORDING_PART_TYPE_MIDDLEEIGHTH",
		11: "RECORDING_PART_TYPE_OUTRO",
		12: "RECORDING_PART_TYPE_PRECHORUS",
		13: "RECORDING_PART_TYPE_PREVIEW",
		14: "RECORDING_PART_TYPE_SOLOSECTION",
		15: "RECORDING_PART_TYPE_USED",
		16: "RECORDING_PART_TYPE_USERDEFINED",
		17: "RECORDING_PART_TYPE_VERSE",
	}
	RecordingPartType_value = map[string]int32{
		"RECORDING_PART_TYPE_UNSPECIFIED":  0,
		"RECORDING_PART_TYPE_BREAKDOWN":    1,
		"RECORDING_PART_TYPE_BRIDGE":       2,
		"RECORDING_PART_TYPE_CHORUS":       3,
		"RECORDING_PART_TYPE_CODA":         4,
		"RECORDING_PART_TYPE_DROP":         5,
		"RECORDING_PART_TYPE_HEAD":         6,
		"RECORDING_PART_TYPE_HOOK":         7,
		"RECORDING_PART_TYPE_INTRO":        8,
		"RECORDING_PART_TYPE_KEYCHANGE":    9,
		"RECORDING_PART_TYPE_MIDDLEEIGHTH": 10,
		"RECORDING_PART_TYPE_OUTRO":        11,
		"RECORDING_PART_TYPE_PRECHORUS":    12,
		"RECORDING_PART_TYPE_PREVIEW":      13,
		"RECORDING_PART_TYPE_SOLOSECTION":  14,
		"RECORDING_PART_TYPE_USED":         15,
		"RECORDING_PART_TYPE_USERDEFINED":  16,
		"RECORDING_PART_TYPE_VERSE":        17,
	}
)

func (x RecordingPartType) Enum() *RecordingPartType {
	p := new(RecordingPartType)
	*p = x
	return p
}

func (x RecordingPartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingPartType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[123].Descriptor()
}

func (RecordingPartType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[123]
}

func (x RecordingPartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordingPartType.Descriptor instead.
func (RecordingPartType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{123}
}

type ReferenceCreation int32

const (
	ReferenceCreation_REFERENCE_CREATION_UNSPECIFIED       ReferenceCreation = 0
	ReferenceCreation_REFERENCE_CREATION_REFERENCERESOURCE ReferenceCreation = 1
	ReferenceCreation_REFERENCE_CREATION_CONSUMERRESOURCE  ReferenceCreation = 2
)

// Enum value maps for ReferenceCreation.
var (
	ReferenceCreation_name = map[int32]string{
		0: "REFERENCE_CREATION_UNSPECIFIED",
		1: "REFERENCE_CREATION_REFERENCERESOURCE",
		2: "REFERENCE_CREATION_CONSUMERRESOURCE",
	}
	ReferenceCreation_value = map[string]int32{
		"REFERENCE_CREATION_UNSPECIFIED":       0,
		"REFERENCE_CREATION_REFERENCERESOURCE": 1,
		"REFERENCE_CREATION_CONSUMERRESOURCE":  2,
	}
)

func (x ReferenceCreation) Enum() *ReferenceCreation {
	p := new(ReferenceCreation)
	*p = x
	return p
}

func (x ReferenceCreation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceCreation) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[124].Descriptor()
}

func (ReferenceCreation) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[124]
}

func (x ReferenceCreation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceCreation.Descriptor instead.
func (ReferenceCreation) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{124}
}

type ReferenceUnit int32

const (
	ReferenceUnit_REFERENCE_UNIT_UNSPECIFIED ReferenceUnit = 0
	ReferenceUnit_REFERENCE_UNIT_PERLICENSE  ReferenceUnit = 1
	ReferenceUnit_REFERENCE_UNIT_PERUSE      ReferenceUnit = 2
)

// Enum value maps for ReferenceUnit.
var (
	ReferenceUnit_name = map[int32]string{
		0: "REFERENCE_UNIT_UNSPECIFIED",
		1: "REFERENCE_UNIT_PERLICENSE",
		2: "REFERENCE_UNIT_PERUSE",
	}
	ReferenceUnit_value = map[string]int32{
		"REFERENCE_UNIT_UNSPECIFIED": 0,
		"REFERENCE_UNIT_PERLICENSE":  1,
		"REFERENCE_UNIT_PERUSE":      2,
	}
)

func (x ReferenceUnit) Enum() *ReferenceUnit {
	p := new(ReferenceUnit)
	*p = x
	return p
}

func (x ReferenceUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[125].Descriptor()
}

func (ReferenceUnit) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[125]
}

func (x ReferenceUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceUnit.Descriptor instead.
func (ReferenceUnit) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{125}
}

type RegistrationStatus int32

const (
	RegistrationStatus_REGISTRATION_STATUS_UNSPECIFIED                  RegistrationStatus = 0
	RegistrationStatus_REGISTRATION_STATUS_CLAIMMEETSCOREDATAPROFILE    RegistrationStatus = 1
	RegistrationStatus_REGISTRATION_STATUS_CLAIMMEETSRECOMMENDEDPROFILE RegistrationStatus = 2
	RegistrationStatus_REGISTRATION_STATUS_PENDINGREVIEW                RegistrationStatus = 3
	RegistrationStatus_REGISTRATION_STATUS_RESOURCEREGISTEREDINVALID    RegistrationStatus = 4
	RegistrationStatus_REGISTRATION_STATUS_RESOURCEREGISTEREDVALID      RegistrationStatus = 5
	RegistrationStatus_REGISTRATION_STATUS_REGISTRATIONREJECTED         RegistrationStatus = 6
)

// Enum value maps for RegistrationStatus.
var (
	RegistrationStatus_name = map[int32]string{
		0: "REGISTRATION_STATUS_UNSPECIFIED",
		1: "REGISTRATION_STATUS_CLAIMMEETSCOREDATAPROFILE",
		2: "REGISTRATION_STATUS_CLAIMMEETSRECOMMENDEDPROFILE",
		3: "REGISTRATION_STATUS_PENDINGREVIEW",
		4: "REGISTRATION_STATUS_RESOURCEREGISTEREDINVALID",
		5: "REGISTRATION_STATUS_RESOURCEREGISTEREDVALID",
		6: "REGISTRATION_STATUS_REGISTRATIONREJECTED",
	}
	RegistrationStatus_value = map[string]int32{
		"REGISTRATION_STATUS_UNSPECIFIED":                  0,
		"REGISTRATION_STATUS_CLAIMMEETSCOREDATAPROFILE":    1,
		"REGISTRATION_STATUS_CLAIMMEETSRECOMMENDEDPROFILE": 2,
		"REGISTRATION_STATUS_PENDINGREVIEW":                3,
		"REGISTRATION_STATUS_RESOURCEREGISTEREDINVALID":    4,
		"REGISTRATION_STATUS_RESOURCEREGISTEREDVALID":      5,
		"REGISTRATION_STATUS_REGISTRATIONREJECTED":         6,
	}
)

func (x RegistrationStatus) Enum() *RegistrationStatus {
	p := new(RegistrationStatus)
	*p = x
	return p
}

func (x RegistrationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistrationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[126].Descriptor()
}

func (RegistrationStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[126]
}

func (x RegistrationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistrationStatus.Descriptor instead.
func (RegistrationStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{126}
}

type RelatedResourceType int32

const (
	RelatedResourceType_RELATED_RESOURCE_TYPE_UNSPECIFIED         RelatedResourceType = 0
	RelatedResourceType_RELATED_RESOURCE_TYPE_ACAPPELLAVERSION    RelatedResourceType = 1
	RelatedResourceType_RELATED_RESOURCE_TYPE_ACOUSTICVERSION     RelatedResourceType = 2
	RelatedResourceType_RELATED_RESOURCE_TYPE_ALBUMVERSION        RelatedResourceType = 3
	RelatedResourceType_RELATED_RESOURCE_TYPE_ALTERNATIVEVERSION  RelatedResourceType = 4
	RelatedResourceType_RELATED_RESOURCE_TYPE_CLEANVERSION        RelatedResourceType = 5
	RelatedResourceType_RELATED_RESOURCE_TYPE_COVER               RelatedResourceType = 6
	RelatedResourceType_RELATED_RESOURCE_TYPE_DEMOVERSION         RelatedResourceType = 7
	RelatedResourceType_RELATED_RESOURCE_TYPE_INSTRUMENTALVERSION RelatedResourceType = 8
	RelatedResourceType_RELATED_RESOURCE_TYPE_LIVEVERSION         RelatedResourceType = 9
	RelatedResourceType_RELATED_RESOURCE_TYPE_MEDLEY              RelatedResourceType = 10
	RelatedResourceType_RELATED_RESOURCE_TYPE_ORIGINALRECORDING   RelatedResourceType = 11
	RelatedResourceType_RELATED_RESOURCE_TYPE_RADIOVERSION        RelatedResourceType = 12
	RelatedResourceType_RELATED_RESOURCE_TYPE_SINGLEVERSION       RelatedResourceType = 13
	RelatedResourceType_RELATED_RESOURCE_TYPE_STUDIOVERSION       RelatedResourceType = 14
	RelatedResourceType_RELATED_RESOURCE_TYPE_TVTRACK             RelatedResourceType = 15
	RelatedResourceType_RELATED_RESOURCE_TYPE_USERDEFINED         RelatedResourceType = 16
)

// Enum value maps for RelatedResourceType.
var (
	RelatedResourceType_name = map[int32]string{
		0:  "RELATED_RESOURCE_TYPE_UNSPECIFIED",
		1:  "RELATED_RESOURCE_TYPE_ACAPPELLAVERSION",
		2:  "RELATED_RESOURCE_TYPE_ACOUSTICVERSION",
		3:  "RELATED_RESOURCE_TYPE_ALBUMVERSION",
		4:  "RELATED_RESOURCE_TYPE_ALTERNATIVEVERSION",
		5:  "RELATED_RESOURCE_TYPE_CLEANVERSION",
		6:  "RELATED_RESOURCE_TYPE_COVER",
		7:  "RELATED_RESOURCE_TYPE_DEMOVERSION",
		8:  "RELATED_RESOURCE_TYPE_INSTRUMENTALVERSION",
		9:  "RELATED_RESOURCE_TYPE_LIVEVERSION",
		10: "RELATED_RESOURCE_TYPE_MEDLEY",
		11: "RELATED_RESOURCE_TYPE_ORIGINALRECORDING",
		12: "RELATED_RESOURCE_TYPE_RADIOVERSION",
		13: "RELATED_RESOURCE_TYPE_SINGLEVERSION",
		14: "RELATED_RESOURCE_TYPE_STUDIOVERSION",
		15: "RELATED_RESOURCE_TYPE_TVTRACK",
		16: "RELATED_RESOURCE_TYPE_USERDEFINED",
	}
	RelatedResourceType_value = map[string]int32{
		"RELATED_RESOURCE_TYPE_UNSPECIFIED":         0,
		"RELATED_RESOURCE_TYPE_ACAPPELLAVERSION":    1,
		"RELATED_RESOURCE_TYPE_ACOUSTICVERSION":     2,
		"RELATED_RESOURCE_TYPE_ALBUMVERSION":        3,
		"RELATED_RESOURCE_TYPE_ALTERNATIVEVERSION":  4,
		"RELATED_RESOURCE_TYPE_CLEANVERSION":        5,
		"RELATED_RESOURCE_TYPE_COVER":               6,
		"RELATED_RESOURCE_TYPE_DEMOVERSION":         7,
		"RELATED_RESOURCE_TYPE_INSTRUMENTALVERSION": 8,
		"RELATED_RESOURCE_TYPE_LIVEVERSION":         9,
		"RELATED_RESOURCE_TYPE_MEDLEY":              10,
		"RELATED_RESOURCE_TYPE_ORIGINALRECORDING":   11,
		"RELATED_RESOURCE_TYPE_RADIOVERSION":        12,
		"RELATED_RESOURCE_TYPE_SINGLEVERSION":       13,
		"RELATED_RESOURCE_TYPE_STUDIOVERSION":       14,
		"RELATED_RESOURCE_TYPE_TVTRACK":             15,
		"RELATED_RESOURCE_TYPE_USERDEFINED":         16,
	}
)

func (x RelatedResourceType) Enum() *RelatedResourceType {
	p := new(RelatedResourceType)
	*p = x
	return p
}

func (x RelatedResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelatedResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[127].Descriptor()
}

func (RelatedResourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[127]
}

func (x RelatedResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelatedResourceType.Descriptor instead.
func (RelatedResourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{127}
}

type RelationalRelator int32

const (
	RelationalRelator_RELATIONAL_RELATOR_UNSPECIFIED       RelationalRelator = 0
	RelationalRelator_RELATIONAL_RELATOR_EQUALTO           RelationalRelator = 1
	RelationalRelator_RELATIONAL_RELATOR_LESSTHAN          RelationalRelator = 2
	RelationalRelator_RELATIONAL_RELATOR_LESSTHANOREQUALTO RelationalRelator = 3
	RelationalRelator_RELATIONAL_RELATOR_MORETHAN          RelationalRelator = 4
	RelationalRelator_RELATIONAL_RELATOR_MORETHANOREQUALTO RelationalRelator = 5
	RelationalRelator_RELATIONAL_RELATOR_NOTEQUALTO        RelationalRelator = 6
)

// Enum value maps for RelationalRelator.
var (
	RelationalRelator_name = map[int32]string{
		0: "RELATIONAL_RELATOR_UNSPECIFIED",
		1: "RELATIONAL_RELATOR_EQUALTO",
		2: "RELATIONAL_RELATOR_LESSTHAN",
		3: "RELATIONAL_RELATOR_LESSTHANOREQUALTO",
		4: "RELATIONAL_RELATOR_MORETHAN",
		5: "RELATIONAL_RELATOR_MORETHANOREQUALTO",
		6: "RELATIONAL_RELATOR_NOTEQUALTO",
	}
	RelationalRelator_value = map[string]int32{
		"RELATIONAL_RELATOR_UNSPECIFIED":       0,
		"RELATIONAL_RELATOR_EQUALTO":           1,
		"RELATIONAL_RELATOR_LESSTHAN":          2,
		"RELATIONAL_RELATOR_LESSTHANOREQUALTO": 3,
		"RELATIONAL_RELATOR_MORETHAN":          4,
		"RELATIONAL_RELATOR_MORETHANOREQUALTO": 5,
		"RELATIONAL_RELATOR_NOTEQUALTO":        6,
	}
)

func (x RelationalRelator) Enum() *RelationalRelator {
	p := new(RelationalRelator)
	*p = x
	return p
}

func (x RelationalRelator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationalRelator) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[128].Descriptor()
}

func (RelationalRelator) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[128]
}

func (x RelationalRelator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationalRelator.Descriptor instead.
func (RelationalRelator) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{128}
}

type ReleaseProfileVariantVersionId int32

const (
	ReleaseProfileVariantVersionId_RELEASE_PROFILE_VARIANT_VERSION_ID_UNSPECIFIED        ReleaseProfileVariantVersionId = 0
	ReleaseProfileVariantVersionId_RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET           ReleaseProfileVariantVersionId = 1
	ReleaseProfileVariantVersionId_RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET_CLASSICAL ReleaseProfileVariantVersionId = 2
	ReleaseProfileVariantVersionId_RELEASE_PROFILE_VARIANT_VERSION_ID_CLASSICAL          ReleaseProfileVariantVersionId = 3
)

// Enum value maps for ReleaseProfileVariantVersionId.
var (
	ReleaseProfileVariantVersionId_name = map[int32]string{
		0: "RELEASE_PROFILE_VARIANT_VERSION_ID_UNSPECIFIED",
		1: "RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET",
		2: "RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET_CLASSICAL",
		3: "RELEASE_PROFILE_VARIANT_VERSION_ID_CLASSICAL",
	}
	ReleaseProfileVariantVersionId_value = map[string]int32{
		"RELEASE_PROFILE_VARIANT_VERSION_ID_UNSPECIFIED":        0,
		"RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET":           1,
		"RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET_CLASSICAL": 2,
		"RELEASE_PROFILE_VARIANT_VERSION_ID_CLASSICAL":          3,
	}
)

func (x ReleaseProfileVariantVersionId) Enum() *ReleaseProfileVariantVersionId {
	p := new(ReleaseProfileVariantVersionId)
	*p = x
	return p
}

func (x ReleaseProfileVariantVersionId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseProfileVariantVersionId) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[129].Descriptor()
}

func (ReleaseProfileVariantVersionId) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[129]
}

func (x ReleaseProfileVariantVersionId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseProfileVariantVersionId.Descriptor instead.
func (ReleaseProfileVariantVersionId) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{129}
}

type ReleaseProfileVersionId int32

const (
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_UNSPECIFIED              ReleaseProfileVersionId = 0
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_AUDIO                    ReleaseProfileVersionId = 1
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_DJMIX                    ReleaseProfileVersionId = 2
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_LONGFORMMUSICALWORKVIDEO ReleaseProfileVersionId = 3
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_MIXEDMEDIA               ReleaseProfileVersionId = 4
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_RINGTONE                 ReleaseProfileVersionId = 5
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_SIMPLEAUDIOSINGLE        ReleaseProfileVersionId = 6
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_SIMPLEVIDEOSINGLE        ReleaseProfileVersionId = 7
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_VIDEO                    ReleaseProfileVersionId = 8
)

// Enum value maps for ReleaseProfileVersionId.
var (
	ReleaseProfileVersionId_name = map[int32]string{
		0: "RELEASE_PROFILE_VERSION_ID_UNSPECIFIED",
		1: "RELEASE_PROFILE_VERSION_ID_AUDIO",
		2: "RELEASE_PROFILE_VERSION_ID_DJMIX",
		3: "RELEASE_PROFILE_VERSION_ID_LONGFORMMUSICALWORKVIDEO",
		4: "RELEASE_PROFILE_VERSION_ID_MIXEDMEDIA",
		5: "RELEASE_PROFILE_VERSION_ID_RINGTONE",
		6: "RELEASE_PROFILE_VERSION_ID_SIMPLEAUDIOSINGLE",
		7: "RELEASE_PROFILE_VERSION_ID_SIMPLEVIDEOSINGLE",
		8: "RELEASE_PROFILE_VERSION_ID_VIDEO",
	}
	ReleaseProfileVersionId_value = map[string]int32{
		"RELEASE_PROFILE_VERSION_ID_UNSPECIFIED":              0,
		"RELEASE_PROFILE_VERSION_ID_AUDIO":                    1,
		"RELEASE_PROFILE_VERSION_ID_DJMIX":                    2,
		"RELEASE_PROFILE_VERSION_ID_LONGFORMMUSICALWORKVIDEO": 3,
		"RELEASE_PROFILE_VERSION_ID_MIXEDMEDIA":               4,
		"RELEASE_PROFILE_VERSION_ID_RINGTONE":                 5,
		"RELEASE_PROFILE_VERSION_ID_SIMPLEAUDIOSINGLE":        6,
		"RELEASE_PROFILE_VERSION_ID_SIMPLEVIDEOSINGLE":        7,
		"RELEASE_PROFILE_VERSION_ID_VIDEO":                    8,
	}
)

func (x ReleaseProfileVersionId) Enum() *ReleaseProfileVersionId {
	p := new(ReleaseProfileVersionId)
	*p = x
	return p
}

func (x ReleaseProfileVersionId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseProfileVersionId) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[130].Descriptor()
}

func (ReleaseProfileVersionId) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[130]
}

func (x ReleaseProfileVersionId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseProfileVersionId.Descriptor instead.
func (ReleaseProfileVersionId) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{130}
}

type ReleaseRelationshipType int32

const (
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED                   ReleaseRelationshipType = 0
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE         ReleaseRelationshipType = 1
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE     ReleaseRelationshipType = 2
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM                ReleaseRelationshipType = 3
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST         ReleaseRelationshipType = 4
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST                 ReleaseRelationshipType = 5
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT       ReleaseRelationshipType = 6
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT             ReleaseRelationshipType = 7
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING           ReleaseRelationshipType = 8
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL ReleaseRelationshipType = 9
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO           ReleaseRelationshipType = 10
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO           ReleaseRelationshipType = 11
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM           ReleaseRelationshipType = 12
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO                   ReleaseRelationshipType = 13
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO                   ReleaseRelationshipType = 14
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE               ReleaseRelationshipType = 15
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL ReleaseRelationshipType = 16
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE          ReleaseRelationshipType = 17
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM          ReleaseRelationshipType = 18
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_UNKNOWN                       ReleaseRelationshipType = 19
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_USERDEFINED                   ReleaseRelationshipType = 20
)

// Enum value maps for ReleaseRelationshipType.
var (
	ReleaseRelationshipType_name = map[int32]string{
		0:  "RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED",
		1:  "RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE",
		2:  "RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE",
		3:  "RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM",
		4:  "RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST",
		5:  "RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST",
		6:  "RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT",
		7:  "RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT",
		8:  "RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING",
		9:  "RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL",
		10: "RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO",
		11: "RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO",
		12: "RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM",
		13: "RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO",
		14: "RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO",
		15: "RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE",
		16: "RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL",
		17: "RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE",
		18: "RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM",
		19: "RELEASE_RELATIONSHIP_TYPE_UNKNOWN",
		20: "RELEASE_RELATIONSHIP_TYPE_USERDEFINED",
	}
	ReleaseRelationshipType_value = map[string]int32{
		"RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED":                   0,
		"RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE":         1,
		"RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE":     2,
		"RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM":                3,
		"RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST":         4,
		"RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST":                 5,
		"RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT":       6,
		"RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT":             7,
		"RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING":           8,
		"RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL": 9,
		"RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO":           10,
		"RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO":           11,
		"RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM":           12,
		"RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO":                   13,
		"RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO":                   14,
		"RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE":               15,
		"RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL": 16,
		"RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE":          17,
		"RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM":          18,
		"RELEASE_RELATIONSHIP_TYPE_UNKNOWN":                       19,
		"RELEASE_RELATIONSHIP_TYPE_USERDEFINED":                   20,
	}
)

func (x ReleaseRelationshipType) Enum() *ReleaseRelationshipType {
	p := new(ReleaseRelationshipType)
	*p = x
	return p
}

func (x ReleaseRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[131].Descriptor()
}

func (ReleaseRelationshipType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[131]
}

func (x ReleaseRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseRelationshipType.Descriptor instead.
func (ReleaseRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{131}
}

type ReleaseResourceType int32

const (
	ReleaseResourceType_RELEASE_RESOURCE_TYPE_UNSPECIFIED       ReleaseResourceType = 0
	ReleaseResourceType_RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE   ReleaseResourceType = 1
	ReleaseResourceType_RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE ReleaseResourceType = 2
)

// Enum value maps for ReleaseResourceType.
var (
	ReleaseResourceType_name = map[int32]string{
		0: "RELEASE_RESOURCE_TYPE_UNSPECIFIED",
		1: "RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE",
		2: "RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE",
	}
	ReleaseResourceType_value = map[string]int32{
		"RELEASE_RESOURCE_TYPE_UNSPECIFIED":       0,
		"RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE":   1,
		"RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE": 2,
	}
)

func (x ReleaseResourceType) Enum() *ReleaseResourceType {
	p := new(ReleaseResourceType)
	*p = x
	return p
}

func (x ReleaseResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[132].Descriptor()
}

func (ReleaseResourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[132]
}

func (x ReleaseResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseResourceType.Descriptor instead.
func (ReleaseResourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{132}
}

type ReleaseType int32

const (
	ReleaseType_RELEASE_TYPE_UNSPECIFIED                        ReleaseType = 0
	ReleaseType_RELEASE_TYPE_ALBUM                              ReleaseType = 1
	ReleaseType_RELEASE_TYPE_ALERTTONERELEASE                   ReleaseType = 2
	ReleaseType_RELEASE_TYPE_ASPERCONTRACT                      ReleaseType = 3
	ReleaseType_RELEASE_TYPE_AUDIOBOOKRELEASE                   ReleaseType = 4
	ReleaseType_RELEASE_TYPE_AUDIODRAMARELEASE                  ReleaseType = 5
	ReleaseType_RELEASE_TYPE_BACKCOVERIMAGERELEASE              ReleaseType = 6
	ReleaseType_RELEASE_TYPE_BOOKLETBACKIMAGERELEASE            ReleaseType = 7
	ReleaseType_RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE           ReleaseType = 8
	ReleaseType_RELEASE_TYPE_BOOKLETRELEASE                     ReleaseType = 9
	ReleaseType_RELEASE_TYPE_BUNDLE                             ReleaseType = 10
	ReleaseType_RELEASE_TYPE_CLASSICALALBUM                     ReleaseType = 11
	ReleaseType_RELEASE_TYPE_CLASSICALDIGITALBOXEDSET           ReleaseType = 12
	ReleaseType_RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM           ReleaseType = 13
	ReleaseType_RELEASE_TYPE_CONCERTVIDEO                       ReleaseType = 14
	ReleaseType_RELEASE_TYPE_DIGITALBOXSETRELEASE               ReleaseType = 15
	ReleaseType_RELEASE_TYPE_DJMIX                              ReleaseType = 16
	ReleaseType_RELEASE_TYPE_DOCUMENTARY                        ReleaseType = 17
	ReleaseType_RELEASE_TYPE_DRAMA                              ReleaseType = 18
	ReleaseType_RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE       ReleaseType = 19
	ReleaseType_RELEASE_TYPE_EBOOKRELEASE                       ReleaseType = 20
	ReleaseType_RELEASE_TYPE_EP                                 ReleaseType = 21
	ReleaseType_RELEASE_TYPE_EPISODE                            ReleaseType = 22
	ReleaseType_RELEASE_TYPE_FEATUREFILM                        ReleaseType = 23
	ReleaseType_RELEASE_TYPE_KARAOKERELEASE                     ReleaseType = 24
	ReleaseType_RELEASE_TYPE_LIVEEVENTVIDEO                     ReleaseType = 25
	ReleaseType_RELEASE_TYPE_LOGORELEASE                        ReleaseType = 26
	ReleaseType_RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE    ReleaseType = 27
	ReleaseType_RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE ReleaseType = 28
	ReleaseType_RELEASE_TYPE_LYRICSHEETRELEASE                  ReleaseType = 29
	ReleaseType_RELEASE_TYPE_MULTIMEDIAALBUM                    ReleaseType = 30
	ReleaseType_RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET          ReleaseType = 31
	ReleaseType_RELEASE_TYPE_MULTIMEDIASINGLE                   ReleaseType = 32
	ReleaseType_RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE        ReleaseType = 33
	ReleaseType_RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE     ReleaseType = 34
	ReleaseType_RELEASE_TYPE_PLAYLIST                           ReleaseType = 35
	ReleaseType_RELEASE_TYPE_RINGBACKTONERELEASE                ReleaseType = 36
	ReleaseType_RELEASE_TYPE_RINGTONERELEASE                    ReleaseType = 37
	ReleaseType_RELEASE_TYPE_SEASON                             ReleaseType = 38
	ReleaseType_RELEASE_TYPE_SERIES                             ReleaseType = 39
	ReleaseType_RELEASE_TYPE_SHEETMUSICRELEASE                  ReleaseType = 40
	ReleaseType_RELEASE_TYPE_SHORTFILM                          ReleaseType = 41
	ReleaseType_RELEASE_TYPE_SINGLE                             ReleaseType = 42
	ReleaseType_RELEASE_TYPE_SINGLERESOURCERELEASE              ReleaseType = 43
	ReleaseType_RELEASE_TYPE_STEMBUNDLE                         ReleaseType = 44
	ReleaseType_RELEASE_TYPE_USERDEFINED                        ReleaseType = 45
	ReleaseType_RELEASE_TYPE_VIDEOALBUM                         ReleaseType = 46
	ReleaseType_RELEASE_TYPE_VIDEOMASTERTONERELEASE             ReleaseType = 47
	ReleaseType_RELEASE_TYPE_VIDEOSINGLE                        ReleaseType = 48
	ReleaseType_RELEASE_TYPE_WALLPAPERRELEASE                   ReleaseType = 49
	ReleaseType_RELEASE_TYPE_TRACKRELEASE                       ReleaseType = 50
)

// Enum value maps for ReleaseType.
var (
	ReleaseType_name = map[int32]string{
		0:  "RELEASE_TYPE_UNSPECIFIED",
		1:  "RELEASE_TYPE_ALBUM",
		2:  "RELEASE_TYPE_ALERTTONERELEASE",
		3:  "RELEASE_TYPE_ASPERCONTRACT",
		4:  "RELEASE_TYPE_AUDIOBOOKRELEASE",
		5:  "RELEASE_TYPE_AUDIODRAMARELEASE",
		6:  "RELEASE_TYPE_BACKCOVERIMAGERELEASE",
		7:  "RELEASE_TYPE_BOOKLETBACKIMAGERELEASE",
		8:  "RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE",
		9:  "RELEASE_TYPE_BOOKLETRELEASE",
		10: "RELEASE_TYPE_BUNDLE",
		11: "RELEASE_TYPE_CLASSICALALBUM",
		12: "RELEASE_TYPE_CLASSICALDIGITALBOXEDSET",
		13: "RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM",
		14: "RELEASE_TYPE_CONCERTVIDEO",
		15: "RELEASE_TYPE_DIGITALBOXSETRELEASE",
		16: "RELEASE_TYPE_DJMIX",
		17: "RELEASE_TYPE_DOCUMENTARY",
		18: "RELEASE_TYPE_DRAMA",
		19: "RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE",
		20: "RELEASE_TYPE_EBOOKRELEASE",
		21: "RELEASE_TYPE_EP",
		22: "RELEASE_TYPE_EPISODE",
		23: "RELEASE_TYPE_FEATUREFILM",
		24: "RELEASE_TYPE_KARAOKERELEASE",
		25: "RELEASE_TYPE_LIVEEVENTVIDEO",
		26: "RELEASE_TYPE_LOGORELEASE",
		27: "RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE",
		28: "RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE",
		29: "RELEASE_TYPE_LYRICSHEETRELEASE",
		30: "RELEASE_TYPE_MULTIMEDIAALBUM",
		31: "RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET",
		32: "RELEASE_TYPE_MULTIMEDIASINGLE",
		33: "RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE",
		34: "RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE",
		35: "RELEASE_TYPE_PLAYLIST",
		36: "RELEASE_TYPE_RINGBACKTONERELEASE",
		37: "RELEASE_TYPE_RINGTONERELEASE",
		38: "RELEASE_TYPE_SEASON",
		39: "RELEASE_TYPE_SERIES",
		40: "RELEASE_TYPE_SHEETMUSICRELEASE",
		41: "RELEASE_TYPE_SHORTFILM",
		42: "RELEASE_TYPE_SINGLE",
		43: "RELEASE_TYPE_SINGLERESOURCERELEASE",
		44: "RELEASE_TYPE_STEMBUNDLE",
		45: "RELEASE_TYPE_USERDEFINED",
		46: "RELEASE_TYPE_VIDEOALBUM",
		47: "RELEASE_TYPE_VIDEOMASTERTONERELEASE",
		48: "RELEASE_TYPE_VIDEOSINGLE",
		49: "RELEASE_TYPE_WALLPAPERRELEASE",
		50: "RELEASE_TYPE_TRACKRELEASE",
	}
	ReleaseType_value = map[string]int32{
		"RELEASE_TYPE_UNSPECIFIED":                        0,
		"RELEASE_TYPE_ALBUM":                              1,
		"RELEASE_TYPE_ALERTTONERELEASE":                   2,
		"RELEASE_TYPE_ASPERCONTRACT":                      3,
		"RELEASE_TYPE_AUDIOBOOKRELEASE":                   4,
		"RELEASE_TYPE_AUDIODRAMARELEASE":                  5,
		"RELEASE_TYPE_BACKCOVERIMAGERELEASE":              6,
		"RELEASE_TYPE_BOOKLETBACKIMAGERELEASE":            7,
		"RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE":           8,
		"RELEASE_TYPE_BOOKLETRELEASE":                     9,
		"RELEASE_TYPE_BUNDLE":                             10,
		"RELEASE_TYPE_CLASSICALALBUM":                     11,
		"RELEASE_TYPE_CLASSICALDIGITALBOXEDSET":           12,
		"RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM":           13,
		"RELEASE_TYPE_CONCERTVIDEO":                       14,
		"RELEASE_TYPE_DIGITALBOXSETRELEASE":               15,
		"RELEASE_TYPE_DJMIX":                              16,
		"RELEASE_TYPE_DOCUMENTARY":                        17,
		"RELEASE_TYPE_DRAMA":                              18,
		"RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE":       19,
		"RELEASE_TYPE_EBOOKRELEASE":                       20,
		"RELEASE_TYPE_EP":                                 21,
		"RELEASE_TYPE_EPISODE":                            22,
		"RELEASE_TYPE_FEATUREFILM":                        23,
		"RELEASE_TYPE_KARAOKERELEASE":                     24,
		"RELEASE_TYPE_LIVEEVENTVIDEO":                     25,
		"RELEASE_TYPE_LOGORELEASE":                        26,
		"RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE":    27,
		"RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE": 28,
		"RELEASE_TYPE_LYRICSHEETRELEASE":                  29,
		"RELEASE_TYPE_MULTIMEDIAALBUM":                    30,
		"RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET":          31,
		"RELEASE_TYPE_MULTIMEDIASINGLE":                   32,
		"RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE":        33,
		"RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE":     34,
		"RELEASE_TYPE_PLAYLIST":                           35,
		"RELEASE_TYPE_RINGBACKTONERELEASE":                36,
		"RELEASE_TYPE_RINGTONERELEASE":                    37,
		"RELEASE_TYPE_SEASON":                             38,
		"RELEASE_TYPE_SERIES":                             39,
		"RELEASE_TYPE_SHEETMUSICRELEASE":                  40,
		"RELEASE_TYPE_SHORTFILM":                          41,
		"RELEASE_TYPE_SINGLE":                             42,
		"RELEASE_TYPE_SINGLERESOURCERELEASE":              43,
		"RELEASE_TYPE_STEMBUNDLE":                         44,
		"RELEASE_TYPE_USERDEFINED":                        45,
		"RELEASE_TYPE_VIDEOALBUM":                         46,
		"RELEASE_TYPE_VIDEOMASTERTONERELEASE":             47,
		"RELEASE_TYPE_VIDEOSINGLE":                        48,
		"RELEASE_TYPE_WALLPAPERRELEASE":                   49,
		"RELEASE_TYPE_TRACKRELEASE":                       50,
	}
)

func (x ReleaseType) Enum() *ReleaseType {
	p := new(ReleaseType)
	*p = x
	return p
}

func (x ReleaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[133].Descriptor()
}

func (ReleaseType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[133]
}

func (x ReleaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseType.Descriptor instead.
func (ReleaseType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{133}
}

type ReleaseTypeERN4 int32

const (
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_UNSPECIFIED                        ReleaseTypeERN4 = 0
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_ALBUM                              ReleaseTypeERN4 = 1
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_ALERTTONERELEASE                   ReleaseTypeERN4 = 2
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_ASPERCONTRACT                      ReleaseTypeERN4 = 3
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_AUDIOBOOKRELEASE                   ReleaseTypeERN4 = 4
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_AUDIOCLIPRELEASE                   ReleaseTypeERN4 = 5
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_AUDIODRAMARELEASE                  ReleaseTypeERN4 = 6
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BACKCOVERIMAGERELEASE              ReleaseTypeERN4 = 7
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BOOKLETBACKIMAGERELEASE            ReleaseTypeERN4 = 8
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BOOKLETFRONTIMAGERELEASE           ReleaseTypeERN4 = 9
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BOOKLETRELEASE                     ReleaseTypeERN4 = 10
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BUNDLE                             ReleaseTypeERN4 = 11
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_CLASSICALALBUM                     ReleaseTypeERN4 = 12
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_CLASSICALDIGITALBOXEDSET           ReleaseTypeERN4 = 13
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_CLASSICALMULTIMEDIAALBUM           ReleaseTypeERN4 = 14
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_CONCERTVIDEO                       ReleaseTypeERN4 = 15
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DIGITALBOXSETRELEASE               ReleaseTypeERN4 = 16
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DJMIX                              ReleaseTypeERN4 = 17
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DOCUMENTARY                        ReleaseTypeERN4 = 18
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DRAMA                              ReleaseTypeERN4 = 19
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DRAMATICOMUSICALVIDEORELEASE       ReleaseTypeERN4 = 20
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_EBOOKRELEASE                       ReleaseTypeERN4 = 21
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_EP                                 ReleaseTypeERN4 = 22
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_EPISODE                            ReleaseTypeERN4 = 23
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_FEATUREFILM                        ReleaseTypeERN4 = 24
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_KARAOKERELEASE                     ReleaseTypeERN4 = 25
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LIVEEVENTVIDEO                     ReleaseTypeERN4 = 26
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LOGORELEASE                        ReleaseTypeERN4 = 27
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LONGFORMMUSICALWORKVIDEORELEASE    ReleaseTypeERN4 = 28
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LONGFORMNONMUSICALWORKVIDEORELEASE ReleaseTypeERN4 = 29
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LYRICSHEETRELEASE                  ReleaseTypeERN4 = 30
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_MULTIMEDIAALBUM                    ReleaseTypeERN4 = 31
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_MULTIMEDIADIGITALBOXEDSET          ReleaseTypeERN4 = 32
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_MULTIMEDIASINGLE                   ReleaseTypeERN4 = 33
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_MUSICALWORKBASEDGAMERELEASE        ReleaseTypeERN4 = 34
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_NONMUSICALWORKBASEDGAMERELEASE     ReleaseTypeERN4 = 35
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_PLAYLIST                           ReleaseTypeERN4 = 36
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_RINGBACKTONERELEASE                ReleaseTypeERN4 = 37
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_RINGTONERELEASE                    ReleaseTypeERN4 = 38
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SEASON                             ReleaseTypeERN4 = 39
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SERIES                             ReleaseTypeERN4 = 40
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SHEETMUSICRELEASE                  ReleaseTypeERN4 = 41
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SHORTFILM                          ReleaseTypeERN4 = 42
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SINGLE                             ReleaseTypeERN4 = 43
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SINGLERESOURCERELEASE              ReleaseTypeERN4 = 44
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_STEMBUNDLE                         ReleaseTypeERN4 = 45
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_USERDEFINED                        ReleaseTypeERN4 = 46
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_VIDEOALBUM                         ReleaseTypeERN4 = 47
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_VIDEOMASTERTONERELEASE             ReleaseTypeERN4 = 48
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_VIDEOSINGLE                        ReleaseTypeERN4 = 49
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_WALLPAPERRELEASE                   ReleaseTypeERN4 = 50
)

// Enum value maps for ReleaseTypeERN4.
var (
	ReleaseTypeERN4_name = map[int32]string{
		0:  "RELEASE_TYPE_E_R_N4_UNSPECIFIED",
		1:  "RELEASE_TYPE_E_R_N4_ALBUM",
		2:  "RELEASE_TYPE_E_R_N4_ALERTTONERELEASE",
		3:  "RELEASE_TYPE_E_R_N4_ASPERCONTRACT",
		4:  "RELEASE_TYPE_E_R_N4_AUDIOBOOKRELEASE",
		5:  "RELEASE_TYPE_E_R_N4_AUDIOCLIPRELEASE",
		6:  "RELEASE_TYPE_E_R_N4_AUDIODRAMARELEASE",
		7:  "RELEASE_TYPE_E_R_N4_BACKCOVERIMAGERELEASE",
		8:  "RELEASE_TYPE_E_R_N4_BOOKLETBACKIMAGERELEASE",
		9:  "RELEASE_TYPE_E_R_N4_BOOKLETFRONTIMAGERELEASE",
		10: "RELEASE_TYPE_E_R_N4_BOOKLETRELEASE",
		11: "RELEASE_TYPE_E_R_N4_BUNDLE",
		12: "RELEASE_TYPE_E_R_N4_CLASSICALALBUM",
		13: "RELEASE_TYPE_E_R_N4_CLASSICALDIGITALBOXEDSET",
		14: "RELEASE_TYPE_E_R_N4_CLASSICALMULTIMEDIAALBUM",
		15: "RELEASE_TYPE_E_R_N4_CONCERTVIDEO",
		16: "RELEASE_TYPE_E_R_N4_DIGITALBOXSETRELEASE",
		17: "RELEASE_TYPE_E_R_N4_DJMIX",
		18: "RELEASE_TYPE_E_R_N4_DOCUMENTARY",
		19: "RELEASE_TYPE_E_R_N4_DRAMA",
		20: "RELEASE_TYPE_E_R_N4_DRAMATICOMUSICALVIDEORELEASE",
		21: "RELEASE_TYPE_E_R_N4_EBOOKRELEASE",
		22: "RELEASE_TYPE_E_R_N4_EP",
		23: "RELEASE_TYPE_E_R_N4_EPISODE",
		24: "RELEASE_TYPE_E_R_N4_FEATUREFILM",
		25: "RELEASE_TYPE_E_R_N4_KARAOKERELEASE",
		26: "RELEASE_TYPE_E_R_N4_LIVEEVENTVIDEO",
		27: "RELEASE_TYPE_E_R_N4_LOGORELEASE",
		28: "RELEASE_TYPE_E_R_N4_LONGFORMMUSICALWORKVIDEORELEASE",
		29: "RELEASE_TYPE_E_R_N4_LONGFORMNONMUSICALWORKVIDEORELEASE",
		30: "RELEASE_TYPE_E_R_N4_LYRICSHEETRELEASE",
		31: "RELEASE_TYPE_E_R_N4_MULTIMEDIAALBUM",
		32: "RELEASE_TYPE_E_R_N4_MULTIMEDIADIGITALBOXEDSET",
		33: "RELEASE_TYPE_E_R_N4_MULTIMEDIASINGLE",
		34: "RELEASE_TYPE_E_R_N4_MUSICALWORKBASEDGAMERELEASE",
		35: "RELEASE_TYPE_E_R_N4_NONMUSICALWORKBASEDGAMERELEASE",
		36: "RELEASE_TYPE_E_R_N4_PLAYLIST",
		37: "RELEASE_TYPE_E_R_N4_RINGBACKTONERELEASE",
		38: "RELEASE_TYPE_E_R_N4_RINGTONERELEASE",
		39: "RELEASE_TYPE_E_R_N4_SEASON",
		40: "RELEASE_TYPE_E_R_N4_SERIES",
		41: "RELEASE_TYPE_E_R_N4_SHEETMUSICRELEASE",
		42: "RELEASE_TYPE_E_R_N4_SHORTFILM",
		43: "RELEASE_TYPE_E_R_N4_SINGLE",
		44: "RELEASE_TYPE_E_R_N4_SINGLERESOURCERELEASE",
		45: "RELEASE_TYPE_E_R_N4_STEMBUNDLE",
		46: "RELEASE_TYPE_E_R_N4_USERDEFINED",
		47: "RELEASE_TYPE_E_R_N4_VIDEOALBUM",
		48: "RELEASE_TYPE_E_R_N4_VIDEOMASTERTONERELEASE",
		49: "RELEASE_TYPE_E_R_N4_VIDEOSINGLE",
		50: "RELEASE_TYPE_E_R_N4_WALLPAPERRELEASE",
	}
	ReleaseTypeERN4_value = map[string]int32{
		"RELEASE_TYPE_E_R_N4_UNSPECIFIED":                        0,
		"RELEASE_TYPE_E_R_N4_ALBUM":                              1,
		"RELEASE_TYPE_E_R_N4_ALERTTONERELEASE":                   2,
		"RELEASE_TYPE_E_R_N4_ASPERCONTRACT":                      3,
		"RELEASE_TYPE_E_R_N4_AUDIOBOOKRELEASE":                   4,
		"RELEASE_TYPE_E_R_N4_AUDIOCLIPRELEASE":                   5,
		"RELEASE_TYPE_E_R_N4_AUDIODRAMARELEASE":                  6,
		"RELEASE_TYPE_E_R_N4_BACKCOVERIMAGERELEASE":              7,
		"RELEASE_TYPE_E_R_N4_BOOKLETBACKIMAGERELEASE":            8,
		"RELEASE_TYPE_E_R_N4_BOOKLETFRONTIMAGERELEASE":           9,
		"RELEASE_TYPE_E_R_N4_BOOKLETRELEASE":                     10,
		"RELEASE_TYPE_E_R_N4_BUNDLE":                             11,
		"RELEASE_TYPE_E_R_N4_CLASSICALALBUM":                     12,
		"RELEASE_TYPE_E_R_N4_CLASSICALDIGITALBOXEDSET":           13,
		"RELEASE_TYPE_E_R_N4_CLASSICALMULTIMEDIAALBUM":           14,
		"RELEASE_TYPE_E_R_N4_CONCERTVIDEO":                       15,
		"RELEASE_TYPE_E_R_N4_DIGITALBOXSETRELEASE":               16,
		"RELEASE_TYPE_E_R_N4_DJMIX":                              17,
		"RELEASE_TYPE_E_R_N4_DOCUMENTARY":                        18,
		"RELEASE_TYPE_E_R_N4_DRAMA":                              19,
		"RELEASE_TYPE_E_R_N4_DRAMATICOMUSICALVIDEORELEASE":       20,
		"RELEASE_TYPE_E_R_N4_EBOOKRELEASE":                       21,
		"RELEASE_TYPE_E_R_N4_EP":                                 22,
		"RELEASE_TYPE_E_R_N4_EPISODE":                            23,
		"RELEASE_TYPE_E_R_N4_FEATUREFILM":                        24,
		"RELEASE_TYPE_E_R_N4_KARAOKERELEASE":                     25,
		"RELEASE_TYPE_E_R_N4_LIVEEVENTVIDEO":                     26,
		"RELEASE_TYPE_E_R_N4_LOGORELEASE":                        27,
		"RELEASE_TYPE_E_R_N4_LONGFORMMUSICALWORKVIDEORELEASE":    28,
		"RELEASE_TYPE_E_R_N4_LONGFORMNONMUSICALWORKVIDEORELEASE": 29,
		"RELEASE_TYPE_E_R_N4_LYRICSHEETRELEASE":                  30,
		"RELEASE_TYPE_E_R_N4_MULTIMEDIAALBUM":                    31,
		"RELEASE_TYPE_E_R_N4_MULTIMEDIADIGITALBOXEDSET":          32,
		"RELEASE_TYPE_E_R_N4_MULTIMEDIASINGLE":                   33,
		"RELEASE_TYPE_E_R_N4_MUSICALWORKBASEDGAMERELEASE":        34,
		"RELEASE_TYPE_E_R_N4_NONMUSICALWORKBASEDGAMERELEASE":     35,
		"RELEASE_TYPE_E_R_N4_PLAYLIST":                           36,
		"RELEASE_TYPE_E_R_N4_RINGBACKTONERELEASE":                37,
		"RELEASE_TYPE_E_R_N4_RINGTONERELEASE":                    38,
		"RELEASE_TYPE_E_R_N4_SEASON":                             39,
		"RELEASE_TYPE_E_R_N4_SERIES":                             40,
		"RELEASE_TYPE_E_R_N4_SHEETMUSICRELEASE":                  41,
		"RELEASE_TYPE_E_R_N4_SHORTFILM":                          42,
		"RELEASE_TYPE_E_R_N4_SINGLE":                             43,
		"RELEASE_TYPE_E_R_N4_SINGLERESOURCERELEASE":              44,
		"RELEASE_TYPE_E_R_N4_STEMBUNDLE":                         45,
		"RELEASE_TYPE_E_R_N4_USERDEFINED":                        46,
		"RELEASE_TYPE_E_R_N4_VIDEOALBUM":                         47,
		"RELEASE_TYPE_E_R_N4_VIDEOMASTERTONERELEASE":             48,
		"RELEASE_TYPE_E_R_N4_VIDEOSINGLE":                        49,
		"RELEASE_TYPE_E_R_N4_WALLPAPERRELEASE":                   50,
	}
)

func (x ReleaseTypeERN4) Enum() *ReleaseTypeERN4 {
	p := new(ReleaseTypeERN4)
	*p = x
	return p
}

func (x ReleaseTypeERN4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseTypeERN4) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[134].Descriptor()
}

func (ReleaseTypeERN4) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[134]
}

func (x ReleaseTypeERN4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseTypeERN4.Descriptor instead.
func (ReleaseTypeERN4) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{134}
}

type ReleaseTypeMCNOTIF int32

const (
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED         ReleaseTypeMCNOTIF = 0
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_ALBUM               ReleaseTypeMCNOTIF = 1
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_EP                  ReleaseTypeMCNOTIF = 2
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_RINGBACKTONERELEASE ReleaseTypeMCNOTIF = 3
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_RINGTONERELEASE     ReleaseTypeMCNOTIF = 4
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_SINGLE              ReleaseTypeMCNOTIF = 5
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOALBUM          ReleaseTypeMCNOTIF = 6
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOSINGLE         ReleaseTypeMCNOTIF = 7
)

// Enum value maps for ReleaseTypeMCNOTIF.
var (
	ReleaseTypeMCNOTIF_name = map[int32]string{
		0: "RELEASE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED",
		1: "RELEASE_TYPE_M_C_N_O_T_I_F_ALBUM",
		2: "RELEASE_TYPE_M_C_N_O_T_I_F_EP",
		3: "RELEASE_TYPE_M_C_N_O_T_I_F_RINGBACKTONERELEASE",
		4: "RELEASE_TYPE_M_C_N_O_T_I_F_RINGTONERELEASE",
		5: "RELEASE_TYPE_M_C_N_O_T_I_F_SINGLE",
		6: "RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOALBUM",
		7: "RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOSINGLE",
	}
	ReleaseTypeMCNOTIF_value = map[string]int32{
		"RELEASE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED":         0,
		"RELEASE_TYPE_M_C_N_O_T_I_F_ALBUM":               1,
		"RELEASE_TYPE_M_C_N_O_T_I_F_EP":                  2,
		"RELEASE_TYPE_M_C_N_O_T_I_F_RINGBACKTONERELEASE": 3,
		"RELEASE_TYPE_M_C_N_O_T_I_F_RINGTONERELEASE":     4,
		"RELEASE_TYPE_M_C_N_O_T_I_F_SINGLE":              5,
		"RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOALBUM":          6,
		"RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOSINGLE":         7,
	}
)

func (x ReleaseTypeMCNOTIF) Enum() *ReleaseTypeMCNOTIF {
	p := new(ReleaseTypeMCNOTIF)
	*p = x
	return p
}

func (x ReleaseTypeMCNOTIF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseTypeMCNOTIF) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[135].Descriptor()
}

func (ReleaseTypeMCNOTIF) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[135]
}

func (x ReleaseTypeMCNOTIF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseTypeMCNOTIF.Descriptor instead.
func (ReleaseTypeMCNOTIF) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{135}
}

type RequestMessagePurpose int32

const (
	RequestMessagePurpose_REQUEST_MESSAGE_PURPOSE_UNSPECIFIED        RequestMessagePurpose = 0
	RequestMessagePurpose_REQUEST_MESSAGE_PURPOSE_LICENSEREQUEST     RequestMessagePurpose = 1
	RequestMessagePurpose_REQUEST_MESSAGE_PURPOSE_NDMALICENSEREQUEST RequestMessagePurpose = 2
	RequestMessagePurpose_REQUEST_MESSAGE_PURPOSE_NOTIFICATION       RequestMessagePurpose = 3
)

// Enum value maps for RequestMessagePurpose.
var (
	RequestMessagePurpose_name = map[int32]string{
		0: "REQUEST_MESSAGE_PURPOSE_UNSPECIFIED",
		1: "REQUEST_MESSAGE_PURPOSE_LICENSEREQUEST",
		2: "REQUEST_MESSAGE_PURPOSE_NDMALICENSEREQUEST",
		3: "REQUEST_MESSAGE_PURPOSE_NOTIFICATION",
	}
	RequestMessagePurpose_value = map[string]int32{
		"REQUEST_MESSAGE_PURPOSE_UNSPECIFIED":        0,
		"REQUEST_MESSAGE_PURPOSE_LICENSEREQUEST":     1,
		"REQUEST_MESSAGE_PURPOSE_NDMALICENSEREQUEST": 2,
		"REQUEST_MESSAGE_PURPOSE_NOTIFICATION":       3,
	}
)

func (x RequestMessagePurpose) Enum() *RequestMessagePurpose {
	p := new(RequestMessagePurpose)
	*p = x
	return p
}

func (x RequestMessagePurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestMessagePurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[136].Descriptor()
}

func (RequestMessagePurpose) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[136]
}

func (x RequestMessagePurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestMessagePurpose.Descriptor instead.
func (RequestMessagePurpose) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{136}
}

type RequestReason int32

const (
	RequestReason_REQUEST_REASON_UNSPECIFIED              RequestReason = 0
	RequestReason_REQUEST_REASON_DISPUTERESOLUTIONREQUEST RequestReason = 1
	RequestReason_REQUEST_REASON_GENERALREQUEST           RequestReason = 2
	RequestReason_REQUEST_REASON_PUBLISHERADDITION        RequestReason = 3
	RequestReason_REQUEST_REASON_PUBLISHERCHANGE          RequestReason = 4
	RequestReason_REQUEST_REASON_PUBLISHERREMOVAL         RequestReason = 5
	RequestReason_REQUEST_REASON_RECALL                   RequestReason = 6
	RequestReason_REQUEST_REASON_RELEASELISTUPDATE        RequestReason = 7
	RequestReason_REQUEST_REASON_SPECIFICREQUEST          RequestReason = 8
	RequestReason_REQUEST_REASON_USERDEFINED              RequestReason = 9
	RequestReason_REQUEST_REASON_WRITERADDITION           RequestReason = 10
	RequestReason_REQUEST_REASON_WRITERCHANGE             RequestReason = 11
	RequestReason_REQUEST_REASON_WRITERREMOVAL            RequestReason = 12
)

// Enum value maps for RequestReason.
var (
	RequestReason_name = map[int32]string{
		0:  "REQUEST_REASON_UNSPECIFIED",
		1:  "REQUEST_REASON_DISPUTERESOLUTIONREQUEST",
		2:  "REQUEST_REASON_GENERALREQUEST",
		3:  "REQUEST_REASON_PUBLISHERADDITION",
		4:  "REQUEST_REASON_PUBLISHERCHANGE",
		5:  "REQUEST_REASON_PUBLISHERREMOVAL",
		6:  "REQUEST_REASON_RECALL",
		7:  "REQUEST_REASON_RELEASELISTUPDATE",
		8:  "REQUEST_REASON_SPECIFICREQUEST",
		9:  "REQUEST_REASON_USERDEFINED",
		10: "REQUEST_REASON_WRITERADDITION",
		11: "REQUEST_REASON_WRITERCHANGE",
		12: "REQUEST_REASON_WRITERREMOVAL",
	}
	RequestReason_value = map[string]int32{
		"REQUEST_REASON_UNSPECIFIED":              0,
		"REQUEST_REASON_DISPUTERESOLUTIONREQUEST": 1,
		"REQUEST_REASON_GENERALREQUEST":           2,
		"REQUEST_REASON_PUBLISHERADDITION":        3,
		"REQUEST_REASON_PUBLISHERCHANGE":          4,
		"REQUEST_REASON_PUBLISHERREMOVAL":         5,
		"REQUEST_REASON_RECALL":                   6,
		"REQUEST_REASON_RELEASELISTUPDATE":        7,
		"REQUEST_REASON_SPECIFICREQUEST":          8,
		"REQUEST_REASON_USERDEFINED":              9,
		"REQUEST_REASON_WRITERADDITION":           10,
		"REQUEST_REASON_WRITERCHANGE":             11,
		"REQUEST_REASON_WRITERREMOVAL":            12,
	}
)

func (x RequestReason) Enum() *RequestReason {
	p := new(RequestReason)
	*p = x
	return p
}

func (x RequestReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[137].Descriptor()
}

func (RequestReason) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[137]
}

func (x RequestReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestReason.Descriptor instead.
func (RequestReason) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{137}
}

type ResourceContributorRole int32

const (
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_UNSPECIFIED                        ResourceContributorRole = 0
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ACCOMPANYIST                       ResourceContributorRole = 1
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ACTOR                              ResourceContributorRole = 2
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALENGINEER                 ResourceContributorRole = 3
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER           ResourceContributorRole = 4
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER                ResourceContributorRole = 5
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER      ResourceContributorRole = 6
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER           ResourceContributorRole = 7
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANCHORPERSON                       ResourceContributorRole = 8
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANIMALTRAINER                      ResourceContributorRole = 9
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANIMATOR                           ResourceContributorRole = 10
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANNOTATOR                          ResourceContributorRole = 11
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ANNOUNCER                          ResourceContributorRole = 12
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR                 ResourceContributorRole = 13
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_AANDRCOORDINATOR                   ResourceContributorRole = 14
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARMOURER                           ResourceContributorRole = 15
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTCOPYIST                         ResourceContributorRole = 16
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTDIRECTOR                        ResourceContributorRole = 17
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTIST                             ResourceContributorRole = 18
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER      ResourceContributorRole = 19
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER                ResourceContributorRole = 20
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER          ResourceContributorRole = 21
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR            ResourceContributorRole = 22
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN   ResourceContributorRole = 23
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR                 ResourceContributorRole = 24
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR                  ResourceContributorRole = 25
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTEDITOR                    ResourceContributorRole = 26
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTENGINEER                  ResourceContributorRole = 27
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER                  ResourceContributorRole = 28
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR              ResourceContributorRole = 29
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER                ResourceContributorRole = 30
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER                  ResourceContributorRole = 31
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_AURALTRAINER                       ResourceContributorRole = 32
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST                 ResourceContributorRole = 33
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BALANCEENGINEER                    ResourceContributorRole = 34
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BANDLEADER                         ResourceContributorRole = 35
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BINDER                             ResourceContributorRole = 36
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BINDINGDESIGNER                    ResourceContributorRole = 37
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BOOKDESIGNER                       ResourceContributorRole = 38
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER                   ResourceContributorRole = 39
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER                  ResourceContributorRole = 40
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BOOKPRODUCER                       ResourceContributorRole = 41
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BROADCASTASSISTANT                 ResourceContributorRole = 42
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST                ResourceContributorRole = 43
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CALLIGRAPHER                       ResourceContributorRole = 44
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CAMERAOPERATOR                     ResourceContributorRole = 45
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CARPENTER                          ResourceContributorRole = 46
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CARTOGRAPHER                       ResourceContributorRole = 47
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CARTOONIST                         ResourceContributorRole = 48
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CASTINGDIRECTOR                    ResourceContributorRole = 49
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CAUSEUR                            ResourceContributorRole = 50
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CENSOR                             ResourceContributorRole = 51
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN            ResourceContributorRole = 52
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHOIR                              ResourceContributorRole = 53
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHOIRMEMBER                        ResourceContributorRole = 54
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHOREOGRAPHER                      ResourceContributorRole = 55
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CHORUSMASTER                       ResourceContributorRole = 56
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CIRCUSARTIST                       ResourceContributorRole = 57
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CLAPPERLOADER                      ResourceContributorRole = 58
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CLUBDJ                             ResourceContributorRole = 59
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CODIRECTOR                         ResourceContributorRole = 60
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER                ResourceContributorRole = 61
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COLORSEPARATOR                     ResourceContributorRole = 62
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMEDIAN                           ResourceContributorRole = 63
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMIXER                            ResourceContributorRole = 64
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMIXINGENGINEER                   ResourceContributorRole = 65
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMMENTATOR                        ResourceContributorRole = 66
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER           ResourceContributorRole = 67
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER                ResourceContributorRole = 68
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR             ResourceContributorRole = 69
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER                 ResourceContributorRole = 70
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONCERTMASTER                      ResourceContributorRole = 71
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONDUCTOR                          ResourceContributorRole = 72
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONSULTANT                         ResourceContributorRole = 73
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONTINUITYCHECKER                  ResourceContributorRole = 74
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CONTRACTOR                         ResourceContributorRole = 75
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COPRODUCER                         ResourceContributorRole = 76
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_CORRESPONDENT                      ResourceContributorRole = 77
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COSTUMEDESIGNER                    ResourceContributorRole = 78
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_COVERDESIGNER                      ResourceContributorRole = 79
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DANCER                             ResourceContributorRole = 80
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DELINEATOR                         ResourceContributorRole = 81
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DESIGNER                           ResourceContributorRole = 82
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIALOGUECOACH                      ResourceContributorRole = 83
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR                   ResourceContributorRole = 84
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER    ResourceContributorRole = 85
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER             ResourceContributorRole = 86
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER       ResourceContributorRole = 87
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIRECTOR                           ResourceContributorRole = 88
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER        ResourceContributorRole = 89
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY                ResourceContributorRole = 90
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DJ                                 ResourceContributorRole = 91
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DRAUGHTSMAN                        ResourceContributorRole = 92
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DRESSER                            ResourceContributorRole = 93
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_DUBBER                             ResourceContributorRole = 94
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EDITOR                             ResourceContributorRole = 95
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EDITORINCHIEF                      ResourceContributorRole = 96
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EDITOROFTHEDAY                     ResourceContributorRole = 97
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ENCODER                            ResourceContributorRole = 98
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ENGINEER                           ResourceContributorRole = 99
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ENSEMBLE                           ResourceContributorRole = 100
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER                  ResourceContributorRole = 101
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_EXPERT                             ResourceContributorRole = 102
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FACSIMILIST                        ResourceContributorRole = 103
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FIGHTDIRECTOR                      ResourceContributorRole = 104
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMDIRECTOR                       ResourceContributorRole = 105
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR                    ResourceContributorRole = 106
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMEDITOR                         ResourceContributorRole = 107
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMPRODUCER                       ResourceContributorRole = 108
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER                  ResourceContributorRole = 109
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FLOORMANAGER                       ResourceContributorRole = 110
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FOCUSPULLER                        ResourceContributorRole = 111
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FOLEYARTIST                        ResourceContributorRole = 112
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FOLEYEDITOR                        ResourceContributorRole = 113
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_FOLEYMIXER                         ResourceContributorRole = 114
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GRAPHICARTIST                      ResourceContributorRole = 115
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GRAPHICASSISTANT                   ResourceContributorRole = 116
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GRAPHICDESIGNER                    ResourceContributorRole = 117
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GREENSMAN                          ResourceContributorRole = 118
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GRIP                               ResourceContributorRole = 119
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GUESTCONDUCTOR                     ResourceContributorRole = 120
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_GROUPMEMBER                        ResourceContributorRole = 121
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_HAIRDRESSER                        ResourceContributorRole = 122
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ILLUSTRATOR                        ResourceContributorRole = 123
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER            ResourceContributorRole = 124
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_INITIALPRODUCER                    ResourceContributorRole = 125
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST                   ResourceContributorRole = 126
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWER                        ResourceContributorRole = 127
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_KEYCHARACTER                       ResourceContributorRole = 128
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_KEYGRIP                            ResourceContributorRole = 129
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_KEYTALENT                          ResourceContributorRole = 130
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LEADMAN                            ResourceContributorRole = 131
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LEADPERFORMER                      ResourceContributorRole = 132
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LEADVOCALIST                       ResourceContributorRole = 133
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR                   ResourceContributorRole = 134
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN                 ResourceContributorRole = 135
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_LOCATIONMANAGER                    ResourceContributorRole = 136
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MAKEUPARTIST                       ResourceContributorRole = 137
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MANUFACTURER                       ResourceContributorRole = 138
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MASTERINGENGINEER                  ResourceContributorRole = 139
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER            ResourceContributorRole = 140
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MATTEARTIST                        ResourceContributorRole = 141
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MIXER                              ResourceContributorRole = 142
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MIXINGENGINEER                     ResourceContributorRole = 143
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER               ResourceContributorRole = 144
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICARRANGER                      ResourceContributorRole = 145
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICCOPYIST                       ResourceContributorRole = 146
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICDIRECTOR                      ResourceContributorRole = 147
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICGROUP                         ResourceContributorRole = 148
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_MUSICIAN                           ResourceContributorRole = 149
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_NARRATOR                           ResourceContributorRole = 150
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_NEWSPRODUCER                       ResourceContributorRole = 151
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_NEWSREADER                         ResourceContributorRole = 152
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_NOTSPECIFIED                       ResourceContributorRole = 153
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRA                          ResourceContributorRole = 154
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER                    ResourceContributorRole = 155
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_ORIGINALARTIST                     ResourceContributorRole = 156
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_OVERDUBENGINEER                    ResourceContributorRole = 157
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER              ResourceContributorRole = 158
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PAINTER                            ResourceContributorRole = 159
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PERFORMER                          ResourceContributorRole = 160
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHER                       ResourceContributorRole = 161
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR                ResourceContributorRole = 162
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PLAYBACKSINGER                     ResourceContributorRole = 163
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_POSTPRODUCER                       ResourceContributorRole = 164
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTION                      ResourceContributorRole = 165
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER              ResourceContributorRole = 166
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER        ResourceContributorRole = 167
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN                    ResourceContributorRole = 168
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT                ResourceContributorRole = 169
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY                  ResourceContributorRole = 170
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR              ResourceContributorRole = 171
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT               ResourceContributorRole = 172
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER                  ResourceContributorRole = 173
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY                ResourceContributorRole = 174
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROJECTENGINEER                    ResourceContributorRole = 175
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMER                         ResourceContributorRole = 176
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER                ResourceContributorRole = 177
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROGRAMPRODUCER                    ResourceContributorRole = 178
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PROPERTYMANAGER                    ResourceContributorRole = 179
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR                 ResourceContributorRole = 180
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PUPPETEER                          ResourceContributorRole = 181
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PYROTECHNICIAN                     ResourceContributorRole = 182
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RECORDINGENGINEER                  ResourceContributorRole = 183
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER            ResourceContributorRole = 184
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REDACTOR                           ResourceContributorRole = 185
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REISSUEPRODUCER                    ResourceContributorRole = 186
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REMIXEDARTIST                      ResourceContributorRole = 187
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REMIXER                            ResourceContributorRole = 188
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REMIXINGENGINEER                   ResourceContributorRole = 189
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER             ResourceContributorRole = 190
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_REPETITEUR                         ResourceContributorRole = 191
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RESEARCHER                         ResourceContributorRole = 192
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD                   ResourceContributorRole = 193
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER                 ResourceContributorRole = 194
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RESTAGER                           ResourceContributorRole = 195
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RIGGER                             ResourceContributorRole = 196
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT          ResourceContributorRole = 197
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_RUNNER                             ResourceContributorRole = 198
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SCENICOPERATIVE                    ResourceContributorRole = 199
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR                  ResourceContributorRole = 200
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR                   ResourceContributorRole = 201
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR      ResourceContributorRole = 202
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR            ResourceContributorRole = 203
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDCONDUCTOR                    ResourceContributorRole = 204
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDENGINEER                     ResourceContributorRole = 205
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR                 ResourceContributorRole = 206
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SERIESPRODUCER                     ResourceContributorRole = 207
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SETDESIGNER                        ResourceContributorRole = 208
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SETDRESSER                         ResourceContributorRole = 209
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER            ResourceContributorRole = 210
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOLOIST                            ResourceContributorRole = 211
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOUNDDESIGNER                      ResourceContributorRole = 212
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOUNDMIXER                         ResourceContributorRole = 213
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOUNDRECORDIST                     ResourceContributorRole = 214
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR                    ResourceContributorRole = 215
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SPEAKER                            ResourceContributorRole = 216
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN           ResourceContributorRole = 217
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SPONSOR                            ResourceContributorRole = 218
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER             ResourceContributorRole = 219
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STAGEDIRECTOR                      ResourceContributorRole = 220
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STAGEENGINEER                      ResourceContributorRole = 221
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STORYTELLER                        ResourceContributorRole = 222
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STRINGENGINEER                     ResourceContributorRole = 223
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STRINGPRODUCER                     ResourceContributorRole = 224
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STRINGSDIRECTOR                    ResourceContributorRole = 225
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR                    ResourceContributorRole = 226
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUDIOMUSICIAN                     ResourceContributorRole = 227
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUDIOPERSONNEL                    ResourceContributorRole = 228
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUDIOPRODUCER                     ResourceContributorRole = 229
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_STUNTS                             ResourceContributorRole = 230
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESEDITOR                    ResourceContributorRole = 231
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR                ResourceContributorRole = 232
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SUPPORTINGACTOR                    ResourceContributorRole = 233
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER             ResourceContributorRole = 234
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER       ResourceContributorRole = 235
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TAPEOPERATOR                       ResourceContributorRole = 236
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR                  ResourceContributorRole = 237
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TONMEISTER                         ResourceContributorRole = 238
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRACKINGENGINEER                   ResourceContributorRole = 239
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER             ResourceContributorRole = 240
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER       ResourceContributorRole = 241
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER ResourceContributorRole = 242
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER              ResourceContributorRole = 243
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL          ResourceContributorRole = 244
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_TYPEDESIGNER                       ResourceContributorRole = 245
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_UNKNOWN                            ResourceContributorRole = 246
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_USERDEFINED                        ResourceContributorRole = 247
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VIDEODIRECTOR                      ResourceContributorRole = 248
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VIDEOGRAPHER                       ResourceContributorRole = 249
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR               ResourceContributorRole = 250
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VIDEOPRODUCER                      ResourceContributorRole = 251
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VISIONMIXER                        ResourceContributorRole = 252
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VISUALEDITOR                       ResourceContributorRole = 253
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN            ResourceContributorRole = 254
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALARRANGER                      ResourceContributorRole = 255
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER               ResourceContributorRole = 256
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER         ResourceContributorRole = 257
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALENGINEER                      ResourceContributorRole = 258
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALIST                           ResourceContributorRole = 259
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER                ResourceContributorRole = 260
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOCALPRODUCER                      ResourceContributorRole = 261
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_VOICEACTOR                         ResourceContributorRole = 262
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_WARDROBE                           ResourceContributorRole = 263
	ResourceContributorRole_RESOURCE_CONTRIBUTOR_ROLE_PRESENTER                          ResourceContributorRole = 264
)

// Enum value maps for ResourceContributorRole.
var (
	ResourceContributorRole_name = map[int32]string{
		0:   "RESOURCE_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:   "RESOURCE_CONTRIBUTOR_ROLE_ACCOMPANYIST",
		2:   "RESOURCE_CONTRIBUTOR_ROLE_ACTOR",
		3:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALENGINEER",
		4:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER",
		5:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER",
		6:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER",
		7:   "RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER",
		8:   "RESOURCE_CONTRIBUTOR_ROLE_ANCHORPERSON",
		9:   "RESOURCE_CONTRIBUTOR_ROLE_ANIMALTRAINER",
		10:  "RESOURCE_CONTRIBUTOR_ROLE_ANIMATOR",
		11:  "RESOURCE_CONTRIBUTOR_ROLE_ANNOTATOR",
		12:  "RESOURCE_CONTRIBUTOR_ROLE_ANNOUNCER",
		13:  "RESOURCE_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR",
		14:  "RESOURCE_CONTRIBUTOR_ROLE_AANDRCOORDINATOR",
		15:  "RESOURCE_CONTRIBUTOR_ROLE_ARMOURER",
		16:  "RESOURCE_CONTRIBUTOR_ROLE_ARTCOPYIST",
		17:  "RESOURCE_CONTRIBUTOR_ROLE_ARTDIRECTOR",
		18:  "RESOURCE_CONTRIBUTOR_ROLE_ARTIST",
		19:  "RESOURCE_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER",
		20:  "RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER",
		21:  "RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER",
		22:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR",
		23:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN",
		24:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR",
		25:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR",
		26:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTEDITOR",
		27:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTENGINEER",
		28:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER",
		29:  "RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR",
		30:  "RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER",
		31:  "RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER",
		32:  "RESOURCE_CONTRIBUTOR_ROLE_AURALTRAINER",
		33:  "RESOURCE_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST",
		34:  "RESOURCE_CONTRIBUTOR_ROLE_BALANCEENGINEER",
		35:  "RESOURCE_CONTRIBUTOR_ROLE_BANDLEADER",
		36:  "RESOURCE_CONTRIBUTOR_ROLE_BINDER",
		37:  "RESOURCE_CONTRIBUTOR_ROLE_BINDINGDESIGNER",
		38:  "RESOURCE_CONTRIBUTOR_ROLE_BOOKDESIGNER",
		39:  "RESOURCE_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER",
		40:  "RESOURCE_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER",
		41:  "RESOURCE_CONTRIBUTOR_ROLE_BOOKPRODUCER",
		42:  "RESOURCE_CONTRIBUTOR_ROLE_BROADCASTASSISTANT",
		43:  "RESOURCE_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST",
		44:  "RESOURCE_CONTRIBUTOR_ROLE_CALLIGRAPHER",
		45:  "RESOURCE_CONTRIBUTOR_ROLE_CAMERAOPERATOR",
		46:  "RESOURCE_CONTRIBUTOR_ROLE_CARPENTER",
		47:  "RESOURCE_CONTRIBUTOR_ROLE_CARTOGRAPHER",
		48:  "RESOURCE_CONTRIBUTOR_ROLE_CARTOONIST",
		49:  "RESOURCE_CONTRIBUTOR_ROLE_CASTINGDIRECTOR",
		50:  "RESOURCE_CONTRIBUTOR_ROLE_CAUSEUR",
		51:  "RESOURCE_CONTRIBUTOR_ROLE_CENSOR",
		52:  "RESOURCE_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN",
		53:  "RESOURCE_CONTRIBUTOR_ROLE_CHOIR",
		54:  "RESOURCE_CONTRIBUTOR_ROLE_CHOIRMEMBER",
		55:  "RESOURCE_CONTRIBUTOR_ROLE_CHOREOGRAPHER",
		56:  "RESOURCE_CONTRIBUTOR_ROLE_CHORUSMASTER",
		57:  "RESOURCE_CONTRIBUTOR_ROLE_CIRCUSARTIST",
		58:  "RESOURCE_CONTRIBUTOR_ROLE_CLAPPERLOADER",
		59:  "RESOURCE_CONTRIBUTOR_ROLE_CLUBDJ",
		60:  "RESOURCE_CONTRIBUTOR_ROLE_CODIRECTOR",
		61:  "RESOURCE_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER",
		62:  "RESOURCE_CONTRIBUTOR_ROLE_COLORSEPARATOR",
		63:  "RESOURCE_CONTRIBUTOR_ROLE_COMEDIAN",
		64:  "RESOURCE_CONTRIBUTOR_ROLE_COMIXER",
		65:  "RESOURCE_CONTRIBUTOR_ROLE_COMIXINGENGINEER",
		66:  "RESOURCE_CONTRIBUTOR_ROLE_COMMENTATOR",
		67:  "RESOURCE_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER",
		68:  "RESOURCE_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER",
		69:  "RESOURCE_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR",
		70:  "RESOURCE_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER",
		71:  "RESOURCE_CONTRIBUTOR_ROLE_CONCERTMASTER",
		72:  "RESOURCE_CONTRIBUTOR_ROLE_CONDUCTOR",
		73:  "RESOURCE_CONTRIBUTOR_ROLE_CONSULTANT",
		74:  "RESOURCE_CONTRIBUTOR_ROLE_CONTINUITYCHECKER",
		75:  "RESOURCE_CONTRIBUTOR_ROLE_CONTRACTOR",
		76:  "RESOURCE_CONTRIBUTOR_ROLE_COPRODUCER",
		77:  "RESOURCE_CONTRIBUTOR_ROLE_CORRESPONDENT",
		78:  "RESOURCE_CONTRIBUTOR_ROLE_COSTUMEDESIGNER",
		79:  "RESOURCE_CONTRIBUTOR_ROLE_COVERDESIGNER",
		80:  "RESOURCE_CONTRIBUTOR_ROLE_DANCER",
		81:  "RESOURCE_CONTRIBUTOR_ROLE_DELINEATOR",
		82:  "RESOURCE_CONTRIBUTOR_ROLE_DESIGNER",
		83:  "RESOURCE_CONTRIBUTOR_ROLE_DIALOGUECOACH",
		84:  "RESOURCE_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR",
		85:  "RESOURCE_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER",
		86:  "RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER",
		87:  "RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER",
		88:  "RESOURCE_CONTRIBUTOR_ROLE_DIRECTOR",
		89:  "RESOURCE_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER",
		90:  "RESOURCE_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY",
		91:  "RESOURCE_CONTRIBUTOR_ROLE_DJ",
		92:  "RESOURCE_CONTRIBUTOR_ROLE_DRAUGHTSMAN",
		93:  "RESOURCE_CONTRIBUTOR_ROLE_DRESSER",
		94:  "RESOURCE_CONTRIBUTOR_ROLE_DUBBER",
		95:  "RESOURCE_CONTRIBUTOR_ROLE_EDITOR",
		96:  "RESOURCE_CONTRIBUTOR_ROLE_EDITORINCHIEF",
		97:  "RESOURCE_CONTRIBUTOR_ROLE_EDITOROFTHEDAY",
		98:  "RESOURCE_CONTRIBUTOR_ROLE_ENCODER",
		99:  "RESOURCE_CONTRIBUTOR_ROLE_ENGINEER",
		100: "RESOURCE_CONTRIBUTOR_ROLE_ENSEMBLE",
		101: "RESOURCE_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER",
		102: "RESOURCE_CONTRIBUTOR_ROLE_EXPERT",
		103: "RESOURCE_CONTRIBUTOR_ROLE_FACSIMILIST",
		104: "RESOURCE_CONTRIBUTOR_ROLE_FIGHTDIRECTOR",
		105: "RESOURCE_CONTRIBUTOR_ROLE_FILMDIRECTOR",
		106: "RESOURCE_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR",
		107: "RESOURCE_CONTRIBUTOR_ROLE_FILMEDITOR",
		108: "RESOURCE_CONTRIBUTOR_ROLE_FILMPRODUCER",
		109: "RESOURCE_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER",
		110: "RESOURCE_CONTRIBUTOR_ROLE_FLOORMANAGER",
		111: "RESOURCE_CONTRIBUTOR_ROLE_FOCUSPULLER",
		112: "RESOURCE_CONTRIBUTOR_ROLE_FOLEYARTIST",
		113: "RESOURCE_CONTRIBUTOR_ROLE_FOLEYEDITOR",
		114: "RESOURCE_CONTRIBUTOR_ROLE_FOLEYMIXER",
		115: "RESOURCE_CONTRIBUTOR_ROLE_GRAPHICARTIST",
		116: "RESOURCE_CONTRIBUTOR_ROLE_GRAPHICASSISTANT",
		117: "RESOURCE_CONTRIBUTOR_ROLE_GRAPHICDESIGNER",
		118: "RESOURCE_CONTRIBUTOR_ROLE_GREENSMAN",
		119: "RESOURCE_CONTRIBUTOR_ROLE_GRIP",
		120: "RESOURCE_CONTRIBUTOR_ROLE_GUESTCONDUCTOR",
		121: "RESOURCE_CONTRIBUTOR_ROLE_GROUPMEMBER",
		122: "RESOURCE_CONTRIBUTOR_ROLE_HAIRDRESSER",
		123: "RESOURCE_CONTRIBUTOR_ROLE_ILLUSTRATOR",
		124: "RESOURCE_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER",
		125: "RESOURCE_CONTRIBUTOR_ROLE_INITIALPRODUCER",
		126: "RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST",
		127: "RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWER",
		128: "RESOURCE_CONTRIBUTOR_ROLE_KEYCHARACTER",
		129: "RESOURCE_CONTRIBUTOR_ROLE_KEYGRIP",
		130: "RESOURCE_CONTRIBUTOR_ROLE_KEYTALENT",
		131: "RESOURCE_CONTRIBUTOR_ROLE_LEADMAN",
		132: "RESOURCE_CONTRIBUTOR_ROLE_LEADPERFORMER",
		133: "RESOURCE_CONTRIBUTOR_ROLE_LEADVOCALIST",
		134: "RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR",
		135: "RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN",
		136: "RESOURCE_CONTRIBUTOR_ROLE_LOCATIONMANAGER",
		137: "RESOURCE_CONTRIBUTOR_ROLE_MAKEUPARTIST",
		138: "RESOURCE_CONTRIBUTOR_ROLE_MANUFACTURER",
		139: "RESOURCE_CONTRIBUTOR_ROLE_MASTERINGENGINEER",
		140: "RESOURCE_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER",
		141: "RESOURCE_CONTRIBUTOR_ROLE_MATTEARTIST",
		142: "RESOURCE_CONTRIBUTOR_ROLE_MIXER",
		143: "RESOURCE_CONTRIBUTOR_ROLE_MIXINGENGINEER",
		144: "RESOURCE_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER",
		145: "RESOURCE_CONTRIBUTOR_ROLE_MUSICARRANGER",
		146: "RESOURCE_CONTRIBUTOR_ROLE_MUSICCOPYIST",
		147: "RESOURCE_CONTRIBUTOR_ROLE_MUSICDIRECTOR",
		148: "RESOURCE_CONTRIBUTOR_ROLE_MUSICGROUP",
		149: "RESOURCE_CONTRIBUTOR_ROLE_MUSICIAN",
		150: "RESOURCE_CONTRIBUTOR_ROLE_NARRATOR",
		151: "RESOURCE_CONTRIBUTOR_ROLE_NEWSPRODUCER",
		152: "RESOURCE_CONTRIBUTOR_ROLE_NEWSREADER",
		153: "RESOURCE_CONTRIBUTOR_ROLE_NOTSPECIFIED",
		154: "RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRA",
		155: "RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER",
		156: "RESOURCE_CONTRIBUTOR_ROLE_ORIGINALARTIST",
		157: "RESOURCE_CONTRIBUTOR_ROLE_OVERDUBENGINEER",
		158: "RESOURCE_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER",
		159: "RESOURCE_CONTRIBUTOR_ROLE_PAINTER",
		160: "RESOURCE_CONTRIBUTOR_ROLE_PERFORMER",
		161: "RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHER",
		162: "RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR",
		163: "RESOURCE_CONTRIBUTOR_ROLE_PLAYBACKSINGER",
		164: "RESOURCE_CONTRIBUTOR_ROLE_POSTPRODUCER",
		165: "RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTION",
		166: "RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER",
		167: "RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER",
		168: "RESOURCE_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN",
		169: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT",
		170: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY",
		171: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR",
		172: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT",
		173: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER",
		174: "RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY",
		175: "RESOURCE_CONTRIBUTOR_ROLE_PROJECTENGINEER",
		176: "RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMER",
		177: "RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER",
		178: "RESOURCE_CONTRIBUTOR_ROLE_PROGRAMPRODUCER",
		179: "RESOURCE_CONTRIBUTOR_ROLE_PROPERTYMANAGER",
		180: "RESOURCE_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR",
		181: "RESOURCE_CONTRIBUTOR_ROLE_PUPPETEER",
		182: "RESOURCE_CONTRIBUTOR_ROLE_PYROTECHNICIAN",
		183: "RESOURCE_CONTRIBUTOR_ROLE_RECORDINGENGINEER",
		184: "RESOURCE_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER",
		185: "RESOURCE_CONTRIBUTOR_ROLE_REDACTOR",
		186: "RESOURCE_CONTRIBUTOR_ROLE_REISSUEPRODUCER",
		187: "RESOURCE_CONTRIBUTOR_ROLE_REMIXEDARTIST",
		188: "RESOURCE_CONTRIBUTOR_ROLE_REMIXER",
		189: "RESOURCE_CONTRIBUTOR_ROLE_REMIXINGENGINEER",
		190: "RESOURCE_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER",
		191: "RESOURCE_CONTRIBUTOR_ROLE_REPETITEUR",
		192: "RESOURCE_CONTRIBUTOR_ROLE_RESEARCHER",
		193: "RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD",
		194: "RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER",
		195: "RESOURCE_CONTRIBUTOR_ROLE_RESTAGER",
		196: "RESOURCE_CONTRIBUTOR_ROLE_RIGGER",
		197: "RESOURCE_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT",
		198: "RESOURCE_CONTRIBUTOR_ROLE_RUNNER",
		199: "RESOURCE_CONTRIBUTOR_ROLE_SCENICOPERATIVE",
		200: "RESOURCE_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR",
		201: "RESOURCE_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR",
		202: "RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR",
		203: "RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR",
		204: "RESOURCE_CONTRIBUTOR_ROLE_SECONDCONDUCTOR",
		205: "RESOURCE_CONTRIBUTOR_ROLE_SECONDENGINEER",
		206: "RESOURCE_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR",
		207: "RESOURCE_CONTRIBUTOR_ROLE_SERIESPRODUCER",
		208: "RESOURCE_CONTRIBUTOR_ROLE_SETDESIGNER",
		209: "RESOURCE_CONTRIBUTOR_ROLE_SETDRESSER",
		210: "RESOURCE_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER",
		211: "RESOURCE_CONTRIBUTOR_ROLE_SOLOIST",
		212: "RESOURCE_CONTRIBUTOR_ROLE_SOUNDDESIGNER",
		213: "RESOURCE_CONTRIBUTOR_ROLE_SOUNDMIXER",
		214: "RESOURCE_CONTRIBUTOR_ROLE_SOUNDRECORDIST",
		215: "RESOURCE_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR",
		216: "RESOURCE_CONTRIBUTOR_ROLE_SPEAKER",
		217: "RESOURCE_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN",
		218: "RESOURCE_CONTRIBUTOR_ROLE_SPONSOR",
		219: "RESOURCE_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER",
		220: "RESOURCE_CONTRIBUTOR_ROLE_STAGEDIRECTOR",
		221: "RESOURCE_CONTRIBUTOR_ROLE_STAGEENGINEER",
		222: "RESOURCE_CONTRIBUTOR_ROLE_STORYTELLER",
		223: "RESOURCE_CONTRIBUTOR_ROLE_STRINGENGINEER",
		224: "RESOURCE_CONTRIBUTOR_ROLE_STRINGPRODUCER",
		225: "RESOURCE_CONTRIBUTOR_ROLE_STRINGSDIRECTOR",
		226: "RESOURCE_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR",
		227: "RESOURCE_CONTRIBUTOR_ROLE_STUDIOMUSICIAN",
		228: "RESOURCE_CONTRIBUTOR_ROLE_STUDIOPERSONNEL",
		229: "RESOURCE_CONTRIBUTOR_ROLE_STUDIOPRODUCER",
		230: "RESOURCE_CONTRIBUTOR_ROLE_STUNTS",
		231: "RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESEDITOR",
		232: "RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR",
		233: "RESOURCE_CONTRIBUTOR_ROLE_SUPPORTINGACTOR",
		234: "RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER",
		235: "RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER",
		236: "RESOURCE_CONTRIBUTOR_ROLE_TAPEOPERATOR",
		237: "RESOURCE_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR",
		238: "RESOURCE_CONTRIBUTOR_ROLE_TONMEISTER",
		239: "RESOURCE_CONTRIBUTOR_ROLE_TRACKINGENGINEER",
		240: "RESOURCE_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER",
		241: "RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER",
		242: "RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER",
		243: "RESOURCE_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER",
		244: "RESOURCE_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL",
		245: "RESOURCE_CONTRIBUTOR_ROLE_TYPEDESIGNER",
		246: "RESOURCE_CONTRIBUTOR_ROLE_UNKNOWN",
		247: "RESOURCE_CONTRIBUTOR_ROLE_USERDEFINED",
		248: "RESOURCE_CONTRIBUTOR_ROLE_VIDEODIRECTOR",
		249: "RESOURCE_CONTRIBUTOR_ROLE_VIDEOGRAPHER",
		250: "RESOURCE_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR",
		251: "RESOURCE_CONTRIBUTOR_ROLE_VIDEOPRODUCER",
		252: "RESOURCE_CONTRIBUTOR_ROLE_VISIONMIXER",
		253: "RESOURCE_CONTRIBUTOR_ROLE_VISUALEDITOR",
		254: "RESOURCE_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN",
		255: "RESOURCE_CONTRIBUTOR_ROLE_VOCALARRANGER",
		256: "RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER",
		257: "RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER",
		258: "RESOURCE_CONTRIBUTOR_ROLE_VOCALENGINEER",
		259: "RESOURCE_CONTRIBUTOR_ROLE_VOCALIST",
		260: "RESOURCE_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER",
		261: "RESOURCE_CONTRIBUTOR_ROLE_VOCALPRODUCER",
		262: "RESOURCE_CONTRIBUTOR_ROLE_VOICEACTOR",
		263: "RESOURCE_CONTRIBUTOR_ROLE_WARDROBE",
		264: "RESOURCE_CONTRIBUTOR_ROLE_PRESENTER",
	}
	ResourceContributorRole_value = map[string]int32{
		"RESOURCE_CONTRIBUTOR_ROLE_UNSPECIFIED":                        0,
		"RESOURCE_CONTRIBUTOR_ROLE_ACCOMPANYIST":                       1,
		"RESOURCE_CONTRIBUTOR_ROLE_ACTOR":                              2,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALENGINEER":                 3,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER":           4,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER":                5,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER":      6,
		"RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER":           7,
		"RESOURCE_CONTRIBUTOR_ROLE_ANCHORPERSON":                       8,
		"RESOURCE_CONTRIBUTOR_ROLE_ANIMALTRAINER":                      9,
		"RESOURCE_CONTRIBUTOR_ROLE_ANIMATOR":                           10,
		"RESOURCE_CONTRIBUTOR_ROLE_ANNOTATOR":                          11,
		"RESOURCE_CONTRIBUTOR_ROLE_ANNOUNCER":                          12,
		"RESOURCE_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR":                 13,
		"RESOURCE_CONTRIBUTOR_ROLE_AANDRCOORDINATOR":                   14,
		"RESOURCE_CONTRIBUTOR_ROLE_ARMOURER":                           15,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTCOPYIST":                         16,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTDIRECTOR":                        17,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTIST":                             18,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER":      19,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER":                20,
		"RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER":          21,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR":            22,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN":   23,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR":                 24,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR":                  25,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTEDITOR":                    26,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTENGINEER":                  27,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER":                  28,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR":              29,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER":                30,
		"RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER":                  31,
		"RESOURCE_CONTRIBUTOR_ROLE_AURALTRAINER":                       32,
		"RESOURCE_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST":                 33,
		"RESOURCE_CONTRIBUTOR_ROLE_BALANCEENGINEER":                    34,
		"RESOURCE_CONTRIBUTOR_ROLE_BANDLEADER":                         35,
		"RESOURCE_CONTRIBUTOR_ROLE_BINDER":                             36,
		"RESOURCE_CONTRIBUTOR_ROLE_BINDINGDESIGNER":                    37,
		"RESOURCE_CONTRIBUTOR_ROLE_BOOKDESIGNER":                       38,
		"RESOURCE_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER":                   39,
		"RESOURCE_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER":                  40,
		"RESOURCE_CONTRIBUTOR_ROLE_BOOKPRODUCER":                       41,
		"RESOURCE_CONTRIBUTOR_ROLE_BROADCASTASSISTANT":                 42,
		"RESOURCE_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST":                43,
		"RESOURCE_CONTRIBUTOR_ROLE_CALLIGRAPHER":                       44,
		"RESOURCE_CONTRIBUTOR_ROLE_CAMERAOPERATOR":                     45,
		"RESOURCE_CONTRIBUTOR_ROLE_CARPENTER":                          46,
		"RESOURCE_CONTRIBUTOR_ROLE_CARTOGRAPHER":                       47,
		"RESOURCE_CONTRIBUTOR_ROLE_CARTOONIST":                         48,
		"RESOURCE_CONTRIBUTOR_ROLE_CASTINGDIRECTOR":                    49,
		"RESOURCE_CONTRIBUTOR_ROLE_CAUSEUR":                            50,
		"RESOURCE_CONTRIBUTOR_ROLE_CENSOR":                             51,
		"RESOURCE_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN":            52,
		"RESOURCE_CONTRIBUTOR_ROLE_CHOIR":                              53,
		"RESOURCE_CONTRIBUTOR_ROLE_CHOIRMEMBER":                        54,
		"RESOURCE_CONTRIBUTOR_ROLE_CHOREOGRAPHER":                      55,
		"RESOURCE_CONTRIBUTOR_ROLE_CHORUSMASTER":                       56,
		"RESOURCE_CONTRIBUTOR_ROLE_CIRCUSARTIST":                       57,
		"RESOURCE_CONTRIBUTOR_ROLE_CLAPPERLOADER":                      58,
		"RESOURCE_CONTRIBUTOR_ROLE_CLUBDJ":                             59,
		"RESOURCE_CONTRIBUTOR_ROLE_CODIRECTOR":                         60,
		"RESOURCE_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER":                61,
		"RESOURCE_CONTRIBUTOR_ROLE_COLORSEPARATOR":                     62,
		"RESOURCE_CONTRIBUTOR_ROLE_COMEDIAN":                           63,
		"RESOURCE_CONTRIBUTOR_ROLE_COMIXER":                            64,
		"RESOURCE_CONTRIBUTOR_ROLE_COMIXINGENGINEER":                   65,
		"RESOURCE_CONTRIBUTOR_ROLE_COMMENTATOR":                        66,
		"RESOURCE_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER":           67,
		"RESOURCE_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER":                68,
		"RESOURCE_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR":             69,
		"RESOURCE_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER":                 70,
		"RESOURCE_CONTRIBUTOR_ROLE_CONCERTMASTER":                      71,
		"RESOURCE_CONTRIBUTOR_ROLE_CONDUCTOR":                          72,
		"RESOURCE_CONTRIBUTOR_ROLE_CONSULTANT":                         73,
		"RESOURCE_CONTRIBUTOR_ROLE_CONTINUITYCHECKER":                  74,
		"RESOURCE_CONTRIBUTOR_ROLE_CONTRACTOR":                         75,
		"RESOURCE_CONTRIBUTOR_ROLE_COPRODUCER":                         76,
		"RESOURCE_CONTRIBUTOR_ROLE_CORRESPONDENT":                      77,
		"RESOURCE_CONTRIBUTOR_ROLE_COSTUMEDESIGNER":                    78,
		"RESOURCE_CONTRIBUTOR_ROLE_COVERDESIGNER":                      79,
		"RESOURCE_CONTRIBUTOR_ROLE_DANCER":                             80,
		"RESOURCE_CONTRIBUTOR_ROLE_DELINEATOR":                         81,
		"RESOURCE_CONTRIBUTOR_ROLE_DESIGNER":                           82,
		"RESOURCE_CONTRIBUTOR_ROLE_DIALOGUECOACH":                      83,
		"RESOURCE_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR":                   84,
		"RESOURCE_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER":    85,
		"RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER":             86,
		"RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER":       87,
		"RESOURCE_CONTRIBUTOR_ROLE_DIRECTOR":                           88,
		"RESOURCE_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER":        89,
		"RESOURCE_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY":                90,
		"RESOURCE_CONTRIBUTOR_ROLE_DJ":                                 91,
		"RESOURCE_CONTRIBUTOR_ROLE_DRAUGHTSMAN":                        92,
		"RESOURCE_CONTRIBUTOR_ROLE_DRESSER":                            93,
		"RESOURCE_CONTRIBUTOR_ROLE_DUBBER":                             94,
		"RESOURCE_CONTRIBUTOR_ROLE_EDITOR":                             95,
		"RESOURCE_CONTRIBUTOR_ROLE_EDITORINCHIEF":                      96,
		"RESOURCE_CONTRIBUTOR_ROLE_EDITOROFTHEDAY":                     97,
		"RESOURCE_CONTRIBUTOR_ROLE_ENCODER":                            98,
		"RESOURCE_CONTRIBUTOR_ROLE_ENGINEER":                           99,
		"RESOURCE_CONTRIBUTOR_ROLE_ENSEMBLE":                           100,
		"RESOURCE_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER":                  101,
		"RESOURCE_CONTRIBUTOR_ROLE_EXPERT":                             102,
		"RESOURCE_CONTRIBUTOR_ROLE_FACSIMILIST":                        103,
		"RESOURCE_CONTRIBUTOR_ROLE_FIGHTDIRECTOR":                      104,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMDIRECTOR":                       105,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR":                    106,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMEDITOR":                         107,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMPRODUCER":                       108,
		"RESOURCE_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER":                  109,
		"RESOURCE_CONTRIBUTOR_ROLE_FLOORMANAGER":                       110,
		"RESOURCE_CONTRIBUTOR_ROLE_FOCUSPULLER":                        111,
		"RESOURCE_CONTRIBUTOR_ROLE_FOLEYARTIST":                        112,
		"RESOURCE_CONTRIBUTOR_ROLE_FOLEYEDITOR":                        113,
		"RESOURCE_CONTRIBUTOR_ROLE_FOLEYMIXER":                         114,
		"RESOURCE_CONTRIBUTOR_ROLE_GRAPHICARTIST":                      115,
		"RESOURCE_CONTRIBUTOR_ROLE_GRAPHICASSISTANT":                   116,
		"RESOURCE_CONTRIBUTOR_ROLE_GRAPHICDESIGNER":                    117,
		"RESOURCE_CONTRIBUTOR_ROLE_GREENSMAN":                          118,
		"RESOURCE_CONTRIBUTOR_ROLE_GRIP":                               119,
		"RESOURCE_CONTRIBUTOR_ROLE_GUESTCONDUCTOR":                     120,
		"RESOURCE_CONTRIBUTOR_ROLE_GROUPMEMBER":                        121,
		"RESOURCE_CONTRIBUTOR_ROLE_HAIRDRESSER":                        122,
		"RESOURCE_CONTRIBUTOR_ROLE_ILLUSTRATOR":                        123,
		"RESOURCE_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER":            124,
		"RESOURCE_CONTRIBUTOR_ROLE_INITIALPRODUCER":                    125,
		"RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST":                   126,
		"RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWER":                        127,
		"RESOURCE_CONTRIBUTOR_ROLE_KEYCHARACTER":                       128,
		"RESOURCE_CONTRIBUTOR_ROLE_KEYGRIP":                            129,
		"RESOURCE_CONTRIBUTOR_ROLE_KEYTALENT":                          130,
		"RESOURCE_CONTRIBUTOR_ROLE_LEADMAN":                            131,
		"RESOURCE_CONTRIBUTOR_ROLE_LEADPERFORMER":                      132,
		"RESOURCE_CONTRIBUTOR_ROLE_LEADVOCALIST":                       133,
		"RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR":                   134,
		"RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN":                 135,
		"RESOURCE_CONTRIBUTOR_ROLE_LOCATIONMANAGER":                    136,
		"RESOURCE_CONTRIBUTOR_ROLE_MAKEUPARTIST":                       137,
		"RESOURCE_CONTRIBUTOR_ROLE_MANUFACTURER":                       138,
		"RESOURCE_CONTRIBUTOR_ROLE_MASTERINGENGINEER":                  139,
		"RESOURCE_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER":            140,
		"RESOURCE_CONTRIBUTOR_ROLE_MATTEARTIST":                        141,
		"RESOURCE_CONTRIBUTOR_ROLE_MIXER":                              142,
		"RESOURCE_CONTRIBUTOR_ROLE_MIXINGENGINEER":                     143,
		"RESOURCE_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER":               144,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICARRANGER":                      145,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICCOPYIST":                       146,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICDIRECTOR":                      147,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICGROUP":                         148,
		"RESOURCE_CONTRIBUTOR_ROLE_MUSICIAN":                           149,
		"RESOURCE_CONTRIBUTOR_ROLE_NARRATOR":                           150,
		"RESOURCE_CONTRIBUTOR_ROLE_NEWSPRODUCER":                       151,
		"RESOURCE_CONTRIBUTOR_ROLE_NEWSREADER":                         152,
		"RESOURCE_CONTRIBUTOR_ROLE_NOTSPECIFIED":                       153,
		"RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRA":                          154,
		"RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER":                    155,
		"RESOURCE_CONTRIBUTOR_ROLE_ORIGINALARTIST":                     156,
		"RESOURCE_CONTRIBUTOR_ROLE_OVERDUBENGINEER":                    157,
		"RESOURCE_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER":              158,
		"RESOURCE_CONTRIBUTOR_ROLE_PAINTER":                            159,
		"RESOURCE_CONTRIBUTOR_ROLE_PERFORMER":                          160,
		"RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHER":                       161,
		"RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR":                162,
		"RESOURCE_CONTRIBUTOR_ROLE_PLAYBACKSINGER":                     163,
		"RESOURCE_CONTRIBUTOR_ROLE_POSTPRODUCER":                       164,
		"RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTION":                      165,
		"RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER":              166,
		"RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER":        167,
		"RESOURCE_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN":                    168,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT":                169,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY":                  170,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR":              171,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT":               172,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER":                  173,
		"RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY":                174,
		"RESOURCE_CONTRIBUTOR_ROLE_PROJECTENGINEER":                    175,
		"RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMER":                         176,
		"RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER":                177,
		"RESOURCE_CONTRIBUTOR_ROLE_PROGRAMPRODUCER":                    178,
		"RESOURCE_CONTRIBUTOR_ROLE_PROPERTYMANAGER":                    179,
		"RESOURCE_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR":                 180,
		"RESOURCE_CONTRIBUTOR_ROLE_PUPPETEER":                          181,
		"RESOURCE_CONTRIBUTOR_ROLE_PYROTECHNICIAN":                     182,
		"RESOURCE_CONTRIBUTOR_ROLE_RECORDINGENGINEER":                  183,
		"RESOURCE_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER":            184,
		"RESOURCE_CONTRIBUTOR_ROLE_REDACTOR":                           185,
		"RESOURCE_CONTRIBUTOR_ROLE_REISSUEPRODUCER":                    186,
		"RESOURCE_CONTRIBUTOR_ROLE_REMIXEDARTIST":                      187,
		"RESOURCE_CONTRIBUTOR_ROLE_REMIXER":                            188,
		"RESOURCE_CONTRIBUTOR_ROLE_REMIXINGENGINEER":                   189,
		"RESOURCE_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER":             190,
		"RESOURCE_CONTRIBUTOR_ROLE_REPETITEUR":                         191,
		"RESOURCE_CONTRIBUTOR_ROLE_RESEARCHER":                         192,
		"RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD":                   193,
		"RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER":                 194,
		"RESOURCE_CONTRIBUTOR_ROLE_RESTAGER":                           195,
		"RESOURCE_CONTRIBUTOR_ROLE_RIGGER":                             196,
		"RESOURCE_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT":          197,
		"RESOURCE_CONTRIBUTOR_ROLE_RUNNER":                             198,
		"RESOURCE_CONTRIBUTOR_ROLE_SCENICOPERATIVE":                    199,
		"RESOURCE_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR":                  200,
		"RESOURCE_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR":                   201,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR":      202,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR":            203,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDCONDUCTOR":                    204,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDENGINEER":                     205,
		"RESOURCE_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR":                 206,
		"RESOURCE_CONTRIBUTOR_ROLE_SERIESPRODUCER":                     207,
		"RESOURCE_CONTRIBUTOR_ROLE_SETDESIGNER":                        208,
		"RESOURCE_CONTRIBUTOR_ROLE_SETDRESSER":                         209,
		"RESOURCE_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER":            210,
		"RESOURCE_CONTRIBUTOR_ROLE_SOLOIST":                            211,
		"RESOURCE_CONTRIBUTOR_ROLE_SOUNDDESIGNER":                      212,
		"RESOURCE_CONTRIBUTOR_ROLE_SOUNDMIXER":                         213,
		"RESOURCE_CONTRIBUTOR_ROLE_SOUNDRECORDIST":                     214,
		"RESOURCE_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR":                    215,
		"RESOURCE_CONTRIBUTOR_ROLE_SPEAKER":                            216,
		"RESOURCE_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN":           217,
		"RESOURCE_CONTRIBUTOR_ROLE_SPONSOR":                            218,
		"RESOURCE_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER":             219,
		"RESOURCE_CONTRIBUTOR_ROLE_STAGEDIRECTOR":                      220,
		"RESOURCE_CONTRIBUTOR_ROLE_STAGEENGINEER":                      221,
		"RESOURCE_CONTRIBUTOR_ROLE_STORYTELLER":                        222,
		"RESOURCE_CONTRIBUTOR_ROLE_STRINGENGINEER":                     223,
		"RESOURCE_CONTRIBUTOR_ROLE_STRINGPRODUCER":                     224,
		"RESOURCE_CONTRIBUTOR_ROLE_STRINGSDIRECTOR":                    225,
		"RESOURCE_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR":                    226,
		"RESOURCE_CONTRIBUTOR_ROLE_STUDIOMUSICIAN":                     227,
		"RESOURCE_CONTRIBUTOR_ROLE_STUDIOPERSONNEL":                    228,
		"RESOURCE_CONTRIBUTOR_ROLE_STUDIOPRODUCER":                     229,
		"RESOURCE_CONTRIBUTOR_ROLE_STUNTS":                             230,
		"RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESEDITOR":                    231,
		"RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR":                232,
		"RESOURCE_CONTRIBUTOR_ROLE_SUPPORTINGACTOR":                    233,
		"RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER":             234,
		"RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER":       235,
		"RESOURCE_CONTRIBUTOR_ROLE_TAPEOPERATOR":                       236,
		"RESOURCE_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR":                  237,
		"RESOURCE_CONTRIBUTOR_ROLE_TONMEISTER":                         238,
		"RESOURCE_CONTRIBUTOR_ROLE_TRACKINGENGINEER":                   239,
		"RESOURCE_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER":             240,
		"RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER":       241,
		"RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER": 242,
		"RESOURCE_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER":              243,
		"RESOURCE_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL":          244,
		"RESOURCE_CONTRIBUTOR_ROLE_TYPEDESIGNER":                       245,
		"RESOURCE_CONTRIBUTOR_ROLE_UNKNOWN":                            246,
		"RESOURCE_CONTRIBUTOR_ROLE_USERDEFINED":                        247,
		"RESOURCE_CONTRIBUTOR_ROLE_VIDEODIRECTOR":                      248,
		"RESOURCE_CONTRIBUTOR_ROLE_VIDEOGRAPHER":                       249,
		"RESOURCE_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR":               250,
		"RESOURCE_CONTRIBUTOR_ROLE_VIDEOPRODUCER":                      251,
		"RESOURCE_CONTRIBUTOR_ROLE_VISIONMIXER":                        252,
		"RESOURCE_CONTRIBUTOR_ROLE_VISUALEDITOR":                       253,
		"RESOURCE_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN":            254,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALARRANGER":                      255,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER":               256,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER":         257,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALENGINEER":                      258,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALIST":                           259,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER":                260,
		"RESOURCE_CONTRIBUTOR_ROLE_VOCALPRODUCER":                      261,
		"RESOURCE_CONTRIBUTOR_ROLE_VOICEACTOR":                         262,
		"RESOURCE_CONTRIBUTOR_ROLE_WARDROBE":                           263,
		"RESOURCE_CONTRIBUTOR_ROLE_PRESENTER":                          264,
	}
)

func (x ResourceContributorRole) Enum() *ResourceContributorRole {
	p := new(ResourceContributorRole)
	*p = x
	return p
}

func (x ResourceContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[138].Descriptor()
}

func (ResourceContributorRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[138]
}

func (x ResourceContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceContributorRole.Descriptor instead.
func (ResourceContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{138}
}

type ResourceGroupType int32

const (
	ResourceGroupType_RESOURCE_GROUP_TYPE_UNSPECIFIED      ResourceGroupType = 0
	ResourceGroupType_RESOURCE_GROUP_TYPE_COMPONENT        ResourceGroupType = 1
	ResourceGroupType_RESOURCE_GROUP_TYPE_COMPONENTRELEASE ResourceGroupType = 2
	ResourceGroupType_RESOURCE_GROUP_TYPE_MULTIWORKPART    ResourceGroupType = 3
	ResourceGroupType_RESOURCE_GROUP_TYPE_RELEASECOMPONENT ResourceGroupType = 4
	ResourceGroupType_RESOURCE_GROUP_TYPE_SIDE             ResourceGroupType = 5
)

// Enum value maps for ResourceGroupType.
var (
	ResourceGroupType_name = map[int32]string{
		0: "RESOURCE_GROUP_TYPE_UNSPECIFIED",
		1: "RESOURCE_GROUP_TYPE_COMPONENT",
		2: "RESOURCE_GROUP_TYPE_COMPONENTRELEASE",
		3: "RESOURCE_GROUP_TYPE_MULTIWORKPART",
		4: "RESOURCE_GROUP_TYPE_RELEASECOMPONENT",
		5: "RESOURCE_GROUP_TYPE_SIDE",
	}
	ResourceGroupType_value = map[string]int32{
		"RESOURCE_GROUP_TYPE_UNSPECIFIED":      0,
		"RESOURCE_GROUP_TYPE_COMPONENT":        1,
		"RESOURCE_GROUP_TYPE_COMPONENTRELEASE": 2,
		"RESOURCE_GROUP_TYPE_MULTIWORKPART":    3,
		"RESOURCE_GROUP_TYPE_RELEASECOMPONENT": 4,
		"RESOURCE_GROUP_TYPE_SIDE":             5,
	}
)

func (x ResourceGroupType) Enum() *ResourceGroupType {
	p := new(ResourceGroupType)
	*p = x
	return p
}

func (x ResourceGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[139].Descriptor()
}

func (ResourceGroupType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[139]
}

func (x ResourceGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceGroupType.Descriptor instead.
func (ResourceGroupType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{139}
}

type ResourceRelationshipType int32

const (
	ResourceRelationshipType_RESOURCE_RELATIONSHIP_TYPE_UNSPECIFIED         ResourceRelationshipType = 0
	ResourceRelationshipType_RESOURCE_RELATIONSHIP_TYPE_CONTAINSSAMPLESFROM ResourceRelationshipType = 1
	ResourceRelationshipType_RESOURCE_RELATIONSHIP_TYPE_HASCONTENTFROM      ResourceRelationshipType = 2
	ResourceRelationshipType_RESOURCE_RELATIONSHIP_TYPE_ISCOVEREDBY         ResourceRelationshipType = 3
	ResourceRelationshipType_RESOURCE_RELATIONSHIP_TYPE_ISCOVEROF           ResourceRelationshipType = 4
	ResourceRelationshipType_RESOURCE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING ResourceRelationshipType = 5
	ResourceRelationshipType_RESOURCE_RELATIONSHIP_TYPE_ISPARTOF            ResourceRelationshipType = 6
	ResourceRelationshipType_RESOURCE_RELATIONSHIP_TYPE_ISSAMPLEDBY         ResourceRelationshipType = 7
	ResourceRelationshipType_RESOURCE_RELATIONSHIP_TYPE_USERDEFINED         ResourceRelationshipType = 8
)

// Enum value maps for ResourceRelationshipType.
var (
	ResourceRelationshipType_name = map[int32]string{
		0: "RESOURCE_RELATIONSHIP_TYPE_UNSPECIFIED",
		1: "RESOURCE_RELATIONSHIP_TYPE_CONTAINSSAMPLESFROM",
		2: "RESOURCE_RELATIONSHIP_TYPE_HASCONTENTFROM",
		3: "RESOURCE_RELATIONSHIP_TYPE_ISCOVEREDBY",
		4: "RESOURCE_RELATIONSHIP_TYPE_ISCOVEROF",
		5: "RESOURCE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING",
		6: "RESOURCE_RELATIONSHIP_TYPE_ISPARTOF",
		7: "RESOURCE_RELATIONSHIP_TYPE_ISSAMPLEDBY",
		8: "RESOURCE_RELATIONSHIP_TYPE_USERDEFINED",
	}
	ResourceRelationshipType_value = map[string]int32{
		"RESOURCE_RELATIONSHIP_TYPE_UNSPECIFIED":         0,
		"RESOURCE_RELATIONSHIP_TYPE_CONTAINSSAMPLESFROM": 1,
		"RESOURCE_RELATIONSHIP_TYPE_HASCONTENTFROM":      2,
		"RESOURCE_RELATIONSHIP_TYPE_ISCOVEREDBY":         3,
		"RESOURCE_RELATIONSHIP_TYPE_ISCOVEROF":           4,
		"RESOURCE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING": 5,
		"RESOURCE_RELATIONSHIP_TYPE_ISPARTOF":            6,
		"RESOURCE_RELATIONSHIP_TYPE_ISSAMPLEDBY":         7,
		"RESOURCE_RELATIONSHIP_TYPE_USERDEFINED":         8,
	}
)

func (x ResourceRelationshipType) Enum() *ResourceRelationshipType {
	p := new(ResourceRelationshipType)
	*p = x
	return p
}

func (x ResourceRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[140].Descriptor()
}

func (ResourceRelationshipType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[140]
}

func (x ResourceRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceRelationshipType.Descriptor instead.
func (ResourceRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{140}
}

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_UNSPECIFIED         ResourceType = 0
	ResourceType_RESOURCE_TYPE_IMAGE               ResourceType = 1
	ResourceType_RESOURCE_TYPE_MIDI                ResourceType = 2
	ResourceType_RESOURCE_TYPE_SHEETMUSIC          ResourceType = 3
	ResourceType_RESOURCE_TYPE_SOFTWARE            ResourceType = 4
	ResourceType_RESOURCE_TYPE_SOUNDRECORDING      ResourceType = 5
	ResourceType_RESOURCE_TYPE_TEXT                ResourceType = 6
	ResourceType_RESOURCE_TYPE_USERDEFINEDRESOURCE ResourceType = 7
	ResourceType_RESOURCE_TYPE_VIDEO               ResourceType = 8
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_IMAGE",
		2: "RESOURCE_TYPE_MIDI",
		3: "RESOURCE_TYPE_SHEETMUSIC",
		4: "RESOURCE_TYPE_SOFTWARE",
		5: "RESOURCE_TYPE_SOUNDRECORDING",
		6: "RESOURCE_TYPE_TEXT",
		7: "RESOURCE_TYPE_USERDEFINEDRESOURCE",
		8: "RESOURCE_TYPE_VIDEO",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED":         0,
		"RESOURCE_TYPE_IMAGE":               1,
		"RESOURCE_TYPE_MIDI":                2,
		"RESOURCE_TYPE_SHEETMUSIC":          3,
		"RESOURCE_TYPE_SOFTWARE":            4,
		"RESOURCE_TYPE_SOUNDRECORDING":      5,
		"RESOURCE_TYPE_TEXT":                6,
		"RESOURCE_TYPE_USERDEFINEDRESOURCE": 7,
		"RESOURCE_TYPE_VIDEO":               8,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[141].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[141]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{141}
}

type ResourceTypeMCNOTIF int32

const (
	ResourceTypeMCNOTIF_RESOURCE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED    ResourceTypeMCNOTIF = 0
	ResourceTypeMCNOTIF_RESOURCE_TYPE_M_C_N_O_T_I_F_SHEETMUSIC     ResourceTypeMCNOTIF = 1
	ResourceTypeMCNOTIF_RESOURCE_TYPE_M_C_N_O_T_I_F_SOUNDRECORDING ResourceTypeMCNOTIF = 2
	ResourceTypeMCNOTIF_RESOURCE_TYPE_M_C_N_O_T_I_F_VIDEO          ResourceTypeMCNOTIF = 3
)

// Enum value maps for ResourceTypeMCNOTIF.
var (
	ResourceTypeMCNOTIF_name = map[int32]string{
		0: "RESOURCE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED",
		1: "RESOURCE_TYPE_M_C_N_O_T_I_F_SHEETMUSIC",
		2: "RESOURCE_TYPE_M_C_N_O_T_I_F_SOUNDRECORDING",
		3: "RESOURCE_TYPE_M_C_N_O_T_I_F_VIDEO",
	}
	ResourceTypeMCNOTIF_value = map[string]int32{
		"RESOURCE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED":    0,
		"RESOURCE_TYPE_M_C_N_O_T_I_F_SHEETMUSIC":     1,
		"RESOURCE_TYPE_M_C_N_O_T_I_F_SOUNDRECORDING": 2,
		"RESOURCE_TYPE_M_C_N_O_T_I_F_VIDEO":          3,
	}
)

func (x ResourceTypeMCNOTIF) Enum() *ResourceTypeMCNOTIF {
	p := new(ResourceTypeMCNOTIF)
	*p = x
	return p
}

func (x ResourceTypeMCNOTIF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeMCNOTIF) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[142].Descriptor()
}

func (ResourceTypeMCNOTIF) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[142]
}

func (x ResourceTypeMCNOTIF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeMCNOTIF.Descriptor instead.
func (ResourceTypeMCNOTIF) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{142}
}

type ResourceTypeRDRR int32

const (
	ResourceTypeRDRR_RESOURCE_TYPE_R_D_R_R_UNSPECIFIED    ResourceTypeRDRR = 0
	ResourceTypeRDRR_RESOURCE_TYPE_R_D_R_R_SOUNDRECORDING ResourceTypeRDRR = 1
	ResourceTypeRDRR_RESOURCE_TYPE_R_D_R_R_VIDEO          ResourceTypeRDRR = 2
)

// Enum value maps for ResourceTypeRDRR.
var (
	ResourceTypeRDRR_name = map[int32]string{
		0: "RESOURCE_TYPE_R_D_R_R_UNSPECIFIED",
		1: "RESOURCE_TYPE_R_D_R_R_SOUNDRECORDING",
		2: "RESOURCE_TYPE_R_D_R_R_VIDEO",
	}
	ResourceTypeRDRR_value = map[string]int32{
		"RESOURCE_TYPE_R_D_R_R_UNSPECIFIED":    0,
		"RESOURCE_TYPE_R_D_R_R_SOUNDRECORDING": 1,
		"RESOURCE_TYPE_R_D_R_R_VIDEO":          2,
	}
)

func (x ResourceTypeRDRR) Enum() *ResourceTypeRDRR {
	p := new(ResourceTypeRDRR)
	*p = x
	return p
}

func (x ResourceTypeRDRR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeRDRR) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[143].Descriptor()
}

func (ResourceTypeRDRR) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[143]
}

func (x ResourceTypeRDRR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeRDRR.Descriptor instead.
func (ResourceTypeRDRR) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{143}
}

type ResourceWorkRelationshipType int32

const (
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_UNSPECIFIED            ResourceWorkRelationshipType = 0
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_INTERPELLATION         ResourceWorkRelationshipType = 1
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_MEDLEY                 ResourceWorkRelationshipType = 2
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_MULTIPLEWORKRESOURCE   ResourceWorkRelationshipType = 3
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_MUSICALWORKWITHSAMPLES ResourceWorkRelationshipType = 4
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_SINGLEWORKRESOURCE     ResourceWorkRelationshipType = 5
)

// Enum value maps for ResourceWorkRelationshipType.
var (
	ResourceWorkRelationshipType_name = map[int32]string{
		0: "RESOURCE_WORK_RELATIONSHIP_TYPE_UNSPECIFIED",
		1: "RESOURCE_WORK_RELATIONSHIP_TYPE_INTERPELLATION",
		2: "RESOURCE_WORK_RELATIONSHIP_TYPE_MEDLEY",
		3: "RESOURCE_WORK_RELATIONSHIP_TYPE_MULTIPLEWORKRESOURCE",
		4: "RESOURCE_WORK_RELATIONSHIP_TYPE_MUSICALWORKWITHSAMPLES",
		5: "RESOURCE_WORK_RELATIONSHIP_TYPE_SINGLEWORKRESOURCE",
	}
	ResourceWorkRelationshipType_value = map[string]int32{
		"RESOURCE_WORK_RELATIONSHIP_TYPE_UNSPECIFIED":            0,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_INTERPELLATION":         1,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_MEDLEY":                 2,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_MULTIPLEWORKRESOURCE":   3,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_MUSICALWORKWITHSAMPLES": 4,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_SINGLEWORKRESOURCE":     5,
	}
)

func (x ResourceWorkRelationshipType) Enum() *ResourceWorkRelationshipType {
	p := new(ResourceWorkRelationshipType)
	*p = x
	return p
}

func (x ResourceWorkRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceWorkRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[144].Descriptor()
}

func (ResourceWorkRelationshipType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[144]
}

func (x ResourceWorkRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceWorkRelationshipType.Descriptor instead.
func (ResourceWorkRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{144}
}

type RevenueSourceType int32

const (
	RevenueSourceType_REVENUE_SOURCE_TYPE_UNSPECIFIED      RevenueSourceType = 0
	RevenueSourceType_REVENUE_SOURCE_TYPE_FINANCIALREVENUE RevenueSourceType = 1
	RevenueSourceType_REVENUE_SOURCE_TYPE_INDEMNITYREVENUE RevenueSourceType = 2
	RevenueSourceType_REVENUE_SOURCE_TYPE_ROYALTYREVENUE   RevenueSourceType = 3
)

// Enum value maps for RevenueSourceType.
var (
	RevenueSourceType_name = map[int32]string{
		0: "REVENUE_SOURCE_TYPE_UNSPECIFIED",
		1: "REVENUE_SOURCE_TYPE_FINANCIALREVENUE",
		2: "REVENUE_SOURCE_TYPE_INDEMNITYREVENUE",
		3: "REVENUE_SOURCE_TYPE_ROYALTYREVENUE",
	}
	RevenueSourceType_value = map[string]int32{
		"REVENUE_SOURCE_TYPE_UNSPECIFIED":      0,
		"REVENUE_SOURCE_TYPE_FINANCIALREVENUE": 1,
		"REVENUE_SOURCE_TYPE_INDEMNITYREVENUE": 2,
		"REVENUE_SOURCE_TYPE_ROYALTYREVENUE":   3,
	}
)

func (x RevenueSourceType) Enum() *RevenueSourceType {
	p := new(RevenueSourceType)
	*p = x
	return p
}

func (x RevenueSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevenueSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[145].Descriptor()
}

func (RevenueSourceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[145]
}

func (x RevenueSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevenueSourceType.Descriptor instead.
func (RevenueSourceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{145}
}

type RhythmStyle int32

const (
	RhythmStyle_RHYTHM_STYLE_UNSPECIFIED   RhythmStyle = 0
	RhythmStyle_RHYTHM_STYLE_E_4ONTHEFLOOR RhythmStyle = 1
	RhythmStyle_RHYTHM_STYLE_BLUES         RhythmStyle = 2
	RhythmStyle_RHYTHM_STYLE_BOOGIEWOOGIE  RhythmStyle = 3
	RhythmStyle_RHYTHM_STYLE_CALYPSO       RhythmStyle = 4
	RhythmStyle_RHYTHM_STYLE_CUMBIA        RhythmStyle = 5
	RhythmStyle_RHYTHM_STYLE_DEMBOW        RhythmStyle = 6
	RhythmStyle_RHYTHM_STYLE_DISCO         RhythmStyle = 7
	RhythmStyle_RHYTHM_STYLE_FLAMENCO      RhythmStyle = 8
	RhythmStyle_RHYTHM_STYLE_MERENGUE      RhythmStyle = 9
	RhythmStyle_RHYTHM_STYLE_NYABINGHI     RhythmStyle = 10
	RhythmStyle_RHYTHM_STYLE_ONEDROP       RhythmStyle = 11
	RhythmStyle_RHYTHM_STYLE_POLYRHYTHM    RhythmStyle = 12
	RhythmStyle_RHYTHM_STYLE_ROCKANDROLL   RhythmStyle = 13
	RhythmStyle_RHYTHM_STYLE_RUMBA         RhythmStyle = 14
	RhythmStyle_RHYTHM_STYLE_SHUFFLE       RhythmStyle = 15
	RhythmStyle_RHYTHM_STYLE_SKANK         RhythmStyle = 16
	RhythmStyle_RHYTHM_STYLE_TALA          RhythmStyle = 17
	RhythmStyle_RHYTHM_STYLE_TEJANO        RhythmStyle = 18
	RhythmStyle_RHYTHM_STYLE_USERDEFINED   RhythmStyle = 19
)

// Enum value maps for RhythmStyle.
var (
	RhythmStyle_name = map[int32]string{
		0:  "RHYTHM_STYLE_UNSPECIFIED",
		1:  "RHYTHM_STYLE_E_4ONTHEFLOOR",
		2:  "RHYTHM_STYLE_BLUES",
		3:  "RHYTHM_STYLE_BOOGIEWOOGIE",
		4:  "RHYTHM_STYLE_CALYPSO",
		5:  "RHYTHM_STYLE_CUMBIA",
		6:  "RHYTHM_STYLE_DEMBOW",
		7:  "RHYTHM_STYLE_DISCO",
		8:  "RHYTHM_STYLE_FLAMENCO",
		9:  "RHYTHM_STYLE_MERENGUE",
		10: "RHYTHM_STYLE_NYABINGHI",
		11: "RHYTHM_STYLE_ONEDROP",
		12: "RHYTHM_STYLE_POLYRHYTHM",
		13: "RHYTHM_STYLE_ROCKANDROLL",
		14: "RHYTHM_STYLE_RUMBA",
		15: "RHYTHM_STYLE_SHUFFLE",
		16: "RHYTHM_STYLE_SKANK",
		17: "RHYTHM_STYLE_TALA",
		18: "RHYTHM_STYLE_TEJANO",
		19: "RHYTHM_STYLE_USERDEFINED",
	}
	RhythmStyle_value = map[string]int32{
		"RHYTHM_STYLE_UNSPECIFIED":   0,
		"RHYTHM_STYLE_E_4ONTHEFLOOR": 1,
		"RHYTHM_STYLE_BLUES":         2,
		"RHYTHM_STYLE_BOOGIEWOOGIE":  3,
		"RHYTHM_STYLE_CALYPSO":       4,
		"RHYTHM_STYLE_CUMBIA":        5,
		"RHYTHM_STYLE_DEMBOW":        6,
		"RHYTHM_STYLE_DISCO":         7,
		"RHYTHM_STYLE_FLAMENCO":      8,
		"RHYTHM_STYLE_MERENGUE":      9,
		"RHYTHM_STYLE_NYABINGHI":     10,
		"RHYTHM_STYLE_ONEDROP":       11,
		"RHYTHM_STYLE_POLYRHYTHM":    12,
		"RHYTHM_STYLE_ROCKANDROLL":   13,
		"RHYTHM_STYLE_RUMBA":         14,
		"RHYTHM_STYLE_SHUFFLE":       15,
		"RHYTHM_STYLE_SKANK":         16,
		"RHYTHM_STYLE_TALA":          17,
		"RHYTHM_STYLE_TEJANO":        18,
		"RHYTHM_STYLE_USERDEFINED":   19,
	}
)

func (x RhythmStyle) Enum() *RhythmStyle {
	p := new(RhythmStyle)
	*p = x
	return p
}

func (x RhythmStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RhythmStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[146].Descriptor()
}

func (RhythmStyle) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[146]
}

func (x RhythmStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RhythmStyle.Descriptor instead.
func (RhythmStyle) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{146}
}

type RightShareType int32

const (
	RightShareType_RIGHT_SHARE_TYPE_UNSPECIFIED                RightShareType = 0
	RightShareType_RIGHT_SHARE_TYPE_LICENSINGSHARE             RightShareType = 1
	RightShareType_RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE RightShareType = 2
	RightShareType_RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE RightShareType = 3
	RightShareType_RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE     RightShareType = 4
)

// Enum value maps for RightShareType.
var (
	RightShareType_name = map[int32]string{
		0: "RIGHT_SHARE_TYPE_UNSPECIFIED",
		1: "RIGHT_SHARE_TYPE_LICENSINGSHARE",
		2: "RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE",
		3: "RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE",
		4: "RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE",
	}
	RightShareType_value = map[string]int32{
		"RIGHT_SHARE_TYPE_UNSPECIFIED":                0,
		"RIGHT_SHARE_TYPE_LICENSINGSHARE":             1,
		"RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE": 2,
		"RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE": 3,
		"RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE":     4,
	}
)

func (x RightShareType) Enum() *RightShareType {
	p := new(RightShareType)
	*p = x
	return p
}

func (x RightShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[147].Descriptor()
}

func (RightShareType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[147]
}

func (x RightShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightShareType.Descriptor instead.
func (RightShareType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{147}
}

type RightsClaimPolicyType int32

const (
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED RightsClaimPolicyType = 0
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS RightsClaimPolicyType = 1
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_MONETIZE    RightsClaimPolicyType = 2
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE RightsClaimPolicyType = 3
)

// Enum value maps for RightsClaimPolicyType.
var (
	RightsClaimPolicyType_name = map[int32]string{
		0: "RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED",
		1: "RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS",
		2: "RIGHTS_CLAIM_POLICY_TYPE_MONETIZE",
		3: "RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE",
	}
	RightsClaimPolicyType_value = map[string]int32{
		"RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED": 0,
		"RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS": 1,
		"RIGHTS_CLAIM_POLICY_TYPE_MONETIZE":    2,
		"RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE": 3,
	}
)

func (x RightsClaimPolicyType) Enum() *RightsClaimPolicyType {
	p := new(RightsClaimPolicyType)
	*p = x
	return p
}

func (x RightsClaimPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsClaimPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[148].Descriptor()
}

func (RightsClaimPolicyType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[148]
}

func (x RightsClaimPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsClaimPolicyType.Descriptor instead.
func (RightsClaimPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{148}
}

type RightsClaimStatus int32

const (
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_UNSPECIFIED      RightsClaimStatus = 0
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_CONFLICT         RightsClaimStatus = 1
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_DATAINCONSISTENT RightsClaimStatus = 2
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_NOCONFLICT       RightsClaimStatus = 3
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_PENDINGREVIEW    RightsClaimStatus = 4
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_REJECTED         RightsClaimStatus = 5
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_REVOKED          RightsClaimStatus = 6
)

// Enum value maps for RightsClaimStatus.
var (
	RightsClaimStatus_name = map[int32]string{
		0: "RIGHTS_CLAIM_STATUS_UNSPECIFIED",
		1: "RIGHTS_CLAIM_STATUS_CONFLICT",
		2: "RIGHTS_CLAIM_STATUS_DATAINCONSISTENT",
		3: "RIGHTS_CLAIM_STATUS_NOCONFLICT",
		4: "RIGHTS_CLAIM_STATUS_PENDINGREVIEW",
		5: "RIGHTS_CLAIM_STATUS_REJECTED",
		6: "RIGHTS_CLAIM_STATUS_REVOKED",
	}
	RightsClaimStatus_value = map[string]int32{
		"RIGHTS_CLAIM_STATUS_UNSPECIFIED":      0,
		"RIGHTS_CLAIM_STATUS_CONFLICT":         1,
		"RIGHTS_CLAIM_STATUS_DATAINCONSISTENT": 2,
		"RIGHTS_CLAIM_STATUS_NOCONFLICT":       3,
		"RIGHTS_CLAIM_STATUS_PENDINGREVIEW":    4,
		"RIGHTS_CLAIM_STATUS_REJECTED":         5,
		"RIGHTS_CLAIM_STATUS_REVOKED":          6,
	}
)

func (x RightsClaimStatus) Enum() *RightsClaimStatus {
	p := new(RightsClaimStatus)
	*p = x
	return p
}

func (x RightsClaimStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsClaimStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[149].Descriptor()
}

func (RightsClaimStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[149]
}

func (x RightsClaimStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsClaimStatus.Descriptor instead.
func (RightsClaimStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{149}
}

type RightsControlType int32

const (
	RightsControlType_RIGHTS_CONTROL_TYPE_UNSPECIFIED         RightsControlType = 0
	RightsControlType_RIGHTS_CONTROL_TYPE_EXCLUSIVELICENSEE   RightsControlType = 1
	RightsControlType_RIGHTS_CONTROL_TYPE_LOCALPAYEE          RightsControlType = 2
	RightsControlType_RIGHTS_CONTROL_TYPE_ORIGINALOWNER       RightsControlType = 3
	RightsControlType_RIGHTS_CONTROL_TYPE_RIGHTSADMINISTRATOR RightsControlType = 4
	RightsControlType_RIGHTS_CONTROL_TYPE_SUCCESSORINTITLE    RightsControlType = 5
)

// Enum value maps for RightsControlType.
var (
	RightsControlType_name = map[int32]string{
		0: "RIGHTS_CONTROL_TYPE_UNSPECIFIED",
		1: "RIGHTS_CONTROL_TYPE_EXCLUSIVELICENSEE",
		2: "RIGHTS_CONTROL_TYPE_LOCALPAYEE",
		3: "RIGHTS_CONTROL_TYPE_ORIGINALOWNER",
		4: "RIGHTS_CONTROL_TYPE_RIGHTSADMINISTRATOR",
		5: "RIGHTS_CONTROL_TYPE_SUCCESSORINTITLE",
	}
	RightsControlType_value = map[string]int32{
		"RIGHTS_CONTROL_TYPE_UNSPECIFIED":         0,
		"RIGHTS_CONTROL_TYPE_EXCLUSIVELICENSEE":   1,
		"RIGHTS_CONTROL_TYPE_LOCALPAYEE":          2,
		"RIGHTS_CONTROL_TYPE_ORIGINALOWNER":       3,
		"RIGHTS_CONTROL_TYPE_RIGHTSADMINISTRATOR": 4,
		"RIGHTS_CONTROL_TYPE_SUCCESSORINTITLE":    5,
	}
)

func (x RightsControlType) Enum() *RightsControlType {
	p := new(RightsControlType)
	*p = x
	return p
}

func (x RightsControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[150].Descriptor()
}

func (RightsControlType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[150]
}

func (x RightsControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsControlType.Descriptor instead.
func (RightsControlType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{150}
}

type RightsControllerRole int32

const (
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_UNSPECIFIED                 RightsControllerRole = 0
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY RightsControllerRole = 1
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_LOCALPAYEE                  RightsControllerRole = 2
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR         RightsControllerRole = 3
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER            RightsControllerRole = 4
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR        RightsControllerRole = 5
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_UNKNOWN                     RightsControllerRole = 6
)

// Enum value maps for RightsControllerRole.
var (
	RightsControllerRole_name = map[int32]string{
		0: "RIGHTS_CONTROLLER_ROLE_UNSPECIFIED",
		1: "RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY",
		2: "RIGHTS_CONTROLLER_ROLE_LOCALPAYEE",
		3: "RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR",
		4: "RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER",
		5: "RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR",
		6: "RIGHTS_CONTROLLER_ROLE_UNKNOWN",
	}
	RightsControllerRole_value = map[string]int32{
		"RIGHTS_CONTROLLER_ROLE_UNSPECIFIED":                 0,
		"RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY": 1,
		"RIGHTS_CONTROLLER_ROLE_LOCALPAYEE":                  2,
		"RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR":         3,
		"RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER":            4,
		"RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR":        5,
		"RIGHTS_CONTROLLER_ROLE_UNKNOWN":                     6,
	}
)

func (x RightsControllerRole) Enum() *RightsControllerRole {
	p := new(RightsControllerRole)
	*p = x
	return p
}

func (x RightsControllerRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsControllerRole) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[151].Descriptor()
}

func (RightsControllerRole) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[151]
}

func (x RightsControllerRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsControllerRole.Descriptor instead.
func (RightsControllerRole) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{151}
}

type RightsControllerType int32

const (
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_UNSPECIFIED       RightsControllerType = 0
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER     RightsControllerType = 1
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE  RightsControllerType = 2
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE RightsControllerType = 3
)

// Enum value maps for RightsControllerType.
var (
	RightsControllerType_name = map[int32]string{
		0: "RIGHTS_CONTROLLER_TYPE_UNSPECIFIED",
		1: "RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER",
		2: "RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE",
		3: "RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE",
	}
	RightsControllerType_value = map[string]int32{
		"RIGHTS_CONTROLLER_TYPE_UNSPECIFIED":       0,
		"RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER":     1,
		"RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE":  2,
		"RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE": 3,
	}
)

func (x RightsControllerType) Enum() *RightsControllerType {
	p := new(RightsControllerType)
	*p = x
	return p
}

func (x RightsControllerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsControllerType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[152].Descriptor()
}

func (RightsControllerType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[152]
}

func (x RightsControllerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsControllerType.Descriptor instead.
func (RightsControllerType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{152}
}

type RightsCoverage int32

const (
	RightsCoverage_RIGHTS_COVERAGE_UNSPECIFIED          RightsCoverage = 0
	RightsCoverage_RIGHTS_COVERAGE_MAKEAVAILABLERIGHT   RightsCoverage = 1
	RightsCoverage_RIGHTS_COVERAGE_MECHANICALRIGHT      RightsCoverage = 2
	RightsCoverage_RIGHTS_COVERAGE_PERFORMINGRIGHT      RightsCoverage = 3
	RightsCoverage_RIGHTS_COVERAGE_PRINTRIGHT           RightsCoverage = 4
	RightsCoverage_RIGHTS_COVERAGE_REPRODUCTIONRIGHT    RightsCoverage = 5
	RightsCoverage_RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT RightsCoverage = 6
	RightsCoverage_RIGHTS_COVERAGE_USERDEFINED          RightsCoverage = 7
)

// Enum value maps for RightsCoverage.
var (
	RightsCoverage_name = map[int32]string{
		0: "RIGHTS_COVERAGE_UNSPECIFIED",
		1: "RIGHTS_COVERAGE_MAKEAVAILABLERIGHT",
		2: "RIGHTS_COVERAGE_MECHANICALRIGHT",
		3: "RIGHTS_COVERAGE_PERFORMINGRIGHT",
		4: "RIGHTS_COVERAGE_PRINTRIGHT",
		5: "RIGHTS_COVERAGE_REPRODUCTIONRIGHT",
		6: "RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT",
		7: "RIGHTS_COVERAGE_USERDEFINED",
	}
	RightsCoverage_value = map[string]int32{
		"RIGHTS_COVERAGE_UNSPECIFIED":          0,
		"RIGHTS_COVERAGE_MAKEAVAILABLERIGHT":   1,
		"RIGHTS_COVERAGE_MECHANICALRIGHT":      2,
		"RIGHTS_COVERAGE_PERFORMINGRIGHT":      3,
		"RIGHTS_COVERAGE_PRINTRIGHT":           4,
		"RIGHTS_COVERAGE_REPRODUCTIONRIGHT":    5,
		"RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT": 6,
		"RIGHTS_COVERAGE_USERDEFINED":          7,
	}
)

func (x RightsCoverage) Enum() *RightsCoverage {
	p := new(RightsCoverage)
	*p = x
	return p
}

func (x RightsCoverage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsCoverage) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[153].Descriptor()
}

func (RightsCoverage) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[153]
}

func (x RightsCoverage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsCoverage.Descriptor instead.
func (RightsCoverage) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{153}
}

type RightsCoverageMWNL int32

const (
	RightsCoverageMWNL_RIGHTS_COVERAGE_M_W_N_L_UNSPECIFIED          RightsCoverageMWNL = 0
	RightsCoverageMWNL_RIGHTS_COVERAGE_M_W_N_L_MECHANICALRIGHT      RightsCoverageMWNL = 1
	RightsCoverageMWNL_RIGHTS_COVERAGE_M_W_N_L_PERFORMINGRIGHT      RightsCoverageMWNL = 2
	RightsCoverageMWNL_RIGHTS_COVERAGE_M_W_N_L_PRINTRIGHT           RightsCoverageMWNL = 3
	RightsCoverageMWNL_RIGHTS_COVERAGE_M_W_N_L_SYNCHRONIZATIONRIGHT RightsCoverageMWNL = 4
)

// Enum value maps for RightsCoverageMWNL.
var (
	RightsCoverageMWNL_name = map[int32]string{
		0: "RIGHTS_COVERAGE_M_W_N_L_UNSPECIFIED",
		1: "RIGHTS_COVERAGE_M_W_N_L_MECHANICALRIGHT",
		2: "RIGHTS_COVERAGE_M_W_N_L_PERFORMINGRIGHT",
		3: "RIGHTS_COVERAGE_M_W_N_L_PRINTRIGHT",
		4: "RIGHTS_COVERAGE_M_W_N_L_SYNCHRONIZATIONRIGHT",
	}
	RightsCoverageMWNL_value = map[string]int32{
		"RIGHTS_COVERAGE_M_W_N_L_UNSPECIFIED":          0,
		"RIGHTS_COVERAGE_M_W_N_L_MECHANICALRIGHT":      1,
		"RIGHTS_COVERAGE_M_W_N_L_PERFORMINGRIGHT":      2,
		"RIGHTS_COVERAGE_M_W_N_L_PRINTRIGHT":           3,
		"RIGHTS_COVERAGE_M_W_N_L_SYNCHRONIZATIONRIGHT": 4,
	}
)

func (x RightsCoverageMWNL) Enum() *RightsCoverageMWNL {
	p := new(RightsCoverageMWNL)
	*p = x
	return p
}

func (x RightsCoverageMWNL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsCoverageMWNL) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[154].Descriptor()
}

func (RightsCoverageMWNL) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[154]
}

func (x RightsCoverageMWNL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsCoverageMWNL.Descriptor instead.
func (RightsCoverageMWNL) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{154}
}

type RightsStatementProfile int32

const (
	RightsStatementProfile_RIGHTS_STATEMENT_PROFILE_UNSPECIFIED         RightsStatementProfile = 0
	RightsStatementProfile_RIGHTS_STATEMENT_PROFILE_MANDATEDUSAGERIGHTS RightsStatementProfile = 1
	RightsStatementProfile_RIGHTS_STATEMENT_PROFILE_RIGHTSSTATEMENT     RightsStatementProfile = 2
)

// Enum value maps for RightsStatementProfile.
var (
	RightsStatementProfile_name = map[int32]string{
		0: "RIGHTS_STATEMENT_PROFILE_UNSPECIFIED",
		1: "RIGHTS_STATEMENT_PROFILE_MANDATEDUSAGERIGHTS",
		2: "RIGHTS_STATEMENT_PROFILE_RIGHTSSTATEMENT",
	}
	RightsStatementProfile_value = map[string]int32{
		"RIGHTS_STATEMENT_PROFILE_UNSPECIFIED":         0,
		"RIGHTS_STATEMENT_PROFILE_MANDATEDUSAGERIGHTS": 1,
		"RIGHTS_STATEMENT_PROFILE_RIGHTSSTATEMENT":     2,
	}
)

func (x RightsStatementProfile) Enum() *RightsStatementProfile {
	p := new(RightsStatementProfile)
	*p = x
	return p
}

func (x RightsStatementProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsStatementProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[155].Descriptor()
}

func (RightsStatementProfile) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[155]
}

func (x RightsStatementProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsStatementProfile.Descriptor instead.
func (RightsStatementProfile) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{155}
}

type RootChordNote int32

const (
	RootChordNote_ROOT_CHORD_NOTE_UNSPECIFIED RootChordNote = 0
	RootChordNote_ROOT_CHORD_NOTE_A           RootChordNote = 1
	RootChordNote_ROOT_CHORD_NOTE_AB_G        RootChordNote = 2
	RootChordNote_ROOT_CHORD_NOTE_B           RootChordNote = 3
	RootChordNote_ROOT_CHORD_NOTE_BB_A        RootChordNote = 4
	RootChordNote_ROOT_CHORD_NOTE_C           RootChordNote = 5
	RootChordNote_ROOT_CHORD_NOTE_C_DB        RootChordNote = 6
	RootChordNote_ROOT_CHORD_NOTE_D           RootChordNote = 7
	RootChordNote_ROOT_CHORD_NOTE_E           RootChordNote = 8
	RootChordNote_ROOT_CHORD_NOTE_EB_D        RootChordNote = 9
	RootChordNote_ROOT_CHORD_NOTE_F           RootChordNote = 10
	RootChordNote_ROOT_CHORD_NOTE_G           RootChordNote = 11
	RootChordNote_ROOT_CHORD_NOTE_GB_F        RootChordNote = 12
	RootChordNote_ROOT_CHORD_NOTE_USERDEFINED RootChordNote = 13
)

// Enum value maps for RootChordNote.
var (
	RootChordNote_name = map[int32]string{
		0:  "ROOT_CHORD_NOTE_UNSPECIFIED",
		1:  "ROOT_CHORD_NOTE_A",
		2:  "ROOT_CHORD_NOTE_AB_G",
		3:  "ROOT_CHORD_NOTE_B",
		4:  "ROOT_CHORD_NOTE_BB_A",
		5:  "ROOT_CHORD_NOTE_C",
		6:  "ROOT_CHORD_NOTE_C_DB",
		7:  "ROOT_CHORD_NOTE_D",
		8:  "ROOT_CHORD_NOTE_E",
		9:  "ROOT_CHORD_NOTE_EB_D",
		10: "ROOT_CHORD_NOTE_F",
		11: "ROOT_CHORD_NOTE_G",
		12: "ROOT_CHORD_NOTE_GB_F",
		13: "ROOT_CHORD_NOTE_USERDEFINED",
	}
	RootChordNote_value = map[string]int32{
		"ROOT_CHORD_NOTE_UNSPECIFIED": 0,
		"ROOT_CHORD_NOTE_A":           1,
		"ROOT_CHORD_NOTE_AB_G":        2,
		"ROOT_CHORD_NOTE_B":           3,
		"ROOT_CHORD_NOTE_BB_A":        4,
		"ROOT_CHORD_NOTE_C":           5,
		"ROOT_CHORD_NOTE_C_DB":        6,
		"ROOT_CHORD_NOTE_D":           7,
		"ROOT_CHORD_NOTE_E":           8,
		"ROOT_CHORD_NOTE_EB_D":        9,
		"ROOT_CHORD_NOTE_F":           10,
		"ROOT_CHORD_NOTE_G":           11,
		"ROOT_CHORD_NOTE_GB_F":        12,
		"ROOT_CHORD_NOTE_USERDEFINED": 13,
	}
)

func (x RootChordNote) Enum() *RootChordNote {
	p := new(RootChordNote)
	*p = x
	return p
}

func (x RootChordNote) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RootChordNote) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[156].Descriptor()
}

func (RootChordNote) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[156]
}

func (x RootChordNote) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RootChordNote.Descriptor instead.
func (RootChordNote) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{156}
}

type RootChordQuality int32

const (
	RootChordQuality_ROOT_CHORD_QUALITY_UNSPECIFIED           RootChordQuality = 0
	RootChordQuality_ROOT_CHORD_QUALITY_AUGMENTEDSEVENTH      RootChordQuality = 1
	RootChordQuality_ROOT_CHORD_QUALITY_AUGMENTEDTRIAD        RootChordQuality = 2
	RootChordQuality_ROOT_CHORD_QUALITY_DIMINISHEDSEVENTH     RootChordQuality = 3
	RootChordQuality_ROOT_CHORD_QUALITY_DIMINISHEDTRIAD       RootChordQuality = 4
	RootChordQuality_ROOT_CHORD_QUALITY_DOMINANTSEVENTH       RootChordQuality = 5
	RootChordQuality_ROOT_CHORD_QUALITY_FIFTH                 RootChordQuality = 6
	RootChordQuality_ROOT_CHORD_QUALITY_HALFDIMINISHEDSEVENTH RootChordQuality = 7
	RootChordQuality_ROOT_CHORD_QUALITY_MAJORSEVENTH          RootChordQuality = 8
	RootChordQuality_ROOT_CHORD_QUALITY_MAJORSIXTH            RootChordQuality = 9
	RootChordQuality_ROOT_CHORD_QUALITY_MAJORTRIAD            RootChordQuality = 10
	RootChordQuality_ROOT_CHORD_QUALITY_MAJORMINORSEVENTH     RootChordQuality = 11
	RootChordQuality_ROOT_CHORD_QUALITY_MINORSEVENTH          RootChordQuality = 12
	RootChordQuality_ROOT_CHORD_QUALITY_MINORSIXTH            RootChordQuality = 13
	RootChordQuality_ROOT_CHORD_QUALITY_MINORTRIAD            RootChordQuality = 14
	RootChordQuality_ROOT_CHORD_QUALITY_SUSPENDED             RootChordQuality = 15
	RootChordQuality_ROOT_CHORD_QUALITY_USERDEFINED           RootChordQuality = 16
)

// Enum value maps for RootChordQuality.
var (
	RootChordQuality_name = map[int32]string{
		0:  "ROOT_CHORD_QUALITY_UNSPECIFIED",
		1:  "ROOT_CHORD_QUALITY_AUGMENTEDSEVENTH",
		2:  "ROOT_CHORD_QUALITY_AUGMENTEDTRIAD",
		3:  "ROOT_CHORD_QUALITY_DIMINISHEDSEVENTH",
		4:  "ROOT_CHORD_QUALITY_DIMINISHEDTRIAD",
		5:  "ROOT_CHORD_QUALITY_DOMINANTSEVENTH",
		6:  "ROOT_CHORD_QUALITY_FIFTH",
		7:  "ROOT_CHORD_QUALITY_HALFDIMINISHEDSEVENTH",
		8:  "ROOT_CHORD_QUALITY_MAJORSEVENTH",
		9:  "ROOT_CHORD_QUALITY_MAJORSIXTH",
		10: "ROOT_CHORD_QUALITY_MAJORTRIAD",
		11: "ROOT_CHORD_QUALITY_MAJORMINORSEVENTH",
		12: "ROOT_CHORD_QUALITY_MINORSEVENTH",
		13: "ROOT_CHORD_QUALITY_MINORSIXTH",
		14: "ROOT_CHORD_QUALITY_MINORTRIAD",
		15: "ROOT_CHORD_QUALITY_SUSPENDED",
		16: "ROOT_CHORD_QUALITY_USERDEFINED",
	}
	RootChordQuality_value = map[string]int32{
		"ROOT_CHORD_QUALITY_UNSPECIFIED":           0,
		"ROOT_CHORD_QUALITY_AUGMENTEDSEVENTH":      1,
		"ROOT_CHORD_QUALITY_AUGMENTEDTRIAD":        2,
		"ROOT_CHORD_QUALITY_DIMINISHEDSEVENTH":     3,
		"ROOT_CHORD_QUALITY_DIMINISHEDTRIAD":       4,
		"ROOT_CHORD_QUALITY_DOMINANTSEVENTH":       5,
		"ROOT_CHORD_QUALITY_FIFTH":                 6,
		"ROOT_CHORD_QUALITY_HALFDIMINISHEDSEVENTH": 7,
		"ROOT_CHORD_QUALITY_MAJORSEVENTH":          8,
		"ROOT_CHORD_QUALITY_MAJORSIXTH":            9,
		"ROOT_CHORD_QUALITY_MAJORTRIAD":            10,
		"ROOT_CHORD_QUALITY_MAJORMINORSEVENTH":     11,
		"ROOT_CHORD_QUALITY_MINORSEVENTH":          12,
		"ROOT_CHORD_QUALITY_MINORSIXTH":            13,
		"ROOT_CHORD_QUALITY_MINORTRIAD":            14,
		"ROOT_CHORD_QUALITY_SUSPENDED":             15,
		"ROOT_CHORD_QUALITY_USERDEFINED":           16,
	}
)

func (x RootChordQuality) Enum() *RootChordQuality {
	p := new(RootChordQuality)
	*p = x
	return p
}

func (x RootChordQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RootChordQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[157].Descriptor()
}

func (RootChordQuality) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[157]
}

func (x RootChordQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RootChordQuality.Descriptor instead.
func (RootChordQuality) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{157}
}

type RoyaltyRateCalculationType int32

const (
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED                      RoyaltyRateCalculationType = 0
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE RoyaltyRateCalculationType = 1
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE      RoyaltyRateCalculationType = 2
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE            RoyaltyRateCalculationType = 3
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE      RoyaltyRateCalculationType = 4
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE             RoyaltyRateCalculationType = 5
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_PPD                              RoyaltyRateCalculationType = 6
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE                      RoyaltyRateCalculationType = 7
)

// Enum value maps for RoyaltyRateCalculationType.
var (
	RoyaltyRateCalculationType_name = map[int32]string{
		0: "ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED",
		1: "ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE",
		2: "ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE",
		3: "ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE",
		4: "ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE",
		5: "ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE",
		6: "ROYALTY_RATE_CALCULATION_TYPE_PPD",
		7: "ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE",
	}
	RoyaltyRateCalculationType_value = map[string]int32{
		"ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED":                      0,
		"ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE": 1,
		"ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE":      2,
		"ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE":            3,
		"ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE":      4,
		"ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE":             5,
		"ROYALTY_RATE_CALCULATION_TYPE_PPD":                              6,
		"ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE":                      7,
	}
)

func (x RoyaltyRateCalculationType) Enum() *RoyaltyRateCalculationType {
	p := new(RoyaltyRateCalculationType)
	*p = x
	return p
}

func (x RoyaltyRateCalculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoyaltyRateCalculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[158].Descriptor()
}

func (RoyaltyRateCalculationType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[158]
}

func (x RoyaltyRateCalculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoyaltyRateCalculationType.Descriptor instead.
func (RoyaltyRateCalculationType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{158}
}

type RoyaltyRateType int32

const (
	RoyaltyRateType_ROYALTY_RATE_TYPE_UNSPECIFIED           RoyaltyRateType = 0
	RoyaltyRateType_ROYALTY_RATE_TYPE_PENNYRATE             RoyaltyRateType = 1
	RoyaltyRateType_ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE RoyaltyRateType = 2
)

// Enum value maps for RoyaltyRateType.
var (
	RoyaltyRateType_name = map[int32]string{
		0: "ROYALTY_RATE_TYPE_UNSPECIFIED",
		1: "ROYALTY_RATE_TYPE_PENNYRATE",
		2: "ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE",
	}
	RoyaltyRateType_value = map[string]int32{
		"ROYALTY_RATE_TYPE_UNSPECIFIED":           0,
		"ROYALTY_RATE_TYPE_PENNYRATE":             1,
		"ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE": 2,
	}
)

func (x RoyaltyRateType) Enum() *RoyaltyRateType {
	p := new(RoyaltyRateType)
	*p = x
	return p
}

func (x RoyaltyRateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoyaltyRateType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[159].Descriptor()
}

func (RoyaltyRateType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[159]
}

func (x RoyaltyRateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoyaltyRateType.Descriptor instead.
func (RoyaltyRateType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{159}
}

type SessionType int32

const (
	SessionType_SESSION_TYPE_UNSPECIFIED          SessionType = 0
	SessionType_SESSION_TYPE_ARTISTVOCALS         SessionType = 1
	SessionType_SESSION_TYPE_DEMO                 SessionType = 2
	SessionType_SESSION_TYPE_DIGITALEDITING       SessionType = 3
	SessionType_SESSION_TYPE_EDITING              SessionType = 4
	SessionType_SESSION_TYPE_LIVEPERFORMANCE      SessionType = 5
	SessionType_SESSION_TYPE_MASTERING            SessionType = 6
	SessionType_SESSION_TYPE_MIXING               SessionType = 7
	SessionType_SESSION_TYPE_OVERDUB              SessionType = 8
	SessionType_SESSION_TYPE_PREPRODUCTION        SessionType = 9
	SessionType_SESSION_TYPE_PRESERVATION         SessionType = 10
	SessionType_SESSION_TYPE_PRODUCTION           SessionType = 11
	SessionType_SESSION_TYPE_PROJECT              SessionType = 12
	SessionType_SESSION_TYPE_RECORDING            SessionType = 13
	SessionType_SESSION_TYPE_REMIXING             SessionType = 14
	SessionType_SESSION_TYPE_TRACKING             SessionType = 15
	SessionType_SESSION_TYPE_TRANSFER             SessionType = 16
	SessionType_SESSION_TYPE_TRANSFERSANDSAFETIES SessionType = 17
	SessionType_SESSION_TYPE_USERDEFINED          SessionType = 18
	SessionType_SESSION_TYPE_VOCAL                SessionType = 19
)

// Enum value maps for SessionType.
var (
	SessionType_name = map[int32]string{
		0:  "SESSION_TYPE_UNSPECIFIED",
		1:  "SESSION_TYPE_ARTISTVOCALS",
		2:  "SESSION_TYPE_DEMO",
		3:  "SESSION_TYPE_DIGITALEDITING",
		4:  "SESSION_TYPE_EDITING",
		5:  "SESSION_TYPE_LIVEPERFORMANCE",
		6:  "SESSION_TYPE_MASTERING",
		7:  "SESSION_TYPE_MIXING",
		8:  "SESSION_TYPE_OVERDUB",
		9:  "SESSION_TYPE_PREPRODUCTION",
		10: "SESSION_TYPE_PRESERVATION",
		11: "SESSION_TYPE_PRODUCTION",
		12: "SESSION_TYPE_PROJECT",
		13: "SESSION_TYPE_RECORDING",
		14: "SESSION_TYPE_REMIXING",
		15: "SESSION_TYPE_TRACKING",
		16: "SESSION_TYPE_TRANSFER",
		17: "SESSION_TYPE_TRANSFERSANDSAFETIES",
		18: "SESSION_TYPE_USERDEFINED",
		19: "SESSION_TYPE_VOCAL",
	}
	SessionType_value = map[string]int32{
		"SESSION_TYPE_UNSPECIFIED":          0,
		"SESSION_TYPE_ARTISTVOCALS":         1,
		"SESSION_TYPE_DEMO":                 2,
		"SESSION_TYPE_DIGITALEDITING":       3,
		"SESSION_TYPE_EDITING":              4,
		"SESSION_TYPE_LIVEPERFORMANCE":      5,
		"SESSION_TYPE_MASTERING":            6,
		"SESSION_TYPE_MIXING":               7,
		"SESSION_TYPE_OVERDUB":              8,
		"SESSION_TYPE_PREPRODUCTION":        9,
		"SESSION_TYPE_PRESERVATION":         10,
		"SESSION_TYPE_PRODUCTION":           11,
		"SESSION_TYPE_PROJECT":              12,
		"SESSION_TYPE_RECORDING":            13,
		"SESSION_TYPE_REMIXING":             14,
		"SESSION_TYPE_TRACKING":             15,
		"SESSION_TYPE_TRANSFER":             16,
		"SESSION_TYPE_TRANSFERSANDSAFETIES": 17,
		"SESSION_TYPE_USERDEFINED":          18,
		"SESSION_TYPE_VOCAL":                19,
	}
)

func (x SessionType) Enum() *SessionType {
	p := new(SessionType)
	*p = x
	return p
}

func (x SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[160].Descriptor()
}

func (SessionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[160]
}

func (x SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionType.Descriptor instead.
func (SessionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{160}
}

type SheetMusicCodecType int32

const (
	SheetMusicCodecType_SHEET_MUSIC_CODEC_TYPE_UNSPECIFIED SheetMusicCodecType = 0
	SheetMusicCodecType_SHEET_MUSIC_CODEC_TYPE_USERDEFINED SheetMusicCodecType = 1
)

// Enum value maps for SheetMusicCodecType.
var (
	SheetMusicCodecType_name = map[int32]string{
		0: "SHEET_MUSIC_CODEC_TYPE_UNSPECIFIED",
		1: "SHEET_MUSIC_CODEC_TYPE_USERDEFINED",
	}
	SheetMusicCodecType_value = map[string]int32{
		"SHEET_MUSIC_CODEC_TYPE_UNSPECIFIED": 0,
		"SHEET_MUSIC_CODEC_TYPE_USERDEFINED": 1,
	}
)

func (x SheetMusicCodecType) Enum() *SheetMusicCodecType {
	p := new(SheetMusicCodecType)
	*p = x
	return p
}

func (x SheetMusicCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SheetMusicCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[161].Descriptor()
}

func (SheetMusicCodecType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[161]
}

func (x SheetMusicCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SheetMusicCodecType.Descriptor instead.
func (SheetMusicCodecType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{161}
}

type SheetMusicType int32

const (
	SheetMusicType_SHEET_MUSIC_TYPE_UNSPECIFIED SheetMusicType = 0
	SheetMusicType_SHEET_MUSIC_TYPE_USERDEFINED SheetMusicType = 1
)

// Enum value maps for SheetMusicType.
var (
	SheetMusicType_name = map[int32]string{
		0: "SHEET_MUSIC_TYPE_UNSPECIFIED",
		1: "SHEET_MUSIC_TYPE_USERDEFINED",
	}
	SheetMusicType_value = map[string]int32{
		"SHEET_MUSIC_TYPE_UNSPECIFIED": 0,
		"SHEET_MUSIC_TYPE_USERDEFINED": 1,
	}
)

func (x SheetMusicType) Enum() *SheetMusicType {
	p := new(SheetMusicType)
	*p = x
	return p
}

func (x SheetMusicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SheetMusicType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[162].Descriptor()
}

func (SheetMusicType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[162]
}

func (x SheetMusicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SheetMusicType.Descriptor instead.
func (SheetMusicType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{162}
}

type SoftwareType int32

const (
	SoftwareType_SOFTWARE_TYPE_UNSPECIFIED             SoftwareType = 0
	SoftwareType_SOFTWARE_TYPE_INTERACTIVEBOOKLET      SoftwareType = 1
	SoftwareType_SOFTWARE_TYPE_MUSICALWORKBASEDGAME    SoftwareType = 2
	SoftwareType_SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME SoftwareType = 3
	SoftwareType_SOFTWARE_TYPE_SCREENSAVER             SoftwareType = 4
	SoftwareType_SOFTWARE_TYPE_UNKNOWN                 SoftwareType = 5
	SoftwareType_SOFTWARE_TYPE_USERDEFINED             SoftwareType = 6
)

// Enum value maps for SoftwareType.
var (
	SoftwareType_name = map[int32]string{
		0: "SOFTWARE_TYPE_UNSPECIFIED",
		1: "SOFTWARE_TYPE_INTERACTIVEBOOKLET",
		2: "SOFTWARE_TYPE_MUSICALWORKBASEDGAME",
		3: "SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME",
		4: "SOFTWARE_TYPE_SCREENSAVER",
		5: "SOFTWARE_TYPE_UNKNOWN",
		6: "SOFTWARE_TYPE_USERDEFINED",
	}
	SoftwareType_value = map[string]int32{
		"SOFTWARE_TYPE_UNSPECIFIED":             0,
		"SOFTWARE_TYPE_INTERACTIVEBOOKLET":      1,
		"SOFTWARE_TYPE_MUSICALWORKBASEDGAME":    2,
		"SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME": 3,
		"SOFTWARE_TYPE_SCREENSAVER":             4,
		"SOFTWARE_TYPE_UNKNOWN":                 5,
		"SOFTWARE_TYPE_USERDEFINED":             6,
	}
)

func (x SoftwareType) Enum() *SoftwareType {
	p := new(SoftwareType)
	*p = x
	return p
}

func (x SoftwareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[163].Descriptor()
}

func (SoftwareType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[163]
}

func (x SoftwareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoftwareType.Descriptor instead.
func (SoftwareType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{163}
}

type SoundRecordingType int32

const (
	SoundRecordingType_SOUND_RECORDING_TYPE_UNSPECIFIED                           SoundRecordingType = 0
	SoundRecordingType_SOUND_RECORDING_TYPE_AUDIOSTEM                             SoundRecordingType = 1
	SoundRecordingType_SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING    SoundRecordingType = 2
	SoundRecordingType_SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING             SoundRecordingType = 3
	SoundRecordingType_SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING SoundRecordingType = 4
	SoundRecordingType_SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING          SoundRecordingType = 5
	SoundRecordingType_SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING              SoundRecordingType = 6
	SoundRecordingType_SOUND_RECORDING_TYPE_UNKNOWN                               SoundRecordingType = 7
	SoundRecordingType_SOUND_RECORDING_TYPE_USERDEFINED                           SoundRecordingType = 8
)

// Enum value maps for SoundRecordingType.
var (
	SoundRecordingType_name = map[int32]string{
		0: "SOUND_RECORDING_TYPE_UNSPECIFIED",
		1: "SOUND_RECORDING_TYPE_AUDIOSTEM",
		2: "SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING",
		3: "SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING",
		4: "SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING",
		5: "SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING",
		6: "SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING",
		7: "SOUND_RECORDING_TYPE_UNKNOWN",
		8: "SOUND_RECORDING_TYPE_USERDEFINED",
	}
	SoundRecordingType_value = map[string]int32{
		"SOUND_RECORDING_TYPE_UNSPECIFIED":                           0,
		"SOUND_RECORDING_TYPE_AUDIOSTEM":                             1,
		"SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING":    2,
		"SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING":             3,
		"SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING": 4,
		"SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING":          5,
		"SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING":              6,
		"SOUND_RECORDING_TYPE_UNKNOWN":                               7,
		"SOUND_RECORDING_TYPE_USERDEFINED":                           8,
	}
)

func (x SoundRecordingType) Enum() *SoundRecordingType {
	p := new(SoundRecordingType)
	*p = x
	return p
}

func (x SoundRecordingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoundRecordingType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[164].Descriptor()
}

func (SoundRecordingType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[164]
}

func (x SoundRecordingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoundRecordingType.Descriptor instead.
func (SoundRecordingType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{164}
}

type Status int32

const (
	Status_STATUS_UNSPECIFIED       Status = 0
	Status_STATUS_ASSETSNEEDED      Status = 1
	Status_STATUS_AWAITINGMATERIALS Status = 2
	Status_STATUS_BACKEDUP          Status = 3
	Status_STATUS_CANCELED          Status = 4
	Status_STATUS_CLOSED            Status = 5
	Status_STATUS_COMPLETED         Status = 6
	Status_STATUS_INWORK            Status = 7
	Status_STATUS_NOTSTARTED        Status = 8
	Status_STATUS_USERDEFINED       Status = 9
	Status_STATUS_VERIFIED          Status = 10
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_ASSETSNEEDED",
		2:  "STATUS_AWAITINGMATERIALS",
		3:  "STATUS_BACKEDUP",
		4:  "STATUS_CANCELED",
		5:  "STATUS_CLOSED",
		6:  "STATUS_COMPLETED",
		7:  "STATUS_INWORK",
		8:  "STATUS_NOTSTARTED",
		9:  "STATUS_USERDEFINED",
		10: "STATUS_VERIFIED",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":       0,
		"STATUS_ASSETSNEEDED":      1,
		"STATUS_AWAITINGMATERIALS": 2,
		"STATUS_BACKEDUP":          3,
		"STATUS_CANCELED":          4,
		"STATUS_CLOSED":            5,
		"STATUS_COMPLETED":         6,
		"STATUS_INWORK":            7,
		"STATUS_NOTSTARTED":        8,
		"STATUS_USERDEFINED":       9,
		"STATUS_VERIFIED":          10,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[165].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[165]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{165}
}

type SubGenre int32

const (
	SubGenre_SUB_GENRE_UNSPECIFIED              SubGenre = 0
	SubGenre_SUB_GENRE_ACOUSTICCHICAGOBLUES     SubGenre = 1
	SubGenre_SUB_GENRE_BOOGIEWOOGIE             SubGenre = 2
	SubGenre_SUB_GENRE_BRITISHBLUES             SubGenre = 3
	SubGenre_SUB_GENRE_CHICAGOBLUES             SubGenre = 4
	SubGenre_SUB_GENRE_CLASSICFEMALEBLUES       SubGenre = 5
	SubGenre_SUB_GENRE_COUNTRYBLUES             SubGenre = 6
	SubGenre_SUB_GENRE_DELTABLUES               SubGenre = 7
	SubGenre_SUB_GENRE_ELECTRICTEXASBLUES       SubGenre = 8
	SubGenre_SUB_GENRE_HILLCOUNTRYBLUES         SubGenre = 9
	SubGenre_SUB_GENRE_JUMP_BLUES               SubGenre = 10
	SubGenre_SUB_GENRE_MODERNBLUES              SubGenre = 11
	SubGenre_SUB_GENRE_NEWORLEANSBLUES          SubGenre = 12
	SubGenre_SUB_GENRE_PIANOBLUES               SubGenre = 13
	SubGenre_SUB_GENRE_PIEDMONTBLUES            SubGenre = 14
	SubGenre_SUB_GENRE_ROOTS                    SubGenre = 15
	SubGenre_SUB_GENRE_SWAMPBLUES               SubGenre = 16
	SubGenre_SUB_GENRE_TEXASBLUES               SubGenre = 17
	SubGenre_SUB_GENRE_TRADITIONALACOUSTIC      SubGenre = 18
	SubGenre_SUB_GENRE_TRADITIONALELECTRIC      SubGenre = 19
	SubGenre_SUB_GENRE_WESTCOASTBLUES           SubGenre = 20
	SubGenre_SUB_GENRE_E_20THCENTURY            SubGenre = 21
	SubGenre_SUB_GENRE_E_21STCENTURY            SubGenre = 22
	SubGenre_SUB_GENRE_ACOUSMATIC               SubGenre = 23
	SubGenre_SUB_GENRE_AMBROSIANCHANT           SubGenre = 24
	SubGenre_SUB_GENRE_ARSANTIQUA               SubGenre = 25
	SubGenre_SUB_GENRE_ARSNOVA                  SubGenre = 26
	SubGenre_SUB_GENRE_BAROQUE                  SubGenre = 27
	SubGenre_SUB_GENRE_BYZANTINECHANT           SubGenre = 28
	SubGenre_SUB_GENRE_CLASSICAL                SubGenre = 29
	SubGenre_SUB_GENRE_CLASSICALCROSSOVER       SubGenre = 30
	SubGenre_SUB_GENRE_CONTEMPORARY             SubGenre = 31
	SubGenre_SUB_GENRE_EARLY20THCENTURY         SubGenre = 32
	SubGenre_SUB_GENRE_EARLYBAROQUE             SubGenre = 33
	SubGenre_SUB_GENRE_EARLYELECTRONIC          SubGenre = 34
	SubGenre_SUB_GENRE_EARLYRENAISSANCE         SubGenre = 35
	SubGenre_SUB_GENRE_EARLYROMANTIC            SubGenre = 36
	SubGenre_SUB_GENRE_EXPERIMENTALCLASSICAL    SubGenre = 37
	SubGenre_SUB_GENRE_EXPRESSIONISM            SubGenre = 38
	SubGenre_SUB_GENRE_FIRSTVIENNESESCHOOL      SubGenre = 39
	SubGenre_SUB_GENRE_FUTURISM                 SubGenre = 40
	SubGenre_SUB_GENRE_GREGORIANCHANT           SubGenre = 41
	SubGenre_SUB_GENRE_IMPRESSIONISM            SubGenre = 42
	SubGenre_SUB_GENRE_LATE20THCENTURY          SubGenre = 43
	SubGenre_SUB_GENRE_LATEBAROQUE              SubGenre = 44
	SubGenre_SUB_GENRE_LATERENAISSANCE          SubGenre = 45
	SubGenre_SUB_GENRE_LATEROMANTIC             SubGenre = 46
	SubGenre_SUB_GENRE_LIGHTMUSIC               SubGenre = 47
	SubGenre_SUB_GENRE_MEDIEVAL                 SubGenre = 48
	SubGenre_SUB_GENRE_MIDDLE20THCENTURY        SubGenre = 49
	SubGenre_SUB_GENRE_MIDDLEBAROQUE            SubGenre = 50
	SubGenre_SUB_GENRE_MIDDLERENAISSANCE        SubGenre = 51
	SubGenre_SUB_GENRE_MIDDLEROMANTIC           SubGenre = 52
	SubGenre_SUB_GENRE_MINIMALISM               SubGenre = 53
	SubGenre_SUB_GENRE_MODERNISM                SubGenre = 54
	SubGenre_SUB_GENRE_MUSIQUECONCRETE          SubGenre = 55
	SubGenre_SUB_GENRE_NATIONALIST              SubGenre = 56
	SubGenre_SUB_GENRE_NEOCLASSICAL             SubGenre = 57
	SubGenre_SUB_GENRE_NEOROMANTIC              SubGenre = 58
	SubGenre_SUB_GENRE_ORCHESTRALFUSION         SubGenre = 59
	SubGenre_SUB_GENRE_ORGANUM                  SubGenre = 60
	SubGenre_SUB_GENRE_PLAINSONG                SubGenre = 61
	SubGenre_SUB_GENRE_POSTCLASSICAL            SubGenre = 62
	SubGenre_SUB_GENRE_POSTMINIMALISM           SubGenre = 63
	SubGenre_SUB_GENRE_PRECLASSICAL             SubGenre = 64
	SubGenre_SUB_GENRE_RENAISSANCE              SubGenre = 65
	SubGenre_SUB_GENRE_ROMANTIC                 SubGenre = 66
	SubGenre_SUB_GENRE_SERIALISM                SubGenre = 67
	SubGenre_SUB_GENRE_SPECTRALISM              SubGenre = 68
	SubGenre_SUB_GENRE_ALTERNATIVECOUNTRY       SubGenre = 69
	SubGenre_SUB_GENRE_AMERICANA                SubGenre = 70
	SubGenre_SUB_GENRE_BAKERSFIELDSOUND         SubGenre = 71
	SubGenre_SUB_GENRE_BLUEGRASS                SubGenre = 72
	SubGenre_SUB_GENRE_COUNTRYPOP               SubGenre = 73
	SubGenre_SUB_GENRE_COUNTRYRAP               SubGenre = 74
	SubGenre_SUB_GENRE_COUNTRYROCK              SubGenre = 75
	SubGenre_SUB_GENRE_HONKYTONK                SubGenre = 76
	SubGenre_SUB_GENRE_MODERNCOUNTRY            SubGenre = 77
	SubGenre_SUB_GENRE_NASHVILLESOUND           SubGenre = 78
	SubGenre_SUB_GENRE_NEOTRADITIONALCOUNTRY    SubGenre = 79
	SubGenre_SUB_GENRE_OUTLAWCOUNTRY            SubGenre = 80
	SubGenre_SUB_GENRE_TEXASCOUNTRY             SubGenre = 81
	SubGenre_SUB_GENRE_TRADITIONALCOUNTRY       SubGenre = 82
	SubGenre_SUB_GENRE_WESTERNSWING             SubGenre = 83
	SubGenre_SUB_GENRE_E_2STEPGARAGE            SubGenre = 84
	SubGenre_SUB_GENRE_ACIDHOUSE                SubGenre = 85
	SubGenre_SUB_GENRE_ACIDTECHNO               SubGenre = 86
	SubGenre_SUB_GENRE_AMBIENT                  SubGenre = 87
	SubGenre_SUB_GENRE_AMBIENTHOUSE             SubGenre = 88
	SubGenre_SUB_GENRE_BASSLINE                 SubGenre = 89
	SubGenre_SUB_GENRE_BIGBEAT                  SubGenre = 90
	SubGenre_SUB_GENRE_BREAKBEAT                SubGenre = 91
	SubGenre_SUB_GENRE_BROKENBEAT               SubGenre = 92
	SubGenre_SUB_GENRE_CHICAGOHOUSE             SubGenre = 93
	SubGenre_SUB_GENRE_DEEPHOUSE                SubGenre = 94
	SubGenre_SUB_GENRE_DETROITHOUSE             SubGenre = 95
	SubGenre_SUB_GENRE_DETROITTECHNO            SubGenre = 96
	SubGenre_SUB_GENRE_DIGITALHARDCORE          SubGenre = 97
	SubGenre_SUB_GENRE_DOWNTEMPO                SubGenre = 98
	SubGenre_SUB_GENRE_DRILLNBASS               SubGenre = 99
	SubGenre_SUB_GENRE_DRUMNBASS                SubGenre = 100
	SubGenre_SUB_GENRE_DRUMSTEP                 SubGenre = 101
	SubGenre_SUB_GENRE_DUBSTEPUK                SubGenre = 102
	SubGenre_SUB_GENRE_DUBSTEPUS                SubGenre = 103
	SubGenre_SUB_GENRE_DUBTRONICA               SubGenre = 104
	SubGenre_SUB_GENRE_DUTCHHOUSE               SubGenre = 105
	SubGenre_SUB_GENRE_EBM                      SubGenre = 106
	SubGenre_SUB_GENRE_ELECTRO                  SubGenre = 107
	SubGenre_SUB_GENRE_ELECTROHOUSE             SubGenre = 108
	SubGenre_SUB_GENRE_ELECTRONICA_ECLECTIC     SubGenre = 109
	SubGenre_SUB_GENRE_EURODANCE                SubGenre = 110
	SubGenre_SUB_GENRE_EXPERIMENTALELECTRONIC   SubGenre = 111
	SubGenre_SUB_GENRE_FRENCHHOUSE              SubGenre = 112
	SubGenre_SUB_GENRE_FUTUREGARAGE             SubGenre = 113
	SubGenre_SUB_GENRE_GABBA                    SubGenre = 114
	SubGenre_SUB_GENRE_GARAGEHOUSE              SubGenre = 115
	SubGenre_SUB_GENRE_GLITCH                   SubGenre = 116
	SubGenre_SUB_GENRE_HAPPYHARDCORE            SubGenre = 117
	SubGenre_SUB_GENRE_HARDTRANCE               SubGenre = 118
	SubGenre_SUB_GENRE_HARDCORE                 SubGenre = 119
	SubGenre_SUB_GENRE_HARDCOREBREAKBEAT        SubGenre = 120
	SubGenre_SUB_GENRE_HARDSTYLE                SubGenre = 121
	SubGenre_SUB_GENRE_HIPHOUSE                 SubGenre = 122
	SubGenre_SUB_GENRE_HOUSE                    SubGenre = 123
	SubGenre_SUB_GENRE_IDM                      SubGenre = 124
	SubGenre_SUB_GENRE_JAZZHOUSE                SubGenre = 125
	SubGenre_SUB_GENRE_JUNGLE                   SubGenre = 126
	SubGenre_SUB_GENRE_KWAITO                   SubGenre = 127
	SubGenre_SUB_GENRE_LATINHOUSE               SubGenre = 128
	SubGenre_SUB_GENRE_MINIMALHOUSE             SubGenre = 129
	SubGenre_SUB_GENRE_MINIMALTECHNO            SubGenre = 130
	SubGenre_SUB_GENRE_NOISEMUSIC               SubGenre = 131
	SubGenre_SUB_GENRE_NUDISCO                  SubGenre = 132
	SubGenre_SUB_GENRE_PROGRESSIVEHOUSE         SubGenre = 133
	SubGenre_SUB_GENRE_PROGRESSIVETRANCE        SubGenre = 134
	SubGenre_SUB_GENRE_PSYCHEDELICTRANCE        SubGenre = 135
	SubGenre_SUB_GENRE_SCHRANZ                  SubGenre = 136
	SubGenre_SUB_GENRE_SPEEDGARAGE              SubGenre = 137
	SubGenre_SUB_GENRE_SYNTHWAVE                SubGenre = 138
	SubGenre_SUB_GENRE_TECHHOUSE                SubGenre = 139
	SubGenre_SUB_GENRE_TECHNO                   SubGenre = 140
	SubGenre_SUB_GENRE_TRANCE                   SubGenre = 141
	SubGenre_SUB_GENRE_TRIBALHOUSE              SubGenre = 142
	SubGenre_SUB_GENRE_TRIPHOP                  SubGenre = 143
	SubGenre_SUB_GENRE_UKFUNKY                  SubGenre = 144
	SubGenre_SUB_GENRE_UKGARAGE                 SubGenre = 145
	SubGenre_SUB_GENRE_VOCALHOUSE               SubGenre = 146
	SubGenre_SUB_GENRE_AMERICANFOLK             SubGenre = 147
	SubGenre_SUB_GENRE_AMERICANPRIMITIVEGUITAR  SubGenre = 148
	SubGenre_SUB_GENRE_BARBERSHOPMUSIC          SubGenre = 149
	SubGenre_SUB_GENRE_BRITISHFOLK              SubGenre = 150
	SubGenre_SUB_GENRE_CANADIANFIDDLING         SubGenre = 151
	SubGenre_SUB_GENRE_CANADIANFOLK             SubGenre = 152
	SubGenre_SUB_GENRE_CELTIC                   SubGenre = 153
	SubGenre_SUB_GENRE_ELECTRICFOLK             SubGenre = 154
	SubGenre_SUB_GENRE_ENGLISHFOLK              SubGenre = 155
	SubGenre_SUB_GENRE_FOLKBAROQUE              SubGenre = 156
	SubGenre_SUB_GENRE_FOLKREVIVAL              SubGenre = 157
	SubGenre_SUB_GENRE_INDIEFOLK                SubGenre = 158
	SubGenre_SUB_GENRE_IRISHFOLK                SubGenre = 159
	SubGenre_SUB_GENRE_NORTHAMERICANFOLK        SubGenre = 160
	SubGenre_SUB_GENRE_OLDTIME                  SubGenre = 161
	SubGenre_SUB_GENRE_SCOTTISHFOLK             SubGenre = 162
	SubGenre_SUB_GENRE_SEASHANTIES              SubGenre = 163
	SubGenre_SUB_GENRE_WELSHFOLK                SubGenre = 164
	SubGenre_SUB_GENRE_ZYDECO                   SubGenre = 165
	SubGenre_SUB_GENRE_CLASSICGOSPEL            SubGenre = 166
	SubGenre_SUB_GENRE_SOUTHERNGOSPEL           SubGenre = 167
	SubGenre_SUB_GENRE_ALTERNATIVERAP           SubGenre = 168
	SubGenre_SUB_GENRE_CHRISTIANRAP             SubGenre = 169
	SubGenre_SUB_GENRE_CLASSICHIPHOP            SubGenre = 170
	SubGenre_SUB_GENRE_CONSCIOUSRAP             SubGenre = 171
	SubGenre_SUB_GENRE_CRUNK                    SubGenre = 172
	SubGenre_SUB_GENRE_DIRTYRAP                 SubGenre = 173
	SubGenre_SUB_GENRE_EASTCOASTHIPHOP          SubGenre = 174
	SubGenre_SUB_GENRE_EXPERIMENTALHIPHOP       SubGenre = 175
	SubGenre_SUB_GENRE_FUNKCARIOCA              SubGenre = 176
	SubGenre_SUB_GENRE_GFUNK                    SubGenre = 177
	SubGenre_SUB_GENRE_GANGSTARAP               SubGenre = 178
	SubGenre_SUB_GENRE_GOLDENAGE                SubGenre = 179
	SubGenre_SUB_GENRE_GRIME                    SubGenre = 180
	SubGenre_SUB_GENRE_HARDCORERAP              SubGenre = 181
	SubGenre_SUB_GENRE_INSTRUMENTALHIPHOP       SubGenre = 182
	SubGenre_SUB_GENRE_MIAMIBASS                SubGenre = 183
	SubGenre_SUB_GENRE_POPRAP                   SubGenre = 184
	SubGenre_SUB_GENRE_SOUTHERNRAP              SubGenre = 185
	SubGenre_SUB_GENRE_TRAP                     SubGenre = 186
	SubGenre_SUB_GENRE_WESTCOASTHIPHOP          SubGenre = 187
	SubGenre_SUB_GENRE_ACIDJAZZ                 SubGenre = 188
	SubGenre_SUB_GENRE_AFRICANJAZZ              SubGenre = 189
	SubGenre_SUB_GENRE_AVANTGARDEJAZZ           SubGenre = 190
	SubGenre_SUB_GENRE_BEBOP                    SubGenre = 191
	SubGenre_SUB_GENRE_BOSSANOVA                SubGenre = 192
	SubGenre_SUB_GENRE_BRITISHDANCEBAND         SubGenre = 193
	SubGenre_SUB_GENRE_CAPEJAZZ                 SubGenre = 194
	SubGenre_SUB_GENRE_COOLJAZZ                 SubGenre = 195
	SubGenre_SUB_GENRE_DIXIELAND                SubGenre = 196
	SubGenre_SUB_GENRE_ETHIOPIANJAZZ            SubGenre = 197
	SubGenre_SUB_GENRE_FREEJAZZ                 SubGenre = 198
	SubGenre_SUB_GENRE_GYPSYJAZZ                SubGenre = 199
	SubGenre_SUB_GENRE_HARDBOP                  SubGenre = 200
	SubGenre_SUB_GENRE_JAZZBLUES                SubGenre = 201
	SubGenre_SUB_GENRE_JAZZFUNK                 SubGenre = 202
	SubGenre_SUB_GENRE_JAZZFUSION               SubGenre = 203
	SubGenre_SUB_GENRE_JAZZROCK                 SubGenre = 204
	SubGenre_SUB_GENRE_JAZZPOP                  SubGenre = 205
	SubGenre_SUB_GENRE_LATINJAZZ                SubGenre = 206
	SubGenre_SUB_GENRE_MODALJAZZ                SubGenre = 207
	SubGenre_SUB_GENRE_MODERNCREATIVE           SubGenre = 208
	SubGenre_SUB_GENRE_MODERNJAZZ               SubGenre = 209
	SubGenre_SUB_GENRE_POSTBOP                  SubGenre = 210
	SubGenre_SUB_GENRE_SMOOTHJAZZ               SubGenre = 211
	SubGenre_SUB_GENRE_SOULJAZZ                 SubGenre = 212
	SubGenre_SUB_GENRE_SWING                    SubGenre = 213
	SubGenre_SUB_GENRE_SWINGREVIVAL             SubGenre = 214
	SubGenre_SUB_GENRE_TRADITIONALJAZZ          SubGenre = 215
	SubGenre_SUB_GENRE_TRADITIONALPOP           SubGenre = 216
	SubGenre_SUB_GENRE_BACHATA                  SubGenre = 217
	SubGenre_SUB_GENRE_BANDA                    SubGenre = 218
	SubGenre_SUB_GENRE_BOOGALOO                 SubGenre = 219
	SubGenre_SUB_GENRE_BRAZILIAN                SubGenre = 220
	SubGenre_SUB_GENRE_CONJUNTO                 SubGenre = 221
	SubGenre_SUB_GENRE_CORRIDOS                 SubGenre = 222
	SubGenre_SUB_GENRE_DURANGUENSE              SubGenre = 223
	SubGenre_SUB_GENRE_GRUPERA                  SubGenre = 224
	SubGenre_SUB_GENRE_HUPANGO                  SubGenre = 225
	SubGenre_SUB_GENRE_MARIACHI                 SubGenre = 226
	SubGenre_SUB_GENRE_NEWMEXICOMUSIC           SubGenre = 227
	SubGenre_SUB_GENRE_NORTENO                  SubGenre = 228
	SubGenre_SUB_GENRE_RANCHERA                 SubGenre = 229
	SubGenre_SUB_GENRE_REGGAETON                SubGenre = 230
	SubGenre_SUB_GENRE_REGIONALMEXICAN          SubGenre = 231
	SubGenre_SUB_GENRE_SALSA                    SubGenre = 232
	SubGenre_SUB_GENRE_SERTANEJO                SubGenre = 233
	SubGenre_SUB_GENRE_TEJANO                   SubGenre = 234
	SubGenre_SUB_GENRE_AFRICANPOP               SubGenre = 235
	SubGenre_SUB_GENRE_AFROBEAT                 SubGenre = 236
	SubGenre_SUB_GENRE_ALTERNATIVEDANCE         SubGenre = 237
	SubGenre_SUB_GENRE_ALTERNATIVEPOP           SubGenre = 238
	SubGenre_SUB_GENRE_AXE                      SubGenre = 239
	SubGenre_SUB_GENRE_BIKUTSI                  SubGenre = 240
	SubGenre_SUB_GENRE_BOLLYWOOD                SubGenre = 241
	SubGenre_SUB_GENRE_BRAZILIANPOP             SubGenre = 242
	SubGenre_SUB_GENRE_BREGA                    SubGenre = 243
	SubGenre_SUB_GENRE_CANTOPOP                 SubGenre = 244
	SubGenre_SUB_GENRE_CARIBBEANPOP             SubGenre = 245
	SubGenre_SUB_GENRE_CHAMBERPOP               SubGenre = 246
	SubGenre_SUB_GENRE_CHIMURENGA               SubGenre = 247
	SubGenre_SUB_GENRE_CHINESEPOP               SubGenre = 248
	SubGenre_SUB_GENRE_DREAMPOP                 SubGenre = 249
	SubGenre_SUB_GENRE_ELECTROCLASH             SubGenre = 250
	SubGenre_SUB_GENRE_ELECTRONICPOP            SubGenre = 251
	SubGenre_SUB_GENRE_ENKA                     SubGenre = 252
	SubGenre_SUB_GENRE_FILIPINOPOP              SubGenre = 253
	SubGenre_SUB_GENRE_FOLKTRONICA              SubGenre = 254
	SubGenre_SUB_GENRE_FRENCHPOP                SubGenre = 255
	SubGenre_SUB_GENRE_GERMANPOP                SubGenre = 256
	SubGenre_SUB_GENRE_GREEKPOP                 SubGenre = 257
	SubGenre_SUB_GENRE_HIGHLIFE                 SubGenre = 258
	SubGenre_SUB_GENRE_HIPLIFE                  SubGenre = 259
	SubGenre_SUB_GENRE_HOKKIENPOP               SubGenre = 260
	SubGenre_SUB_GENRE_INDIANPOP                SubGenre = 261
	SubGenre_SUB_GENRE_INDIEPOP                 SubGenre = 262
	SubGenre_SUB_GENRE_INDIETRONICA             SubGenre = 263
	SubGenre_SUB_GENRE_INDONESIANPOP            SubGenre = 264
	SubGenre_SUB_GENRE_JAPANESEPOP              SubGenre = 265
	SubGenre_SUB_GENRE_KAYOKYOKU                SubGenre = 266
	SubGenre_SUB_GENRE_KIZOMBA                  SubGenre = 267
	SubGenre_SUB_GENRE_KOREANPOP                SubGenre = 268
	SubGenre_SUB_GENRE_KUDURO                   SubGenre = 269
	SubGenre_SUB_GENRE_LATINFREESTYLE           SubGenre = 270
	SubGenre_SUB_GENRE_MADCHESTER               SubGenre = 271
	SubGenre_SUB_GENRE_MAKOSSA                  SubGenre = 272
	SubGenre_SUB_GENRE_MANDOPOP                 SubGenre = 273
	SubGenre_SUB_GENRE_MBALAX                   SubGenre = 274
	SubGenre_SUB_GENRE_MBAQANGA                 SubGenre = 275
	SubGenre_SUB_GENRE_MODERNLAIKO              SubGenre = 276
	SubGenre_SUB_GENRE_MODERNPOP                SubGenre = 277
	SubGenre_SUB_GENRE_MPB                      SubGenre = 278
	SubGenre_SUB_GENRE_MUSICOFTHEPHILIPPINES    SubGenre = 279
	SubGenre_SUB_GENRE_NDW                      SubGenre = 280
	SubGenre_SUB_GENRE_NEOPSYCHEDELIA           SubGenre = 281
	SubGenre_SUB_GENRE_NEWROMANTIC              SubGenre = 282
	SubGenre_SUB_GENRE_NEWWAVE                  SubGenre = 283
	SubGenre_SUB_GENRE_NOISEPOP                 SubGenre = 284
	SubGenre_SUB_GENRE_NOUVELLECHANSON          SubGenre = 285
	SubGenre_SUB_GENRE_POPROCK                  SubGenre = 286
	SubGenre_SUB_GENRE_PSYCHEDELICPOP           SubGenre = 287
	SubGenre_SUB_GENRE_SCHLAGER                 SubGenre = 288
	SubGenre_SUB_GENRE_SOCA                     SubGenre = 289
	SubGenre_SUB_GENRE_SOUKOUS                  SubGenre = 290
	SubGenre_SUB_GENRE_SYNTHPOP                 SubGenre = 291
	SubGenre_SUB_GENRE_TELUGU                   SubGenre = 292
	SubGenre_SUB_GENRE_TWEEPOP                  SubGenre = 293
	SubGenre_SUB_GENRE_AFROFUNK                 SubGenre = 294
	SubGenre_SUB_GENRE_ALTERNATIVER_N_B         SubGenre = 295
	SubGenre_SUB_GENRE_BLUEEYEDSOUL             SubGenre = 296
	SubGenre_SUB_GENRE_BOOGIE                   SubGenre = 297
	SubGenre_SUB_GENRE_CHICAGOSOUL              SubGenre = 298
	SubGenre_SUB_GENRE_CLASSICR_N_B             SubGenre = 299
	SubGenre_SUB_GENRE_CONTEMPORARYR_N_B        SubGenre = 300
	SubGenre_SUB_GENRE_DEEPSOUL                 SubGenre = 301
	SubGenre_SUB_GENRE_DISCO                    SubGenre = 302
	SubGenre_SUB_GENRE_DOOWOP                   SubGenre = 303
	SubGenre_SUB_GENRE_FUNK                     SubGenre = 304
	SubGenre_SUB_GENRE_GOGO                     SubGenre = 305
	SubGenre_SUB_GENRE_HINRG                    SubGenre = 306
	SubGenre_SUB_GENRE_ITALODISCO               SubGenre = 307
	SubGenre_SUB_GENRE_MEMPHISSOUL              SubGenre = 308
	SubGenre_SUB_GENRE_MINNEAPOLISFUNK          SubGenre = 309
	SubGenre_SUB_GENRE_MODERNR_N_B              SubGenre = 310
	SubGenre_SUB_GENRE_MOTOWNSOUND              SubGenre = 311
	SubGenre_SUB_GENRE_NEOSOUL                  SubGenre = 312
	SubGenre_SUB_GENRE_NEWJACKSWING             SubGenre = 313
	SubGenre_SUB_GENRE_NEWORLEANSR_N_B          SubGenre = 314
	SubGenre_SUB_GENRE_OGFUNK                   SubGenre = 315
	SubGenre_SUB_GENRE_PFUNK                    SubGenre = 316
	SubGenre_SUB_GENRE_PHILLYSOUND              SubGenre = 317
	SubGenre_SUB_GENRE_POPFUNK                  SubGenre = 318
	SubGenre_SUB_GENRE_PSYCHEDELICSOUL          SubGenre = 319
	SubGenre_SUB_GENRE_QUIETSTORM               SubGenre = 320
	SubGenre_SUB_GENRE_RETROSOUL                SubGenre = 321
	SubGenre_SUB_GENRE_SOUL                     SubGenre = 322
	SubGenre_SUB_GENRE_SOUTHERNSOUL             SubGenre = 323
	SubGenre_SUB_GENRE_TRADITIONALR_N_B         SubGenre = 324
	SubGenre_SUB_GENRE_URBANCONTEMPORARYGOSPEL  SubGenre = 325
	SubGenre_SUB_GENRE_WESTCOASTSOUL            SubGenre = 326
	SubGenre_SUB_GENRE_DANCEHALL                SubGenre = 327
	SubGenre_SUB_GENRE_DUB                      SubGenre = 328
	SubGenre_SUB_GENRE_ROCKSTEADY               SubGenre = 329
	SubGenre_SUB_GENRE_ROOTSREGGAE              SubGenre = 330
	SubGenre_SUB_GENRE_SKA                      SubGenre = 331
	SubGenre_SUB_GENRE_AFROROCK                 SubGenre = 332
	SubGenre_SUB_GENRE_ALTMETAL                 SubGenre = 333
	SubGenre_SUB_GENRE_ALTERNATIVEROCK          SubGenre = 334
	SubGenre_SUB_GENRE_ARTROCK                  SubGenre = 335
	SubGenre_SUB_GENRE_BLACKMETAL               SubGenre = 336
	SubGenre_SUB_GENRE_BOOGIEROCK               SubGenre = 337
	SubGenre_SUB_GENRE_BRITROCK                 SubGenre = 338
	SubGenre_SUB_GENRE_BRITISHINVASION          SubGenre = 339
	SubGenre_SUB_GENRE_BRITPOP                  SubGenre = 340
	SubGenre_SUB_GENRE_CLASSICROCK              SubGenre = 341
	SubGenre_SUB_GENRE_DARKWAVE                 SubGenre = 342
	SubGenre_SUB_GENRE_DEATHMETAL               SubGenre = 343
	SubGenre_SUB_GENRE_DOOMMETAL                SubGenre = 344
	SubGenre_SUB_GENRE_EARLYROCK                SubGenre = 345
	SubGenre_SUB_GENRE_ELECTROGOTH              SubGenre = 346
	SubGenre_SUB_GENRE_EMOROCK                  SubGenre = 347
	SubGenre_SUB_GENRE_EXPERIMENTALROCK         SubGenre = 348
	SubGenre_SUB_GENRE_FUNKMETAL                SubGenre = 349
	SubGenre_SUB_GENRE_GARAGEROCK               SubGenre = 350
	SubGenre_SUB_GENRE_GLAMROCK                 SubGenre = 351
	SubGenre_SUB_GENRE_GOTHICMETAL              SubGenre = 352
	SubGenre_SUB_GENRE_GOTHICROCK               SubGenre = 353
	SubGenre_SUB_GENRE_GRINDCORE                SubGenre = 354
	SubGenre_SUB_GENRE_GRUNGE                   SubGenre = 355
	SubGenre_SUB_GENRE_HAIRMETAL                SubGenre = 356
	SubGenre_SUB_GENRE_HARDROCK                 SubGenre = 357
	SubGenre_SUB_GENRE_HARDCOREPUNK             SubGenre = 358
	SubGenre_SUB_GENRE_HEARTLANDROCK            SubGenre = 359
	SubGenre_SUB_GENRE_INDIEROCK                SubGenre = 360
	SubGenre_SUB_GENRE_INDUSTRIAL               SubGenre = 361
	SubGenre_SUB_GENRE_INDUSTRIALMETAL          SubGenre = 362
	SubGenre_SUB_GENRE_JOVEMGUARDA              SubGenre = 363
	SubGenre_SUB_GENRE_KRAUTROCK                SubGenre = 364
	SubGenre_SUB_GENRE_MATHROCK                 SubGenre = 365
	SubGenre_SUB_GENRE_MERSEYBEAT               SubGenre = 366
	SubGenre_SUB_GENRE_METAL                    SubGenre = 367
	SubGenre_SUB_GENRE_METALCORE                SubGenre = 368
	SubGenre_SUB_GENRE_NOWAVE                   SubGenre = 369
	SubGenre_SUB_GENRE_NOISEROCK                SubGenre = 370
	SubGenre_SUB_GENRE_NUMETAL                  SubGenre = 371
	SubGenre_SUB_GENRE_OI                       SubGenre = 372
	SubGenre_SUB_GENRE_POPPUNK                  SubGenre = 373
	SubGenre_SUB_GENRE_POSTGRUNGE               SubGenre = 374
	SubGenre_SUB_GENRE_POSTROCK                 SubGenre = 375
	SubGenre_SUB_GENRE_POSTHARDCORE             SubGenre = 376
	SubGenre_SUB_GENRE_POSTPUNK                 SubGenre = 377
	SubGenre_SUB_GENRE_POWERPOP                 SubGenre = 378
	SubGenre_SUB_GENRE_PROGRESSIVEMETAL         SubGenre = 379
	SubGenre_SUB_GENRE_PROGRESSIVEROCK          SubGenre = 380
	SubGenre_SUB_GENRE_PROTOPUNK                SubGenre = 381
	SubGenre_SUB_GENRE_PSYCHEDELICROCK          SubGenre = 382
	SubGenre_SUB_GENRE_PSYCHOBILLY              SubGenre = 383
	SubGenre_SUB_GENRE_PUNK                     SubGenre = 384
	SubGenre_SUB_GENRE_RIOTGRRRL                SubGenre = 385
	SubGenre_SUB_GENRE_ROCKNROLL                SubGenre = 386
	SubGenre_SUB_GENRE_ROCKABILLY               SubGenre = 387
	SubGenre_SUB_GENRE_SAMBAROCK                SubGenre = 388
	SubGenre_SUB_GENRE_SCREAMO                  SubGenre = 389
	SubGenre_SUB_GENRE_SHOEGAZE                 SubGenre = 390
	SubGenre_SUB_GENRE_SOFTROCK                 SubGenre = 391
	SubGenre_SUB_GENRE_SOUTHAMERICANROCK        SubGenre = 392
	SubGenre_SUB_GENRE_SOUTHERNROCK             SubGenre = 393
	SubGenre_SUB_GENRE_SPACEROCK                SubGenre = 394
	SubGenre_SUB_GENRE_SPEEDMETAL               SubGenre = 395
	SubGenre_SUB_GENRE_STONERROCK               SubGenre = 396
	SubGenre_SUB_GENRE_SURF                     SubGenre = 397
	SubGenre_SUB_GENRE_SWAMPROCK                SubGenre = 398
	SubGenre_SUB_GENRE_THIRDWAVESKA             SubGenre = 399
	SubGenre_SUB_GENRE_THRASHMETAL              SubGenre = 400
	SubGenre_SUB_GENRE_TROPICALIA               SubGenre = 401
	SubGenre_SUB_GENRE_TWOTONE                  SubGenre = 402
	SubGenre_SUB_GENRE_UNDERGROUND              SubGenre = 403
	SubGenre_SUB_GENRE_COMMENTARY               SubGenre = 404
	SubGenre_SUB_GENRE_CONVERSATION             SubGenre = 405
	SubGenre_SUB_GENRE_INTERVIEW                SubGenre = 406
	SubGenre_SUB_GENRE_MONOLOGUE                SubGenre = 407
	SubGenre_SUB_GENRE_POETRY                   SubGenre = 408
	SubGenre_SUB_GENRE_SKIT                     SubGenre = 409
	SubGenre_SUB_GENRE_STANDUPCOMEDY            SubGenre = 410
	SubGenre_SUB_GENRE_AFOXE                    SubGenre = 411
	SubGenre_SUB_GENRE_AFRICANMUSIC             SubGenre = 412
	SubGenre_SUB_GENRE_ARGENTINIANMUSIC         SubGenre = 413
	SubGenre_SUB_GENRE_BALINESEMUSIC            SubGenre = 414
	SubGenre_SUB_GENRE_BRAZILIANMUSIC           SubGenre = 415
	SubGenre_SUB_GENRE_CALYPSO                  SubGenre = 416
	SubGenre_SUB_GENRE_CAPOEIRAMUSIC            SubGenre = 417
	SubGenre_SUB_GENRE_CARIBBEANMUSIC           SubGenre = 418
	SubGenre_SUB_GENRE_CARNATICMUSIC            SubGenre = 419
	SubGenre_SUB_GENRE_CHACHACHA                SubGenre = 420
	SubGenre_SUB_GENRE_CHILEANMUSIC             SubGenre = 421
	SubGenre_SUB_GENRE_CHORO                    SubGenre = 422
	SubGenre_SUB_GENRE_COLOMBIANMUSIC           SubGenre = 423
	SubGenre_SUB_GENRE_CONTRADANZA              SubGenre = 424
	SubGenre_SUB_GENRE_CUBANMUSIC               SubGenre = 425
	SubGenre_SUB_GENRE_CUECA                    SubGenre = 426
	SubGenre_SUB_GENRE_CUMBIA                   SubGenre = 427
	SubGenre_SUB_GENRE_CZECHMUSIC               SubGenre = 428
	SubGenre_SUB_GENRE_DANZON                   SubGenre = 429
	SubGenre_SUB_GENRE_DIMOTIKO                 SubGenre = 430
	SubGenre_SUB_GENRE_DOMINICANMUSIC           SubGenre = 431
	SubGenre_SUB_GENRE_FADO                     SubGenre = 432
	SubGenre_SUB_GENRE_FLAMENCO                 SubGenre = 433
	SubGenre_SUB_GENRE_FRENCHMUSIC              SubGenre = 434
	SubGenre_SUB_GENRE_GAUCHOMUSIC              SubGenre = 435
	SubGenre_SUB_GENRE_GERMANMUSIC              SubGenre = 436
	SubGenre_SUB_GENRE_GREEKMUSIC               SubGenre = 437
	SubGenre_SUB_GENRE_GUARACHA                 SubGenre = 438
	SubGenre_SUB_GENRE_HINDUSTANICLASSICALMUSIC SubGenre = 439
	SubGenre_SUB_GENRE_INDIANMUSIC              SubGenre = 440
	SubGenre_SUB_GENRE_INDONESIANMUSIC          SubGenre = 441
	SubGenre_SUB_GENRE_IRISHMUSIC               SubGenre = 442
	SubGenre_SUB_GENRE_ITALIANMUSIC             SubGenre = 443
	SubGenre_SUB_GENRE_JAMAICANMUSIC            SubGenre = 444
	SubGenre_SUB_GENRE_JAVANESEMUSIC            SubGenre = 445
	SubGenre_SUB_GENRE_JEWISHMUSIC              SubGenre = 446
	SubGenre_SUB_GENRE_JUGENSEMBLE              SubGenre = 447
	SubGenre_SUB_GENRE_KLEZMER                  SubGenre = 448
	SubGenre_SUB_GENRE_MAMBO                    SubGenre = 449
	SubGenre_SUB_GENRE_MARACATU                 SubGenre = 450
	SubGenre_SUB_GENRE_MERENGUE                 SubGenre = 451
	SubGenre_SUB_GENRE_MEXICANMUSIC             SubGenre = 452
	SubGenre_SUB_GENRE_MIDDLEEASTERNMUSIC       SubGenre = 453
	SubGenre_SUB_GENRE_NEAPOLITANSONG           SubGenre = 454
	SubGenre_SUB_GENRE_NORTHAMERICANMUSIC       SubGenre = 455
	SubGenre_SUB_GENRE_PAKISTANIMUSIC           SubGenre = 456
	SubGenre_SUB_GENRE_PALO                     SubGenre = 457
	SubGenre_SUB_GENRE_PILN                     SubGenre = 458
	SubGenre_SUB_GENRE_POLKA                    SubGenre = 459
	SubGenre_SUB_GENRE_PORTUGUESEMUSIC          SubGenre = 460
	SubGenre_SUB_GENRE_PUERTORICANMUSIC         SubGenre = 461
	SubGenre_SUB_GENRE_PUNJABIMUSIC             SubGenre = 462
	SubGenre_SUB_GENRE_RAGTIME                  SubGenre = 463
	SubGenre_SUB_GENRE_REPENTE                  SubGenre = 464
	SubGenre_SUB_GENRE_ROMANIANMUSIC            SubGenre = 465
	SubGenre_SUB_GENRE_SALVES                   SubGenre = 466
	SubGenre_SUB_GENRE_SAMBA                    SubGenre = 467
	SubGenre_SUB_GENRE_SON                      SubGenre = 468
	SubGenre_SUB_GENRE_SOUTHAMERICANMUSIC       SubGenre = 469
	SubGenre_SUB_GENRE_SPANISHMUSIC             SubGenre = 470
	SubGenre_SUB_GENRE_SPIRITUAL                SubGenre = 471
	SubGenre_SUB_GENRE_TANGO                    SubGenre = 472
	SubGenre_SUB_GENRE_TIBETANMUSIC             SubGenre = 473
	SubGenre_SUB_GENRE_TONADA                   SubGenre = 474
	SubGenre_SUB_GENRE_TURKISHMUSIC             SubGenre = 475
	SubGenre_SUB_GENRE_TURKISHCLASSICALMUSIC    SubGenre = 476
	SubGenre_SUB_GENRE_WORKSONGS                SubGenre = 477
	SubGenre_SUB_GENRE_EXOTICA                  SubGenre = 478
	SubGenre_SUB_GENRE_NEWAGE                   SubGenre = 479
	SubGenre_SUB_GENRE_NEWFLAMENCO              SubGenre = 480
	SubGenre_SUB_GENRE_WORLDFUSIONJAZZ          SubGenre = 481
	SubGenre_SUB_GENRE_WORLDBEAT                SubGenre = 482
	SubGenre_SUB_GENRE_USERDEFINED              SubGenre = 483
)

// Enum value maps for SubGenre.
var (
	SubGenre_name = map[int32]string{
		0:   "SUB_GENRE_UNSPECIFIED",
		1:   "SUB_GENRE_ACOUSTICCHICAGOBLUES",
		2:   "SUB_GENRE_BOOGIEWOOGIE",
		3:   "SUB_GENRE_BRITISHBLUES",
		4:   "SUB_GENRE_CHICAGOBLUES",
		5:   "SUB_GENRE_CLASSICFEMALEBLUES",
		6:   "SUB_GENRE_COUNTRYBLUES",
		7:   "SUB_GENRE_DELTABLUES",
		8:   "SUB_GENRE_ELECTRICTEXASBLUES",
		9:   "SUB_GENRE_HILLCOUNTRYBLUES",
		10:  "SUB_GENRE_JUMP_BLUES",
		11:  "SUB_GENRE_MODERNBLUES",
		12:  "SUB_GENRE_NEWORLEANSBLUES",
		13:  "SUB_GENRE_PIANOBLUES",
		14:  "SUB_GENRE_PIEDMONTBLUES",
		15:  "SUB_GENRE_ROOTS",
		16:  "SUB_GENRE_SWAMPBLUES",
		17:  "SUB_GENRE_TEXASBLUES",
		18:  "SUB_GENRE_TRADITIONALACOUSTIC",
		19:  "SUB_GENRE_TRADITIONALELECTRIC",
		20:  "SUB_GENRE_WESTCOASTBLUES",
		21:  "SUB_GENRE_E_20THCENTURY",
		22:  "SUB_GENRE_E_21STCENTURY",
		23:  "SUB_GENRE_ACOUSMATIC",
		24:  "SUB_GENRE_AMBROSIANCHANT",
		25:  "SUB_GENRE_ARSANTIQUA",
		26:  "SUB_GENRE_ARSNOVA",
		27:  "SUB_GENRE_BAROQUE",
		28:  "SUB_GENRE_BYZANTINECHANT",
		29:  "SUB_GENRE_CLASSICAL",
		30:  "SUB_GENRE_CLASSICALCROSSOVER",
		31:  "SUB_GENRE_CONTEMPORARY",
		32:  "SUB_GENRE_EARLY20THCENTURY",
		33:  "SUB_GENRE_EARLYBAROQUE",
		34:  "SUB_GENRE_EARLYELECTRONIC",
		35:  "SUB_GENRE_EARLYRENAISSANCE",
		36:  "SUB_GENRE_EARLYROMANTIC",
		37:  "SUB_GENRE_EXPERIMENTALCLASSICAL",
		38:  "SUB_GENRE_EXPRESSIONISM",
		39:  "SUB_GENRE_FIRSTVIENNESESCHOOL",
		40:  "SUB_GENRE_FUTURISM",
		41:  "SUB_GENRE_GREGORIANCHANT",
		42:  "SUB_GENRE_IMPRESSIONISM",
		43:  "SUB_GENRE_LATE20THCENTURY",
		44:  "SUB_GENRE_LATEBAROQUE",
		45:  "SUB_GENRE_LATERENAISSANCE",
		46:  "SUB_GENRE_LATEROMANTIC",
		47:  "SUB_GENRE_LIGHTMUSIC",
		48:  "SUB_GENRE_MEDIEVAL",
		49:  "SUB_GENRE_MIDDLE20THCENTURY",
		50:  "SUB_GENRE_MIDDLEBAROQUE",
		51:  "SUB_GENRE_MIDDLERENAISSANCE",
		52:  "SUB_GENRE_MIDDLEROMANTIC",
		53:  "SUB_GENRE_MINIMALISM",
		54:  "SUB_GENRE_MODERNISM",
		55:  "SUB_GENRE_MUSIQUECONCRETE",
		56:  "SUB_GENRE_NATIONALIST",
		57:  "SUB_GENRE_NEOCLASSICAL",
		58:  "SUB_GENRE_NEOROMANTIC",
		59:  "SUB_GENRE_ORCHESTRALFUSION",
		60:  "SUB_GENRE_ORGANUM",
		61:  "SUB_GENRE_PLAINSONG",
		62:  "SUB_GENRE_POSTCLASSICAL",
		63:  "SUB_GENRE_POSTMINIMALISM",
		64:  "SUB_GENRE_PRECLASSICAL",
		65:  "SUB_GENRE_RENAISSANCE",
		66:  "SUB_GENRE_ROMANTIC",
		67:  "SUB_GENRE_SERIALISM",
		68:  "SUB_GENRE_SPECTRALISM",
		69:  "SUB_GENRE_ALTERNATIVECOUNTRY",
		70:  "SUB_GENRE_AMERICANA",
		71:  "SUB_GENRE_BAKERSFIELDSOUND",
		72:  "SUB_GENRE_BLUEGRASS",
		73:  "SUB_GENRE_COUNTRYPOP",
		74:  "SUB_GENRE_COUNTRYRAP",
		75:  "SUB_GENRE_COUNTRYROCK",
		76:  "SUB_GENRE_HONKYTONK",
		77:  "SUB_GENRE_MODERNCOUNTRY",
		78:  "SUB_GENRE_NASHVILLESOUND",
		79:  "SUB_GENRE_NEOTRADITIONALCOUNTRY",
		80:  "SUB_GENRE_OUTLAWCOUNTRY",
		81:  "SUB_GENRE_TEXASCOUNTRY",
		82:  "SUB_GENRE_TRADITIONALCOUNTRY",
		83:  "SUB_GENRE_WESTERNSWING",
		84:  "SUB_GENRE_E_2STEPGARAGE",
		85:  "SUB_GENRE_ACIDHOUSE",
		86:  "SUB_GENRE_ACIDTECHNO",
		87:  "SUB_GENRE_AMBIENT",
		88:  "SUB_GENRE_AMBIENTHOUSE",
		89:  "SUB_GENRE_BASSLINE",
		90:  "SUB_GENRE_BIGBEAT",
		91:  "SUB_GENRE_BREAKBEAT",
		92:  "SUB_GENRE_BROKENBEAT",
		93:  "SUB_GENRE_CHICAGOHOUSE",
		94:  "SUB_GENRE_DEEPHOUSE",
		95:  "SUB_GENRE_DETROITHOUSE",
		96:  "SUB_GENRE_DETROITTECHNO",
		97:  "SUB_GENRE_DIGITALHARDCORE",
		98:  "SUB_GENRE_DOWNTEMPO",
		99:  "SUB_GENRE_DRILLNBASS",
		100: "SUB_GENRE_DRUMNBASS",
		101: "SUB_GENRE_DRUMSTEP",
		102: "SUB_GENRE_DUBSTEPUK",
		103: "SUB_GENRE_DUBSTEPUS",
		104: "SUB_GENRE_DUBTRONICA",
		105: "SUB_GENRE_DUTCHHOUSE",
		106: "SUB_GENRE_EBM",
		107: "SUB_GENRE_ELECTRO",
		108: "SUB_GENRE_ELECTROHOUSE",
		109: "SUB_GENRE_ELECTRONICA_ECLECTIC",
		110: "SUB_GENRE_EURODANCE",
		111: "SUB_GENRE_EXPERIMENTALELECTRONIC",
		112: "SUB_GENRE_FRENCHHOUSE",
		113: "SUB_GENRE_FUTUREGARAGE",
		114: "SUB_GENRE_GABBA",
		115: "SUB_GENRE_GARAGEHOUSE",
		116: "SUB_GENRE_GLITCH",
		117: "SUB_GENRE_HAPPYHARDCORE",
		118: "SUB_GENRE_HARDTRANCE",
		119: "SUB_GENRE_HARDCORE",
		120: "SUB_GENRE_HARDCOREBREAKBEAT",
		121: "SUB_GENRE_HARDSTYLE",
		122: "SUB_GENRE_HIPHOUSE",
		123: "SUB_GENRE_HOUSE",
		124: "SUB_GENRE_IDM",
		125: "SUB_GENRE_JAZZHOUSE",
		126: "SUB_GENRE_JUNGLE",
		127: "SUB_GENRE_KWAITO",
		128: "SUB_GENRE_LATINHOUSE",
		129: "SUB_GENRE_MINIMALHOUSE",
		130: "SUB_GENRE_MINIMALTECHNO",
		131: "SUB_GENRE_NOISEMUSIC",
		132: "SUB_GENRE_NUDISCO",
		133: "SUB_GENRE_PROGRESSIVEHOUSE",
		134: "SUB_GENRE_PROGRESSIVETRANCE",
		135: "SUB_GENRE_PSYCHEDELICTRANCE",
		136: "SUB_GENRE_SCHRANZ",
		137: "SUB_GENRE_SPEEDGARAGE",
		138: "SUB_GENRE_SYNTHWAVE",
		139: "SUB_GENRE_TECHHOUSE",
		140: "SUB_GENRE_TECHNO",
		141: "SUB_GENRE_TRANCE",
		142: "SUB_GENRE_TRIBALHOUSE",
		143: "SUB_GENRE_TRIPHOP",
		144: "SUB_GENRE_UKFUNKY",
		145: "SUB_GENRE_UKGARAGE",
		146: "SUB_GENRE_VOCALHOUSE",
		147: "SUB_GENRE_AMERICANFOLK",
		148: "SUB_GENRE_AMERICANPRIMITIVEGUITAR",
		149: "SUB_GENRE_BARBERSHOPMUSIC",
		150: "SUB_GENRE_BRITISHFOLK",
		151: "SUB_GENRE_CANADIANFIDDLING",
		152: "SUB_GENRE_CANADIANFOLK",
		153: "SUB_GENRE_CELTIC",
		154: "SUB_GENRE_ELECTRICFOLK",
		155: "SUB_GENRE_ENGLISHFOLK",
		156: "SUB_GENRE_FOLKBAROQUE",
		157: "SUB_GENRE_FOLKREVIVAL",
		158: "SUB_GENRE_INDIEFOLK",
		159: "SUB_GENRE_IRISHFOLK",
		160: "SUB_GENRE_NORTHAMERICANFOLK",
		161: "SUB_GENRE_OLDTIME",
		162: "SUB_GENRE_SCOTTISHFOLK",
		163: "SUB_GENRE_SEASHANTIES",
		164: "SUB_GENRE_WELSHFOLK",
		165: "SUB_GENRE_ZYDECO",
		166: "SUB_GENRE_CLASSICGOSPEL",
		167: "SUB_GENRE_SOUTHERNGOSPEL",
		168: "SUB_GENRE_ALTERNATIVERAP",
		169: "SUB_GENRE_CHRISTIANRAP",
		170: "SUB_GENRE_CLASSICHIPHOP",
		171: "SUB_GENRE_CONSCIOUSRAP",
		172: "SUB_GENRE_CRUNK",
		173: "SUB_GENRE_DIRTYRAP",
		174: "SUB_GENRE_EASTCOASTHIPHOP",
		175: "SUB_GENRE_EXPERIMENTALHIPHOP",
		176: "SUB_GENRE_FUNKCARIOCA",
		177: "SUB_GENRE_GFUNK",
		178: "SUB_GENRE_GANGSTARAP",
		179: "SUB_GENRE_GOLDENAGE",
		180: "SUB_GENRE_GRIME",
		181: "SUB_GENRE_HARDCORERAP",
		182: "SUB_GENRE_INSTRUMENTALHIPHOP",
		183: "SUB_GENRE_MIAMIBASS",
		184: "SUB_GENRE_POPRAP",
		185: "SUB_GENRE_SOUTHERNRAP",
		186: "SUB_GENRE_TRAP",
		187: "SUB_GENRE_WESTCOASTHIPHOP",
		188: "SUB_GENRE_ACIDJAZZ",
		189: "SUB_GENRE_AFRICANJAZZ",
		190: "SUB_GENRE_AVANTGARDEJAZZ",
		191: "SUB_GENRE_BEBOP",
		192: "SUB_GENRE_BOSSANOVA",
		193: "SUB_GENRE_BRITISHDANCEBAND",
		194: "SUB_GENRE_CAPEJAZZ",
		195: "SUB_GENRE_COOLJAZZ",
		196: "SUB_GENRE_DIXIELAND",
		197: "SUB_GENRE_ETHIOPIANJAZZ",
		198: "SUB_GENRE_FREEJAZZ",
		199: "SUB_GENRE_GYPSYJAZZ",
		200: "SUB_GENRE_HARDBOP",
		201: "SUB_GENRE_JAZZBLUES",
		202: "SUB_GENRE_JAZZFUNK",
		203: "SUB_GENRE_JAZZFUSION",
		204: "SUB_GENRE_JAZZROCK",
		205: "SUB_GENRE_JAZZPOP",
		206: "SUB_GENRE_LATINJAZZ",
		207: "SUB_GENRE_MODALJAZZ",
		208: "SUB_GENRE_MODERNCREATIVE",
		209: "SUB_GENRE_MODERNJAZZ",
		210: "SUB_GENRE_POSTBOP",
		211: "SUB_GENRE_SMOOTHJAZZ",
		212: "SUB_GENRE_SOULJAZZ",
		213: "SUB_GENRE_SWING",
		214: "SUB_GENRE_SWINGREVIVAL",
		215: "SUB_GENRE_TRADITIONALJAZZ",
		216: "SUB_GENRE_TRADITIONALPOP",
		217: "SUB_GENRE_BACHATA",
		218: "SUB_GENRE_BANDA",
		219: "SUB_GENRE_BOOGALOO",
		220: "SUB_GENRE_BRAZILIAN",
		221: "SUB_GENRE_CONJUNTO",
		222: "SUB_GENRE_CORRIDOS",
		223: "SUB_GENRE_DURANGUENSE",
		224: "SUB_GENRE_GRUPERA",
		225: "SUB_GENRE_HUPANGO",
		226: "SUB_GENRE_MARIACHI",
		227: "SUB_GENRE_NEWMEXICOMUSIC",
		228: "SUB_GENRE_NORTENO",
		229: "SUB_GENRE_RANCHERA",
		230: "SUB_GENRE_REGGAETON",
		231: "SUB_GENRE_REGIONALMEXICAN",
		232: "SUB_GENRE_SALSA",
		233: "SUB_GENRE_SERTANEJO",
		234: "SUB_GENRE_TEJANO",
		235: "SUB_GENRE_AFRICANPOP",
		236: "SUB_GENRE_AFROBEAT",
		237: "SUB_GENRE_ALTERNATIVEDANCE",
		238: "SUB_GENRE_ALTERNATIVEPOP",
		239: "SUB_GENRE_AXE",
		240: "SUB_GENRE_BIKUTSI",
		241: "SUB_GENRE_BOLLYWOOD",
		242: "SUB_GENRE_BRAZILIANPOP",
		243: "SUB_GENRE_BREGA",
		244: "SUB_GENRE_CANTOPOP",
		245: "SUB_GENRE_CARIBBEANPOP",
		246: "SUB_GENRE_CHAMBERPOP",
		247: "SUB_GENRE_CHIMURENGA",
		248: "SUB_GENRE_CHINESEPOP",
		249: "SUB_GENRE_DREAMPOP",
		250: "SUB_GENRE_ELECTROCLASH",
		251: "SUB_GENRE_ELECTRONICPOP",
		252: "SUB_GENRE_ENKA",
		253: "SUB_GENRE_FILIPINOPOP",
		254: "SUB_GENRE_FOLKTRONICA",
		255: "SUB_GENRE_FRENCHPOP",
		256: "SUB_GENRE_GERMANPOP",
		257: "SUB_GENRE_GREEKPOP",
		258: "SUB_GENRE_HIGHLIFE",
		259: "SUB_GENRE_HIPLIFE",
		260: "SUB_GENRE_HOKKIENPOP",
		261: "SUB_GENRE_INDIANPOP",
		262: "SUB_GENRE_INDIEPOP",
		263: "SUB_GENRE_INDIETRONICA",
		264: "SUB_GENRE_INDONESIANPOP",
		265: "SUB_GENRE_JAPANESEPOP",
		266: "SUB_GENRE_KAYOKYOKU",
		267: "SUB_GENRE_KIZOMBA",
		268: "SUB_GENRE_KOREANPOP",
		269: "SUB_GENRE_KUDURO",
		270: "SUB_GENRE_LATINFREESTYLE",
		271: "SUB_GENRE_MADCHESTER",
		272: "SUB_GENRE_MAKOSSA",
		273: "SUB_GENRE_MANDOPOP",
		274: "SUB_GENRE_MBALAX",
		275: "SUB_GENRE_MBAQANGA",
		276: "SUB_GENRE_MODERNLAIKO",
		277: "SUB_GENRE_MODERNPOP",
		278: "SUB_GENRE_MPB",
		279: "SUB_GENRE_MUSICOFTHEPHILIPPINES",
		280: "SUB_GENRE_NDW",
		281: "SUB_GENRE_NEOPSYCHEDELIA",
		282: "SUB_GENRE_NEWROMANTIC",
		283: "SUB_GENRE_NEWWAVE",
		284: "SUB_GENRE_NOISEPOP",
		285: "SUB_GENRE_NOUVELLECHANSON",
		286: "SUB_GENRE_POPROCK",
		287: "SUB_GENRE_PSYCHEDELICPOP",
		288: "SUB_GENRE_SCHLAGER",
		289: "SUB_GENRE_SOCA",
		290: "SUB_GENRE_SOUKOUS",
		291: "SUB_GENRE_SYNTHPOP",
		292: "SUB_GENRE_TELUGU",
		293: "SUB_GENRE_TWEEPOP",
		294: "SUB_GENRE_AFROFUNK",
		295: "SUB_GENRE_ALTERNATIVER_N_B",
		296: "SUB_GENRE_BLUEEYEDSOUL",
		297: "SUB_GENRE_BOOGIE",
		298: "SUB_GENRE_CHICAGOSOUL",
		299: "SUB_GENRE_CLASSICR_N_B",
		300: "SUB_GENRE_CONTEMPORARYR_N_B",
		301: "SUB_GENRE_DEEPSOUL",
		302: "SUB_GENRE_DISCO",
		303: "SUB_GENRE_DOOWOP",
		304: "SUB_GENRE_FUNK",
		305: "SUB_GENRE_GOGO",
		306: "SUB_GENRE_HINRG",
		307: "SUB_GENRE_ITALODISCO",
		308: "SUB_GENRE_MEMPHISSOUL",
		309: "SUB_GENRE_MINNEAPOLISFUNK",
		310: "SUB_GENRE_MODERNR_N_B",
		311: "SUB_GENRE_MOTOWNSOUND",
		312: "SUB_GENRE_NEOSOUL",
		313: "SUB_GENRE_NEWJACKSWING",
		314: "SUB_GENRE_NEWORLEANSR_N_B",
		315: "SUB_GENRE_OGFUNK",
		316: "SUB_GENRE_PFUNK",
		317: "SUB_GENRE_PHILLYSOUND",
		318: "SUB_GENRE_POPFUNK",
		319: "SUB_GENRE_PSYCHEDELICSOUL",
		320: "SUB_GENRE_QUIETSTORM",
		321: "SUB_GENRE_RETROSOUL",
		322: "SUB_GENRE_SOUL",
		323: "SUB_GENRE_SOUTHERNSOUL",
		324: "SUB_GENRE_TRADITIONALR_N_B",
		325: "SUB_GENRE_URBANCONTEMPORARYGOSPEL",
		326: "SUB_GENRE_WESTCOASTSOUL",
		327: "SUB_GENRE_DANCEHALL",
		328: "SUB_GENRE_DUB",
		329: "SUB_GENRE_ROCKSTEADY",
		330: "SUB_GENRE_ROOTSREGGAE",
		331: "SUB_GENRE_SKA",
		332: "SUB_GENRE_AFROROCK",
		333: "SUB_GENRE_ALTMETAL",
		334: "SUB_GENRE_ALTERNATIVEROCK",
		335: "SUB_GENRE_ARTROCK",
		336: "SUB_GENRE_BLACKMETAL",
		337: "SUB_GENRE_BOOGIEROCK",
		338: "SUB_GENRE_BRITROCK",
		339: "SUB_GENRE_BRITISHINVASION",
		340: "SUB_GENRE_BRITPOP",
		341: "SUB_GENRE_CLASSICROCK",
		342: "SUB_GENRE_DARKWAVE",
		343: "SUB_GENRE_DEATHMETAL",
		344: "SUB_GENRE_DOOMMETAL",
		345: "SUB_GENRE_EARLYROCK",
		346: "SUB_GENRE_ELECTROGOTH",
		347: "SUB_GENRE_EMOROCK",
		348: "SUB_GENRE_EXPERIMENTALROCK",
		349: "SUB_GENRE_FUNKMETAL",
		350: "SUB_GENRE_GARAGEROCK",
		351: "SUB_GENRE_GLAMROCK",
		352: "SUB_GENRE_GOTHICMETAL",
		353: "SUB_GENRE_GOTHICROCK",
		354: "SUB_GENRE_GRINDCORE",
		355: "SUB_GENRE_GRUNGE",
		356: "SUB_GENRE_HAIRMETAL",
		357: "SUB_GENRE_HARDROCK",
		358: "SUB_GENRE_HARDCOREPUNK",
		359: "SUB_GENRE_HEARTLANDROCK",
		360: "SUB_GENRE_INDIEROCK",
		361: "SUB_GENRE_INDUSTRIAL",
		362: "SUB_GENRE_INDUSTRIALMETAL",
		363: "SUB_GENRE_JOVEMGUARDA",
		364: "SUB_GENRE_KRAUTROCK",
		365: "SUB_GENRE_MATHROCK",
		366: "SUB_GENRE_MERSEYBEAT",
		367: "SUB_GENRE_METAL",
		368: "SUB_GENRE_METALCORE",
		369: "SUB_GENRE_NOWAVE",
		370: "SUB_GENRE_NOISEROCK",
		371: "SUB_GENRE_NUMETAL",
		372: "SUB_GENRE_OI",
		373: "SUB_GENRE_POPPUNK",
		374: "SUB_GENRE_POSTGRUNGE",
		375: "SUB_GENRE_POSTROCK",
		376: "SUB_GENRE_POSTHARDCORE",
		377: "SUB_GENRE_POSTPUNK",
		378: "SUB_GENRE_POWERPOP",
		379: "SUB_GENRE_PROGRESSIVEMETAL",
		380: "SUB_GENRE_PROGRESSIVEROCK",
		381: "SUB_GENRE_PROTOPUNK",
		382: "SUB_GENRE_PSYCHEDELICROCK",
		383: "SUB_GENRE_PSYCHOBILLY",
		384: "SUB_GENRE_PUNK",
		385: "SUB_GENRE_RIOTGRRRL",
		386: "SUB_GENRE_ROCKNROLL",
		387: "SUB_GENRE_ROCKABILLY",
		388: "SUB_GENRE_SAMBAROCK",
		389: "SUB_GENRE_SCREAMO",
		390: "SUB_GENRE_SHOEGAZE",
		391: "SUB_GENRE_SOFTROCK",
		392: "SUB_GENRE_SOUTHAMERICANROCK",
		393: "SUB_GENRE_SOUTHERNROCK",
		394: "SUB_GENRE_SPACEROCK",
		395: "SUB_GENRE_SPEEDMETAL",
		396: "SUB_GENRE_STONERROCK",
		397: "SUB_GENRE_SURF",
		398: "SUB_GENRE_SWAMPROCK",
		399: "SUB_GENRE_THIRDWAVESKA",
		400: "SUB_GENRE_THRASHMETAL",
		401: "SUB_GENRE_TROPICALIA",
		402: "SUB_GENRE_TWOTONE",
		403: "SUB_GENRE_UNDERGROUND",
		404: "SUB_GENRE_COMMENTARY",
		405: "SUB_GENRE_CONVERSATION",
		406: "SUB_GENRE_INTERVIEW",
		407: "SUB_GENRE_MONOLOGUE",
		408: "SUB_GENRE_POETRY",
		409: "SUB_GENRE_SKIT",
		410: "SUB_GENRE_STANDUPCOMEDY",
		411: "SUB_GENRE_AFOXE",
		412: "SUB_GENRE_AFRICANMUSIC",
		413: "SUB_GENRE_ARGENTINIANMUSIC",
		414: "SUB_GENRE_BALINESEMUSIC",
		415: "SUB_GENRE_BRAZILIANMUSIC",
		416: "SUB_GENRE_CALYPSO",
		417: "SUB_GENRE_CAPOEIRAMUSIC",
		418: "SUB_GENRE_CARIBBEANMUSIC",
		419: "SUB_GENRE_CARNATICMUSIC",
		420: "SUB_GENRE_CHACHACHA",
		421: "SUB_GENRE_CHILEANMUSIC",
		422: "SUB_GENRE_CHORO",
		423: "SUB_GENRE_COLOMBIANMUSIC",
		424: "SUB_GENRE_CONTRADANZA",
		425: "SUB_GENRE_CUBANMUSIC",
		426: "SUB_GENRE_CUECA",
		427: "SUB_GENRE_CUMBIA",
		428: "SUB_GENRE_CZECHMUSIC",
		429: "SUB_GENRE_DANZON",
		430: "SUB_GENRE_DIMOTIKO",
		431: "SUB_GENRE_DOMINICANMUSIC",
		432: "SUB_GENRE_FADO",
		433: "SUB_GENRE_FLAMENCO",
		434: "SUB_GENRE_FRENCHMUSIC",
		435: "SUB_GENRE_GAUCHOMUSIC",
		436: "SUB_GENRE_GERMANMUSIC",
		437: "SUB_GENRE_GREEKMUSIC",
		438: "SUB_GENRE_GUARACHA",
		439: "SUB_GENRE_HINDUSTANICLASSICALMUSIC",
		440: "SUB_GENRE_INDIANMUSIC",
		441: "SUB_GENRE_INDONESIANMUSIC",
		442: "SUB_GENRE_IRISHMUSIC",
		443: "SUB_GENRE_ITALIANMUSIC",
		444: "SUB_GENRE_JAMAICANMUSIC",
		445: "SUB_GENRE_JAVANESEMUSIC",
		446: "SUB_GENRE_JEWISHMUSIC",
		447: "SUB_GENRE_JUGENSEMBLE",
		448: "SUB_GENRE_KLEZMER",
		449: "SUB_GENRE_MAMBO",
		450: "SUB_GENRE_MARACATU",
		451: "SUB_GENRE_MERENGUE",
		452: "SUB_GENRE_MEXICANMUSIC",
		453: "SUB_GENRE_MIDDLEEASTERNMUSIC",
		454: "SUB_GENRE_NEAPOLITANSONG",
		455: "SUB_GENRE_NORTHAMERICANMUSIC",
		456: "SUB_GENRE_PAKISTANIMUSIC",
		457: "SUB_GENRE_PALO",
		458: "SUB_GENRE_PILN",
		459: "SUB_GENRE_POLKA",
		460: "SUB_GENRE_PORTUGUESEMUSIC",
		461: "SUB_GENRE_PUERTORICANMUSIC",
		462: "SUB_GENRE_PUNJABIMUSIC",
		463: "SUB_GENRE_RAGTIME",
		464: "SUB_GENRE_REPENTE",
		465: "SUB_GENRE_ROMANIANMUSIC",
		466: "SUB_GENRE_SALVES",
		467: "SUB_GENRE_SAMBA",
		468: "SUB_GENRE_SON",
		469: "SUB_GENRE_SOUTHAMERICANMUSIC",
		470: "SUB_GENRE_SPANISHMUSIC",
		471: "SUB_GENRE_SPIRITUAL",
		472: "SUB_GENRE_TANGO",
		473: "SUB_GENRE_TIBETANMUSIC",
		474: "SUB_GENRE_TONADA",
		475: "SUB_GENRE_TURKISHMUSIC",
		476: "SUB_GENRE_TURKISHCLASSICALMUSIC",
		477: "SUB_GENRE_WORKSONGS",
		478: "SUB_GENRE_EXOTICA",
		479: "SUB_GENRE_NEWAGE",
		480: "SUB_GENRE_NEWFLAMENCO",
		481: "SUB_GENRE_WORLDFUSIONJAZZ",
		482: "SUB_GENRE_WORLDBEAT",
		483: "SUB_GENRE_USERDEFINED",
	}
	SubGenre_value = map[string]int32{
		"SUB_GENRE_UNSPECIFIED":              0,
		"SUB_GENRE_ACOUSTICCHICAGOBLUES":     1,
		"SUB_GENRE_BOOGIEWOOGIE":             2,
		"SUB_GENRE_BRITISHBLUES":             3,
		"SUB_GENRE_CHICAGOBLUES":             4,
		"SUB_GENRE_CLASSICFEMALEBLUES":       5,
		"SUB_GENRE_COUNTRYBLUES":             6,
		"SUB_GENRE_DELTABLUES":               7,
		"SUB_GENRE_ELECTRICTEXASBLUES":       8,
		"SUB_GENRE_HILLCOUNTRYBLUES":         9,
		"SUB_GENRE_JUMP_BLUES":               10,
		"SUB_GENRE_MODERNBLUES":              11,
		"SUB_GENRE_NEWORLEANSBLUES":          12,
		"SUB_GENRE_PIANOBLUES":               13,
		"SUB_GENRE_PIEDMONTBLUES":            14,
		"SUB_GENRE_ROOTS":                    15,
		"SUB_GENRE_SWAMPBLUES":               16,
		"SUB_GENRE_TEXASBLUES":               17,
		"SUB_GENRE_TRADITIONALACOUSTIC":      18,
		"SUB_GENRE_TRADITIONALELECTRIC":      19,
		"SUB_GENRE_WESTCOASTBLUES":           20,
		"SUB_GENRE_E_20THCENTURY":            21,
		"SUB_GENRE_E_21STCENTURY":            22,
		"SUB_GENRE_ACOUSMATIC":               23,
		"SUB_GENRE_AMBROSIANCHANT":           24,
		"SUB_GENRE_ARSANTIQUA":               25,
		"SUB_GENRE_ARSNOVA":                  26,
		"SUB_GENRE_BAROQUE":                  27,
		"SUB_GENRE_BYZANTINECHANT":           28,
		"SUB_GENRE_CLASSICAL":                29,
		"SUB_GENRE_CLASSICALCROSSOVER":       30,
		"SUB_GENRE_CONTEMPORARY":             31,
		"SUB_GENRE_EARLY20THCENTURY":         32,
		"SUB_GENRE_EARLYBAROQUE":             33,
		"SUB_GENRE_EARLYELECTRONIC":          34,
		"SUB_GENRE_EARLYRENAISSANCE":         35,
		"SUB_GENRE_EARLYROMANTIC":            36,
		"SUB_GENRE_EXPERIMENTALCLASSICAL":    37,
		"SUB_GENRE_EXPRESSIONISM":            38,
		"SUB_GENRE_FIRSTVIENNESESCHOOL":      39,
		"SUB_GENRE_FUTURISM":                 40,
		"SUB_GENRE_GREGORIANCHANT":           41,
		"SUB_GENRE_IMPRESSIONISM":            42,
		"SUB_GENRE_LATE20THCENTURY":          43,
		"SUB_GENRE_LATEBAROQUE":              44,
		"SUB_GENRE_LATERENAISSANCE":          45,
		"SUB_GENRE_LATEROMANTIC":             46,
		"SUB_GENRE_LIGHTMUSIC":               47,
		"SUB_GENRE_MEDIEVAL":                 48,
		"SUB_GENRE_MIDDLE20THCENTURY":        49,
		"SUB_GENRE_MIDDLEBAROQUE":            50,
		"SUB_GENRE_MIDDLERENAISSANCE":        51,
		"SUB_GENRE_MIDDLEROMANTIC":           52,
		"SUB_GENRE_MINIMALISM":               53,
		"SUB_GENRE_MODERNISM":                54,
		"SUB_GENRE_MUSIQUECONCRETE":          55,
		"SUB_GENRE_NATIONALIST":              56,
		"SUB_GENRE_NEOCLASSICAL":             57,
		"SUB_GENRE_NEOROMANTIC":              58,
		"SUB_GENRE_ORCHESTRALFUSION":         59,
		"SUB_GENRE_ORGANUM":                  60,
		"SUB_GENRE_PLAINSONG":                61,
		"SUB_GENRE_POSTCLASSICAL":            62,
		"SUB_GENRE_POSTMINIMALISM":           63,
		"SUB_GENRE_PRECLASSICAL":             64,
		"SUB_GENRE_RENAISSANCE":              65,
		"SUB_GENRE_ROMANTIC":                 66,
		"SUB_GENRE_SERIALISM":                67,
		"SUB_GENRE_SPECTRALISM":              68,
		"SUB_GENRE_ALTERNATIVECOUNTRY":       69,
		"SUB_GENRE_AMERICANA":                70,
		"SUB_GENRE_BAKERSFIELDSOUND":         71,
		"SUB_GENRE_BLUEGRASS":                72,
		"SUB_GENRE_COUNTRYPOP":               73,
		"SUB_GENRE_COUNTRYRAP":               74,
		"SUB_GENRE_COUNTRYROCK":              75,
		"SUB_GENRE_HONKYTONK":                76,
		"SUB_GENRE_MODERNCOUNTRY":            77,
		"SUB_GENRE_NASHVILLESOUND":           78,
		"SUB_GENRE_NEOTRADITIONALCOUNTRY":    79,
		"SUB_GENRE_OUTLAWCOUNTRY":            80,
		"SUB_GENRE_TEXASCOUNTRY":             81,
		"SUB_GENRE_TRADITIONALCOUNTRY":       82,
		"SUB_GENRE_WESTERNSWING":             83,
		"SUB_GENRE_E_2STEPGARAGE":            84,
		"SUB_GENRE_ACIDHOUSE":                85,
		"SUB_GENRE_ACIDTECHNO":               86,
		"SUB_GENRE_AMBIENT":                  87,
		"SUB_GENRE_AMBIENTHOUSE":             88,
		"SUB_GENRE_BASSLINE":                 89,
		"SUB_GENRE_BIGBEAT":                  90,
		"SUB_GENRE_BREAKBEAT":                91,
		"SUB_GENRE_BROKENBEAT":               92,
		"SUB_GENRE_CHICAGOHOUSE":             93,
		"SUB_GENRE_DEEPHOUSE":                94,
		"SUB_GENRE_DETROITHOUSE":             95,
		"SUB_GENRE_DETROITTECHNO":            96,
		"SUB_GENRE_DIGITALHARDCORE":          97,
		"SUB_GENRE_DOWNTEMPO":                98,
		"SUB_GENRE_DRILLNBASS":               99,
		"SUB_GENRE_DRUMNBASS":                100,
		"SUB_GENRE_DRUMSTEP":                 101,
		"SUB_GENRE_DUBSTEPUK":                102,
		"SUB_GENRE_DUBSTEPUS":                103,
		"SUB_GENRE_DUBTRONICA":               104,
		"SUB_GENRE_DUTCHHOUSE":               105,
		"SUB_GENRE_EBM":                      106,
		"SUB_GENRE_ELECTRO":                  107,
		"SUB_GENRE_ELECTROHOUSE":             108,
		"SUB_GENRE_ELECTRONICA_ECLECTIC":     109,
		"SUB_GENRE_EURODANCE":                110,
		"SUB_GENRE_EXPERIMENTALELECTRONIC":   111,
		"SUB_GENRE_FRENCHHOUSE":              112,
		"SUB_GENRE_FUTUREGARAGE":             113,
		"SUB_GENRE_GABBA":                    114,
		"SUB_GENRE_GARAGEHOUSE":              115,
		"SUB_GENRE_GLITCH":                   116,
		"SUB_GENRE_HAPPYHARDCORE":            117,
		"SUB_GENRE_HARDTRANCE":               118,
		"SUB_GENRE_HARDCORE":                 119,
		"SUB_GENRE_HARDCOREBREAKBEAT":        120,
		"SUB_GENRE_HARDSTYLE":                121,
		"SUB_GENRE_HIPHOUSE":                 122,
		"SUB_GENRE_HOUSE":                    123,
		"SUB_GENRE_IDM":                      124,
		"SUB_GENRE_JAZZHOUSE":                125,
		"SUB_GENRE_JUNGLE":                   126,
		"SUB_GENRE_KWAITO":                   127,
		"SUB_GENRE_LATINHOUSE":               128,
		"SUB_GENRE_MINIMALHOUSE":             129,
		"SUB_GENRE_MINIMALTECHNO":            130,
		"SUB_GENRE_NOISEMUSIC":               131,
		"SUB_GENRE_NUDISCO":                  132,
		"SUB_GENRE_PROGRESSIVEHOUSE":         133,
		"SUB_GENRE_PROGRESSIVETRANCE":        134,
		"SUB_GENRE_PSYCHEDELICTRANCE":        135,
		"SUB_GENRE_SCHRANZ":                  136,
		"SUB_GENRE_SPEEDGARAGE":              137,
		"SUB_GENRE_SYNTHWAVE":                138,
		"SUB_GENRE_TECHHOUSE":                139,
		"SUB_GENRE_TECHNO":                   140,
		"SUB_GENRE_TRANCE":                   141,
		"SUB_GENRE_TRIBALHOUSE":              142,
		"SUB_GENRE_TRIPHOP":                  143,
		"SUB_GENRE_UKFUNKY":                  144,
		"SUB_GENRE_UKGARAGE":                 145,
		"SUB_GENRE_VOCALHOUSE":               146,
		"SUB_GENRE_AMERICANFOLK":             147,
		"SUB_GENRE_AMERICANPRIMITIVEGUITAR":  148,
		"SUB_GENRE_BARBERSHOPMUSIC":          149,
		"SUB_GENRE_BRITISHFOLK":              150,
		"SUB_GENRE_CANADIANFIDDLING":         151,
		"SUB_GENRE_CANADIANFOLK":             152,
		"SUB_GENRE_CELTIC":                   153,
		"SUB_GENRE_ELECTRICFOLK":             154,
		"SUB_GENRE_ENGLISHFOLK":              155,
		"SUB_GENRE_FOLKBAROQUE":              156,
		"SUB_GENRE_FOLKREVIVAL":              157,
		"SUB_GENRE_INDIEFOLK":                158,
		"SUB_GENRE_IRISHFOLK":                159,
		"SUB_GENRE_NORTHAMERICANFOLK":        160,
		"SUB_GENRE_OLDTIME":                  161,
		"SUB_GENRE_SCOTTISHFOLK":             162,
		"SUB_GENRE_SEASHANTIES":              163,
		"SUB_GENRE_WELSHFOLK":                164,
		"SUB_GENRE_ZYDECO":                   165,
		"SUB_GENRE_CLASSICGOSPEL":            166,
		"SUB_GENRE_SOUTHERNGOSPEL":           167,
		"SUB_GENRE_ALTERNATIVERAP":           168,
		"SUB_GENRE_CHRISTIANRAP":             169,
		"SUB_GENRE_CLASSICHIPHOP":            170,
		"SUB_GENRE_CONSCIOUSRAP":             171,
		"SUB_GENRE_CRUNK":                    172,
		"SUB_GENRE_DIRTYRAP":                 173,
		"SUB_GENRE_EASTCOASTHIPHOP":          174,
		"SUB_GENRE_EXPERIMENTALHIPHOP":       175,
		"SUB_GENRE_FUNKCARIOCA":              176,
		"SUB_GENRE_GFUNK":                    177,
		"SUB_GENRE_GANGSTARAP":               178,
		"SUB_GENRE_GOLDENAGE":                179,
		"SUB_GENRE_GRIME":                    180,
		"SUB_GENRE_HARDCORERAP":              181,
		"SUB_GENRE_INSTRUMENTALHIPHOP":       182,
		"SUB_GENRE_MIAMIBASS":                183,
		"SUB_GENRE_POPRAP":                   184,
		"SUB_GENRE_SOUTHERNRAP":              185,
		"SUB_GENRE_TRAP":                     186,
		"SUB_GENRE_WESTCOASTHIPHOP":          187,
		"SUB_GENRE_ACIDJAZZ":                 188,
		"SUB_GENRE_AFRICANJAZZ":              189,
		"SUB_GENRE_AVANTGARDEJAZZ":           190,
		"SUB_GENRE_BEBOP":                    191,
		"SUB_GENRE_BOSSANOVA":                192,
		"SUB_GENRE_BRITISHDANCEBAND":         193,
		"SUB_GENRE_CAPEJAZZ":                 194,
		"SUB_GENRE_COOLJAZZ":                 195,
		"SUB_GENRE_DIXIELAND":                196,
		"SUB_GENRE_ETHIOPIANJAZZ":            197,
		"SUB_GENRE_FREEJAZZ":                 198,
		"SUB_GENRE_GYPSYJAZZ":                199,
		"SUB_GENRE_HARDBOP":                  200,
		"SUB_GENRE_JAZZBLUES":                201,
		"SUB_GENRE_JAZZFUNK":                 202,
		"SUB_GENRE_JAZZFUSION":               203,
		"SUB_GENRE_JAZZROCK":                 204,
		"SUB_GENRE_JAZZPOP":                  205,
		"SUB_GENRE_LATINJAZZ":                206,
		"SUB_GENRE_MODALJAZZ":                207,
		"SUB_GENRE_MODERNCREATIVE":           208,
		"SUB_GENRE_MODERNJAZZ":               209,
		"SUB_GENRE_POSTBOP":                  210,
		"SUB_GENRE_SMOOTHJAZZ":               211,
		"SUB_GENRE_SOULJAZZ":                 212,
		"SUB_GENRE_SWING":                    213,
		"SUB_GENRE_SWINGREVIVAL":             214,
		"SUB_GENRE_TRADITIONALJAZZ":          215,
		"SUB_GENRE_TRADITIONALPOP":           216,
		"SUB_GENRE_BACHATA":                  217,
		"SUB_GENRE_BANDA":                    218,
		"SUB_GENRE_BOOGALOO":                 219,
		"SUB_GENRE_BRAZILIAN":                220,
		"SUB_GENRE_CONJUNTO":                 221,
		"SUB_GENRE_CORRIDOS":                 222,
		"SUB_GENRE_DURANGUENSE":              223,
		"SUB_GENRE_GRUPERA":                  224,
		"SUB_GENRE_HUPANGO":                  225,
		"SUB_GENRE_MARIACHI":                 226,
		"SUB_GENRE_NEWMEXICOMUSIC":           227,
		"SUB_GENRE_NORTENO":                  228,
		"SUB_GENRE_RANCHERA":                 229,
		"SUB_GENRE_REGGAETON":                230,
		"SUB_GENRE_REGIONALMEXICAN":          231,
		"SUB_GENRE_SALSA":                    232,
		"SUB_GENRE_SERTANEJO":                233,
		"SUB_GENRE_TEJANO":                   234,
		"SUB_GENRE_AFRICANPOP":               235,
		"SUB_GENRE_AFROBEAT":                 236,
		"SUB_GENRE_ALTERNATIVEDANCE":         237,
		"SUB_GENRE_ALTERNATIVEPOP":           238,
		"SUB_GENRE_AXE":                      239,
		"SUB_GENRE_BIKUTSI":                  240,
		"SUB_GENRE_BOLLYWOOD":                241,
		"SUB_GENRE_BRAZILIANPOP":             242,
		"SUB_GENRE_BREGA":                    243,
		"SUB_GENRE_CANTOPOP":                 244,
		"SUB_GENRE_CARIBBEANPOP":             245,
		"SUB_GENRE_CHAMBERPOP":               246,
		"SUB_GENRE_CHIMURENGA":               247,
		"SUB_GENRE_CHINESEPOP":               248,
		"SUB_GENRE_DREAMPOP":                 249,
		"SUB_GENRE_ELECTROCLASH":             250,
		"SUB_GENRE_ELECTRONICPOP":            251,
		"SUB_GENRE_ENKA":                     252,
		"SUB_GENRE_FILIPINOPOP":              253,
		"SUB_GENRE_FOLKTRONICA":              254,
		"SUB_GENRE_FRENCHPOP":                255,
		"SUB_GENRE_GERMANPOP":                256,
		"SUB_GENRE_GREEKPOP":                 257,
		"SUB_GENRE_HIGHLIFE":                 258,
		"SUB_GENRE_HIPLIFE":                  259,
		"SUB_GENRE_HOKKIENPOP":               260,
		"SUB_GENRE_INDIANPOP":                261,
		"SUB_GENRE_INDIEPOP":                 262,
		"SUB_GENRE_INDIETRONICA":             263,
		"SUB_GENRE_INDONESIANPOP":            264,
		"SUB_GENRE_JAPANESEPOP":              265,
		"SUB_GENRE_KAYOKYOKU":                266,
		"SUB_GENRE_KIZOMBA":                  267,
		"SUB_GENRE_KOREANPOP":                268,
		"SUB_GENRE_KUDURO":                   269,
		"SUB_GENRE_LATINFREESTYLE":           270,
		"SUB_GENRE_MADCHESTER":               271,
		"SUB_GENRE_MAKOSSA":                  272,
		"SUB_GENRE_MANDOPOP":                 273,
		"SUB_GENRE_MBALAX":                   274,
		"SUB_GENRE_MBAQANGA":                 275,
		"SUB_GENRE_MODERNLAIKO":              276,
		"SUB_GENRE_MODERNPOP":                277,
		"SUB_GENRE_MPB":                      278,
		"SUB_GENRE_MUSICOFTHEPHILIPPINES":    279,
		"SUB_GENRE_NDW":                      280,
		"SUB_GENRE_NEOPSYCHEDELIA":           281,
		"SUB_GENRE_NEWROMANTIC":              282,
		"SUB_GENRE_NEWWAVE":                  283,
		"SUB_GENRE_NOISEPOP":                 284,
		"SUB_GENRE_NOUVELLECHANSON":          285,
		"SUB_GENRE_POPROCK":                  286,
		"SUB_GENRE_PSYCHEDELICPOP":           287,
		"SUB_GENRE_SCHLAGER":                 288,
		"SUB_GENRE_SOCA":                     289,
		"SUB_GENRE_SOUKOUS":                  290,
		"SUB_GENRE_SYNTHPOP":                 291,
		"SUB_GENRE_TELUGU":                   292,
		"SUB_GENRE_TWEEPOP":                  293,
		"SUB_GENRE_AFROFUNK":                 294,
		"SUB_GENRE_ALTERNATIVER_N_B":         295,
		"SUB_GENRE_BLUEEYEDSOUL":             296,
		"SUB_GENRE_BOOGIE":                   297,
		"SUB_GENRE_CHICAGOSOUL":              298,
		"SUB_GENRE_CLASSICR_N_B":             299,
		"SUB_GENRE_CONTEMPORARYR_N_B":        300,
		"SUB_GENRE_DEEPSOUL":                 301,
		"SUB_GENRE_DISCO":                    302,
		"SUB_GENRE_DOOWOP":                   303,
		"SUB_GENRE_FUNK":                     304,
		"SUB_GENRE_GOGO":                     305,
		"SUB_GENRE_HINRG":                    306,
		"SUB_GENRE_ITALODISCO":               307,
		"SUB_GENRE_MEMPHISSOUL":              308,
		"SUB_GENRE_MINNEAPOLISFUNK":          309,
		"SUB_GENRE_MODERNR_N_B":              310,
		"SUB_GENRE_MOTOWNSOUND":              311,
		"SUB_GENRE_NEOSOUL":                  312,
		"SUB_GENRE_NEWJACKSWING":             313,
		"SUB_GENRE_NEWORLEANSR_N_B":          314,
		"SUB_GENRE_OGFUNK":                   315,
		"SUB_GENRE_PFUNK":                    316,
		"SUB_GENRE_PHILLYSOUND":              317,
		"SUB_GENRE_POPFUNK":                  318,
		"SUB_GENRE_PSYCHEDELICSOUL":          319,
		"SUB_GENRE_QUIETSTORM":               320,
		"SUB_GENRE_RETROSOUL":                321,
		"SUB_GENRE_SOUL":                     322,
		"SUB_GENRE_SOUTHERNSOUL":             323,
		"SUB_GENRE_TRADITIONALR_N_B":         324,
		"SUB_GENRE_URBANCONTEMPORARYGOSPEL":  325,
		"SUB_GENRE_WESTCOASTSOUL":            326,
		"SUB_GENRE_DANCEHALL":                327,
		"SUB_GENRE_DUB":                      328,
		"SUB_GENRE_ROCKSTEADY":               329,
		"SUB_GENRE_ROOTSREGGAE":              330,
		"SUB_GENRE_SKA":                      331,
		"SUB_GENRE_AFROROCK":                 332,
		"SUB_GENRE_ALTMETAL":                 333,
		"SUB_GENRE_ALTERNATIVEROCK":          334,
		"SUB_GENRE_ARTROCK":                  335,
		"SUB_GENRE_BLACKMETAL":               336,
		"SUB_GENRE_BOOGIEROCK":               337,
		"SUB_GENRE_BRITROCK":                 338,
		"SUB_GENRE_BRITISHINVASION":          339,
		"SUB_GENRE_BRITPOP":                  340,
		"SUB_GENRE_CLASSICROCK":              341,
		"SUB_GENRE_DARKWAVE":                 342,
		"SUB_GENRE_DEATHMETAL":               343,
		"SUB_GENRE_DOOMMETAL":                344,
		"SUB_GENRE_EARLYROCK":                345,
		"SUB_GENRE_ELECTROGOTH":              346,
		"SUB_GENRE_EMOROCK":                  347,
		"SUB_GENRE_EXPERIMENTALROCK":         348,
		"SUB_GENRE_FUNKMETAL":                349,
		"SUB_GENRE_GARAGEROCK":               350,
		"SUB_GENRE_GLAMROCK":                 351,
		"SUB_GENRE_GOTHICMETAL":              352,
		"SUB_GENRE_GOTHICROCK":               353,
		"SUB_GENRE_GRINDCORE":                354,
		"SUB_GENRE_GRUNGE":                   355,
		"SUB_GENRE_HAIRMETAL":                356,
		"SUB_GENRE_HARDROCK":                 357,
		"SUB_GENRE_HARDCOREPUNK":             358,
		"SUB_GENRE_HEARTLANDROCK":            359,
		"SUB_GENRE_INDIEROCK":                360,
		"SUB_GENRE_INDUSTRIAL":               361,
		"SUB_GENRE_INDUSTRIALMETAL":          362,
		"SUB_GENRE_JOVEMGUARDA":              363,
		"SUB_GENRE_KRAUTROCK":                364,
		"SUB_GENRE_MATHROCK":                 365,
		"SUB_GENRE_MERSEYBEAT":               366,
		"SUB_GENRE_METAL":                    367,
		"SUB_GENRE_METALCORE":                368,
		"SUB_GENRE_NOWAVE":                   369,
		"SUB_GENRE_NOISEROCK":                370,
		"SUB_GENRE_NUMETAL":                  371,
		"SUB_GENRE_OI":                       372,
		"SUB_GENRE_POPPUNK":                  373,
		"SUB_GENRE_POSTGRUNGE":               374,
		"SUB_GENRE_POSTROCK":                 375,
		"SUB_GENRE_POSTHARDCORE":             376,
		"SUB_GENRE_POSTPUNK":                 377,
		"SUB_GENRE_POWERPOP":                 378,
		"SUB_GENRE_PROGRESSIVEMETAL":         379,
		"SUB_GENRE_PROGRESSIVEROCK":          380,
		"SUB_GENRE_PROTOPUNK":                381,
		"SUB_GENRE_PSYCHEDELICROCK":          382,
		"SUB_GENRE_PSYCHOBILLY":              383,
		"SUB_GENRE_PUNK":                     384,
		"SUB_GENRE_RIOTGRRRL":                385,
		"SUB_GENRE_ROCKNROLL":                386,
		"SUB_GENRE_ROCKABILLY":               387,
		"SUB_GENRE_SAMBAROCK":                388,
		"SUB_GENRE_SCREAMO":                  389,
		"SUB_GENRE_SHOEGAZE":                 390,
		"SUB_GENRE_SOFTROCK":                 391,
		"SUB_GENRE_SOUTHAMERICANROCK":        392,
		"SUB_GENRE_SOUTHERNROCK":             393,
		"SUB_GENRE_SPACEROCK":                394,
		"SUB_GENRE_SPEEDMETAL":               395,
		"SUB_GENRE_STONERROCK":               396,
		"SUB_GENRE_SURF":                     397,
		"SUB_GENRE_SWAMPROCK":                398,
		"SUB_GENRE_THIRDWAVESKA":             399,
		"SUB_GENRE_THRASHMETAL":              400,
		"SUB_GENRE_TROPICALIA":               401,
		"SUB_GENRE_TWOTONE":                  402,
		"SUB_GENRE_UNDERGROUND":              403,
		"SUB_GENRE_COMMENTARY":               404,
		"SUB_GENRE_CONVERSATION":             405,
		"SUB_GENRE_INTERVIEW":                406,
		"SUB_GENRE_MONOLOGUE":                407,
		"SUB_GENRE_POETRY":                   408,
		"SUB_GENRE_SKIT":                     409,
		"SUB_GENRE_STANDUPCOMEDY":            410,
		"SUB_GENRE_AFOXE":                    411,
		"SUB_GENRE_AFRICANMUSIC":             412,
		"SUB_GENRE_ARGENTINIANMUSIC":         413,
		"SUB_GENRE_BALINESEMUSIC":            414,
		"SUB_GENRE_BRAZILIANMUSIC":           415,
		"SUB_GENRE_CALYPSO":                  416,
		"SUB_GENRE_CAPOEIRAMUSIC":            417,
		"SUB_GENRE_CARIBBEANMUSIC":           418,
		"SUB_GENRE_CARNATICMUSIC":            419,
		"SUB_GENRE_CHACHACHA":                420,
		"SUB_GENRE_CHILEANMUSIC":             421,
		"SUB_GENRE_CHORO":                    422,
		"SUB_GENRE_COLOMBIANMUSIC":           423,
		"SUB_GENRE_CONTRADANZA":              424,
		"SUB_GENRE_CUBANMUSIC":               425,
		"SUB_GENRE_CUECA":                    426,
		"SUB_GENRE_CUMBIA":                   427,
		"SUB_GENRE_CZECHMUSIC":               428,
		"SUB_GENRE_DANZON":                   429,
		"SUB_GENRE_DIMOTIKO":                 430,
		"SUB_GENRE_DOMINICANMUSIC":           431,
		"SUB_GENRE_FADO":                     432,
		"SUB_GENRE_FLAMENCO":                 433,
		"SUB_GENRE_FRENCHMUSIC":              434,
		"SUB_GENRE_GAUCHOMUSIC":              435,
		"SUB_GENRE_GERMANMUSIC":              436,
		"SUB_GENRE_GREEKMUSIC":               437,
		"SUB_GENRE_GUARACHA":                 438,
		"SUB_GENRE_HINDUSTANICLASSICALMUSIC": 439,
		"SUB_GENRE_INDIANMUSIC":              440,
		"SUB_GENRE_INDONESIANMUSIC":          441,
		"SUB_GENRE_IRISHMUSIC":               442,
		"SUB_GENRE_ITALIANMUSIC":             443,
		"SUB_GENRE_JAMAICANMUSIC":            444,
		"SUB_GENRE_JAVANESEMUSIC":            445,
		"SUB_GENRE_JEWISHMUSIC":              446,
		"SUB_GENRE_JUGENSEMBLE":              447,
		"SUB_GENRE_KLEZMER":                  448,
		"SUB_GENRE_MAMBO":                    449,
		"SUB_GENRE_MARACATU":                 450,
		"SUB_GENRE_MERENGUE":                 451,
		"SUB_GENRE_MEXICANMUSIC":             452,
		"SUB_GENRE_MIDDLEEASTERNMUSIC":       453,
		"SUB_GENRE_NEAPOLITANSONG":           454,
		"SUB_GENRE_NORTHAMERICANMUSIC":       455,
		"SUB_GENRE_PAKISTANIMUSIC":           456,
		"SUB_GENRE_PALO":                     457,
		"SUB_GENRE_PILN":                     458,
		"SUB_GENRE_POLKA":                    459,
		"SUB_GENRE_PORTUGUESEMUSIC":          460,
		"SUB_GENRE_PUERTORICANMUSIC":         461,
		"SUB_GENRE_PUNJABIMUSIC":             462,
		"SUB_GENRE_RAGTIME":                  463,
		"SUB_GENRE_REPENTE":                  464,
		"SUB_GENRE_ROMANIANMUSIC":            465,
		"SUB_GENRE_SALVES":                   466,
		"SUB_GENRE_SAMBA":                    467,
		"SUB_GENRE_SON":                      468,
		"SUB_GENRE_SOUTHAMERICANMUSIC":       469,
		"SUB_GENRE_SPANISHMUSIC":             470,
		"SUB_GENRE_SPIRITUAL":                471,
		"SUB_GENRE_TANGO":                    472,
		"SUB_GENRE_TIBETANMUSIC":             473,
		"SUB_GENRE_TONADA":                   474,
		"SUB_GENRE_TURKISHMUSIC":             475,
		"SUB_GENRE_TURKISHCLASSICALMUSIC":    476,
		"SUB_GENRE_WORKSONGS":                477,
		"SUB_GENRE_EXOTICA":                  478,
		"SUB_GENRE_NEWAGE":                   479,
		"SUB_GENRE_NEWFLAMENCO":              480,
		"SUB_GENRE_WORLDFUSIONJAZZ":          481,
		"SUB_GENRE_WORLDBEAT":                482,
		"SUB_GENRE_USERDEFINED":              483,
	}
)

func (x SubGenre) Enum() *SubGenre {
	p := new(SubGenre)
	*p = x
	return p
}

func (x SubGenre) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubGenre) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[166].Descriptor()
}

func (SubGenre) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[166]
}

func (x SubGenre) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubGenre.Descriptor instead.
func (SubGenre) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{166}
}

type SubTitleType int32

const (
	SubTitleType_SUB_TITLE_TYPE_UNSPECIFIED SubTitleType = 0
	SubTitleType_SUB_TITLE_TYPE_LOCATION    SubTitleType = 1
	SubTitleType_SUB_TITLE_TYPE_VERSION     SubTitleType = 2
)

// Enum value maps for SubTitleType.
var (
	SubTitleType_name = map[int32]string{
		0: "SUB_TITLE_TYPE_UNSPECIFIED",
		1: "SUB_TITLE_TYPE_LOCATION",
		2: "SUB_TITLE_TYPE_VERSION",
	}
	SubTitleType_value = map[string]int32{
		"SUB_TITLE_TYPE_UNSPECIFIED": 0,
		"SUB_TITLE_TYPE_LOCATION":    1,
		"SUB_TITLE_TYPE_VERSION":     2,
	}
)

func (x SubTitleType) Enum() *SubTitleType {
	p := new(SubTitleType)
	*p = x
	return p
}

func (x SubTitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubTitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[167].Descriptor()
}

func (SubTitleType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[167]
}

func (x SubTitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubTitleType.Descriptor instead.
func (SubTitleType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{167}
}

type SummaryType int32

const (
	SummaryType_SUMMARY_TYPE_UNSPECIFIED      SummaryType = 0
	SummaryType_SUMMARY_TYPE_CONTRIBUTOR      SummaryType = 1
	SummaryType_SUMMARY_TYPE_RIGHTSCONTROLLER SummaryType = 2
)

// Enum value maps for SummaryType.
var (
	SummaryType_name = map[int32]string{
		0: "SUMMARY_TYPE_UNSPECIFIED",
		1: "SUMMARY_TYPE_CONTRIBUTOR",
		2: "SUMMARY_TYPE_RIGHTSCONTROLLER",
	}
	SummaryType_value = map[string]int32{
		"SUMMARY_TYPE_UNSPECIFIED":      0,
		"SUMMARY_TYPE_CONTRIBUTOR":      1,
		"SUMMARY_TYPE_RIGHTSCONTROLLER": 2,
	}
)

func (x SummaryType) Enum() *SummaryType {
	p := new(SummaryType)
	*p = x
	return p
}

func (x SummaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SummaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[168].Descriptor()
}

func (SummaryType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[168]
}

func (x SummaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SummaryType.Descriptor instead.
func (SummaryType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{168}
}

type SupplyChainStatus int32

const (
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_UNSPECIFIED                                  SupplyChainStatus = 0
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR                SupplyChainStatus = 1
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR               SupplyChainStatus = 2
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR SupplyChainStatus = 3
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR             SupplyChainStatus = 4
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR              SupplyChainStatus = 5
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR          SupplyChainStatus = 6
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS              SupplyChainStatus = 7
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE                          SupplyChainStatus = 8
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR          SupplyChainStatus = 9
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION                  SupplyChainStatus = 10
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR     SupplyChainStatus = 11
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_USERDEFINED                                  SupplyChainStatus = 12
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE                SupplyChainStatus = 13
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT                               SupplyChainStatus = 14
)

// Enum value maps for SupplyChainStatus.
var (
	SupplyChainStatus_name = map[int32]string{
		0:  "SUPPLY_CHAIN_STATUS_UNSPECIFIED",
		1:  "SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR",
		2:  "SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR",
		3:  "SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR",
		4:  "SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR",
		5:  "SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR",
		6:  "SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR",
		7:  "SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS",
		8:  "SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE",
		9:  "SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR",
		10: "SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION",
		11: "SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR",
		12: "SUPPLY_CHAIN_STATUS_USERDEFINED",
		13: "SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE",
		14: "SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT",
	}
	SupplyChainStatus_value = map[string]int32{
		"SUPPLY_CHAIN_STATUS_UNSPECIFIED":                                  0,
		"SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR":                1,
		"SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR":               2,
		"SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR": 3,
		"SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR":             4,
		"SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR":              5,
		"SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR":          6,
		"SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS":              7,
		"SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE":                          8,
		"SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR":          9,
		"SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION":                  10,
		"SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR":     11,
		"SUPPLY_CHAIN_STATUS_USERDEFINED":                                  12,
		"SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE":                13,
		"SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT":                               14,
	}
)

func (x SupplyChainStatus) Enum() *SupplyChainStatus {
	p := new(SupplyChainStatus)
	*p = x
	return p
}

func (x SupplyChainStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyChainStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[169].Descriptor()
}

func (SupplyChainStatus) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[169]
}

func (x SupplyChainStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyChainStatus.Descriptor instead.
func (SupplyChainStatus) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{169}
}

type Tempo int32

const (
	Tempo_TEMPO_UNSPECIFIED     Tempo = 0
	Tempo_TEMPO_ADAGIETTO       Tempo = 1
	Tempo_TEMPO_ADAGIO          Tempo = 2
	Tempo_TEMPO_ADAGISSIMO      Tempo = 3
	Tempo_TEMPO_ALLEGRETTO      Tempo = 4
	Tempo_TEMPO_ALLEGRISSIMO    Tempo = 5
	Tempo_TEMPO_ALLEGRO         Tempo = 6
	Tempo_TEMPO_ALLEGROMODERATO Tempo = 7
	Tempo_TEMPO_ANDANTE         Tempo = 8
	Tempo_TEMPO_ANDANTEMODERATO Tempo = 9
	Tempo_TEMPO_ANDANTINO       Tempo = 10
	Tempo_TEMPO_GRAVE           Tempo = 11
	Tempo_TEMPO_LARGHETTO       Tempo = 12
	Tempo_TEMPO_LARGHISSIMO     Tempo = 13
	Tempo_TEMPO_LARGO           Tempo = 14
	Tempo_TEMPO_LENTO           Tempo = 15
	Tempo_TEMPO_MARCIAMODERATO  Tempo = 16
	Tempo_TEMPO_MODERATO        Tempo = 17
	Tempo_TEMPO_PRESTISSIMO     Tempo = 18
	Tempo_TEMPO_PRESTO          Tempo = 19
	Tempo_TEMPO_USERDEFINED     Tempo = 20
	Tempo_TEMPO_VIVACE          Tempo = 21
	Tempo_TEMPO_VIVACISSIMO     Tempo = 22
)

// Enum value maps for Tempo.
var (
	Tempo_name = map[int32]string{
		0:  "TEMPO_UNSPECIFIED",
		1:  "TEMPO_ADAGIETTO",
		2:  "TEMPO_ADAGIO",
		3:  "TEMPO_ADAGISSIMO",
		4:  "TEMPO_ALLEGRETTO",
		5:  "TEMPO_ALLEGRISSIMO",
		6:  "TEMPO_ALLEGRO",
		7:  "TEMPO_ALLEGROMODERATO",
		8:  "TEMPO_ANDANTE",
		9:  "TEMPO_ANDANTEMODERATO",
		10: "TEMPO_ANDANTINO",
		11: "TEMPO_GRAVE",
		12: "TEMPO_LARGHETTO",
		13: "TEMPO_LARGHISSIMO",
		14: "TEMPO_LARGO",
		15: "TEMPO_LENTO",
		16: "TEMPO_MARCIAMODERATO",
		17: "TEMPO_MODERATO",
		18: "TEMPO_PRESTISSIMO",
		19: "TEMPO_PRESTO",
		20: "TEMPO_USERDEFINED",
		21: "TEMPO_VIVACE",
		22: "TEMPO_VIVACISSIMO",
	}
	Tempo_value = map[string]int32{
		"TEMPO_UNSPECIFIED":     0,
		"TEMPO_ADAGIETTO":       1,
		"TEMPO_ADAGIO":          2,
		"TEMPO_ADAGISSIMO":      3,
		"TEMPO_ALLEGRETTO":      4,
		"TEMPO_ALLEGRISSIMO":    5,
		"TEMPO_ALLEGRO":         6,
		"TEMPO_ALLEGROMODERATO": 7,
		"TEMPO_ANDANTE":         8,
		"TEMPO_ANDANTEMODERATO": 9,
		"TEMPO_ANDANTINO":       10,
		"TEMPO_GRAVE":           11,
		"TEMPO_LARGHETTO":       12,
		"TEMPO_LARGHISSIMO":     13,
		"TEMPO_LARGO":           14,
		"TEMPO_LENTO":           15,
		"TEMPO_MARCIAMODERATO":  16,
		"TEMPO_MODERATO":        17,
		"TEMPO_PRESTISSIMO":     18,
		"TEMPO_PRESTO":          19,
		"TEMPO_USERDEFINED":     20,
		"TEMPO_VIVACE":          21,
		"TEMPO_VIVACISSIMO":     22,
	}
)

func (x Tempo) Enum() *Tempo {
	p := new(Tempo)
	*p = x
	return p
}

func (x Tempo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tempo) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[170].Descriptor()
}

func (Tempo) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[170]
}

func (x Tempo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tempo.Descriptor instead.
func (Tempo) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{170}
}

type TerritoryCodeType int32

const (
	TerritoryCodeType_TERRITORY_CODE_TYPE_UNSPECIFIED TerritoryCodeType = 0
	TerritoryCodeType_TERRITORY_CODE_TYPE_ISO         TerritoryCodeType = 1
	TerritoryCodeType_TERRITORY_CODE_TYPE_TIS         TerritoryCodeType = 2
)

// Enum value maps for TerritoryCodeType.
var (
	TerritoryCodeType_name = map[int32]string{
		0: "TERRITORY_CODE_TYPE_UNSPECIFIED",
		1: "TERRITORY_CODE_TYPE_ISO",
		2: "TERRITORY_CODE_TYPE_TIS",
	}
	TerritoryCodeType_value = map[string]int32{
		"TERRITORY_CODE_TYPE_UNSPECIFIED": 0,
		"TERRITORY_CODE_TYPE_ISO":         1,
		"TERRITORY_CODE_TYPE_TIS":         2,
	}
)

func (x TerritoryCodeType) Enum() *TerritoryCodeType {
	p := new(TerritoryCodeType)
	*p = x
	return p
}

func (x TerritoryCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerritoryCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[171].Descriptor()
}

func (TerritoryCodeType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[171]
}

func (x TerritoryCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerritoryCodeType.Descriptor instead.
func (TerritoryCodeType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{171}
}

type TerritoryCodeTypeIncludingDeprecatedCodes int32

const (
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED   TerritoryCodeTypeIncludingDeprecatedCodes = 0
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO TerritoryCodeTypeIncludingDeprecatedCodes = 1
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO           TerritoryCodeTypeIncludingDeprecatedCodes = 2
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS           TerritoryCodeTypeIncludingDeprecatedCodes = 3
)

// Enum value maps for TerritoryCodeTypeIncludingDeprecatedCodes.
var (
	TerritoryCodeTypeIncludingDeprecatedCodes_name = map[int32]string{
		0: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED",
		1: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO",
		2: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO",
		3: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS",
	}
	TerritoryCodeTypeIncludingDeprecatedCodes_value = map[string]int32{
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED":   0,
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO": 1,
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO":           2,
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS":           3,
	}
)

func (x TerritoryCodeTypeIncludingDeprecatedCodes) Enum() *TerritoryCodeTypeIncludingDeprecatedCodes {
	p := new(TerritoryCodeTypeIncludingDeprecatedCodes)
	*p = x
	return p
}

func (x TerritoryCodeTypeIncludingDeprecatedCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerritoryCodeTypeIncludingDeprecatedCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[172].Descriptor()
}

func (TerritoryCodeTypeIncludingDeprecatedCodes) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[172]
}

func (x TerritoryCodeTypeIncludingDeprecatedCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerritoryCodeTypeIncludingDeprecatedCodes.Descriptor instead.
func (TerritoryCodeTypeIncludingDeprecatedCodes) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{172}
}

type TextCodecType int32

const (
	TextCodecType_TEXT_CODEC_TYPE_UNSPECIFIED         TextCodecType = 0
	TextCodecType_TEXT_CODEC_TYPE_ASCII               TextCodecType = 1
	TextCodecType_TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT TextCodecType = 2
	TextCodecType_TEXT_CODEC_TYPE_EBU_TT              TextCodecType = 3
	TextCodecType_TEXT_CODEC_TYPE_ENHANCEDLRC         TextCodecType = 4
	TextCodecType_TEXT_CODEC_TYPE_EPUB                TextCodecType = 5
	TextCodecType_TEXT_CODEC_TYPE_HTML                TextCodecType = 6
	TextCodecType_TEXT_CODEC_TYPE_LRC                 TextCodecType = 7
	TextCodecType_TEXT_CODEC_TYPE_MICROSOFTWORD       TextCodecType = 8
	TextCodecType_TEXT_CODEC_TYPE_OPENDOCUMENTTEXT    TextCodecType = 9
	TextCodecType_TEXT_CODEC_TYPE_OOXML               TextCodecType = 10
	TextCodecType_TEXT_CODEC_TYPE_PDF                 TextCodecType = 11
	TextCodecType_TEXT_CODEC_TYPE_POSTSCRIPT          TextCodecType = 12
	TextCodecType_TEXT_CODEC_TYPE_RTF                 TextCodecType = 13
	TextCodecType_TEXT_CODEC_TYPE_SIMPLELRC           TextCodecType = 14
	TextCodecType_TEXT_CODEC_TYPE_SRT                 TextCodecType = 15
	TextCodecType_TEXT_CODEC_TYPE_TTML                TextCodecType = 16
	TextCodecType_TEXT_CODEC_TYPE_UNKNOWN             TextCodecType = 17
	TextCodecType_TEXT_CODEC_TYPE_USERDEFINED         TextCodecType = 18
	TextCodecType_TEXT_CODEC_TYPE_UTF8TEXT            TextCodecType = 19
	TextCodecType_TEXT_CODEC_TYPE_VTT                 TextCodecType = 20
	TextCodecType_TEXT_CODEC_TYPE_WINDOWSTEXT         TextCodecType = 21
	TextCodecType_TEXT_CODEC_TYPE_XHTML               TextCodecType = 22
	TextCodecType_TEXT_CODEC_TYPE_XML                 TextCodecType = 23
)

// Enum value maps for TextCodecType.
var (
	TextCodecType_name = map[int32]string{
		0:  "TEXT_CODEC_TYPE_UNSPECIFIED",
		1:  "TEXT_CODEC_TYPE_ASCII",
		2:  "TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT",
		3:  "TEXT_CODEC_TYPE_EBU_TT",
		4:  "TEXT_CODEC_TYPE_ENHANCEDLRC",
		5:  "TEXT_CODEC_TYPE_EPUB",
		6:  "TEXT_CODEC_TYPE_HTML",
		7:  "TEXT_CODEC_TYPE_LRC",
		8:  "TEXT_CODEC_TYPE_MICROSOFTWORD",
		9:  "TEXT_CODEC_TYPE_OPENDOCUMENTTEXT",
		10: "TEXT_CODEC_TYPE_OOXML",
		11: "TEXT_CODEC_TYPE_PDF",
		12: "TEXT_CODEC_TYPE_POSTSCRIPT",
		13: "TEXT_CODEC_TYPE_RTF",
		14: "TEXT_CODEC_TYPE_SIMPLELRC",
		15: "TEXT_CODEC_TYPE_SRT",
		16: "TEXT_CODEC_TYPE_TTML",
		17: "TEXT_CODEC_TYPE_UNKNOWN",
		18: "TEXT_CODEC_TYPE_USERDEFINED",
		19: "TEXT_CODEC_TYPE_UTF8TEXT",
		20: "TEXT_CODEC_TYPE_VTT",
		21: "TEXT_CODEC_TYPE_WINDOWSTEXT",
		22: "TEXT_CODEC_TYPE_XHTML",
		23: "TEXT_CODEC_TYPE_XML",
	}
	TextCodecType_value = map[string]int32{
		"TEXT_CODEC_TYPE_UNSPECIFIED":         0,
		"TEXT_CODEC_TYPE_ASCII":               1,
		"TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT": 2,
		"TEXT_CODEC_TYPE_EBU_TT":              3,
		"TEXT_CODEC_TYPE_ENHANCEDLRC":         4,
		"TEXT_CODEC_TYPE_EPUB":                5,
		"TEXT_CODEC_TYPE_HTML":                6,
		"TEXT_CODEC_TYPE_LRC":                 7,
		"TEXT_CODEC_TYPE_MICROSOFTWORD":       8,
		"TEXT_CODEC_TYPE_OPENDOCUMENTTEXT":    9,
		"TEXT_CODEC_TYPE_OOXML":               10,
		"TEXT_CODEC_TYPE_PDF":                 11,
		"TEXT_CODEC_TYPE_POSTSCRIPT":          12,
		"TEXT_CODEC_TYPE_RTF":                 13,
		"TEXT_CODEC_TYPE_SIMPLELRC":           14,
		"TEXT_CODEC_TYPE_SRT":                 15,
		"TEXT_CODEC_TYPE_TTML":                16,
		"TEXT_CODEC_TYPE_UNKNOWN":             17,
		"TEXT_CODEC_TYPE_USERDEFINED":         18,
		"TEXT_CODEC_TYPE_UTF8TEXT":            19,
		"TEXT_CODEC_TYPE_VTT":                 20,
		"TEXT_CODEC_TYPE_WINDOWSTEXT":         21,
		"TEXT_CODEC_TYPE_XHTML":               22,
		"TEXT_CODEC_TYPE_XML":                 23,
	}
)

func (x TextCodecType) Enum() *TextCodecType {
	p := new(TextCodecType)
	*p = x
	return p
}

func (x TextCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[173].Descriptor()
}

func (TextCodecType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[173]
}

func (x TextCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextCodecType.Descriptor instead.
func (TextCodecType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{173}
}

type TextType int32

const (
	TextType_TEXT_TYPE_UNSPECIFIED           TextType = 0
	TextType_TEXT_TYPE_CAPTION               TextType = 1
	TextType_TEXT_TYPE_EBOOK                 TextType = 2
	TextType_TEXT_TYPE_LINERNOTES            TextType = 3
	TextType_TEXT_TYPE_LYRICTEXT             TextType = 4
	TextType_TEXT_TYPE_NONINTERACTIVEBOOKLET TextType = 5
	TextType_TEXT_TYPE_TEXTDOCUMENT          TextType = 6
	TextType_TEXT_TYPE_UNKNOWN               TextType = 7
	TextType_TEXT_TYPE_USERDEFINED           TextType = 8
)

// Enum value maps for TextType.
var (
	TextType_name = map[int32]string{
		0: "TEXT_TYPE_UNSPECIFIED",
		1: "TEXT_TYPE_CAPTION",
		2: "TEXT_TYPE_EBOOK",
		3: "TEXT_TYPE_LINERNOTES",
		4: "TEXT_TYPE_LYRICTEXT",
		5: "TEXT_TYPE_NONINTERACTIVEBOOKLET",
		6: "TEXT_TYPE_TEXTDOCUMENT",
		7: "TEXT_TYPE_UNKNOWN",
		8: "TEXT_TYPE_USERDEFINED",
	}
	TextType_value = map[string]int32{
		"TEXT_TYPE_UNSPECIFIED":           0,
		"TEXT_TYPE_CAPTION":               1,
		"TEXT_TYPE_EBOOK":                 2,
		"TEXT_TYPE_LINERNOTES":            3,
		"TEXT_TYPE_LYRICTEXT":             4,
		"TEXT_TYPE_NONINTERACTIVEBOOKLET": 5,
		"TEXT_TYPE_TEXTDOCUMENT":          6,
		"TEXT_TYPE_UNKNOWN":               7,
		"TEXT_TYPE_USERDEFINED":           8,
	}
)

func (x TextType) Enum() *TextType {
	p := new(TextType)
	*p = x
	return p
}

func (x TextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[174].Descriptor()
}

func (TextType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[174]
}

func (x TextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextType.Descriptor instead.
func (TextType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{174}
}

type TextTypeATOM int32

const (
	TextTypeATOM_TEXT_TYPE_A_T_O_M_UNSPECIFIED TextTypeATOM = 0
	TextTypeATOM_TEXT_TYPE_A_T_O_M_TEXT        TextTypeATOM = 1
	TextTypeATOM_TEXT_TYPE_A_T_O_M_HTML        TextTypeATOM = 2
	TextTypeATOM_TEXT_TYPE_A_T_O_M_XHTML       TextTypeATOM = 3
)

// Enum value maps for TextTypeATOM.
var (
	TextTypeATOM_name = map[int32]string{
		0: "TEXT_TYPE_A_T_O_M_UNSPECIFIED",
		1: "TEXT_TYPE_A_T_O_M_TEXT",
		2: "TEXT_TYPE_A_T_O_M_HTML",
		3: "TEXT_TYPE_A_T_O_M_XHTML",
	}
	TextTypeATOM_value = map[string]int32{
		"TEXT_TYPE_A_T_O_M_UNSPECIFIED": 0,
		"TEXT_TYPE_A_T_O_M_TEXT":        1,
		"TEXT_TYPE_A_T_O_M_HTML":        2,
		"TEXT_TYPE_A_T_O_M_XHTML":       3,
	}
)

func (x TextTypeATOM) Enum() *TextTypeATOM {
	p := new(TextTypeATOM)
	*p = x
	return p
}

func (x TextTypeATOM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextTypeATOM) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[175].Descriptor()
}

func (TextTypeATOM) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[175]
}

func (x TextTypeATOM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextTypeATOM.Descriptor instead.
func (TextTypeATOM) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{175}
}

type Theme int32

const (
	Theme_THEME_UNSPECIFIED                  Theme = 0
	Theme_THEME_ACTIVITIES                   Theme = 1
	Theme_THEME_COMINGHOME                   Theme = 2
	Theme_THEME_RAPGAME                      Theme = 3
	Theme_THEME_ALLIGATOR                    Theme = 4
	Theme_THEME_ANIMALS                      Theme = 5
	Theme_THEME_BEAR                         Theme = 6
	Theme_THEME_BIRD                         Theme = 7
	Theme_THEME_BUG                          Theme = 8
	Theme_THEME_BUTTERFLY                    Theme = 9
	Theme_THEME_CAT                          Theme = 10
	Theme_THEME_COW                          Theme = 11
	Theme_THEME_CROCODILE                    Theme = 12
	Theme_THEME_DINOSAUR                     Theme = 13
	Theme_THEME_DOG                          Theme = 14
	Theme_THEME_DOLPHIN                      Theme = 15
	Theme_THEME_EAGLE                        Theme = 16
	Theme_THEME_ELEPHANT                     Theme = 17
	Theme_THEME_FISH                         Theme = 18
	Theme_THEME_FOWL                         Theme = 19
	Theme_THEME_FOX                          Theme = 20
	Theme_THEME_FROG                         Theme = 21
	Theme_THEME_HORSE                        Theme = 22
	Theme_THEME_INSECT                       Theme = 23
	Theme_THEME_KANGAROO                     Theme = 24
	Theme_THEME_LION                         Theme = 25
	Theme_THEME_MAMMAL                       Theme = 26
	Theme_THEME_MONKEY                       Theme = 27
	Theme_THEME_MOUSE                        Theme = 28
	Theme_THEME_MULE                         Theme = 29
	Theme_THEME_NIGHTINGALE                  Theme = 30
	Theme_THEME_PIG                          Theme = 31
	Theme_THEME_PONY                         Theme = 32
	Theme_THEME_PORPOISE                     Theme = 33
	Theme_THEME_RABBIT                       Theme = 34
	Theme_THEME_RAT                          Theme = 35
	Theme_THEME_REPTILE                      Theme = 36
	Theme_THEME_SHARK                        Theme = 37
	Theme_THEME_SHEEP                        Theme = 38
	Theme_THEME_SNAKE                        Theme = 39
	Theme_THEME_SPIDER                       Theme = 40
	Theme_THEME_TIGER                        Theme = 41
	Theme_THEME_WHALE                        Theme = 42
	Theme_THEME_WOLF                         Theme = 43
	Theme_THEME_ARMS                         Theme = 44
	Theme_THEME_BACK                         Theme = 45
	Theme_THEME_BELLY                        Theme = 46
	Theme_THEME_BLOOD                        Theme = 47
	Theme_THEME_BODY                         Theme = 48
	Theme_THEME_BODYPARTS                    Theme = 49
	Theme_THEME_BRAIN                        Theme = 50
	Theme_THEME_EARS                         Theme = 51
	Theme_THEME_EYES                         Theme = 52
	Theme_THEME_FACE                         Theme = 53
	Theme_THEME_FEET                         Theme = 54
	Theme_THEME_FINGERS                      Theme = 55
	Theme_THEME_FUR                          Theme = 56
	Theme_THEME_HAIR                         Theme = 57
	Theme_THEME_HANDS                        Theme = 58
	Theme_THEME_HEAD                         Theme = 59
	Theme_THEME_HEART                        Theme = 60
	Theme_THEME_HIPS                         Theme = 61
	Theme_THEME_KNEES                        Theme = 62
	Theme_THEME_LEGS                         Theme = 63
	Theme_THEME_LIPS                         Theme = 64
	Theme_THEME_MOUTH                        Theme = 65
	Theme_THEME_MULTIPLEBODYPARTS            Theme = 66
	Theme_THEME_NECK                         Theme = 67
	Theme_THEME_PAW                          Theme = 68
	Theme_THEME_REAR                         Theme = 69
	Theme_THEME_SHOULDER                     Theme = 70
	Theme_THEME_SKIN                         Theme = 71
	Theme_THEME_TEETH                        Theme = 72
	Theme_THEME_TONGUE                       Theme = 73
	Theme_THEME_BODYLANGUAGE                 Theme = 74
	Theme_THEME_CALLOUT                      Theme = 75
	Theme_THEME_CELLPHONE                    Theme = 76
	Theme_THEME_COMMUNICATION                Theme = 77
	Theme_THEME_CONVERSATION                 Theme = 78
	Theme_THEME_LECTURING                    Theme = 79
	Theme_THEME_LISTENING                    Theme = 80
	Theme_THEME_METHOD                       Theme = 81
	Theme_THEME_PHONE                        Theme = 82
	Theme_THEME_QUESTION                     Theme = 83
	Theme_THEME_SCREAM                       Theme = 84
	Theme_THEME_SHOUTING                     Theme = 85
	Theme_THEME_SILENCE                      Theme = 86
	Theme_THEME_STYLE                        Theme = 87
	Theme_THEME_TALKING                      Theme = 88
	Theme_THEME_TELL                         Theme = 89
	Theme_THEME_TEXTMESSAGE                  Theme = 90
	Theme_THEME_WHISPER                      Theme = 91
	Theme_THEME_WORDS                        Theme = 92
	Theme_THEME_ACCUSE                       Theme = 93
	Theme_THEME_AFRAID                       Theme = 94
	Theme_THEME_ALONE                        Theme = 95
	Theme_THEME_AMBIVALENT                   Theme = 96
	Theme_THEME_ANGER                        Theme = 97
	Theme_THEME_ANGST                        Theme = 98
	Theme_THEME_ANXIOUS                      Theme = 99
	Theme_THEME_APOLOGIZE                    Theme = 100
	Theme_THEME_ATTITUDE                     Theme = 101
	Theme_THEME_BAD                          Theme = 102
	Theme_THEME_BEG                          Theme = 103
	Theme_THEME_BETRAY                       Theme = 104
	Theme_THEME_BLAME                        Theme = 105
	Theme_THEME_BORED                        Theme = 106
	Theme_THEME_BRAG                         Theme = 107
	Theme_THEME_BREAKDOWN                    Theme = 108
	Theme_THEME_BURDEN                       Theme = 109
	Theme_THEME_CHARITY                      Theme = 110
	Theme_THEME_COMPETITIVE                  Theme = 111
	Theme_THEME_COMPLAIN                     Theme = 112
	Theme_THEME_CONFLICT                     Theme = 113
	Theme_THEME_CONFUSED                     Theme = 114
	Theme_THEME_CONTEMPT                     Theme = 115
	Theme_THEME_CRAZY                        Theme = 116
	Theme_THEME_CRITICIZE                    Theme = 117
	Theme_THEME_CRUEL                        Theme = 118
	Theme_THEME_DANGER                       Theme = 119
	Theme_THEME_DEFEAT                       Theme = 120
	Theme_THEME_DEFEATED                     Theme = 121
	Theme_THEME_DESPAIR                      Theme = 122
	Theme_THEME_DIFFICULT                    Theme = 123
	Theme_THEME_DISAPPOINTMENT               Theme = 124
	Theme_THEME_DISSATISFACTION              Theme = 125
	Theme_THEME_DIZZY                        Theme = 126
	Theme_THEME_EGO                          Theme = 127
	Theme_THEME_EMBARRASSED                  Theme = 128
	Theme_THEME_EMERGENCY                    Theme = 129
	Theme_THEME_EMPTY                        Theme = 130
	Theme_THEME_END                          Theme = 131
	Theme_THEME_ENEMY                        Theme = 132
	Theme_THEME_EXCUSE                       Theme = 133
	Theme_THEME_FAILURE                      Theme = 134
	Theme_THEME_FAKE                         Theme = 135
	Theme_THEME_FOOL                         Theme = 136
	Theme_THEME_FORGET                       Theme = 137
	Theme_THEME_FRAGILE                      Theme = 138
	Theme_THEME_GOSSIP                       Theme = 139
	Theme_THEME_GREED                        Theme = 140
	Theme_THEME_GUILT                        Theme = 141
	Theme_THEME_HATE                         Theme = 142
	Theme_THEME_HIDE                         Theme = 143
	Theme_THEME_HORROR                       Theme = 144
	Theme_THEME_IDENTITYCRISIS               Theme = 145
	Theme_THEME_IGNORANCE                    Theme = 146
	Theme_THEME_INSECURE                     Theme = 147
	Theme_THEME_INSULT                       Theme = 148
	Theme_THEME_JEALOUS                      Theme = 149
	Theme_THEME_LAZY                         Theme = 150
	Theme_THEME_LOSS                         Theme = 151
	Theme_THEME_LOST                         Theme = 152
	Theme_THEME_MANIPULATE                   Theme = 153
	Theme_THEME_MEAN                         Theme = 154
	Theme_THEME_MISBEHAVIOR                  Theme = 155
	Theme_THEME_MISTAKES                     Theme = 156
	Theme_THEME_MOURNING                     Theme = 157
	Theme_THEME_NERVOUS                      Theme = 158
	Theme_THEME_PAIN                         Theme = 159
	Theme_THEME_PANIC                        Theme = 160
	Theme_THEME_POISON                       Theme = 161
	Theme_THEME_PROBLEMS                     Theme = 162
	Theme_THEME_REBELLION                    Theme = 163
	Theme_THEME_REGRET                       Theme = 164
	Theme_THEME_REVENGE                      Theme = 165
	Theme_THEME_SAD                          Theme = 166
	Theme_THEME_SECRETS                      Theme = 167
	Theme_THEME_SHAME                        Theme = 168
	Theme_THEME_SHY                          Theme = 169
	Theme_THEME_SLEAZY                       Theme = 170
	Theme_THEME_STOP                         Theme = 171
	Theme_THEME_STRANGE                      Theme = 172
	Theme_THEME_STRESS                       Theme = 173
	Theme_THEME_STUBBORN                     Theme = 174
	Theme_THEME_STUPID                       Theme = 175
	Theme_THEME_SUICIDE                      Theme = 176
	Theme_THEME_TEMPTATION                   Theme = 177
	Theme_THEME_TERRIBLE                     Theme = 178
	Theme_THEME_THREATEN                     Theme = 179
	Theme_THEME_TORN                         Theme = 180
	Theme_THEME_TRAGEDY                      Theme = 181
	Theme_THEME_TRAPPED                      Theme = 182
	Theme_THEME_TROUBLE                      Theme = 183
	Theme_THEME_WASTEFUL                     Theme = 184
	Theme_THEME_WORRY                        Theme = 185
	Theme_THEME_WRONG                        Theme = 186
	Theme_THEME_AWARENESS                    Theme = 187
	Theme_THEME_CHALLENGE                    Theme = 188
	Theme_THEME_CHANGE                       Theme = 189
	Theme_THEME_CONSCIOUSNESS                Theme = 190
	Theme_THEME_DAYDREAM                     Theme = 191
	Theme_THEME_IDEAS                        Theme = 192
	Theme_THEME_INFORMATION                  Theme = 193
	Theme_THEME_INSIGHT                      Theme = 194
	Theme_THEME_INSOMNIA                     Theme = 195
	Theme_THEME_INVISIBLE                    Theme = 196
	Theme_THEME_KNOWLEDGE                    Theme = 197
	Theme_THEME_MEMORY                       Theme = 198
	Theme_THEME_MENTALITY                    Theme = 199
	Theme_THEME_MIND                         Theme = 200
	Theme_THEME_OPINIONS                     Theme = 201
	Theme_THEME_PHILOSOPHY                   Theme = 202
	Theme_THEME_PRIVACY                      Theme = 203
	Theme_THEME_QUESTIONING                  Theme = 204
	Theme_THEME_REMEMBER                     Theme = 205
	Theme_THEME_SAFETY                       Theme = 206
	Theme_THEME_SAME                         Theme = 207
	Theme_THEME_SLEEP                        Theme = 208
	Theme_THEME_SOLITUDE                     Theme = 209
	Theme_THEME_WISDOM                       Theme = 210
	Theme_THEME_AIR                          Theme = 211
	Theme_THEME_ASHES                        Theme = 212
	Theme_THEME_BAY                          Theme = 213
	Theme_THEME_BEACH                        Theme = 214
	Theme_THEME_BLACK                        Theme = 215
	Theme_THEME_BLUE                         Theme = 216
	Theme_THEME_BROWN                        Theme = 217
	Theme_THEME_BURNING                      Theme = 218
	Theme_THEME_CLIFF                        Theme = 219
	Theme_THEME_COAST                        Theme = 220
	Theme_THEME_COLD                         Theme = 221
	Theme_THEME_COLOR                        Theme = 222
	Theme_THEME_DESERT                       Theme = 223
	Theme_THEME_EARTH                        Theme = 224
	Theme_THEME_EARTHQUAKE                   Theme = 225
	Theme_THEME_ELEMENTS                     Theme = 226
	Theme_THEME_EVERYTHING                   Theme = 227
	Theme_THEME_FIRE                         Theme = 228
	Theme_THEME_FLOOD                        Theme = 229
	Theme_THEME_FOREST                       Theme = 230
	Theme_THEME_GEOGRAPHY                    Theme = 231
	Theme_THEME_GREEN                        Theme = 232
	Theme_THEME_GREY                         Theme = 233
	Theme_THEME_HARBOR                       Theme = 234
	Theme_THEME_HIGHLAND                     Theme = 235
	Theme_THEME_HILLS                        Theme = 236
	Theme_THEME_HOT                          Theme = 237
	Theme_THEME_ISLAND                       Theme = 238
	Theme_THEME_LAKE                         Theme = 239
	Theme_THEME_LIGHTNING                    Theme = 240
	Theme_THEME_MOON                         Theme = 241
	Theme_THEME_MOUNTAIN                     Theme = 242
	Theme_THEME_NATURE                       Theme = 243
	Theme_THEME_OCEAN                        Theme = 244
	Theme_THEME_ORANGE                       Theme = 245
	Theme_THEME_PINK                         Theme = 246
	Theme_THEME_PLANET                       Theme = 247
	Theme_THEME_PURPLE                       Theme = 248
	Theme_THEME_RAIN                         Theme = 249
	Theme_THEME_RAINBOW                      Theme = 250
	Theme_THEME_RED                          Theme = 251
	Theme_THEME_RIVER                        Theme = 252
	Theme_THEME_SEA                          Theme = 253
	Theme_THEME_SKY                          Theme = 254
	Theme_THEME_SMOKE                        Theme = 255
	Theme_THEME_SNOW                         Theme = 256
	Theme_THEME_SOUNDS                       Theme = 257
	Theme_THEME_STAR                         Theme = 258
	Theme_THEME_STORM                        Theme = 259
	Theme_THEME_SUN                          Theme = 260
	Theme_THEME_SUNSHINE                     Theme = 261
	Theme_THEME_SWAMP                        Theme = 262
	Theme_THEME_TEMPERATURE                  Theme = 263
	Theme_THEME_UNIVERSE                     Theme = 264
	Theme_THEME_VALLEY                       Theme = 265
	Theme_THEME_VOLCANO                      Theme = 266
	Theme_THEME_WATER                        Theme = 267
	Theme_THEME_WATERFALL                    Theme = 268
	Theme_THEME_WHITE                        Theme = 269
	Theme_THEME_WIND                         Theme = 270
	Theme_THEME_YELLOW                       Theme = 271
	Theme_THEME_AMUSEMENTPARKSANDRIDES       Theme = 272
	Theme_THEME_BIRTHDAYPARTY                Theme = 273
	Theme_THEME_CARNIVAL                     Theme = 274
	Theme_THEME_CELEBRATION                  Theme = 275
	Theme_THEME_CIRCUS                       Theme = 276
	Theme_THEME_CLOWN                        Theme = 277
	Theme_THEME_DANCEPARTY                   Theme = 278
	Theme_THEME_EVENT                        Theme = 279
	Theme_THEME_FAIR                         Theme = 280
	Theme_THEME_PARADE                       Theme = 281
	Theme_THEME_PARTY                        Theme = 282
	Theme_THEME_SURPRISEPARTY                Theme = 283
	Theme_THEME_WINNING                      Theme = 284
	Theme_THEME_ABORTION                     Theme = 285
	Theme_THEME_ADOPTION                     Theme = 286
	Theme_THEME_AUNT                         Theme = 287
	Theme_THEME_BABY                         Theme = 288
	Theme_THEME_BIRTH                        Theme = 289
	Theme_THEME_BIRTHCONTROL                 Theme = 290
	Theme_THEME_BROKENHOME                   Theme = 291
	Theme_THEME_BROTHER                      Theme = 292
	Theme_THEME_CHILDREN                     Theme = 293
	Theme_THEME_COUSIN                       Theme = 294
	Theme_THEME_DAUGHTER                     Theme = 295
	Theme_THEME_FAMILY                       Theme = 296
	Theme_THEME_FAMILYLIFE                   Theme = 297
	Theme_THEME_FAMILYMEMBER                 Theme = 298
	Theme_THEME_FATHER                       Theme = 299
	Theme_THEME_GRANDPARENT                  Theme = 300
	Theme_THEME_HUSBAND                      Theme = 301
	Theme_THEME_MOTHER                       Theme = 302
	Theme_THEME_ORPHAN                       Theme = 303
	Theme_THEME_PARENT                       Theme = 304
	Theme_THEME_PREGNANCY                    Theme = 305
	Theme_THEME_SINGLEPARENT                 Theme = 306
	Theme_THEME_SISTER                       Theme = 307
	Theme_THEME_SON                          Theme = 308
	Theme_THEME_STEPPARENT                   Theme = 309
	Theme_THEME_UNCLE                        Theme = 310
	Theme_THEME_WIFE                         Theme = 311
	Theme_THEME_ADORATION                    Theme = 312
	Theme_THEME_ADVICE                       Theme = 313
	Theme_THEME_ALL                          Theme = 314
	Theme_THEME_ALWAYS                       Theme = 315
	Theme_THEME_AMBITION                     Theme = 316
	Theme_THEME_ANYTHING                     Theme = 317
	Theme_THEME_ASSURANCE                    Theme = 318
	Theme_THEME_BEGINNING                    Theme = 319
	Theme_THEME_BELIEVE                      Theme = 320
	Theme_THEME_BEST                         Theme = 321
	Theme_THEME_CALMNESS                     Theme = 322
	Theme_THEME_CAREFREE                     Theme = 323
	Theme_THEME_CHOICES                      Theme = 324
	Theme_THEME_COMFORT                      Theme = 325
	Theme_THEME_COMPASSION                   Theme = 326
	Theme_THEME_COMPLIMENTS                  Theme = 327
	Theme_THEME_CONFIDENCE                   Theme = 328
	Theme_THEME_CONNECTION                   Theme = 329
	Theme_THEME_CONSISTENT                   Theme = 330
	Theme_THEME_COOL                         Theme = 331
	Theme_THEME_COURAGE                      Theme = 332
	Theme_THEME_CRAVE                        Theme = 333
	Theme_THEME_DESIRE                       Theme = 334
	Theme_THEME_DETERMINATION                Theme = 335
	Theme_THEME_ECSTATIC                     Theme = 336
	Theme_THEME_EMPOWERED                    Theme = 337
	Theme_THEME_EQUALITY                     Theme = 338
	Theme_THEME_EXCELLENCE                   Theme = 339
	Theme_THEME_EXCITED                      Theme = 340
	Theme_THEME_EXPLORE                      Theme = 341
	Theme_THEME_FANTASY                      Theme = 342
	Theme_THEME_FAVORITE                     Theme = 343
	Theme_THEME_FEEL                         Theme = 344
	Theme_THEME_FEELINGS                     Theme = 345
	Theme_THEME_FORGIVE                      Theme = 346
	Theme_THEME_FOUND                        Theme = 347
	Theme_THEME_FUN                          Theme = 348
	Theme_THEME_GENTLE                       Theme = 349
	Theme_THEME_GETTINGOVER                  Theme = 350
	Theme_THEME_GIVE                         Theme = 351
	Theme_THEME_GOOD                         Theme = 352
	Theme_THEME_GRATITUDE                    Theme = 353
	Theme_THEME_HAPPINESS                    Theme = 354
	Theme_THEME_HELLO                        Theme = 355
	Theme_THEME_HELP                         Theme = 356
	Theme_THEME_HEROISM                      Theme = 357
	Theme_THEME_HIGHEST                      Theme = 358
	Theme_THEME_HONESTY                      Theme = 359
	Theme_THEME_HOPE                         Theme = 360
	Theme_THEME_INDEPENDENCE                 Theme = 361
	Theme_THEME_INDIVIDUALITY                Theme = 362
	Theme_THEME_INNOCENCE                    Theme = 363
	Theme_THEME_INSPIRATION                  Theme = 364
	Theme_THEME_INTEGRITY                    Theme = 365
	Theme_THEME_INTENTION                    Theme = 366
	Theme_THEME_LAUGHTER                     Theme = 367
	Theme_THEME_LEADER                       Theme = 368
	Theme_THEME_LIVING                       Theme = 369
	Theme_THEME_LOYALTY                      Theme = 370
	Theme_THEME_LUCKY                        Theme = 371
	Theme_THEME_MORALITY                     Theme = 372
	Theme_THEME_MOTIVATION                   Theme = 373
	Theme_THEME_NOSTALGIA                    Theme = 374
	Theme_THEME_OPPORTUNITY                  Theme = 375
	Theme_THEME_OPTIMISM                     Theme = 376
	Theme_THEME_PATIENCE                     Theme = 377
	Theme_THEME_PEACE                        Theme = 378
	Theme_THEME_PERFECTION                   Theme = 379
	Theme_THEME_PERSEVERE                    Theme = 380
	Theme_THEME_PLEASE                       Theme = 381
	Theme_THEME_POSSIBILITY                  Theme = 382
	Theme_THEME_PRIDE                        Theme = 383
	Theme_THEME_PROMISE                      Theme = 384
	Theme_THEME_PROTECT                      Theme = 385
	Theme_THEME_QUALITY                      Theme = 386
	Theme_THEME_REAL                         Theme = 387
	Theme_THEME_RECOVERY                     Theme = 388
	Theme_THEME_RESCUE                       Theme = 389
	Theme_THEME_RESILIENT                    Theme = 390
	Theme_THEME_RESPECT                      Theme = 391
	Theme_THEME_REUNITE                      Theme = 392
	Theme_THEME_RIGHT                        Theme = 393
	Theme_THEME_SATISFACTION                 Theme = 394
	Theme_THEME_SAVE                         Theme = 395
	Theme_THEME_SHELTER                      Theme = 396
	Theme_THEME_SIMPLE                       Theme = 397
	Theme_THEME_SMART                        Theme = 398
	Theme_THEME_SMILE                        Theme = 399
	Theme_THEME_SPACEDOUT                    Theme = 400
	Theme_THEME_SPECIAL                      Theme = 401
	Theme_THEME_STICK                        Theme = 402
	Theme_THEME_STRONG                       Theme = 403
	Theme_THEME_SUCCESS                      Theme = 404
	Theme_THEME_SUPERIORITY                  Theme = 405
	Theme_THEME_SUPPORT                      Theme = 406
	Theme_THEME_SURVIVE                      Theme = 407
	Theme_THEME_SWAGGER                      Theme = 408
	Theme_THEME_SWEET                        Theme = 409
	Theme_THEME_SYMPATHY                     Theme = 410
	Theme_THEME_TRUST                        Theme = 411
	Theme_THEME_TRUTH                        Theme = 412
	Theme_THEME_TRY                          Theme = 413
	Theme_THEME_UNBELIEVABLE                 Theme = 414
	Theme_THEME_UNDERSTANDING                Theme = 415
	Theme_THEME_UNIQUE                       Theme = 416
	Theme_THEME_UNITY                        Theme = 417
	Theme_THEME_WELCOME                      Theme = 418
	Theme_THEME_WISH                         Theme = 419
	Theme_THEME_WONDERFUL                    Theme = 420
	Theme_THEME_ATTRACTIVE                   Theme = 421
	Theme_THEME_BATTLEOFTHESEXES             Theme = 422
	Theme_THEME_BEAUTIFUL                    Theme = 423
	Theme_THEME_BEAUTY                       Theme = 424
	Theme_THEME_BOYS                         Theme = 425
	Theme_THEME_GENDER                       Theme = 426
	Theme_THEME_GIRLS                        Theme = 427
	Theme_THEME_HANDSOME                     Theme = 428
	Theme_THEME_LOVELY                       Theme = 429
	Theme_THEME_MEN                          Theme = 430
	Theme_THEME_MENSNAMES                    Theme = 431
	Theme_THEME_PRETTY                       Theme = 432
	Theme_THEME_UGLY                         Theme = 433
	Theme_THEME_WOMEN                        Theme = 434
	Theme_THEME_WOMENSNAMES                  Theme = 435
	Theme_THEME_GESTURES                     Theme = 436
	Theme_THEME_DISEASE                      Theme = 437
	Theme_THEME_DOCTOR                       Theme = 438
	Theme_THEME_FEVER                        Theme = 439
	Theme_THEME_HEALING                      Theme = 440
	Theme_THEME_HEALTHANDWELLNESS            Theme = 441
	Theme_THEME_HOSPITAL                     Theme = 442
	Theme_THEME_MEDICAL                      Theme = 443
	Theme_THEME_MENTALILLNESS                Theme = 444
	Theme_THEME_PHARMACEUTICAL               Theme = 445
	Theme_THEME_PHYSICALPAIN                 Theme = 446
	Theme_THEME_REHAB                        Theme = 447
	Theme_THEME_CHRISTMAS                    Theme = 448
	Theme_THEME_HALLOWEEN                    Theme = 449
	Theme_THEME_HOLIDAY                      Theme = 450
	Theme_THEME_MARDIGRAS                    Theme = 451
	Theme_THEME_NEWYEAR                      Theme = 452
	Theme_THEME_VACATION                     Theme = 453
	Theme_THEME_ADDICTEDTO                   Theme = 454
	Theme_THEME_AFFECTION                    Theme = 455
	Theme_THEME_ANNIVERSARY                  Theme = 456
	Theme_THEME_ATFIRSTSIGHT                 Theme = 457
	Theme_THEME_BACKTOGETHER                 Theme = 458
	Theme_THEME_BEINGIN                      Theme = 459
	Theme_THEME_BREAKUP                      Theme = 460
	Theme_THEME_CANTGETOVER                  Theme = 461
	Theme_THEME_CANTRESIST                   Theme = 462
	Theme_THEME_CHOOSE                       Theme = 463
	Theme_THEME_COMMITMENT                   Theme = 464
	Theme_THEME_COUPLE                       Theme = 465
	Theme_THEME_CRUSH                        Theme = 466
	Theme_THEME_DATING                       Theme = 467
	Theme_THEME_DESPERATE                    Theme = 468
	Theme_THEME_DISCOVERY                    Theme = 469
	Theme_THEME_DIVORCE                      Theme = 470
	Theme_THEME_DONTGO                       Theme = 471
	Theme_THEME_DONTLEAVEME                  Theme = 472
	Theme_THEME_ENGAGEMENT                   Theme = 473
	Theme_THEME_FALLINGIN                    Theme = 474
	Theme_THEME_FAREWELL                     Theme = 475
	Theme_THEME_FLIRT                        Theme = 476
	Theme_THEME_FORBIDDEN                    Theme = 477
	Theme_THEME_FREE                         Theme = 478
	Theme_THEME_FRIENDSHIP                   Theme = 479
	Theme_THEME_GETLOST                      Theme = 480
	Theme_THEME_HEARTACHE                    Theme = 481
	Theme_THEME_HOLDINGON                    Theme = 482
	Theme_THEME_HONEYMOON                    Theme = 483
	Theme_THEME_IDEAL                        Theme = 484
	Theme_THEME_INTROUBLE                    Theme = 485
	Theme_THEME_INFATUATED                   Theme = 486
	Theme_THEME_KISS                         Theme = 487
	Theme_THEME_LASTING                      Theme = 488
	Theme_THEME_LIES                         Theme = 489
	Theme_THEME_LONELY                       Theme = 490
	Theme_THEME_LONGING                      Theme = 491
	Theme_THEME_LOSINGYOU                    Theme = 492
	Theme_THEME_LOSTTHATLOVINGFEELING        Theme = 493
	Theme_THEME_LOVE                         Theme = 494
	Theme_THEME_MARRIEDLIFE                  Theme = 495
	Theme_THEME_MENTALKINGTOMEN              Theme = 496
	Theme_THEME_MENTALKINGTOWOMEN            Theme = 497
	Theme_THEME_MISSINGYOU                   Theme = 498
	Theme_THEME_MOVINGON                     Theme = 499
	Theme_THEME_NEED                         Theme = 500
	Theme_THEME_NONROMANTIC                  Theme = 501
	Theme_THEME_NOTCOMMITTED                 Theme = 502
	Theme_THEME_NOTMYTYPE                    Theme = 503
	Theme_THEME_OBSESSION                    Theme = 504
	Theme_THEME_ONENIGHTSTAND                Theme = 505
	Theme_THEME_PLATONIC                     Theme = 506
	Theme_THEME_PLAYER                       Theme = 507
	Theme_THEME_POSSESSED                    Theme = 508
	Theme_THEME_REJECTION                    Theme = 509
	Theme_THEME_RISK                         Theme = 510
	Theme_THEME_ROMANCE                      Theme = 511
	Theme_THEME_ROMANTIC                     Theme = 512
	Theme_THEME_SEARCHINGFOR                 Theme = 513
	Theme_THEME_SEDUCED                      Theme = 514
	Theme_THEME_SHOULDHAVESAID               Theme = 515
	Theme_THEME_SINGLEPERSON                 Theme = 516
	Theme_THEME_TAKEMEBACK                   Theme = 517
	Theme_THEME_TOGETHERNESS                 Theme = 518
	Theme_THEME_UNFAIR                       Theme = 519
	Theme_THEME_UNFAITHFUL                   Theme = 520
	Theme_THEME_UNREQUITED                   Theme = 521
	Theme_THEME_USAGAINSTTHEWORLD            Theme = 522
	Theme_THEME_VALENTINE                    Theme = 523
	Theme_THEME_WESHOULDBETOGETHER           Theme = 524
	Theme_THEME_WEDDING                      Theme = 525
	Theme_THEME_WOMENTALKINGTOMEN            Theme = 526
	Theme_THEME_WOMENTALKINGTOWOMEN          Theme = 527
	Theme_THEME_YOUNG                        Theme = 528
	Theme_THEME_ABOVE                        Theme = 529
	Theme_THEME_BEHIND                       Theme = 530
	Theme_THEME_BELOW                        Theme = 531
	Theme_THEME_BIG                          Theme = 532
	Theme_THEME_CLOSE                        Theme = 533
	Theme_THEME_DEEP                         Theme = 534
	Theme_THEME_DIRECTION                    Theme = 535
	Theme_THEME_DISTANCE                     Theme = 536
	Theme_THEME_DOWN                         Theme = 537
	Theme_THEME_EAST                         Theme = 538
	Theme_THEME_FAR                          Theme = 539
	Theme_THEME_FAT                          Theme = 540
	Theme_THEME_HIGH                         Theme = 541
	Theme_THEME_HUNDRED                      Theme = 542
	Theme_THEME_INFRONT                      Theme = 543
	Theme_THEME_INCH                         Theme = 544
	Theme_THEME_LEFT                         Theme = 545
	Theme_THEME_LOW                          Theme = 546
	Theme_THEME_MEASUREMENT                  Theme = 547
	Theme_THEME_MILE                         Theme = 548
	Theme_THEME_MILLION                      Theme = 549
	Theme_THEME_NEAR                         Theme = 550
	Theme_THEME_NORTH                        Theme = 551
	Theme_THEME_NUMBER                       Theme = 552
	Theme_THEME_SIZE                         Theme = 553
	Theme_THEME_SMALL                        Theme = 554
	Theme_THEME_SOUTH                        Theme = 555
	Theme_THEME_TALL                         Theme = 556
	Theme_THEME_THIN                         Theme = 557
	Theme_THEME_THOUSAND                     Theme = 558
	Theme_THEME_UP                           Theme = 559
	Theme_THEME_WEST                         Theme = 560
	Theme_THEME_ACTION                       Theme = 561
	Theme_THEME_AIRPLANES                    Theme = 562
	Theme_THEME_BASEBALL                     Theme = 563
	Theme_THEME_BASKETBALL                   Theme = 564
	Theme_THEME_BICYCLES                     Theme = 565
	Theme_THEME_BOUNCE                       Theme = 566
	Theme_THEME_BOXING                       Theme = 567
	Theme_THEME_BREATHE                      Theme = 568
	Theme_THEME_BUILD                        Theme = 569
	Theme_THEME_BUS                          Theme = 570
	Theme_THEME_BUSY                         Theme = 571
	Theme_THEME_CARRACING                    Theme = 572
	Theme_THEME_CARS                         Theme = 573
	Theme_THEME_CHASE                        Theme = 574
	Theme_THEME_CLEAN                        Theme = 575
	Theme_THEME_CLIMB                        Theme = 576
	Theme_THEME_CRASH                        Theme = 577
	Theme_THEME_CREATE                       Theme = 578
	Theme_THEME_CRY                          Theme = 579
	Theme_THEME_DANCE                        Theme = 580
	Theme_THEME_DRIFT                        Theme = 581
	Theme_THEME_DRINK                        Theme = 582
	Theme_THEME_DRIVE                        Theme = 583
	Theme_THEME_ESCAPE                       Theme = 584
	Theme_THEME_EXERCISE                     Theme = 585
	Theme_THEME_FALL                         Theme = 586
	Theme_THEME_FAST                         Theme = 587
	Theme_THEME_FIND                         Theme = 588
	Theme_THEME_FISHING                      Theme = 589
	Theme_THEME_FIX                          Theme = 590
	Theme_THEME_FLY                          Theme = 591
	Theme_THEME_FOLLOW                       Theme = 592
	Theme_THEME_FOOTBALL                     Theme = 593
	Theme_THEME_GO                           Theme = 594
	Theme_THEME_GOLF                         Theme = 595
	Theme_THEME_HORSERACING                  Theme = 596
	Theme_THEME_JUMP                         Theme = 597
	Theme_THEME_LEARN                        Theme = 598
	Theme_THEME_LEAVE                        Theme = 599
	Theme_THEME_LOOK                         Theme = 600
	Theme_THEME_MINE                         Theme = 601
	Theme_THEME_MOTION                       Theme = 602
	Theme_THEME_MOTORCYCLES                  Theme = 603
	Theme_THEME_MOVE                         Theme = 604
	Theme_THEME_OLYMPICS                     Theme = 605
	Theme_THEME_PLAYMUSIC                    Theme = 606
	Theme_THEME_READY                        Theme = 607
	Theme_THEME_REFLECT                      Theme = 608
	Theme_THEME_RELAX                        Theme = 609
	Theme_THEME_REPEAT                       Theme = 610
	Theme_THEME_RETURN                       Theme = 611
	Theme_THEME_REVOLVE                      Theme = 612
	Theme_THEME_RIDE                         Theme = 613
	Theme_THEME_ROCK                         Theme = 614
	Theme_THEME_RUN                          Theme = 615
	Theme_THEME_SAIL                         Theme = 616
	Theme_THEME_SEARCH                       Theme = 617
	Theme_THEME_SHAKE                        Theme = 618
	Theme_THEME_SHINE                        Theme = 619
	Theme_THEME_SHOOT                        Theme = 620
	Theme_THEME_SING                         Theme = 621
	Theme_THEME_SIT                          Theme = 622
	Theme_THEME_SKATE                        Theme = 623
	Theme_THEME_SKATEBOARD                   Theme = 624
	Theme_THEME_SKI                          Theme = 625
	Theme_THEME_SLOW                         Theme = 626
	Theme_THEME_SPEED                        Theme = 627
	Theme_THEME_SPORT                        Theme = 628
	Theme_THEME_STAND                        Theme = 629
	Theme_THEME_START                        Theme = 630
	Theme_THEME_STEAL                        Theme = 631
	Theme_THEME_SURF                         Theme = 632
	Theme_THEME_SWIM                         Theme = 633
	Theme_THEME_TAXI                         Theme = 634
	Theme_THEME_TEACH                        Theme = 635
	Theme_THEME_TRAINS                       Theme = 636
	Theme_THEME_TRANSPORTATION               Theme = 637
	Theme_THEME_TRAVEL                       Theme = 638
	Theme_THEME_TRUCKS                       Theme = 639
	Theme_THEME_TURN                         Theme = 640
	Theme_THEME_WAIT                         Theme = 641
	Theme_THEME_WALK                         Theme = 642
	Theme_THEME_WILD                         Theme = 643
	Theme_THEME_WORK                         Theme = 644
	Theme_THEME_WRITE                        Theme = 645
	Theme_THEME_NONE                         Theme = 646
	Theme_THEME_AMMUNITION                   Theme = 647
	Theme_THEME_ART                          Theme = 648
	Theme_THEME_BASS                         Theme = 649
	Theme_THEME_BEATS                        Theme = 650
	Theme_THEME_BELLS                        Theme = 651
	Theme_THEME_BEVERAGE                     Theme = 652
	Theme_THEME_BOOK                         Theme = 653
	Theme_THEME_BRASS                        Theme = 654
	Theme_THEME_CAMERA                       Theme = 655
	Theme_THEME_CANDLE                       Theme = 656
	Theme_THEME_CANDY                        Theme = 657
	Theme_THEME_CARDGAME                     Theme = 658
	Theme_THEME_CLOTHING                     Theme = 659
	Theme_THEME_COMPUTER                     Theme = 660
	Theme_THEME_CONTAINER                    Theme = 661
	Theme_THEME_COSMETIC                     Theme = 662
	Theme_THEME_DRUMS                        Theme = 663
	Theme_THEME_EDUCATION                    Theme = 664
	Theme_THEME_FABRIC                       Theme = 665
	Theme_THEME_FAME                         Theme = 666
	Theme_THEME_FASHION                      Theme = 667
	Theme_THEME_FLOWER                       Theme = 668
	Theme_THEME_FOOD                         Theme = 669
	Theme_THEME_FRUITS                       Theme = 670
	Theme_THEME_FURNITURE                    Theme = 671
	Theme_THEME_GAMBLING                     Theme = 672
	Theme_THEME_GAME                         Theme = 673
	Theme_THEME_GARBAGE                      Theme = 674
	Theme_THEME_GASOLINE                     Theme = 675
	Theme_THEME_GOLD                         Theme = 676
	Theme_THEME_GUITAR                       Theme = 677
	Theme_THEME_GUN                          Theme = 678
	Theme_THEME_HAT                          Theme = 679
	Theme_THEME_HOLE                         Theme = 680
	Theme_THEME_HORN                         Theme = 681
	Theme_THEME_JEWELRY                      Theme = 682
	Theme_THEME_JUKEBOX                      Theme = 683
	Theme_THEME_KEYS                         Theme = 684
	Theme_THEME_LIGHT                        Theme = 685
	Theme_THEME_LOCK                         Theme = 686
	Theme_THEME_MAIL                         Theme = 687
	Theme_THEME_MISPLACE                     Theme = 688
	Theme_THEME_MONEY                        Theme = 689
	Theme_THEME_MOVIE                        Theme = 690
	Theme_THEME_MUSIC                        Theme = 691
	Theme_THEME_MUSICBUSINESS                Theme = 692
	Theme_THEME_MUSICALINSTRUMENT            Theme = 693
	Theme_THEME_NEWS                         Theme = 694
	Theme_THEME_OBJECTS                      Theme = 695
	Theme_THEME_PAPER                        Theme = 696
	Theme_THEME_PERCUSSION                   Theme = 697
	Theme_THEME_PHOTOGRAPH                   Theme = 698
	Theme_THEME_PIANO                        Theme = 699
	Theme_THEME_PRODUCTANDBRAND              Theme = 700
	Theme_THEME_RADIO                        Theme = 701
	Theme_THEME_RHYTHM                       Theme = 702
	Theme_THEME_ROADACCIDENT                 Theme = 703
	Theme_THEME_ROBOT                        Theme = 704
	Theme_THEME_SHIP                         Theme = 705
	Theme_THEME_SHOE                         Theme = 706
	Theme_THEME_SHOPPING                     Theme = 707
	Theme_THEME_SHOWBIZ                      Theme = 708
	Theme_THEME_SILVER                       Theme = 709
	Theme_THEME_STRING                       Theme = 710
	Theme_THEME_STRINGANDROPE                Theme = 711
	Theme_THEME_SYNTHESIZER                  Theme = 712
	Theme_THEME_TATTOO                       Theme = 713
	Theme_THEME_TECHNOLOGY                   Theme = 714
	Theme_THEME_TELEVISION                   Theme = 715
	Theme_THEME_TOOLS                        Theme = 716
	Theme_THEME_TOY                          Theme = 717
	Theme_THEME_TREE                         Theme = 718
	Theme_THEME_TRUMPET                      Theme = 719
	Theme_THEME_UFO                          Theme = 720
	Theme_THEME_VEGETABLE                    Theme = 721
	Theme_THEME_VIDEOGAME                    Theme = 722
	Theme_THEME_VOICE                        Theme = 723
	Theme_THEME_WEAPON                       Theme = 724
	Theme_THEME_WHISTLE                      Theme = 725
	Theme_THEME_WINDCHIMES                   Theme = 726
	Theme_THEME_WOODWIND                     Theme = 727
	Theme_THEME_ACTOR                        Theme = 728
	Theme_THEME_ALIEN                        Theme = 729
	Theme_THEME_ASTRONAUT                    Theme = 730
	Theme_THEME_BALLERINA                    Theme = 731
	Theme_THEME_BLONDE                       Theme = 732
	Theme_THEME_BOSS                         Theme = 733
	Theme_THEME_BRUNETTE                     Theme = 734
	Theme_THEME_CELEBRITY                    Theme = 735
	Theme_THEME_CHEERLEADER                  Theme = 736
	Theme_THEME_COMIC                        Theme = 737
	Theme_THEME_COWBOYANDCOWGIRL             Theme = 738
	Theme_THEME_ELVIS                        Theme = 739
	Theme_THEME_GEEK                         Theme = 740
	Theme_THEME_GHOST                        Theme = 741
	Theme_THEME_GYPSY                        Theme = 742
	Theme_THEME_HERO                         Theme = 743
	Theme_THEME_HILLBILLY                    Theme = 744
	Theme_THEME_HIPPIE                       Theme = 745
	Theme_THEME_IDENTITY                     Theme = 746
	Theme_THEME_MAGICIAN                     Theme = 747
	Theme_THEME_ME                           Theme = 748
	Theme_THEME_MONSTER                      Theme = 749
	Theme_THEME_OUTLAW                       Theme = 750
	Theme_THEME_PEOPLE                       Theme = 751
	Theme_THEME_PIRATE                       Theme = 752
	Theme_THEME_REDHEAD                      Theme = 753
	Theme_THEME_ROYALTY                      Theme = 754
	Theme_THEME_SANTACLAUS                   Theme = 755
	Theme_THEME_SNOWMAN                      Theme = 756
	Theme_THEME_SOCIALOUTCAST                Theme = 757
	Theme_THEME_STALKER                      Theme = 758
	Theme_THEME_STORYBOOKCHARACTER           Theme = 759
	Theme_THEME_SUPERHERO                    Theme = 760
	Theme_THEME_THEM                         Theme = 761
	Theme_THEME_THREEKINGS                   Theme = 762
	Theme_THEME_US                           Theme = 763
	Theme_THEME_VILLAIN                      Theme = 764
	Theme_THEME_WAITER                       Theme = 765
	Theme_THEME_WITCH                        Theme = 766
	Theme_THEME_YOU                          Theme = 767
	Theme_THEME_YOUTH                        Theme = 768
	Theme_THEME_AFGHANISTAN                  Theme = 769
	Theme_THEME_AFRICA                       Theme = 770
	Theme_THEME_ALABAMA                      Theme = 771
	Theme_THEME_ALASKA                       Theme = 772
	Theme_THEME_ALBANIA                      Theme = 773
	Theme_THEME_ALGERIA                      Theme = 774
	Theme_THEME_AMSTERDAM                    Theme = 775
	Theme_THEME_ANDORRA                      Theme = 776
	Theme_THEME_ANGOLA                       Theme = 777
	Theme_THEME_ANTIGUAANDBARBUDA            Theme = 778
	Theme_THEME_ARGENTINA                    Theme = 779
	Theme_THEME_ARIZONA                      Theme = 780
	Theme_THEME_ARKANSAS                     Theme = 781
	Theme_THEME_ARMENIA                      Theme = 782
	Theme_THEME_ASIA                         Theme = 783
	Theme_THEME_ATLANTA                      Theme = 784
	Theme_THEME_AUSTRALIA                    Theme = 785
	Theme_THEME_AUSTRIA                      Theme = 786
	Theme_THEME_AZERBAIJAN                   Theme = 787
	Theme_THEME_BAHAMAS                      Theme = 788
	Theme_THEME_BAHRAIN                      Theme = 789
	Theme_THEME_BALI                         Theme = 790
	Theme_THEME_BALKANS                      Theme = 791
	Theme_THEME_BALTICSTATES                 Theme = 792
	Theme_THEME_BALTIMORE                    Theme = 793
	Theme_THEME_BANGLADESH                   Theme = 794
	Theme_THEME_BARBADOS                     Theme = 795
	Theme_THEME_BARS                         Theme = 796
	Theme_THEME_BATHROOM                     Theme = 797
	Theme_THEME_BEDROOM                      Theme = 798
	Theme_THEME_BELARUS                      Theme = 799
	Theme_THEME_BELGIUM                      Theme = 800
	Theme_THEME_BELIZE                       Theme = 801
	Theme_THEME_BENELUX                      Theme = 802
	Theme_THEME_BENIN                        Theme = 803
	Theme_THEME_BERLIN                       Theme = 804
	Theme_THEME_BERMUDA                      Theme = 805
	Theme_THEME_BHUTAN                       Theme = 806
	Theme_THEME_BIRMINGHAM                   Theme = 807
	Theme_THEME_BOARDWALK                    Theme = 808
	Theme_THEME_BOLIVIA                      Theme = 809
	Theme_THEME_BOSNIAANDHERZEGOVINA         Theme = 810
	Theme_THEME_BOSTON                       Theme = 811
	Theme_THEME_BOTSWANA                     Theme = 812
	Theme_THEME_BRAZIL                       Theme = 813
	Theme_THEME_BRIDGE                       Theme = 814
	Theme_THEME_BRITAIN                      Theme = 815
	Theme_THEME_BRITISHISLES                 Theme = 816
	Theme_THEME_BRUNEI                       Theme = 817
	Theme_THEME_BUILDING                     Theme = 818
	Theme_THEME_BULGARIA                     Theme = 819
	Theme_THEME_BURKINAFASO                  Theme = 820
	Theme_THEME_BURUNDI                      Theme = 821
	Theme_THEME_CALIFORNIA                   Theme = 822
	Theme_THEME_CAMBODIA                     Theme = 823
	Theme_THEME_CAMEROON                     Theme = 824
	Theme_THEME_CANADA                       Theme = 825
	Theme_THEME_CAPEVERDE                    Theme = 826
	Theme_THEME_CAROLINAS                    Theme = 827
	Theme_THEME_CASINO                       Theme = 828
	Theme_THEME_CEMETARY                     Theme = 829
	Theme_THEME_CENTRALAFRICANREPUBLIC       Theme = 830
	Theme_THEME_CENTRALAMERICA               Theme = 831
	Theme_THEME_CHAD                         Theme = 832
	Theme_THEME_CHICAGO                      Theme = 833
	Theme_THEME_CHILE                        Theme = 834
	Theme_THEME_CHINA                        Theme = 835
	Theme_THEME_CINCINNATI                   Theme = 836
	Theme_THEME_CITY                         Theme = 837
	Theme_THEME_CITYLIFE                     Theme = 838
	Theme_THEME_CLUB                         Theme = 839
	Theme_THEME_COLOMBIA                     Theme = 840
	Theme_THEME_COLORADO                     Theme = 841
	Theme_THEME_COMOROS                      Theme = 842
	Theme_THEME_CONNECTICUT                  Theme = 843
	Theme_THEME_CONTINENT                    Theme = 844
	Theme_THEME_COOKISLANDS                  Theme = 845
	Theme_THEME_COSTARICA                    Theme = 846
	Theme_THEME_COUNTRY                      Theme = 847
	Theme_THEME_COUNTRYLIFE                  Theme = 848
	Theme_THEME_CROATIA                      Theme = 849
	Theme_THEME_CUBA                         Theme = 850
	Theme_THEME_CYPRUS                       Theme = 851
	Theme_THEME_CZECHREPUBLIC                Theme = 852
	Theme_THEME_CZECHOSLOVAKIA               Theme = 853
	Theme_THEME_DALLAS                       Theme = 854
	Theme_THEME_DELAWARE                     Theme = 855
	Theme_THEME_DEMOCRATICREPUBLICOFTHECONGO Theme = 856
	Theme_THEME_DENMARK                      Theme = 857
	Theme_THEME_DENVER                       Theme = 858
	Theme_THEME_DETROIT                      Theme = 859
	Theme_THEME_DJIBOUTI                     Theme = 860
	Theme_THEME_DOMINICA                     Theme = 861
	Theme_THEME_DOMINICANREPUBLIC            Theme = 862
	Theme_THEME_DOOR                         Theme = 863
	Theme_THEME_DUBLIN                       Theme = 864
	Theme_THEME_EASTERNEUROPE                Theme = 865
	Theme_THEME_ECUADOR                      Theme = 866
	Theme_THEME_EGYPT                        Theme = 867
	Theme_THEME_ELSALVADOR                   Theme = 868
	Theme_THEME_ENGLAND                      Theme = 869
	Theme_THEME_EQUATORIALGUINEA             Theme = 870
	Theme_THEME_ERITREA                      Theme = 871
	Theme_THEME_ESTONIA                      Theme = 872
	Theme_THEME_ESWATINI                     Theme = 873
	Theme_THEME_ETHIOPIA                     Theme = 874
	Theme_THEME_EUROPE                       Theme = 875
	Theme_THEME_EUROPEANCONTINENT            Theme = 876
	Theme_THEME_EUROPEANECONOMICAREA         Theme = 877
	Theme_THEME_EUROPEANECONOMICCOMMUNITY    Theme = 878
	Theme_THEME_EUROPEANUNION                Theme = 879
	Theme_THEME_FARM                         Theme = 880
	Theme_THEME_FIJI                         Theme = 881
	Theme_THEME_FINLAND                      Theme = 882
	Theme_THEME_FLOORANDCEILING              Theme = 883
	Theme_THEME_FLORIDA                      Theme = 884
	Theme_THEME_FRANCE                       Theme = 885
	Theme_THEME_FRENCHCARIBBEAN              Theme = 886
	Theme_THEME_FRENCHGUIANA                 Theme = 887
	Theme_THEME_FRENCHPOLYNESIA              Theme = 888
	Theme_THEME_GABON                        Theme = 889
	Theme_THEME_GAMBIA                       Theme = 890
	Theme_THEME_GANGSTALIFE                  Theme = 891
	Theme_THEME_GARDEN                       Theme = 892
	Theme_THEME_GASSTATION                   Theme = 893
	Theme_THEME_GEOGRAPHICLOCATION           Theme = 894
	Theme_THEME_GEORGIA                      Theme = 895
	Theme_THEME_GERMANY                      Theme = 896
	Theme_THEME_GHANA                        Theme = 897
	Theme_THEME_GOODLIFE                     Theme = 898
	Theme_THEME_GREATBRITAIN                 Theme = 899
	Theme_THEME_GREECE                       Theme = 900
	Theme_THEME_GRENADA                      Theme = 901
	Theme_THEME_GUATEMALA                    Theme = 902
	Theme_THEME_GUINEA                       Theme = 903
	Theme_THEME_GUINEA_BISSAU                Theme = 904
	Theme_THEME_GUYANA                       Theme = 905
	Theme_THEME_HAITI                        Theme = 906
	Theme_THEME_HAVANA                       Theme = 907
	Theme_THEME_HAWAII                       Theme = 908
	Theme_THEME_HIGHWAY                      Theme = 909
	Theme_THEME_HOLLAND                      Theme = 910
	Theme_THEME_HOLLYWOOD                    Theme = 911
	Theme_THEME_HOME                         Theme = 912
	Theme_THEME_HONDURAS                     Theme = 913
	Theme_THEME_HONGKONG                     Theme = 914
	Theme_THEME_HOTEL                        Theme = 915
	Theme_THEME_HOUSE                        Theme = 916
	Theme_THEME_HOUSTON                      Theme = 917
	Theme_THEME_HUNGARY                      Theme = 918
	Theme_THEME_ICELAND                      Theme = 919
	Theme_THEME_IDAHO                        Theme = 920
	Theme_THEME_ILLINOIS                     Theme = 921
	Theme_THEME_INDIA                        Theme = 922
	Theme_THEME_INDIANA                      Theme = 923
	Theme_THEME_INDONESIA                    Theme = 924
	Theme_THEME_IOWA                         Theme = 925
	Theme_THEME_IRAN                         Theme = 926
	Theme_THEME_IRAQ                         Theme = 927
	Theme_THEME_IRELAND                      Theme = 928
	Theme_THEME_ISLEOFMAN                    Theme = 929
	Theme_THEME_ISRAEL                       Theme = 930
	Theme_THEME_ITALY                        Theme = 931
	Theme_THEME_IVORYCOAST                   Theme = 932
	Theme_THEME_JAMAICA                      Theme = 933
	Theme_THEME_JAPAN                        Theme = 934
	Theme_THEME_JAVA                         Theme = 935
	Theme_THEME_JORDAN                       Theme = 936
	Theme_THEME_KANSAS                       Theme = 937
	Theme_THEME_KANSASCITY                   Theme = 938
	Theme_THEME_KAZAKHSTAN                   Theme = 939
	Theme_THEME_KENTUCKY                     Theme = 940
	Theme_THEME_KENYA                        Theme = 941
	Theme_THEME_KIRIBATI                     Theme = 942
	Theme_THEME_KUWAIT                       Theme = 943
	Theme_THEME_KYRGYZSTAN                   Theme = 944
	Theme_THEME_LAOS                         Theme = 945
	Theme_THEME_LASVEGAS                     Theme = 946
	Theme_THEME_LATVIA                       Theme = 947
	Theme_THEME_LEBANON                      Theme = 948
	Theme_THEME_LESOTHO                      Theme = 949
	Theme_THEME_LIBERIA                      Theme = 950
	Theme_THEME_LIBYA                        Theme = 951
	Theme_THEME_LIECHTENSTEIN                Theme = 952
	Theme_THEME_LIGHTHOUSE                   Theme = 953
	Theme_THEME_LITHUANIA                    Theme = 954
	Theme_THEME_LOCATION                     Theme = 955
	Theme_THEME_LONDON                       Theme = 956
	Theme_THEME_LOSANGELES                   Theme = 957
	Theme_THEME_LOUISIANA                    Theme = 958
	Theme_THEME_LUXEMBOURG                   Theme = 959
	Theme_THEME_MACAO                        Theme = 960
	Theme_THEME_MADAGASCAR                   Theme = 961
	Theme_THEME_MAINE                        Theme = 962
	Theme_THEME_MALAWI                       Theme = 963
	Theme_THEME_MALAYSIA                     Theme = 964
	Theme_THEME_MALDIVES                     Theme = 965
	Theme_THEME_MALI                         Theme = 966
	Theme_THEME_MALTA                        Theme = 967
	Theme_THEME_MARSHALLISLANDS              Theme = 968
	Theme_THEME_MARYLAND                     Theme = 969
	Theme_THEME_MASSACHUSETTS                Theme = 970
	Theme_THEME_MAURITANIA                   Theme = 971
	Theme_THEME_MAURITIUS                    Theme = 972
	Theme_THEME_MEDELLN                      Theme = 973
	Theme_THEME_MEMPHIS                      Theme = 974
	Theme_THEME_MEXICO                       Theme = 975
	Theme_THEME_MIAMI                        Theme = 976
	Theme_THEME_MICHIGAN                     Theme = 977
	Theme_THEME_MICRONESIA                   Theme = 978
	Theme_THEME_MIDDLEEAST                   Theme = 979
	Theme_THEME_MINNESOTA                    Theme = 980
	Theme_THEME_MISSISSIPPI                  Theme = 981
	Theme_THEME_MISSOURI                     Theme = 982
	Theme_THEME_MOBILE                       Theme = 983
	Theme_THEME_MOLDOVA                      Theme = 984
	Theme_THEME_MONACO                       Theme = 985
	Theme_THEME_MONGOLIA                     Theme = 986
	Theme_THEME_MONTANA                      Theme = 987
	Theme_THEME_MONTENEGRO                   Theme = 988
	Theme_THEME_MOROCCO                      Theme = 989
	Theme_THEME_MOSCOW                       Theme = 990
	Theme_THEME_MOZAMBIQUE                   Theme = 991
	Theme_THEME_MYANMAR                      Theme = 992
	Theme_THEME_NAMIBIA                      Theme = 993
	Theme_THEME_NASHVILLE                    Theme = 994
	Theme_THEME_NAURU                        Theme = 995
	Theme_THEME_NEBRASKA                     Theme = 996
	Theme_THEME_NEPAL                        Theme = 997
	Theme_THEME_NETHERLANDS                  Theme = 998
	Theme_THEME_NEVADA                       Theme = 999
	Theme_THEME_NEWHAMPSHIRE                 Theme = 1000
	Theme_THEME_NEWJERSEY                    Theme = 1001
	Theme_THEME_NEWMEXICO                    Theme = 1002
	Theme_THEME_NEWORLEANS                   Theme = 1003
	Theme_THEME_NEWYORKCITY                  Theme = 1004
	Theme_THEME_NEWYORK                      Theme = 1005
	Theme_THEME_NEWZEALAND                   Theme = 1006
	Theme_THEME_NICARAGUA                    Theme = 1007
	Theme_THEME_NIGER                        Theme = 1008
	Theme_THEME_NIGERIA                      Theme = 1009
	Theme_THEME_NORTHAMERICA                 Theme = 1010
	Theme_THEME_NORTHDAKOTA                  Theme = 1011
	Theme_THEME_NORTHKOREA                   Theme = 1012
	Theme_THEME_NORTHMACEDONIA               Theme = 1013
	Theme_THEME_NORWAY                       Theme = 1014
	Theme_THEME_OCEANIA                      Theme = 1015
	Theme_THEME_OHIO                         Theme = 1016
	Theme_THEME_OKLAHOMA                     Theme = 1017
	Theme_THEME_OMAN                         Theme = 1018
	Theme_THEME_OREGON                       Theme = 1019
	Theme_THEME_OUTDOOR                      Theme = 1020
	Theme_THEME_PACIFICISLANDS               Theme = 1021
	Theme_THEME_PAD                          Theme = 1022
	Theme_THEME_PAKISTAN                     Theme = 1023
	Theme_THEME_PALAU                        Theme = 1024
	Theme_THEME_PANAMA                       Theme = 1025
	Theme_THEME_PAPUANEWGUINEA               Theme = 1026
	Theme_THEME_PARAGUAY                     Theme = 1027
	Theme_THEME_PARIS                        Theme = 1028
	Theme_THEME_PARK                         Theme = 1029
	Theme_THEME_PENNSYLVANIA                 Theme = 1030
	Theme_THEME_PERU                         Theme = 1031
	Theme_THEME_PHILADELPHIA                 Theme = 1032
	Theme_THEME_PHILIPPINES                  Theme = 1033
	Theme_THEME_PLACE                        Theme = 1034
	Theme_THEME_POLAND                       Theme = 1035
	Theme_THEME_POLYNESIA                    Theme = 1036
	Theme_THEME_PORTUGAL                     Theme = 1037
	Theme_THEME_PRAIRIE                      Theme = 1038
	Theme_THEME_PUERTORICO                   Theme = 1039
	Theme_THEME_QATAR                        Theme = 1040
	Theme_THEME_RANCH                        Theme = 1041
	Theme_THEME_REPUBLICOFTHECONGO           Theme = 1042
	Theme_THEME_RESTAURANT                   Theme = 1043
	Theme_THEME_RHODEISLAND                  Theme = 1044
	Theme_THEME_RIODEJANEIRO                 Theme = 1045
	Theme_THEME_ROAD                         Theme = 1046
	Theme_THEME_RODEO                        Theme = 1047
	Theme_THEME_ROMANIA                      Theme = 1048
	Theme_THEME_ROME                         Theme = 1049
	Theme_THEME_RUSSIA                       Theme = 1050
	Theme_THEME_RWANDA                       Theme = 1051
	Theme_THEME_SAINTKITTSANDNEVIS           Theme = 1052
	Theme_THEME_SAINTLUCIA                   Theme = 1053
	Theme_THEME_SAINTVINCENTANDTHEGRENADINES Theme = 1054
	Theme_THEME_SALTLAKECITY                 Theme = 1055
	Theme_THEME_SAMOA                        Theme = 1056
	Theme_THEME_SANANTONIO                   Theme = 1057
	Theme_THEME_SANFRANCISCO                 Theme = 1058
	Theme_THEME_SANMARINO                    Theme = 1059
	Theme_THEME_SANTAFE                      Theme = 1060
	Theme_THEME_SAOTOMEANDPRINCIPE           Theme = 1061
	Theme_THEME_SAUDIARABIA                  Theme = 1062
	Theme_THEME_SAVANNAH                     Theme = 1063
	Theme_THEME_SCANDINAVIA                  Theme = 1064
	Theme_THEME_SCHOOL                       Theme = 1065
	Theme_THEME_SCOTLAND                     Theme = 1066
	Theme_THEME_SENEGAL                      Theme = 1067
	Theme_THEME_SERBIA                       Theme = 1068
	Theme_THEME_SEYCHELLES                   Theme = 1069
	Theme_THEME_SIERRALEONE                  Theme = 1070
	Theme_THEME_SINGAPORE                    Theme = 1071
	Theme_THEME_SITUATION                    Theme = 1072
	Theme_THEME_SLOVAKIA                     Theme = 1073
	Theme_THEME_SLOVENIA                     Theme = 1074
	Theme_THEME_SMALLTOWNLIFE                Theme = 1075
	Theme_THEME_SOLOMONISLANDS               Theme = 1076
	Theme_THEME_SOMALIA                      Theme = 1077
	Theme_THEME_SOUTHAFRICA                  Theme = 1078
	Theme_THEME_SOUTHAMERICA                 Theme = 1079
	Theme_THEME_SOUTHDAKOTA                  Theme = 1080
	Theme_THEME_SOUTHEASTASIA                Theme = 1081
	Theme_THEME_SOUTHKOREA                   Theme = 1082
	Theme_THEME_SOUTHSUDAN                   Theme = 1083
	Theme_THEME_SPAIN                        Theme = 1084
	Theme_THEME_SRILANKA                     Theme = 1085
	Theme_THEME_ST_LOUIS                     Theme = 1086
	Theme_THEME_POLITICALSTATE               Theme = 1087
	Theme_THEME_STREET                       Theme = 1088
	Theme_THEME_SUDAN                        Theme = 1089
	Theme_THEME_SURINAME                     Theme = 1090
	Theme_THEME_SWEDEN                       Theme = 1091
	Theme_THEME_SWITZERLAND                  Theme = 1092
	Theme_THEME_SYRIA                        Theme = 1093
	Theme_THEME_TAIWAN                       Theme = 1094
	Theme_THEME_TAJIKISTAN                   Theme = 1095
	Theme_THEME_TANZANIA                     Theme = 1096
	Theme_THEME_TENNESSEE                    Theme = 1097
	Theme_THEME_TEXAS                        Theme = 1098
	Theme_THEME_THAILAND                     Theme = 1099
	Theme_THEME_THEATRE                      Theme = 1100
	Theme_THEME_TIBET                        Theme = 1101
	Theme_THEME_TIMOR_LESTE                  Theme = 1102
	Theme_THEME_TOGO                         Theme = 1103
	Theme_THEME_TOKYO                        Theme = 1104
	Theme_THEME_TONGA                        Theme = 1105
	Theme_THEME_TRAIL                        Theme = 1106
	Theme_THEME_TRINIDADANDTOBAGO            Theme = 1107
	Theme_THEME_TULSA                        Theme = 1108
	Theme_THEME_TUNISIA                      Theme = 1109
	Theme_THEME_TURKEY                       Theme = 1110
	Theme_THEME_TURKMENISTAN                 Theme = 1111
	Theme_THEME_TUVALU                       Theme = 1112
	Theme_THEME_UGANDA                       Theme = 1113
	Theme_THEME_UKRAINE                      Theme = 1114
	Theme_THEME_UNITEDARABEMIRATES           Theme = 1115
	Theme_THEME_UNITEDKINGDOM                Theme = 1116
	Theme_THEME_UNITEDSTATES                 Theme = 1117
	Theme_THEME_URUGUAY                      Theme = 1118
	Theme_THEME_UTAH                         Theme = 1119
	Theme_THEME_UZBEKISTAN                   Theme = 1120
	Theme_THEME_VANUATU                      Theme = 1121
	Theme_THEME_VATICAN                      Theme = 1122
	Theme_THEME_VENEZUELA                    Theme = 1123
	Theme_THEME_VERMONT                      Theme = 1124
	Theme_THEME_VIENNA                       Theme = 1125
	Theme_THEME_VIETNAM                      Theme = 1126
	Theme_THEME_VIRGINIA                     Theme = 1127
	Theme_THEME_WALES                        Theme = 1128
	Theme_THEME_WALL                         Theme = 1129
	Theme_THEME_WASHINGTON                   Theme = 1130
	Theme_THEME_WESTINDIES                   Theme = 1131
	Theme_THEME_WESTVIRGINIA                 Theme = 1132
	Theme_THEME_WESTERNSAHARA                Theme = 1133
	Theme_THEME_WINDOW                       Theme = 1134
	Theme_THEME_WISCONSIN                    Theme = 1135
	Theme_THEME_WORLD                        Theme = 1136
	Theme_THEME_WYOMING                      Theme = 1137
	Theme_THEME_YEMEN                        Theme = 1138
	Theme_THEME_YUGOSLAVIA                   Theme = 1139
	Theme_THEME_ZAMBIA                       Theme = 1140
	Theme_THEME_ZIMBABWE                     Theme = 1141
	Theme_THEME_ZOO                          Theme = 1142
	Theme_THEME_CAPITALPUNISHMENT            Theme = 1143
	Theme_THEME_CIVILRIGHTS                  Theme = 1144
	Theme_THEME_CRIME                        Theme = 1145
	Theme_THEME_DRAFTRESISTANCE              Theme = 1146
	Theme_THEME_ENLISTMENT                   Theme = 1147
	Theme_THEME_ENVIRONMENT                  Theme = 1148
	Theme_THEME_ESPIONAGE                    Theme = 1149
	Theme_THEME_FASCISM                      Theme = 1150
	Theme_THEME_FEMINISM                     Theme = 1151
	Theme_THEME_FREEDOM                      Theme = 1152
	Theme_THEME_GOVERNMENT                   Theme = 1153
	Theme_THEME_JUSTICE                      Theme = 1154
	Theme_THEME_LAWANDORDER                  Theme = 1155
	Theme_THEME_LAWENFORCEMENT               Theme = 1156
	Theme_THEME_MILITARY                     Theme = 1157
	Theme_THEME_NUCLEARENERGY                Theme = 1158
	Theme_THEME_NUCLEARWAR                   Theme = 1159
	Theme_THEME_OPPRESSION                   Theme = 1160
	Theme_THEME_PATRIOTISM                   Theme = 1161
	Theme_THEME_POLITICAL                    Theme = 1162
	Theme_THEME_POLITICS                     Theme = 1163
	Theme_THEME_POVERTY                      Theme = 1164
	Theme_THEME_POWERANDCONTROL              Theme = 1165
	Theme_THEME_PREJUDICE                    Theme = 1166
	Theme_THEME_PRESIDENT                    Theme = 1167
	Theme_THEME_PRISON                       Theme = 1168
	Theme_THEME_PROTEST                      Theme = 1169
	Theme_THEME_RACISM                       Theme = 1170
	Theme_THEME_REVOLUTION                   Theme = 1171
	Theme_THEME_SEGREGATION                  Theme = 1172
	Theme_THEME_SLAVERY                      Theme = 1173
	Theme_THEME_SUFFRAGE                     Theme = 1174
	Theme_THEME_UNION                        Theme = 1175
	Theme_THEME_WAR                          Theme = 1176
	Theme_THEME_WORKINGCLASS                 Theme = 1177
	Theme_THEME_MAKINGLOVE                   Theme = 1178
	Theme_THEME_SENSUALITY                   Theme = 1179
	Theme_THEME_ANGEL                        Theme = 1180
	Theme_THEME_ARMAGEDDON                   Theme = 1181
	Theme_THEME_ASTROLOGY                    Theme = 1182
	Theme_THEME_BELIEF                       Theme = 1183
	Theme_THEME_BLESS                        Theme = 1184
	Theme_THEME_BUDDHA                       Theme = 1185
	Theme_THEME_CHURCH                       Theme = 1186
	Theme_THEME_CRUCIFIXION                  Theme = 1187
	Theme_THEME_DARKNESS                     Theme = 1188
	Theme_THEME_DEATH                        Theme = 1189
	Theme_THEME_DEVIL                        Theme = 1190
	Theme_THEME_DREAM                        Theme = 1191
	Theme_THEME_ENLIGHTENMENT                Theme = 1192
	Theme_THEME_EVIL                         Theme = 1193
	Theme_THEME_FAITH                        Theme = 1194
	Theme_THEME_FAITHINDOUBT                 Theme = 1195
	Theme_THEME_FATE                         Theme = 1196
	Theme_THEME_FORTUNETELLER                Theme = 1197
	Theme_THEME_GOD                          Theme = 1198
	Theme_THEME_HEAVEN                       Theme = 1199
	Theme_THEME_HELL                         Theme = 1200
	Theme_THEME_IDEA                         Theme = 1201
	Theme_THEME_IMMORTALITY                  Theme = 1202
	Theme_THEME_JESUSCHRIST                  Theme = 1203
	Theme_THEME_KARMA                        Theme = 1204
	Theme_THEME_MAGIC                        Theme = 1205
	Theme_THEME_MERCY                        Theme = 1206
	Theme_THEME_MIRACLE                      Theme = 1207
	Theme_THEME_MYSTERY                      Theme = 1208
	Theme_THEME_NIGHTMARE                    Theme = 1209
	Theme_THEME_PRAYER                       Theme = 1210
	Theme_THEME_PROPHECY                     Theme = 1211
	Theme_THEME_REDEMPTION                   Theme = 1212
	Theme_THEME_RELIGION                     Theme = 1213
	Theme_THEME_SIGNS                        Theme = 1214
	Theme_THEME_SIN                          Theme = 1215
	Theme_THEME_SPIRIT                       Theme = 1216
	Theme_THEME_SUPERNATURAL                 Theme = 1217
	Theme_THEME_TAROT                        Theme = 1218
	Theme_THEME_UTOPIA                       Theme = 1219
	Theme_THEME_VOODOO                       Theme = 1220
	Theme_THEME_WIZARDRY                     Theme = 1221
	Theme_THEME_ZODIAC                       Theme = 1222
	Theme_THEME_ADDICTION                    Theme = 1223
	Theme_THEME_ALCOHOL                      Theme = 1224
	Theme_THEME_ANTIDRUG                     Theme = 1225
	Theme_THEME_DRUG                         Theme = 1226
	Theme_THEME_INTOXICATED                  Theme = 1227
	Theme_THEME_SOBER                        Theme = 1228
	Theme_THEME_SUBSTANCES                   Theme = 1229
	Theme_THEME_TOBACCO                      Theme = 1230
	Theme_THEME_ADOLESCENCE                  Theme = 1231
	Theme_THEME_AFTERNOON                    Theme = 1232
	Theme_THEME_APRIL                        Theme = 1233
	Theme_THEME_AUGUST                       Theme = 1234
	Theme_THEME_DATE                         Theme = 1235
	Theme_THEME_DAWN                         Theme = 1236
	Theme_THEME_DAY                          Theme = 1237
	Theme_THEME_DAYTIME                      Theme = 1238
	Theme_THEME_DECEMBER                     Theme = 1239
	Theme_THEME_ETERNITY                     Theme = 1240
	Theme_THEME_EVERYDAY                     Theme = 1241
	Theme_THEME_AUTUMN                       Theme = 1242
	Theme_THEME_FEBRUARY                     Theme = 1243
	Theme_THEME_FRIDAY                       Theme = 1244
	Theme_THEME_FUTURE                       Theme = 1245
	Theme_THEME_GENERAL                      Theme = 1246
	Theme_THEME_GOODNIGHT                    Theme = 1247
	Theme_THEME_GROWOLDER                    Theme = 1248
	Theme_THEME_GROWUP                       Theme = 1249
	Theme_THEME_HISTORY                      Theme = 1250
	Theme_THEME_HUMAN                        Theme = 1251
	Theme_THEME_JANUARY                      Theme = 1252
	Theme_THEME_JULY                         Theme = 1253
	Theme_THEME_JUNE                         Theme = 1254
	Theme_THEME_LASTNIGHT                    Theme = 1255
	Theme_THEME_LATE                         Theme = 1256
	Theme_THEME_MARCH                        Theme = 1257
	Theme_THEME_MAY                          Theme = 1258
	Theme_THEME_MIDNIGHT                     Theme = 1259
	Theme_THEME_MONDAY                       Theme = 1260
	Theme_THEME_MONTH                        Theme = 1261
	Theme_THEME_MORNING                      Theme = 1262
	Theme_THEME_NEW                          Theme = 1263
	Theme_THEME_NEWDAY                       Theme = 1264
	Theme_THEME_NIGHT                        Theme = 1265
	Theme_THEME_NOON                         Theme = 1266
	Theme_THEME_NOVEMBER                     Theme = 1267
	Theme_THEME_NOW                          Theme = 1268
	Theme_THEME_OCTOBER                      Theme = 1269
	Theme_THEME_OLD                          Theme = 1270
	Theme_THEME_PAST                         Theme = 1271
	Theme_THEME_PRESENT                      Theme = 1272
	Theme_THEME_SATURDAY                     Theme = 1273
	Theme_THEME_SEASON                       Theme = 1274
	Theme_THEME_SEPTEMBER                    Theme = 1275
	Theme_THEME_SPECIFICAGE                  Theme = 1276
	Theme_THEME_SPECIFICTIME                 Theme = 1277
	Theme_THEME_SPRING                       Theme = 1278
	Theme_THEME_SUMMER                       Theme = 1279
	Theme_THEME_SUNDAY                       Theme = 1280
	Theme_THEME_SUNRISE                      Theme = 1281
	Theme_THEME_THURSDAY                     Theme = 1282
	Theme_THEME_TIME                         Theme = 1283
	Theme_THEME_TIMEOFDAY                    Theme = 1284
	Theme_THEME_TODAY                        Theme = 1285
	Theme_THEME_TOMORROW                     Theme = 1286
	Theme_THEME_TONIGHT                      Theme = 1287
	Theme_THEME_TRADITION                    Theme = 1288
	Theme_THEME_TUESDAY                      Theme = 1289
	Theme_THEME_WEDNESDAY                    Theme = 1290
	Theme_THEME_WEEK                         Theme = 1291
	Theme_THEME_WEEKEND                      Theme = 1292
	Theme_THEME_WINTER                       Theme = 1293
	Theme_THEME_YESTERDAY                    Theme = 1294
	Theme_THEME_DOMESTICVIOLENCE             Theme = 1295
	Theme_THEME_FIGHT                        Theme = 1296
	Theme_THEME_GENOCIDE                     Theme = 1297
	Theme_THEME_MURDER                       Theme = 1298
	Theme_THEME_VIOLENCE                     Theme = 1299
	Theme_THEME_USERDEFINED                  Theme = 1300
	Theme_THEME_DINNER                       Theme = 1301
	Theme_THEME_FOCUS                        Theme = 1302
	Theme_THEME_FUNERAL                      Theme = 1303
	Theme_THEME_HANGOUT                      Theme = 1304
	Theme_THEME_KARAOKE                      Theme = 1305
	Theme_THEME_MEDITATION                   Theme = 1306
	Theme_THEME_ROADTRIP                     Theme = 1307
	Theme_THEME_VICTORY                      Theme = 1308
	Theme_THEME_WAKING                       Theme = 1309
	Theme_THEME_WORKOUT                      Theme = 1310
	Theme_THEME_WORSHIP                      Theme = 1311
	Theme_THEME_YOGA                         Theme = 1312
)

// Enum value maps for Theme.
var (
	Theme_name = map[int32]string{
		0:    "THEME_UNSPECIFIED",
		1:    "THEME_ACTIVITIES",
		2:    "THEME_COMINGHOME",
		3:    "THEME_RAPGAME",
		4:    "THEME_ALLIGATOR",
		5:    "THEME_ANIMALS",
		6:    "THEME_BEAR",
		7:    "THEME_BIRD",
		8:    "THEME_BUG",
		9:    "THEME_BUTTERFLY",
		10:   "THEME_CAT",
		11:   "THEME_COW",
		12:   "THEME_CROCODILE",
		13:   "THEME_DINOSAUR",
		14:   "THEME_DOG",
		15:   "THEME_DOLPHIN",
		16:   "THEME_EAGLE",
		17:   "THEME_ELEPHANT",
		18:   "THEME_FISH",
		19:   "THEME_FOWL",
		20:   "THEME_FOX",
		21:   "THEME_FROG",
		22:   "THEME_HORSE",
		23:   "THEME_INSECT",
		24:   "THEME_KANGAROO",
		25:   "THEME_LION",
		26:   "THEME_MAMMAL",
		27:   "THEME_MONKEY",
		28:   "THEME_MOUSE",
		29:   "THEME_MULE",
		30:   "THEME_NIGHTINGALE",
		31:   "THEME_PIG",
		32:   "THEME_PONY",
		33:   "THEME_PORPOISE",
		34:   "THEME_RABBIT",
		35:   "THEME_RAT",
		36:   "THEME_REPTILE",
		37:   "THEME_SHARK",
		38:   "THEME_SHEEP",
		39:   "THEME_SNAKE",
		40:   "THEME_SPIDER",
		41:   "THEME_TIGER",
		42:   "THEME_WHALE",
		43:   "THEME_WOLF",
		44:   "THEME_ARMS",
		45:   "THEME_BACK",
		46:   "THEME_BELLY",
		47:   "THEME_BLOOD",
		48:   "THEME_BODY",
		49:   "THEME_BODYPARTS",
		50:   "THEME_BRAIN",
		51:   "THEME_EARS",
		52:   "THEME_EYES",
		53:   "THEME_FACE",
		54:   "THEME_FEET",
		55:   "THEME_FINGERS",
		56:   "THEME_FUR",
		57:   "THEME_HAIR",
		58:   "THEME_HANDS",
		59:   "THEME_HEAD",
		60:   "THEME_HEART",
		61:   "THEME_HIPS",
		62:   "THEME_KNEES",
		63:   "THEME_LEGS",
		64:   "THEME_LIPS",
		65:   "THEME_MOUTH",
		66:   "THEME_MULTIPLEBODYPARTS",
		67:   "THEME_NECK",
		68:   "THEME_PAW",
		69:   "THEME_REAR",
		70:   "THEME_SHOULDER",
		71:   "THEME_SKIN",
		72:   "THEME_TEETH",
		73:   "THEME_TONGUE",
		74:   "THEME_BODYLANGUAGE",
		75:   "THEME_CALLOUT",
		76:   "THEME_CELLPHONE",
		77:   "THEME_COMMUNICATION",
		78:   "THEME_CONVERSATION",
		79:   "THEME_LECTURING",
		80:   "THEME_LISTENING",
		81:   "THEME_METHOD",
		82:   "THEME_PHONE",
		83:   "THEME_QUESTION",
		84:   "THEME_SCREAM",
		85:   "THEME_SHOUTING",
		86:   "THEME_SILENCE",
		87:   "THEME_STYLE",
		88:   "THEME_TALKING",
		89:   "THEME_TELL",
		90:   "THEME_TEXTMESSAGE",
		91:   "THEME_WHISPER",
		92:   "THEME_WORDS",
		93:   "THEME_ACCUSE",
		94:   "THEME_AFRAID",
		95:   "THEME_ALONE",
		96:   "THEME_AMBIVALENT",
		97:   "THEME_ANGER",
		98:   "THEME_ANGST",
		99:   "THEME_ANXIOUS",
		100:  "THEME_APOLOGIZE",
		101:  "THEME_ATTITUDE",
		102:  "THEME_BAD",
		103:  "THEME_BEG",
		104:  "THEME_BETRAY",
		105:  "THEME_BLAME",
		106:  "THEME_BORED",
		107:  "THEME_BRAG",
		108:  "THEME_BREAKDOWN",
		109:  "THEME_BURDEN",
		110:  "THEME_CHARITY",
		111:  "THEME_COMPETITIVE",
		112:  "THEME_COMPLAIN",
		113:  "THEME_CONFLICT",
		114:  "THEME_CONFUSED",
		115:  "THEME_CONTEMPT",
		116:  "THEME_CRAZY",
		117:  "THEME_CRITICIZE",
		118:  "THEME_CRUEL",
		119:  "THEME_DANGER",
		120:  "THEME_DEFEAT",
		121:  "THEME_DEFEATED",
		122:  "THEME_DESPAIR",
		123:  "THEME_DIFFICULT",
		124:  "THEME_DISAPPOINTMENT",
		125:  "THEME_DISSATISFACTION",
		126:  "THEME_DIZZY",
		127:  "THEME_EGO",
		128:  "THEME_EMBARRASSED",
		129:  "THEME_EMERGENCY",
		130:  "THEME_EMPTY",
		131:  "THEME_END",
		132:  "THEME_ENEMY",
		133:  "THEME_EXCUSE",
		134:  "THEME_FAILURE",
		135:  "THEME_FAKE",
		136:  "THEME_FOOL",
		137:  "THEME_FORGET",
		138:  "THEME_FRAGILE",
		139:  "THEME_GOSSIP",
		140:  "THEME_GREED",
		141:  "THEME_GUILT",
		142:  "THEME_HATE",
		143:  "THEME_HIDE",
		144:  "THEME_HORROR",
		145:  "THEME_IDENTITYCRISIS",
		146:  "THEME_IGNORANCE",
		147:  "THEME_INSECURE",
		148:  "THEME_INSULT",
		149:  "THEME_JEALOUS",
		150:  "THEME_LAZY",
		151:  "THEME_LOSS",
		152:  "THEME_LOST",
		153:  "THEME_MANIPULATE",
		154:  "THEME_MEAN",
		155:  "THEME_MISBEHAVIOR",
		156:  "THEME_MISTAKES",
		157:  "THEME_MOURNING",
		158:  "THEME_NERVOUS",
		159:  "THEME_PAIN",
		160:  "THEME_PANIC",
		161:  "THEME_POISON",
		162:  "THEME_PROBLEMS",
		163:  "THEME_REBELLION",
		164:  "THEME_REGRET",
		165:  "THEME_REVENGE",
		166:  "THEME_SAD",
		167:  "THEME_SECRETS",
		168:  "THEME_SHAME",
		169:  "THEME_SHY",
		170:  "THEME_SLEAZY",
		171:  "THEME_STOP",
		172:  "THEME_STRANGE",
		173:  "THEME_STRESS",
		174:  "THEME_STUBBORN",
		175:  "THEME_STUPID",
		176:  "THEME_SUICIDE",
		177:  "THEME_TEMPTATION",
		178:  "THEME_TERRIBLE",
		179:  "THEME_THREATEN",
		180:  "THEME_TORN",
		181:  "THEME_TRAGEDY",
		182:  "THEME_TRAPPED",
		183:  "THEME_TROUBLE",
		184:  "THEME_WASTEFUL",
		185:  "THEME_WORRY",
		186:  "THEME_WRONG",
		187:  "THEME_AWARENESS",
		188:  "THEME_CHALLENGE",
		189:  "THEME_CHANGE",
		190:  "THEME_CONSCIOUSNESS",
		191:  "THEME_DAYDREAM",
		192:  "THEME_IDEAS",
		193:  "THEME_INFORMATION",
		194:  "THEME_INSIGHT",
		195:  "THEME_INSOMNIA",
		196:  "THEME_INVISIBLE",
		197:  "THEME_KNOWLEDGE",
		198:  "THEME_MEMORY",
		199:  "THEME_MENTALITY",
		200:  "THEME_MIND",
		201:  "THEME_OPINIONS",
		202:  "THEME_PHILOSOPHY",
		203:  "THEME_PRIVACY",
		204:  "THEME_QUESTIONING",
		205:  "THEME_REMEMBER",
		206:  "THEME_SAFETY",
		207:  "THEME_SAME",
		208:  "THEME_SLEEP",
		209:  "THEME_SOLITUDE",
		210:  "THEME_WISDOM",
		211:  "THEME_AIR",
		212:  "THEME_ASHES",
		213:  "THEME_BAY",
		214:  "THEME_BEACH",
		215:  "THEME_BLACK",
		216:  "THEME_BLUE",
		217:  "THEME_BROWN",
		218:  "THEME_BURNING",
		219:  "THEME_CLIFF",
		220:  "THEME_COAST",
		221:  "THEME_COLD",
		222:  "THEME_COLOR",
		223:  "THEME_DESERT",
		224:  "THEME_EARTH",
		225:  "THEME_EARTHQUAKE",
		226:  "THEME_ELEMENTS",
		227:  "THEME_EVERYTHING",
		228:  "THEME_FIRE",
		229:  "THEME_FLOOD",
		230:  "THEME_FOREST",
		231:  "THEME_GEOGRAPHY",
		232:  "THEME_GREEN",
		233:  "THEME_GREY",
		234:  "THEME_HARBOR",
		235:  "THEME_HIGHLAND",
		236:  "THEME_HILLS",
		237:  "THEME_HOT",
		238:  "THEME_ISLAND",
		239:  "THEME_LAKE",
		240:  "THEME_LIGHTNING",
		241:  "THEME_MOON",
		242:  "THEME_MOUNTAIN",
		243:  "THEME_NATURE",
		244:  "THEME_OCEAN",
		245:  "THEME_ORANGE",
		246:  "THEME_PINK",
		247:  "THEME_PLANET",
		248:  "THEME_PURPLE",
		249:  "THEME_RAIN",
		250:  "THEME_RAINBOW",
		251:  "THEME_RED",
		252:  "THEME_RIVER",
		253:  "THEME_SEA",
		254:  "THEME_SKY",
		255:  "THEME_SMOKE",
		256:  "THEME_SNOW",
		257:  "THEME_SOUNDS",
		258:  "THEME_STAR",
		259:  "THEME_STORM",
		260:  "THEME_SUN",
		261:  "THEME_SUNSHINE",
		262:  "THEME_SWAMP",
		263:  "THEME_TEMPERATURE",
		264:  "THEME_UNIVERSE",
		265:  "THEME_VALLEY",
		266:  "THEME_VOLCANO",
		267:  "THEME_WATER",
		268:  "THEME_WATERFALL",
		269:  "THEME_WHITE",
		270:  "THEME_WIND",
		271:  "THEME_YELLOW",
		272:  "THEME_AMUSEMENTPARKSANDRIDES",
		273:  "THEME_BIRTHDAYPARTY",
		274:  "THEME_CARNIVAL",
		275:  "THEME_CELEBRATION",
		276:  "THEME_CIRCUS",
		277:  "THEME_CLOWN",
		278:  "THEME_DANCEPARTY",
		279:  "THEME_EVENT",
		280:  "THEME_FAIR",
		281:  "THEME_PARADE",
		282:  "THEME_PARTY",
		283:  "THEME_SURPRISEPARTY",
		284:  "THEME_WINNING",
		285:  "THEME_ABORTION",
		286:  "THEME_ADOPTION",
		287:  "THEME_AUNT",
		288:  "THEME_BABY",
		289:  "THEME_BIRTH",
		290:  "THEME_BIRTHCONTROL",
		291:  "THEME_BROKENHOME",
		292:  "THEME_BROTHER",
		293:  "THEME_CHILDREN",
		294:  "THEME_COUSIN",
		295:  "THEME_DAUGHTER",
		296:  "THEME_FAMILY",
		297:  "THEME_FAMILYLIFE",
		298:  "THEME_FAMILYMEMBER",
		299:  "THEME_FATHER",
		300:  "THEME_GRANDPARENT",
		301:  "THEME_HUSBAND",
		302:  "THEME_MOTHER",
		303:  "THEME_ORPHAN",
		304:  "THEME_PARENT",
		305:  "THEME_PREGNANCY",
		306:  "THEME_SINGLEPARENT",
		307:  "THEME_SISTER",
		308:  "THEME_SON",
		309:  "THEME_STEPPARENT",
		310:  "THEME_UNCLE",
		311:  "THEME_WIFE",
		312:  "THEME_ADORATION",
		313:  "THEME_ADVICE",
		314:  "THEME_ALL",
		315:  "THEME_ALWAYS",
		316:  "THEME_AMBITION",
		317:  "THEME_ANYTHING",
		318:  "THEME_ASSURANCE",
		319:  "THEME_BEGINNING",
		320:  "THEME_BELIEVE",
		321:  "THEME_BEST",
		322:  "THEME_CALMNESS",
		323:  "THEME_CAREFREE",
		324:  "THEME_CHOICES",
		325:  "THEME_COMFORT",
		326:  "THEME_COMPASSION",
		327:  "THEME_COMPLIMENTS",
		328:  "THEME_CONFIDENCE",
		329:  "THEME_CONNECTION",
		330:  "THEME_CONSISTENT",
		331:  "THEME_COOL",
		332:  "THEME_COURAGE",
		333:  "THEME_CRAVE",
		334:  "THEME_DESIRE",
		335:  "THEME_DETERMINATION",
		336:  "THEME_ECSTATIC",
		337:  "THEME_EMPOWERED",
		338:  "THEME_EQUALITY",
		339:  "THEME_EXCELLENCE",
		340:  "THEME_EXCITED",
		341:  "THEME_EXPLORE",
		342:  "THEME_FANTASY",
		343:  "THEME_FAVORITE",
		344:  "THEME_FEEL",
		345:  "THEME_FEELINGS",
		346:  "THEME_FORGIVE",
		347:  "THEME_FOUND",
		348:  "THEME_FUN",
		349:  "THEME_GENTLE",
		350:  "THEME_GETTINGOVER",
		351:  "THEME_GIVE",
		352:  "THEME_GOOD",
		353:  "THEME_GRATITUDE",
		354:  "THEME_HAPPINESS",
		355:  "THEME_HELLO",
		356:  "THEME_HELP",
		357:  "THEME_HEROISM",
		358:  "THEME_HIGHEST",
		359:  "THEME_HONESTY",
		360:  "THEME_HOPE",
		361:  "THEME_INDEPENDENCE",
		362:  "THEME_INDIVIDUALITY",
		363:  "THEME_INNOCENCE",
		364:  "THEME_INSPIRATION",
		365:  "THEME_INTEGRITY",
		366:  "THEME_INTENTION",
		367:  "THEME_LAUGHTER",
		368:  "THEME_LEADER",
		369:  "THEME_LIVING",
		370:  "THEME_LOYALTY",
		371:  "THEME_LUCKY",
		372:  "THEME_MORALITY",
		373:  "THEME_MOTIVATION",
		374:  "THEME_NOSTALGIA",
		375:  "THEME_OPPORTUNITY",
		376:  "THEME_OPTIMISM",
		377:  "THEME_PATIENCE",
		378:  "THEME_PEACE",
		379:  "THEME_PERFECTION",
		380:  "THEME_PERSEVERE",
		381:  "THEME_PLEASE",
		382:  "THEME_POSSIBILITY",
		383:  "THEME_PRIDE",
		384:  "THEME_PROMISE",
		385:  "THEME_PROTECT",
		386:  "THEME_QUALITY",
		387:  "THEME_REAL",
		388:  "THEME_RECOVERY",
		389:  "THEME_RESCUE",
		390:  "THEME_RESILIENT",
		391:  "THEME_RESPECT",
		392:  "THEME_REUNITE",
		393:  "THEME_RIGHT",
		394:  "THEME_SATISFACTION",
		395:  "THEME_SAVE",
		396:  "THEME_SHELTER",
		397:  "THEME_SIMPLE",
		398:  "THEME_SMART",
		399:  "THEME_SMILE",
		400:  "THEME_SPACEDOUT",
		401:  "THEME_SPECIAL",
		402:  "THEME_STICK",
		403:  "THEME_STRONG",
		404:  "THEME_SUCCESS",
		405:  "THEME_SUPERIORITY",
		406:  "THEME_SUPPORT",
		407:  "THEME_SURVIVE",
		408:  "THEME_SWAGGER",
		409:  "THEME_SWEET",
		410:  "THEME_SYMPATHY",
		411:  "THEME_TRUST",
		412:  "THEME_TRUTH",
		413:  "THEME_TRY",
		414:  "THEME_UNBELIEVABLE",
		415:  "THEME_UNDERSTANDING",
		416:  "THEME_UNIQUE",
		417:  "THEME_UNITY",
		418:  "THEME_WELCOME",
		419:  "THEME_WISH",
		420:  "THEME_WONDERFUL",
		421:  "THEME_ATTRACTIVE",
		422:  "THEME_BATTLEOFTHESEXES",
		423:  "THEME_BEAUTIFUL",
		424:  "THEME_BEAUTY",
		425:  "THEME_BOYS",
		426:  "THEME_GENDER",
		427:  "THEME_GIRLS",
		428:  "THEME_HANDSOME",
		429:  "THEME_LOVELY",
		430:  "THEME_MEN",
		431:  "THEME_MENSNAMES",
		432:  "THEME_PRETTY",
		433:  "THEME_UGLY",
		434:  "THEME_WOMEN",
		435:  "THEME_WOMENSNAMES",
		436:  "THEME_GESTURES",
		437:  "THEME_DISEASE",
		438:  "THEME_DOCTOR",
		439:  "THEME_FEVER",
		440:  "THEME_HEALING",
		441:  "THEME_HEALTHANDWELLNESS",
		442:  "THEME_HOSPITAL",
		443:  "THEME_MEDICAL",
		444:  "THEME_MENTALILLNESS",
		445:  "THEME_PHARMACEUTICAL",
		446:  "THEME_PHYSICALPAIN",
		447:  "THEME_REHAB",
		448:  "THEME_CHRISTMAS",
		449:  "THEME_HALLOWEEN",
		450:  "THEME_HOLIDAY",
		451:  "THEME_MARDIGRAS",
		452:  "THEME_NEWYEAR",
		453:  "THEME_VACATION",
		454:  "THEME_ADDICTEDTO",
		455:  "THEME_AFFECTION",
		456:  "THEME_ANNIVERSARY",
		457:  "THEME_ATFIRSTSIGHT",
		458:  "THEME_BACKTOGETHER",
		459:  "THEME_BEINGIN",
		460:  "THEME_BREAKUP",
		461:  "THEME_CANTGETOVER",
		462:  "THEME_CANTRESIST",
		463:  "THEME_CHOOSE",
		464:  "THEME_COMMITMENT",
		465:  "THEME_COUPLE",
		466:  "THEME_CRUSH",
		467:  "THEME_DATING",
		468:  "THEME_DESPERATE",
		469:  "THEME_DISCOVERY",
		470:  "THEME_DIVORCE",
		471:  "THEME_DONTGO",
		472:  "THEME_DONTLEAVEME",
		473:  "THEME_ENGAGEMENT",
		474:  "THEME_FALLINGIN",
		475:  "THEME_FAREWELL",
		476:  "THEME_FLIRT",
		477:  "THEME_FORBIDDEN",
		478:  "THEME_FREE",
		479:  "THEME_FRIENDSHIP",
		480:  "THEME_GETLOST",
		481:  "THEME_HEARTACHE",
		482:  "THEME_HOLDINGON",
		483:  "THEME_HONEYMOON",
		484:  "THEME_IDEAL",
		485:  "THEME_INTROUBLE",
		486:  "THEME_INFATUATED",
		487:  "THEME_KISS",
		488:  "THEME_LASTING",
		489:  "THEME_LIES",
		490:  "THEME_LONELY",
		491:  "THEME_LONGING",
		492:  "THEME_LOSINGYOU",
		493:  "THEME_LOSTTHATLOVINGFEELING",
		494:  "THEME_LOVE",
		495:  "THEME_MARRIEDLIFE",
		496:  "THEME_MENTALKINGTOMEN",
		497:  "THEME_MENTALKINGTOWOMEN",
		498:  "THEME_MISSINGYOU",
		499:  "THEME_MOVINGON",
		500:  "THEME_NEED",
		501:  "THEME_NONROMANTIC",
		502:  "THEME_NOTCOMMITTED",
		503:  "THEME_NOTMYTYPE",
		504:  "THEME_OBSESSION",
		505:  "THEME_ONENIGHTSTAND",
		506:  "THEME_PLATONIC",
		507:  "THEME_PLAYER",
		508:  "THEME_POSSESSED",
		509:  "THEME_REJECTION",
		510:  "THEME_RISK",
		511:  "THEME_ROMANCE",
		512:  "THEME_ROMANTIC",
		513:  "THEME_SEARCHINGFOR",
		514:  "THEME_SEDUCED",
		515:  "THEME_SHOULDHAVESAID",
		516:  "THEME_SINGLEPERSON",
		517:  "THEME_TAKEMEBACK",
		518:  "THEME_TOGETHERNESS",
		519:  "THEME_UNFAIR",
		520:  "THEME_UNFAITHFUL",
		521:  "THEME_UNREQUITED",
		522:  "THEME_USAGAINSTTHEWORLD",
		523:  "THEME_VALENTINE",
		524:  "THEME_WESHOULDBETOGETHER",
		525:  "THEME_WEDDING",
		526:  "THEME_WOMENTALKINGTOMEN",
		527:  "THEME_WOMENTALKINGTOWOMEN",
		528:  "THEME_YOUNG",
		529:  "THEME_ABOVE",
		530:  "THEME_BEHIND",
		531:  "THEME_BELOW",
		532:  "THEME_BIG",
		533:  "THEME_CLOSE",
		534:  "THEME_DEEP",
		535:  "THEME_DIRECTION",
		536:  "THEME_DISTANCE",
		537:  "THEME_DOWN",
		538:  "THEME_EAST",
		539:  "THEME_FAR",
		540:  "THEME_FAT",
		541:  "THEME_HIGH",
		542:  "THEME_HUNDRED",
		543:  "THEME_INFRONT",
		544:  "THEME_INCH",
		545:  "THEME_LEFT",
		546:  "THEME_LOW",
		547:  "THEME_MEASUREMENT",
		548:  "THEME_MILE",
		549:  "THEME_MILLION",
		550:  "THEME_NEAR",
		551:  "THEME_NORTH",
		552:  "THEME_NUMBER",
		553:  "THEME_SIZE",
		554:  "THEME_SMALL",
		555:  "THEME_SOUTH",
		556:  "THEME_TALL",
		557:  "THEME_THIN",
		558:  "THEME_THOUSAND",
		559:  "THEME_UP",
		560:  "THEME_WEST",
		561:  "THEME_ACTION",
		562:  "THEME_AIRPLANES",
		563:  "THEME_BASEBALL",
		564:  "THEME_BASKETBALL",
		565:  "THEME_BICYCLES",
		566:  "THEME_BOUNCE",
		567:  "THEME_BOXING",
		568:  "THEME_BREATHE",
		569:  "THEME_BUILD",
		570:  "THEME_BUS",
		571:  "THEME_BUSY",
		572:  "THEME_CARRACING",
		573:  "THEME_CARS",
		574:  "THEME_CHASE",
		575:  "THEME_CLEAN",
		576:  "THEME_CLIMB",
		577:  "THEME_CRASH",
		578:  "THEME_CREATE",
		579:  "THEME_CRY",
		580:  "THEME_DANCE",
		581:  "THEME_DRIFT",
		582:  "THEME_DRINK",
		583:  "THEME_DRIVE",
		584:  "THEME_ESCAPE",
		585:  "THEME_EXERCISE",
		586:  "THEME_FALL",
		587:  "THEME_FAST",
		588:  "THEME_FIND",
		589:  "THEME_FISHING",
		590:  "THEME_FIX",
		591:  "THEME_FLY",
		592:  "THEME_FOLLOW",
		593:  "THEME_FOOTBALL",
		594:  "THEME_GO",
		595:  "THEME_GOLF",
		596:  "THEME_HORSERACING",
		597:  "THEME_JUMP",
		598:  "THEME_LEARN",
		599:  "THEME_LEAVE",
		600:  "THEME_LOOK",
		601:  "THEME_MINE",
		602:  "THEME_MOTION",
		603:  "THEME_MOTORCYCLES",
		604:  "THEME_MOVE",
		605:  "THEME_OLYMPICS",
		606:  "THEME_PLAYMUSIC",
		607:  "THEME_READY",
		608:  "THEME_REFLECT",
		609:  "THEME_RELAX",
		610:  "THEME_REPEAT",
		611:  "THEME_RETURN",
		612:  "THEME_REVOLVE",
		613:  "THEME_RIDE",
		614:  "THEME_ROCK",
		615:  "THEME_RUN",
		616:  "THEME_SAIL",
		617:  "THEME_SEARCH",
		618:  "THEME_SHAKE",
		619:  "THEME_SHINE",
		620:  "THEME_SHOOT",
		621:  "THEME_SING",
		622:  "THEME_SIT",
		623:  "THEME_SKATE",
		624:  "THEME_SKATEBOARD",
		625:  "THEME_SKI",
		626:  "THEME_SLOW",
		627:  "THEME_SPEED",
		628:  "THEME_SPORT",
		629:  "THEME_STAND",
		630:  "THEME_START",
		631:  "THEME_STEAL",
		632:  "THEME_SURF",
		633:  "THEME_SWIM",
		634:  "THEME_TAXI",
		635:  "THEME_TEACH",
		636:  "THEME_TRAINS",
		637:  "THEME_TRANSPORTATION",
		638:  "THEME_TRAVEL",
		639:  "THEME_TRUCKS",
		640:  "THEME_TURN",
		641:  "THEME_WAIT",
		642:  "THEME_WALK",
		643:  "THEME_WILD",
		644:  "THEME_WORK",
		645:  "THEME_WRITE",
		646:  "THEME_NONE",
		647:  "THEME_AMMUNITION",
		648:  "THEME_ART",
		649:  "THEME_BASS",
		650:  "THEME_BEATS",
		651:  "THEME_BELLS",
		652:  "THEME_BEVERAGE",
		653:  "THEME_BOOK",
		654:  "THEME_BRASS",
		655:  "THEME_CAMERA",
		656:  "THEME_CANDLE",
		657:  "THEME_CANDY",
		658:  "THEME_CARDGAME",
		659:  "THEME_CLOTHING",
		660:  "THEME_COMPUTER",
		661:  "THEME_CONTAINER",
		662:  "THEME_COSMETIC",
		663:  "THEME_DRUMS",
		664:  "THEME_EDUCATION",
		665:  "THEME_FABRIC",
		666:  "THEME_FAME",
		667:  "THEME_FASHION",
		668:  "THEME_FLOWER",
		669:  "THEME_FOOD",
		670:  "THEME_FRUITS",
		671:  "THEME_FURNITURE",
		672:  "THEME_GAMBLING",
		673:  "THEME_GAME",
		674:  "THEME_GARBAGE",
		675:  "THEME_GASOLINE",
		676:  "THEME_GOLD",
		677:  "THEME_GUITAR",
		678:  "THEME_GUN",
		679:  "THEME_HAT",
		680:  "THEME_HOLE",
		681:  "THEME_HORN",
		682:  "THEME_JEWELRY",
		683:  "THEME_JUKEBOX",
		684:  "THEME_KEYS",
		685:  "THEME_LIGHT",
		686:  "THEME_LOCK",
		687:  "THEME_MAIL",
		688:  "THEME_MISPLACE",
		689:  "THEME_MONEY",
		690:  "THEME_MOVIE",
		691:  "THEME_MUSIC",
		692:  "THEME_MUSICBUSINESS",
		693:  "THEME_MUSICALINSTRUMENT",
		694:  "THEME_NEWS",
		695:  "THEME_OBJECTS",
		696:  "THEME_PAPER",
		697:  "THEME_PERCUSSION",
		698:  "THEME_PHOTOGRAPH",
		699:  "THEME_PIANO",
		700:  "THEME_PRODUCTANDBRAND",
		701:  "THEME_RADIO",
		702:  "THEME_RHYTHM",
		703:  "THEME_ROADACCIDENT",
		704:  "THEME_ROBOT",
		705:  "THEME_SHIP",
		706:  "THEME_SHOE",
		707:  "THEME_SHOPPING",
		708:  "THEME_SHOWBIZ",
		709:  "THEME_SILVER",
		710:  "THEME_STRING",
		711:  "THEME_STRINGANDROPE",
		712:  "THEME_SYNTHESIZER",
		713:  "THEME_TATTOO",
		714:  "THEME_TECHNOLOGY",
		715:  "THEME_TELEVISION",
		716:  "THEME_TOOLS",
		717:  "THEME_TOY",
		718:  "THEME_TREE",
		719:  "THEME_TRUMPET",
		720:  "THEME_UFO",
		721:  "THEME_VEGETABLE",
		722:  "THEME_VIDEOGAME",
		723:  "THEME_VOICE",
		724:  "THEME_WEAPON",
		725:  "THEME_WHISTLE",
		726:  "THEME_WINDCHIMES",
		727:  "THEME_WOODWIND",
		728:  "THEME_ACTOR",
		729:  "THEME_ALIEN",
		730:  "THEME_ASTRONAUT",
		731:  "THEME_BALLERINA",
		732:  "THEME_BLONDE",
		733:  "THEME_BOSS",
		734:  "THEME_BRUNETTE",
		735:  "THEME_CELEBRITY",
		736:  "THEME_CHEERLEADER",
		737:  "THEME_COMIC",
		738:  "THEME_COWBOYANDCOWGIRL",
		739:  "THEME_ELVIS",
		740:  "THEME_GEEK",
		741:  "THEME_GHOST",
		742:  "THEME_GYPSY",
		743:  "THEME_HERO",
		744:  "THEME_HILLBILLY",
		745:  "THEME_HIPPIE",
		746:  "THEME_IDENTITY",
		747:  "THEME_MAGICIAN",
		748:  "THEME_ME",
		749:  "THEME_MONSTER",
		750:  "THEME_OUTLAW",
		751:  "THEME_PEOPLE",
		752:  "THEME_PIRATE",
		753:  "THEME_REDHEAD",
		754:  "THEME_ROYALTY",
		755:  "THEME_SANTACLAUS",
		756:  "THEME_SNOWMAN",
		757:  "THEME_SOCIALOUTCAST",
		758:  "THEME_STALKER",
		759:  "THEME_STORYBOOKCHARACTER",
		760:  "THEME_SUPERHERO",
		761:  "THEME_THEM",
		762:  "THEME_THREEKINGS",
		763:  "THEME_US",
		764:  "THEME_VILLAIN",
		765:  "THEME_WAITER",
		766:  "THEME_WITCH",
		767:  "THEME_YOU",
		768:  "THEME_YOUTH",
		769:  "THEME_AFGHANISTAN",
		770:  "THEME_AFRICA",
		771:  "THEME_ALABAMA",
		772:  "THEME_ALASKA",
		773:  "THEME_ALBANIA",
		774:  "THEME_ALGERIA",
		775:  "THEME_AMSTERDAM",
		776:  "THEME_ANDORRA",
		777:  "THEME_ANGOLA",
		778:  "THEME_ANTIGUAANDBARBUDA",
		779:  "THEME_ARGENTINA",
		780:  "THEME_ARIZONA",
		781:  "THEME_ARKANSAS",
		782:  "THEME_ARMENIA",
		783:  "THEME_ASIA",
		784:  "THEME_ATLANTA",
		785:  "THEME_AUSTRALIA",
		786:  "THEME_AUSTRIA",
		787:  "THEME_AZERBAIJAN",
		788:  "THEME_BAHAMAS",
		789:  "THEME_BAHRAIN",
		790:  "THEME_BALI",
		791:  "THEME_BALKANS",
		792:  "THEME_BALTICSTATES",
		793:  "THEME_BALTIMORE",
		794:  "THEME_BANGLADESH",
		795:  "THEME_BARBADOS",
		796:  "THEME_BARS",
		797:  "THEME_BATHROOM",
		798:  "THEME_BEDROOM",
		799:  "THEME_BELARUS",
		800:  "THEME_BELGIUM",
		801:  "THEME_BELIZE",
		802:  "THEME_BENELUX",
		803:  "THEME_BENIN",
		804:  "THEME_BERLIN",
		805:  "THEME_BERMUDA",
		806:  "THEME_BHUTAN",
		807:  "THEME_BIRMINGHAM",
		808:  "THEME_BOARDWALK",
		809:  "THEME_BOLIVIA",
		810:  "THEME_BOSNIAANDHERZEGOVINA",
		811:  "THEME_BOSTON",
		812:  "THEME_BOTSWANA",
		813:  "THEME_BRAZIL",
		814:  "THEME_BRIDGE",
		815:  "THEME_BRITAIN",
		816:  "THEME_BRITISHISLES",
		817:  "THEME_BRUNEI",
		818:  "THEME_BUILDING",
		819:  "THEME_BULGARIA",
		820:  "THEME_BURKINAFASO",
		821:  "THEME_BURUNDI",
		822:  "THEME_CALIFORNIA",
		823:  "THEME_CAMBODIA",
		824:  "THEME_CAMEROON",
		825:  "THEME_CANADA",
		826:  "THEME_CAPEVERDE",
		827:  "THEME_CAROLINAS",
		828:  "THEME_CASINO",
		829:  "THEME_CEMETARY",
		830:  "THEME_CENTRALAFRICANREPUBLIC",
		831:  "THEME_CENTRALAMERICA",
		832:  "THEME_CHAD",
		833:  "THEME_CHICAGO",
		834:  "THEME_CHILE",
		835:  "THEME_CHINA",
		836:  "THEME_CINCINNATI",
		837:  "THEME_CITY",
		838:  "THEME_CITYLIFE",
		839:  "THEME_CLUB",
		840:  "THEME_COLOMBIA",
		841:  "THEME_COLORADO",
		842:  "THEME_COMOROS",
		843:  "THEME_CONNECTICUT",
		844:  "THEME_CONTINENT",
		845:  "THEME_COOKISLANDS",
		846:  "THEME_COSTARICA",
		847:  "THEME_COUNTRY",
		848:  "THEME_COUNTRYLIFE",
		849:  "THEME_CROATIA",
		850:  "THEME_CUBA",
		851:  "THEME_CYPRUS",
		852:  "THEME_CZECHREPUBLIC",
		853:  "THEME_CZECHOSLOVAKIA",
		854:  "THEME_DALLAS",
		855:  "THEME_DELAWARE",
		856:  "THEME_DEMOCRATICREPUBLICOFTHECONGO",
		857:  "THEME_DENMARK",
		858:  "THEME_DENVER",
		859:  "THEME_DETROIT",
		860:  "THEME_DJIBOUTI",
		861:  "THEME_DOMINICA",
		862:  "THEME_DOMINICANREPUBLIC",
		863:  "THEME_DOOR",
		864:  "THEME_DUBLIN",
		865:  "THEME_EASTERNEUROPE",
		866:  "THEME_ECUADOR",
		867:  "THEME_EGYPT",
		868:  "THEME_ELSALVADOR",
		869:  "THEME_ENGLAND",
		870:  "THEME_EQUATORIALGUINEA",
		871:  "THEME_ERITREA",
		872:  "THEME_ESTONIA",
		873:  "THEME_ESWATINI",
		874:  "THEME_ETHIOPIA",
		875:  "THEME_EUROPE",
		876:  "THEME_EUROPEANCONTINENT",
		877:  "THEME_EUROPEANECONOMICAREA",
		878:  "THEME_EUROPEANECONOMICCOMMUNITY",
		879:  "THEME_EUROPEANUNION",
		880:  "THEME_FARM",
		881:  "THEME_FIJI",
		882:  "THEME_FINLAND",
		883:  "THEME_FLOORANDCEILING",
		884:  "THEME_FLORIDA",
		885:  "THEME_FRANCE",
		886:  "THEME_FRENCHCARIBBEAN",
		887:  "THEME_FRENCHGUIANA",
		888:  "THEME_FRENCHPOLYNESIA",
		889:  "THEME_GABON",
		890:  "THEME_GAMBIA",
		891:  "THEME_GANGSTALIFE",
		892:  "THEME_GARDEN",
		893:  "THEME_GASSTATION",
		894:  "THEME_GEOGRAPHICLOCATION",
		895:  "THEME_GEORGIA",
		896:  "THEME_GERMANY",
		897:  "THEME_GHANA",
		898:  "THEME_GOODLIFE",
		899:  "THEME_GREATBRITAIN",
		900:  "THEME_GREECE",
		901:  "THEME_GRENADA",
		902:  "THEME_GUATEMALA",
		903:  "THEME_GUINEA",
		904:  "THEME_GUINEA_BISSAU",
		905:  "THEME_GUYANA",
		906:  "THEME_HAITI",
		907:  "THEME_HAVANA",
		908:  "THEME_HAWAII",
		909:  "THEME_HIGHWAY",
		910:  "THEME_HOLLAND",
		911:  "THEME_HOLLYWOOD",
		912:  "THEME_HOME",
		913:  "THEME_HONDURAS",
		914:  "THEME_HONGKONG",
		915:  "THEME_HOTEL",
		916:  "THEME_HOUSE",
		917:  "THEME_HOUSTON",
		918:  "THEME_HUNGARY",
		919:  "THEME_ICELAND",
		920:  "THEME_IDAHO",
		921:  "THEME_ILLINOIS",
		922:  "THEME_INDIA",
		923:  "THEME_INDIANA",
		924:  "THEME_INDONESIA",
		925:  "THEME_IOWA",
		926:  "THEME_IRAN",
		927:  "THEME_IRAQ",
		928:  "THEME_IRELAND",
		929:  "THEME_ISLEOFMAN",
		930:  "THEME_ISRAEL",
		931:  "THEME_ITALY",
		932:  "THEME_IVORYCOAST",
		933:  "THEME_JAMAICA",
		934:  "THEME_JAPAN",
		935:  "THEME_JAVA",
		936:  "THEME_JORDAN",
		937:  "THEME_KANSAS",
		938:  "THEME_KANSASCITY",
		939:  "THEME_KAZAKHSTAN",
		940:  "THEME_KENTUCKY",
		941:  "THEME_KENYA",
		942:  "THEME_KIRIBATI",
		943:  "THEME_KUWAIT",
		944:  "THEME_KYRGYZSTAN",
		945:  "THEME_LAOS",
		946:  "THEME_LASVEGAS",
		947:  "THEME_LATVIA",
		948:  "THEME_LEBANON",
		949:  "THEME_LESOTHO",
		950:  "THEME_LIBERIA",
		951:  "THEME_LIBYA",
		952:  "THEME_LIECHTENSTEIN",
		953:  "THEME_LIGHTHOUSE",
		954:  "THEME_LITHUANIA",
		955:  "THEME_LOCATION",
		956:  "THEME_LONDON",
		957:  "THEME_LOSANGELES",
		958:  "THEME_LOUISIANA",
		959:  "THEME_LUXEMBOURG",
		960:  "THEME_MACAO",
		961:  "THEME_MADAGASCAR",
		962:  "THEME_MAINE",
		963:  "THEME_MALAWI",
		964:  "THEME_MALAYSIA",
		965:  "THEME_MALDIVES",
		966:  "THEME_MALI",
		967:  "THEME_MALTA",
		968:  "THEME_MARSHALLISLANDS",
		969:  "THEME_MARYLAND",
		970:  "THEME_MASSACHUSETTS",
		971:  "THEME_MAURITANIA",
		972:  "THEME_MAURITIUS",
		973:  "THEME_MEDELLN",
		974:  "THEME_MEMPHIS",
		975:  "THEME_MEXICO",
		976:  "THEME_MIAMI",
		977:  "THEME_MICHIGAN",
		978:  "THEME_MICRONESIA",
		979:  "THEME_MIDDLEEAST",
		980:  "THEME_MINNESOTA",
		981:  "THEME_MISSISSIPPI",
		982:  "THEME_MISSOURI",
		983:  "THEME_MOBILE",
		984:  "THEME_MOLDOVA",
		985:  "THEME_MONACO",
		986:  "THEME_MONGOLIA",
		987:  "THEME_MONTANA",
		988:  "THEME_MONTENEGRO",
		989:  "THEME_MOROCCO",
		990:  "THEME_MOSCOW",
		991:  "THEME_MOZAMBIQUE",
		992:  "THEME_MYANMAR",
		993:  "THEME_NAMIBIA",
		994:  "THEME_NASHVILLE",
		995:  "THEME_NAURU",
		996:  "THEME_NEBRASKA",
		997:  "THEME_NEPAL",
		998:  "THEME_NETHERLANDS",
		999:  "THEME_NEVADA",
		1000: "THEME_NEWHAMPSHIRE",
		1001: "THEME_NEWJERSEY",
		1002: "THEME_NEWMEXICO",
		1003: "THEME_NEWORLEANS",
		1004: "THEME_NEWYORKCITY",
		1005: "THEME_NEWYORK",
		1006: "THEME_NEWZEALAND",
		1007: "THEME_NICARAGUA",
		1008: "THEME_NIGER",
		1009: "THEME_NIGERIA",
		1010: "THEME_NORTHAMERICA",
		1011: "THEME_NORTHDAKOTA",
		1012: "THEME_NORTHKOREA",
		1013: "THEME_NORTHMACEDONIA",
		1014: "THEME_NORWAY",
		1015: "THEME_OCEANIA",
		1016: "THEME_OHIO",
		1017: "THEME_OKLAHOMA",
		1018: "THEME_OMAN",
		1019: "THEME_OREGON",
		1020: "THEME_OUTDOOR",
		1021: "THEME_PACIFICISLANDS",
		1022: "THEME_PAD",
		1023: "THEME_PAKISTAN",
		1024: "THEME_PALAU",
		1025: "THEME_PANAMA",
		1026: "THEME_PAPUANEWGUINEA",
		1027: "THEME_PARAGUAY",
		1028: "THEME_PARIS",
		1029: "THEME_PARK",
		1030: "THEME_PENNSYLVANIA",
		1031: "THEME_PERU",
		1032: "THEME_PHILADELPHIA",
		1033: "THEME_PHILIPPINES",
		1034: "THEME_PLACE",
		1035: "THEME_POLAND",
		1036: "THEME_POLYNESIA",
		1037: "THEME_PORTUGAL",
		1038: "THEME_PRAIRIE",
		1039: "THEME_PUERTORICO",
		1040: "THEME_QATAR",
		1041: "THEME_RANCH",
		1042: "THEME_REPUBLICOFTHECONGO",
		1043: "THEME_RESTAURANT",
		1044: "THEME_RHODEISLAND",
		1045: "THEME_RIODEJANEIRO",
		1046: "THEME_ROAD",
		1047: "THEME_RODEO",
		1048: "THEME_ROMANIA",
		1049: "THEME_ROME",
		1050: "THEME_RUSSIA",
		1051: "THEME_RWANDA",
		1052: "THEME_SAINTKITTSANDNEVIS",
		1053: "THEME_SAINTLUCIA",
		1054: "THEME_SAINTVINCENTANDTHEGRENADINES",
		1055: "THEME_SALTLAKECITY",
		1056: "THEME_SAMOA",
		1057: "THEME_SANANTONIO",
		1058: "THEME_SANFRANCISCO",
		1059: "THEME_SANMARINO",
		1060: "THEME_SANTAFE",
		1061: "THEME_SAOTOMEANDPRINCIPE",
		1062: "THEME_SAUDIARABIA",
		1063: "THEME_SAVANNAH",
		1064: "THEME_SCANDINAVIA",
		1065: "THEME_SCHOOL",
		1066: "THEME_SCOTLAND",
		1067: "THEME_SENEGAL",
		1068: "THEME_SERBIA",
		1069: "THEME_SEYCHELLES",
		1070: "THEME_SIERRALEONE",
		1071: "THEME_SINGAPORE",
		1072: "THEME_SITUATION",
		1073: "THEME_SLOVAKIA",
		1074: "THEME_SLOVENIA",
		1075: "THEME_SMALLTOWNLIFE",
		1076: "THEME_SOLOMONISLANDS",
		1077: "THEME_SOMALIA",
		1078: "THEME_SOUTHAFRICA",
		1079: "THEME_SOUTHAMERICA",
		1080: "THEME_SOUTHDAKOTA",
		1081: "THEME_SOUTHEASTASIA",
		1082: "THEME_SOUTHKOREA",
		1083: "THEME_SOUTHSUDAN",
		1084: "THEME_SPAIN",
		1085: "THEME_SRILANKA",
		1086: "THEME_ST_LOUIS",
		1087: "THEME_POLITICALSTATE",
		1088: "THEME_STREET",
		1089: "THEME_SUDAN",
		1090: "THEME_SURINAME",
		1091: "THEME_SWEDEN",
		1092: "THEME_SWITZERLAND",
		1093: "THEME_SYRIA",
		1094: "THEME_TAIWAN",
		1095: "THEME_TAJIKISTAN",
		1096: "THEME_TANZANIA",
		1097: "THEME_TENNESSEE",
		1098: "THEME_TEXAS",
		1099: "THEME_THAILAND",
		1100: "THEME_THEATRE",
		1101: "THEME_TIBET",
		1102: "THEME_TIMOR_LESTE",
		1103: "THEME_TOGO",
		1104: "THEME_TOKYO",
		1105: "THEME_TONGA",
		1106: "THEME_TRAIL",
		1107: "THEME_TRINIDADANDTOBAGO",
		1108: "THEME_TULSA",
		1109: "THEME_TUNISIA",
		1110: "THEME_TURKEY",
		1111: "THEME_TURKMENISTAN",
		1112: "THEME_TUVALU",
		1113: "THEME_UGANDA",
		1114: "THEME_UKRAINE",
		1115: "THEME_UNITEDARABEMIRATES",
		1116: "THEME_UNITEDKINGDOM",
		1117: "THEME_UNITEDSTATES",
		1118: "THEME_URUGUAY",
		1119: "THEME_UTAH",
		1120: "THEME_UZBEKISTAN",
		1121: "THEME_VANUATU",
		1122: "THEME_VATICAN",
		1123: "THEME_VENEZUELA",
		1124: "THEME_VERMONT",
		1125: "THEME_VIENNA",
		1126: "THEME_VIETNAM",
		1127: "THEME_VIRGINIA",
		1128: "THEME_WALES",
		1129: "THEME_WALL",
		1130: "THEME_WASHINGTON",
		1131: "THEME_WESTINDIES",
		1132: "THEME_WESTVIRGINIA",
		1133: "THEME_WESTERNSAHARA",
		1134: "THEME_WINDOW",
		1135: "THEME_WISCONSIN",
		1136: "THEME_WORLD",
		1137: "THEME_WYOMING",
		1138: "THEME_YEMEN",
		1139: "THEME_YUGOSLAVIA",
		1140: "THEME_ZAMBIA",
		1141: "THEME_ZIMBABWE",
		1142: "THEME_ZOO",
		1143: "THEME_CAPITALPUNISHMENT",
		1144: "THEME_CIVILRIGHTS",
		1145: "THEME_CRIME",
		1146: "THEME_DRAFTRESISTANCE",
		1147: "THEME_ENLISTMENT",
		1148: "THEME_ENVIRONMENT",
		1149: "THEME_ESPIONAGE",
		1150: "THEME_FASCISM",
		1151: "THEME_FEMINISM",
		1152: "THEME_FREEDOM",
		1153: "THEME_GOVERNMENT",
		1154: "THEME_JUSTICE",
		1155: "THEME_LAWANDORDER",
		1156: "THEME_LAWENFORCEMENT",
		1157: "THEME_MILITARY",
		1158: "THEME_NUCLEARENERGY",
		1159: "THEME_NUCLEARWAR",
		1160: "THEME_OPPRESSION",
		1161: "THEME_PATRIOTISM",
		1162: "THEME_POLITICAL",
		1163: "THEME_POLITICS",
		1164: "THEME_POVERTY",
		1165: "THEME_POWERANDCONTROL",
		1166: "THEME_PREJUDICE",
		1167: "THEME_PRESIDENT",
		1168: "THEME_PRISON",
		1169: "THEME_PROTEST",
		1170: "THEME_RACISM",
		1171: "THEME_REVOLUTION",
		1172: "THEME_SEGREGATION",
		1173: "THEME_SLAVERY",
		1174: "THEME_SUFFRAGE",
		1175: "THEME_UNION",
		1176: "THEME_WAR",
		1177: "THEME_WORKINGCLASS",
		1178: "THEME_MAKINGLOVE",
		1179: "THEME_SENSUALITY",
		1180: "THEME_ANGEL",
		1181: "THEME_ARMAGEDDON",
		1182: "THEME_ASTROLOGY",
		1183: "THEME_BELIEF",
		1184: "THEME_BLESS",
		1185: "THEME_BUDDHA",
		1186: "THEME_CHURCH",
		1187: "THEME_CRUCIFIXION",
		1188: "THEME_DARKNESS",
		1189: "THEME_DEATH",
		1190: "THEME_DEVIL",
		1191: "THEME_DREAM",
		1192: "THEME_ENLIGHTENMENT",
		1193: "THEME_EVIL",
		1194: "THEME_FAITH",
		1195: "THEME_FAITHINDOUBT",
		1196: "THEME_FATE",
		1197: "THEME_FORTUNETELLER",
		1198: "THEME_GOD",
		1199: "THEME_HEAVEN",
		1200: "THEME_HELL",
		1201: "THEME_IDEA",
		1202: "THEME_IMMORTALITY",
		1203: "THEME_JESUSCHRIST",
		1204: "THEME_KARMA",
		1205: "THEME_MAGIC",
		1206: "THEME_MERCY",
		1207: "THEME_MIRACLE",
		1208: "THEME_MYSTERY",
		1209: "THEME_NIGHTMARE",
		1210: "THEME_PRAYER",
		1211: "THEME_PROPHECY",
		1212: "THEME_REDEMPTION",
		1213: "THEME_RELIGION",
		1214: "THEME_SIGNS",
		1215: "THEME_SIN",
		1216: "THEME_SPIRIT",
		1217: "THEME_SUPERNATURAL",
		1218: "THEME_TAROT",
		1219: "THEME_UTOPIA",
		1220: "THEME_VOODOO",
		1221: "THEME_WIZARDRY",
		1222: "THEME_ZODIAC",
		1223: "THEME_ADDICTION",
		1224: "THEME_ALCOHOL",
		1225: "THEME_ANTIDRUG",
		1226: "THEME_DRUG",
		1227: "THEME_INTOXICATED",
		1228: "THEME_SOBER",
		1229: "THEME_SUBSTANCES",
		1230: "THEME_TOBACCO",
		1231: "THEME_ADOLESCENCE",
		1232: "THEME_AFTERNOON",
		1233: "THEME_APRIL",
		1234: "THEME_AUGUST",
		1235: "THEME_DATE",
		1236: "THEME_DAWN",
		1237: "THEME_DAY",
		1238: "THEME_DAYTIME",
		1239: "THEME_DECEMBER",
		1240: "THEME_ETERNITY",
		1241: "THEME_EVERYDAY",
		1242: "THEME_AUTUMN",
		1243: "THEME_FEBRUARY",
		1244: "THEME_FRIDAY",
		1245: "THEME_FUTURE",
		1246: "THEME_GENERAL",
		1247: "THEME_GOODNIGHT",
		1248: "THEME_GROWOLDER",
		1249: "THEME_GROWUP",
		1250: "THEME_HISTORY",
		1251: "THEME_HUMAN",
		1252: "THEME_JANUARY",
		1253: "THEME_JULY",
		1254: "THEME_JUNE",
		1255: "THEME_LASTNIGHT",
		1256: "THEME_LATE",
		1257: "THEME_MARCH",
		1258: "THEME_MAY",
		1259: "THEME_MIDNIGHT",
		1260: "THEME_MONDAY",
		1261: "THEME_MONTH",
		1262: "THEME_MORNING",
		1263: "THEME_NEW",
		1264: "THEME_NEWDAY",
		1265: "THEME_NIGHT",
		1266: "THEME_NOON",
		1267: "THEME_NOVEMBER",
		1268: "THEME_NOW",
		1269: "THEME_OCTOBER",
		1270: "THEME_OLD",
		1271: "THEME_PAST",
		1272: "THEME_PRESENT",
		1273: "THEME_SATURDAY",
		1274: "THEME_SEASON",
		1275: "THEME_SEPTEMBER",
		1276: "THEME_SPECIFICAGE",
		1277: "THEME_SPECIFICTIME",
		1278: "THEME_SPRING",
		1279: "THEME_SUMMER",
		1280: "THEME_SUNDAY",
		1281: "THEME_SUNRISE",
		1282: "THEME_THURSDAY",
		1283: "THEME_TIME",
		1284: "THEME_TIMEOFDAY",
		1285: "THEME_TODAY",
		1286: "THEME_TOMORROW",
		1287: "THEME_TONIGHT",
		1288: "THEME_TRADITION",
		1289: "THEME_TUESDAY",
		1290: "THEME_WEDNESDAY",
		1291: "THEME_WEEK",
		1292: "THEME_WEEKEND",
		1293: "THEME_WINTER",
		1294: "THEME_YESTERDAY",
		1295: "THEME_DOMESTICVIOLENCE",
		1296: "THEME_FIGHT",
		1297: "THEME_GENOCIDE",
		1298: "THEME_MURDER",
		1299: "THEME_VIOLENCE",
		1300: "THEME_USERDEFINED",
		1301: "THEME_DINNER",
		1302: "THEME_FOCUS",
		1303: "THEME_FUNERAL",
		1304: "THEME_HANGOUT",
		1305: "THEME_KARAOKE",
		1306: "THEME_MEDITATION",
		1307: "THEME_ROADTRIP",
		1308: "THEME_VICTORY",
		1309: "THEME_WAKING",
		1310: "THEME_WORKOUT",
		1311: "THEME_WORSHIP",
		1312: "THEME_YOGA",
	}
	Theme_value = map[string]int32{
		"THEME_UNSPECIFIED":                  0,
		"THEME_ACTIVITIES":                   1,
		"THEME_COMINGHOME":                   2,
		"THEME_RAPGAME":                      3,
		"THEME_ALLIGATOR":                    4,
		"THEME_ANIMALS":                      5,
		"THEME_BEAR":                         6,
		"THEME_BIRD":                         7,
		"THEME_BUG":                          8,
		"THEME_BUTTERFLY":                    9,
		"THEME_CAT":                          10,
		"THEME_COW":                          11,
		"THEME_CROCODILE":                    12,
		"THEME_DINOSAUR":                     13,
		"THEME_DOG":                          14,
		"THEME_DOLPHIN":                      15,
		"THEME_EAGLE":                        16,
		"THEME_ELEPHANT":                     17,
		"THEME_FISH":                         18,
		"THEME_FOWL":                         19,
		"THEME_FOX":                          20,
		"THEME_FROG":                         21,
		"THEME_HORSE":                        22,
		"THEME_INSECT":                       23,
		"THEME_KANGAROO":                     24,
		"THEME_LION":                         25,
		"THEME_MAMMAL":                       26,
		"THEME_MONKEY":                       27,
		"THEME_MOUSE":                        28,
		"THEME_MULE":                         29,
		"THEME_NIGHTINGALE":                  30,
		"THEME_PIG":                          31,
		"THEME_PONY":                         32,
		"THEME_PORPOISE":                     33,
		"THEME_RABBIT":                       34,
		"THEME_RAT":                          35,
		"THEME_REPTILE":                      36,
		"THEME_SHARK":                        37,
		"THEME_SHEEP":                        38,
		"THEME_SNAKE":                        39,
		"THEME_SPIDER":                       40,
		"THEME_TIGER":                        41,
		"THEME_WHALE":                        42,
		"THEME_WOLF":                         43,
		"THEME_ARMS":                         44,
		"THEME_BACK":                         45,
		"THEME_BELLY":                        46,
		"THEME_BLOOD":                        47,
		"THEME_BODY":                         48,
		"THEME_BODYPARTS":                    49,
		"THEME_BRAIN":                        50,
		"THEME_EARS":                         51,
		"THEME_EYES":                         52,
		"THEME_FACE":                         53,
		"THEME_FEET":                         54,
		"THEME_FINGERS":                      55,
		"THEME_FUR":                          56,
		"THEME_HAIR":                         57,
		"THEME_HANDS":                        58,
		"THEME_HEAD":                         59,
		"THEME_HEART":                        60,
		"THEME_HIPS":                         61,
		"THEME_KNEES":                        62,
		"THEME_LEGS":                         63,
		"THEME_LIPS":                         64,
		"THEME_MOUTH":                        65,
		"THEME_MULTIPLEBODYPARTS":            66,
		"THEME_NECK":                         67,
		"THEME_PAW":                          68,
		"THEME_REAR":                         69,
		"THEME_SHOULDER":                     70,
		"THEME_SKIN":                         71,
		"THEME_TEETH":                        72,
		"THEME_TONGUE":                       73,
		"THEME_BODYLANGUAGE":                 74,
		"THEME_CALLOUT":                      75,
		"THEME_CELLPHONE":                    76,
		"THEME_COMMUNICATION":                77,
		"THEME_CONVERSATION":                 78,
		"THEME_LECTURING":                    79,
		"THEME_LISTENING":                    80,
		"THEME_METHOD":                       81,
		"THEME_PHONE":                        82,
		"THEME_QUESTION":                     83,
		"THEME_SCREAM":                       84,
		"THEME_SHOUTING":                     85,
		"THEME_SILENCE":                      86,
		"THEME_STYLE":                        87,
		"THEME_TALKING":                      88,
		"THEME_TELL":                         89,
		"THEME_TEXTMESSAGE":                  90,
		"THEME_WHISPER":                      91,
		"THEME_WORDS":                        92,
		"THEME_ACCUSE":                       93,
		"THEME_AFRAID":                       94,
		"THEME_ALONE":                        95,
		"THEME_AMBIVALENT":                   96,
		"THEME_ANGER":                        97,
		"THEME_ANGST":                        98,
		"THEME_ANXIOUS":                      99,
		"THEME_APOLOGIZE":                    100,
		"THEME_ATTITUDE":                     101,
		"THEME_BAD":                          102,
		"THEME_BEG":                          103,
		"THEME_BETRAY":                       104,
		"THEME_BLAME":                        105,
		"THEME_BORED":                        106,
		"THEME_BRAG":                         107,
		"THEME_BREAKDOWN":                    108,
		"THEME_BURDEN":                       109,
		"THEME_CHARITY":                      110,
		"THEME_COMPETITIVE":                  111,
		"THEME_COMPLAIN":                     112,
		"THEME_CONFLICT":                     113,
		"THEME_CONFUSED":                     114,
		"THEME_CONTEMPT":                     115,
		"THEME_CRAZY":                        116,
		"THEME_CRITICIZE":                    117,
		"THEME_CRUEL":                        118,
		"THEME_DANGER":                       119,
		"THEME_DEFEAT":                       120,
		"THEME_DEFEATED":                     121,
		"THEME_DESPAIR":                      122,
		"THEME_DIFFICULT":                    123,
		"THEME_DISAPPOINTMENT":               124,
		"THEME_DISSATISFACTION":              125,
		"THEME_DIZZY":                        126,
		"THEME_EGO":                          127,
		"THEME_EMBARRASSED":                  128,
		"THEME_EMERGENCY":                    129,
		"THEME_EMPTY":                        130,
		"THEME_END":                          131,
		"THEME_ENEMY":                        132,
		"THEME_EXCUSE":                       133,
		"THEME_FAILURE":                      134,
		"THEME_FAKE":                         135,
		"THEME_FOOL":                         136,
		"THEME_FORGET":                       137,
		"THEME_FRAGILE":                      138,
		"THEME_GOSSIP":                       139,
		"THEME_GREED":                        140,
		"THEME_GUILT":                        141,
		"THEME_HATE":                         142,
		"THEME_HIDE":                         143,
		"THEME_HORROR":                       144,
		"THEME_IDENTITYCRISIS":               145,
		"THEME_IGNORANCE":                    146,
		"THEME_INSECURE":                     147,
		"THEME_INSULT":                       148,
		"THEME_JEALOUS":                      149,
		"THEME_LAZY":                         150,
		"THEME_LOSS":                         151,
		"THEME_LOST":                         152,
		"THEME_MANIPULATE":                   153,
		"THEME_MEAN":                         154,
		"THEME_MISBEHAVIOR":                  155,
		"THEME_MISTAKES":                     156,
		"THEME_MOURNING":                     157,
		"THEME_NERVOUS":                      158,
		"THEME_PAIN":                         159,
		"THEME_PANIC":                        160,
		"THEME_POISON":                       161,
		"THEME_PROBLEMS":                     162,
		"THEME_REBELLION":                    163,
		"THEME_REGRET":                       164,
		"THEME_REVENGE":                      165,
		"THEME_SAD":                          166,
		"THEME_SECRETS":                      167,
		"THEME_SHAME":                        168,
		"THEME_SHY":                          169,
		"THEME_SLEAZY":                       170,
		"THEME_STOP":                         171,
		"THEME_STRANGE":                      172,
		"THEME_STRESS":                       173,
		"THEME_STUBBORN":                     174,
		"THEME_STUPID":                       175,
		"THEME_SUICIDE":                      176,
		"THEME_TEMPTATION":                   177,
		"THEME_TERRIBLE":                     178,
		"THEME_THREATEN":                     179,
		"THEME_TORN":                         180,
		"THEME_TRAGEDY":                      181,
		"THEME_TRAPPED":                      182,
		"THEME_TROUBLE":                      183,
		"THEME_WASTEFUL":                     184,
		"THEME_WORRY":                        185,
		"THEME_WRONG":                        186,
		"THEME_AWARENESS":                    187,
		"THEME_CHALLENGE":                    188,
		"THEME_CHANGE":                       189,
		"THEME_CONSCIOUSNESS":                190,
		"THEME_DAYDREAM":                     191,
		"THEME_IDEAS":                        192,
		"THEME_INFORMATION":                  193,
		"THEME_INSIGHT":                      194,
		"THEME_INSOMNIA":                     195,
		"THEME_INVISIBLE":                    196,
		"THEME_KNOWLEDGE":                    197,
		"THEME_MEMORY":                       198,
		"THEME_MENTALITY":                    199,
		"THEME_MIND":                         200,
		"THEME_OPINIONS":                     201,
		"THEME_PHILOSOPHY":                   202,
		"THEME_PRIVACY":                      203,
		"THEME_QUESTIONING":                  204,
		"THEME_REMEMBER":                     205,
		"THEME_SAFETY":                       206,
		"THEME_SAME":                         207,
		"THEME_SLEEP":                        208,
		"THEME_SOLITUDE":                     209,
		"THEME_WISDOM":                       210,
		"THEME_AIR":                          211,
		"THEME_ASHES":                        212,
		"THEME_BAY":                          213,
		"THEME_BEACH":                        214,
		"THEME_BLACK":                        215,
		"THEME_BLUE":                         216,
		"THEME_BROWN":                        217,
		"THEME_BURNING":                      218,
		"THEME_CLIFF":                        219,
		"THEME_COAST":                        220,
		"THEME_COLD":                         221,
		"THEME_COLOR":                        222,
		"THEME_DESERT":                       223,
		"THEME_EARTH":                        224,
		"THEME_EARTHQUAKE":                   225,
		"THEME_ELEMENTS":                     226,
		"THEME_EVERYTHING":                   227,
		"THEME_FIRE":                         228,
		"THEME_FLOOD":                        229,
		"THEME_FOREST":                       230,
		"THEME_GEOGRAPHY":                    231,
		"THEME_GREEN":                        232,
		"THEME_GREY":                         233,
		"THEME_HARBOR":                       234,
		"THEME_HIGHLAND":                     235,
		"THEME_HILLS":                        236,
		"THEME_HOT":                          237,
		"THEME_ISLAND":                       238,
		"THEME_LAKE":                         239,
		"THEME_LIGHTNING":                    240,
		"THEME_MOON":                         241,
		"THEME_MOUNTAIN":                     242,
		"THEME_NATURE":                       243,
		"THEME_OCEAN":                        244,
		"THEME_ORANGE":                       245,
		"THEME_PINK":                         246,
		"THEME_PLANET":                       247,
		"THEME_PURPLE":                       248,
		"THEME_RAIN":                         249,
		"THEME_RAINBOW":                      250,
		"THEME_RED":                          251,
		"THEME_RIVER":                        252,
		"THEME_SEA":                          253,
		"THEME_SKY":                          254,
		"THEME_SMOKE":                        255,
		"THEME_SNOW":                         256,
		"THEME_SOUNDS":                       257,
		"THEME_STAR":                         258,
		"THEME_STORM":                        259,
		"THEME_SUN":                          260,
		"THEME_SUNSHINE":                     261,
		"THEME_SWAMP":                        262,
		"THEME_TEMPERATURE":                  263,
		"THEME_UNIVERSE":                     264,
		"THEME_VALLEY":                       265,
		"THEME_VOLCANO":                      266,
		"THEME_WATER":                        267,
		"THEME_WATERFALL":                    268,
		"THEME_WHITE":                        269,
		"THEME_WIND":                         270,
		"THEME_YELLOW":                       271,
		"THEME_AMUSEMENTPARKSANDRIDES":       272,
		"THEME_BIRTHDAYPARTY":                273,
		"THEME_CARNIVAL":                     274,
		"THEME_CELEBRATION":                  275,
		"THEME_CIRCUS":                       276,
		"THEME_CLOWN":                        277,
		"THEME_DANCEPARTY":                   278,
		"THEME_EVENT":                        279,
		"THEME_FAIR":                         280,
		"THEME_PARADE":                       281,
		"THEME_PARTY":                        282,
		"THEME_SURPRISEPARTY":                283,
		"THEME_WINNING":                      284,
		"THEME_ABORTION":                     285,
		"THEME_ADOPTION":                     286,
		"THEME_AUNT":                         287,
		"THEME_BABY":                         288,
		"THEME_BIRTH":                        289,
		"THEME_BIRTHCONTROL":                 290,
		"THEME_BROKENHOME":                   291,
		"THEME_BROTHER":                      292,
		"THEME_CHILDREN":                     293,
		"THEME_COUSIN":                       294,
		"THEME_DAUGHTER":                     295,
		"THEME_FAMILY":                       296,
		"THEME_FAMILYLIFE":                   297,
		"THEME_FAMILYMEMBER":                 298,
		"THEME_FATHER":                       299,
		"THEME_GRANDPARENT":                  300,
		"THEME_HUSBAND":                      301,
		"THEME_MOTHER":                       302,
		"THEME_ORPHAN":                       303,
		"THEME_PARENT":                       304,
		"THEME_PREGNANCY":                    305,
		"THEME_SINGLEPARENT":                 306,
		"THEME_SISTER":                       307,
		"THEME_SON":                          308,
		"THEME_STEPPARENT":                   309,
		"THEME_UNCLE":                        310,
		"THEME_WIFE":                         311,
		"THEME_ADORATION":                    312,
		"THEME_ADVICE":                       313,
		"THEME_ALL":                          314,
		"THEME_ALWAYS":                       315,
		"THEME_AMBITION":                     316,
		"THEME_ANYTHING":                     317,
		"THEME_ASSURANCE":                    318,
		"THEME_BEGINNING":                    319,
		"THEME_BELIEVE":                      320,
		"THEME_BEST":                         321,
		"THEME_CALMNESS":                     322,
		"THEME_CAREFREE":                     323,
		"THEME_CHOICES":                      324,
		"THEME_COMFORT":                      325,
		"THEME_COMPASSION":                   326,
		"THEME_COMPLIMENTS":                  327,
		"THEME_CONFIDENCE":                   328,
		"THEME_CONNECTION":                   329,
		"THEME_CONSISTENT":                   330,
		"THEME_COOL":                         331,
		"THEME_COURAGE":                      332,
		"THEME_CRAVE":                        333,
		"THEME_DESIRE":                       334,
		"THEME_DETERMINATION":                335,
		"THEME_ECSTATIC":                     336,
		"THEME_EMPOWERED":                    337,
		"THEME_EQUALITY":                     338,
		"THEME_EXCELLENCE":                   339,
		"THEME_EXCITED":                      340,
		"THEME_EXPLORE":                      341,
		"THEME_FANTASY":                      342,
		"THEME_FAVORITE":                     343,
		"THEME_FEEL":                         344,
		"THEME_FEELINGS":                     345,
		"THEME_FORGIVE":                      346,
		"THEME_FOUND":                        347,
		"THEME_FUN":                          348,
		"THEME_GENTLE":                       349,
		"THEME_GETTINGOVER":                  350,
		"THEME_GIVE":                         351,
		"THEME_GOOD":                         352,
		"THEME_GRATITUDE":                    353,
		"THEME_HAPPINESS":                    354,
		"THEME_HELLO":                        355,
		"THEME_HELP":                         356,
		"THEME_HEROISM":                      357,
		"THEME_HIGHEST":                      358,
		"THEME_HONESTY":                      359,
		"THEME_HOPE":                         360,
		"THEME_INDEPENDENCE":                 361,
		"THEME_INDIVIDUALITY":                362,
		"THEME_INNOCENCE":                    363,
		"THEME_INSPIRATION":                  364,
		"THEME_INTEGRITY":                    365,
		"THEME_INTENTION":                    366,
		"THEME_LAUGHTER":                     367,
		"THEME_LEADER":                       368,
		"THEME_LIVING":                       369,
		"THEME_LOYALTY":                      370,
		"THEME_LUCKY":                        371,
		"THEME_MORALITY":                     372,
		"THEME_MOTIVATION":                   373,
		"THEME_NOSTALGIA":                    374,
		"THEME_OPPORTUNITY":                  375,
		"THEME_OPTIMISM":                     376,
		"THEME_PATIENCE":                     377,
		"THEME_PEACE":                        378,
		"THEME_PERFECTION":                   379,
		"THEME_PERSEVERE":                    380,
		"THEME_PLEASE":                       381,
		"THEME_POSSIBILITY":                  382,
		"THEME_PRIDE":                        383,
		"THEME_PROMISE":                      384,
		"THEME_PROTECT":                      385,
		"THEME_QUALITY":                      386,
		"THEME_REAL":                         387,
		"THEME_RECOVERY":                     388,
		"THEME_RESCUE":                       389,
		"THEME_RESILIENT":                    390,
		"THEME_RESPECT":                      391,
		"THEME_REUNITE":                      392,
		"THEME_RIGHT":                        393,
		"THEME_SATISFACTION":                 394,
		"THEME_SAVE":                         395,
		"THEME_SHELTER":                      396,
		"THEME_SIMPLE":                       397,
		"THEME_SMART":                        398,
		"THEME_SMILE":                        399,
		"THEME_SPACEDOUT":                    400,
		"THEME_SPECIAL":                      401,
		"THEME_STICK":                        402,
		"THEME_STRONG":                       403,
		"THEME_SUCCESS":                      404,
		"THEME_SUPERIORITY":                  405,
		"THEME_SUPPORT":                      406,
		"THEME_SURVIVE":                      407,
		"THEME_SWAGGER":                      408,
		"THEME_SWEET":                        409,
		"THEME_SYMPATHY":                     410,
		"THEME_TRUST":                        411,
		"THEME_TRUTH":                        412,
		"THEME_TRY":                          413,
		"THEME_UNBELIEVABLE":                 414,
		"THEME_UNDERSTANDING":                415,
		"THEME_UNIQUE":                       416,
		"THEME_UNITY":                        417,
		"THEME_WELCOME":                      418,
		"THEME_WISH":                         419,
		"THEME_WONDERFUL":                    420,
		"THEME_ATTRACTIVE":                   421,
		"THEME_BATTLEOFTHESEXES":             422,
		"THEME_BEAUTIFUL":                    423,
		"THEME_BEAUTY":                       424,
		"THEME_BOYS":                         425,
		"THEME_GENDER":                       426,
		"THEME_GIRLS":                        427,
		"THEME_HANDSOME":                     428,
		"THEME_LOVELY":                       429,
		"THEME_MEN":                          430,
		"THEME_MENSNAMES":                    431,
		"THEME_PRETTY":                       432,
		"THEME_UGLY":                         433,
		"THEME_WOMEN":                        434,
		"THEME_WOMENSNAMES":                  435,
		"THEME_GESTURES":                     436,
		"THEME_DISEASE":                      437,
		"THEME_DOCTOR":                       438,
		"THEME_FEVER":                        439,
		"THEME_HEALING":                      440,
		"THEME_HEALTHANDWELLNESS":            441,
		"THEME_HOSPITAL":                     442,
		"THEME_MEDICAL":                      443,
		"THEME_MENTALILLNESS":                444,
		"THEME_PHARMACEUTICAL":               445,
		"THEME_PHYSICALPAIN":                 446,
		"THEME_REHAB":                        447,
		"THEME_CHRISTMAS":                    448,
		"THEME_HALLOWEEN":                    449,
		"THEME_HOLIDAY":                      450,
		"THEME_MARDIGRAS":                    451,
		"THEME_NEWYEAR":                      452,
		"THEME_VACATION":                     453,
		"THEME_ADDICTEDTO":                   454,
		"THEME_AFFECTION":                    455,
		"THEME_ANNIVERSARY":                  456,
		"THEME_ATFIRSTSIGHT":                 457,
		"THEME_BACKTOGETHER":                 458,
		"THEME_BEINGIN":                      459,
		"THEME_BREAKUP":                      460,
		"THEME_CANTGETOVER":                  461,
		"THEME_CANTRESIST":                   462,
		"THEME_CHOOSE":                       463,
		"THEME_COMMITMENT":                   464,
		"THEME_COUPLE":                       465,
		"THEME_CRUSH":                        466,
		"THEME_DATING":                       467,
		"THEME_DESPERATE":                    468,
		"THEME_DISCOVERY":                    469,
		"THEME_DIVORCE":                      470,
		"THEME_DONTGO":                       471,
		"THEME_DONTLEAVEME":                  472,
		"THEME_ENGAGEMENT":                   473,
		"THEME_FALLINGIN":                    474,
		"THEME_FAREWELL":                     475,
		"THEME_FLIRT":                        476,
		"THEME_FORBIDDEN":                    477,
		"THEME_FREE":                         478,
		"THEME_FRIENDSHIP":                   479,
		"THEME_GETLOST":                      480,
		"THEME_HEARTACHE":                    481,
		"THEME_HOLDINGON":                    482,
		"THEME_HONEYMOON":                    483,
		"THEME_IDEAL":                        484,
		"THEME_INTROUBLE":                    485,
		"THEME_INFATUATED":                   486,
		"THEME_KISS":                         487,
		"THEME_LASTING":                      488,
		"THEME_LIES":                         489,
		"THEME_LONELY":                       490,
		"THEME_LONGING":                      491,
		"THEME_LOSINGYOU":                    492,
		"THEME_LOSTTHATLOVINGFEELING":        493,
		"THEME_LOVE":                         494,
		"THEME_MARRIEDLIFE":                  495,
		"THEME_MENTALKINGTOMEN":              496,
		"THEME_MENTALKINGTOWOMEN":            497,
		"THEME_MISSINGYOU":                   498,
		"THEME_MOVINGON":                     499,
		"THEME_NEED":                         500,
		"THEME_NONROMANTIC":                  501,
		"THEME_NOTCOMMITTED":                 502,
		"THEME_NOTMYTYPE":                    503,
		"THEME_OBSESSION":                    504,
		"THEME_ONENIGHTSTAND":                505,
		"THEME_PLATONIC":                     506,
		"THEME_PLAYER":                       507,
		"THEME_POSSESSED":                    508,
		"THEME_REJECTION":                    509,
		"THEME_RISK":                         510,
		"THEME_ROMANCE":                      511,
		"THEME_ROMANTIC":                     512,
		"THEME_SEARCHINGFOR":                 513,
		"THEME_SEDUCED":                      514,
		"THEME_SHOULDHAVESAID":               515,
		"THEME_SINGLEPERSON":                 516,
		"THEME_TAKEMEBACK":                   517,
		"THEME_TOGETHERNESS":                 518,
		"THEME_UNFAIR":                       519,
		"THEME_UNFAITHFUL":                   520,
		"THEME_UNREQUITED":                   521,
		"THEME_USAGAINSTTHEWORLD":            522,
		"THEME_VALENTINE":                    523,
		"THEME_WESHOULDBETOGETHER":           524,
		"THEME_WEDDING":                      525,
		"THEME_WOMENTALKINGTOMEN":            526,
		"THEME_WOMENTALKINGTOWOMEN":          527,
		"THEME_YOUNG":                        528,
		"THEME_ABOVE":                        529,
		"THEME_BEHIND":                       530,
		"THEME_BELOW":                        531,
		"THEME_BIG":                          532,
		"THEME_CLOSE":                        533,
		"THEME_DEEP":                         534,
		"THEME_DIRECTION":                    535,
		"THEME_DISTANCE":                     536,
		"THEME_DOWN":                         537,
		"THEME_EAST":                         538,
		"THEME_FAR":                          539,
		"THEME_FAT":                          540,
		"THEME_HIGH":                         541,
		"THEME_HUNDRED":                      542,
		"THEME_INFRONT":                      543,
		"THEME_INCH":                         544,
		"THEME_LEFT":                         545,
		"THEME_LOW":                          546,
		"THEME_MEASUREMENT":                  547,
		"THEME_MILE":                         548,
		"THEME_MILLION":                      549,
		"THEME_NEAR":                         550,
		"THEME_NORTH":                        551,
		"THEME_NUMBER":                       552,
		"THEME_SIZE":                         553,
		"THEME_SMALL":                        554,
		"THEME_SOUTH":                        555,
		"THEME_TALL":                         556,
		"THEME_THIN":                         557,
		"THEME_THOUSAND":                     558,
		"THEME_UP":                           559,
		"THEME_WEST":                         560,
		"THEME_ACTION":                       561,
		"THEME_AIRPLANES":                    562,
		"THEME_BASEBALL":                     563,
		"THEME_BASKETBALL":                   564,
		"THEME_BICYCLES":                     565,
		"THEME_BOUNCE":                       566,
		"THEME_BOXING":                       567,
		"THEME_BREATHE":                      568,
		"THEME_BUILD":                        569,
		"THEME_BUS":                          570,
		"THEME_BUSY":                         571,
		"THEME_CARRACING":                    572,
		"THEME_CARS":                         573,
		"THEME_CHASE":                        574,
		"THEME_CLEAN":                        575,
		"THEME_CLIMB":                        576,
		"THEME_CRASH":                        577,
		"THEME_CREATE":                       578,
		"THEME_CRY":                          579,
		"THEME_DANCE":                        580,
		"THEME_DRIFT":                        581,
		"THEME_DRINK":                        582,
		"THEME_DRIVE":                        583,
		"THEME_ESCAPE":                       584,
		"THEME_EXERCISE":                     585,
		"THEME_FALL":                         586,
		"THEME_FAST":                         587,
		"THEME_FIND":                         588,
		"THEME_FISHING":                      589,
		"THEME_FIX":                          590,
		"THEME_FLY":                          591,
		"THEME_FOLLOW":                       592,
		"THEME_FOOTBALL":                     593,
		"THEME_GO":                           594,
		"THEME_GOLF":                         595,
		"THEME_HORSERACING":                  596,
		"THEME_JUMP":                         597,
		"THEME_LEARN":                        598,
		"THEME_LEAVE":                        599,
		"THEME_LOOK":                         600,
		"THEME_MINE":                         601,
		"THEME_MOTION":                       602,
		"THEME_MOTORCYCLES":                  603,
		"THEME_MOVE":                         604,
		"THEME_OLYMPICS":                     605,
		"THEME_PLAYMUSIC":                    606,
		"THEME_READY":                        607,
		"THEME_REFLECT":                      608,
		"THEME_RELAX":                        609,
		"THEME_REPEAT":                       610,
		"THEME_RETURN":                       611,
		"THEME_REVOLVE":                      612,
		"THEME_RIDE":                         613,
		"THEME_ROCK":                         614,
		"THEME_RUN":                          615,
		"THEME_SAIL":                         616,
		"THEME_SEARCH":                       617,
		"THEME_SHAKE":                        618,
		"THEME_SHINE":                        619,
		"THEME_SHOOT":                        620,
		"THEME_SING":                         621,
		"THEME_SIT":                          622,
		"THEME_SKATE":                        623,
		"THEME_SKATEBOARD":                   624,
		"THEME_SKI":                          625,
		"THEME_SLOW":                         626,
		"THEME_SPEED":                        627,
		"THEME_SPORT":                        628,
		"THEME_STAND":                        629,
		"THEME_START":                        630,
		"THEME_STEAL":                        631,
		"THEME_SURF":                         632,
		"THEME_SWIM":                         633,
		"THEME_TAXI":                         634,
		"THEME_TEACH":                        635,
		"THEME_TRAINS":                       636,
		"THEME_TRANSPORTATION":               637,
		"THEME_TRAVEL":                       638,
		"THEME_TRUCKS":                       639,
		"THEME_TURN":                         640,
		"THEME_WAIT":                         641,
		"THEME_WALK":                         642,
		"THEME_WILD":                         643,
		"THEME_WORK":                         644,
		"THEME_WRITE":                        645,
		"THEME_NONE":                         646,
		"THEME_AMMUNITION":                   647,
		"THEME_ART":                          648,
		"THEME_BASS":                         649,
		"THEME_BEATS":                        650,
		"THEME_BELLS":                        651,
		"THEME_BEVERAGE":                     652,
		"THEME_BOOK":                         653,
		"THEME_BRASS":                        654,
		"THEME_CAMERA":                       655,
		"THEME_CANDLE":                       656,
		"THEME_CANDY":                        657,
		"THEME_CARDGAME":                     658,
		"THEME_CLOTHING":                     659,
		"THEME_COMPUTER":                     660,
		"THEME_CONTAINER":                    661,
		"THEME_COSMETIC":                     662,
		"THEME_DRUMS":                        663,
		"THEME_EDUCATION":                    664,
		"THEME_FABRIC":                       665,
		"THEME_FAME":                         666,
		"THEME_FASHION":                      667,
		"THEME_FLOWER":                       668,
		"THEME_FOOD":                         669,
		"THEME_FRUITS":                       670,
		"THEME_FURNITURE":                    671,
		"THEME_GAMBLING":                     672,
		"THEME_GAME":                         673,
		"THEME_GARBAGE":                      674,
		"THEME_GASOLINE":                     675,
		"THEME_GOLD":                         676,
		"THEME_GUITAR":                       677,
		"THEME_GUN":                          678,
		"THEME_HAT":                          679,
		"THEME_HOLE":                         680,
		"THEME_HORN":                         681,
		"THEME_JEWELRY":                      682,
		"THEME_JUKEBOX":                      683,
		"THEME_KEYS":                         684,
		"THEME_LIGHT":                        685,
		"THEME_LOCK":                         686,
		"THEME_MAIL":                         687,
		"THEME_MISPLACE":                     688,
		"THEME_MONEY":                        689,
		"THEME_MOVIE":                        690,
		"THEME_MUSIC":                        691,
		"THEME_MUSICBUSINESS":                692,
		"THEME_MUSICALINSTRUMENT":            693,
		"THEME_NEWS":                         694,
		"THEME_OBJECTS":                      695,
		"THEME_PAPER":                        696,
		"THEME_PERCUSSION":                   697,
		"THEME_PHOTOGRAPH":                   698,
		"THEME_PIANO":                        699,
		"THEME_PRODUCTANDBRAND":              700,
		"THEME_RADIO":                        701,
		"THEME_RHYTHM":                       702,
		"THEME_ROADACCIDENT":                 703,
		"THEME_ROBOT":                        704,
		"THEME_SHIP":                         705,
		"THEME_SHOE":                         706,
		"THEME_SHOPPING":                     707,
		"THEME_SHOWBIZ":                      708,
		"THEME_SILVER":                       709,
		"THEME_STRING":                       710,
		"THEME_STRINGANDROPE":                711,
		"THEME_SYNTHESIZER":                  712,
		"THEME_TATTOO":                       713,
		"THEME_TECHNOLOGY":                   714,
		"THEME_TELEVISION":                   715,
		"THEME_TOOLS":                        716,
		"THEME_TOY":                          717,
		"THEME_TREE":                         718,
		"THEME_TRUMPET":                      719,
		"THEME_UFO":                          720,
		"THEME_VEGETABLE":                    721,
		"THEME_VIDEOGAME":                    722,
		"THEME_VOICE":                        723,
		"THEME_WEAPON":                       724,
		"THEME_WHISTLE":                      725,
		"THEME_WINDCHIMES":                   726,
		"THEME_WOODWIND":                     727,
		"THEME_ACTOR":                        728,
		"THEME_ALIEN":                        729,
		"THEME_ASTRONAUT":                    730,
		"THEME_BALLERINA":                    731,
		"THEME_BLONDE":                       732,
		"THEME_BOSS":                         733,
		"THEME_BRUNETTE":                     734,
		"THEME_CELEBRITY":                    735,
		"THEME_CHEERLEADER":                  736,
		"THEME_COMIC":                        737,
		"THEME_COWBOYANDCOWGIRL":             738,
		"THEME_ELVIS":                        739,
		"THEME_GEEK":                         740,
		"THEME_GHOST":                        741,
		"THEME_GYPSY":                        742,
		"THEME_HERO":                         743,
		"THEME_HILLBILLY":                    744,
		"THEME_HIPPIE":                       745,
		"THEME_IDENTITY":                     746,
		"THEME_MAGICIAN":                     747,
		"THEME_ME":                           748,
		"THEME_MONSTER":                      749,
		"THEME_OUTLAW":                       750,
		"THEME_PEOPLE":                       751,
		"THEME_PIRATE":                       752,
		"THEME_REDHEAD":                      753,
		"THEME_ROYALTY":                      754,
		"THEME_SANTACLAUS":                   755,
		"THEME_SNOWMAN":                      756,
		"THEME_SOCIALOUTCAST":                757,
		"THEME_STALKER":                      758,
		"THEME_STORYBOOKCHARACTER":           759,
		"THEME_SUPERHERO":                    760,
		"THEME_THEM":                         761,
		"THEME_THREEKINGS":                   762,
		"THEME_US":                           763,
		"THEME_VILLAIN":                      764,
		"THEME_WAITER":                       765,
		"THEME_WITCH":                        766,
		"THEME_YOU":                          767,
		"THEME_YOUTH":                        768,
		"THEME_AFGHANISTAN":                  769,
		"THEME_AFRICA":                       770,
		"THEME_ALABAMA":                      771,
		"THEME_ALASKA":                       772,
		"THEME_ALBANIA":                      773,
		"THEME_ALGERIA":                      774,
		"THEME_AMSTERDAM":                    775,
		"THEME_ANDORRA":                      776,
		"THEME_ANGOLA":                       777,
		"THEME_ANTIGUAANDBARBUDA":            778,
		"THEME_ARGENTINA":                    779,
		"THEME_ARIZONA":                      780,
		"THEME_ARKANSAS":                     781,
		"THEME_ARMENIA":                      782,
		"THEME_ASIA":                         783,
		"THEME_ATLANTA":                      784,
		"THEME_AUSTRALIA":                    785,
		"THEME_AUSTRIA":                      786,
		"THEME_AZERBAIJAN":                   787,
		"THEME_BAHAMAS":                      788,
		"THEME_BAHRAIN":                      789,
		"THEME_BALI":                         790,
		"THEME_BALKANS":                      791,
		"THEME_BALTICSTATES":                 792,
		"THEME_BALTIMORE":                    793,
		"THEME_BANGLADESH":                   794,
		"THEME_BARBADOS":                     795,
		"THEME_BARS":                         796,
		"THEME_BATHROOM":                     797,
		"THEME_BEDROOM":                      798,
		"THEME_BELARUS":                      799,
		"THEME_BELGIUM":                      800,
		"THEME_BELIZE":                       801,
		"THEME_BENELUX":                      802,
		"THEME_BENIN":                        803,
		"THEME_BERLIN":                       804,
		"THEME_BERMUDA":                      805,
		"THEME_BHUTAN":                       806,
		"THEME_BIRMINGHAM":                   807,
		"THEME_BOARDWALK":                    808,
		"THEME_BOLIVIA":                      809,
		"THEME_BOSNIAANDHERZEGOVINA":         810,
		"THEME_BOSTON":                       811,
		"THEME_BOTSWANA":                     812,
		"THEME_BRAZIL":                       813,
		"THEME_BRIDGE":                       814,
		"THEME_BRITAIN":                      815,
		"THEME_BRITISHISLES":                 816,
		"THEME_BRUNEI":                       817,
		"THEME_BUILDING":                     818,
		"THEME_BULGARIA":                     819,
		"THEME_BURKINAFASO":                  820,
		"THEME_BURUNDI":                      821,
		"THEME_CALIFORNIA":                   822,
		"THEME_CAMBODIA":                     823,
		"THEME_CAMEROON":                     824,
		"THEME_CANADA":                       825,
		"THEME_CAPEVERDE":                    826,
		"THEME_CAROLINAS":                    827,
		"THEME_CASINO":                       828,
		"THEME_CEMETARY":                     829,
		"THEME_CENTRALAFRICANREPUBLIC":       830,
		"THEME_CENTRALAMERICA":               831,
		"THEME_CHAD":                         832,
		"THEME_CHICAGO":                      833,
		"THEME_CHILE":                        834,
		"THEME_CHINA":                        835,
		"THEME_CINCINNATI":                   836,
		"THEME_CITY":                         837,
		"THEME_CITYLIFE":                     838,
		"THEME_CLUB":                         839,
		"THEME_COLOMBIA":                     840,
		"THEME_COLORADO":                     841,
		"THEME_COMOROS":                      842,
		"THEME_CONNECTICUT":                  843,
		"THEME_CONTINENT":                    844,
		"THEME_COOKISLANDS":                  845,
		"THEME_COSTARICA":                    846,
		"THEME_COUNTRY":                      847,
		"THEME_COUNTRYLIFE":                  848,
		"THEME_CROATIA":                      849,
		"THEME_CUBA":                         850,
		"THEME_CYPRUS":                       851,
		"THEME_CZECHREPUBLIC":                852,
		"THEME_CZECHOSLOVAKIA":               853,
		"THEME_DALLAS":                       854,
		"THEME_DELAWARE":                     855,
		"THEME_DEMOCRATICREPUBLICOFTHECONGO": 856,
		"THEME_DENMARK":                      857,
		"THEME_DENVER":                       858,
		"THEME_DETROIT":                      859,
		"THEME_DJIBOUTI":                     860,
		"THEME_DOMINICA":                     861,
		"THEME_DOMINICANREPUBLIC":            862,
		"THEME_DOOR":                         863,
		"THEME_DUBLIN":                       864,
		"THEME_EASTERNEUROPE":                865,
		"THEME_ECUADOR":                      866,
		"THEME_EGYPT":                        867,
		"THEME_ELSALVADOR":                   868,
		"THEME_ENGLAND":                      869,
		"THEME_EQUATORIALGUINEA":             870,
		"THEME_ERITREA":                      871,
		"THEME_ESTONIA":                      872,
		"THEME_ESWATINI":                     873,
		"THEME_ETHIOPIA":                     874,
		"THEME_EUROPE":                       875,
		"THEME_EUROPEANCONTINENT":            876,
		"THEME_EUROPEANECONOMICAREA":         877,
		"THEME_EUROPEANECONOMICCOMMUNITY":    878,
		"THEME_EUROPEANUNION":                879,
		"THEME_FARM":                         880,
		"THEME_FIJI":                         881,
		"THEME_FINLAND":                      882,
		"THEME_FLOORANDCEILING":              883,
		"THEME_FLORIDA":                      884,
		"THEME_FRANCE":                       885,
		"THEME_FRENCHCARIBBEAN":              886,
		"THEME_FRENCHGUIANA":                 887,
		"THEME_FRENCHPOLYNESIA":              888,
		"THEME_GABON":                        889,
		"THEME_GAMBIA":                       890,
		"THEME_GANGSTALIFE":                  891,
		"THEME_GARDEN":                       892,
		"THEME_GASSTATION":                   893,
		"THEME_GEOGRAPHICLOCATION":           894,
		"THEME_GEORGIA":                      895,
		"THEME_GERMANY":                      896,
		"THEME_GHANA":                        897,
		"THEME_GOODLIFE":                     898,
		"THEME_GREATBRITAIN":                 899,
		"THEME_GREECE":                       900,
		"THEME_GRENADA":                      901,
		"THEME_GUATEMALA":                    902,
		"THEME_GUINEA":                       903,
		"THEME_GUINEA_BISSAU":                904,
		"THEME_GUYANA":                       905,
		"THEME_HAITI":                        906,
		"THEME_HAVANA":                       907,
		"THEME_HAWAII":                       908,
		"THEME_HIGHWAY":                      909,
		"THEME_HOLLAND":                      910,
		"THEME_HOLLYWOOD":                    911,
		"THEME_HOME":                         912,
		"THEME_HONDURAS":                     913,
		"THEME_HONGKONG":                     914,
		"THEME_HOTEL":                        915,
		"THEME_HOUSE":                        916,
		"THEME_HOUSTON":                      917,
		"THEME_HUNGARY":                      918,
		"THEME_ICELAND":                      919,
		"THEME_IDAHO":                        920,
		"THEME_ILLINOIS":                     921,
		"THEME_INDIA":                        922,
		"THEME_INDIANA":                      923,
		"THEME_INDONESIA":                    924,
		"THEME_IOWA":                         925,
		"THEME_IRAN":                         926,
		"THEME_IRAQ":                         927,
		"THEME_IRELAND":                      928,
		"THEME_ISLEOFMAN":                    929,
		"THEME_ISRAEL":                       930,
		"THEME_ITALY":                        931,
		"THEME_IVORYCOAST":                   932,
		"THEME_JAMAICA":                      933,
		"THEME_JAPAN":                        934,
		"THEME_JAVA":                         935,
		"THEME_JORDAN":                       936,
		"THEME_KANSAS":                       937,
		"THEME_KANSASCITY":                   938,
		"THEME_KAZAKHSTAN":                   939,
		"THEME_KENTUCKY":                     940,
		"THEME_KENYA":                        941,
		"THEME_KIRIBATI":                     942,
		"THEME_KUWAIT":                       943,
		"THEME_KYRGYZSTAN":                   944,
		"THEME_LAOS":                         945,
		"THEME_LASVEGAS":                     946,
		"THEME_LATVIA":                       947,
		"THEME_LEBANON":                      948,
		"THEME_LESOTHO":                      949,
		"THEME_LIBERIA":                      950,
		"THEME_LIBYA":                        951,
		"THEME_LIECHTENSTEIN":                952,
		"THEME_LIGHTHOUSE":                   953,
		"THEME_LITHUANIA":                    954,
		"THEME_LOCATION":                     955,
		"THEME_LONDON":                       956,
		"THEME_LOSANGELES":                   957,
		"THEME_LOUISIANA":                    958,
		"THEME_LUXEMBOURG":                   959,
		"THEME_MACAO":                        960,
		"THEME_MADAGASCAR":                   961,
		"THEME_MAINE":                        962,
		"THEME_MALAWI":                       963,
		"THEME_MALAYSIA":                     964,
		"THEME_MALDIVES":                     965,
		"THEME_MALI":                         966,
		"THEME_MALTA":                        967,
		"THEME_MARSHALLISLANDS":              968,
		"THEME_MARYLAND":                     969,
		"THEME_MASSACHUSETTS":                970,
		"THEME_MAURITANIA":                   971,
		"THEME_MAURITIUS":                    972,
		"THEME_MEDELLN":                      973,
		"THEME_MEMPHIS":                      974,
		"THEME_MEXICO":                       975,
		"THEME_MIAMI":                        976,
		"THEME_MICHIGAN":                     977,
		"THEME_MICRONESIA":                   978,
		"THEME_MIDDLEEAST":                   979,
		"THEME_MINNESOTA":                    980,
		"THEME_MISSISSIPPI":                  981,
		"THEME_MISSOURI":                     982,
		"THEME_MOBILE":                       983,
		"THEME_MOLDOVA":                      984,
		"THEME_MONACO":                       985,
		"THEME_MONGOLIA":                     986,
		"THEME_MONTANA":                      987,
		"THEME_MONTENEGRO":                   988,
		"THEME_MOROCCO":                      989,
		"THEME_MOSCOW":                       990,
		"THEME_MOZAMBIQUE":                   991,
		"THEME_MYANMAR":                      992,
		"THEME_NAMIBIA":                      993,
		"THEME_NASHVILLE":                    994,
		"THEME_NAURU":                        995,
		"THEME_NEBRASKA":                     996,
		"THEME_NEPAL":                        997,
		"THEME_NETHERLANDS":                  998,
		"THEME_NEVADA":                       999,
		"THEME_NEWHAMPSHIRE":                 1000,
		"THEME_NEWJERSEY":                    1001,
		"THEME_NEWMEXICO":                    1002,
		"THEME_NEWORLEANS":                   1003,
		"THEME_NEWYORKCITY":                  1004,
		"THEME_NEWYORK":                      1005,
		"THEME_NEWZEALAND":                   1006,
		"THEME_NICARAGUA":                    1007,
		"THEME_NIGER":                        1008,
		"THEME_NIGERIA":                      1009,
		"THEME_NORTHAMERICA":                 1010,
		"THEME_NORTHDAKOTA":                  1011,
		"THEME_NORTHKOREA":                   1012,
		"THEME_NORTHMACEDONIA":               1013,
		"THEME_NORWAY":                       1014,
		"THEME_OCEANIA":                      1015,
		"THEME_OHIO":                         1016,
		"THEME_OKLAHOMA":                     1017,
		"THEME_OMAN":                         1018,
		"THEME_OREGON":                       1019,
		"THEME_OUTDOOR":                      1020,
		"THEME_PACIFICISLANDS":               1021,
		"THEME_PAD":                          1022,
		"THEME_PAKISTAN":                     1023,
		"THEME_PALAU":                        1024,
		"THEME_PANAMA":                       1025,
		"THEME_PAPUANEWGUINEA":               1026,
		"THEME_PARAGUAY":                     1027,
		"THEME_PARIS":                        1028,
		"THEME_PARK":                         1029,
		"THEME_PENNSYLVANIA":                 1030,
		"THEME_PERU":                         1031,
		"THEME_PHILADELPHIA":                 1032,
		"THEME_PHILIPPINES":                  1033,
		"THEME_PLACE":                        1034,
		"THEME_POLAND":                       1035,
		"THEME_POLYNESIA":                    1036,
		"THEME_PORTUGAL":                     1037,
		"THEME_PRAIRIE":                      1038,
		"THEME_PUERTORICO":                   1039,
		"THEME_QATAR":                        1040,
		"THEME_RANCH":                        1041,
		"THEME_REPUBLICOFTHECONGO":           1042,
		"THEME_RESTAURANT":                   1043,
		"THEME_RHODEISLAND":                  1044,
		"THEME_RIODEJANEIRO":                 1045,
		"THEME_ROAD":                         1046,
		"THEME_RODEO":                        1047,
		"THEME_ROMANIA":                      1048,
		"THEME_ROME":                         1049,
		"THEME_RUSSIA":                       1050,
		"THEME_RWANDA":                       1051,
		"THEME_SAINTKITTSANDNEVIS":           1052,
		"THEME_SAINTLUCIA":                   1053,
		"THEME_SAINTVINCENTANDTHEGRENADINES": 1054,
		"THEME_SALTLAKECITY":                 1055,
		"THEME_SAMOA":                        1056,
		"THEME_SANANTONIO":                   1057,
		"THEME_SANFRANCISCO":                 1058,
		"THEME_SANMARINO":                    1059,
		"THEME_SANTAFE":                      1060,
		"THEME_SAOTOMEANDPRINCIPE":           1061,
		"THEME_SAUDIARABIA":                  1062,
		"THEME_SAVANNAH":                     1063,
		"THEME_SCANDINAVIA":                  1064,
		"THEME_SCHOOL":                       1065,
		"THEME_SCOTLAND":                     1066,
		"THEME_SENEGAL":                      1067,
		"THEME_SERBIA":                       1068,
		"THEME_SEYCHELLES":                   1069,
		"THEME_SIERRALEONE":                  1070,
		"THEME_SINGAPORE":                    1071,
		"THEME_SITUATION":                    1072,
		"THEME_SLOVAKIA":                     1073,
		"THEME_SLOVENIA":                     1074,
		"THEME_SMALLTOWNLIFE":                1075,
		"THEME_SOLOMONISLANDS":               1076,
		"THEME_SOMALIA":                      1077,
		"THEME_SOUTHAFRICA":                  1078,
		"THEME_SOUTHAMERICA":                 1079,
		"THEME_SOUTHDAKOTA":                  1080,
		"THEME_SOUTHEASTASIA":                1081,
		"THEME_SOUTHKOREA":                   1082,
		"THEME_SOUTHSUDAN":                   1083,
		"THEME_SPAIN":                        1084,
		"THEME_SRILANKA":                     1085,
		"THEME_ST_LOUIS":                     1086,
		"THEME_POLITICALSTATE":               1087,
		"THEME_STREET":                       1088,
		"THEME_SUDAN":                        1089,
		"THEME_SURINAME":                     1090,
		"THEME_SWEDEN":                       1091,
		"THEME_SWITZERLAND":                  1092,
		"THEME_SYRIA":                        1093,
		"THEME_TAIWAN":                       1094,
		"THEME_TAJIKISTAN":                   1095,
		"THEME_TANZANIA":                     1096,
		"THEME_TENNESSEE":                    1097,
		"THEME_TEXAS":                        1098,
		"THEME_THAILAND":                     1099,
		"THEME_THEATRE":                      1100,
		"THEME_TIBET":                        1101,
		"THEME_TIMOR_LESTE":                  1102,
		"THEME_TOGO":                         1103,
		"THEME_TOKYO":                        1104,
		"THEME_TONGA":                        1105,
		"THEME_TRAIL":                        1106,
		"THEME_TRINIDADANDTOBAGO":            1107,
		"THEME_TULSA":                        1108,
		"THEME_TUNISIA":                      1109,
		"THEME_TURKEY":                       1110,
		"THEME_TURKMENISTAN":                 1111,
		"THEME_TUVALU":                       1112,
		"THEME_UGANDA":                       1113,
		"THEME_UKRAINE":                      1114,
		"THEME_UNITEDARABEMIRATES":           1115,
		"THEME_UNITEDKINGDOM":                1116,
		"THEME_UNITEDSTATES":                 1117,
		"THEME_URUGUAY":                      1118,
		"THEME_UTAH":                         1119,
		"THEME_UZBEKISTAN":                   1120,
		"THEME_VANUATU":                      1121,
		"THEME_VATICAN":                      1122,
		"THEME_VENEZUELA":                    1123,
		"THEME_VERMONT":                      1124,
		"THEME_VIENNA":                       1125,
		"THEME_VIETNAM":                      1126,
		"THEME_VIRGINIA":                     1127,
		"THEME_WALES":                        1128,
		"THEME_WALL":                         1129,
		"THEME_WASHINGTON":                   1130,
		"THEME_WESTINDIES":                   1131,
		"THEME_WESTVIRGINIA":                 1132,
		"THEME_WESTERNSAHARA":                1133,
		"THEME_WINDOW":                       1134,
		"THEME_WISCONSIN":                    1135,
		"THEME_WORLD":                        1136,
		"THEME_WYOMING":                      1137,
		"THEME_YEMEN":                        1138,
		"THEME_YUGOSLAVIA":                   1139,
		"THEME_ZAMBIA":                       1140,
		"THEME_ZIMBABWE":                     1141,
		"THEME_ZOO":                          1142,
		"THEME_CAPITALPUNISHMENT":            1143,
		"THEME_CIVILRIGHTS":                  1144,
		"THEME_CRIME":                        1145,
		"THEME_DRAFTRESISTANCE":              1146,
		"THEME_ENLISTMENT":                   1147,
		"THEME_ENVIRONMENT":                  1148,
		"THEME_ESPIONAGE":                    1149,
		"THEME_FASCISM":                      1150,
		"THEME_FEMINISM":                     1151,
		"THEME_FREEDOM":                      1152,
		"THEME_GOVERNMENT":                   1153,
		"THEME_JUSTICE":                      1154,
		"THEME_LAWANDORDER":                  1155,
		"THEME_LAWENFORCEMENT":               1156,
		"THEME_MILITARY":                     1157,
		"THEME_NUCLEARENERGY":                1158,
		"THEME_NUCLEARWAR":                   1159,
		"THEME_OPPRESSION":                   1160,
		"THEME_PATRIOTISM":                   1161,
		"THEME_POLITICAL":                    1162,
		"THEME_POLITICS":                     1163,
		"THEME_POVERTY":                      1164,
		"THEME_POWERANDCONTROL":              1165,
		"THEME_PREJUDICE":                    1166,
		"THEME_PRESIDENT":                    1167,
		"THEME_PRISON":                       1168,
		"THEME_PROTEST":                      1169,
		"THEME_RACISM":                       1170,
		"THEME_REVOLUTION":                   1171,
		"THEME_SEGREGATION":                  1172,
		"THEME_SLAVERY":                      1173,
		"THEME_SUFFRAGE":                     1174,
		"THEME_UNION":                        1175,
		"THEME_WAR":                          1176,
		"THEME_WORKINGCLASS":                 1177,
		"THEME_MAKINGLOVE":                   1178,
		"THEME_SENSUALITY":                   1179,
		"THEME_ANGEL":                        1180,
		"THEME_ARMAGEDDON":                   1181,
		"THEME_ASTROLOGY":                    1182,
		"THEME_BELIEF":                       1183,
		"THEME_BLESS":                        1184,
		"THEME_BUDDHA":                       1185,
		"THEME_CHURCH":                       1186,
		"THEME_CRUCIFIXION":                  1187,
		"THEME_DARKNESS":                     1188,
		"THEME_DEATH":                        1189,
		"THEME_DEVIL":                        1190,
		"THEME_DREAM":                        1191,
		"THEME_ENLIGHTENMENT":                1192,
		"THEME_EVIL":                         1193,
		"THEME_FAITH":                        1194,
		"THEME_FAITHINDOUBT":                 1195,
		"THEME_FATE":                         1196,
		"THEME_FORTUNETELLER":                1197,
		"THEME_GOD":                          1198,
		"THEME_HEAVEN":                       1199,
		"THEME_HELL":                         1200,
		"THEME_IDEA":                         1201,
		"THEME_IMMORTALITY":                  1202,
		"THEME_JESUSCHRIST":                  1203,
		"THEME_KARMA":                        1204,
		"THEME_MAGIC":                        1205,
		"THEME_MERCY":                        1206,
		"THEME_MIRACLE":                      1207,
		"THEME_MYSTERY":                      1208,
		"THEME_NIGHTMARE":                    1209,
		"THEME_PRAYER":                       1210,
		"THEME_PROPHECY":                     1211,
		"THEME_REDEMPTION":                   1212,
		"THEME_RELIGION":                     1213,
		"THEME_SIGNS":                        1214,
		"THEME_SIN":                          1215,
		"THEME_SPIRIT":                       1216,
		"THEME_SUPERNATURAL":                 1217,
		"THEME_TAROT":                        1218,
		"THEME_UTOPIA":                       1219,
		"THEME_VOODOO":                       1220,
		"THEME_WIZARDRY":                     1221,
		"THEME_ZODIAC":                       1222,
		"THEME_ADDICTION":                    1223,
		"THEME_ALCOHOL":                      1224,
		"THEME_ANTIDRUG":                     1225,
		"THEME_DRUG":                         1226,
		"THEME_INTOXICATED":                  1227,
		"THEME_SOBER":                        1228,
		"THEME_SUBSTANCES":                   1229,
		"THEME_TOBACCO":                      1230,
		"THEME_ADOLESCENCE":                  1231,
		"THEME_AFTERNOON":                    1232,
		"THEME_APRIL":                        1233,
		"THEME_AUGUST":                       1234,
		"THEME_DATE":                         1235,
		"THEME_DAWN":                         1236,
		"THEME_DAY":                          1237,
		"THEME_DAYTIME":                      1238,
		"THEME_DECEMBER":                     1239,
		"THEME_ETERNITY":                     1240,
		"THEME_EVERYDAY":                     1241,
		"THEME_AUTUMN":                       1242,
		"THEME_FEBRUARY":                     1243,
		"THEME_FRIDAY":                       1244,
		"THEME_FUTURE":                       1245,
		"THEME_GENERAL":                      1246,
		"THEME_GOODNIGHT":                    1247,
		"THEME_GROWOLDER":                    1248,
		"THEME_GROWUP":                       1249,
		"THEME_HISTORY":                      1250,
		"THEME_HUMAN":                        1251,
		"THEME_JANUARY":                      1252,
		"THEME_JULY":                         1253,
		"THEME_JUNE":                         1254,
		"THEME_LASTNIGHT":                    1255,
		"THEME_LATE":                         1256,
		"THEME_MARCH":                        1257,
		"THEME_MAY":                          1258,
		"THEME_MIDNIGHT":                     1259,
		"THEME_MONDAY":                       1260,
		"THEME_MONTH":                        1261,
		"THEME_MORNING":                      1262,
		"THEME_NEW":                          1263,
		"THEME_NEWDAY":                       1264,
		"THEME_NIGHT":                        1265,
		"THEME_NOON":                         1266,
		"THEME_NOVEMBER":                     1267,
		"THEME_NOW":                          1268,
		"THEME_OCTOBER":                      1269,
		"THEME_OLD":                          1270,
		"THEME_PAST":                         1271,
		"THEME_PRESENT":                      1272,
		"THEME_SATURDAY":                     1273,
		"THEME_SEASON":                       1274,
		"THEME_SEPTEMBER":                    1275,
		"THEME_SPECIFICAGE":                  1276,
		"THEME_SPECIFICTIME":                 1277,
		"THEME_SPRING":                       1278,
		"THEME_SUMMER":                       1279,
		"THEME_SUNDAY":                       1280,
		"THEME_SUNRISE":                      1281,
		"THEME_THURSDAY":                     1282,
		"THEME_TIME":                         1283,
		"THEME_TIMEOFDAY":                    1284,
		"THEME_TODAY":                        1285,
		"THEME_TOMORROW":                     1286,
		"THEME_TONIGHT":                      1287,
		"THEME_TRADITION":                    1288,
		"THEME_TUESDAY":                      1289,
		"THEME_WEDNESDAY":                    1290,
		"THEME_WEEK":                         1291,
		"THEME_WEEKEND":                      1292,
		"THEME_WINTER":                       1293,
		"THEME_YESTERDAY":                    1294,
		"THEME_DOMESTICVIOLENCE":             1295,
		"THEME_FIGHT":                        1296,
		"THEME_GENOCIDE":                     1297,
		"THEME_MURDER":                       1298,
		"THEME_VIOLENCE":                     1299,
		"THEME_USERDEFINED":                  1300,
		"THEME_DINNER":                       1301,
		"THEME_FOCUS":                        1302,
		"THEME_FUNERAL":                      1303,
		"THEME_HANGOUT":                      1304,
		"THEME_KARAOKE":                      1305,
		"THEME_MEDITATION":                   1306,
		"THEME_ROADTRIP":                     1307,
		"THEME_VICTORY":                      1308,
		"THEME_WAKING":                       1309,
		"THEME_WORKOUT":                      1310,
		"THEME_WORSHIP":                      1311,
		"THEME_YOGA":                         1312,
	}
)

func (x Theme) Enum() *Theme {
	p := new(Theme)
	*p = x
	return p
}

func (x Theme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Theme) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[176].Descriptor()
}

func (Theme) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[176]
}

func (x Theme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Theme.Descriptor instead.
func (Theme) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{176}
}

type ThemeType int32

const (
	ThemeType_THEME_TYPE_UNSPECIFIED  ThemeType = 0
	ThemeType_THEME_TYPE_CLOSINGTHEME ThemeType = 1
	ThemeType_THEME_TYPE_MAINTHEME    ThemeType = 2
	ThemeType_THEME_TYPE_OPENINGTHEME ThemeType = 3
	ThemeType_THEME_TYPE_SEGMENTTHEME ThemeType = 4
	ThemeType_THEME_TYPE_TITLETHEME   ThemeType = 5
	ThemeType_THEME_TYPE_USERDEFINED  ThemeType = 6
)

// Enum value maps for ThemeType.
var (
	ThemeType_name = map[int32]string{
		0: "THEME_TYPE_UNSPECIFIED",
		1: "THEME_TYPE_CLOSINGTHEME",
		2: "THEME_TYPE_MAINTHEME",
		3: "THEME_TYPE_OPENINGTHEME",
		4: "THEME_TYPE_SEGMENTTHEME",
		5: "THEME_TYPE_TITLETHEME",
		6: "THEME_TYPE_USERDEFINED",
	}
	ThemeType_value = map[string]int32{
		"THEME_TYPE_UNSPECIFIED":  0,
		"THEME_TYPE_CLOSINGTHEME": 1,
		"THEME_TYPE_MAINTHEME":    2,
		"THEME_TYPE_OPENINGTHEME": 3,
		"THEME_TYPE_SEGMENTTHEME": 4,
		"THEME_TYPE_TITLETHEME":   5,
		"THEME_TYPE_USERDEFINED":  6,
	}
)

func (x ThemeType) Enum() *ThemeType {
	p := new(ThemeType)
	*p = x
	return p
}

func (x ThemeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThemeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[177].Descriptor()
}

func (ThemeType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[177]
}

func (x ThemeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThemeType.Descriptor instead.
func (ThemeType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{177}
}

type TimecodeType int32

const (
	TimecodeType_TIMECODE_TYPE_UNSPECIFIED TimecodeType = 0
	TimecodeType_TIMECODE_TYPE_FSK         TimecodeType = 1
	TimecodeType_TIMECODE_TYPE_MIDI        TimecodeType = 2
	TimecodeType_TIMECODE_TYPE_SMPTE       TimecodeType = 3
	TimecodeType_TIMECODE_TYPE_VITC        TimecodeType = 4
)

// Enum value maps for TimecodeType.
var (
	TimecodeType_name = map[int32]string{
		0: "TIMECODE_TYPE_UNSPECIFIED",
		1: "TIMECODE_TYPE_FSK",
		2: "TIMECODE_TYPE_MIDI",
		3: "TIMECODE_TYPE_SMPTE",
		4: "TIMECODE_TYPE_VITC",
	}
	TimecodeType_value = map[string]int32{
		"TIMECODE_TYPE_UNSPECIFIED": 0,
		"TIMECODE_TYPE_FSK":         1,
		"TIMECODE_TYPE_MIDI":        2,
		"TIMECODE_TYPE_SMPTE":       3,
		"TIMECODE_TYPE_VITC":        4,
	}
)

func (x TimecodeType) Enum() *TimecodeType {
	p := new(TimecodeType)
	*p = x
	return p
}

func (x TimecodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimecodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[178].Descriptor()
}

func (TimecodeType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[178]
}

func (x TimecodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimecodeType.Descriptor instead.
func (TimecodeType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{178}
}

type TisTerritoryCode int32

const (
	TisTerritoryCode_TIS_TERRITORY_CODE_UNSPECIFIED TisTerritoryCode = 0
	TisTerritoryCode_TIS_TERRITORY_CODE_E_4         TisTerritoryCode = 1
	TisTerritoryCode_TIS_TERRITORY_CODE_E_8         TisTerritoryCode = 2
	TisTerritoryCode_TIS_TERRITORY_CODE_E_12        TisTerritoryCode = 3
	TisTerritoryCode_TIS_TERRITORY_CODE_E_20        TisTerritoryCode = 4
	TisTerritoryCode_TIS_TERRITORY_CODE_E_24        TisTerritoryCode = 5
	TisTerritoryCode_TIS_TERRITORY_CODE_E_28        TisTerritoryCode = 6
	TisTerritoryCode_TIS_TERRITORY_CODE_E_31        TisTerritoryCode = 7
	TisTerritoryCode_TIS_TERRITORY_CODE_E_32        TisTerritoryCode = 8
	TisTerritoryCode_TIS_TERRITORY_CODE_E_36        TisTerritoryCode = 9
	TisTerritoryCode_TIS_TERRITORY_CODE_E_40        TisTerritoryCode = 10
	TisTerritoryCode_TIS_TERRITORY_CODE_E_44        TisTerritoryCode = 11
	TisTerritoryCode_TIS_TERRITORY_CODE_E_48        TisTerritoryCode = 12
	TisTerritoryCode_TIS_TERRITORY_CODE_E_50        TisTerritoryCode = 13
	TisTerritoryCode_TIS_TERRITORY_CODE_E_51        TisTerritoryCode = 14
	TisTerritoryCode_TIS_TERRITORY_CODE_E_52        TisTerritoryCode = 15
	TisTerritoryCode_TIS_TERRITORY_CODE_E_56        TisTerritoryCode = 16
	TisTerritoryCode_TIS_TERRITORY_CODE_E_64        TisTerritoryCode = 17
	TisTerritoryCode_TIS_TERRITORY_CODE_E_68        TisTerritoryCode = 18
	TisTerritoryCode_TIS_TERRITORY_CODE_E_70        TisTerritoryCode = 19
	TisTerritoryCode_TIS_TERRITORY_CODE_E_72        TisTerritoryCode = 20
	TisTerritoryCode_TIS_TERRITORY_CODE_E_76        TisTerritoryCode = 21
	TisTerritoryCode_TIS_TERRITORY_CODE_E_84        TisTerritoryCode = 22
	TisTerritoryCode_TIS_TERRITORY_CODE_E_90        TisTerritoryCode = 23
	TisTerritoryCode_TIS_TERRITORY_CODE_E_96        TisTerritoryCode = 24
	TisTerritoryCode_TIS_TERRITORY_CODE_E_100       TisTerritoryCode = 25
	TisTerritoryCode_TIS_TERRITORY_CODE_E_104       TisTerritoryCode = 26
	TisTerritoryCode_TIS_TERRITORY_CODE_E_108       TisTerritoryCode = 27
	TisTerritoryCode_TIS_TERRITORY_CODE_E_112       TisTerritoryCode = 28
	TisTerritoryCode_TIS_TERRITORY_CODE_E_116       TisTerritoryCode = 29
	TisTerritoryCode_TIS_TERRITORY_CODE_E_120       TisTerritoryCode = 30
	TisTerritoryCode_TIS_TERRITORY_CODE_E_124       TisTerritoryCode = 31
	TisTerritoryCode_TIS_TERRITORY_CODE_E_132       TisTerritoryCode = 32
	TisTerritoryCode_TIS_TERRITORY_CODE_E_140       TisTerritoryCode = 33
	TisTerritoryCode_TIS_TERRITORY_CODE_E_144       TisTerritoryCode = 34
	TisTerritoryCode_TIS_TERRITORY_CODE_E_148       TisTerritoryCode = 35
	TisTerritoryCode_TIS_TERRITORY_CODE_E_152       TisTerritoryCode = 36
	TisTerritoryCode_TIS_TERRITORY_CODE_E_156       TisTerritoryCode = 37
	TisTerritoryCode_TIS_TERRITORY_CODE_E_158       TisTerritoryCode = 38
	TisTerritoryCode_TIS_TERRITORY_CODE_E_170       TisTerritoryCode = 39
	TisTerritoryCode_TIS_TERRITORY_CODE_E_174       TisTerritoryCode = 40
	TisTerritoryCode_TIS_TERRITORY_CODE_E_178       TisTerritoryCode = 41
	TisTerritoryCode_TIS_TERRITORY_CODE_E_180       TisTerritoryCode = 42
	TisTerritoryCode_TIS_TERRITORY_CODE_E_188       TisTerritoryCode = 43
	TisTerritoryCode_TIS_TERRITORY_CODE_E_191       TisTerritoryCode = 44
	TisTerritoryCode_TIS_TERRITORY_CODE_E_192       TisTerritoryCode = 45
	TisTerritoryCode_TIS_TERRITORY_CODE_E_196       TisTerritoryCode = 46
	TisTerritoryCode_TIS_TERRITORY_CODE_E_200       TisTerritoryCode = 47
	TisTerritoryCode_TIS_TERRITORY_CODE_E_203       TisTerritoryCode = 48
	TisTerritoryCode_TIS_TERRITORY_CODE_E_204       TisTerritoryCode = 49
	TisTerritoryCode_TIS_TERRITORY_CODE_E_208       TisTerritoryCode = 50
	TisTerritoryCode_TIS_TERRITORY_CODE_E_212       TisTerritoryCode = 51
	TisTerritoryCode_TIS_TERRITORY_CODE_E_214       TisTerritoryCode = 52
	TisTerritoryCode_TIS_TERRITORY_CODE_E_218       TisTerritoryCode = 53
	TisTerritoryCode_TIS_TERRITORY_CODE_E_222       TisTerritoryCode = 54
	TisTerritoryCode_TIS_TERRITORY_CODE_E_226       TisTerritoryCode = 55
	TisTerritoryCode_TIS_TERRITORY_CODE_E_230       TisTerritoryCode = 56
	TisTerritoryCode_TIS_TERRITORY_CODE_E_231       TisTerritoryCode = 57
	TisTerritoryCode_TIS_TERRITORY_CODE_E_232       TisTerritoryCode = 58
	TisTerritoryCode_TIS_TERRITORY_CODE_E_233       TisTerritoryCode = 59
	TisTerritoryCode_TIS_TERRITORY_CODE_E_242       TisTerritoryCode = 60
	TisTerritoryCode_TIS_TERRITORY_CODE_E_246       TisTerritoryCode = 61
	TisTerritoryCode_TIS_TERRITORY_CODE_E_250       TisTerritoryCode = 62
	TisTerritoryCode_TIS_TERRITORY_CODE_E_258       TisTerritoryCode = 63
	TisTerritoryCode_TIS_TERRITORY_CODE_E_262       TisTerritoryCode = 64
	TisTerritoryCode_TIS_TERRITORY_CODE_E_266       TisTerritoryCode = 65
	TisTerritoryCode_TIS_TERRITORY_CODE_E_268       TisTerritoryCode = 66
	TisTerritoryCode_TIS_TERRITORY_CODE_E_270       TisTerritoryCode = 67
	TisTerritoryCode_TIS_TERRITORY_CODE_E_276       TisTerritoryCode = 68
	TisTerritoryCode_TIS_TERRITORY_CODE_E_278       TisTerritoryCode = 69
	TisTerritoryCode_TIS_TERRITORY_CODE_E_280       TisTerritoryCode = 70
	TisTerritoryCode_TIS_TERRITORY_CODE_E_288       TisTerritoryCode = 71
	TisTerritoryCode_TIS_TERRITORY_CODE_E_296       TisTerritoryCode = 72
	TisTerritoryCode_TIS_TERRITORY_CODE_E_300       TisTerritoryCode = 73
	TisTerritoryCode_TIS_TERRITORY_CODE_E_308       TisTerritoryCode = 74
	TisTerritoryCode_TIS_TERRITORY_CODE_E_320       TisTerritoryCode = 75
	TisTerritoryCode_TIS_TERRITORY_CODE_E_324       TisTerritoryCode = 76
	TisTerritoryCode_TIS_TERRITORY_CODE_E_328       TisTerritoryCode = 77
	TisTerritoryCode_TIS_TERRITORY_CODE_E_332       TisTerritoryCode = 78
	TisTerritoryCode_TIS_TERRITORY_CODE_E_336       TisTerritoryCode = 79
	TisTerritoryCode_TIS_TERRITORY_CODE_E_340       TisTerritoryCode = 80
	TisTerritoryCode_TIS_TERRITORY_CODE_E_344       TisTerritoryCode = 81
	TisTerritoryCode_TIS_TERRITORY_CODE_E_348       TisTerritoryCode = 82
	TisTerritoryCode_TIS_TERRITORY_CODE_E_352       TisTerritoryCode = 83
	TisTerritoryCode_TIS_TERRITORY_CODE_E_356       TisTerritoryCode = 84
	TisTerritoryCode_TIS_TERRITORY_CODE_E_360       TisTerritoryCode = 85
	TisTerritoryCode_TIS_TERRITORY_CODE_E_364       TisTerritoryCode = 86
	TisTerritoryCode_TIS_TERRITORY_CODE_E_368       TisTerritoryCode = 87
	TisTerritoryCode_TIS_TERRITORY_CODE_E_372       TisTerritoryCode = 88
	TisTerritoryCode_TIS_TERRITORY_CODE_E_376       TisTerritoryCode = 89
	TisTerritoryCode_TIS_TERRITORY_CODE_E_380       TisTerritoryCode = 90
	TisTerritoryCode_TIS_TERRITORY_CODE_E_384       TisTerritoryCode = 91
	TisTerritoryCode_TIS_TERRITORY_CODE_E_388       TisTerritoryCode = 92
	TisTerritoryCode_TIS_TERRITORY_CODE_E_392       TisTerritoryCode = 93
	TisTerritoryCode_TIS_TERRITORY_CODE_E_398       TisTerritoryCode = 94
	TisTerritoryCode_TIS_TERRITORY_CODE_E_400       TisTerritoryCode = 95
	TisTerritoryCode_TIS_TERRITORY_CODE_E_404       TisTerritoryCode = 96
	TisTerritoryCode_TIS_TERRITORY_CODE_E_408       TisTerritoryCode = 97
	TisTerritoryCode_TIS_TERRITORY_CODE_E_410       TisTerritoryCode = 98
	TisTerritoryCode_TIS_TERRITORY_CODE_E_414       TisTerritoryCode = 99
	TisTerritoryCode_TIS_TERRITORY_CODE_E_417       TisTerritoryCode = 100
	TisTerritoryCode_TIS_TERRITORY_CODE_E_418       TisTerritoryCode = 101
	TisTerritoryCode_TIS_TERRITORY_CODE_E_422       TisTerritoryCode = 102
	TisTerritoryCode_TIS_TERRITORY_CODE_E_426       TisTerritoryCode = 103
	TisTerritoryCode_TIS_TERRITORY_CODE_E_428       TisTerritoryCode = 104
	TisTerritoryCode_TIS_TERRITORY_CODE_E_430       TisTerritoryCode = 105
	TisTerritoryCode_TIS_TERRITORY_CODE_E_434       TisTerritoryCode = 106
	TisTerritoryCode_TIS_TERRITORY_CODE_E_438       TisTerritoryCode = 107
	TisTerritoryCode_TIS_TERRITORY_CODE_E_440       TisTerritoryCode = 108
	TisTerritoryCode_TIS_TERRITORY_CODE_E_442       TisTerritoryCode = 109
	TisTerritoryCode_TIS_TERRITORY_CODE_E_450       TisTerritoryCode = 110
	TisTerritoryCode_TIS_TERRITORY_CODE_E_454       TisTerritoryCode = 111
	TisTerritoryCode_TIS_TERRITORY_CODE_E_458       TisTerritoryCode = 112
	TisTerritoryCode_TIS_TERRITORY_CODE_E_462       TisTerritoryCode = 113
	TisTerritoryCode_TIS_TERRITORY_CODE_E_466       TisTerritoryCode = 114
	TisTerritoryCode_TIS_TERRITORY_CODE_E_470       TisTerritoryCode = 115
	TisTerritoryCode_TIS_TERRITORY_CODE_E_478       TisTerritoryCode = 116
	TisTerritoryCode_TIS_TERRITORY_CODE_E_480       TisTerritoryCode = 117
	TisTerritoryCode_TIS_TERRITORY_CODE_E_484       TisTerritoryCode = 118
	TisTerritoryCode_TIS_TERRITORY_CODE_E_492       TisTerritoryCode = 119
	TisTerritoryCode_TIS_TERRITORY_CODE_E_496       TisTerritoryCode = 120
	TisTerritoryCode_TIS_TERRITORY_CODE_E_498       TisTerritoryCode = 121
	TisTerritoryCode_TIS_TERRITORY_CODE_E_499       TisTerritoryCode = 122
	TisTerritoryCode_TIS_TERRITORY_CODE_E_504       TisTerritoryCode = 123
	TisTerritoryCode_TIS_TERRITORY_CODE_E_508       TisTerritoryCode = 124
	TisTerritoryCode_TIS_TERRITORY_CODE_E_512       TisTerritoryCode = 125
	TisTerritoryCode_TIS_TERRITORY_CODE_E_516       TisTerritoryCode = 126
	TisTerritoryCode_TIS_TERRITORY_CODE_E_520       TisTerritoryCode = 127
	TisTerritoryCode_TIS_TERRITORY_CODE_E_524       TisTerritoryCode = 128
	TisTerritoryCode_TIS_TERRITORY_CODE_E_528       TisTerritoryCode = 129
	TisTerritoryCode_TIS_TERRITORY_CODE_E_540       TisTerritoryCode = 130
	TisTerritoryCode_TIS_TERRITORY_CODE_E_548       TisTerritoryCode = 131
	TisTerritoryCode_TIS_TERRITORY_CODE_E_554       TisTerritoryCode = 132
	TisTerritoryCode_TIS_TERRITORY_CODE_E_558       TisTerritoryCode = 133
	TisTerritoryCode_TIS_TERRITORY_CODE_E_562       TisTerritoryCode = 134
	TisTerritoryCode_TIS_TERRITORY_CODE_E_566       TisTerritoryCode = 135
	TisTerritoryCode_TIS_TERRITORY_CODE_E_578       TisTerritoryCode = 136
	TisTerritoryCode_TIS_TERRITORY_CODE_E_583       TisTerritoryCode = 137
	TisTerritoryCode_TIS_TERRITORY_CODE_E_584       TisTerritoryCode = 138
	TisTerritoryCode_TIS_TERRITORY_CODE_E_585       TisTerritoryCode = 139
	TisTerritoryCode_TIS_TERRITORY_CODE_E_586       TisTerritoryCode = 140
	TisTerritoryCode_TIS_TERRITORY_CODE_E_591       TisTerritoryCode = 141
	TisTerritoryCode_TIS_TERRITORY_CODE_E_598       TisTerritoryCode = 142
	TisTerritoryCode_TIS_TERRITORY_CODE_E_600       TisTerritoryCode = 143
	TisTerritoryCode_TIS_TERRITORY_CODE_E_604       TisTerritoryCode = 144
	TisTerritoryCode_TIS_TERRITORY_CODE_E_608       TisTerritoryCode = 145
	TisTerritoryCode_TIS_TERRITORY_CODE_E_616       TisTerritoryCode = 146
	TisTerritoryCode_TIS_TERRITORY_CODE_E_620       TisTerritoryCode = 147
	TisTerritoryCode_TIS_TERRITORY_CODE_E_624       TisTerritoryCode = 148
	TisTerritoryCode_TIS_TERRITORY_CODE_E_626       TisTerritoryCode = 149
	TisTerritoryCode_TIS_TERRITORY_CODE_E_630       TisTerritoryCode = 150
	TisTerritoryCode_TIS_TERRITORY_CODE_E_634       TisTerritoryCode = 151
	TisTerritoryCode_TIS_TERRITORY_CODE_E_642       TisTerritoryCode = 152
	TisTerritoryCode_TIS_TERRITORY_CODE_E_643       TisTerritoryCode = 153
	TisTerritoryCode_TIS_TERRITORY_CODE_E_646       TisTerritoryCode = 154
	TisTerritoryCode_TIS_TERRITORY_CODE_E_659       TisTerritoryCode = 155
	TisTerritoryCode_TIS_TERRITORY_CODE_E_662       TisTerritoryCode = 156
	TisTerritoryCode_TIS_TERRITORY_CODE_E_670       TisTerritoryCode = 157
	TisTerritoryCode_TIS_TERRITORY_CODE_E_674       TisTerritoryCode = 158
	TisTerritoryCode_TIS_TERRITORY_CODE_E_678       TisTerritoryCode = 159
	TisTerritoryCode_TIS_TERRITORY_CODE_E_682       TisTerritoryCode = 160
	TisTerritoryCode_TIS_TERRITORY_CODE_E_686       TisTerritoryCode = 161
	TisTerritoryCode_TIS_TERRITORY_CODE_E_688       TisTerritoryCode = 162
	TisTerritoryCode_TIS_TERRITORY_CODE_E_690       TisTerritoryCode = 163
	TisTerritoryCode_TIS_TERRITORY_CODE_E_694       TisTerritoryCode = 164
	TisTerritoryCode_TIS_TERRITORY_CODE_E_702       TisTerritoryCode = 165
	TisTerritoryCode_TIS_TERRITORY_CODE_E_703       TisTerritoryCode = 166
	TisTerritoryCode_TIS_TERRITORY_CODE_E_704       TisTerritoryCode = 167
	TisTerritoryCode_TIS_TERRITORY_CODE_E_705       TisTerritoryCode = 168
	TisTerritoryCode_TIS_TERRITORY_CODE_E_706       TisTerritoryCode = 169
	TisTerritoryCode_TIS_TERRITORY_CODE_E_710       TisTerritoryCode = 170
	TisTerritoryCode_TIS_TERRITORY_CODE_E_716       TisTerritoryCode = 171
	TisTerritoryCode_TIS_TERRITORY_CODE_E_720       TisTerritoryCode = 172
	TisTerritoryCode_TIS_TERRITORY_CODE_E_724       TisTerritoryCode = 173
	TisTerritoryCode_TIS_TERRITORY_CODE_E_728       TisTerritoryCode = 174
	TisTerritoryCode_TIS_TERRITORY_CODE_E_729       TisTerritoryCode = 175
	TisTerritoryCode_TIS_TERRITORY_CODE_E_732       TisTerritoryCode = 176
	TisTerritoryCode_TIS_TERRITORY_CODE_E_736       TisTerritoryCode = 177
	TisTerritoryCode_TIS_TERRITORY_CODE_E_740       TisTerritoryCode = 178
	TisTerritoryCode_TIS_TERRITORY_CODE_E_748       TisTerritoryCode = 179
	TisTerritoryCode_TIS_TERRITORY_CODE_E_752       TisTerritoryCode = 180
	TisTerritoryCode_TIS_TERRITORY_CODE_E_756       TisTerritoryCode = 181
	TisTerritoryCode_TIS_TERRITORY_CODE_E_760       TisTerritoryCode = 182
	TisTerritoryCode_TIS_TERRITORY_CODE_E_762       TisTerritoryCode = 183
	TisTerritoryCode_TIS_TERRITORY_CODE_E_764       TisTerritoryCode = 184
	TisTerritoryCode_TIS_TERRITORY_CODE_E_768       TisTerritoryCode = 185
	TisTerritoryCode_TIS_TERRITORY_CODE_E_776       TisTerritoryCode = 186
	TisTerritoryCode_TIS_TERRITORY_CODE_E_780       TisTerritoryCode = 187
	TisTerritoryCode_TIS_TERRITORY_CODE_E_784       TisTerritoryCode = 188
	TisTerritoryCode_TIS_TERRITORY_CODE_E_788       TisTerritoryCode = 189
	TisTerritoryCode_TIS_TERRITORY_CODE_E_792       TisTerritoryCode = 190
	TisTerritoryCode_TIS_TERRITORY_CODE_E_795       TisTerritoryCode = 191
	TisTerritoryCode_TIS_TERRITORY_CODE_E_798       TisTerritoryCode = 192
	TisTerritoryCode_TIS_TERRITORY_CODE_E_800       TisTerritoryCode = 193
	TisTerritoryCode_TIS_TERRITORY_CODE_E_804       TisTerritoryCode = 194
	TisTerritoryCode_TIS_TERRITORY_CODE_E_807       TisTerritoryCode = 195
	TisTerritoryCode_TIS_TERRITORY_CODE_E_810       TisTerritoryCode = 196
	TisTerritoryCode_TIS_TERRITORY_CODE_E_818       TisTerritoryCode = 197
	TisTerritoryCode_TIS_TERRITORY_CODE_E_826       TisTerritoryCode = 198
	TisTerritoryCode_TIS_TERRITORY_CODE_E_834       TisTerritoryCode = 199
	TisTerritoryCode_TIS_TERRITORY_CODE_E_840       TisTerritoryCode = 200
	TisTerritoryCode_TIS_TERRITORY_CODE_E_854       TisTerritoryCode = 201
	TisTerritoryCode_TIS_TERRITORY_CODE_E_858       TisTerritoryCode = 202
	TisTerritoryCode_TIS_TERRITORY_CODE_E_860       TisTerritoryCode = 203
	TisTerritoryCode_TIS_TERRITORY_CODE_E_862       TisTerritoryCode = 204
	TisTerritoryCode_TIS_TERRITORY_CODE_E_882       TisTerritoryCode = 205
	TisTerritoryCode_TIS_TERRITORY_CODE_E_886       TisTerritoryCode = 206
	TisTerritoryCode_TIS_TERRITORY_CODE_E_887       TisTerritoryCode = 207
	TisTerritoryCode_TIS_TERRITORY_CODE_E_890       TisTerritoryCode = 208
	TisTerritoryCode_TIS_TERRITORY_CODE_E_891       TisTerritoryCode = 209
	TisTerritoryCode_TIS_TERRITORY_CODE_E_894       TisTerritoryCode = 210
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2100      TisTerritoryCode = 211
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2101      TisTerritoryCode = 212
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2102      TisTerritoryCode = 213
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2103      TisTerritoryCode = 214
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2104      TisTerritoryCode = 215
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2105      TisTerritoryCode = 216
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2106      TisTerritoryCode = 217
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2107      TisTerritoryCode = 218
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2108      TisTerritoryCode = 219
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2109      TisTerritoryCode = 220
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2110      TisTerritoryCode = 221
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2111      TisTerritoryCode = 222
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2112      TisTerritoryCode = 223
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2113      TisTerritoryCode = 224
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2114      TisTerritoryCode = 225
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2115      TisTerritoryCode = 226
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2116      TisTerritoryCode = 227
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2117      TisTerritoryCode = 228
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2118      TisTerritoryCode = 229
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2119      TisTerritoryCode = 230
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2120      TisTerritoryCode = 231
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2121      TisTerritoryCode = 232
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2122      TisTerritoryCode = 233
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2123      TisTerritoryCode = 234
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2124      TisTerritoryCode = 235
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2125      TisTerritoryCode = 236
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2126      TisTerritoryCode = 237
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2127      TisTerritoryCode = 238
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2128      TisTerritoryCode = 239
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2129      TisTerritoryCode = 240
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2130      TisTerritoryCode = 241
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2131      TisTerritoryCode = 242
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2132      TisTerritoryCode = 243
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2133      TisTerritoryCode = 244
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2134      TisTerritoryCode = 245
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2136      TisTerritoryCode = 246
	TisTerritoryCode_TIS_TERRITORY_CODE_E_446       TisTerritoryCode = 247
)

// Enum value maps for TisTerritoryCode.
var (
	TisTerritoryCode_name = map[int32]string{
		0:   "TIS_TERRITORY_CODE_UNSPECIFIED",
		1:   "TIS_TERRITORY_CODE_E_4",
		2:   "TIS_TERRITORY_CODE_E_8",
		3:   "TIS_TERRITORY_CODE_E_12",
		4:   "TIS_TERRITORY_CODE_E_20",
		5:   "TIS_TERRITORY_CODE_E_24",
		6:   "TIS_TERRITORY_CODE_E_28",
		7:   "TIS_TERRITORY_CODE_E_31",
		8:   "TIS_TERRITORY_CODE_E_32",
		9:   "TIS_TERRITORY_CODE_E_36",
		10:  "TIS_TERRITORY_CODE_E_40",
		11:  "TIS_TERRITORY_CODE_E_44",
		12:  "TIS_TERRITORY_CODE_E_48",
		13:  "TIS_TERRITORY_CODE_E_50",
		14:  "TIS_TERRITORY_CODE_E_51",
		15:  "TIS_TERRITORY_CODE_E_52",
		16:  "TIS_TERRITORY_CODE_E_56",
		17:  "TIS_TERRITORY_CODE_E_64",
		18:  "TIS_TERRITORY_CODE_E_68",
		19:  "TIS_TERRITORY_CODE_E_70",
		20:  "TIS_TERRITORY_CODE_E_72",
		21:  "TIS_TERRITORY_CODE_E_76",
		22:  "TIS_TERRITORY_CODE_E_84",
		23:  "TIS_TERRITORY_CODE_E_90",
		24:  "TIS_TERRITORY_CODE_E_96",
		25:  "TIS_TERRITORY_CODE_E_100",
		26:  "TIS_TERRITORY_CODE_E_104",
		27:  "TIS_TERRITORY_CODE_E_108",
		28:  "TIS_TERRITORY_CODE_E_112",
		29:  "TIS_TERRITORY_CODE_E_116",
		30:  "TIS_TERRITORY_CODE_E_120",
		31:  "TIS_TERRITORY_CODE_E_124",
		32:  "TIS_TERRITORY_CODE_E_132",
		33:  "TIS_TERRITORY_CODE_E_140",
		34:  "TIS_TERRITORY_CODE_E_144",
		35:  "TIS_TERRITORY_CODE_E_148",
		36:  "TIS_TERRITORY_CODE_E_152",
		37:  "TIS_TERRITORY_CODE_E_156",
		38:  "TIS_TERRITORY_CODE_E_158",
		39:  "TIS_TERRITORY_CODE_E_170",
		40:  "TIS_TERRITORY_CODE_E_174",
		41:  "TIS_TERRITORY_CODE_E_178",
		42:  "TIS_TERRITORY_CODE_E_180",
		43:  "TIS_TERRITORY_CODE_E_188",
		44:  "TIS_TERRITORY_CODE_E_191",
		45:  "TIS_TERRITORY_CODE_E_192",
		46:  "TIS_TERRITORY_CODE_E_196",
		47:  "TIS_TERRITORY_CODE_E_200",
		48:  "TIS_TERRITORY_CODE_E_203",
		49:  "TIS_TERRITORY_CODE_E_204",
		50:  "TIS_TERRITORY_CODE_E_208",
		51:  "TIS_TERRITORY_CODE_E_212",
		52:  "TIS_TERRITORY_CODE_E_214",
		53:  "TIS_TERRITORY_CODE_E_218",
		54:  "TIS_TERRITORY_CODE_E_222",
		55:  "TIS_TERRITORY_CODE_E_226",
		56:  "TIS_TERRITORY_CODE_E_230",
		57:  "TIS_TERRITORY_CODE_E_231",
		58:  "TIS_TERRITORY_CODE_E_232",
		59:  "TIS_TERRITORY_CODE_E_233",
		60:  "TIS_TERRITORY_CODE_E_242",
		61:  "TIS_TERRITORY_CODE_E_246",
		62:  "TIS_TERRITORY_CODE_E_250",
		63:  "TIS_TERRITORY_CODE_E_258",
		64:  "TIS_TERRITORY_CODE_E_262",
		65:  "TIS_TERRITORY_CODE_E_266",
		66:  "TIS_TERRITORY_CODE_E_268",
		67:  "TIS_TERRITORY_CODE_E_270",
		68:  "TIS_TERRITORY_CODE_E_276",
		69:  "TIS_TERRITORY_CODE_E_278",
		70:  "TIS_TERRITORY_CODE_E_280",
		71:  "TIS_TERRITORY_CODE_E_288",
		72:  "TIS_TERRITORY_CODE_E_296",
		73:  "TIS_TERRITORY_CODE_E_300",
		74:  "TIS_TERRITORY_CODE_E_308",
		75:  "TIS_TERRITORY_CODE_E_320",
		76:  "TIS_TERRITORY_CODE_E_324",
		77:  "TIS_TERRITORY_CODE_E_328",
		78:  "TIS_TERRITORY_CODE_E_332",
		79:  "TIS_TERRITORY_CODE_E_336",
		80:  "TIS_TERRITORY_CODE_E_340",
		81:  "TIS_TERRITORY_CODE_E_344",
		82:  "TIS_TERRITORY_CODE_E_348",
		83:  "TIS_TERRITORY_CODE_E_352",
		84:  "TIS_TERRITORY_CODE_E_356",
		85:  "TIS_TERRITORY_CODE_E_360",
		86:  "TIS_TERRITORY_CODE_E_364",
		87:  "TIS_TERRITORY_CODE_E_368",
		88:  "TIS_TERRITORY_CODE_E_372",
		89:  "TIS_TERRITORY_CODE_E_376",
		90:  "TIS_TERRITORY_CODE_E_380",
		91:  "TIS_TERRITORY_CODE_E_384",
		92:  "TIS_TERRITORY_CODE_E_388",
		93:  "TIS_TERRITORY_CODE_E_392",
		94:  "TIS_TERRITORY_CODE_E_398",
		95:  "TIS_TERRITORY_CODE_E_400",
		96:  "TIS_TERRITORY_CODE_E_404",
		97:  "TIS_TERRITORY_CODE_E_408",
		98:  "TIS_TERRITORY_CODE_E_410",
		99:  "TIS_TERRITORY_CODE_E_414",
		100: "TIS_TERRITORY_CODE_E_417",
		101: "TIS_TERRITORY_CODE_E_418",
		102: "TIS_TERRITORY_CODE_E_422",
		103: "TIS_TERRITORY_CODE_E_426",
		104: "TIS_TERRITORY_CODE_E_428",
		105: "TIS_TERRITORY_CODE_E_430",
		106: "TIS_TERRITORY_CODE_E_434",
		107: "TIS_TERRITORY_CODE_E_438",
		108: "TIS_TERRITORY_CODE_E_440",
		109: "TIS_TERRITORY_CODE_E_442",
		110: "TIS_TERRITORY_CODE_E_450",
		111: "TIS_TERRITORY_CODE_E_454",
		112: "TIS_TERRITORY_CODE_E_458",
		113: "TIS_TERRITORY_CODE_E_462",
		114: "TIS_TERRITORY_CODE_E_466",
		115: "TIS_TERRITORY_CODE_E_470",
		116: "TIS_TERRITORY_CODE_E_478",
		117: "TIS_TERRITORY_CODE_E_480",
		118: "TIS_TERRITORY_CODE_E_484",
		119: "TIS_TERRITORY_CODE_E_492",
		120: "TIS_TERRITORY_CODE_E_496",
		121: "TIS_TERRITORY_CODE_E_498",
		122: "TIS_TERRITORY_CODE_E_499",
		123: "TIS_TERRITORY_CODE_E_504",
		124: "TIS_TERRITORY_CODE_E_508",
		125: "TIS_TERRITORY_CODE_E_512",
		126: "TIS_TERRITORY_CODE_E_516",
		127: "TIS_TERRITORY_CODE_E_520",
		128: "TIS_TERRITORY_CODE_E_524",
		129: "TIS_TERRITORY_CODE_E_528",
		130: "TIS_TERRITORY_CODE_E_540",
		131: "TIS_TERRITORY_CODE_E_548",
		132: "TIS_TERRITORY_CODE_E_554",
		133: "TIS_TERRITORY_CODE_E_558",
		134: "TIS_TERRITORY_CODE_E_562",
		135: "TIS_TERRITORY_CODE_E_566",
		136: "TIS_TERRITORY_CODE_E_578",
		137: "TIS_TERRITORY_CODE_E_583",
		138: "TIS_TERRITORY_CODE_E_584",
		139: "TIS_TERRITORY_CODE_E_585",
		140: "TIS_TERRITORY_CODE_E_586",
		141: "TIS_TERRITORY_CODE_E_591",
		142: "TIS_TERRITORY_CODE_E_598",
		143: "TIS_TERRITORY_CODE_E_600",
		144: "TIS_TERRITORY_CODE_E_604",
		145: "TIS_TERRITORY_CODE_E_608",
		146: "TIS_TERRITORY_CODE_E_616",
		147: "TIS_TERRITORY_CODE_E_620",
		148: "TIS_TERRITORY_CODE_E_624",
		149: "TIS_TERRITORY_CODE_E_626",
		150: "TIS_TERRITORY_CODE_E_630",
		151: "TIS_TERRITORY_CODE_E_634",
		152: "TIS_TERRITORY_CODE_E_642",
		153: "TIS_TERRITORY_CODE_E_643",
		154: "TIS_TERRITORY_CODE_E_646",
		155: "TIS_TERRITORY_CODE_E_659",
		156: "TIS_TERRITORY_CODE_E_662",
		157: "TIS_TERRITORY_CODE_E_670",
		158: "TIS_TERRITORY_CODE_E_674",
		159: "TIS_TERRITORY_CODE_E_678",
		160: "TIS_TERRITORY_CODE_E_682",
		161: "TIS_TERRITORY_CODE_E_686",
		162: "TIS_TERRITORY_CODE_E_688",
		163: "TIS_TERRITORY_CODE_E_690",
		164: "TIS_TERRITORY_CODE_E_694",
		165: "TIS_TERRITORY_CODE_E_702",
		166: "TIS_TERRITORY_CODE_E_703",
		167: "TIS_TERRITORY_CODE_E_704",
		168: "TIS_TERRITORY_CODE_E_705",
		169: "TIS_TERRITORY_CODE_E_706",
		170: "TIS_TERRITORY_CODE_E_710",
		171: "TIS_TERRITORY_CODE_E_716",
		172: "TIS_TERRITORY_CODE_E_720",
		173: "TIS_TERRITORY_CODE_E_724",
		174: "TIS_TERRITORY_CODE_E_728",
		175: "TIS_TERRITORY_CODE_E_729",
		176: "TIS_TERRITORY_CODE_E_732",
		177: "TIS_TERRITORY_CODE_E_736",
		178: "TIS_TERRITORY_CODE_E_740",
		179: "TIS_TERRITORY_CODE_E_748",
		180: "TIS_TERRITORY_CODE_E_752",
		181: "TIS_TERRITORY_CODE_E_756",
		182: "TIS_TERRITORY_CODE_E_760",
		183: "TIS_TERRITORY_CODE_E_762",
		184: "TIS_TERRITORY_CODE_E_764",
		185: "TIS_TERRITORY_CODE_E_768",
		186: "TIS_TERRITORY_CODE_E_776",
		187: "TIS_TERRITORY_CODE_E_780",
		188: "TIS_TERRITORY_CODE_E_784",
		189: "TIS_TERRITORY_CODE_E_788",
		190: "TIS_TERRITORY_CODE_E_792",
		191: "TIS_TERRITORY_CODE_E_795",
		192: "TIS_TERRITORY_CODE_E_798",
		193: "TIS_TERRITORY_CODE_E_800",
		194: "TIS_TERRITORY_CODE_E_804",
		195: "TIS_TERRITORY_CODE_E_807",
		196: "TIS_TERRITORY_CODE_E_810",
		197: "TIS_TERRITORY_CODE_E_818",
		198: "TIS_TERRITORY_CODE_E_826",
		199: "TIS_TERRITORY_CODE_E_834",
		200: "TIS_TERRITORY_CODE_E_840",
		201: "TIS_TERRITORY_CODE_E_854",
		202: "TIS_TERRITORY_CODE_E_858",
		203: "TIS_TERRITORY_CODE_E_860",
		204: "TIS_TERRITORY_CODE_E_862",
		205: "TIS_TERRITORY_CODE_E_882",
		206: "TIS_TERRITORY_CODE_E_886",
		207: "TIS_TERRITORY_CODE_E_887",
		208: "TIS_TERRITORY_CODE_E_890",
		209: "TIS_TERRITORY_CODE_E_891",
		210: "TIS_TERRITORY_CODE_E_894",
		211: "TIS_TERRITORY_CODE_E_2100",
		212: "TIS_TERRITORY_CODE_E_2101",
		213: "TIS_TERRITORY_CODE_E_2102",
		214: "TIS_TERRITORY_CODE_E_2103",
		215: "TIS_TERRITORY_CODE_E_2104",
		216: "TIS_TERRITORY_CODE_E_2105",
		217: "TIS_TERRITORY_CODE_E_2106",
		218: "TIS_TERRITORY_CODE_E_2107",
		219: "TIS_TERRITORY_CODE_E_2108",
		220: "TIS_TERRITORY_CODE_E_2109",
		221: "TIS_TERRITORY_CODE_E_2110",
		222: "TIS_TERRITORY_CODE_E_2111",
		223: "TIS_TERRITORY_CODE_E_2112",
		224: "TIS_TERRITORY_CODE_E_2113",
		225: "TIS_TERRITORY_CODE_E_2114",
		226: "TIS_TERRITORY_CODE_E_2115",
		227: "TIS_TERRITORY_CODE_E_2116",
		228: "TIS_TERRITORY_CODE_E_2117",
		229: "TIS_TERRITORY_CODE_E_2118",
		230: "TIS_TERRITORY_CODE_E_2119",
		231: "TIS_TERRITORY_CODE_E_2120",
		232: "TIS_TERRITORY_CODE_E_2121",
		233: "TIS_TERRITORY_CODE_E_2122",
		234: "TIS_TERRITORY_CODE_E_2123",
		235: "TIS_TERRITORY_CODE_E_2124",
		236: "TIS_TERRITORY_CODE_E_2125",
		237: "TIS_TERRITORY_CODE_E_2126",
		238: "TIS_TERRITORY_CODE_E_2127",
		239: "TIS_TERRITORY_CODE_E_2128",
		240: "TIS_TERRITORY_CODE_E_2129",
		241: "TIS_TERRITORY_CODE_E_2130",
		242: "TIS_TERRITORY_CODE_E_2131",
		243: "TIS_TERRITORY_CODE_E_2132",
		244: "TIS_TERRITORY_CODE_E_2133",
		245: "TIS_TERRITORY_CODE_E_2134",
		246: "TIS_TERRITORY_CODE_E_2136",
		247: "TIS_TERRITORY_CODE_E_446",
	}
	TisTerritoryCode_value = map[string]int32{
		"TIS_TERRITORY_CODE_UNSPECIFIED": 0,
		"TIS_TERRITORY_CODE_E_4":         1,
		"TIS_TERRITORY_CODE_E_8":         2,
		"TIS_TERRITORY_CODE_E_12":        3,
		"TIS_TERRITORY_CODE_E_20":        4,
		"TIS_TERRITORY_CODE_E_24":        5,
		"TIS_TERRITORY_CODE_E_28":        6,
		"TIS_TERRITORY_CODE_E_31":        7,
		"TIS_TERRITORY_CODE_E_32":        8,
		"TIS_TERRITORY_CODE_E_36":        9,
		"TIS_TERRITORY_CODE_E_40":        10,
		"TIS_TERRITORY_CODE_E_44":        11,
		"TIS_TERRITORY_CODE_E_48":        12,
		"TIS_TERRITORY_CODE_E_50":        13,
		"TIS_TERRITORY_CODE_E_51":        14,
		"TIS_TERRITORY_CODE_E_52":        15,
		"TIS_TERRITORY_CODE_E_56":        16,
		"TIS_TERRITORY_CODE_E_64":        17,
		"TIS_TERRITORY_CODE_E_68":        18,
		"TIS_TERRITORY_CODE_E_70":        19,
		"TIS_TERRITORY_CODE_E_72":        20,
		"TIS_TERRITORY_CODE_E_76":        21,
		"TIS_TERRITORY_CODE_E_84":        22,
		"TIS_TERRITORY_CODE_E_90":        23,
		"TIS_TERRITORY_CODE_E_96":        24,
		"TIS_TERRITORY_CODE_E_100":       25,
		"TIS_TERRITORY_CODE_E_104":       26,
		"TIS_TERRITORY_CODE_E_108":       27,
		"TIS_TERRITORY_CODE_E_112":       28,
		"TIS_TERRITORY_CODE_E_116":       29,
		"TIS_TERRITORY_CODE_E_120":       30,
		"TIS_TERRITORY_CODE_E_124":       31,
		"TIS_TERRITORY_CODE_E_132":       32,
		"TIS_TERRITORY_CODE_E_140":       33,
		"TIS_TERRITORY_CODE_E_144":       34,
		"TIS_TERRITORY_CODE_E_148":       35,
		"TIS_TERRITORY_CODE_E_152":       36,
		"TIS_TERRITORY_CODE_E_156":       37,
		"TIS_TERRITORY_CODE_E_158":       38,
		"TIS_TERRITORY_CODE_E_170":       39,
		"TIS_TERRITORY_CODE_E_174":       40,
		"TIS_TERRITORY_CODE_E_178":       41,
		"TIS_TERRITORY_CODE_E_180":       42,
		"TIS_TERRITORY_CODE_E_188":       43,
		"TIS_TERRITORY_CODE_E_191":       44,
		"TIS_TERRITORY_CODE_E_192":       45,
		"TIS_TERRITORY_CODE_E_196":       46,
		"TIS_TERRITORY_CODE_E_200":       47,
		"TIS_TERRITORY_CODE_E_203":       48,
		"TIS_TERRITORY_CODE_E_204":       49,
		"TIS_TERRITORY_CODE_E_208":       50,
		"TIS_TERRITORY_CODE_E_212":       51,
		"TIS_TERRITORY_CODE_E_214":       52,
		"TIS_TERRITORY_CODE_E_218":       53,
		"TIS_TERRITORY_CODE_E_222":       54,
		"TIS_TERRITORY_CODE_E_226":       55,
		"TIS_TERRITORY_CODE_E_230":       56,
		"TIS_TERRITORY_CODE_E_231":       57,
		"TIS_TERRITORY_CODE_E_232":       58,
		"TIS_TERRITORY_CODE_E_233":       59,
		"TIS_TERRITORY_CODE_E_242":       60,
		"TIS_TERRITORY_CODE_E_246":       61,
		"TIS_TERRITORY_CODE_E_250":       62,
		"TIS_TERRITORY_CODE_E_258":       63,
		"TIS_TERRITORY_CODE_E_262":       64,
		"TIS_TERRITORY_CODE_E_266":       65,
		"TIS_TERRITORY_CODE_E_268":       66,
		"TIS_TERRITORY_CODE_E_270":       67,
		"TIS_TERRITORY_CODE_E_276":       68,
		"TIS_TERRITORY_CODE_E_278":       69,
		"TIS_TERRITORY_CODE_E_280":       70,
		"TIS_TERRITORY_CODE_E_288":       71,
		"TIS_TERRITORY_CODE_E_296":       72,
		"TIS_TERRITORY_CODE_E_300":       73,
		"TIS_TERRITORY_CODE_E_308":       74,
		"TIS_TERRITORY_CODE_E_320":       75,
		"TIS_TERRITORY_CODE_E_324":       76,
		"TIS_TERRITORY_CODE_E_328":       77,
		"TIS_TERRITORY_CODE_E_332":       78,
		"TIS_TERRITORY_CODE_E_336":       79,
		"TIS_TERRITORY_CODE_E_340":       80,
		"TIS_TERRITORY_CODE_E_344":       81,
		"TIS_TERRITORY_CODE_E_348":       82,
		"TIS_TERRITORY_CODE_E_352":       83,
		"TIS_TERRITORY_CODE_E_356":       84,
		"TIS_TERRITORY_CODE_E_360":       85,
		"TIS_TERRITORY_CODE_E_364":       86,
		"TIS_TERRITORY_CODE_E_368":       87,
		"TIS_TERRITORY_CODE_E_372":       88,
		"TIS_TERRITORY_CODE_E_376":       89,
		"TIS_TERRITORY_CODE_E_380":       90,
		"TIS_TERRITORY_CODE_E_384":       91,
		"TIS_TERRITORY_CODE_E_388":       92,
		"TIS_TERRITORY_CODE_E_392":       93,
		"TIS_TERRITORY_CODE_E_398":       94,
		"TIS_TERRITORY_CODE_E_400":       95,
		"TIS_TERRITORY_CODE_E_404":       96,
		"TIS_TERRITORY_CODE_E_408":       97,
		"TIS_TERRITORY_CODE_E_410":       98,
		"TIS_TERRITORY_CODE_E_414":       99,
		"TIS_TERRITORY_CODE_E_417":       100,
		"TIS_TERRITORY_CODE_E_418":       101,
		"TIS_TERRITORY_CODE_E_422":       102,
		"TIS_TERRITORY_CODE_E_426":       103,
		"TIS_TERRITORY_CODE_E_428":       104,
		"TIS_TERRITORY_CODE_E_430":       105,
		"TIS_TERRITORY_CODE_E_434":       106,
		"TIS_TERRITORY_CODE_E_438":       107,
		"TIS_TERRITORY_CODE_E_440":       108,
		"TIS_TERRITORY_CODE_E_442":       109,
		"TIS_TERRITORY_CODE_E_450":       110,
		"TIS_TERRITORY_CODE_E_454":       111,
		"TIS_TERRITORY_CODE_E_458":       112,
		"TIS_TERRITORY_CODE_E_462":       113,
		"TIS_TERRITORY_CODE_E_466":       114,
		"TIS_TERRITORY_CODE_E_470":       115,
		"TIS_TERRITORY_CODE_E_478":       116,
		"TIS_TERRITORY_CODE_E_480":       117,
		"TIS_TERRITORY_CODE_E_484":       118,
		"TIS_TERRITORY_CODE_E_492":       119,
		"TIS_TERRITORY_CODE_E_496":       120,
		"TIS_TERRITORY_CODE_E_498":       121,
		"TIS_TERRITORY_CODE_E_499":       122,
		"TIS_TERRITORY_CODE_E_504":       123,
		"TIS_TERRITORY_CODE_E_508":       124,
		"TIS_TERRITORY_CODE_E_512":       125,
		"TIS_TERRITORY_CODE_E_516":       126,
		"TIS_TERRITORY_CODE_E_520":       127,
		"TIS_TERRITORY_CODE_E_524":       128,
		"TIS_TERRITORY_CODE_E_528":       129,
		"TIS_TERRITORY_CODE_E_540":       130,
		"TIS_TERRITORY_CODE_E_548":       131,
		"TIS_TERRITORY_CODE_E_554":       132,
		"TIS_TERRITORY_CODE_E_558":       133,
		"TIS_TERRITORY_CODE_E_562":       134,
		"TIS_TERRITORY_CODE_E_566":       135,
		"TIS_TERRITORY_CODE_E_578":       136,
		"TIS_TERRITORY_CODE_E_583":       137,
		"TIS_TERRITORY_CODE_E_584":       138,
		"TIS_TERRITORY_CODE_E_585":       139,
		"TIS_TERRITORY_CODE_E_586":       140,
		"TIS_TERRITORY_CODE_E_591":       141,
		"TIS_TERRITORY_CODE_E_598":       142,
		"TIS_TERRITORY_CODE_E_600":       143,
		"TIS_TERRITORY_CODE_E_604":       144,
		"TIS_TERRITORY_CODE_E_608":       145,
		"TIS_TERRITORY_CODE_E_616":       146,
		"TIS_TERRITORY_CODE_E_620":       147,
		"TIS_TERRITORY_CODE_E_624":       148,
		"TIS_TERRITORY_CODE_E_626":       149,
		"TIS_TERRITORY_CODE_E_630":       150,
		"TIS_TERRITORY_CODE_E_634":       151,
		"TIS_TERRITORY_CODE_E_642":       152,
		"TIS_TERRITORY_CODE_E_643":       153,
		"TIS_TERRITORY_CODE_E_646":       154,
		"TIS_TERRITORY_CODE_E_659":       155,
		"TIS_TERRITORY_CODE_E_662":       156,
		"TIS_TERRITORY_CODE_E_670":       157,
		"TIS_TERRITORY_CODE_E_674":       158,
		"TIS_TERRITORY_CODE_E_678":       159,
		"TIS_TERRITORY_CODE_E_682":       160,
		"TIS_TERRITORY_CODE_E_686":       161,
		"TIS_TERRITORY_CODE_E_688":       162,
		"TIS_TERRITORY_CODE_E_690":       163,
		"TIS_TERRITORY_CODE_E_694":       164,
		"TIS_TERRITORY_CODE_E_702":       165,
		"TIS_TERRITORY_CODE_E_703":       166,
		"TIS_TERRITORY_CODE_E_704":       167,
		"TIS_TERRITORY_CODE_E_705":       168,
		"TIS_TERRITORY_CODE_E_706":       169,
		"TIS_TERRITORY_CODE_E_710":       170,
		"TIS_TERRITORY_CODE_E_716":       171,
		"TIS_TERRITORY_CODE_E_720":       172,
		"TIS_TERRITORY_CODE_E_724":       173,
		"TIS_TERRITORY_CODE_E_728":       174,
		"TIS_TERRITORY_CODE_E_729":       175,
		"TIS_TERRITORY_CODE_E_732":       176,
		"TIS_TERRITORY_CODE_E_736":       177,
		"TIS_TERRITORY_CODE_E_740":       178,
		"TIS_TERRITORY_CODE_E_748":       179,
		"TIS_TERRITORY_CODE_E_752":       180,
		"TIS_TERRITORY_CODE_E_756":       181,
		"TIS_TERRITORY_CODE_E_760":       182,
		"TIS_TERRITORY_CODE_E_762":       183,
		"TIS_TERRITORY_CODE_E_764":       184,
		"TIS_TERRITORY_CODE_E_768":       185,
		"TIS_TERRITORY_CODE_E_776":       186,
		"TIS_TERRITORY_CODE_E_780":       187,
		"TIS_TERRITORY_CODE_E_784":       188,
		"TIS_TERRITORY_CODE_E_788":       189,
		"TIS_TERRITORY_CODE_E_792":       190,
		"TIS_TERRITORY_CODE_E_795":       191,
		"TIS_TERRITORY_CODE_E_798":       192,
		"TIS_TERRITORY_CODE_E_800":       193,
		"TIS_TERRITORY_CODE_E_804":       194,
		"TIS_TERRITORY_CODE_E_807":       195,
		"TIS_TERRITORY_CODE_E_810":       196,
		"TIS_TERRITORY_CODE_E_818":       197,
		"TIS_TERRITORY_CODE_E_826":       198,
		"TIS_TERRITORY_CODE_E_834":       199,
		"TIS_TERRITORY_CODE_E_840":       200,
		"TIS_TERRITORY_CODE_E_854":       201,
		"TIS_TERRITORY_CODE_E_858":       202,
		"TIS_TERRITORY_CODE_E_860":       203,
		"TIS_TERRITORY_CODE_E_862":       204,
		"TIS_TERRITORY_CODE_E_882":       205,
		"TIS_TERRITORY_CODE_E_886":       206,
		"TIS_TERRITORY_CODE_E_887":       207,
		"TIS_TERRITORY_CODE_E_890":       208,
		"TIS_TERRITORY_CODE_E_891":       209,
		"TIS_TERRITORY_CODE_E_894":       210,
		"TIS_TERRITORY_CODE_E_2100":      211,
		"TIS_TERRITORY_CODE_E_2101":      212,
		"TIS_TERRITORY_CODE_E_2102":      213,
		"TIS_TERRITORY_CODE_E_2103":      214,
		"TIS_TERRITORY_CODE_E_2104":      215,
		"TIS_TERRITORY_CODE_E_2105":      216,
		"TIS_TERRITORY_CODE_E_2106":      217,
		"TIS_TERRITORY_CODE_E_2107":      218,
		"TIS_TERRITORY_CODE_E_2108":      219,
		"TIS_TERRITORY_CODE_E_2109":      220,
		"TIS_TERRITORY_CODE_E_2110":      221,
		"TIS_TERRITORY_CODE_E_2111":      222,
		"TIS_TERRITORY_CODE_E_2112":      223,
		"TIS_TERRITORY_CODE_E_2113":      224,
		"TIS_TERRITORY_CODE_E_2114":      225,
		"TIS_TERRITORY_CODE_E_2115":      226,
		"TIS_TERRITORY_CODE_E_2116":      227,
		"TIS_TERRITORY_CODE_E_2117":      228,
		"TIS_TERRITORY_CODE_E_2118":      229,
		"TIS_TERRITORY_CODE_E_2119":      230,
		"TIS_TERRITORY_CODE_E_2120":      231,
		"TIS_TERRITORY_CODE_E_2121":      232,
		"TIS_TERRITORY_CODE_E_2122":      233,
		"TIS_TERRITORY_CODE_E_2123":      234,
		"TIS_TERRITORY_CODE_E_2124":      235,
		"TIS_TERRITORY_CODE_E_2125":      236,
		"TIS_TERRITORY_CODE_E_2126":      237,
		"TIS_TERRITORY_CODE_E_2127":      238,
		"TIS_TERRITORY_CODE_E_2128":      239,
		"TIS_TERRITORY_CODE_E_2129":      240,
		"TIS_TERRITORY_CODE_E_2130":      241,
		"TIS_TERRITORY_CODE_E_2131":      242,
		"TIS_TERRITORY_CODE_E_2132":      243,
		"TIS_TERRITORY_CODE_E_2133":      244,
		"TIS_TERRITORY_CODE_E_2134":      245,
		"TIS_TERRITORY_CODE_E_2136":      246,
		"TIS_TERRITORY_CODE_E_446":       247,
	}
)

func (x TisTerritoryCode) Enum() *TisTerritoryCode {
	p := new(TisTerritoryCode)
	*p = x
	return p
}

func (x TisTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TisTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[179].Descriptor()
}

func (TisTerritoryCode) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[179]
}

func (x TisTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TisTerritoryCode.Descriptor instead.
func (TisTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{179}
}

type TitleType int32

const (
	TitleType_TITLE_TYPE_UNSPECIFIED             TitleType = 0
	TitleType_TITLE_TYPE_ABBREVIATEDDISPLAYTITLE TitleType = 1
	TitleType_TITLE_TYPE_ALTERNATIVETITLE        TitleType = 2
	TitleType_TITLE_TYPE_DISPLAYTITLE            TitleType = 3
	TitleType_TITLE_TYPE_FIRSTLINEOFTEXT         TitleType = 4
	TitleType_TITLE_TYPE_FORMALTITLE             TitleType = 5
	TitleType_TITLE_TYPE_GROUPINGTITLE           TitleType = 6
	TitleType_TITLE_TYPE_INCORRECTTITLE          TitleType = 7
	TitleType_TITLE_TYPE_MISSPELLEDTITLE         TitleType = 8
	TitleType_TITLE_TYPE_ORIGINALTITLE           TitleType = 9
	TitleType_TITLE_TYPE_SEARCHTITLE             TitleType = 10
	TitleType_TITLE_TYPE_SORTINGTITLE            TitleType = 11
	TitleType_TITLE_TYPE_TITLEASPART             TitleType = 12
	TitleType_TITLE_TYPE_TITLEWITHOUTPUNCTUATION TitleType = 13
	TitleType_TITLE_TYPE_TRANSLATEDTITLE         TitleType = 14
	TitleType_TITLE_TYPE_UNKNOWN                 TitleType = 15
	TitleType_TITLE_TYPE_USERDEFINED             TitleType = 16
	TitleType_TITLE_TYPE_MUSICALWORKTITLE        TitleType = 17
)

// Enum value maps for TitleType.
var (
	TitleType_name = map[int32]string{
		0:  "TITLE_TYPE_UNSPECIFIED",
		1:  "TITLE_TYPE_ABBREVIATEDDISPLAYTITLE",
		2:  "TITLE_TYPE_ALTERNATIVETITLE",
		3:  "TITLE_TYPE_DISPLAYTITLE",
		4:  "TITLE_TYPE_FIRSTLINEOFTEXT",
		5:  "TITLE_TYPE_FORMALTITLE",
		6:  "TITLE_TYPE_GROUPINGTITLE",
		7:  "TITLE_TYPE_INCORRECTTITLE",
		8:  "TITLE_TYPE_MISSPELLEDTITLE",
		9:  "TITLE_TYPE_ORIGINALTITLE",
		10: "TITLE_TYPE_SEARCHTITLE",
		11: "TITLE_TYPE_SORTINGTITLE",
		12: "TITLE_TYPE_TITLEASPART",
		13: "TITLE_TYPE_TITLEWITHOUTPUNCTUATION",
		14: "TITLE_TYPE_TRANSLATEDTITLE",
		15: "TITLE_TYPE_UNKNOWN",
		16: "TITLE_TYPE_USERDEFINED",
		17: "TITLE_TYPE_MUSICALWORKTITLE",
	}
	TitleType_value = map[string]int32{
		"TITLE_TYPE_UNSPECIFIED":             0,
		"TITLE_TYPE_ABBREVIATEDDISPLAYTITLE": 1,
		"TITLE_TYPE_ALTERNATIVETITLE":        2,
		"TITLE_TYPE_DISPLAYTITLE":            3,
		"TITLE_TYPE_FIRSTLINEOFTEXT":         4,
		"TITLE_TYPE_FORMALTITLE":             5,
		"TITLE_TYPE_GROUPINGTITLE":           6,
		"TITLE_TYPE_INCORRECTTITLE":          7,
		"TITLE_TYPE_MISSPELLEDTITLE":         8,
		"TITLE_TYPE_ORIGINALTITLE":           9,
		"TITLE_TYPE_SEARCHTITLE":             10,
		"TITLE_TYPE_SORTINGTITLE":            11,
		"TITLE_TYPE_TITLEASPART":             12,
		"TITLE_TYPE_TITLEWITHOUTPUNCTUATION": 13,
		"TITLE_TYPE_TRANSLATEDTITLE":         14,
		"TITLE_TYPE_UNKNOWN":                 15,
		"TITLE_TYPE_USERDEFINED":             16,
		"TITLE_TYPE_MUSICALWORKTITLE":        17,
	}
)

func (x TitleType) Enum() *TitleType {
	p := new(TitleType)
	*p = x
	return p
}

func (x TitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[180].Descriptor()
}

func (TitleType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[180]
}

func (x TitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TitleType.Descriptor instead.
func (TitleType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{180}
}

type TransferCategory int32

const (
	TransferCategory_TRANSFER_CATEGORY_UNSPECIFIED              TransferCategory = 0
	TransferCategory_TRANSFER_CATEGORY_ALIGNMENTTONES           TransferCategory = 1
	TransferCategory_TRANSFER_CATEGORY_ANALOGTODIGITALCONVERTER TransferCategory = 2
	TransferCategory_TRANSFER_CATEGORY_BITDEPTH                 TransferCategory = 3
	TransferCategory_TRANSFER_CATEGORY_CARTRIDGE                TransferCategory = 4
	TransferCategory_TRANSFER_CATEGORY_NUMBEROFCHANNELS         TransferCategory = 5
	TransferCategory_TRANSFER_CATEGORY_CLOCKSOURCE              TransferCategory = 6
	TransferCategory_TRANSFER_CATEGORY_MATERIALCONDITION        TransferCategory = 7
	TransferCategory_TRANSFER_CATEGORY_CONVERSIONREFERENCELEVEL TransferCategory = 8
	TransferCategory_TRANSFER_CATEGORY_EMPHASIS                 TransferCategory = 9
	TransferCategory_TRANSFER_CATEGORY_MICPREAMP                TransferCategory = 10
	TransferCategory_TRANSFER_CATEGORY_NOISEREDUCTION           TransferCategory = 11
	TransferCategory_TRANSFER_CATEGORY_PHONOPREAMP              TransferCategory = 12
	TransferCategory_TRANSFER_CATEGORY_REFERENCECLOCK           TransferCategory = 13
	TransferCategory_TRANSFER_CATEGORY_REFERENCETONES           TransferCategory = 14
	TransferCategory_TRANSFER_CATEGORY_SAMPLINGRATE             TransferCategory = 15
	TransferCategory_TRANSFER_CATEGORY_SIDE1CONDITION           TransferCategory = 16
	TransferCategory_TRANSFER_CATEGORY_SIDE2CONDITION           TransferCategory = 17
	TransferCategory_TRANSFER_CATEGORY_NUMBEROFSIDES            TransferCategory = 18
	TransferCategory_TRANSFER_CATEGORY_SMPTEFRAMERATE           TransferCategory = 19
	TransferCategory_TRANSFER_CATEGORY_SOURCEMACHINE            TransferCategory = 20
	TransferCategory_TRANSFER_CATEGORY_SPEED                    TransferCategory = 21
	TransferCategory_TRANSFER_CATEGORY_STORAGE                  TransferCategory = 22
	TransferCategory_TRANSFER_CATEGORY_STYLUS                   TransferCategory = 23
	TransferCategory_TRANSFER_CATEGORY_STYLUSSIZE               TransferCategory = 24
	TransferCategory_TRANSFER_CATEGORY_TAPEBAKEDDATE            TransferCategory = 25
	TransferCategory_TRANSFER_CATEGORY_TAPEBAKEDEQUIPMENT       TransferCategory = 26
	TransferCategory_TRANSFER_CATEGORY_TAPEBAKEDHOURS           TransferCategory = 27
	TransferCategory_TRANSFER_CATEGORY_TAPEBAKEDTEMPERATURE     TransferCategory = 28
	TransferCategory_TRANSFER_CATEGORY_TAPECOOLHOURS            TransferCategory = 29
	TransferCategory_TRANSFER_CATEGORY_TONEARM                  TransferCategory = 30
	TransferCategory_TRANSFER_CATEGORY_TRACKCONFIGURATION       TransferCategory = 31
	TransferCategory_TRANSFER_CATEGORY_NUMBEROFTRACKS           TransferCategory = 32
	TransferCategory_TRANSFER_CATEGORY_TRANSFERSOFTWARE         TransferCategory = 33
)

// Enum value maps for TransferCategory.
var (
	TransferCategory_name = map[int32]string{
		0:  "TRANSFER_CATEGORY_UNSPECIFIED",
		1:  "TRANSFER_CATEGORY_ALIGNMENTTONES",
		2:  "TRANSFER_CATEGORY_ANALOGTODIGITALCONVERTER",
		3:  "TRANSFER_CATEGORY_BITDEPTH",
		4:  "TRANSFER_CATEGORY_CARTRIDGE",
		5:  "TRANSFER_CATEGORY_NUMBEROFCHANNELS",
		6:  "TRANSFER_CATEGORY_CLOCKSOURCE",
		7:  "TRANSFER_CATEGORY_MATERIALCONDITION",
		8:  "TRANSFER_CATEGORY_CONVERSIONREFERENCELEVEL",
		9:  "TRANSFER_CATEGORY_EMPHASIS",
		10: "TRANSFER_CATEGORY_MICPREAMP",
		11: "TRANSFER_CATEGORY_NOISEREDUCTION",
		12: "TRANSFER_CATEGORY_PHONOPREAMP",
		13: "TRANSFER_CATEGORY_REFERENCECLOCK",
		14: "TRANSFER_CATEGORY_REFERENCETONES",
		15: "TRANSFER_CATEGORY_SAMPLINGRATE",
		16: "TRANSFER_CATEGORY_SIDE1CONDITION",
		17: "TRANSFER_CATEGORY_SIDE2CONDITION",
		18: "TRANSFER_CATEGORY_NUMBEROFSIDES",
		19: "TRANSFER_CATEGORY_SMPTEFRAMERATE",
		20: "TRANSFER_CATEGORY_SOURCEMACHINE",
		21: "TRANSFER_CATEGORY_SPEED",
		22: "TRANSFER_CATEGORY_STORAGE",
		23: "TRANSFER_CATEGORY_STYLUS",
		24: "TRANSFER_CATEGORY_STYLUSSIZE",
		25: "TRANSFER_CATEGORY_TAPEBAKEDDATE",
		26: "TRANSFER_CATEGORY_TAPEBAKEDEQUIPMENT",
		27: "TRANSFER_CATEGORY_TAPEBAKEDHOURS",
		28: "TRANSFER_CATEGORY_TAPEBAKEDTEMPERATURE",
		29: "TRANSFER_CATEGORY_TAPECOOLHOURS",
		30: "TRANSFER_CATEGORY_TONEARM",
		31: "TRANSFER_CATEGORY_TRACKCONFIGURATION",
		32: "TRANSFER_CATEGORY_NUMBEROFTRACKS",
		33: "TRANSFER_CATEGORY_TRANSFERSOFTWARE",
	}
	TransferCategory_value = map[string]int32{
		"TRANSFER_CATEGORY_UNSPECIFIED":              0,
		"TRANSFER_CATEGORY_ALIGNMENTTONES":           1,
		"TRANSFER_CATEGORY_ANALOGTODIGITALCONVERTER": 2,
		"TRANSFER_CATEGORY_BITDEPTH":                 3,
		"TRANSFER_CATEGORY_CARTRIDGE":                4,
		"TRANSFER_CATEGORY_NUMBEROFCHANNELS":         5,
		"TRANSFER_CATEGORY_CLOCKSOURCE":              6,
		"TRANSFER_CATEGORY_MATERIALCONDITION":        7,
		"TRANSFER_CATEGORY_CONVERSIONREFERENCELEVEL": 8,
		"TRANSFER_CATEGORY_EMPHASIS":                 9,
		"TRANSFER_CATEGORY_MICPREAMP":                10,
		"TRANSFER_CATEGORY_NOISEREDUCTION":           11,
		"TRANSFER_CATEGORY_PHONOPREAMP":              12,
		"TRANSFER_CATEGORY_REFERENCECLOCK":           13,
		"TRANSFER_CATEGORY_REFERENCETONES":           14,
		"TRANSFER_CATEGORY_SAMPLINGRATE":             15,
		"TRANSFER_CATEGORY_SIDE1CONDITION":           16,
		"TRANSFER_CATEGORY_SIDE2CONDITION":           17,
		"TRANSFER_CATEGORY_NUMBEROFSIDES":            18,
		"TRANSFER_CATEGORY_SMPTEFRAMERATE":           19,
		"TRANSFER_CATEGORY_SOURCEMACHINE":            20,
		"TRANSFER_CATEGORY_SPEED":                    21,
		"TRANSFER_CATEGORY_STORAGE":                  22,
		"TRANSFER_CATEGORY_STYLUS":                   23,
		"TRANSFER_CATEGORY_STYLUSSIZE":               24,
		"TRANSFER_CATEGORY_TAPEBAKEDDATE":            25,
		"TRANSFER_CATEGORY_TAPEBAKEDEQUIPMENT":       26,
		"TRANSFER_CATEGORY_TAPEBAKEDHOURS":           27,
		"TRANSFER_CATEGORY_TAPEBAKEDTEMPERATURE":     28,
		"TRANSFER_CATEGORY_TAPECOOLHOURS":            29,
		"TRANSFER_CATEGORY_TONEARM":                  30,
		"TRANSFER_CATEGORY_TRACKCONFIGURATION":       31,
		"TRANSFER_CATEGORY_NUMBEROFTRACKS":           32,
		"TRANSFER_CATEGORY_TRANSFERSOFTWARE":         33,
	}
)

func (x TransferCategory) Enum() *TransferCategory {
	p := new(TransferCategory)
	*p = x
	return p
}

func (x TransferCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[181].Descriptor()
}

func (TransferCategory) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[181]
}

func (x TransferCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferCategory.Descriptor instead.
func (TransferCategory) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{181}
}

type TransferType int32

const (
	TransferType_TRANSFER_TYPE_UNSPECIFIED      TransferType = 0
	TransferType_TRANSFER_TYPE_ANALOGTOANALOG   TransferType = 1
	TransferType_TRANSFER_TYPE_ANALOGTODIGITAL  TransferType = 2
	TransferType_TRANSFER_TYPE_DIGITALCOPY      TransferType = 3
	TransferType_TRANSFER_TYPE_DIGITALTOANALOG  TransferType = 4
	TransferType_TRANSFER_TYPE_DIGITALTODIGITAL TransferType = 5
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_UNSPECIFIED",
		1: "TRANSFER_TYPE_ANALOGTOANALOG",
		2: "TRANSFER_TYPE_ANALOGTODIGITAL",
		3: "TRANSFER_TYPE_DIGITALCOPY",
		4: "TRANSFER_TYPE_DIGITALTOANALOG",
		5: "TRANSFER_TYPE_DIGITALTODIGITAL",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED":      0,
		"TRANSFER_TYPE_ANALOGTOANALOG":   1,
		"TRANSFER_TYPE_ANALOGTODIGITAL":  2,
		"TRANSFER_TYPE_DIGITALCOPY":      3,
		"TRANSFER_TYPE_DIGITALTOANALOG":  4,
		"TRANSFER_TYPE_DIGITALTODIGITAL": 5,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[182].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[182]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{182}
}

type UnitOfBitRate int32

const (
	UnitOfBitRate_UNIT_OF_BIT_RATE_UNSPECIFIED UnitOfBitRate = 0
	UnitOfBitRate_UNIT_OF_BIT_RATE_BPS         UnitOfBitRate = 1
	UnitOfBitRate_UNIT_OF_BIT_RATE_GBPS        UnitOfBitRate = 2
	UnitOfBitRate_UNIT_OF_BIT_RATE_KBPS        UnitOfBitRate = 3
	UnitOfBitRate_UNIT_OF_BIT_RATE_MBPS        UnitOfBitRate = 4
)

// Enum value maps for UnitOfBitRate.
var (
	UnitOfBitRate_name = map[int32]string{
		0: "UNIT_OF_BIT_RATE_UNSPECIFIED",
		1: "UNIT_OF_BIT_RATE_BPS",
		2: "UNIT_OF_BIT_RATE_GBPS",
		3: "UNIT_OF_BIT_RATE_KBPS",
		4: "UNIT_OF_BIT_RATE_MBPS",
	}
	UnitOfBitRate_value = map[string]int32{
		"UNIT_OF_BIT_RATE_UNSPECIFIED": 0,
		"UNIT_OF_BIT_RATE_BPS":         1,
		"UNIT_OF_BIT_RATE_GBPS":        2,
		"UNIT_OF_BIT_RATE_KBPS":        3,
		"UNIT_OF_BIT_RATE_MBPS":        4,
	}
)

func (x UnitOfBitRate) Enum() *UnitOfBitRate {
	p := new(UnitOfBitRate)
	*p = x
	return p
}

func (x UnitOfBitRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfBitRate) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[183].Descriptor()
}

func (UnitOfBitRate) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[183]
}

func (x UnitOfBitRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfBitRate.Descriptor instead.
func (UnitOfBitRate) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{183}
}

type UnitOfConditionValue int32

const (
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_UNSPECIFIED UnitOfConditionValue = 0
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_MILLISECOND UnitOfConditionValue = 1
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_MINUTE      UnitOfConditionValue = 2
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_PERCENT     UnitOfConditionValue = 3
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_PIXEL       UnitOfConditionValue = 4
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_SECOND      UnitOfConditionValue = 5
)

// Enum value maps for UnitOfConditionValue.
var (
	UnitOfConditionValue_name = map[int32]string{
		0: "UNIT_OF_CONDITION_VALUE_UNSPECIFIED",
		1: "UNIT_OF_CONDITION_VALUE_MILLISECOND",
		2: "UNIT_OF_CONDITION_VALUE_MINUTE",
		3: "UNIT_OF_CONDITION_VALUE_PERCENT",
		4: "UNIT_OF_CONDITION_VALUE_PIXEL",
		5: "UNIT_OF_CONDITION_VALUE_SECOND",
	}
	UnitOfConditionValue_value = map[string]int32{
		"UNIT_OF_CONDITION_VALUE_UNSPECIFIED": 0,
		"UNIT_OF_CONDITION_VALUE_MILLISECOND": 1,
		"UNIT_OF_CONDITION_VALUE_MINUTE":      2,
		"UNIT_OF_CONDITION_VALUE_PERCENT":     3,
		"UNIT_OF_CONDITION_VALUE_PIXEL":       4,
		"UNIT_OF_CONDITION_VALUE_SECOND":      5,
	}
)

func (x UnitOfConditionValue) Enum() *UnitOfConditionValue {
	p := new(UnitOfConditionValue)
	*p = x
	return p
}

func (x UnitOfConditionValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfConditionValue) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[184].Descriptor()
}

func (UnitOfConditionValue) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[184]
}

func (x UnitOfConditionValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfConditionValue.Descriptor instead.
func (UnitOfConditionValue) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{184}
}

type UnitOfCuePoints int32

const (
	UnitOfCuePoints_UNIT_OF_CUE_POINTS_UNSPECIFIED UnitOfCuePoints = 0
	UnitOfCuePoints_UNIT_OF_CUE_POINTS_MILLISECOND UnitOfCuePoints = 1
	UnitOfCuePoints_UNIT_OF_CUE_POINTS_SECOND      UnitOfCuePoints = 2
)

// Enum value maps for UnitOfCuePoints.
var (
	UnitOfCuePoints_name = map[int32]string{
		0: "UNIT_OF_CUE_POINTS_UNSPECIFIED",
		1: "UNIT_OF_CUE_POINTS_MILLISECOND",
		2: "UNIT_OF_CUE_POINTS_SECOND",
	}
	UnitOfCuePoints_value = map[string]int32{
		"UNIT_OF_CUE_POINTS_UNSPECIFIED": 0,
		"UNIT_OF_CUE_POINTS_MILLISECOND": 1,
		"UNIT_OF_CUE_POINTS_SECOND":      2,
	}
)

func (x UnitOfCuePoints) Enum() *UnitOfCuePoints {
	p := new(UnitOfCuePoints)
	*p = x
	return p
}

func (x UnitOfCuePoints) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfCuePoints) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[185].Descriptor()
}

func (UnitOfCuePoints) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[185]
}

func (x UnitOfCuePoints) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfCuePoints.Descriptor instead.
func (UnitOfCuePoints) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{185}
}

type UnitOfDuration int32

const (
	UnitOfDuration_UNIT_OF_DURATION_UNSPECIFIED UnitOfDuration = 0
	UnitOfDuration_UNIT_OF_DURATION_DAY         UnitOfDuration = 1
	UnitOfDuration_UNIT_OF_DURATION_MONTH       UnitOfDuration = 2
	UnitOfDuration_UNIT_OF_DURATION_USERDEFINED UnitOfDuration = 3
	UnitOfDuration_UNIT_OF_DURATION_WEEK        UnitOfDuration = 4
)

// Enum value maps for UnitOfDuration.
var (
	UnitOfDuration_name = map[int32]string{
		0: "UNIT_OF_DURATION_UNSPECIFIED",
		1: "UNIT_OF_DURATION_DAY",
		2: "UNIT_OF_DURATION_MONTH",
		3: "UNIT_OF_DURATION_USERDEFINED",
		4: "UNIT_OF_DURATION_WEEK",
	}
	UnitOfDuration_value = map[string]int32{
		"UNIT_OF_DURATION_UNSPECIFIED": 0,
		"UNIT_OF_DURATION_DAY":         1,
		"UNIT_OF_DURATION_MONTH":       2,
		"UNIT_OF_DURATION_USERDEFINED": 3,
		"UNIT_OF_DURATION_WEEK":        4,
	}
)

func (x UnitOfDuration) Enum() *UnitOfDuration {
	p := new(UnitOfDuration)
	*p = x
	return p
}

func (x UnitOfDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[186].Descriptor()
}

func (UnitOfDuration) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[186]
}

func (x UnitOfDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfDuration.Descriptor instead.
func (UnitOfDuration) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{186}
}

type UnitOfExtent int32

const (
	UnitOfExtent_UNIT_OF_EXTENT_UNSPECIFIED     UnitOfExtent = 0
	UnitOfExtent_UNIT_OF_EXTENT_CM              UnitOfExtent = 1
	UnitOfExtent_UNIT_OF_EXTENT_INCH            UnitOfExtent = 2
	UnitOfExtent_UNIT_OF_EXTENT_MM              UnitOfExtent = 3
	UnitOfExtent_UNIT_OF_EXTENT_PERCENTOFSCREEN UnitOfExtent = 4
	UnitOfExtent_UNIT_OF_EXTENT_PIXEL           UnitOfExtent = 5
)

// Enum value maps for UnitOfExtent.
var (
	UnitOfExtent_name = map[int32]string{
		0: "UNIT_OF_EXTENT_UNSPECIFIED",
		1: "UNIT_OF_EXTENT_CM",
		2: "UNIT_OF_EXTENT_INCH",
		3: "UNIT_OF_EXTENT_MM",
		4: "UNIT_OF_EXTENT_PERCENTOFSCREEN",
		5: "UNIT_OF_EXTENT_PIXEL",
	}
	UnitOfExtent_value = map[string]int32{
		"UNIT_OF_EXTENT_UNSPECIFIED":     0,
		"UNIT_OF_EXTENT_CM":              1,
		"UNIT_OF_EXTENT_INCH":            2,
		"UNIT_OF_EXTENT_MM":              3,
		"UNIT_OF_EXTENT_PERCENTOFSCREEN": 4,
		"UNIT_OF_EXTENT_PIXEL":           5,
	}
)

func (x UnitOfExtent) Enum() *UnitOfExtent {
	p := new(UnitOfExtent)
	*p = x
	return p
}

func (x UnitOfExtent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfExtent) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[187].Descriptor()
}

func (UnitOfExtent) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[187]
}

func (x UnitOfExtent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfExtent.Descriptor instead.
func (UnitOfExtent) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{187}
}

type UnitOfFrameRate int32

const (
	UnitOfFrameRate_UNIT_OF_FRAME_RATE_UNSPECIFIED       UnitOfFrameRate = 0
	UnitOfFrameRate_UNIT_OF_FRAME_RATE_HZ_INTERLACED     UnitOfFrameRate = 1
	UnitOfFrameRate_UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED UnitOfFrameRate = 2
)

// Enum value maps for UnitOfFrameRate.
var (
	UnitOfFrameRate_name = map[int32]string{
		0: "UNIT_OF_FRAME_RATE_UNSPECIFIED",
		1: "UNIT_OF_FRAME_RATE_HZ_INTERLACED",
		2: "UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED",
	}
	UnitOfFrameRate_value = map[string]int32{
		"UNIT_OF_FRAME_RATE_UNSPECIFIED":       0,
		"UNIT_OF_FRAME_RATE_HZ_INTERLACED":     1,
		"UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED": 2,
	}
)

func (x UnitOfFrameRate) Enum() *UnitOfFrameRate {
	p := new(UnitOfFrameRate)
	*p = x
	return p
}

func (x UnitOfFrameRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfFrameRate) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[188].Descriptor()
}

func (UnitOfFrameRate) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[188]
}

func (x UnitOfFrameRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfFrameRate.Descriptor instead.
func (UnitOfFrameRate) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{188}
}

type UnitOfFrequency int32

const (
	UnitOfFrequency_UNIT_OF_FREQUENCY_UNSPECIFIED UnitOfFrequency = 0
	UnitOfFrequency_UNIT_OF_FREQUENCY_GHZ         UnitOfFrequency = 1
	UnitOfFrequency_UNIT_OF_FREQUENCY_HZ          UnitOfFrequency = 2
	UnitOfFrequency_UNIT_OF_FREQUENCY_KHZ         UnitOfFrequency = 3
	UnitOfFrequency_UNIT_OF_FREQUENCY_MHZ         UnitOfFrequency = 4
)

// Enum value maps for UnitOfFrequency.
var (
	UnitOfFrequency_name = map[int32]string{
		0: "UNIT_OF_FREQUENCY_UNSPECIFIED",
		1: "UNIT_OF_FREQUENCY_GHZ",
		2: "UNIT_OF_FREQUENCY_HZ",
		3: "UNIT_OF_FREQUENCY_KHZ",
		4: "UNIT_OF_FREQUENCY_MHZ",
	}
	UnitOfFrequency_value = map[string]int32{
		"UNIT_OF_FREQUENCY_UNSPECIFIED": 0,
		"UNIT_OF_FREQUENCY_GHZ":         1,
		"UNIT_OF_FREQUENCY_HZ":          2,
		"UNIT_OF_FREQUENCY_KHZ":         3,
		"UNIT_OF_FREQUENCY_MHZ":         4,
	}
)

func (x UnitOfFrequency) Enum() *UnitOfFrequency {
	p := new(UnitOfFrequency)
	*p = x
	return p
}

func (x UnitOfFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[189].Descriptor()
}

func (UnitOfFrequency) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[189]
}

func (x UnitOfFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfFrequency.Descriptor instead.
func (UnitOfFrequency) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{189}
}

type UnitTypeForRevenueAllocation int32

const (
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNSPECIFIED      UnitTypeForRevenueAllocation = 0
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_PERFORMANCE      UnitTypeForRevenueAllocation = 1
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_PLAY             UnitTypeForRevenueAllocation = 2
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECOND           UnitTypeForRevenueAllocation = 3
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_INDIVIDUALUSAGES UnitTypeForRevenueAllocation = 4
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECONDS          UnitTypeForRevenueAllocation = 5
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNITOFACCOUNTING UnitTypeForRevenueAllocation = 6
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_USAGES           UnitTypeForRevenueAllocation = 7
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_USERDEFINED      UnitTypeForRevenueAllocation = 8
)

// Enum value maps for UnitTypeForRevenueAllocation.
var (
	UnitTypeForRevenueAllocation_name = map[int32]string{
		0: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNSPECIFIED",
		1: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_PERFORMANCE",
		2: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_PLAY",
		3: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECOND",
		4: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_INDIVIDUALUSAGES",
		5: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECONDS",
		6: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNITOFACCOUNTING",
		7: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_USAGES",
		8: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_USERDEFINED",
	}
	UnitTypeForRevenueAllocation_value = map[string]int32{
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNSPECIFIED":      0,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_PERFORMANCE":      1,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_PLAY":             2,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECOND":           3,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_INDIVIDUALUSAGES": 4,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECONDS":          5,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNITOFACCOUNTING": 6,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_USAGES":           7,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_USERDEFINED":      8,
	}
)

func (x UnitTypeForRevenueAllocation) Enum() *UnitTypeForRevenueAllocation {
	p := new(UnitTypeForRevenueAllocation)
	*p = x
	return p
}

func (x UnitTypeForRevenueAllocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitTypeForRevenueAllocation) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[190].Descriptor()
}

func (UnitTypeForRevenueAllocation) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[190]
}

func (x UnitTypeForRevenueAllocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitTypeForRevenueAllocation.Descriptor instead.
func (UnitTypeForRevenueAllocation) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{190}
}

type UseType int32

const (
	UseType_USE_TYPE_UNSPECIFIED                    UseType = 0
	UseType_USE_TYPE_ASPERCONTRACT                  UseType = 1
	UseType_USE_TYPE_BROADCAST                      UseType = 2
	UseType_USE_TYPE_CABLE                          UseType = 3
	UseType_USE_TYPE_CONDITIONALDOWNLOAD            UseType = 4
	UseType_USE_TYPE_CONTENTINFLUENCEDSTREAM        UseType = 5
	UseType_USE_TYPE_DISPLAY                        UseType = 6
	UseType_USE_TYPE_DOWNLOAD                       UseType = 7
	UseType_USE_TYPE_DUB                            UseType = 8
	UseType_USE_TYPE_DUBFORADVERTISEMENT            UseType = 9
	UseType_USE_TYPE_DUBFORLIVEPERFORMANCE          UseType = 10
	UseType_USE_TYPE_DUBFORMOVIES                   UseType = 11
	UseType_USE_TYPE_DUBFORMUSICONHOLD              UseType = 12
	UseType_USE_TYPE_DUBFORPUBLICPERFORMANCE        UseType = 13
	UseType_USE_TYPE_DUBFORRADIO                    UseType = 14
	UseType_USE_TYPE_DUBFORTV                       UseType = 15
	UseType_USE_TYPE_EXTRACTFORINTERNET             UseType = 16
	UseType_USE_TYPE_KIOSKDOWNLOAD                  UseType = 17
	UseType_USE_TYPE_NARROWCAST                     UseType = 18
	UseType_USE_TYPE_NONINTERACTIVESTREAM           UseType = 19
	UseType_USE_TYPE_ONDEMANDSTREAM                 UseType = 20
	UseType_USE_TYPE_PERFORM                        UseType = 21
	UseType_USE_TYPE_PERFORMASMUSICONHOLD           UseType = 22
	UseType_USE_TYPE_PERFORMINLIVEPERFORMANCE       UseType = 23
	UseType_USE_TYPE_PERFORMINPUBLIC                UseType = 24
	UseType_USE_TYPE_PERMANENTDOWNLOAD              UseType = 25
	UseType_USE_TYPE_PLAYBACK                       UseType = 26
	UseType_USE_TYPE_PLAYINPUBLIC                   UseType = 27
	UseType_USE_TYPE_PODCAST                        UseType = 28
	UseType_USE_TYPE_PRINT                          UseType = 29
	UseType_USE_TYPE_PRIVATECOPY                    UseType = 30
	UseType_USE_TYPE_PURCHASEASPHYSICALPRODUCT      UseType = 31
	UseType_USE_TYPE_RENT                           UseType = 32
	UseType_USE_TYPE_SIMULCAST                      UseType = 33
	UseType_USE_TYPE_STREAM                         UseType = 34
	UseType_USE_TYPE_TETHEREDDOWNLOAD               UseType = 35
	UseType_USE_TYPE_TIMEINFLUENCEDSTREAM           UseType = 36
	UseType_USE_TYPE_UNKNOWN                        UseType = 37
	UseType_USE_TYPE_USE                            UseType = 38
	UseType_USE_TYPE_USEASALERTTONE                 UseType = 39
	UseType_USE_TYPE_USEASDEVICE                    UseType = 40
	UseType_USE_TYPE_USEASKARAOKE                   UseType = 41
	UseType_USE_TYPE_USEASRINGBACKTONE              UseType = 42
	UseType_USE_TYPE_USEASRINGBACKTUNE              UseType = 43
	UseType_USE_TYPE_USEASRINGTONE                  UseType = 44
	UseType_USE_TYPE_USEASRINGTUNE                  UseType = 45
	UseType_USE_TYPE_USEASSCREENSAVER               UseType = 46
	UseType_USE_TYPE_USEASVOICEMAIL                 UseType = 47
	UseType_USE_TYPE_USEASWALLPAPER                 UseType = 48
	UseType_USE_TYPE_USEFORIDENTIFICATION           UseType = 49
	UseType_USE_TYPE_USEINMOBILEPHONEMESSAGING      UseType = 50
	UseType_USE_TYPE_USEINPHONELISTENING            UseType = 51
	UseType_USE_TYPE_USERDEFINED                    UseType = 52
	UseType_USE_TYPE_USERMAKEAVAILABLELABELPROVIDED UseType = 53
	UseType_USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED  UseType = 54
	UseType_USE_TYPE_WEBCAST                        UseType = 55
	UseType_USE_TYPE_DUBFORONDEMANDSTREAMING        UseType = 56
)

// Enum value maps for UseType.
var (
	UseType_name = map[int32]string{
		0:  "USE_TYPE_UNSPECIFIED",
		1:  "USE_TYPE_ASPERCONTRACT",
		2:  "USE_TYPE_BROADCAST",
		3:  "USE_TYPE_CABLE",
		4:  "USE_TYPE_CONDITIONALDOWNLOAD",
		5:  "USE_TYPE_CONTENTINFLUENCEDSTREAM",
		6:  "USE_TYPE_DISPLAY",
		7:  "USE_TYPE_DOWNLOAD",
		8:  "USE_TYPE_DUB",
		9:  "USE_TYPE_DUBFORADVERTISEMENT",
		10: "USE_TYPE_DUBFORLIVEPERFORMANCE",
		11: "USE_TYPE_DUBFORMOVIES",
		12: "USE_TYPE_DUBFORMUSICONHOLD",
		13: "USE_TYPE_DUBFORPUBLICPERFORMANCE",
		14: "USE_TYPE_DUBFORRADIO",
		15: "USE_TYPE_DUBFORTV",
		16: "USE_TYPE_EXTRACTFORINTERNET",
		17: "USE_TYPE_KIOSKDOWNLOAD",
		18: "USE_TYPE_NARROWCAST",
		19: "USE_TYPE_NONINTERACTIVESTREAM",
		20: "USE_TYPE_ONDEMANDSTREAM",
		21: "USE_TYPE_PERFORM",
		22: "USE_TYPE_PERFORMASMUSICONHOLD",
		23: "USE_TYPE_PERFORMINLIVEPERFORMANCE",
		24: "USE_TYPE_PERFORMINPUBLIC",
		25: "USE_TYPE_PERMANENTDOWNLOAD",
		26: "USE_TYPE_PLAYBACK",
		27: "USE_TYPE_PLAYINPUBLIC",
		28: "USE_TYPE_PODCAST",
		29: "USE_TYPE_PRINT",
		30: "USE_TYPE_PRIVATECOPY",
		31: "USE_TYPE_PURCHASEASPHYSICALPRODUCT",
		32: "USE_TYPE_RENT",
		33: "USE_TYPE_SIMULCAST",
		34: "USE_TYPE_STREAM",
		35: "USE_TYPE_TETHEREDDOWNLOAD",
		36: "USE_TYPE_TIMEINFLUENCEDSTREAM",
		37: "USE_TYPE_UNKNOWN",
		38: "USE_TYPE_USE",
		39: "USE_TYPE_USEASALERTTONE",
		40: "USE_TYPE_USEASDEVICE",
		41: "USE_TYPE_USEASKARAOKE",
		42: "USE_TYPE_USEASRINGBACKTONE",
		43: "USE_TYPE_USEASRINGBACKTUNE",
		44: "USE_TYPE_USEASRINGTONE",
		45: "USE_TYPE_USEASRINGTUNE",
		46: "USE_TYPE_USEASSCREENSAVER",
		47: "USE_TYPE_USEASVOICEMAIL",
		48: "USE_TYPE_USEASWALLPAPER",
		49: "USE_TYPE_USEFORIDENTIFICATION",
		50: "USE_TYPE_USEINMOBILEPHONEMESSAGING",
		51: "USE_TYPE_USEINPHONELISTENING",
		52: "USE_TYPE_USERDEFINED",
		53: "USE_TYPE_USERMAKEAVAILABLELABELPROVIDED",
		54: "USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED",
		55: "USE_TYPE_WEBCAST",
		56: "USE_TYPE_DUBFORONDEMANDSTREAMING",
	}
	UseType_value = map[string]int32{
		"USE_TYPE_UNSPECIFIED":                    0,
		"USE_TYPE_ASPERCONTRACT":                  1,
		"USE_TYPE_BROADCAST":                      2,
		"USE_TYPE_CABLE":                          3,
		"USE_TYPE_CONDITIONALDOWNLOAD":            4,
		"USE_TYPE_CONTENTINFLUENCEDSTREAM":        5,
		"USE_TYPE_DISPLAY":                        6,
		"USE_TYPE_DOWNLOAD":                       7,
		"USE_TYPE_DUB":                            8,
		"USE_TYPE_DUBFORADVERTISEMENT":            9,
		"USE_TYPE_DUBFORLIVEPERFORMANCE":          10,
		"USE_TYPE_DUBFORMOVIES":                   11,
		"USE_TYPE_DUBFORMUSICONHOLD":              12,
		"USE_TYPE_DUBFORPUBLICPERFORMANCE":        13,
		"USE_TYPE_DUBFORRADIO":                    14,
		"USE_TYPE_DUBFORTV":                       15,
		"USE_TYPE_EXTRACTFORINTERNET":             16,
		"USE_TYPE_KIOSKDOWNLOAD":                  17,
		"USE_TYPE_NARROWCAST":                     18,
		"USE_TYPE_NONINTERACTIVESTREAM":           19,
		"USE_TYPE_ONDEMANDSTREAM":                 20,
		"USE_TYPE_PERFORM":                        21,
		"USE_TYPE_PERFORMASMUSICONHOLD":           22,
		"USE_TYPE_PERFORMINLIVEPERFORMANCE":       23,
		"USE_TYPE_PERFORMINPUBLIC":                24,
		"USE_TYPE_PERMANENTDOWNLOAD":              25,
		"USE_TYPE_PLAYBACK":                       26,
		"USE_TYPE_PLAYINPUBLIC":                   27,
		"USE_TYPE_PODCAST":                        28,
		"USE_TYPE_PRINT":                          29,
		"USE_TYPE_PRIVATECOPY":                    30,
		"USE_TYPE_PURCHASEASPHYSICALPRODUCT":      31,
		"USE_TYPE_RENT":                           32,
		"USE_TYPE_SIMULCAST":                      33,
		"USE_TYPE_STREAM":                         34,
		"USE_TYPE_TETHEREDDOWNLOAD":               35,
		"USE_TYPE_TIMEINFLUENCEDSTREAM":           36,
		"USE_TYPE_UNKNOWN":                        37,
		"USE_TYPE_USE":                            38,
		"USE_TYPE_USEASALERTTONE":                 39,
		"USE_TYPE_USEASDEVICE":                    40,
		"USE_TYPE_USEASKARAOKE":                   41,
		"USE_TYPE_USEASRINGBACKTONE":              42,
		"USE_TYPE_USEASRINGBACKTUNE":              43,
		"USE_TYPE_USEASRINGTONE":                  44,
		"USE_TYPE_USEASRINGTUNE":                  45,
		"USE_TYPE_USEASSCREENSAVER":               46,
		"USE_TYPE_USEASVOICEMAIL":                 47,
		"USE_TYPE_USEASWALLPAPER":                 48,
		"USE_TYPE_USEFORIDENTIFICATION":           49,
		"USE_TYPE_USEINMOBILEPHONEMESSAGING":      50,
		"USE_TYPE_USEINPHONELISTENING":            51,
		"USE_TYPE_USERDEFINED":                    52,
		"USE_TYPE_USERMAKEAVAILABLELABELPROVIDED": 53,
		"USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED":  54,
		"USE_TYPE_WEBCAST":                        55,
		"USE_TYPE_DUBFORONDEMANDSTREAMING":        56,
	}
)

func (x UseType) Enum() *UseType {
	p := new(UseType)
	*p = x
	return p
}

func (x UseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[191].Descriptor()
}

func (UseType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[191]
}

func (x UseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseType.Descriptor instead.
func (UseType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{191}
}

type UseTypeERN int32

const (
	UseTypeERN_USE_TYPE_E_R_N_UNSPECIFIED                    UseTypeERN = 0
	UseTypeERN_USE_TYPE_E_R_N_BROADCAST                      UseTypeERN = 1
	UseTypeERN_USE_TYPE_E_R_N_CABLE                          UseTypeERN = 2
	UseTypeERN_USE_TYPE_E_R_N_CONDITIONALDOWNLOAD            UseTypeERN = 3
	UseTypeERN_USE_TYPE_E_R_N_CONTENTINFLUENCEDSTREAM        UseTypeERN = 4
	UseTypeERN_USE_TYPE_E_R_N_DISPLAY                        UseTypeERN = 5
	UseTypeERN_USE_TYPE_E_R_N_DOWNLOAD                       UseTypeERN = 6
	UseTypeERN_USE_TYPE_E_R_N_DUB                            UseTypeERN = 7
	UseTypeERN_USE_TYPE_E_R_N_DUBFORADVERTISEMENT            UseTypeERN = 8
	UseTypeERN_USE_TYPE_E_R_N_DUBFORLIVEPERFORMANCE          UseTypeERN = 9
	UseTypeERN_USE_TYPE_E_R_N_DUBFORMOVIES                   UseTypeERN = 10
	UseTypeERN_USE_TYPE_E_R_N_DUBFORMUSICONHOLD              UseTypeERN = 11
	UseTypeERN_USE_TYPE_E_R_N_DUBFORPUBLICPERFORMANCE        UseTypeERN = 12
	UseTypeERN_USE_TYPE_E_R_N_DUBFORRADIO                    UseTypeERN = 13
	UseTypeERN_USE_TYPE_E_R_N_DUBFORTV                       UseTypeERN = 14
	UseTypeERN_USE_TYPE_E_R_N_EXTRACTFORINTERNET             UseTypeERN = 15
	UseTypeERN_USE_TYPE_E_R_N_KIOSKDOWNLOAD                  UseTypeERN = 16
	UseTypeERN_USE_TYPE_E_R_N_NARROWCAST                     UseTypeERN = 17
	UseTypeERN_USE_TYPE_E_R_N_NONINTERACTIVESTREAM           UseTypeERN = 18
	UseTypeERN_USE_TYPE_E_R_N_ONDEMANDSTREAM                 UseTypeERN = 19
	UseTypeERN_USE_TYPE_E_R_N_PERFORM                        UseTypeERN = 20
	UseTypeERN_USE_TYPE_E_R_N_PERFORMASMUSICONHOLD           UseTypeERN = 21
	UseTypeERN_USE_TYPE_E_R_N_PERFORMINLIVEPERFORMANCE       UseTypeERN = 22
	UseTypeERN_USE_TYPE_E_R_N_PERFORMINPUBLIC                UseTypeERN = 23
	UseTypeERN_USE_TYPE_E_R_N_PERMANENTDOWNLOAD              UseTypeERN = 24
	UseTypeERN_USE_TYPE_E_R_N_PLAYBACK                       UseTypeERN = 25
	UseTypeERN_USE_TYPE_E_R_N_PLAYINPUBLIC                   UseTypeERN = 26
	UseTypeERN_USE_TYPE_E_R_N_PODCAST                        UseTypeERN = 27
	UseTypeERN_USE_TYPE_E_R_N_PRINT                          UseTypeERN = 28
	UseTypeERN_USE_TYPE_E_R_N_PRIVATECOPY                    UseTypeERN = 29
	UseTypeERN_USE_TYPE_E_R_N_PURCHASEASPHYSICALPRODUCT      UseTypeERN = 30
	UseTypeERN_USE_TYPE_E_R_N_RENT                           UseTypeERN = 31
	UseTypeERN_USE_TYPE_E_R_N_SIMULCAST                      UseTypeERN = 32
	UseTypeERN_USE_TYPE_E_R_N_STREAM                         UseTypeERN = 33
	UseTypeERN_USE_TYPE_E_R_N_TETHEREDDOWNLOAD               UseTypeERN = 34
	UseTypeERN_USE_TYPE_E_R_N_TIMEINFLUENCEDSTREAM           UseTypeERN = 35
	UseTypeERN_USE_TYPE_E_R_N_USE                            UseTypeERN = 36
	UseTypeERN_USE_TYPE_E_R_N_USEASALERTTONE                 UseTypeERN = 37
	UseTypeERN_USE_TYPE_E_R_N_USEASDEVICE                    UseTypeERN = 38
	UseTypeERN_USE_TYPE_E_R_N_USEASKARAOKE                   UseTypeERN = 39
	UseTypeERN_USE_TYPE_E_R_N_USEASRINGBACKTONE              UseTypeERN = 40
	UseTypeERN_USE_TYPE_E_R_N_USEASRINGBACKTUNE              UseTypeERN = 41
	UseTypeERN_USE_TYPE_E_R_N_USEASRINGTONE                  UseTypeERN = 42
	UseTypeERN_USE_TYPE_E_R_N_USEASRINGTUNE                  UseTypeERN = 43
	UseTypeERN_USE_TYPE_E_R_N_USEASSCREENSAVER               UseTypeERN = 44
	UseTypeERN_USE_TYPE_E_R_N_USEASVOICEMAIL                 UseTypeERN = 45
	UseTypeERN_USE_TYPE_E_R_N_USEASWALLPAPER                 UseTypeERN = 46
	UseTypeERN_USE_TYPE_E_R_N_USEFORIDENTIFICATION           UseTypeERN = 47
	UseTypeERN_USE_TYPE_E_R_N_USEINMOBILEPHONEMESSAGING      UseTypeERN = 48
	UseTypeERN_USE_TYPE_E_R_N_USEINPHONELISTENING            UseTypeERN = 49
	UseTypeERN_USE_TYPE_E_R_N_USERDEFINED                    UseTypeERN = 50
	UseTypeERN_USE_TYPE_E_R_N_USERMAKEAVAILABLELABELPROVIDED UseTypeERN = 51
	UseTypeERN_USE_TYPE_E_R_N_USERMAKEAVAILABLEUSERPROVIDED  UseTypeERN = 52
	UseTypeERN_USE_TYPE_E_R_N_WEBCAST                        UseTypeERN = 53
	UseTypeERN_USE_TYPE_E_R_N_DUBFORONDEMANDSTREAMING        UseTypeERN = 54
)

// Enum value maps for UseTypeERN.
var (
	UseTypeERN_name = map[int32]string{
		0:  "USE_TYPE_E_R_N_UNSPECIFIED",
		1:  "USE_TYPE_E_R_N_BROADCAST",
		2:  "USE_TYPE_E_R_N_CABLE",
		3:  "USE_TYPE_E_R_N_CONDITIONALDOWNLOAD",
		4:  "USE_TYPE_E_R_N_CONTENTINFLUENCEDSTREAM",
		5:  "USE_TYPE_E_R_N_DISPLAY",
		6:  "USE_TYPE_E_R_N_DOWNLOAD",
		7:  "USE_TYPE_E_R_N_DUB",
		8:  "USE_TYPE_E_R_N_DUBFORADVERTISEMENT",
		9:  "USE_TYPE_E_R_N_DUBFORLIVEPERFORMANCE",
		10: "USE_TYPE_E_R_N_DUBFORMOVIES",
		11: "USE_TYPE_E_R_N_DUBFORMUSICONHOLD",
		12: "USE_TYPE_E_R_N_DUBFORPUBLICPERFORMANCE",
		13: "USE_TYPE_E_R_N_DUBFORRADIO",
		14: "USE_TYPE_E_R_N_DUBFORTV",
		15: "USE_TYPE_E_R_N_EXTRACTFORINTERNET",
		16: "USE_TYPE_E_R_N_KIOSKDOWNLOAD",
		17: "USE_TYPE_E_R_N_NARROWCAST",
		18: "USE_TYPE_E_R_N_NONINTERACTIVESTREAM",
		19: "USE_TYPE_E_R_N_ONDEMANDSTREAM",
		20: "USE_TYPE_E_R_N_PERFORM",
		21: "USE_TYPE_E_R_N_PERFORMASMUSICONHOLD",
		22: "USE_TYPE_E_R_N_PERFORMINLIVEPERFORMANCE",
		23: "USE_TYPE_E_R_N_PERFORMINPUBLIC",
		24: "USE_TYPE_E_R_N_PERMANENTDOWNLOAD",
		25: "USE_TYPE_E_R_N_PLAYBACK",
		26: "USE_TYPE_E_R_N_PLAYINPUBLIC",
		27: "USE_TYPE_E_R_N_PODCAST",
		28: "USE_TYPE_E_R_N_PRINT",
		29: "USE_TYPE_E_R_N_PRIVATECOPY",
		30: "USE_TYPE_E_R_N_PURCHASEASPHYSICALPRODUCT",
		31: "USE_TYPE_E_R_N_RENT",
		32: "USE_TYPE_E_R_N_SIMULCAST",
		33: "USE_TYPE_E_R_N_STREAM",
		34: "USE_TYPE_E_R_N_TETHEREDDOWNLOAD",
		35: "USE_TYPE_E_R_N_TIMEINFLUENCEDSTREAM",
		36: "USE_TYPE_E_R_N_USE",
		37: "USE_TYPE_E_R_N_USEASALERTTONE",
		38: "USE_TYPE_E_R_N_USEASDEVICE",
		39: "USE_TYPE_E_R_N_USEASKARAOKE",
		40: "USE_TYPE_E_R_N_USEASRINGBACKTONE",
		41: "USE_TYPE_E_R_N_USEASRINGBACKTUNE",
		42: "USE_TYPE_E_R_N_USEASRINGTONE",
		43: "USE_TYPE_E_R_N_USEASRINGTUNE",
		44: "USE_TYPE_E_R_N_USEASSCREENSAVER",
		45: "USE_TYPE_E_R_N_USEASVOICEMAIL",
		46: "USE_TYPE_E_R_N_USEASWALLPAPER",
		47: "USE_TYPE_E_R_N_USEFORIDENTIFICATION",
		48: "USE_TYPE_E_R_N_USEINMOBILEPHONEMESSAGING",
		49: "USE_TYPE_E_R_N_USEINPHONELISTENING",
		50: "USE_TYPE_E_R_N_USERDEFINED",
		51: "USE_TYPE_E_R_N_USERMAKEAVAILABLELABELPROVIDED",
		52: "USE_TYPE_E_R_N_USERMAKEAVAILABLEUSERPROVIDED",
		53: "USE_TYPE_E_R_N_WEBCAST",
		54: "USE_TYPE_E_R_N_DUBFORONDEMANDSTREAMING",
	}
	UseTypeERN_value = map[string]int32{
		"USE_TYPE_E_R_N_UNSPECIFIED":                    0,
		"USE_TYPE_E_R_N_BROADCAST":                      1,
		"USE_TYPE_E_R_N_CABLE":                          2,
		"USE_TYPE_E_R_N_CONDITIONALDOWNLOAD":            3,
		"USE_TYPE_E_R_N_CONTENTINFLUENCEDSTREAM":        4,
		"USE_TYPE_E_R_N_DISPLAY":                        5,
		"USE_TYPE_E_R_N_DOWNLOAD":                       6,
		"USE_TYPE_E_R_N_DUB":                            7,
		"USE_TYPE_E_R_N_DUBFORADVERTISEMENT":            8,
		"USE_TYPE_E_R_N_DUBFORLIVEPERFORMANCE":          9,
		"USE_TYPE_E_R_N_DUBFORMOVIES":                   10,
		"USE_TYPE_E_R_N_DUBFORMUSICONHOLD":              11,
		"USE_TYPE_E_R_N_DUBFORPUBLICPERFORMANCE":        12,
		"USE_TYPE_E_R_N_DUBFORRADIO":                    13,
		"USE_TYPE_E_R_N_DUBFORTV":                       14,
		"USE_TYPE_E_R_N_EXTRACTFORINTERNET":             15,
		"USE_TYPE_E_R_N_KIOSKDOWNLOAD":                  16,
		"USE_TYPE_E_R_N_NARROWCAST":                     17,
		"USE_TYPE_E_R_N_NONINTERACTIVESTREAM":           18,
		"USE_TYPE_E_R_N_ONDEMANDSTREAM":                 19,
		"USE_TYPE_E_R_N_PERFORM":                        20,
		"USE_TYPE_E_R_N_PERFORMASMUSICONHOLD":           21,
		"USE_TYPE_E_R_N_PERFORMINLIVEPERFORMANCE":       22,
		"USE_TYPE_E_R_N_PERFORMINPUBLIC":                23,
		"USE_TYPE_E_R_N_PERMANENTDOWNLOAD":              24,
		"USE_TYPE_E_R_N_PLAYBACK":                       25,
		"USE_TYPE_E_R_N_PLAYINPUBLIC":                   26,
		"USE_TYPE_E_R_N_PODCAST":                        27,
		"USE_TYPE_E_R_N_PRINT":                          28,
		"USE_TYPE_E_R_N_PRIVATECOPY":                    29,
		"USE_TYPE_E_R_N_PURCHASEASPHYSICALPRODUCT":      30,
		"USE_TYPE_E_R_N_RENT":                           31,
		"USE_TYPE_E_R_N_SIMULCAST":                      32,
		"USE_TYPE_E_R_N_STREAM":                         33,
		"USE_TYPE_E_R_N_TETHEREDDOWNLOAD":               34,
		"USE_TYPE_E_R_N_TIMEINFLUENCEDSTREAM":           35,
		"USE_TYPE_E_R_N_USE":                            36,
		"USE_TYPE_E_R_N_USEASALERTTONE":                 37,
		"USE_TYPE_E_R_N_USEASDEVICE":                    38,
		"USE_TYPE_E_R_N_USEASKARAOKE":                   39,
		"USE_TYPE_E_R_N_USEASRINGBACKTONE":              40,
		"USE_TYPE_E_R_N_USEASRINGBACKTUNE":              41,
		"USE_TYPE_E_R_N_USEASRINGTONE":                  42,
		"USE_TYPE_E_R_N_USEASRINGTUNE":                  43,
		"USE_TYPE_E_R_N_USEASSCREENSAVER":               44,
		"USE_TYPE_E_R_N_USEASVOICEMAIL":                 45,
		"USE_TYPE_E_R_N_USEASWALLPAPER":                 46,
		"USE_TYPE_E_R_N_USEFORIDENTIFICATION":           47,
		"USE_TYPE_E_R_N_USEINMOBILEPHONEMESSAGING":      48,
		"USE_TYPE_E_R_N_USEINPHONELISTENING":            49,
		"USE_TYPE_E_R_N_USERDEFINED":                    50,
		"USE_TYPE_E_R_N_USERMAKEAVAILABLELABELPROVIDED": 51,
		"USE_TYPE_E_R_N_USERMAKEAVAILABLEUSERPROVIDED":  52,
		"USE_TYPE_E_R_N_WEBCAST":                        53,
		"USE_TYPE_E_R_N_DUBFORONDEMANDSTREAMING":        54,
	}
)

func (x UseTypeERN) Enum() *UseTypeERN {
	p := new(UseTypeERN)
	*p = x
	return p
}

func (x UseTypeERN) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseTypeERN) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[192].Descriptor()
}

func (UseTypeERN) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[192]
}

func (x UseTypeERN) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseTypeERN.Descriptor instead.
func (UseTypeERN) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{192}
}

type UseTypeMWNL int32

const (
	UseTypeMWNL_USE_TYPE_M_W_N_L_UNSPECIFIED               UseTypeMWNL = 0
	UseTypeMWNL_USE_TYPE_M_W_N_L_ONDEMANDSTREAM            UseTypeMWNL = 1
	UseTypeMWNL_USE_TYPE_M_W_N_L_PERMANENTDOWNLOAD         UseTypeMWNL = 2
	UseTypeMWNL_USE_TYPE_M_W_N_L_PURCHASEASPHYSICALPRODUCT UseTypeMWNL = 3
	UseTypeMWNL_USE_TYPE_M_W_N_L_USEASRINGTONE             UseTypeMWNL = 4
)

// Enum value maps for UseTypeMWNL.
var (
	UseTypeMWNL_name = map[int32]string{
		0: "USE_TYPE_M_W_N_L_UNSPECIFIED",
		1: "USE_TYPE_M_W_N_L_ONDEMANDSTREAM",
		2: "USE_TYPE_M_W_N_L_PERMANENTDOWNLOAD",
		3: "USE_TYPE_M_W_N_L_PURCHASEASPHYSICALPRODUCT",
		4: "USE_TYPE_M_W_N_L_USEASRINGTONE",
	}
	UseTypeMWNL_value = map[string]int32{
		"USE_TYPE_M_W_N_L_UNSPECIFIED":               0,
		"USE_TYPE_M_W_N_L_ONDEMANDSTREAM":            1,
		"USE_TYPE_M_W_N_L_PERMANENTDOWNLOAD":         2,
		"USE_TYPE_M_W_N_L_PURCHASEASPHYSICALPRODUCT": 3,
		"USE_TYPE_M_W_N_L_USEASRINGTONE":             4,
	}
)

func (x UseTypeMWNL) Enum() *UseTypeMWNL {
	p := new(UseTypeMWNL)
	*p = x
	return p
}

func (x UseTypeMWNL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseTypeMWNL) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[193].Descriptor()
}

func (UseTypeMWNL) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[193]
}

func (x UseTypeMWNL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseTypeMWNL.Descriptor instead.
func (UseTypeMWNL) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{193}
}

type UseTypeRDR int32

const (
	UseTypeRDR_USE_TYPE_R_D_R_UNSPECIFIED                        UseTypeRDR = 0
	UseTypeRDR_USE_TYPE_R_D_R_ALL                                UseTypeRDR = 1
	UseTypeRDR_USE_TYPE_R_D_R_ASPERCONTRACT                      UseTypeRDR = 2
	UseTypeRDR_USE_TYPE_R_D_R_BROADCAST                          UseTypeRDR = 3
	UseTypeRDR_USE_TYPE_R_D_R_CABLE                              UseTypeRDR = 4
	UseTypeRDR_USE_TYPE_R_D_R_CONDITIONALDOWNLOAD                UseTypeRDR = 5
	UseTypeRDR_USE_TYPE_R_D_R_CONTENTINFLUENCEDSTREAM            UseTypeRDR = 6
	UseTypeRDR_USE_TYPE_R_D_R_DISPLAY                            UseTypeRDR = 7
	UseTypeRDR_USE_TYPE_R_D_R_DOWNLOAD                           UseTypeRDR = 8
	UseTypeRDR_USE_TYPE_R_D_R_DUB                                UseTypeRDR = 9
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORADVERTISEMENT                UseTypeRDR = 10
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORLIVEPERFORMANCE              UseTypeRDR = 11
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORMOVIES                       UseTypeRDR = 12
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORMUSICONHOLD                  UseTypeRDR = 13
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORPUBLICPERFORMANCE            UseTypeRDR = 14
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORRADIO                        UseTypeRDR = 15
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORTV                           UseTypeRDR = 16
	UseTypeRDR_USE_TYPE_R_D_R_EXTRACTFORINTERNET                 UseTypeRDR = 17
	UseTypeRDR_USE_TYPE_R_D_R_KIOSKDOWNLOAD                      UseTypeRDR = 18
	UseTypeRDR_USE_TYPE_R_D_R_NARROWCAST                         UseTypeRDR = 19
	UseTypeRDR_USE_TYPE_R_D_R_NONINTERACTIVESTREAM               UseTypeRDR = 20
	UseTypeRDR_USE_TYPE_R_D_R_ONDEMANDSTREAM                     UseTypeRDR = 21
	UseTypeRDR_USE_TYPE_R_D_R_PERFORM                            UseTypeRDR = 22
	UseTypeRDR_USE_TYPE_R_D_R_PERFORMASMUSICONHOLD               UseTypeRDR = 23
	UseTypeRDR_USE_TYPE_R_D_R_PERFORMINLIVEPERFORMANCE           UseTypeRDR = 24
	UseTypeRDR_USE_TYPE_R_D_R_PERFORMINPUBLIC                    UseTypeRDR = 25
	UseTypeRDR_USE_TYPE_R_D_R_PERMANENTDOWNLOAD                  UseTypeRDR = 26
	UseTypeRDR_USE_TYPE_R_D_R_PLAYBACK                           UseTypeRDR = 27
	UseTypeRDR_USE_TYPE_R_D_R_PLAYINPUBLIC                       UseTypeRDR = 28
	UseTypeRDR_USE_TYPE_R_D_R_PODCAST                            UseTypeRDR = 29
	UseTypeRDR_USE_TYPE_R_D_R_PRINT                              UseTypeRDR = 30
	UseTypeRDR_USE_TYPE_R_D_R_PRIVATECOPY                        UseTypeRDR = 31
	UseTypeRDR_USE_TYPE_R_D_R_PURCHASEASPHYSICALPRODUCT          UseTypeRDR = 32
	UseTypeRDR_USE_TYPE_R_D_R_RENT                               UseTypeRDR = 33
	UseTypeRDR_USE_TYPE_R_D_R_SIMULCAST                          UseTypeRDR = 34
	UseTypeRDR_USE_TYPE_R_D_R_STREAM                             UseTypeRDR = 35
	UseTypeRDR_USE_TYPE_R_D_R_TETHEREDDOWNLOAD                   UseTypeRDR = 36
	UseTypeRDR_USE_TYPE_R_D_R_TIMEINFLUENCEDSTREAM               UseTypeRDR = 37
	UseTypeRDR_USE_TYPE_R_D_R_UNKNOWN                            UseTypeRDR = 38
	UseTypeRDR_USE_TYPE_R_D_R_USE                                UseTypeRDR = 39
	UseTypeRDR_USE_TYPE_R_D_R_USEASALERTTONE                     UseTypeRDR = 40
	UseTypeRDR_USE_TYPE_R_D_R_USEASDEVICE                        UseTypeRDR = 41
	UseTypeRDR_USE_TYPE_R_D_R_USEASKARAOKE                       UseTypeRDR = 42
	UseTypeRDR_USE_TYPE_R_D_R_USEASRINGBACKTONE                  UseTypeRDR = 43
	UseTypeRDR_USE_TYPE_R_D_R_USEASRINGBACKTUNE                  UseTypeRDR = 44
	UseTypeRDR_USE_TYPE_R_D_R_USEASRINGTONE                      UseTypeRDR = 45
	UseTypeRDR_USE_TYPE_R_D_R_USEASRINGTUNE                      UseTypeRDR = 46
	UseTypeRDR_USE_TYPE_R_D_R_USEASSCREENSAVER                   UseTypeRDR = 47
	UseTypeRDR_USE_TYPE_R_D_R_USEASVOICEMAIL                     UseTypeRDR = 48
	UseTypeRDR_USE_TYPE_R_D_R_USEASWALLPAPER                     UseTypeRDR = 49
	UseTypeRDR_USE_TYPE_R_D_R_USEFORIDENTIFICATION               UseTypeRDR = 50
	UseTypeRDR_USE_TYPE_R_D_R_USEINMOBILEPHONEMESSAGING          UseTypeRDR = 51
	UseTypeRDR_USE_TYPE_R_D_R_USEINPHONELISTENING                UseTypeRDR = 52
	UseTypeRDR_USE_TYPE_R_D_R_USERDEFINED                        UseTypeRDR = 53
	UseTypeRDR_USE_TYPE_R_D_R_USERMAKEAVAILABLELABELPROVIDED     UseTypeRDR = 54
	UseTypeRDR_USE_TYPE_R_D_R_USERMAKEAVAILABLEUSERPROVIDED      UseTypeRDR = 55
	UseTypeRDR_USE_TYPE_R_D_R_WEBCAST                            UseTypeRDR = 56
	UseTypeRDR_USE_TYPE_R_D_R_BROADCASTRADIO                     UseTypeRDR = 57
	UseTypeRDR_USE_TYPE_R_D_R_BROADCASTTV                        UseTypeRDR = 58
	UseTypeRDR_USE_TYPE_R_D_R_CABLERETRANSMISSION                UseTypeRDR = 59
	UseTypeRDR_USE_TYPE_R_D_R_CABLERETRANSMISSIONRADIO           UseTypeRDR = 60
	UseTypeRDR_USE_TYPE_R_D_R_CABLERETRANSMISSIONTV              UseTypeRDR = 61
	UseTypeRDR_USE_TYPE_R_D_R_CATCHUP                            UseTypeRDR = 62
	UseTypeRDR_USE_TYPE_R_D_R_CATCHUPRADIO                       UseTypeRDR = 63
	UseTypeRDR_USE_TYPE_R_D_R_CATCHUPTV                          UseTypeRDR = 64
	UseTypeRDR_USE_TYPE_R_D_R_COMMERCIALRENT                     UseTypeRDR = 65
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORDISTRIBUTION                 UseTypeRDR = 66
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORONDEMANDSTREAMING            UseTypeRDR = 67
	UseTypeRDR_USE_TYPE_R_D_R_LEND                               UseTypeRDR = 68
	UseTypeRDR_USE_TYPE_R_D_R_RETRANSMISSION                     UseTypeRDR = 69
	UseTypeRDR_USE_TYPE_R_D_R_RINGBACKTONE                       UseTypeRDR = 70
	UseTypeRDR_USE_TYPE_R_D_R_SIMULCASTRADIO                     UseTypeRDR = 71
	UseTypeRDR_USE_TYPE_R_D_R_SIMULCASTTV                        UseTypeRDR = 72
	UseTypeRDR_USE_TYPE_R_D_R_USEFOREDUCATIONANDORSOCIALPURPOSES UseTypeRDR = 73
)

// Enum value maps for UseTypeRDR.
var (
	UseTypeRDR_name = map[int32]string{
		0:  "USE_TYPE_R_D_R_UNSPECIFIED",
		1:  "USE_TYPE_R_D_R_ALL",
		2:  "USE_TYPE_R_D_R_ASPERCONTRACT",
		3:  "USE_TYPE_R_D_R_BROADCAST",
		4:  "USE_TYPE_R_D_R_CABLE",
		5:  "USE_TYPE_R_D_R_CONDITIONALDOWNLOAD",
		6:  "USE_TYPE_R_D_R_CONTENTINFLUENCEDSTREAM",
		7:  "USE_TYPE_R_D_R_DISPLAY",
		8:  "USE_TYPE_R_D_R_DOWNLOAD",
		9:  "USE_TYPE_R_D_R_DUB",
		10: "USE_TYPE_R_D_R_DUBFORADVERTISEMENT",
		11: "USE_TYPE_R_D_R_DUBFORLIVEPERFORMANCE",
		12: "USE_TYPE_R_D_R_DUBFORMOVIES",
		13: "USE_TYPE_R_D_R_DUBFORMUSICONHOLD",
		14: "USE_TYPE_R_D_R_DUBFORPUBLICPERFORMANCE",
		15: "USE_TYPE_R_D_R_DUBFORRADIO",
		16: "USE_TYPE_R_D_R_DUBFORTV",
		17: "USE_TYPE_R_D_R_EXTRACTFORINTERNET",
		18: "USE_TYPE_R_D_R_KIOSKDOWNLOAD",
		19: "USE_TYPE_R_D_R_NARROWCAST",
		20: "USE_TYPE_R_D_R_NONINTERACTIVESTREAM",
		21: "USE_TYPE_R_D_R_ONDEMANDSTREAM",
		22: "USE_TYPE_R_D_R_PERFORM",
		23: "USE_TYPE_R_D_R_PERFORMASMUSICONHOLD",
		24: "USE_TYPE_R_D_R_PERFORMINLIVEPERFORMANCE",
		25: "USE_TYPE_R_D_R_PERFORMINPUBLIC",
		26: "USE_TYPE_R_D_R_PERMANENTDOWNLOAD",
		27: "USE_TYPE_R_D_R_PLAYBACK",
		28: "USE_TYPE_R_D_R_PLAYINPUBLIC",
		29: "USE_TYPE_R_D_R_PODCAST",
		30: "USE_TYPE_R_D_R_PRINT",
		31: "USE_TYPE_R_D_R_PRIVATECOPY",
		32: "USE_TYPE_R_D_R_PURCHASEASPHYSICALPRODUCT",
		33: "USE_TYPE_R_D_R_RENT",
		34: "USE_TYPE_R_D_R_SIMULCAST",
		35: "USE_TYPE_R_D_R_STREAM",
		36: "USE_TYPE_R_D_R_TETHEREDDOWNLOAD",
		37: "USE_TYPE_R_D_R_TIMEINFLUENCEDSTREAM",
		38: "USE_TYPE_R_D_R_UNKNOWN",
		39: "USE_TYPE_R_D_R_USE",
		40: "USE_TYPE_R_D_R_USEASALERTTONE",
		41: "USE_TYPE_R_D_R_USEASDEVICE",
		42: "USE_TYPE_R_D_R_USEASKARAOKE",
		43: "USE_TYPE_R_D_R_USEASRINGBACKTONE",
		44: "USE_TYPE_R_D_R_USEASRINGBACKTUNE",
		45: "USE_TYPE_R_D_R_USEASRINGTONE",
		46: "USE_TYPE_R_D_R_USEASRINGTUNE",
		47: "USE_TYPE_R_D_R_USEASSCREENSAVER",
		48: "USE_TYPE_R_D_R_USEASVOICEMAIL",
		49: "USE_TYPE_R_D_R_USEASWALLPAPER",
		50: "USE_TYPE_R_D_R_USEFORIDENTIFICATION",
		51: "USE_TYPE_R_D_R_USEINMOBILEPHONEMESSAGING",
		52: "USE_TYPE_R_D_R_USEINPHONELISTENING",
		53: "USE_TYPE_R_D_R_USERDEFINED",
		54: "USE_TYPE_R_D_R_USERMAKEAVAILABLELABELPROVIDED",
		55: "USE_TYPE_R_D_R_USERMAKEAVAILABLEUSERPROVIDED",
		56: "USE_TYPE_R_D_R_WEBCAST",
		57: "USE_TYPE_R_D_R_BROADCASTRADIO",
		58: "USE_TYPE_R_D_R_BROADCASTTV",
		59: "USE_TYPE_R_D_R_CABLERETRANSMISSION",
		60: "USE_TYPE_R_D_R_CABLERETRANSMISSIONRADIO",
		61: "USE_TYPE_R_D_R_CABLERETRANSMISSIONTV",
		62: "USE_TYPE_R_D_R_CATCHUP",
		63: "USE_TYPE_R_D_R_CATCHUPRADIO",
		64: "USE_TYPE_R_D_R_CATCHUPTV",
		65: "USE_TYPE_R_D_R_COMMERCIALRENT",
		66: "USE_TYPE_R_D_R_DUBFORDISTRIBUTION",
		67: "USE_TYPE_R_D_R_DUBFORONDEMANDSTREAMING",
		68: "USE_TYPE_R_D_R_LEND",
		69: "USE_TYPE_R_D_R_RETRANSMISSION",
		70: "USE_TYPE_R_D_R_RINGBACKTONE",
		71: "USE_TYPE_R_D_R_SIMULCASTRADIO",
		72: "USE_TYPE_R_D_R_SIMULCASTTV",
		73: "USE_TYPE_R_D_R_USEFOREDUCATIONANDORSOCIALPURPOSES",
	}
	UseTypeRDR_value = map[string]int32{
		"USE_TYPE_R_D_R_UNSPECIFIED":                        0,
		"USE_TYPE_R_D_R_ALL":                                1,
		"USE_TYPE_R_D_R_ASPERCONTRACT":                      2,
		"USE_TYPE_R_D_R_BROADCAST":                          3,
		"USE_TYPE_R_D_R_CABLE":                              4,
		"USE_TYPE_R_D_R_CONDITIONALDOWNLOAD":                5,
		"USE_TYPE_R_D_R_CONTENTINFLUENCEDSTREAM":            6,
		"USE_TYPE_R_D_R_DISPLAY":                            7,
		"USE_TYPE_R_D_R_DOWNLOAD":                           8,
		"USE_TYPE_R_D_R_DUB":                                9,
		"USE_TYPE_R_D_R_DUBFORADVERTISEMENT":                10,
		"USE_TYPE_R_D_R_DUBFORLIVEPERFORMANCE":              11,
		"USE_TYPE_R_D_R_DUBFORMOVIES":                       12,
		"USE_TYPE_R_D_R_DUBFORMUSICONHOLD":                  13,
		"USE_TYPE_R_D_R_DUBFORPUBLICPERFORMANCE":            14,
		"USE_TYPE_R_D_R_DUBFORRADIO":                        15,
		"USE_TYPE_R_D_R_DUBFORTV":                           16,
		"USE_TYPE_R_D_R_EXTRACTFORINTERNET":                 17,
		"USE_TYPE_R_D_R_KIOSKDOWNLOAD":                      18,
		"USE_TYPE_R_D_R_NARROWCAST":                         19,
		"USE_TYPE_R_D_R_NONINTERACTIVESTREAM":               20,
		"USE_TYPE_R_D_R_ONDEMANDSTREAM":                     21,
		"USE_TYPE_R_D_R_PERFORM":                            22,
		"USE_TYPE_R_D_R_PERFORMASMUSICONHOLD":               23,
		"USE_TYPE_R_D_R_PERFORMINLIVEPERFORMANCE":           24,
		"USE_TYPE_R_D_R_PERFORMINPUBLIC":                    25,
		"USE_TYPE_R_D_R_PERMANENTDOWNLOAD":                  26,
		"USE_TYPE_R_D_R_PLAYBACK":                           27,
		"USE_TYPE_R_D_R_PLAYINPUBLIC":                       28,
		"USE_TYPE_R_D_R_PODCAST":                            29,
		"USE_TYPE_R_D_R_PRINT":                              30,
		"USE_TYPE_R_D_R_PRIVATECOPY":                        31,
		"USE_TYPE_R_D_R_PURCHASEASPHYSICALPRODUCT":          32,
		"USE_TYPE_R_D_R_RENT":                               33,
		"USE_TYPE_R_D_R_SIMULCAST":                          34,
		"USE_TYPE_R_D_R_STREAM":                             35,
		"USE_TYPE_R_D_R_TETHEREDDOWNLOAD":                   36,
		"USE_TYPE_R_D_R_TIMEINFLUENCEDSTREAM":               37,
		"USE_TYPE_R_D_R_UNKNOWN":                            38,
		"USE_TYPE_R_D_R_USE":                                39,
		"USE_TYPE_R_D_R_USEASALERTTONE":                     40,
		"USE_TYPE_R_D_R_USEASDEVICE":                        41,
		"USE_TYPE_R_D_R_USEASKARAOKE":                       42,
		"USE_TYPE_R_D_R_USEASRINGBACKTONE":                  43,
		"USE_TYPE_R_D_R_USEASRINGBACKTUNE":                  44,
		"USE_TYPE_R_D_R_USEASRINGTONE":                      45,
		"USE_TYPE_R_D_R_USEASRINGTUNE":                      46,
		"USE_TYPE_R_D_R_USEASSCREENSAVER":                   47,
		"USE_TYPE_R_D_R_USEASVOICEMAIL":                     48,
		"USE_TYPE_R_D_R_USEASWALLPAPER":                     49,
		"USE_TYPE_R_D_R_USEFORIDENTIFICATION":               50,
		"USE_TYPE_R_D_R_USEINMOBILEPHONEMESSAGING":          51,
		"USE_TYPE_R_D_R_USEINPHONELISTENING":                52,
		"USE_TYPE_R_D_R_USERDEFINED":                        53,
		"USE_TYPE_R_D_R_USERMAKEAVAILABLELABELPROVIDED":     54,
		"USE_TYPE_R_D_R_USERMAKEAVAILABLEUSERPROVIDED":      55,
		"USE_TYPE_R_D_R_WEBCAST":                            56,
		"USE_TYPE_R_D_R_BROADCASTRADIO":                     57,
		"USE_TYPE_R_D_R_BROADCASTTV":                        58,
		"USE_TYPE_R_D_R_CABLERETRANSMISSION":                59,
		"USE_TYPE_R_D_R_CABLERETRANSMISSIONRADIO":           60,
		"USE_TYPE_R_D_R_CABLERETRANSMISSIONTV":              61,
		"USE_TYPE_R_D_R_CATCHUP":                            62,
		"USE_TYPE_R_D_R_CATCHUPRADIO":                       63,
		"USE_TYPE_R_D_R_CATCHUPTV":                          64,
		"USE_TYPE_R_D_R_COMMERCIALRENT":                     65,
		"USE_TYPE_R_D_R_DUBFORDISTRIBUTION":                 66,
		"USE_TYPE_R_D_R_DUBFORONDEMANDSTREAMING":            67,
		"USE_TYPE_R_D_R_LEND":                               68,
		"USE_TYPE_R_D_R_RETRANSMISSION":                     69,
		"USE_TYPE_R_D_R_RINGBACKTONE":                       70,
		"USE_TYPE_R_D_R_SIMULCASTRADIO":                     71,
		"USE_TYPE_R_D_R_SIMULCASTTV":                        72,
		"USE_TYPE_R_D_R_USEFOREDUCATIONANDORSOCIALPURPOSES": 73,
	}
)

func (x UseTypeRDR) Enum() *UseTypeRDR {
	p := new(UseTypeRDR)
	*p = x
	return p
}

func (x UseTypeRDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseTypeRDR) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[194].Descriptor()
}

func (UseTypeRDR) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[194]
}

func (x UseTypeRDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseTypeRDR.Descriptor instead.
func (UseTypeRDR) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{194}
}

type UserInterfaceType int32

const (
	UserInterfaceType_USER_INTERFACE_TYPE_UNSPECIFIED          UserInterfaceType = 0
	UserInterfaceType_USER_INTERFACE_TYPE_ASPERCONTRACT        UserInterfaceType = 1
	UserInterfaceType_USER_INTERFACE_TYPE_CONNECTEDDEVICE      UserInterfaceType = 2
	UserInterfaceType_USER_INTERFACE_TYPE_GAMECONSOLE          UserInterfaceType = 3
	UserInterfaceType_USER_INTERFACE_TYPE_JUKEBOX              UserInterfaceType = 4
	UserInterfaceType_USER_INTERFACE_TYPE_KARAOKEMACHINE       UserInterfaceType = 5
	UserInterfaceType_USER_INTERFACE_TYPE_KIOSK                UserInterfaceType = 6
	UserInterfaceType_USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX  UserInterfaceType = 7
	UserInterfaceType_USER_INTERFACE_TYPE_PERSONALCOMPUTER     UserInterfaceType = 8
	UserInterfaceType_USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER  UserInterfaceType = 9
	UserInterfaceType_USER_INTERFACE_TYPE_PORTABLEDEVICE       UserInterfaceType = 10
	UserInterfaceType_USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX UserInterfaceType = 11
	UserInterfaceType_USER_INTERFACE_TYPE_SMARTSPEAKERS        UserInterfaceType = 12
	UserInterfaceType_USER_INTERFACE_TYPE_UNKNOWN              UserInterfaceType = 13
	UserInterfaceType_USER_INTERFACE_TYPE_USERDEFINED          UserInterfaceType = 14
)

// Enum value maps for UserInterfaceType.
var (
	UserInterfaceType_name = map[int32]string{
		0:  "USER_INTERFACE_TYPE_UNSPECIFIED",
		1:  "USER_INTERFACE_TYPE_ASPERCONTRACT",
		2:  "USER_INTERFACE_TYPE_CONNECTEDDEVICE",
		3:  "USER_INTERFACE_TYPE_GAMECONSOLE",
		4:  "USER_INTERFACE_TYPE_JUKEBOX",
		5:  "USER_INTERFACE_TYPE_KARAOKEMACHINE",
		6:  "USER_INTERFACE_TYPE_KIOSK",
		7:  "USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX",
		8:  "USER_INTERFACE_TYPE_PERSONALCOMPUTER",
		9:  "USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER",
		10: "USER_INTERFACE_TYPE_PORTABLEDEVICE",
		11: "USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX",
		12: "USER_INTERFACE_TYPE_SMARTSPEAKERS",
		13: "USER_INTERFACE_TYPE_UNKNOWN",
		14: "USER_INTERFACE_TYPE_USERDEFINED",
	}
	UserInterfaceType_value = map[string]int32{
		"USER_INTERFACE_TYPE_UNSPECIFIED":          0,
		"USER_INTERFACE_TYPE_ASPERCONTRACT":        1,
		"USER_INTERFACE_TYPE_CONNECTEDDEVICE":      2,
		"USER_INTERFACE_TYPE_GAMECONSOLE":          3,
		"USER_INTERFACE_TYPE_JUKEBOX":              4,
		"USER_INTERFACE_TYPE_KARAOKEMACHINE":       5,
		"USER_INTERFACE_TYPE_KIOSK":                6,
		"USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX":  7,
		"USER_INTERFACE_TYPE_PERSONALCOMPUTER":     8,
		"USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER":  9,
		"USER_INTERFACE_TYPE_PORTABLEDEVICE":       10,
		"USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX": 11,
		"USER_INTERFACE_TYPE_SMARTSPEAKERS":        12,
		"USER_INTERFACE_TYPE_UNKNOWN":              13,
		"USER_INTERFACE_TYPE_USERDEFINED":          14,
	}
)

func (x UserInterfaceType) Enum() *UserInterfaceType {
	p := new(UserInterfaceType)
	*p = x
	return p
}

func (x UserInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[195].Descriptor()
}

func (UserInterfaceType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[195]
}

func (x UserInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInterfaceType.Descriptor instead.
func (UserInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{195}
}

type UserInterfaceTypeERN int32

const (
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_UNSPECIFIED          UserInterfaceTypeERN = 0
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_CONNECTEDDEVICE      UserInterfaceTypeERN = 1
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_GAMECONSOLE          UserInterfaceTypeERN = 2
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_JUKEBOX              UserInterfaceTypeERN = 3
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_KARAOKEMACHINE       UserInterfaceTypeERN = 4
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_KIOSK                UserInterfaceTypeERN = 5
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_LOCALSTORAGEJUKEBOX  UserInterfaceTypeERN = 6
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_PERSONALCOMPUTER     UserInterfaceTypeERN = 7
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_PHYSICALMEDIAWRITER  UserInterfaceTypeERN = 8
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_PORTABLEDEVICE       UserInterfaceTypeERN = 9
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_REMOTESTORAGEJUKEBOX UserInterfaceTypeERN = 10
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_SMARTSPEAKERS        UserInterfaceTypeERN = 11
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_USERDEFINED          UserInterfaceTypeERN = 12
)

// Enum value maps for UserInterfaceTypeERN.
var (
	UserInterfaceTypeERN_name = map[int32]string{
		0:  "USER_INTERFACE_TYPE_E_R_N_UNSPECIFIED",
		1:  "USER_INTERFACE_TYPE_E_R_N_CONNECTEDDEVICE",
		2:  "USER_INTERFACE_TYPE_E_R_N_GAMECONSOLE",
		3:  "USER_INTERFACE_TYPE_E_R_N_JUKEBOX",
		4:  "USER_INTERFACE_TYPE_E_R_N_KARAOKEMACHINE",
		5:  "USER_INTERFACE_TYPE_E_R_N_KIOSK",
		6:  "USER_INTERFACE_TYPE_E_R_N_LOCALSTORAGEJUKEBOX",
		7:  "USER_INTERFACE_TYPE_E_R_N_PERSONALCOMPUTER",
		8:  "USER_INTERFACE_TYPE_E_R_N_PHYSICALMEDIAWRITER",
		9:  "USER_INTERFACE_TYPE_E_R_N_PORTABLEDEVICE",
		10: "USER_INTERFACE_TYPE_E_R_N_REMOTESTORAGEJUKEBOX",
		11: "USER_INTERFACE_TYPE_E_R_N_SMARTSPEAKERS",
		12: "USER_INTERFACE_TYPE_E_R_N_USERDEFINED",
	}
	UserInterfaceTypeERN_value = map[string]int32{
		"USER_INTERFACE_TYPE_E_R_N_UNSPECIFIED":          0,
		"USER_INTERFACE_TYPE_E_R_N_CONNECTEDDEVICE":      1,
		"USER_INTERFACE_TYPE_E_R_N_GAMECONSOLE":          2,
		"USER_INTERFACE_TYPE_E_R_N_JUKEBOX":              3,
		"USER_INTERFACE_TYPE_E_R_N_KARAOKEMACHINE":       4,
		"USER_INTERFACE_TYPE_E_R_N_KIOSK":                5,
		"USER_INTERFACE_TYPE_E_R_N_LOCALSTORAGEJUKEBOX":  6,
		"USER_INTERFACE_TYPE_E_R_N_PERSONALCOMPUTER":     7,
		"USER_INTERFACE_TYPE_E_R_N_PHYSICALMEDIAWRITER":  8,
		"USER_INTERFACE_TYPE_E_R_N_PORTABLEDEVICE":       9,
		"USER_INTERFACE_TYPE_E_R_N_REMOTESTORAGEJUKEBOX": 10,
		"USER_INTERFACE_TYPE_E_R_N_SMARTSPEAKERS":        11,
		"USER_INTERFACE_TYPE_E_R_N_USERDEFINED":          12,
	}
)

func (x UserInterfaceTypeERN) Enum() *UserInterfaceTypeERN {
	p := new(UserInterfaceTypeERN)
	*p = x
	return p
}

func (x UserInterfaceTypeERN) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInterfaceTypeERN) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[196].Descriptor()
}

func (UserInterfaceTypeERN) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[196]
}

func (x UserInterfaceTypeERN) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInterfaceTypeERN.Descriptor instead.
func (UserInterfaceTypeERN) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{196}
}

type VersionType int32

const (
	VersionType_VERSION_TYPE_UNSPECIFIED         VersionType = 0
	VersionType_VERSION_TYPE_ACAPPELLAVERSION    VersionType = 1
	VersionType_VERSION_TYPE_ALBUMVERSION        VersionType = 2
	VersionType_VERSION_TYPE_ALTERNATIVEVERSION  VersionType = 3
	VersionType_VERSION_TYPE_CLEANVERSION        VersionType = 4
	VersionType_VERSION_TYPE_DEMOVERSION         VersionType = 5
	VersionType_VERSION_TYPE_EDITEDVERSION       VersionType = 6
	VersionType_VERSION_TYPE_INSTRUMENTALVERSION VersionType = 7
	VersionType_VERSION_TYPE_KARAOKEVERSION      VersionType = 8
	VersionType_VERSION_TYPE_LIVEVERSION         VersionType = 9
	VersionType_VERSION_TYPE_MIXVERSION          VersionType = 10
	VersionType_VERSION_TYPE_MONOVERSION         VersionType = 11
	VersionType_VERSION_TYPE_RADIOVERSION        VersionType = 12
	VersionType_VERSION_TYPE_REMIXVERSION        VersionType = 13
	VersionType_VERSION_TYPE_SESSIONVERSION      VersionType = 14
	VersionType_VERSION_TYPE_SINGLEVERSION       VersionType = 15
	VersionType_VERSION_TYPE_STEREOVERSION       VersionType = 16
	VersionType_VERSION_TYPE_USERDEFINED         VersionType = 17
)

// Enum value maps for VersionType.
var (
	VersionType_name = map[int32]string{
		0:  "VERSION_TYPE_UNSPECIFIED",
		1:  "VERSION_TYPE_ACAPPELLAVERSION",
		2:  "VERSION_TYPE_ALBUMVERSION",
		3:  "VERSION_TYPE_ALTERNATIVEVERSION",
		4:  "VERSION_TYPE_CLEANVERSION",
		5:  "VERSION_TYPE_DEMOVERSION",
		6:  "VERSION_TYPE_EDITEDVERSION",
		7:  "VERSION_TYPE_INSTRUMENTALVERSION",
		8:  "VERSION_TYPE_KARAOKEVERSION",
		9:  "VERSION_TYPE_LIVEVERSION",
		10: "VERSION_TYPE_MIXVERSION",
		11: "VERSION_TYPE_MONOVERSION",
		12: "VERSION_TYPE_RADIOVERSION",
		13: "VERSION_TYPE_REMIXVERSION",
		14: "VERSION_TYPE_SESSIONVERSION",
		15: "VERSION_TYPE_SINGLEVERSION",
		16: "VERSION_TYPE_STEREOVERSION",
		17: "VERSION_TYPE_USERDEFINED",
	}
	VersionType_value = map[string]int32{
		"VERSION_TYPE_UNSPECIFIED":         0,
		"VERSION_TYPE_ACAPPELLAVERSION":    1,
		"VERSION_TYPE_ALBUMVERSION":        2,
		"VERSION_TYPE_ALTERNATIVEVERSION":  3,
		"VERSION_TYPE_CLEANVERSION":        4,
		"VERSION_TYPE_DEMOVERSION":         5,
		"VERSION_TYPE_EDITEDVERSION":       6,
		"VERSION_TYPE_INSTRUMENTALVERSION": 7,
		"VERSION_TYPE_KARAOKEVERSION":      8,
		"VERSION_TYPE_LIVEVERSION":         9,
		"VERSION_TYPE_MIXVERSION":          10,
		"VERSION_TYPE_MONOVERSION":         11,
		"VERSION_TYPE_RADIOVERSION":        12,
		"VERSION_TYPE_REMIXVERSION":        13,
		"VERSION_TYPE_SESSIONVERSION":      14,
		"VERSION_TYPE_SINGLEVERSION":       15,
		"VERSION_TYPE_STEREOVERSION":       16,
		"VERSION_TYPE_USERDEFINED":         17,
	}
)

func (x VersionType) Enum() *VersionType {
	p := new(VersionType)
	*p = x
	return p
}

func (x VersionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[197].Descriptor()
}

func (VersionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[197]
}

func (x VersionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionType.Descriptor instead.
func (VersionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{197}
}

type VideoCodecType int32

const (
	VideoCodecType_VIDEO_CODEC_TYPE_UNSPECIFIED VideoCodecType = 0
	VideoCodecType_VIDEO_CODEC_TYPE_AVC         VideoCodecType = 1
	VideoCodecType_VIDEO_CODEC_TYPE_H_261       VideoCodecType = 2
	VideoCodecType_VIDEO_CODEC_TYPE_H_263       VideoCodecType = 3
	VideoCodecType_VIDEO_CODEC_TYPE_MPEG_1      VideoCodecType = 4
	VideoCodecType_VIDEO_CODEC_TYPE_MPEG_2      VideoCodecType = 5
	VideoCodecType_VIDEO_CODEC_TYPE_MPEG_4      VideoCodecType = 6
	VideoCodecType_VIDEO_CODEC_TYPE_QUICKTIME   VideoCodecType = 7
	VideoCodecType_VIDEO_CODEC_TYPE_REALVIDEO   VideoCodecType = 8
	VideoCodecType_VIDEO_CODEC_TYPE_SHOCKWAVE   VideoCodecType = 9
	VideoCodecType_VIDEO_CODEC_TYPE_UNKNOWN     VideoCodecType = 10
	VideoCodecType_VIDEO_CODEC_TYPE_USERDEFINED VideoCodecType = 11
	VideoCodecType_VIDEO_CODEC_TYPE_WMV         VideoCodecType = 12
)

// Enum value maps for VideoCodecType.
var (
	VideoCodecType_name = map[int32]string{
		0:  "VIDEO_CODEC_TYPE_UNSPECIFIED",
		1:  "VIDEO_CODEC_TYPE_AVC",
		2:  "VIDEO_CODEC_TYPE_H_261",
		3:  "VIDEO_CODEC_TYPE_H_263",
		4:  "VIDEO_CODEC_TYPE_MPEG_1",
		5:  "VIDEO_CODEC_TYPE_MPEG_2",
		6:  "VIDEO_CODEC_TYPE_MPEG_4",
		7:  "VIDEO_CODEC_TYPE_QUICKTIME",
		8:  "VIDEO_CODEC_TYPE_REALVIDEO",
		9:  "VIDEO_CODEC_TYPE_SHOCKWAVE",
		10: "VIDEO_CODEC_TYPE_UNKNOWN",
		11: "VIDEO_CODEC_TYPE_USERDEFINED",
		12: "VIDEO_CODEC_TYPE_WMV",
	}
	VideoCodecType_value = map[string]int32{
		"VIDEO_CODEC_TYPE_UNSPECIFIED": 0,
		"VIDEO_CODEC_TYPE_AVC":         1,
		"VIDEO_CODEC_TYPE_H_261":       2,
		"VIDEO_CODEC_TYPE_H_263":       3,
		"VIDEO_CODEC_TYPE_MPEG_1":      4,
		"VIDEO_CODEC_TYPE_MPEG_2":      5,
		"VIDEO_CODEC_TYPE_MPEG_4":      6,
		"VIDEO_CODEC_TYPE_QUICKTIME":   7,
		"VIDEO_CODEC_TYPE_REALVIDEO":   8,
		"VIDEO_CODEC_TYPE_SHOCKWAVE":   9,
		"VIDEO_CODEC_TYPE_UNKNOWN":     10,
		"VIDEO_CODEC_TYPE_USERDEFINED": 11,
		"VIDEO_CODEC_TYPE_WMV":         12,
	}
)

func (x VideoCodecType) Enum() *VideoCodecType {
	p := new(VideoCodecType)
	*p = x
	return p
}

func (x VideoCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[198].Descriptor()
}

func (VideoCodecType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[198]
}

func (x VideoCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCodecType.Descriptor instead.
func (VideoCodecType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{198}
}

type VideoDefinitionType int32

const (
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_UNSPECIFIED        VideoDefinitionType = 0
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_HIGHDEFINITION     VideoDefinitionType = 1
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_STANDARDDEFINITION VideoDefinitionType = 2
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_USERDEFINED        VideoDefinitionType = 3
)

// Enum value maps for VideoDefinitionType.
var (
	VideoDefinitionType_name = map[int32]string{
		0: "VIDEO_DEFINITION_TYPE_UNSPECIFIED",
		1: "VIDEO_DEFINITION_TYPE_HIGHDEFINITION",
		2: "VIDEO_DEFINITION_TYPE_STANDARDDEFINITION",
		3: "VIDEO_DEFINITION_TYPE_USERDEFINED",
	}
	VideoDefinitionType_value = map[string]int32{
		"VIDEO_DEFINITION_TYPE_UNSPECIFIED":        0,
		"VIDEO_DEFINITION_TYPE_HIGHDEFINITION":     1,
		"VIDEO_DEFINITION_TYPE_STANDARDDEFINITION": 2,
		"VIDEO_DEFINITION_TYPE_USERDEFINED":        3,
	}
)

func (x VideoDefinitionType) Enum() *VideoDefinitionType {
	p := new(VideoDefinitionType)
	*p = x
	return p
}

func (x VideoDefinitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoDefinitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[199].Descriptor()
}

func (VideoDefinitionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[199]
}

func (x VideoDefinitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoDefinitionType.Descriptor instead.
func (VideoDefinitionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{199}
}

type VideoType int32

const (
	VideoType_VIDEO_TYPE_UNSPECIFIED                   VideoType = 0
	VideoType_VIDEO_TYPE_ADVERTISEMENTVIDEO            VideoType = 1
	VideoType_VIDEO_TYPE_ADULTCONTENT                  VideoType = 2
	VideoType_VIDEO_TYPE_ADVICEMAGAZINE                VideoType = 3
	VideoType_VIDEO_TYPE_ANIMATION                     VideoType = 4
	VideoType_VIDEO_TYPE_BALLETVIDEO                   VideoType = 5
	VideoType_VIDEO_TYPE_BEHINDTHESCENES               VideoType = 6
	VideoType_VIDEO_TYPE_BLACKANDWHITEVIDEO            VideoType = 7
	VideoType_VIDEO_TYPE_CHILDRENSFILM                 VideoType = 8
	VideoType_VIDEO_TYPE_COLORIZEDVIDEO                VideoType = 9
	VideoType_VIDEO_TYPE_COLUMNVIDEO                   VideoType = 10
	VideoType_VIDEO_TYPE_CONCERTCLIP                   VideoType = 11
	VideoType_VIDEO_TYPE_CONCERTVIDEO                  VideoType = 12
	VideoType_VIDEO_TYPE_CORPORATEFILM                 VideoType = 13
	VideoType_VIDEO_TYPE_CREDITS                       VideoType = 14
	VideoType_VIDEO_TYPE_DOCUMENTARY                   VideoType = 15
	VideoType_VIDEO_TYPE_EDUCATIONALVIDEO              VideoType = 16
	VideoType_VIDEO_TYPE_EPISODE                       VideoType = 17
	VideoType_VIDEO_TYPE_FEATUREFILM                   VideoType = 18
	VideoType_VIDEO_TYPE_FICTION                       VideoType = 19
	VideoType_VIDEO_TYPE_INFOMERCIALVIDEO              VideoType = 20
	VideoType_VIDEO_TYPE_INTERVIEW                     VideoType = 21
	VideoType_VIDEO_TYPE_KARAOKE                       VideoType = 22
	VideoType_VIDEO_TYPE_LIVEEVENTVIDEO                VideoType = 23
	VideoType_VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO      VideoType = 24
	VideoType_VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO   VideoType = 25
	VideoType_VIDEO_TYPE_LYRICVIDEO                    VideoType = 26
	VideoType_VIDEO_TYPE_MAGAZINE                      VideoType = 27
	VideoType_VIDEO_TYPE_MENU                          VideoType = 28
	VideoType_VIDEO_TYPE_MULTIMEDIAVIDEO               VideoType = 29
	VideoType_VIDEO_TYPE_MUSICALWORKCLIP               VideoType = 30
	VideoType_VIDEO_TYPE_MUSICALWORKREADALONGVIDEO     VideoType = 31
	VideoType_VIDEO_TYPE_MUSICALWORKTRAILER            VideoType = 32
	VideoType_VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER       VideoType = 33
	VideoType_VIDEO_TYPE_NEWS                          VideoType = 34
	VideoType_VIDEO_TYPE_NONMUSICALWORKCLIP            VideoType = 35
	VideoType_VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO  VideoType = 36
	VideoType_VIDEO_TYPE_NONMUSICALWORKTRAILER         VideoType = 37
	VideoType_VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER    VideoType = 38
	VideoType_VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING VideoType = 39
	VideoType_VIDEO_TYPE_OPERAVIDEO                    VideoType = 40
	VideoType_VIDEO_TYPE_PERFORMANCE                   VideoType = 41
	VideoType_VIDEO_TYPE_READALONGVIDEO                VideoType = 42
	VideoType_VIDEO_TYPE_REALITYTVSHOWVIDEO            VideoType = 43
	VideoType_VIDEO_TYPE_SEASON                        VideoType = 44
	VideoType_VIDEO_TYPE_SERIALAUDIOVISUALRECORDING    VideoType = 45
	VideoType_VIDEO_TYPE_SERIES                        VideoType = 46
	VideoType_VIDEO_TYPE_SHORTFILM                     VideoType = 47
	VideoType_VIDEO_TYPE_SILENTVIDEO                   VideoType = 48
	VideoType_VIDEO_TYPE_SKETCHVIDEO                   VideoType = 49
	VideoType_VIDEO_TYPE_SOAPSITCOM                    VideoType = 50
	VideoType_VIDEO_TYPE_SPECIALEVENT                  VideoType = 51
	VideoType_VIDEO_TYPE_SPORT                         VideoType = 52
	VideoType_VIDEO_TYPE_THEATRICALWORKVIDEO           VideoType = 53
	VideoType_VIDEO_TYPE_TRAILERVIDEO                  VideoType = 54
	VideoType_VIDEO_TYPE_TVFILM                        VideoType = 55
	VideoType_VIDEO_TYPE_TVPROGRAM                     VideoType = 56
	VideoType_VIDEO_TYPE_TVSHOWVIDEO                   VideoType = 57
	VideoType_VIDEO_TYPE_UNKNOWN                       VideoType = 58
	VideoType_VIDEO_TYPE_VIDEOCHAPTER                  VideoType = 59
	VideoType_VIDEO_TYPE_VIDEOCLIP                     VideoType = 60
	VideoType_VIDEO_TYPE_VIDEOREPORT                   VideoType = 61
	VideoType_VIDEO_TYPE_VIDEOSTEM                     VideoType = 62
	VideoType_VIDEO_TYPE_DRAMA                         VideoType = 63
	VideoType_VIDEO_TYPE_DRAMATICOMUSICALVIDEO         VideoType = 64
	VideoType_VIDEO_TYPE_INTERACTIVERESOURCE           VideoType = 65
	VideoType_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO     VideoType = 66
	VideoType_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO  VideoType = 67
	VideoType_VIDEO_TYPE_USERDEFINED                   VideoType = 68
	VideoType_VIDEO_TYPE_WEBRESOURCE                   VideoType = 69
)

// Enum value maps for VideoType.
var (
	VideoType_name = map[int32]string{
		0:  "VIDEO_TYPE_UNSPECIFIED",
		1:  "VIDEO_TYPE_ADVERTISEMENTVIDEO",
		2:  "VIDEO_TYPE_ADULTCONTENT",
		3:  "VIDEO_TYPE_ADVICEMAGAZINE",
		4:  "VIDEO_TYPE_ANIMATION",
		5:  "VIDEO_TYPE_BALLETVIDEO",
		6:  "VIDEO_TYPE_BEHINDTHESCENES",
		7:  "VIDEO_TYPE_BLACKANDWHITEVIDEO",
		8:  "VIDEO_TYPE_CHILDRENSFILM",
		9:  "VIDEO_TYPE_COLORIZEDVIDEO",
		10: "VIDEO_TYPE_COLUMNVIDEO",
		11: "VIDEO_TYPE_CONCERTCLIP",
		12: "VIDEO_TYPE_CONCERTVIDEO",
		13: "VIDEO_TYPE_CORPORATEFILM",
		14: "VIDEO_TYPE_CREDITS",
		15: "VIDEO_TYPE_DOCUMENTARY",
		16: "VIDEO_TYPE_EDUCATIONALVIDEO",
		17: "VIDEO_TYPE_EPISODE",
		18: "VIDEO_TYPE_FEATUREFILM",
		19: "VIDEO_TYPE_FICTION",
		20: "VIDEO_TYPE_INFOMERCIALVIDEO",
		21: "VIDEO_TYPE_INTERVIEW",
		22: "VIDEO_TYPE_KARAOKE",
		23: "VIDEO_TYPE_LIVEEVENTVIDEO",
		24: "VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO",
		25: "VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO",
		26: "VIDEO_TYPE_LYRICVIDEO",
		27: "VIDEO_TYPE_MAGAZINE",
		28: "VIDEO_TYPE_MENU",
		29: "VIDEO_TYPE_MULTIMEDIAVIDEO",
		30: "VIDEO_TYPE_MUSICALWORKCLIP",
		31: "VIDEO_TYPE_MUSICALWORKREADALONGVIDEO",
		32: "VIDEO_TYPE_MUSICALWORKTRAILER",
		33: "VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER",
		34: "VIDEO_TYPE_NEWS",
		35: "VIDEO_TYPE_NONMUSICALWORKCLIP",
		36: "VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO",
		37: "VIDEO_TYPE_NONMUSICALWORKTRAILER",
		38: "VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER",
		39: "VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING",
		40: "VIDEO_TYPE_OPERAVIDEO",
		41: "VIDEO_TYPE_PERFORMANCE",
		42: "VIDEO_TYPE_READALONGVIDEO",
		43: "VIDEO_TYPE_REALITYTVSHOWVIDEO",
		44: "VIDEO_TYPE_SEASON",
		45: "VIDEO_TYPE_SERIALAUDIOVISUALRECORDING",
		46: "VIDEO_TYPE_SERIES",
		47: "VIDEO_TYPE_SHORTFILM",
		48: "VIDEO_TYPE_SILENTVIDEO",
		49: "VIDEO_TYPE_SKETCHVIDEO",
		50: "VIDEO_TYPE_SOAPSITCOM",
		51: "VIDEO_TYPE_SPECIALEVENT",
		52: "VIDEO_TYPE_SPORT",
		53: "VIDEO_TYPE_THEATRICALWORKVIDEO",
		54: "VIDEO_TYPE_TRAILERVIDEO",
		55: "VIDEO_TYPE_TVFILM",
		56: "VIDEO_TYPE_TVPROGRAM",
		57: "VIDEO_TYPE_TVSHOWVIDEO",
		58: "VIDEO_TYPE_UNKNOWN",
		59: "VIDEO_TYPE_VIDEOCHAPTER",
		60: "VIDEO_TYPE_VIDEOCLIP",
		61: "VIDEO_TYPE_VIDEOREPORT",
		62: "VIDEO_TYPE_VIDEOSTEM",
		63: "VIDEO_TYPE_DRAMA",
		64: "VIDEO_TYPE_DRAMATICOMUSICALVIDEO",
		65: "VIDEO_TYPE_INTERACTIVERESOURCE",
		66: "VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO",
		67: "VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO",
		68: "VIDEO_TYPE_USERDEFINED",
		69: "VIDEO_TYPE_WEBRESOURCE",
	}
	VideoType_value = map[string]int32{
		"VIDEO_TYPE_UNSPECIFIED":                   0,
		"VIDEO_TYPE_ADVERTISEMENTVIDEO":            1,
		"VIDEO_TYPE_ADULTCONTENT":                  2,
		"VIDEO_TYPE_ADVICEMAGAZINE":                3,
		"VIDEO_TYPE_ANIMATION":                     4,
		"VIDEO_TYPE_BALLETVIDEO":                   5,
		"VIDEO_TYPE_BEHINDTHESCENES":               6,
		"VIDEO_TYPE_BLACKANDWHITEVIDEO":            7,
		"VIDEO_TYPE_CHILDRENSFILM":                 8,
		"VIDEO_TYPE_COLORIZEDVIDEO":                9,
		"VIDEO_TYPE_COLUMNVIDEO":                   10,
		"VIDEO_TYPE_CONCERTCLIP":                   11,
		"VIDEO_TYPE_CONCERTVIDEO":                  12,
		"VIDEO_TYPE_CORPORATEFILM":                 13,
		"VIDEO_TYPE_CREDITS":                       14,
		"VIDEO_TYPE_DOCUMENTARY":                   15,
		"VIDEO_TYPE_EDUCATIONALVIDEO":              16,
		"VIDEO_TYPE_EPISODE":                       17,
		"VIDEO_TYPE_FEATUREFILM":                   18,
		"VIDEO_TYPE_FICTION":                       19,
		"VIDEO_TYPE_INFOMERCIALVIDEO":              20,
		"VIDEO_TYPE_INTERVIEW":                     21,
		"VIDEO_TYPE_KARAOKE":                       22,
		"VIDEO_TYPE_LIVEEVENTVIDEO":                23,
		"VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO":      24,
		"VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO":   25,
		"VIDEO_TYPE_LYRICVIDEO":                    26,
		"VIDEO_TYPE_MAGAZINE":                      27,
		"VIDEO_TYPE_MENU":                          28,
		"VIDEO_TYPE_MULTIMEDIAVIDEO":               29,
		"VIDEO_TYPE_MUSICALWORKCLIP":               30,
		"VIDEO_TYPE_MUSICALWORKREADALONGVIDEO":     31,
		"VIDEO_TYPE_MUSICALWORKTRAILER":            32,
		"VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER":       33,
		"VIDEO_TYPE_NEWS":                          34,
		"VIDEO_TYPE_NONMUSICALWORKCLIP":            35,
		"VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO":  36,
		"VIDEO_TYPE_NONMUSICALWORKTRAILER":         37,
		"VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER":    38,
		"VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING": 39,
		"VIDEO_TYPE_OPERAVIDEO":                    40,
		"VIDEO_TYPE_PERFORMANCE":                   41,
		"VIDEO_TYPE_READALONGVIDEO":                42,
		"VIDEO_TYPE_REALITYTVSHOWVIDEO":            43,
		"VIDEO_TYPE_SEASON":                        44,
		"VIDEO_TYPE_SERIALAUDIOVISUALRECORDING":    45,
		"VIDEO_TYPE_SERIES":                        46,
		"VIDEO_TYPE_SHORTFILM":                     47,
		"VIDEO_TYPE_SILENTVIDEO":                   48,
		"VIDEO_TYPE_SKETCHVIDEO":                   49,
		"VIDEO_TYPE_SOAPSITCOM":                    50,
		"VIDEO_TYPE_SPECIALEVENT":                  51,
		"VIDEO_TYPE_SPORT":                         52,
		"VIDEO_TYPE_THEATRICALWORKVIDEO":           53,
		"VIDEO_TYPE_TRAILERVIDEO":                  54,
		"VIDEO_TYPE_TVFILM":                        55,
		"VIDEO_TYPE_TVPROGRAM":                     56,
		"VIDEO_TYPE_TVSHOWVIDEO":                   57,
		"VIDEO_TYPE_UNKNOWN":                       58,
		"VIDEO_TYPE_VIDEOCHAPTER":                  59,
		"VIDEO_TYPE_VIDEOCLIP":                     60,
		"VIDEO_TYPE_VIDEOREPORT":                   61,
		"VIDEO_TYPE_VIDEOSTEM":                     62,
		"VIDEO_TYPE_DRAMA":                         63,
		"VIDEO_TYPE_DRAMATICOMUSICALVIDEO":         64,
		"VIDEO_TYPE_INTERACTIVERESOURCE":           65,
		"VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO":     66,
		"VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO":  67,
		"VIDEO_TYPE_USERDEFINED":                   68,
		"VIDEO_TYPE_WEBRESOURCE":                   69,
	}
)

func (x VideoType) Enum() *VideoType {
	p := new(VideoType)
	*p = x
	return p
}

func (x VideoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[200].Descriptor()
}

func (VideoType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[200]
}

func (x VideoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoType.Descriptor instead.
func (VideoType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{200}
}

type VideoTypeDSRF int32

const (
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_UNSPECIFIED                   VideoTypeDSRF = 0
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_ADVERTISEMENTVIDEO            VideoTypeDSRF = 1
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_ADULTCONTENT                  VideoTypeDSRF = 2
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_ADVICEMAGAZINE                VideoTypeDSRF = 3
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_ANIMATION                     VideoTypeDSRF = 4
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_BALLETVIDEO                   VideoTypeDSRF = 5
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_BEHINDTHESCENES               VideoTypeDSRF = 6
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_BLACKANDWHITEVIDEO            VideoTypeDSRF = 7
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_CHILDRENSFILM                 VideoTypeDSRF = 8
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_COLORIZEDVIDEO                VideoTypeDSRF = 9
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_COLUMNVIDEO                   VideoTypeDSRF = 10
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_CONCERTCLIP                   VideoTypeDSRF = 11
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_CONCERTVIDEO                  VideoTypeDSRF = 12
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_CORPORATEFILM                 VideoTypeDSRF = 13
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_CREDITS                       VideoTypeDSRF = 14
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_DOCUMENTARY                   VideoTypeDSRF = 15
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_EDUCATIONALVIDEO              VideoTypeDSRF = 16
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_EPISODE                       VideoTypeDSRF = 17
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_FEATUREFILM                   VideoTypeDSRF = 18
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_FICTION                       VideoTypeDSRF = 19
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_INFOMERCIALVIDEO              VideoTypeDSRF = 20
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_INTERVIEW                     VideoTypeDSRF = 21
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_KARAOKE                       VideoTypeDSRF = 22
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_LIVEEVENTVIDEO                VideoTypeDSRF = 23
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_LONGFORMMUSICALWORKVIDEO      VideoTypeDSRF = 24
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_LONGFORMNONMUSICALWORKVIDEO   VideoTypeDSRF = 25
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_LYRICVIDEO                    VideoTypeDSRF = 26
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_MAGAZINE                      VideoTypeDSRF = 27
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_MENU                          VideoTypeDSRF = 28
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_MULTIMEDIAVIDEO               VideoTypeDSRF = 29
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_MUSICALWORKCLIP               VideoTypeDSRF = 30
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_MUSICALWORKREADALONGVIDEO     VideoTypeDSRF = 31
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_MUSICALWORKTRAILER            VideoTypeDSRF = 32
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_MUSICALWORKVIDEOCHAPTER       VideoTypeDSRF = 33
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_NEWS                          VideoTypeDSRF = 34
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_NONMUSICALWORKCLIP            VideoTypeDSRF = 35
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_NONMUSICALWORKREADALONGVIDEO  VideoTypeDSRF = 36
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_NONMUSICALWORKTRAILER         VideoTypeDSRF = 37
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_NONMUSICALWORKVIDEOCHAPTER    VideoTypeDSRF = 38
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_NONSERIALAUDIOVISUALRECORDING VideoTypeDSRF = 39
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_OPERAVIDEO                    VideoTypeDSRF = 40
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_PERFORMANCE                   VideoTypeDSRF = 41
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_READALONGVIDEO                VideoTypeDSRF = 42
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_REALITYTVSHOWVIDEO            VideoTypeDSRF = 43
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_SEASON                        VideoTypeDSRF = 44
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_SERIALAUDIOVISUALRECORDING    VideoTypeDSRF = 45
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_SERIES                        VideoTypeDSRF = 46
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_SHORTFILM                     VideoTypeDSRF = 47
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_SILENTVIDEO                   VideoTypeDSRF = 48
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_SKETCHVIDEO                   VideoTypeDSRF = 49
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_SOAPSITCOM                    VideoTypeDSRF = 50
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_SPECIALEVENT                  VideoTypeDSRF = 51
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_SPORT                         VideoTypeDSRF = 52
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_THEATRICALWORKVIDEO           VideoTypeDSRF = 53
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_TRAILERVIDEO                  VideoTypeDSRF = 54
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_TVFILM                        VideoTypeDSRF = 55
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_TVPROGRAM                     VideoTypeDSRF = 56
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_TVSHOWVIDEO                   VideoTypeDSRF = 57
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_UNKNOWN                       VideoTypeDSRF = 58
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_VIDEOCHAPTER                  VideoTypeDSRF = 59
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_VIDEOCLIP                     VideoTypeDSRF = 60
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_VIDEOREPORT                   VideoTypeDSRF = 61
	VideoTypeDSRF_VIDEO_TYPE_D_S_R_F_VIDEOSTEM                     VideoTypeDSRF = 62
)

// Enum value maps for VideoTypeDSRF.
var (
	VideoTypeDSRF_name = map[int32]string{
		0:  "VIDEO_TYPE_D_S_R_F_UNSPECIFIED",
		1:  "VIDEO_TYPE_D_S_R_F_ADVERTISEMENTVIDEO",
		2:  "VIDEO_TYPE_D_S_R_F_ADULTCONTENT",
		3:  "VIDEO_TYPE_D_S_R_F_ADVICEMAGAZINE",
		4:  "VIDEO_TYPE_D_S_R_F_ANIMATION",
		5:  "VIDEO_TYPE_D_S_R_F_BALLETVIDEO",
		6:  "VIDEO_TYPE_D_S_R_F_BEHINDTHESCENES",
		7:  "VIDEO_TYPE_D_S_R_F_BLACKANDWHITEVIDEO",
		8:  "VIDEO_TYPE_D_S_R_F_CHILDRENSFILM",
		9:  "VIDEO_TYPE_D_S_R_F_COLORIZEDVIDEO",
		10: "VIDEO_TYPE_D_S_R_F_COLUMNVIDEO",
		11: "VIDEO_TYPE_D_S_R_F_CONCERTCLIP",
		12: "VIDEO_TYPE_D_S_R_F_CONCERTVIDEO",
		13: "VIDEO_TYPE_D_S_R_F_CORPORATEFILM",
		14: "VIDEO_TYPE_D_S_R_F_CREDITS",
		15: "VIDEO_TYPE_D_S_R_F_DOCUMENTARY",
		16: "VIDEO_TYPE_D_S_R_F_EDUCATIONALVIDEO",
		17: "VIDEO_TYPE_D_S_R_F_EPISODE",
		18: "VIDEO_TYPE_D_S_R_F_FEATUREFILM",
		19: "VIDEO_TYPE_D_S_R_F_FICTION",
		20: "VIDEO_TYPE_D_S_R_F_INFOMERCIALVIDEO",
		21: "VIDEO_TYPE_D_S_R_F_INTERVIEW",
		22: "VIDEO_TYPE_D_S_R_F_KARAOKE",
		23: "VIDEO_TYPE_D_S_R_F_LIVEEVENTVIDEO",
		24: "VIDEO_TYPE_D_S_R_F_LONGFORMMUSICALWORKVIDEO",
		25: "VIDEO_TYPE_D_S_R_F_LONGFORMNONMUSICALWORKVIDEO",
		26: "VIDEO_TYPE_D_S_R_F_LYRICVIDEO",
		27: "VIDEO_TYPE_D_S_R_F_MAGAZINE",
		28: "VIDEO_TYPE_D_S_R_F_MENU",
		29: "VIDEO_TYPE_D_S_R_F_MULTIMEDIAVIDEO",
		30: "VIDEO_TYPE_D_S_R_F_MUSICALWORKCLIP",
		31: "VIDEO_TYPE_D_S_R_F_MUSICALWORKREADALONGVIDEO",
		32: "VIDEO_TYPE_D_S_R_F_MUSICALWORKTRAILER",
		33: "VIDEO_TYPE_D_S_R_F_MUSICALWORKVIDEOCHAPTER",
		34: "VIDEO_TYPE_D_S_R_F_NEWS",
		35: "VIDEO_TYPE_D_S_R_F_NONMUSICALWORKCLIP",
		36: "VIDEO_TYPE_D_S_R_F_NONMUSICALWORKREADALONGVIDEO",
		37: "VIDEO_TYPE_D_S_R_F_NONMUSICALWORKTRAILER",
		38: "VIDEO_TYPE_D_S_R_F_NONMUSICALWORKVIDEOCHAPTER",
		39: "VIDEO_TYPE_D_S_R_F_NONSERIALAUDIOVISUALRECORDING",
		40: "VIDEO_TYPE_D_S_R_F_OPERAVIDEO",
		41: "VIDEO_TYPE_D_S_R_F_PERFORMANCE",
		42: "VIDEO_TYPE_D_S_R_F_READALONGVIDEO",
		43: "VIDEO_TYPE_D_S_R_F_REALITYTVSHOWVIDEO",
		44: "VIDEO_TYPE_D_S_R_F_SEASON",
		45: "VIDEO_TYPE_D_S_R_F_SERIALAUDIOVISUALRECORDING",
		46: "VIDEO_TYPE_D_S_R_F_SERIES",
		47: "VIDEO_TYPE_D_S_R_F_SHORTFILM",
		48: "VIDEO_TYPE_D_S_R_F_SILENTVIDEO",
		49: "VIDEO_TYPE_D_S_R_F_SKETCHVIDEO",
		50: "VIDEO_TYPE_D_S_R_F_SOAPSITCOM",
		51: "VIDEO_TYPE_D_S_R_F_SPECIALEVENT",
		52: "VIDEO_TYPE_D_S_R_F_SPORT",
		53: "VIDEO_TYPE_D_S_R_F_THEATRICALWORKVIDEO",
		54: "VIDEO_TYPE_D_S_R_F_TRAILERVIDEO",
		55: "VIDEO_TYPE_D_S_R_F_TVFILM",
		56: "VIDEO_TYPE_D_S_R_F_TVPROGRAM",
		57: "VIDEO_TYPE_D_S_R_F_TVSHOWVIDEO",
		58: "VIDEO_TYPE_D_S_R_F_UNKNOWN",
		59: "VIDEO_TYPE_D_S_R_F_VIDEOCHAPTER",
		60: "VIDEO_TYPE_D_S_R_F_VIDEOCLIP",
		61: "VIDEO_TYPE_D_S_R_F_VIDEOREPORT",
		62: "VIDEO_TYPE_D_S_R_F_VIDEOSTEM",
	}
	VideoTypeDSRF_value = map[string]int32{
		"VIDEO_TYPE_D_S_R_F_UNSPECIFIED":                   0,
		"VIDEO_TYPE_D_S_R_F_ADVERTISEMENTVIDEO":            1,
		"VIDEO_TYPE_D_S_R_F_ADULTCONTENT":                  2,
		"VIDEO_TYPE_D_S_R_F_ADVICEMAGAZINE":                3,
		"VIDEO_TYPE_D_S_R_F_ANIMATION":                     4,
		"VIDEO_TYPE_D_S_R_F_BALLETVIDEO":                   5,
		"VIDEO_TYPE_D_S_R_F_BEHINDTHESCENES":               6,
		"VIDEO_TYPE_D_S_R_F_BLACKANDWHITEVIDEO":            7,
		"VIDEO_TYPE_D_S_R_F_CHILDRENSFILM":                 8,
		"VIDEO_TYPE_D_S_R_F_COLORIZEDVIDEO":                9,
		"VIDEO_TYPE_D_S_R_F_COLUMNVIDEO":                   10,
		"VIDEO_TYPE_D_S_R_F_CONCERTCLIP":                   11,
		"VIDEO_TYPE_D_S_R_F_CONCERTVIDEO":                  12,
		"VIDEO_TYPE_D_S_R_F_CORPORATEFILM":                 13,
		"VIDEO_TYPE_D_S_R_F_CREDITS":                       14,
		"VIDEO_TYPE_D_S_R_F_DOCUMENTARY":                   15,
		"VIDEO_TYPE_D_S_R_F_EDUCATIONALVIDEO":              16,
		"VIDEO_TYPE_D_S_R_F_EPISODE":                       17,
		"VIDEO_TYPE_D_S_R_F_FEATUREFILM":                   18,
		"VIDEO_TYPE_D_S_R_F_FICTION":                       19,
		"VIDEO_TYPE_D_S_R_F_INFOMERCIALVIDEO":              20,
		"VIDEO_TYPE_D_S_R_F_INTERVIEW":                     21,
		"VIDEO_TYPE_D_S_R_F_KARAOKE":                       22,
		"VIDEO_TYPE_D_S_R_F_LIVEEVENTVIDEO":                23,
		"VIDEO_TYPE_D_S_R_F_LONGFORMMUSICALWORKVIDEO":      24,
		"VIDEO_TYPE_D_S_R_F_LONGFORMNONMUSICALWORKVIDEO":   25,
		"VIDEO_TYPE_D_S_R_F_LYRICVIDEO":                    26,
		"VIDEO_TYPE_D_S_R_F_MAGAZINE":                      27,
		"VIDEO_TYPE_D_S_R_F_MENU":                          28,
		"VIDEO_TYPE_D_S_R_F_MULTIMEDIAVIDEO":               29,
		"VIDEO_TYPE_D_S_R_F_MUSICALWORKCLIP":               30,
		"VIDEO_TYPE_D_S_R_F_MUSICALWORKREADALONGVIDEO":     31,
		"VIDEO_TYPE_D_S_R_F_MUSICALWORKTRAILER":            32,
		"VIDEO_TYPE_D_S_R_F_MUSICALWORKVIDEOCHAPTER":       33,
		"VIDEO_TYPE_D_S_R_F_NEWS":                          34,
		"VIDEO_TYPE_D_S_R_F_NONMUSICALWORKCLIP":            35,
		"VIDEO_TYPE_D_S_R_F_NONMUSICALWORKREADALONGVIDEO":  36,
		"VIDEO_TYPE_D_S_R_F_NONMUSICALWORKTRAILER":         37,
		"VIDEO_TYPE_D_S_R_F_NONMUSICALWORKVIDEOCHAPTER":    38,
		"VIDEO_TYPE_D_S_R_F_NONSERIALAUDIOVISUALRECORDING": 39,
		"VIDEO_TYPE_D_S_R_F_OPERAVIDEO":                    40,
		"VIDEO_TYPE_D_S_R_F_PERFORMANCE":                   41,
		"VIDEO_TYPE_D_S_R_F_READALONGVIDEO":                42,
		"VIDEO_TYPE_D_S_R_F_REALITYTVSHOWVIDEO":            43,
		"VIDEO_TYPE_D_S_R_F_SEASON":                        44,
		"VIDEO_TYPE_D_S_R_F_SERIALAUDIOVISUALRECORDING":    45,
		"VIDEO_TYPE_D_S_R_F_SERIES":                        46,
		"VIDEO_TYPE_D_S_R_F_SHORTFILM":                     47,
		"VIDEO_TYPE_D_S_R_F_SILENTVIDEO":                   48,
		"VIDEO_TYPE_D_S_R_F_SKETCHVIDEO":                   49,
		"VIDEO_TYPE_D_S_R_F_SOAPSITCOM":                    50,
		"VIDEO_TYPE_D_S_R_F_SPECIALEVENT":                  51,
		"VIDEO_TYPE_D_S_R_F_SPORT":                         52,
		"VIDEO_TYPE_D_S_R_F_THEATRICALWORKVIDEO":           53,
		"VIDEO_TYPE_D_S_R_F_TRAILERVIDEO":                  54,
		"VIDEO_TYPE_D_S_R_F_TVFILM":                        55,
		"VIDEO_TYPE_D_S_R_F_TVPROGRAM":                     56,
		"VIDEO_TYPE_D_S_R_F_TVSHOWVIDEO":                   57,
		"VIDEO_TYPE_D_S_R_F_UNKNOWN":                       58,
		"VIDEO_TYPE_D_S_R_F_VIDEOCHAPTER":                  59,
		"VIDEO_TYPE_D_S_R_F_VIDEOCLIP":                     60,
		"VIDEO_TYPE_D_S_R_F_VIDEOREPORT":                   61,
		"VIDEO_TYPE_D_S_R_F_VIDEOSTEM":                     62,
	}
)

func (x VideoTypeDSRF) Enum() *VideoTypeDSRF {
	p := new(VideoTypeDSRF)
	*p = x
	return p
}

func (x VideoTypeDSRF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoTypeDSRF) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[201].Descriptor()
}

func (VideoTypeDSRF) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[201]
}

func (x VideoTypeDSRF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoTypeDSRF.Descriptor instead.
func (VideoTypeDSRF) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{201}
}

type VisualPerceptionType int32

const (
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_UNSPECIFIED VisualPerceptionType = 0
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_BACKGROUND  VisualPerceptionType = 1
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_USERDEFINED VisualPerceptionType = 2
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_VISUAL      VisualPerceptionType = 3
)

// Enum value maps for VisualPerceptionType.
var (
	VisualPerceptionType_name = map[int32]string{
		0: "VISUAL_PERCEPTION_TYPE_UNSPECIFIED",
		1: "VISUAL_PERCEPTION_TYPE_BACKGROUND",
		2: "VISUAL_PERCEPTION_TYPE_USERDEFINED",
		3: "VISUAL_PERCEPTION_TYPE_VISUAL",
	}
	VisualPerceptionType_value = map[string]int32{
		"VISUAL_PERCEPTION_TYPE_UNSPECIFIED": 0,
		"VISUAL_PERCEPTION_TYPE_BACKGROUND":  1,
		"VISUAL_PERCEPTION_TYPE_USERDEFINED": 2,
		"VISUAL_PERCEPTION_TYPE_VISUAL":      3,
	}
)

func (x VisualPerceptionType) Enum() *VisualPerceptionType {
	p := new(VisualPerceptionType)
	*p = x
	return p
}

func (x VisualPerceptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisualPerceptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[202].Descriptor()
}

func (VisualPerceptionType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[202]
}

func (x VisualPerceptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisualPerceptionType.Descriptor instead.
func (VisualPerceptionType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{202}
}

type VocalRegister int32

const (
	VocalRegister_VOCAL_REGISTER_UNSPECIFIED  VocalRegister = 0
	VocalRegister_VOCAL_REGISTER_ALTO         VocalRegister = 1
	VocalRegister_VOCAL_REGISTER_BARITONE     VocalRegister = 2
	VocalRegister_VOCAL_REGISTER_BASSBARITONE VocalRegister = 3
	VocalRegister_VOCAL_REGISTER_BASS         VocalRegister = 4
	VocalRegister_VOCAL_REGISTER_CASTRATI     VocalRegister = 5
	VocalRegister_VOCAL_REGISTER_CONTRABASS   VocalRegister = 6
	VocalRegister_VOCAL_REGISTER_CONTRALTO    VocalRegister = 7
	VocalRegister_VOCAL_REGISTER_COUNTERTENOR VocalRegister = 8
	VocalRegister_VOCAL_REGISTER_FALSETTO     VocalRegister = 9
	VocalRegister_VOCAL_REGISTER_MEZZOSOPRANO VocalRegister = 10
	VocalRegister_VOCAL_REGISTER_PARADON      VocalRegister = 11
	VocalRegister_VOCAL_REGISTER_PICCOLO      VocalRegister = 12
	VocalRegister_VOCAL_REGISTER_SOPRANINO    VocalRegister = 13
	VocalRegister_VOCAL_REGISTER_SOPRANO      VocalRegister = 14
	VocalRegister_VOCAL_REGISTER_TENOR        VocalRegister = 15
	VocalRegister_VOCAL_REGISTER_TREBLE       VocalRegister = 16
	VocalRegister_VOCAL_REGISTER_VIOLAPARADON VocalRegister = 17
	VocalRegister_VOCAL_REGISTER_USERDEFINED  VocalRegister = 18
)

// Enum value maps for VocalRegister.
var (
	VocalRegister_name = map[int32]string{
		0:  "VOCAL_REGISTER_UNSPECIFIED",
		1:  "VOCAL_REGISTER_ALTO",
		2:  "VOCAL_REGISTER_BARITONE",
		3:  "VOCAL_REGISTER_BASSBARITONE",
		4:  "VOCAL_REGISTER_BASS",
		5:  "VOCAL_REGISTER_CASTRATI",
		6:  "VOCAL_REGISTER_CONTRABASS",
		7:  "VOCAL_REGISTER_CONTRALTO",
		8:  "VOCAL_REGISTER_COUNTERTENOR",
		9:  "VOCAL_REGISTER_FALSETTO",
		10: "VOCAL_REGISTER_MEZZOSOPRANO",
		11: "VOCAL_REGISTER_PARADON",
		12: "VOCAL_REGISTER_PICCOLO",
		13: "VOCAL_REGISTER_SOPRANINO",
		14: "VOCAL_REGISTER_SOPRANO",
		15: "VOCAL_REGISTER_TENOR",
		16: "VOCAL_REGISTER_TREBLE",
		17: "VOCAL_REGISTER_VIOLAPARADON",
		18: "VOCAL_REGISTER_USERDEFINED",
	}
	VocalRegister_value = map[string]int32{
		"VOCAL_REGISTER_UNSPECIFIED":  0,
		"VOCAL_REGISTER_ALTO":         1,
		"VOCAL_REGISTER_BARITONE":     2,
		"VOCAL_REGISTER_BASSBARITONE": 3,
		"VOCAL_REGISTER_BASS":         4,
		"VOCAL_REGISTER_CASTRATI":     5,
		"VOCAL_REGISTER_CONTRABASS":   6,
		"VOCAL_REGISTER_CONTRALTO":    7,
		"VOCAL_REGISTER_COUNTERTENOR": 8,
		"VOCAL_REGISTER_FALSETTO":     9,
		"VOCAL_REGISTER_MEZZOSOPRANO": 10,
		"VOCAL_REGISTER_PARADON":      11,
		"VOCAL_REGISTER_PICCOLO":      12,
		"VOCAL_REGISTER_SOPRANINO":    13,
		"VOCAL_REGISTER_SOPRANO":      14,
		"VOCAL_REGISTER_TENOR":        15,
		"VOCAL_REGISTER_TREBLE":       16,
		"VOCAL_REGISTER_VIOLAPARADON": 17,
		"VOCAL_REGISTER_USERDEFINED":  18,
	}
)

func (x VocalRegister) Enum() *VocalRegister {
	p := new(VocalRegister)
	*p = x
	return p
}

func (x VocalRegister) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VocalRegister) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[203].Descriptor()
}

func (VocalRegister) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[203]
}

func (x VocalRegister) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VocalRegister.Descriptor instead.
func (VocalRegister) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{203}
}

type VocalType int32

const (
	VocalType_VOCAL_TYPE_UNSPECIFIED  VocalType = 0
	VocalType_VOCAL_TYPE_INSTRUMENTAL VocalType = 1
	VocalType_VOCAL_TYPE_USERDEFINED  VocalType = 2
	VocalType_VOCAL_TYPE_VOCAL        VocalType = 3
)

// Enum value maps for VocalType.
var (
	VocalType_name = map[int32]string{
		0: "VOCAL_TYPE_UNSPECIFIED",
		1: "VOCAL_TYPE_INSTRUMENTAL",
		2: "VOCAL_TYPE_USERDEFINED",
		3: "VOCAL_TYPE_VOCAL",
	}
	VocalType_value = map[string]int32{
		"VOCAL_TYPE_UNSPECIFIED":  0,
		"VOCAL_TYPE_INSTRUMENTAL": 1,
		"VOCAL_TYPE_USERDEFINED":  2,
		"VOCAL_TYPE_VOCAL":        3,
	}
)

func (x VocalType) Enum() *VocalType {
	p := new(VocalType)
	*p = x
	return p
}

func (x VocalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VocalType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[204].Descriptor()
}

func (VocalType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[204]
}

func (x VocalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VocalType.Descriptor instead.
func (VocalType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{204}
}

type WorkRelationshipType int32

const (
	WorkRelationshipType_WORK_RELATIONSHIP_TYPE_UNSPECIFIED         WorkRelationshipType = 0
	WorkRelationshipType_WORK_RELATIONSHIP_TYPE_ARRANGEMENTOF       WorkRelationshipType = 1
	WorkRelationshipType_WORK_RELATIONSHIP_TYPE_BASISFORARRANGEMENT WorkRelationshipType = 2
	WorkRelationshipType_WORK_RELATIONSHIP_TYPE_MELODYBORROWEDFROM  WorkRelationshipType = 3
	WorkRelationshipType_WORK_RELATIONSHIP_TYPE_REIMAGININGOF       WorkRelationshipType = 4
	WorkRelationshipType_WORK_RELATIONSHIP_TYPE_TAKENFROM           WorkRelationshipType = 5
	WorkRelationshipType_WORK_RELATIONSHIP_TYPE_USERDEFINED         WorkRelationshipType = 6
)

// Enum value maps for WorkRelationshipType.
var (
	WorkRelationshipType_name = map[int32]string{
		0: "WORK_RELATIONSHIP_TYPE_UNSPECIFIED",
		1: "WORK_RELATIONSHIP_TYPE_ARRANGEMENTOF",
		2: "WORK_RELATIONSHIP_TYPE_BASISFORARRANGEMENT",
		3: "WORK_RELATIONSHIP_TYPE_MELODYBORROWEDFROM",
		4: "WORK_RELATIONSHIP_TYPE_REIMAGININGOF",
		5: "WORK_RELATIONSHIP_TYPE_TAKENFROM",
		6: "WORK_RELATIONSHIP_TYPE_USERDEFINED",
	}
	WorkRelationshipType_value = map[string]int32{
		"WORK_RELATIONSHIP_TYPE_UNSPECIFIED":         0,
		"WORK_RELATIONSHIP_TYPE_ARRANGEMENTOF":       1,
		"WORK_RELATIONSHIP_TYPE_BASISFORARRANGEMENT": 2,
		"WORK_RELATIONSHIP_TYPE_MELODYBORROWEDFROM":  3,
		"WORK_RELATIONSHIP_TYPE_REIMAGININGOF":       4,
		"WORK_RELATIONSHIP_TYPE_TAKENFROM":           5,
		"WORK_RELATIONSHIP_TYPE_USERDEFINED":         6,
	}
)

func (x WorkRelationshipType) Enum() *WorkRelationshipType {
	p := new(WorkRelationshipType)
	*p = x
	return p
}

func (x WorkRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_ddex_avs_v20200518_v20200518_proto_enumTypes[205].Descriptor()
}

func (WorkRelationshipType) Type() protoreflect.EnumType {
	return &file_ddex_avs_v20200518_v20200518_proto_enumTypes[205]
}

func (x WorkRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkRelationshipType.Descriptor instead.
func (WorkRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP(), []int{205}
}

var File_ddex_avs_v20200518_v20200518_proto protoreflect.FileDescriptor

const file_ddex_avs_v20200518_v20200518_proto_rawDesc = "" +
	"\n" +
	"\"ddex/avs/v20200518/v20200518.proto\x12\x12ddex.avs.v20200518*z\n" +
	"\x1bAdditionalRightsClaimStatus\x12.\n" +
	"*ADDITIONAL_RIGHTS_CLAIM_STATUS_UNSPECIFIED\x10\x00\x12+\n" +
	"'ADDITIONAL_RIGHTS_CLAIM_STATUS_ACCEPTED\x10\x01*\x88\x02\n" +
	"\x13AdditionalTitleType\x12%\n" +
	"!ADDITIONAL_TITLE_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&ADDITIONAL_TITLE_TYPE_ALTERNATIVETITLE\x10\x01\x12%\n" +
	"!ADDITIONAL_TITLE_TYPE_FORMALTITLE\x10\x02\x12'\n" +
	"#ADDITIONAL_TITLE_TYPE_GROUPINGTITLE\x10\x03\x12'\n" +
	"#ADDITIONAL_TITLE_TYPE_ORIGINALTITLE\x10\x04\x12%\n" +
	"!ADDITIONAL_TITLE_TYPE_USERDEFINED\x10\x05*U\n" +
	"\x11AdditionalUseType\x12#\n" +
	"\x1fADDITIONAL_USE_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17ADDITIONAL_USE_TYPE_ALL\x10\x01*\xf8\x02\n" +
	"\x13AdditionalVideoType\x12%\n" +
	"!ADDITIONAL_VIDEO_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bADDITIONAL_VIDEO_TYPE_DRAMA\x10\x01\x12/\n" +
	"+ADDITIONAL_VIDEO_TYPE_DRAMATICOMUSICALVIDEO\x10\x02\x12-\n" +
	")ADDITIONAL_VIDEO_TYPE_INTERACTIVERESOURCE\x10\x03\x123\n" +
	"/ADDITIONAL_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO\x10\x04\x126\n" +
	"2ADDITIONAL_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO\x10\x05\x12%\n" +
	"!ADDITIONAL_VIDEO_TYPE_USERDEFINED\x10\x06\x12%\n" +
	"!ADDITIONAL_VIDEO_TYPE_WEBRESOURCE\x10\a*\xf8\x02\n" +
	"\x1fAdministratingRecordCompanyRole\x122\n" +
	".ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED\x10\x00\x12D\n" +
	"@ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT\x10\x01\x12:\n" +
	"6ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR\x10\x02\x12;\n" +
	"7ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR\x10\x03\x12.\n" +
	"*ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN\x10\x04\x122\n" +
	".ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED\x10\x05*\xf3\x01\n" +
	"\x0fAffiliationType\x12 \n" +
	"\x1cAFFILIATION_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&AFFILIATION_TYPE_MUSICLICENSINGCOMPANY\x10\x01\x12#\n" +
	"\x1fAFFILIATION_TYPE_MUSICPUBLISHER\x10\x02\x12'\n" +
	"#AFFILIATION_TYPE_MUSICRIGHTSSOCIETY\x10\x03\x12\"\n" +
	"\x1eAFFILIATION_TYPE_RECORDCOMPANY\x10\x04\x12 \n" +
	"\x1cAFFILIATION_TYPE_USERDEFINED\x10\x05*\xdcz\n" +
	"\x10AllTerritoryCode\x12\"\n" +
	"\x1eALL_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AD\x10\x01\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AE\x10\x02\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AF\x10\x03\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AG\x10\x04\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AI\x10\x05\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AL\x10\x06\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AM\x10\a\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AN\x10\b\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AO\x10\t\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AQ\x10\n" +
	"\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AR\x10\v\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AS\x10\f\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AT\x10\r\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AU\x10\x0e\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AW\x10\x0f\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AX\x10\x10\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_AZ\x10\x11\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BA\x10\x12\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BB\x10\x13\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BD\x10\x14\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BE\x10\x15\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BF\x10\x16\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BG\x10\x17\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BH\x10\x18\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BI\x10\x19\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BJ\x10\x1a\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BL\x10\x1b\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BM\x10\x1c\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BN\x10\x1d\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BO\x10\x1e\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BQ\x10\x1f\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BR\x10 \x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BS\x10!\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BT\x10\"\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BV\x10#\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BW\x10$\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BY\x10%\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_BZ\x10&\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CA\x10'\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CC\x10(\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CD\x10)\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CF\x10*\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CG\x10+\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CH\x10,\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CI\x10-\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CK\x10.\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CL\x10/\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CM\x100\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CN\x101\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CO\x102\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CR\x103\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CS\x104\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CU\x105\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CV\x106\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CW\x107\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CX\x108\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CY\x109\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_CZ\x10:\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DE\x10;\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DJ\x10<\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DK\x10=\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DM\x10>\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DO\x10?\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_DZ\x10@\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_EC\x10A\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_EE\x10B\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_EG\x10C\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_EH\x10D\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_ER\x10E\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_ES\x10F\x12\x1c\n" +
	"\x18ALL_TERRITORY_CODE_ES_CE\x10G\x12\x1c\n" +
	"\x18ALL_TERRITORY_CODE_ES_CN\x10H\x12\x1c\n" +
	"\x18ALL_TERRITORY_CODE_ES_ML\x10I\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_ET\x10J\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FI\x10K\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FJ\x10L\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FK\x10M\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FM\x10N\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FO\x10O\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_FR\x10P\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GA\x10Q\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GB\x10R\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GD\x10S\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GE\x10T\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GF\x10U\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GG\x10V\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GH\x10W\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GI\x10X\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GL\x10Y\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GM\x10Z\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GN\x10[\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GP\x10\\\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GQ\x10]\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GR\x10^\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GS\x10_\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GT\x10`\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GU\x10a\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GW\x10b\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_GY\x10c\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HK\x10d\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HM\x10e\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HN\x10f\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HR\x10g\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HT\x10h\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_HU\x10i\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_ID\x10j\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IE\x10k\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IL\x10l\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IM\x10m\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IN\x10n\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IO\x10o\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IQ\x10p\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IR\x10q\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IS\x10r\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_IT\x10s\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_JE\x10t\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_JM\x10u\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_JO\x10v\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_JP\x10w\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KE\x10x\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KG\x10y\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KH\x10z\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KI\x10{\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KM\x10|\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KN\x10}\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KP\x10~\x12\x19\n" +
	"\x15ALL_TERRITORY_CODE_KR\x10\x7f\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_KW\x10\x80\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_KY\x10\x81\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_KZ\x10\x82\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LA\x10\x83\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LB\x10\x84\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LC\x10\x85\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LI\x10\x86\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LK\x10\x87\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LR\x10\x88\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LS\x10\x89\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LT\x10\x8a\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LU\x10\x8b\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LV\x10\x8c\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_LY\x10\x8d\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MA\x10\x8e\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MC\x10\x8f\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MD\x10\x90\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ME\x10\x91\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MF\x10\x92\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MG\x10\x93\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MH\x10\x94\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MK\x10\x95\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ML\x10\x96\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MM\x10\x97\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MN\x10\x98\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MO\x10\x99\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MP\x10\x9a\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MQ\x10\x9b\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MR\x10\x9c\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MS\x10\x9d\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MT\x10\x9e\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MU\x10\x9f\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MV\x10\xa0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MW\x10\xa1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MX\x10\xa2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MY\x10\xa3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_MZ\x10\xa4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NA\x10\xa5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NC\x10\xa6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NE\x10\xa7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NF\x10\xa8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NG\x10\xa9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NI\x10\xaa\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NL\x10\xab\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NO\x10\xac\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NP\x10\xad\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NR\x10\xae\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NU\x10\xaf\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_NZ\x10\xb0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_OM\x10\xb1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PA\x10\xb2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PE\x10\xb3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PF\x10\xb4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PG\x10\xb5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PH\x10\xb6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PK\x10\xb7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PL\x10\xb8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PM\x10\xb9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PN\x10\xba\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PR\x10\xbb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PS\x10\xbc\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PT\x10\xbd\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PW\x10\xbe\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_PY\x10\xbf\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_QA\x10\xc0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RE\x10\xc1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RO\x10\xc2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RS\x10\xc3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RU\x10\xc4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_RW\x10\xc5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SA\x10\xc6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SB\x10\xc7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SC\x10\xc8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SD\x10\xc9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SE\x10\xca\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SG\x10\xcb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SH\x10\xcc\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SI\x10\xcd\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SJ\x10\xce\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SK\x10\xcf\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SL\x10\xd0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SM\x10\xd1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SN\x10\xd2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SO\x10\xd3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SR\x10\xd4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SS\x10\xd5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ST\x10\xd6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SV\x10\xd7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SX\x10\xd8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SY\x10\xd9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_SZ\x10\xda\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TC\x10\xdb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TD\x10\xdc\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TF\x10\xdd\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TG\x10\xde\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TH\x10\xdf\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TJ\x10\xe0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TK\x10\xe1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TL\x10\xe2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TM\x10\xe3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TN\x10\xe4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TO\x10\xe5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TR\x10\xe6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TT\x10\xe7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TV\x10\xe8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TW\x10\xe9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_TZ\x10\xea\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UA\x10\xeb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UG\x10\xec\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UM\x10\xed\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_US\x10\xee\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UY\x10\xef\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_UZ\x10\xf0\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VA\x10\xf1\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VC\x10\xf2\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VE\x10\xf3\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VG\x10\xf4\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VI\x10\xf5\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VN\x10\xf6\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_VU\x10\xf7\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_WF\x10\xf8\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_WS\x10\xf9\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_YE\x10\xfa\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_YT\x10\xfb\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ZA\x10\xfc\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ZM\x10\xfd\x01\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_ZW\x10\xfe\x01\x12\x1b\n" +
	"\x16ALL_TERRITORY_CODE_E_4\x10\xff\x01\x12\x1b\n" +
	"\x16ALL_TERRITORY_CODE_E_8\x10\x80\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_12\x10\x81\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_20\x10\x82\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_24\x10\x83\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_28\x10\x84\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_31\x10\x85\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_32\x10\x86\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_36\x10\x87\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_40\x10\x88\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_44\x10\x89\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_48\x10\x8a\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_50\x10\x8b\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_51\x10\x8c\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_52\x10\x8d\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_56\x10\x8e\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_64\x10\x8f\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_68\x10\x90\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_70\x10\x91\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_72\x10\x92\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_76\x10\x93\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_84\x10\x94\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_90\x10\x95\x02\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_E_96\x10\x96\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_100\x10\x97\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_104\x10\x98\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_108\x10\x99\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_112\x10\x9a\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_116\x10\x9b\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_120\x10\x9c\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_124\x10\x9d\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_132\x10\x9e\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_140\x10\x9f\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_144\x10\xa0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_148\x10\xa1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_152\x10\xa2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_156\x10\xa3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_158\x10\xa4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_170\x10\xa5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_174\x10\xa6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_178\x10\xa7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_180\x10\xa8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_188\x10\xa9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_191\x10\xaa\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_192\x10\xab\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_196\x10\xac\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_200\x10\xad\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_203\x10\xae\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_204\x10\xaf\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_208\x10\xb0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_212\x10\xb1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_214\x10\xb2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_218\x10\xb3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_222\x10\xb4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_226\x10\xb5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_230\x10\xb6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_231\x10\xb7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_232\x10\xb8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_233\x10\xb9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_242\x10\xba\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_246\x10\xbb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_250\x10\xbc\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_258\x10\xbd\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_262\x10\xbe\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_266\x10\xbf\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_268\x10\xc0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_270\x10\xc1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_276\x10\xc2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_278\x10\xc3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_280\x10\xc4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_288\x10\xc5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_296\x10\xc6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_300\x10\xc7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_308\x10\xc8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_320\x10\xc9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_324\x10\xca\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_328\x10\xcb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_332\x10\xcc\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_336\x10\xcd\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_340\x10\xce\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_344\x10\xcf\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_348\x10\xd0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_352\x10\xd1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_356\x10\xd2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_360\x10\xd3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_364\x10\xd4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_368\x10\xd5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_372\x10\xd6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_376\x10\xd7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_380\x10\xd8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_384\x10\xd9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_388\x10\xda\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_392\x10\xdb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_398\x10\xdc\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_400\x10\xdd\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_404\x10\xde\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_408\x10\xdf\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_410\x10\xe0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_414\x10\xe1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_417\x10\xe2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_418\x10\xe3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_422\x10\xe4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_426\x10\xe5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_428\x10\xe6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_430\x10\xe7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_434\x10\xe8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_438\x10\xe9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_440\x10\xea\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_442\x10\xeb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_450\x10\xec\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_454\x10\xed\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_458\x10\xee\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_462\x10\xef\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_466\x10\xf0\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_470\x10\xf1\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_478\x10\xf2\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_480\x10\xf3\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_484\x10\xf4\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_492\x10\xf5\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_496\x10\xf6\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_498\x10\xf7\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_499\x10\xf8\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_504\x10\xf9\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_508\x10\xfa\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_512\x10\xfb\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_516\x10\xfc\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_520\x10\xfd\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_524\x10\xfe\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_528\x10\xff\x02\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_540\x10\x80\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_548\x10\x81\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_554\x10\x82\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_558\x10\x83\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_562\x10\x84\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_566\x10\x85\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_578\x10\x86\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_583\x10\x87\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_584\x10\x88\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_585\x10\x89\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_586\x10\x8a\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_591\x10\x8b\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_598\x10\x8c\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_600\x10\x8d\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_604\x10\x8e\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_608\x10\x8f\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_616\x10\x90\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_620\x10\x91\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_624\x10\x92\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_626\x10\x93\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_630\x10\x94\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_634\x10\x95\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_642\x10\x96\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_643\x10\x97\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_646\x10\x98\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_659\x10\x99\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_662\x10\x9a\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_670\x10\x9b\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_674\x10\x9c\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_678\x10\x9d\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_682\x10\x9e\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_686\x10\x9f\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_688\x10\xa0\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_690\x10\xa1\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_694\x10\xa2\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_702\x10\xa3\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_703\x10\xa4\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_704\x10\xa5\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_705\x10\xa6\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_706\x10\xa7\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_710\x10\xa8\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_716\x10\xa9\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_720\x10\xaa\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_724\x10\xab\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_728\x10\xac\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_729\x10\xad\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_732\x10\xae\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_736\x10\xaf\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_740\x10\xb0\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_748\x10\xb1\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_752\x10\xb2\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_756\x10\xb3\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_760\x10\xb4\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_762\x10\xb5\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_764\x10\xb6\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_768\x10\xb7\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_776\x10\xb8\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_780\x10\xb9\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_784\x10\xba\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_788\x10\xbb\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_792\x10\xbc\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_795\x10\xbd\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_798\x10\xbe\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_800\x10\xbf\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_804\x10\xc0\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_807\x10\xc1\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_810\x10\xc2\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_818\x10\xc3\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_826\x10\xc4\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_834\x10\xc5\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_840\x10\xc6\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_854\x10\xc7\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_858\x10\xc8\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_860\x10\xc9\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_862\x10\xca\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_882\x10\xcb\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_886\x10\xcc\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_887\x10\xcd\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_890\x10\xce\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_891\x10\xcf\x03\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_894\x10\xd0\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2100\x10\xd1\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2101\x10\xd2\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2102\x10\xd3\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2103\x10\xd4\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2104\x10\xd5\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2105\x10\xd6\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2106\x10\xd7\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2107\x10\xd8\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2108\x10\xd9\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2109\x10\xda\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2110\x10\xdb\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2111\x10\xdc\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2112\x10\xdd\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2113\x10\xde\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2114\x10\xdf\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2115\x10\xe0\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2116\x10\xe1\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2117\x10\xe2\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2118\x10\xe3\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2119\x10\xe4\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2120\x10\xe5\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2121\x10\xe6\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2122\x10\xe7\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2123\x10\xe8\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2124\x10\xe9\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2125\x10\xea\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2126\x10\xeb\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2127\x10\xec\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2128\x10\xed\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2129\x10\xee\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2130\x10\xef\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2131\x10\xf0\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2132\x10\xf1\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2133\x10\xf2\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2134\x10\xf3\x03\x12\x1e\n" +
	"\x19ALL_TERRITORY_CODE_E_2136\x10\xf4\x03\x12\x1a\n" +
	"\x15ALL_TERRITORY_CODE_XK\x10\xf5\x03\x12!\n" +
	"\x1cALL_TERRITORY_CODE_WORLDWIDE\x10\xf6\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_AIDJ\x10\xf7\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_ANHH\x10\xf8\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_BQAQ\x10\xf9\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_BUMM\x10\xfa\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_BYAA\x10\xfb\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_CSHH\x10\xfc\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_CSXX\x10\xfd\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_CTKI\x10\xfe\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_DDDE\x10\xff\x03\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_DYBJ\x10\x80\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_FQHH\x10\x81\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_FXFR\x10\x82\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_GEHH\x10\x83\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_HVBF\x10\x84\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_JTUM\x10\x85\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_MIUM\x10\x86\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_NHVU\x10\x87\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_NQAQ\x10\x88\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_NTHH\x10\x89\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_PCHH\x10\x8a\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_PUUM\x10\x8b\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_PZPA\x10\x8c\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_RHZW\x10\x8d\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_SKIN\x10\x8e\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_SUHH\x10\x8f\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_TPTL\x10\x90\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_VDVN\x10\x91\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_WKUM\x10\x92\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_YDYE\x10\x93\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_YUCS\x10\x94\x04\x12\x1c\n" +
	"\x17ALL_TERRITORY_CODE_ZRCD\x10\x95\x04\x12\x1d\n" +
	"\x18ALL_TERRITORY_CODE_E_446\x10\x96\x04*\xdc\x04\n" +
	"\n" +
	"ArtistRole\x12\x1b\n" +
	"\x17ARTIST_ROLE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16ARTIST_ROLE_ARTCOPYIST\x10\x01\x12\x1c\n" +
	"\x18ARTIST_ROLE_CALLIGRAPHER\x10\x02\x12\x1c\n" +
	"\x18ARTIST_ROLE_CARTOGRAPHER\x10\x03\x12\x1a\n" +
	"\x16ARTIST_ROLE_CARTOONIST\x10\x04\x12&\n" +
	"\"ARTIST_ROLE_COMPUTERGRAPHICCREATOR\x10\x05\x12\"\n" +
	"\x1eARTIST_ROLE_COMPUTERPROGRAMMER\x10\x06\x12\x1a\n" +
	"\x16ARTIST_ROLE_DELINEATOR\x10\a\x12\x18\n" +
	"\x14ARTIST_ROLE_DESIGNER\x10\b\x12\x1b\n" +
	"\x17ARTIST_ROLE_DRAUGHTSMAN\x10\t\x12\x1b\n" +
	"\x17ARTIST_ROLE_FACSIMILIST\x10\n" +
	"\x12\x1d\n" +
	"\x19ARTIST_ROLE_GRAPHICARTIST\x10\v\x12\x1b\n" +
	"\x17ARTIST_ROLE_ILLUSTRATOR\x10\f\x12\x1c\n" +
	"\x18ARTIST_ROLE_MUSICCOPYIST\x10\r\x12\x1c\n" +
	"\x18ARTIST_ROLE_NOTSPECIFIED\x10\x0e\x12\x17\n" +
	"\x13ARTIST_ROLE_PAINTER\x10\x0f\x12\x1c\n" +
	"\x18ARTIST_ROLE_PHOTOGRAPHER\x10\x10\x12\x1c\n" +
	"\x18ARTIST_ROLE_TYPEDESIGNER\x10\x11\x12\x17\n" +
	"\x13ARTIST_ROLE_UNKNOWN\x10\x12\x12\x1b\n" +
	"\x17ARTIST_ROLE_USERDEFINED\x10\x13*\x8a\b\n" +
	"\n" +
	"ArtistType\x12\x1b\n" +
	"\x17ARTIST_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dARTIST_TYPE_ACAPPELLAENSEMBLE\x10\x01\x12\"\n" +
	"\x1eARTIST_TYPE_BARBERSHOPENSEMBLE\x10\x02\x12\x17\n" +
	"\x13ARTIST_TYPE_BIGBAND\x10\x03\x12\x19\n" +
	"\x15ARTIST_TYPE_BRASSBAND\x10\x04\x12 \n" +
	"\x1cARTIST_TYPE_CHAMBERORCHESTRA\x10\x05\x12\x1c\n" +
	"\x18ARTIST_TYPE_COUNTRYGROUP\x10\x06\x12\x14\n" +
	"\x10ARTIST_TYPE_DUET\x10\a\x12\x1f\n" +
	"\x1bARTIST_TYPE_ELECTRONICGROUP\x10\b\x12 \n" +
	"\x1cARTIST_TYPE_FIFEANDDRUMCORPS\x10\t\x12\x19\n" +
	"\x15ARTIST_TYPE_FOLKGROUP\x10\n" +
	"\x12*\n" +
	"&ARTIST_TYPE_INSTRUMENTANDACCOMPANIMENT\x10\v\x12\x19\n" +
	"\x15ARTIST_TYPE_JAZZCOMBO\x10\f\x12\x1a\n" +
	"\x16ARTIST_TYPE_LATINGROUP\x10\r\x12\x1c\n" +
	"\x18ARTIST_TYPE_MARCHINGBAND\x10\x0e\x12\x1c\n" +
	"\x18ARTIST_TYPE_MARIACHIBAND\x10\x0f\x12\x19\n" +
	"\x15ARTIST_TYPE_ORCHESTRA\x10\x10\x12\x1d\n" +
	"\x19ARTIST_TYPE_PIANOENSEMBLE\x10\x11\x12\x19\n" +
	"\x15ARTIST_TYPE_PIANOTRIO\x10\x12\x12\x1c\n" +
	"\x18ARTIST_TYPE_PIANOQUARTET\x10\x13\x12\x1c\n" +
	"\x18ARTIST_TYPE_PIANOQUINTET\x10\x14\x12 \n" +
	"\x1cARTIST_TYPE_PIPEANDDRUMGROUP\x10\x15\x12\x17\n" +
	"\x13ARTIST_TYPE_POPBAND\x10\x16\x12\x1a\n" +
	"\x16ARTIST_TYPE_REGGAEBAND\x10\x17\x12\x18\n" +
	"\x14ARTIST_TYPE_ROCKBAND\x10\x18\x12\x1e\n" +
	"\x1aARTIST_TYPE_SOLOINSTRUMENT\x10\x19\x12\x19\n" +
	"\x15ARTIST_TYPE_SOLOVOICE\x10\x1a\x12\x1e\n" +
	"\x1aARTIST_TYPE_STRINGENSEMBLE\x10\x1b\x12\x1d\n" +
	"\x19ARTIST_TYPE_STRINGQUARTET\x10\x1c\x12\x1d\n" +
	"\x19ARTIST_TYPE_STRINGQUINTET\x10\x1d\x12\x14\n" +
	"\x10ARTIST_TYPE_TRIO\x10\x1e\x12\x1b\n" +
	"\x17ARTIST_TYPE_USERDEFINED\x10\x1f\x12%\n" +
	"!ARTIST_TYPE_VOICEANDACCOMPANIMENT\x10 \x12\x1c\n" +
	"\x18ARTIST_TYPE_WINDENSEMBLE\x10!*j\n" +
	"\x0fAspectRatioType\x12!\n" +
	"\x1dASPECT_RATIO_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ASPECT_RATIO_TYPE_PAR\x10\x01\x12\x19\n" +
	"\x15ASPECT_RATIO_TYPE_DAR\x10\x02*\x94\x02\n" +
	"\fAsserterType\x12\x1d\n" +
	"\x19ASSERTER_TYPE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fASSERTER_TYPE_COLLECTIONSOCIETY\x10\x01\x12%\n" +
	"!ASSERTER_TYPE_INTERESTEDPUBLISHER\x10\x02\x12'\n" +
	"#ASSERTER_TYPE_MUSICLICENSINGCOMPANY\x10\x03\x12\x1b\n" +
	"\x17ASSERTER_TYPE_PUBLISHER\x10\x04\x125\n" +
	"1ASSERTER_TYPE_RECORDCOMPANYWITHINTERESTINRESOURCE\x10\x05\x12\x1c\n" +
	"\x18ASSERTER_TYPE_THIRDPARTY\x10\x06*R\n" +
	"\x0fAssertionStatus\x12 \n" +
	"\x1cASSERTION_STATUS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19ASSERTION_STATUS_VERIFIED\x10\x01*\x98\x05\n" +
	"\x0eAudioCodecType\x12 \n" +
	"\x1cAUDIO_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_AAC\x10\x01\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_ADPCM\x10\x02\x12\x19\n" +
	"\x15AUDIO_CODEC_TYPE_ALAW\x10\x03\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_AMR\x10\x04\x12\x1b\n" +
	"\x17AUDIO_CODEC_TYPE_AMR_NB\x10\x05\x12\x1b\n" +
	"\x17AUDIO_CODEC_TYPE_AMR_WB\x10\x06\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_ATMOS\x10\a\x12\x19\n" +
	"\x15AUDIO_CODEC_TYPE_FLAC\x10\b\x12\x17\n" +
	"\x13AUDIO_CODEC_TYPE_MP\x10\t\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_MP2\x10\n" +
	"\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_MP3\x10\v\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_MQA\x10\f\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_MULAW\x10\r\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_PCM\x10\x0e\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_PDM\x10\x0f\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_QCELP\x10\x10\x12\x1e\n" +
	"\x1aAUDIO_CODEC_TYPE_REALAUDIO\x10\x11\x12\x1e\n" +
	"\x1aAUDIO_CODEC_TYPE_SHOCKWAVE\x10\x12\x12\x1c\n" +
	"\x18AUDIO_CODEC_TYPE_UNKNOWN\x10\x13\x12 \n" +
	"\x1cAUDIO_CODEC_TYPE_USERDEFINED\x10\x14\x12\x1b\n" +
	"\x17AUDIO_CODEC_TYPE_VORBIS\x10\x15\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_WMA\x10\x16*\xc8\x04\n" +
	"\x19BasisForRevenueAllocation\x12,\n" +
	"(BASIS_FOR_REVENUE_ALLOCATION_UNSPECIFIED\x10\x00\x12(\n" +
	"$BASIS_FOR_REVENUE_ALLOCATION_DERIVED\x10\x01\x12+\n" +
	"'BASIS_FOR_REVENUE_ALLOCATION_FULLCENSUS\x10\x02\x12,\n" +
	"(BASIS_FOR_REVENUE_ALLOCATION_MARKETSHARE\x10\x03\x12&\n" +
	"\"BASIS_FOR_REVENUE_ALLOCATION_PROXY\x10\x04\x12-\n" +
	")BASIS_FOR_REVENUE_ALLOCATION_SAMPLECENSUS\x10\x05\x12)\n" +
	"%BASIS_FOR_REVENUE_ALLOCATION_USAGELOG\x10\x06\x12-\n" +
	")BASIS_FOR_REVENUE_ALLOCATION_FULLUSAGELOG\x10\a\x12-\n" +
	")BASIS_FOR_REVENUE_ALLOCATION_SALESFIGURES\x10\b\x12/\n" +
	"+BASIS_FOR_REVENUE_ALLOCATION_SAMPLEUSAGELOG\x10\t\x129\n" +
	"5BASIS_FOR_REVENUE_ALLOCATION_UNITMULTIPLIEDBYDURATION\x10\n" +
	"\x12,\n" +
	"(BASIS_FOR_REVENUE_ALLOCATION_USERDEFINED\x10\v*q\n" +
	"\x0eBinaryDataType\x12 \n" +
	"\x1cBINARY_DATA_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19BINARY_DATA_TYPE_BINARY64\x10\x01\x12\x1e\n" +
	"\x1aBINARY_DATA_TYPE_HEXBINARY\x10\x02*\xee\x05\n" +
	"\"BusinessMusicalWorkContributorRole\x126\n" +
	"2BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x128\n" +
	"4BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER\x10\x01\x12<\n" +
	"8BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT\x10\x02\x12:\n" +
	"6BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER\x10\x03\x129\n" +
	"5BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER\x10\x04\x12=\n" +
	"9BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER\x10\x05\x12<\n" +
	"8BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER\x10\x06\x12>\n" +
	":BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER\x10\a\x127\n" +
	"3BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER\x10\b\x12?\n" +
	";BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER\x10\t\x122\n" +
	".BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN\x10\n" +
	"\x126\n" +
	"2BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED\x10\v*\x99\x1d\n" +
	"\vCarrierType\x12\x1c\n" +
	"\x18CARRIER_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX\x10\x01\x12 \n" +
	"\x1cCARRIER_TYPE_E_33RPM10INCHLP\x10\x02\x12$\n" +
	" CARRIER_TYPE_E_33RPM10INCHSINGLE\x10\x03\x12 \n" +
	"\x1cCARRIER_TYPE_E_33RPM12INCHLP\x10\x04\x12(\n" +
	"$CARRIER_TYPE_E_33RPM12INCHLP20TRACKS\x10\x05\x12(\n" +
	"$CARRIER_TYPE_E_33RPM12INCHMAXISINGLE\x10\x06\x12$\n" +
	" CARRIER_TYPE_E_33RPM12INCHSINGLE\x10\a\x12\x1f\n" +
	"\x1bCARRIER_TYPE_E_33RPM7INCHLP\x10\b\x12#\n" +
	"\x1fCARRIER_TYPE_E_33RPM7INCHSINGLE\x10\t\x12 \n" +
	"\x1cCARRIER_TYPE_E_45RPM10INCHLP\x10\n" +
	"\x12(\n" +
	"$CARRIER_TYPE_E_45RPM10INCHMAXISINGLE\x10\v\x12$\n" +
	" CARRIER_TYPE_E_45RPM10INCHSINGLE\x10\f\x12 \n" +
	"\x1cCARRIER_TYPE_E_45RPM12INCHLP\x10\r\x12(\n" +
	"$CARRIER_TYPE_E_45RPM12INCHMAXISINGLE\x10\x0e\x12$\n" +
	" CARRIER_TYPE_E_45RPM12INCHSINGLE\x10\x0f\x12\x1f\n" +
	"\x1bCARRIER_TYPE_E_45RPM7INCHEP\x10\x10\x12#\n" +
	"\x1fCARRIER_TYPE_E_45RPM7INCHSINGLE\x10\x11\x12'\n" +
	"#CARRIER_TYPE_E_7INCHMAXISINGLEREMIX\x10\x12\x12\x17\n" +
	"\x13CARRIER_TYPE_BLURAY\x10\x13\x12\x13\n" +
	"\x0fCARRIER_TYPE_CD\x10\x14\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDCOMPILATION\x10\x15\x12\x15\n" +
	"\x11CARRIER_TYPE_CDEP\x10\x16\x12\x1d\n" +
	"\x19CARRIER_TYPE_CDEPENHANCED\x10\x17\x12#\n" +
	"\x1fCARRIER_TYPE_CDEXTRACOMPILATION\x10\x18\x12\x1a\n" +
	"\x16CARRIER_TYPE_CDEXTRAEP\x10\x19\x12\x1a\n" +
	"\x16CARRIER_TYPE_CDEXTRALP\x10\x1a\x12!\n" +
	"\x1dCARRIER_TYPE_CDEXTRAMAXIREMIX\x10\x1b\x12\"\n" +
	"\x1eCARRIER_TYPE_CDEXTRAMAXISINGLE\x10\x1c\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDEXTRASINGLE\x10\x1d\x12%\n" +
	"!CARRIER_TYPE_CDEXTRASINGLE2TRACKS\x10\x1e\x12\x15\n" +
	"\x11CARRIER_TYPE_CDLP\x10\x1f\x12\x1a\n" +
	"\x16CARRIER_TYPE_CDLP5INCH\x10 \x12\x1d\n" +
	"\x19CARRIER_TYPE_CDLPENHANCED\x10!\x12 \n" +
	"\x1cCARRIER_TYPE_CDLPPLUSCDVIDEO\x10\"\x12!\n" +
	"\x1dCARRIER_TYPE_CDLPPLUSDVDAUDIO\x10#\x12!\n" +
	"\x1dCARRIER_TYPE_CDLPPLUSDVDVIDEO\x10$\x12\x1c\n" +
	"\x18CARRIER_TYPE_CDLPPLUSWEB\x10%\x12\x1d\n" +
	"\x19CARRIER_TYPE_CDMAXISINGLE\x10&\x12\"\n" +
	"\x1eCARRIER_TYPE_CDMAXISINGLE3INCH\x10'\x12%\n" +
	"!CARRIER_TYPE_CDMAXISINGLEENHANCED\x10(\x12\"\n" +
	"\x1eCARRIER_TYPE_CDMAXISINGLEREMIX\x10)\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDPLUSCDBONUS\x10*\x12\x1f\n" +
	"\x1bCARRIER_TYPE_CDPLUSDVDBONUS\x10+\x12\x16\n" +
	"\x12CARRIER_TYPE_CDROM\x10,\x12\x19\n" +
	"\x15CARRIER_TYPE_CDSINGLE\x10-\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDSINGLE3INCH\x10.\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDSINGLE5INCH\x10/\x12\x1f\n" +
	"\x1bCARRIER_TYPE_CDVIDEO5LPNTSC\x100\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDVIDEO5LPPAL\x101\x12'\n" +
	"#CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE\x102\x12\x1a\n" +
	"\x16CARRIER_TYPE_COMBIPACK\x103\x12\x14\n" +
	"\x10CARRIER_TYPE_DCC\x104\x12\x1f\n" +
	"\x1bCARRIER_TYPE_DCCCOMPILATION\x105\x12\x19\n" +
	"\x15CARRIER_TYPE_DUALDISC\x106\x12\x14\n" +
	"\x10CARRIER_TYPE_DVD\x107\x12\x19\n" +
	"\x15CARRIER_TYPE_DVDAUDIO\x108\x12$\n" +
	" CARRIER_TYPE_DVDAUDIO5MAXISINGLE\x109\x12\x1b\n" +
	"\x17CARRIER_TYPE_DVDAUDIOLP\x10:\x12\x1f\n" +
	"\x1bCARRIER_TYPE_DVDAUDIOSINGLE\x10;\x12\x17\n" +
	"\x13CARRIER_TYPE_DVDROM\x10<\x12\x1a\n" +
	"\x16CARRIER_TYPE_DVDSINGLE\x10=\x12\x19\n" +
	"\x15CARRIER_TYPE_DVDVIDEO\x10>\x12(\n" +
	"$CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC\x10?\x12'\n" +
	"#CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL\x10@\x12$\n" +
	" CARRIER_TYPE_DVDVIDEO5SINGLENTSC\x10A\x12#\n" +
	"\x1fCARRIER_TYPE_DVDVIDEO5SINGLEPAL\x10B\x12\x1f\n" +
	"\x1bCARRIER_TYPE_DVDVIDEOLPNTSC\x10C\x12\x1e\n" +
	"\x1aCARRIER_TYPE_DVDVIDEOLPPAL\x10D\x12-\n" +
	")CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE\x10E\x12\x18\n" +
	"\x14CARRIER_TYPE_FANPACK\x10F\x12\x1b\n" +
	"\x17CARRIER_TYPE_FILESYSTEM\x10G\x12\x1d\n" +
	"\x19CARRIER_TYPE_HDDVDVIDEOLP\x10H\x12&\n" +
	"\"CARRIER_TYPE_LASERDISCLP12INCHNTSC\x10I\x12(\n" +
	"$CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP\x10J\x12\x1e\n" +
	"\x1aCARRIER_TYPE_LPCOMPILATION\x10K\x12 \n" +
	"\x1cCARRIER_TYPE_LPIDENTICALTOCD\x10L\x12\x13\n" +
	"\x0fCARRIER_TYPE_MC\x10M\x12(\n" +
	"$CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP\x10N\x12\x1e\n" +
	"\x1aCARRIER_TYPE_MCCOMPILATION\x10O\x12\x1b\n" +
	"\x17CARRIER_TYPE_MCDOUBLELP\x10P\x12\x15\n" +
	"\x11CARRIER_TYPE_MCEP\x10Q\x12 \n" +
	"\x1cCARRIER_TYPE_MCIDENTICALTOCD\x10R\x12\x15\n" +
	"\x11CARRIER_TYPE_MCLP\x10S\x12\x1d\n" +
	"\x19CARRIER_TYPE_MCMAXISINGLE\x10T\x12\x18\n" +
	"\x14CARRIER_TYPE_MCREMIX\x10U\x12\x19\n" +
	"\x15CARRIER_TYPE_MCSINGLE\x10V\x12'\n" +
	"#CARRIER_TYPE_MCSINGLEIDENTICALTOCDS\x10W\x12\x1d\n" +
	"\x19CARRIER_TYPE_MEMORYDEVICE\x10X\x12$\n" +
	" CARRIER_TYPE_MEMORYDEVICEAUDIOLP\x10Y\x12\"\n" +
	"\x1eCARRIER_TYPE_MEMORYDEVICEMIXLP\x10Z\x12$\n" +
	" CARRIER_TYPE_MEMORYDEVICEVIDEOLP\x10[\x12\x1c\n" +
	"\x18CARRIER_TYPE_MERCHANDISE\x10\\\x12\x19\n" +
	"\x15CARRIER_TYPE_MINIDISC\x10]\x12$\n" +
	" CARRIER_TYPE_MINIDISCCOMPILATION\x10^\x12\x1b\n" +
	"\x17CARRIER_TYPE_MINIDISCEP\x10_\x12\"\n" +
	"\x1eCARRIER_TYPE_MINIDISCMAXIREMIX\x10`\x12)\n" +
	"%CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE\x10a\x12\x1d\n" +
	"\x19CARRIER_TYPE_ONLINESYSTEM\x10b\x12\x1c\n" +
	"\x18CARRIER_TYPE_PREPAIDCARD\x10c\x12\x15\n" +
	"\x11CARRIER_TYPE_SACD\x10d\x12 \n" +
	"\x1cCARRIER_TYPE_SACDCOMPILATION\x10e\x12\x1d\n" +
	"\x19CARRIER_TYPE_SACDLPSTEREO\x10f\x12$\n" +
	" CARRIER_TYPE_SACDLPSTEREOCDAUDIO\x10g\x12%\n" +
	"!CARRIER_TYPE_SACDLPSTEREOSURROUND\x10h\x12,\n" +
	"(CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO\x10i\x12&\n" +
	"\"CARRIER_TYPE_SACDLPSURROUNDCDAUDIO\x10j\x12!\n" +
	"\x1dCARRIER_TYPE_SACDPLUSDVDVIDEO\x10k\x12\x1c\n" +
	"\x18CARRIER_TYPE_USERDEFINED\x10l\x12\x18\n" +
	"\x14CARRIER_TYPE_VHSNTSC\x10m\x12\x17\n" +
	"\x13CARRIER_TYPE_VHSPAL\x10n\x12\x1c\n" +
	"\x18CARRIER_TYPE_VHSPLUSCDLP\x10o\x12\x19\n" +
	"\x15CARRIER_TYPE_VHSSECAM\x10p*\x9f\x01\n" +
	"\x13CatalogTransferType\x12%\n" +
	"!CATALOG_TRANSFER_TYPE_UNSPECIFIED\x10\x00\x12.\n" +
	"*CATALOG_TRANSFER_TYPE_USSTATUTORYREVERSION\x10\x01\x121\n" +
	"-CATALOG_TRANSFER_TYPE_STANDARDCATALOGTRANSFER\x10\x02*\xc2\x02\n" +
	"\x10CdProtectionType\x12\"\n" +
	"\x1eCD_PROTECTION_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19CD_PROTECTION_TYPE_CDS100\x10\x01\x12\x1d\n" +
	"\x19CD_PROTECTION_TYPE_CDS200\x10\x02\x12\x1d\n" +
	"\x19CD_PROTECTION_TYPE_CDS300\x10\x03\x12 \n" +
	"\x1cCD_PROTECTION_TYPE_KEY2AUDIO\x10\x04\x12\"\n" +
	"\x1eCD_PROTECTION_TYPE_MEDIAMAXCD3\x10\x05\x12#\n" +
	"\x1fCD_PROTECTION_TYPE_NOTPROTECTED\x10\x06\x12\x1e\n" +
	"\x1aCD_PROTECTION_TYPE_UNKNOWN\x10\a\x12\"\n" +
	"\x1eCD_PROTECTION_TYPE_USERDEFINED\x10\b*\x9c\x01\n" +
	"\rCharacterType\x12\x1e\n" +
	"\x1aCHARACTER_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cCHARACTER_TYPE_MAINCHARACTER\x10\x01\x12!\n" +
	"\x1dCHARACTER_TYPE_OTHERCHARACTER\x10\x02\x12&\n" +
	"\"CHARACTER_TYPE_SUPPORTINGCHARACTER\x10\x03*\xb4\x02\n" +
	"\vClaimStatus\x12\x1c\n" +
	"\x18CLAIM_STATUS_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aCLAIM_STATUS_COMPLETECLAIM\x10\x01\x12#\n" +
	"\x1fCLAIM_STATUS_COMPLETEUNDERCLAIM\x10\x02\x12 \n" +
	"\x1cCLAIM_STATUS_INCOMPLETECLAIM\x10\x03\x12%\n" +
	"!CLAIM_STATUS_INCOMPLETEUNDERCLAIM\x10\x04\x12\x1f\n" +
	"\x1bCLAIM_STATUS_MAJOROVERCLAIM\x10\x05\x12\x1f\n" +
	"\x1bCLAIM_STATUS_MINOROVERCLAIM\x10\x06\x12\x1a\n" +
	"\x16CLAIM_STATUS_OVERCLAIM\x10\a\x12\x1b\n" +
	"\x17CLAIM_STATUS_UNDERCLAIM\x10\b*\xb9\x04\n" +
	"\x0fClassifiedGenre\x12 \n" +
	"\x1cCLASSIFIED_GENRE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CLASSIFIED_GENRE_BLUES\x10\x01\x12#\n" +
	"\x1fCLASSIFIED_GENRE_CLASSICALMUSIC\x10\x02\x12!\n" +
	"\x1dCLASSIFIED_GENRE_COUNTRYMUSIC\x10\x03\x12$\n" +
	" CLASSIFIED_GENRE_ELECTRONICMUSIC\x10\x04\x12\x19\n" +
	"\x15CLASSIFIED_GENRE_FOLK\x10\x05\x12\x1b\n" +
	"\x17CLASSIFIED_GENRE_GOSPEL\x10\x06\x12\x1b\n" +
	"\x17CLASSIFIED_GENRE_HIPHOP\x10\a\x12\x19\n" +
	"\x15CLASSIFIED_GENRE_JAZZ\x10\b\x12\x1a\n" +
	"\x16CLASSIFIED_GENRE_LATIN\x10\t\x12\x18\n" +
	"\x14CLASSIFIED_GENRE_POP\x10\n" +
	"\x12\x1a\n" +
	"\x16CLASSIFIED_GENRE_R_N_B\x10\v\x12\x1b\n" +
	"\x17CLASSIFIED_GENRE_REGGAE\x10\f\x12\x19\n" +
	"\x15CLASSIFIED_GENRE_ROCK\x10\r\x12\x1b\n" +
	"\x17CLASSIFIED_GENRE_SPOKEN\x10\x0e\x12 \n" +
	"\x1cCLASSIFIED_GENRE_TRADITIONAL\x10\x0f\x12 \n" +
	"\x1cCLASSIFIED_GENRE_USERDEFINED\x10\x10\x12\x1f\n" +
	"\x1bCLASSIFIED_GENRE_WORLDMUSIC\x10\x11*Z\n" +
	"\n" +
	"CodingType\x12\x1b\n" +
	"\x17CODING_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14CODING_TYPE_LOSSLESS\x10\x01\x12\x15\n" +
	"\x11CODING_TYPE_LOSSY\x10\x02*\x97\x01\n" +
	"\x15CollectionMandateType\x12'\n" +
	"#COLLECTION_MANDATE_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!COLLECTION_MANDATE_TYPE_PERFORMER\x10\x01\x12.\n" +
	"*COLLECTION_MANDATE_TYPE_RIGHTSORGANIZATION\x10\x02*`\n" +
	"\x12CommentaryNoteType\x12$\n" +
	" COMMENTARY_NOTE_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" COMMENTARY_NOTE_TYPE_USERDEFINED\x10\x01*\xf6\x03\n" +
	"\x13CommercialModelType\x12%\n" +
	"!COMMERCIAL_MODEL_TYPE_UNSPECIFIED\x10\x00\x125\n" +
	"1COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL\x10\x01\x12'\n" +
	"#COMMERCIAL_MODEL_TYPE_ASPERCONTRACT\x10\x02\x12(\n" +
	"$COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL\x10\x03\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL\x10\x04\x12)\n" +
	"%COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL\x10\x05\x123\n" +
	"/COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL\x10\x06\x12*\n" +
	"&COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL\x10\a\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL\x10\b\x12!\n" +
	"\x1dCOMMERCIAL_MODEL_TYPE_UNKNOWN\x10\t\x12%\n" +
	"!COMMERCIAL_MODEL_TYPE_USERDEFINED\x10\n" +
	"*\xe3\x03\n" +
	"\x16CommercialModelTypeERN\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_E_R_N_UNSPECIFIED\x10\x00\x12;\n" +
	"7COMMERCIAL_MODEL_TYPE_E_R_N_ADVERTISEMENTSUPPORTEDMODEL\x10\x01\x12.\n" +
	"*COMMERCIAL_MODEL_TYPE_E_R_N_DEVICEFEEMODEL\x10\x02\x121\n" +
	"-COMMERCIAL_MODEL_TYPE_E_R_N_FREEOFCHARGEMODEL\x10\x03\x12/\n" +
	"+COMMERCIAL_MODEL_TYPE_E_R_N_PAYASYOUGOMODEL\x10\x04\x129\n" +
	"5COMMERCIAL_MODEL_TYPE_E_R_N_PERFORMANCEROYALTIESMODEL\x10\x05\x120\n" +
	",COMMERCIAL_MODEL_TYPE_E_R_N_RIGHTSCLAIMMODEL\x10\x06\x121\n" +
	"-COMMERCIAL_MODEL_TYPE_E_R_N_SUBSCRIPTIONMODEL\x10\a\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_E_R_N_USERDEFINED\x10\b*\xef\x01\n" +
	"\x17CommercialModelTypeMWNL\x12-\n" +
	")COMMERCIAL_MODEL_TYPE_M_W_N_L_UNSPECIFIED\x10\x00\x12=\n" +
	"9COMMERCIAL_MODEL_TYPE_M_W_N_L_ADVERTISEMENTSUPPORTEDMODEL\x10\x01\x121\n" +
	"-COMMERCIAL_MODEL_TYPE_M_W_N_L_PAYASYOUGOMODEL\x10\x02\x123\n" +
	"/COMMERCIAL_MODEL_TYPE_M_W_N_L_SUBSCRIPTIONMODEL\x10\x03*\xac\x01\n" +
	"\x0fCompilationType\x12 \n" +
	"\x1cCOMPILATION_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$COMPILATION_TYPE_INTERNALCOMPILATION\x10\x01\x12+\n" +
	"'COMPILATION_TYPE_NONINTERNALCOMPILATION\x10\x02\x12 \n" +
	"\x1cCOMPILATION_TYPE_NOTCOMPILED\x10\x03*\xc3\x01\n" +
	"\x18CompositeMusicalWorkType\x12+\n" +
	"'COMPOSITE_MUSICAL_WORK_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"COMPOSITE_MUSICAL_WORK_TYPE_MEDLEY\x10\x01\x12'\n" +
	"#COMPOSITE_MUSICAL_WORK_TYPE_NEITHER\x10\x02\x12)\n" +
	"%COMPOSITE_MUSICAL_WORK_TYPE_POTPOURRI\x10\x03*\xb2\x02\n" +
	"\x0fContainerFormat\x12 \n" +
	"\x1cCONTAINER_FORMAT_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CONTAINER_FORMAT_AIFF\x10\x01\x12\x18\n" +
	"\x14CONTAINER_FORMAT_AVI\x10\x02\x12\x18\n" +
	"\x14CONTAINER_FORMAT_MP4\x10\x03\x12\x18\n" +
	"\x14CONTAINER_FORMAT_OGG\x10\x04\x12\x1e\n" +
	"\x1aCONTAINER_FORMAT_QUICKTIME\x10\x05\x12\x1e\n" +
	"\x1aCONTAINER_FORMAT_REALMEDIA\x10\x06\x12\x18\n" +
	"\x14CONTAINER_FORMAT_RMF\x10\a\x12 \n" +
	"\x1cCONTAINER_FORMAT_USERDEFINED\x10\b\x12\x18\n" +
	"\x14CONTAINER_FORMAT_WAV\x10\t*\xe1\x02\n" +
	"\x16ContributorClaimStatus\x12(\n" +
	"$CONTRIBUTOR_CLAIM_STATUS_UNSPECIFIED\x10\x00\x12%\n" +
	"!CONTRIBUTOR_CLAIM_STATUS_ACCEPTED\x10\x01\x12%\n" +
	"!CONTRIBUTOR_CLAIM_STATUS_CONFLICT\x10\x02\x12-\n" +
	")CONTRIBUTOR_CLAIM_STATUS_DATAINCONSISTENT\x10\x03\x12'\n" +
	"#CONTRIBUTOR_CLAIM_STATUS_NOCONFLICT\x10\x04\x12*\n" +
	"&CONTRIBUTOR_CLAIM_STATUS_PENDINGREVIEW\x10\x05\x12%\n" +
	"!CONTRIBUTOR_CLAIM_STATUS_REJECTED\x10\x06\x12$\n" +
	" CONTRIBUTOR_CLAIM_STATUS_REVOKED\x10\a*\xe5Z\n" +
	"\x0fContributorRole\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_ADAPTER\x10\x01\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_ARCHITECT\x10\x02\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_ARRANGER\x10\x03\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_AUTHOR\x10\x04\x12'\n" +
	"#CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS\x10\x05\x12&\n" +
	"\"CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD\x10\x06\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_COMPILER\x10\a\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_COMPOSER\x10\b\x12%\n" +
	"!CONTRIBUTOR_ROLE_COMPOSERLYRICIST\x10\t\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_CONCEPTOR\x10\n" +
	"\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_CREATOR\x10\v\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_DIALOGUEAUTHOR\x10\f\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_DISSERTANT\x10\r\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_ENGRAVER\x10\x0e\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_ETCHER\x10\x0f\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_JOURNALIST\x10\x10\x12'\n" +
	"#CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT\x10\x11\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_LIBRETTIST\x10\x12\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_LITHOGRAPHER\x10\x13\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_LYRICIST\x10\x14\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_METALENGRAVER\x10\x15\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_NONLYRICAUTHOR\x10\x16\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_PLATEMAKER\x10\x17\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_PLAYWRIGHT\x10\x18\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_REPORTER\x10\x19\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_REVIEWER\x10\x1a\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_RUBRICATOR\x10\x1b\x12%\n" +
	"!CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR\x10\x1c\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_SCULPTOR\x10\x1d\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_SUBARRANGER\x10\x1e\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_SUBLYRICIST\x10\x1f\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_TRANSLATOR\x10 \x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_WOODCUTTER\x10!\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_WOODENGRAVER\x10\"\x121\n" +
	"-CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL\x10#\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_BOOKPUBLISHER\x10$\x12&\n" +
	"\"CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT\x10%\x12$\n" +
	" CONTRIBUTOR_ROLE_COPYRIGHTHOLDER\x10&\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_MUSICPUBLISHER\x10'\x12'\n" +
	"#CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER\x10(\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ORIGINALPUBLISHER\x10)\x12(\n" +
	"$CONTRIBUTOR_ROLE_PERIODICALPUBLISHER\x10*\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_SUBPUBLISHER\x10+\x12)\n" +
	"%CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER\x10,\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_UNKNOWN\x10-\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_USERDEFINED\x10.\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_ACCOMPANYIST\x10/\x12\x1a\n" +
	"\x16CONTRIBUTOR_ROLE_ACTOR\x100\x12'\n" +
	"#CONTRIBUTOR_ROLE_ADDITIONALENGINEER\x101\x12-\n" +
	")CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER\x102\x12(\n" +
	"$CONTRIBUTOR_ROLE_ADDITIONALPERFORMER\x103\x122\n" +
	".CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER\x104\x12-\n" +
	")CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER\x105\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_ANCHORPERSON\x106\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_ANIMALTRAINER\x107\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_ANIMATOR\x108\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_ANNOTATOR\x109\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_ANNOUNCER\x10:\x12'\n" +
	"#CONTRIBUTOR_ROLE_AANDRADMINISTRATOR\x10;\x12%\n" +
	"!CONTRIBUTOR_ROLE_AANDRCOORDINATOR\x10<\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_ARMOURER\x10=\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_ARTCOPYIST\x10>\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_ARTDIRECTOR\x10?\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_ARTIST\x10@\x122\n" +
	".CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER\x10A\x12(\n" +
	"$CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER\x10B\x12.\n" +
	"*CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER\x10C\x12,\n" +
	"(CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR\x10D\x125\n" +
	"1CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN\x10E\x12'\n" +
	"#CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR\x10F\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR\x10G\x12$\n" +
	" CONTRIBUTOR_ROLE_ASSISTANTEDITOR\x10H\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ASSISTANTENGINEER\x10I\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ASSISTANTPRODUCER\x10J\x12*\n" +
	"&CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR\x10K\x12(\n" +
	"$CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER\x10L\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER\x10M\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_AURALTRAINER\x10N\x12'\n" +
	"#CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST\x10O\x12$\n" +
	" CONTRIBUTOR_ROLE_BALANCEENGINEER\x10P\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_BANDLEADER\x10Q\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_BINDER\x10R\x12$\n" +
	" CONTRIBUTOR_ROLE_BINDINGDESIGNER\x10S\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_BOOKDESIGNER\x10T\x12%\n" +
	"!CONTRIBUTOR_ROLE_BOOKJACKDESIGNER\x10U\x12&\n" +
	"\"CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER\x10V\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_BOOKPRODUCER\x10W\x12'\n" +
	"#CONTRIBUTOR_ROLE_BROADCASTASSISTANT\x10X\x12(\n" +
	"$CONTRIBUTOR_ROLE_BROADCASTJOURNALIST\x10Y\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_CALLIGRAPHER\x10Z\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_CAMERAOPERATOR\x10[\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_CARPENTER\x10\\\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_CARTOGRAPHER\x10]\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_CARTOONIST\x10^\x12$\n" +
	" CONTRIBUTOR_ROLE_CASTINGDIRECTOR\x10_\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_CAUSEUR\x10`\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_CENSOR\x10a\x12,\n" +
	"(CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN\x10b\x12\x1a\n" +
	"\x16CONTRIBUTOR_ROLE_CHOIR\x10c\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_CHOIRMEMBER\x10d\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_CHOREOGRAPHER\x10e\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_CHORUSMASTER\x10f\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_CIRCUSARTIST\x10g\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_CLAPPERLOADER\x10h\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_CLUBDJ\x10i\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_CODIRECTOR\x10j\x12(\n" +
	"$CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER\x10k\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_COLORSEPARATOR\x10l\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_COMEDIAN\x10m\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_COMIXER\x10n\x12%\n" +
	"!CONTRIBUTOR_ROLE_COMIXINGENGINEER\x10o\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_COMMENTATOR\x10p\x12-\n" +
	")CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER\x10q\x12(\n" +
	"$CONTRIBUTOR_ROLE_COMPILATIONPRODUCER\x10r\x12+\n" +
	"'CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR\x10s\x12'\n" +
	"#CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER\x10t\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_CONCERTMASTER\x10u\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_CONDUCTOR\x10v\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_CONSULTANT\x10w\x12&\n" +
	"\"CONTRIBUTOR_ROLE_CONTINUITYCHECKER\x10x\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_CONTRACTOR\x10y\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_COPRODUCER\x10z\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_CORRESPONDENT\x10{\x12$\n" +
	" CONTRIBUTOR_ROLE_COSTUMEDESIGNER\x10|\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_COVERDESIGNER\x10}\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_DANCER\x10~\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_DELINEATOR\x10\x7f\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_DESIGNER\x10\x80\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_DIALOGUECOACH\x10\x81\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR\x10\x82\x01\x125\n" +
	"0CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER\x10\x83\x01\x12,\n" +
	"'CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER\x10\x84\x01\x122\n" +
	"-CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER\x10\x85\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_DIRECTOR\x10\x86\x01\x121\n" +
	",CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER\x10\x87\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY\x10\x88\x01\x12\x18\n" +
	"\x13CONTRIBUTOR_ROLE_DJ\x10\x89\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_DRAUGHTSMAN\x10\x8a\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_DRESSER\x10\x8b\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_DUBBER\x10\x8c\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_EDITOR\x10\x8d\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_EDITORINCHIEF\x10\x8e\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_EDITOROFTHEDAY\x10\x8f\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_ENCODER\x10\x90\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_ENGINEER\x10\x91\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_ENSEMBLE\x10\x92\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER\x10\x93\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_EXPERT\x10\x94\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_FACSIMILIST\x10\x95\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_FIGHTDIRECTOR\x10\x96\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_FILMDIRECTOR\x10\x97\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_FILMDISTRIBUTOR\x10\x98\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_FILMEDITOR\x10\x99\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_FILMPRODUCER\x10\x9a\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_FILMSOUNDENGINEER\x10\x9b\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_FLOORMANAGER\x10\x9c\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_FOCUSPULLER\x10\x9d\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_FOLEYARTIST\x10\x9e\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_FOLEYEDITOR\x10\x9f\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_FOLEYMIXER\x10\xa0\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_GRAPHICARTIST\x10\xa1\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_GRAPHICASSISTANT\x10\xa2\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_GRAPHICDESIGNER\x10\xa3\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_GREENSMAN\x10\xa4\x01\x12\x1a\n" +
	"\x15CONTRIBUTOR_ROLE_GRIP\x10\xa5\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_GUESTCONDUCTOR\x10\xa6\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_GROUPMEMBER\x10\xa7\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_HAIRDRESSER\x10\xa8\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_ILLUSTRATOR\x10\xa9\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER\x10\xaa\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_INITIALPRODUCER\x10\xab\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_INTERVIEWEDGUEST\x10\xac\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_INTERVIEWER\x10\xad\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_KEYCHARACTER\x10\xae\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_KEYGRIP\x10\xaf\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_KEYTALENT\x10\xb0\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_LEADMAN\x10\xb1\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_LEADPERFORMER\x10\xb2\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_LEADVOCALIST\x10\xb3\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR\x10\xb4\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN\x10\xb5\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_LOCATIONMANAGER\x10\xb6\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_MAKEUPARTIST\x10\xb7\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_MANUFACTURER\x10\xb8\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_MASTERINGENGINEER\x10\xb9\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER\x10\xba\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_MATTEARTIST\x10\xbb\x01\x12\x1b\n" +
	"\x16CONTRIBUTOR_ROLE_MIXER\x10\xbc\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_MIXINGENGINEER\x10\xbd\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER\x10\xbe\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_MUSICARRANGER\x10\xbf\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_MUSICCOPYIST\x10\xc0\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_MUSICDIRECTOR\x10\xc1\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_MUSICGROUP\x10\xc2\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_MUSICIAN\x10\xc3\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_NARRATOR\x10\xc4\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_NEWSPRODUCER\x10\xc5\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_NEWSREADER\x10\xc6\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_NOTSPECIFIED\x10\xc7\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_ORCHESTRA\x10\xc8\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_ORCHESTRAMEMBER\x10\xc9\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_ORIGINALARTIST\x10\xca\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_OVERDUBENGINEER\x10\xcb\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER\x10\xcc\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_PAINTER\x10\xcd\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_PERFORMER\x10\xce\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_PHOTOGRAPHER\x10\xcf\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR\x10\xd0\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_PLAYBACKSINGER\x10\xd1\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_POSTPRODUCER\x10\xd2\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_PREPRODUCTION\x10\xd3\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER\x10\xd4\x01\x121\n" +
	",CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER\x10\xd5\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_PRIMARYMUSICIAN\x10\xd6\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT\x10\xd7\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY\x10\xd8\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR\x10\xd9\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT\x10\xda\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_PRODUCTIONMANAGER\x10\xdb\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY\x10\xdc\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_PROJECTENGINEER\x10\xdd\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_PROGRAMMER\x10\xde\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER\x10\xdf\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_PROGRAMPRODUCER\x10\xe0\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_PROPERTYMANAGER\x10\xe1\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR\x10\xe2\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_PUPPETEER\x10\xe3\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_PYROTECHNICIAN\x10\xe4\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_RECORDINGENGINEER\x10\xe5\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER\x10\xe6\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_REDACTOR\x10\xe7\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_REISSUEPRODUCER\x10\xe8\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_REMIXEDARTIST\x10\xe9\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_REMIXER\x10\xea\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_REMIXINGENGINEER\x10\xeb\x01\x12,\n" +
	"'CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER\x10\xec\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_REPETITEUR\x10\xed\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_RESEARCHER\x10\xee\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD\x10\xef\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER\x10\xf0\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_RESTAGER\x10\xf1\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_RIGGER\x10\xf2\x01\x12/\n" +
	"*CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT\x10\xf3\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_RUNNER\x10\xf4\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_SCENICOPERATIVE\x10\xf5\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_SCIENTIFICADVISOR\x10\xf6\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR\x10\xf7\x01\x123\n" +
	".CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR\x10\xf8\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR\x10\xf9\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_SECONDCONDUCTOR\x10\xfa\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_SECONDENGINEER\x10\xfb\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR\x10\xfc\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_SERIESPRODUCER\x10\xfd\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_SETDESIGNER\x10\xfe\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_SETDRESSER\x10\xff\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER\x10\x80\x02\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_SOLOIST\x10\x81\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_SOUNDDESIGNER\x10\x82\x02\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_SOUNDMIXER\x10\x83\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_SOUNDRECORDIST\x10\x84\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_SOUNDSUPERVISOR\x10\x85\x02\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_SPEAKER\x10\x86\x02\x12.\n" +
	")CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN\x10\x87\x02\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_SPONSOR\x10\x88\x02\x12,\n" +
	"'CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER\x10\x89\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_STAGEDIRECTOR\x10\x8a\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_STAGEENGINEER\x10\x8b\x02\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_STORYTELLER\x10\x8c\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_STRINGENGINEER\x10\x8d\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_STRINGPRODUCER\x10\x8e\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_STRINGSDIRECTOR\x10\x8f\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_STUDIOCONDUCTOR\x10\x90\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_STUDIOMUSICIAN\x10\x91\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_STUDIOPERSONNEL\x10\x92\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_STUDIOPRODUCER\x10\x93\x02\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_STUNTS\x10\x94\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_SUBTITLESEDITOR\x10\x95\x02\x12)\n" +
	"$CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR\x10\x96\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_SUPPORTINGACTOR\x10\x97\x02\x12,\n" +
	"'CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER\x10\x98\x02\x122\n" +
	"-CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER\x10\x99\x02\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_TAPEOPERATOR\x10\x9a\x02\x12'\n" +
	"\"CONTRIBUTOR_ROLE_TECHNICALDIRECTOR\x10\x9b\x02\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_TONMEISTER\x10\x9c\x02\x12&\n" +
	"!CONTRIBUTOR_ROLE_TRACKINGENGINEER\x10\x9d\x02\x12,\n" +
	"'CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER\x10\x9e\x02\x122\n" +
	"-CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER\x10\x9f\x02\x128\n" +
	"3CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER\x10\xa0\x02\x12+\n" +
	"&CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER\x10\xa1\x02\x12/\n" +
	"*CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL\x10\xa2\x02\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_TYPEDESIGNER\x10\xa3\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VIDEODIRECTOR\x10\xa4\x02\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_VIDEOGRAPHER\x10\xa5\x02\x12*\n" +
	"%CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR\x10\xa6\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VIDEOPRODUCER\x10\xa7\x02\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_VISIONMIXER\x10\xa8\x02\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_VISUALEDITOR\x10\xa9\x02\x12-\n" +
	"(CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN\x10\xaa\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VOCALARRANGER\x10\xab\x02\x12*\n" +
	"%CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER\x10\xac\x02\x120\n" +
	"+CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER\x10\xad\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VOCALENGINEER\x10\xae\x02\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_VOCALIST\x10\xaf\x02\x12)\n" +
	"$CONTRIBUTOR_ROLE_VOCALSECONDENGINEER\x10\xb0\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VOCALPRODUCER\x10\xb1\x02\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_VOICEACTOR\x10\xb2\x02\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_WARDROBE\x10\xb3\x02\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_PRESENTER\x10\xb4\x02*\x87\x10\n" +
	"\"CreativeMusicalWorkContributorRole\x126\n" +
	"2CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x122\n" +
	".CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER\x10\x01\x124\n" +
	"0CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT\x10\x02\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER\x10\x03\x121\n" +
	"-CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR\x10\x04\x12=\n" +
	"9CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS\x10\x05\x12<\n" +
	"8CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD\x10\x06\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER\x10\a\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER\x10\b\x12;\n" +
	"7CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST\x10\t\x124\n" +
	"0CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR\x10\n" +
	"\x122\n" +
	".CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR\x10\v\x129\n" +
	"5CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR\x10\f\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT\x10\r\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER\x10\x0e\x121\n" +
	"-CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER\x10\x0f\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST\x10\x10\x12=\n" +
	"9CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT\x10\x11\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST\x10\x12\x127\n" +
	"3CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER\x10\x13\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST\x10\x14\x128\n" +
	"4CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER\x10\x15\x129\n" +
	"5CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR\x10\x16\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER\x10\x17\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT\x10\x18\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER\x10\x19\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER\x10\x1a\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR\x10\x1b\x12;\n" +
	"7CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR\x10\x1c\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR\x10\x1d\x126\n" +
	"2CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER\x10\x1e\x126\n" +
	"2CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST\x10\x1f\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR\x10 \x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER\x10!\x127\n" +
	"3CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER\x10\"\x12G\n" +
	"CCREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL\x10#*\xc4\x01\n" +
	"\tCueOrigin\x12\x1a\n" +
	"\x16CUE_ORIGIN_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17CUE_ORIGIN_LIBRARYMUSIC\x10\x01\x12\x1f\n" +
	"\x1bCUE_ORIGIN_PREEXISTINGMUSIC\x10\x02\x12)\n" +
	"%CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC\x10\x03\x12\x16\n" +
	"\x12CUE_ORIGIN_UNKNOWN\x10\x04\x12\x1a\n" +
	"\x16CUE_ORIGIN_USERDEFINED\x10\x05*\xea\x01\n" +
	"\fCueSheetType\x12\x1e\n" +
	"\x1aCUE_SHEET_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eCUE_SHEET_TYPE_AVERAGECUESHEET\x10\x01\x12$\n" +
	" CUE_SHEET_TYPE_COMPOSITECUESHEET\x10\x02\x12#\n" +
	"\x1fCUE_SHEET_TYPE_STANDARDCUESHEET\x10\x03\x12%\n" +
	"!CUE_SHEET_TYPE_SUMMARISEDCUESHEET\x10\x04\x12$\n" +
	" CUE_SHEET_TYPE_SURROGATECUESHEET\x10\x05*\xda\x02\n" +
	"\n" +
	"CueUseType\x12\x1c\n" +
	"\x18CUE_USE_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CUE_USE_TYPE_AUDIOLOGO\x10\x01\x12\x1b\n" +
	"\x17CUE_USE_TYPE_BACKGROUND\x10\x02\x12\x17\n" +
	"\x13CUE_USE_TYPE_BUMPER\x10\x03\x12\x1e\n" +
	"\x1aCUE_USE_TYPE_ESSENTIALPART\x10\x04\x12\x1a\n" +
	"\x16CUE_USE_TYPE_FILMTHEME\x10\x05\x12,\n" +
	"(CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND\x10\x06\x12\x1e\n" +
	"\x1aCUE_USE_TYPE_ONSCREENMUSIC\x10\a\x12\x1c\n" +
	"\x18CUE_USE_TYPE_ROLLEDUPCUE\x10\b\x12\x16\n" +
	"\x12CUE_USE_TYPE_THEME\x10\t\x12\x1c\n" +
	"\x18CUE_USE_TYPE_USERDEFINED\x10\n" +
	"*\xe6\x1f\n" +
	"\fCurrencyCode\x12\x1d\n" +
	"\x19CURRENCY_CODE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11CURRENCY_CODE_AED\x10\x01\x12\x15\n" +
	"\x11CURRENCY_CODE_AFN\x10\x02\x12\x15\n" +
	"\x11CURRENCY_CODE_ALL\x10\x03\x12\x15\n" +
	"\x11CURRENCY_CODE_AMD\x10\x04\x12\x15\n" +
	"\x11CURRENCY_CODE_ANG\x10\x05\x12\x15\n" +
	"\x11CURRENCY_CODE_AOA\x10\x06\x12\x15\n" +
	"\x11CURRENCY_CODE_ARS\x10\a\x12\x15\n" +
	"\x11CURRENCY_CODE_AUD\x10\b\x12\x15\n" +
	"\x11CURRENCY_CODE_AWG\x10\t\x12\x15\n" +
	"\x11CURRENCY_CODE_AZN\x10\n" +
	"\x12\x15\n" +
	"\x11CURRENCY_CODE_BAM\x10\v\x12\x15\n" +
	"\x11CURRENCY_CODE_BBD\x10\f\x12\x15\n" +
	"\x11CURRENCY_CODE_BDT\x10\r\x12\x15\n" +
	"\x11CURRENCY_CODE_BGN\x10\x0e\x12\x15\n" +
	"\x11CURRENCY_CODE_BHD\x10\x0f\x12\x15\n" +
	"\x11CURRENCY_CODE_BIF\x10\x10\x12\x15\n" +
	"\x11CURRENCY_CODE_BMD\x10\x11\x12\x15\n" +
	"\x11CURRENCY_CODE_BND\x10\x12\x12\x15\n" +
	"\x11CURRENCY_CODE_BOB\x10\x13\x12\x15\n" +
	"\x11CURRENCY_CODE_BOV\x10\x14\x12\x15\n" +
	"\x11CURRENCY_CODE_BRL\x10\x15\x12\x15\n" +
	"\x11CURRENCY_CODE_BSD\x10\x16\x12\x15\n" +
	"\x11CURRENCY_CODE_BTN\x10\x17\x12\x15\n" +
	"\x11CURRENCY_CODE_BWP\x10\x18\x12\x15\n" +
	"\x11CURRENCY_CODE_BYR\x10\x19\x12\x15\n" +
	"\x11CURRENCY_CODE_BZD\x10\x1a\x12\x15\n" +
	"\x11CURRENCY_CODE_CAD\x10\x1b\x12\x15\n" +
	"\x11CURRENCY_CODE_CDF\x10\x1c\x12\x15\n" +
	"\x11CURRENCY_CODE_CHF\x10\x1d\x12\x15\n" +
	"\x11CURRENCY_CODE_CLF\x10\x1e\x12\x15\n" +
	"\x11CURRENCY_CODE_CLP\x10\x1f\x12\x15\n" +
	"\x11CURRENCY_CODE_CNY\x10 \x12\x15\n" +
	"\x11CURRENCY_CODE_COP\x10!\x12\x15\n" +
	"\x11CURRENCY_CODE_COU\x10\"\x12\x15\n" +
	"\x11CURRENCY_CODE_CRC\x10#\x12\x15\n" +
	"\x11CURRENCY_CODE_CUC\x10$\x12\x15\n" +
	"\x11CURRENCY_CODE_CUP\x10%\x12\x15\n" +
	"\x11CURRENCY_CODE_CVE\x10&\x12\x15\n" +
	"\x11CURRENCY_CODE_CZK\x10'\x12\x15\n" +
	"\x11CURRENCY_CODE_DJF\x10(\x12\x15\n" +
	"\x11CURRENCY_CODE_DKK\x10)\x12\x15\n" +
	"\x11CURRENCY_CODE_DOP\x10*\x12\x15\n" +
	"\x11CURRENCY_CODE_DZD\x10+\x12\x15\n" +
	"\x11CURRENCY_CODE_EGP\x10,\x12\x15\n" +
	"\x11CURRENCY_CODE_ERN\x10-\x12\x15\n" +
	"\x11CURRENCY_CODE_ETB\x10.\x12\x15\n" +
	"\x11CURRENCY_CODE_EUR\x10/\x12\x15\n" +
	"\x11CURRENCY_CODE_FJD\x100\x12\x15\n" +
	"\x11CURRENCY_CODE_FKP\x101\x12\x15\n" +
	"\x11CURRENCY_CODE_GBP\x102\x12\x15\n" +
	"\x11CURRENCY_CODE_GEL\x103\x12\x15\n" +
	"\x11CURRENCY_CODE_GHS\x104\x12\x15\n" +
	"\x11CURRENCY_CODE_GIP\x105\x12\x15\n" +
	"\x11CURRENCY_CODE_GMD\x106\x12\x15\n" +
	"\x11CURRENCY_CODE_GNF\x107\x12\x15\n" +
	"\x11CURRENCY_CODE_GTQ\x108\x12\x15\n" +
	"\x11CURRENCY_CODE_GYD\x109\x12\x15\n" +
	"\x11CURRENCY_CODE_HKD\x10:\x12\x15\n" +
	"\x11CURRENCY_CODE_HNL\x10;\x12\x15\n" +
	"\x11CURRENCY_CODE_HRK\x10<\x12\x15\n" +
	"\x11CURRENCY_CODE_HTG\x10=\x12\x15\n" +
	"\x11CURRENCY_CODE_HUF\x10>\x12\x15\n" +
	"\x11CURRENCY_CODE_IDR\x10?\x12\x15\n" +
	"\x11CURRENCY_CODE_ILS\x10@\x12\x15\n" +
	"\x11CURRENCY_CODE_INR\x10A\x12\x15\n" +
	"\x11CURRENCY_CODE_IQD\x10B\x12\x15\n" +
	"\x11CURRENCY_CODE_IRR\x10C\x12\x15\n" +
	"\x11CURRENCY_CODE_ISK\x10D\x12\x15\n" +
	"\x11CURRENCY_CODE_JMD\x10E\x12\x15\n" +
	"\x11CURRENCY_CODE_JOD\x10F\x12\x15\n" +
	"\x11CURRENCY_CODE_JPY\x10G\x12\x15\n" +
	"\x11CURRENCY_CODE_KES\x10H\x12\x15\n" +
	"\x11CURRENCY_CODE_KGS\x10I\x12\x15\n" +
	"\x11CURRENCY_CODE_KHR\x10J\x12\x15\n" +
	"\x11CURRENCY_CODE_KMF\x10K\x12\x15\n" +
	"\x11CURRENCY_CODE_KPW\x10L\x12\x15\n" +
	"\x11CURRENCY_CODE_KRW\x10M\x12\x15\n" +
	"\x11CURRENCY_CODE_KWD\x10N\x12\x15\n" +
	"\x11CURRENCY_CODE_KYD\x10O\x12\x15\n" +
	"\x11CURRENCY_CODE_KZT\x10P\x12\x15\n" +
	"\x11CURRENCY_CODE_LAK\x10Q\x12\x15\n" +
	"\x11CURRENCY_CODE_LBP\x10R\x12\x15\n" +
	"\x11CURRENCY_CODE_LKR\x10S\x12\x15\n" +
	"\x11CURRENCY_CODE_LRD\x10T\x12\x15\n" +
	"\x11CURRENCY_CODE_LSL\x10U\x12\x15\n" +
	"\x11CURRENCY_CODE_LYD\x10V\x12\x15\n" +
	"\x11CURRENCY_CODE_MAD\x10W\x12\x15\n" +
	"\x11CURRENCY_CODE_MDL\x10X\x12\x15\n" +
	"\x11CURRENCY_CODE_MGA\x10Y\x12\x15\n" +
	"\x11CURRENCY_CODE_MKD\x10Z\x12\x15\n" +
	"\x11CURRENCY_CODE_MMK\x10[\x12\x15\n" +
	"\x11CURRENCY_CODE_MNT\x10\\\x12\x15\n" +
	"\x11CURRENCY_CODE_MOP\x10]\x12\x15\n" +
	"\x11CURRENCY_CODE_MRU\x10^\x12\x15\n" +
	"\x11CURRENCY_CODE_MUR\x10_\x12\x15\n" +
	"\x11CURRENCY_CODE_MVR\x10`\x12\x15\n" +
	"\x11CURRENCY_CODE_MWK\x10a\x12\x15\n" +
	"\x11CURRENCY_CODE_MXN\x10b\x12\x15\n" +
	"\x11CURRENCY_CODE_MXV\x10c\x12\x15\n" +
	"\x11CURRENCY_CODE_MYR\x10d\x12\x15\n" +
	"\x11CURRENCY_CODE_MZN\x10e\x12\x15\n" +
	"\x11CURRENCY_CODE_NAD\x10f\x12\x15\n" +
	"\x11CURRENCY_CODE_NGN\x10g\x12\x15\n" +
	"\x11CURRENCY_CODE_NIO\x10h\x12\x15\n" +
	"\x11CURRENCY_CODE_NOK\x10i\x12\x15\n" +
	"\x11CURRENCY_CODE_NPR\x10j\x12\x15\n" +
	"\x11CURRENCY_CODE_NZD\x10k\x12\x15\n" +
	"\x11CURRENCY_CODE_OMR\x10l\x12\x15\n" +
	"\x11CURRENCY_CODE_PAB\x10m\x12\x15\n" +
	"\x11CURRENCY_CODE_PEN\x10n\x12\x15\n" +
	"\x11CURRENCY_CODE_PGK\x10o\x12\x15\n" +
	"\x11CURRENCY_CODE_PHP\x10p\x12\x15\n" +
	"\x11CURRENCY_CODE_PKR\x10q\x12\x15\n" +
	"\x11CURRENCY_CODE_PLN\x10r\x12\x15\n" +
	"\x11CURRENCY_CODE_PYG\x10s\x12\x15\n" +
	"\x11CURRENCY_CODE_QAR\x10t\x12\x15\n" +
	"\x11CURRENCY_CODE_RON\x10u\x12\x15\n" +
	"\x11CURRENCY_CODE_RSD\x10v\x12\x15\n" +
	"\x11CURRENCY_CODE_RUB\x10w\x12\x15\n" +
	"\x11CURRENCY_CODE_RWF\x10x\x12\x15\n" +
	"\x11CURRENCY_CODE_SAR\x10y\x12\x15\n" +
	"\x11CURRENCY_CODE_SBD\x10z\x12\x15\n" +
	"\x11CURRENCY_CODE_SCR\x10{\x12\x15\n" +
	"\x11CURRENCY_CODE_SDG\x10|\x12\x15\n" +
	"\x11CURRENCY_CODE_SEK\x10}\x12\x15\n" +
	"\x11CURRENCY_CODE_SGD\x10~\x12\x15\n" +
	"\x11CURRENCY_CODE_SHP\x10\x7f\x12\x16\n" +
	"\x11CURRENCY_CODE_SLL\x10\x80\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SOS\x10\x81\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SRD\x10\x82\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SSP\x10\x83\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_STN\x10\x84\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SVC\x10\x85\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SYP\x10\x86\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SZL\x10\x87\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_THB\x10\x88\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TJS\x10\x89\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TMT\x10\x8a\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TND\x10\x8b\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TOP\x10\x8c\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TRY\x10\x8d\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TTD\x10\x8e\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TWD\x10\x8f\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TZS\x10\x90\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UAH\x10\x91\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UGX\x10\x92\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_USD\x10\x93\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UYI\x10\x94\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UYU\x10\x95\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UZS\x10\x96\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VES\x10\x97\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VND\x10\x98\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VUV\x10\x99\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_WST\x10\x9a\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XAF\x10\x9b\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XCD\x10\x9c\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XOF\x10\x9d\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XPF\x10\x9e\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_YER\x10\x9f\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZAR\x10\xa0\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZMW\x10\xa1\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZWL\x10\xa2\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_CYP\x10\xa3\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_EEK\x10\xa4\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_LTL\x10\xa5\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_LVL\x10\xa6\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_MTL\x10\xa7\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_MRO\x10\xa8\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ROL\x10\xa9\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SIT\x10\xaa\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SKK\x10\xab\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_STD\x10\xac\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VEF\x10\xad\x01*\x9e\x83\x01\n" +
	"\x14CurrentTerritoryCode\x12&\n" +
	"\"CURRENT_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AD\x10\x01\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AE\x10\x02\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AF\x10\x03\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AG\x10\x04\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AI\x10\x05\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AL\x10\x06\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AM\x10\a\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AN\x10\b\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AO\x10\t\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AQ\x10\n" +
	"\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AR\x10\v\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AS\x10\f\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AT\x10\r\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AU\x10\x0e\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AW\x10\x0f\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AX\x10\x10\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_AZ\x10\x11\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BA\x10\x12\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BB\x10\x13\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BD\x10\x14\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BE\x10\x15\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BF\x10\x16\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BG\x10\x17\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BH\x10\x18\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BI\x10\x19\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BJ\x10\x1a\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BL\x10\x1b\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BM\x10\x1c\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BN\x10\x1d\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BO\x10\x1e\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BQ\x10\x1f\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BR\x10 \x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BS\x10!\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BT\x10\"\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BV\x10#\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BW\x10$\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BY\x10%\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_BZ\x10&\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CA\x10'\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CC\x10(\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CD\x10)\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CF\x10*\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CG\x10+\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CH\x10,\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CI\x10-\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CK\x10.\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CL\x10/\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CM\x100\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CN\x101\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CO\x102\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CR\x103\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CS\x104\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CU\x105\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CV\x106\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CW\x107\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CX\x108\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CY\x109\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_CZ\x10:\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DE\x10;\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DJ\x10<\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DK\x10=\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DM\x10>\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DO\x10?\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_DZ\x10@\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_EC\x10A\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_EE\x10B\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_EG\x10C\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_EH\x10D\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_ER\x10E\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_ES\x10F\x12 \n" +
	"\x1cCURRENT_TERRITORY_CODE_ES_CE\x10G\x12 \n" +
	"\x1cCURRENT_TERRITORY_CODE_ES_CN\x10H\x12 \n" +
	"\x1cCURRENT_TERRITORY_CODE_ES_ML\x10I\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_ET\x10J\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FI\x10K\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FJ\x10L\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FK\x10M\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FM\x10N\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FO\x10O\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_FR\x10P\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GA\x10Q\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GB\x10R\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GD\x10S\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GE\x10T\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GF\x10U\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GG\x10V\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GH\x10W\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GI\x10X\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GL\x10Y\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GM\x10Z\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GN\x10[\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GP\x10\\\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GQ\x10]\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GR\x10^\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GS\x10_\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GT\x10`\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GU\x10a\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GW\x10b\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_GY\x10c\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HK\x10d\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HM\x10e\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HN\x10f\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HR\x10g\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HT\x10h\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_HU\x10i\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_ID\x10j\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IE\x10k\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IL\x10l\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IM\x10m\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IN\x10n\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IO\x10o\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IQ\x10p\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IR\x10q\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IS\x10r\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_IT\x10s\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_JE\x10t\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_JM\x10u\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_JO\x10v\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_JP\x10w\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KE\x10x\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KG\x10y\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KH\x10z\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KI\x10{\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KM\x10|\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KN\x10}\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KP\x10~\x12\x1d\n" +
	"\x19CURRENT_TERRITORY_CODE_KR\x10\x7f\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_KW\x10\x80\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_KY\x10\x81\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_KZ\x10\x82\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LA\x10\x83\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LB\x10\x84\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LC\x10\x85\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LI\x10\x86\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LK\x10\x87\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LR\x10\x88\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LS\x10\x89\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LT\x10\x8a\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LU\x10\x8b\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LV\x10\x8c\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_LY\x10\x8d\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MA\x10\x8e\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MC\x10\x8f\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MD\x10\x90\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ME\x10\x91\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MF\x10\x92\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MG\x10\x93\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MH\x10\x94\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MK\x10\x95\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ML\x10\x96\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MM\x10\x97\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MN\x10\x98\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MO\x10\x99\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MP\x10\x9a\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MQ\x10\x9b\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MR\x10\x9c\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MS\x10\x9d\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MT\x10\x9e\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MU\x10\x9f\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MV\x10\xa0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MW\x10\xa1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MX\x10\xa2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MY\x10\xa3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_MZ\x10\xa4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NA\x10\xa5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NC\x10\xa6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NE\x10\xa7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NF\x10\xa8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NG\x10\xa9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NI\x10\xaa\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NL\x10\xab\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NO\x10\xac\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NP\x10\xad\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NR\x10\xae\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NU\x10\xaf\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_NZ\x10\xb0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_OM\x10\xb1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PA\x10\xb2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PE\x10\xb3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PF\x10\xb4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PG\x10\xb5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PH\x10\xb6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PK\x10\xb7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PL\x10\xb8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PM\x10\xb9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PN\x10\xba\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PR\x10\xbb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PS\x10\xbc\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PT\x10\xbd\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PW\x10\xbe\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_PY\x10\xbf\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_QA\x10\xc0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RE\x10\xc1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RO\x10\xc2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RS\x10\xc3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RU\x10\xc4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_RW\x10\xc5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SA\x10\xc6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SB\x10\xc7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SC\x10\xc8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SD\x10\xc9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SE\x10\xca\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SG\x10\xcb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SH\x10\xcc\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SI\x10\xcd\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SJ\x10\xce\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SK\x10\xcf\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SL\x10\xd0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SM\x10\xd1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SN\x10\xd2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SO\x10\xd3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SR\x10\xd4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SS\x10\xd5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ST\x10\xd6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SV\x10\xd7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SX\x10\xd8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SY\x10\xd9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_SZ\x10\xda\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TC\x10\xdb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TD\x10\xdc\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TF\x10\xdd\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TG\x10\xde\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TH\x10\xdf\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TJ\x10\xe0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TK\x10\xe1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TL\x10\xe2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TM\x10\xe3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TN\x10\xe4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TO\x10\xe5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TR\x10\xe6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TT\x10\xe7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TV\x10\xe8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TW\x10\xe9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_TZ\x10\xea\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UA\x10\xeb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UG\x10\xec\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UM\x10\xed\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_US\x10\xee\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UY\x10\xef\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_UZ\x10\xf0\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VA\x10\xf1\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VC\x10\xf2\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VE\x10\xf3\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VG\x10\xf4\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VI\x10\xf5\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VN\x10\xf6\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_VU\x10\xf7\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_WF\x10\xf8\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_WS\x10\xf9\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_YE\x10\xfa\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_YT\x10\xfb\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ZA\x10\xfc\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ZM\x10\xfd\x01\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_ZW\x10\xfe\x01\x12\x1f\n" +
	"\x1aCURRENT_TERRITORY_CODE_E_4\x10\xff\x01\x12\x1f\n" +
	"\x1aCURRENT_TERRITORY_CODE_E_8\x10\x80\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_12\x10\x81\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_20\x10\x82\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_24\x10\x83\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_28\x10\x84\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_31\x10\x85\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_32\x10\x86\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_36\x10\x87\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_40\x10\x88\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_44\x10\x89\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_48\x10\x8a\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_50\x10\x8b\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_51\x10\x8c\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_52\x10\x8d\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_56\x10\x8e\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_64\x10\x8f\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_68\x10\x90\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_70\x10\x91\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_72\x10\x92\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_76\x10\x93\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_84\x10\x94\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_90\x10\x95\x02\x12 \n" +
	"\x1bCURRENT_TERRITORY_CODE_E_96\x10\x96\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_100\x10\x97\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_104\x10\x98\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_108\x10\x99\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_112\x10\x9a\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_116\x10\x9b\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_120\x10\x9c\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_124\x10\x9d\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_132\x10\x9e\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_140\x10\x9f\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_144\x10\xa0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_148\x10\xa1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_152\x10\xa2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_156\x10\xa3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_158\x10\xa4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_170\x10\xa5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_174\x10\xa6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_178\x10\xa7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_180\x10\xa8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_188\x10\xa9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_191\x10\xaa\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_192\x10\xab\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_196\x10\xac\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_200\x10\xad\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_203\x10\xae\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_204\x10\xaf\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_208\x10\xb0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_212\x10\xb1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_214\x10\xb2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_218\x10\xb3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_222\x10\xb4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_226\x10\xb5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_230\x10\xb6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_231\x10\xb7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_232\x10\xb8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_233\x10\xb9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_242\x10\xba\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_246\x10\xbb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_250\x10\xbc\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_258\x10\xbd\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_262\x10\xbe\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_266\x10\xbf\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_268\x10\xc0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_270\x10\xc1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_276\x10\xc2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_278\x10\xc3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_280\x10\xc4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_288\x10\xc5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_296\x10\xc6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_300\x10\xc7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_308\x10\xc8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_320\x10\xc9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_324\x10\xca\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_328\x10\xcb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_332\x10\xcc\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_336\x10\xcd\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_340\x10\xce\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_344\x10\xcf\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_348\x10\xd0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_352\x10\xd1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_356\x10\xd2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_360\x10\xd3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_364\x10\xd4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_368\x10\xd5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_372\x10\xd6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_376\x10\xd7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_380\x10\xd8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_384\x10\xd9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_388\x10\xda\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_392\x10\xdb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_398\x10\xdc\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_400\x10\xdd\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_404\x10\xde\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_408\x10\xdf\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_410\x10\xe0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_414\x10\xe1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_417\x10\xe2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_418\x10\xe3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_422\x10\xe4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_426\x10\xe5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_428\x10\xe6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_430\x10\xe7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_434\x10\xe8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_438\x10\xe9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_440\x10\xea\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_442\x10\xeb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_450\x10\xec\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_454\x10\xed\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_458\x10\xee\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_462\x10\xef\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_466\x10\xf0\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_470\x10\xf1\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_478\x10\xf2\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_480\x10\xf3\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_484\x10\xf4\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_492\x10\xf5\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_496\x10\xf6\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_498\x10\xf7\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_499\x10\xf8\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_504\x10\xf9\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_508\x10\xfa\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_512\x10\xfb\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_516\x10\xfc\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_520\x10\xfd\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_524\x10\xfe\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_528\x10\xff\x02\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_540\x10\x80\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_548\x10\x81\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_554\x10\x82\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_558\x10\x83\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_562\x10\x84\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_566\x10\x85\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_578\x10\x86\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_583\x10\x87\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_584\x10\x88\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_585\x10\x89\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_586\x10\x8a\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_591\x10\x8b\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_598\x10\x8c\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_600\x10\x8d\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_604\x10\x8e\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_608\x10\x8f\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_616\x10\x90\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_620\x10\x91\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_624\x10\x92\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_626\x10\x93\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_630\x10\x94\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_634\x10\x95\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_642\x10\x96\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_643\x10\x97\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_646\x10\x98\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_659\x10\x99\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_662\x10\x9a\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_670\x10\x9b\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_674\x10\x9c\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_678\x10\x9d\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_682\x10\x9e\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_686\x10\x9f\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_688\x10\xa0\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_690\x10\xa1\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_694\x10\xa2\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_702\x10\xa3\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_703\x10\xa4\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_704\x10\xa5\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_705\x10\xa6\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_706\x10\xa7\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_710\x10\xa8\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_716\x10\xa9\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_720\x10\xaa\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_724\x10\xab\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_728\x10\xac\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_729\x10\xad\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_732\x10\xae\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_736\x10\xaf\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_740\x10\xb0\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_748\x10\xb1\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_752\x10\xb2\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_756\x10\xb3\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_760\x10\xb4\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_762\x10\xb5\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_764\x10\xb6\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_768\x10\xb7\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_776\x10\xb8\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_780\x10\xb9\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_784\x10\xba\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_788\x10\xbb\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_792\x10\xbc\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_795\x10\xbd\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_798\x10\xbe\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_800\x10\xbf\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_804\x10\xc0\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_807\x10\xc1\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_810\x10\xc2\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_818\x10\xc3\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_826\x10\xc4\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_834\x10\xc5\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_840\x10\xc6\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_854\x10\xc7\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_858\x10\xc8\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_860\x10\xc9\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_862\x10\xca\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_882\x10\xcb\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_886\x10\xcc\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_887\x10\xcd\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_890\x10\xce\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_891\x10\xcf\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_894\x10\xd0\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2100\x10\xd1\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2101\x10\xd2\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2102\x10\xd3\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2103\x10\xd4\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2104\x10\xd5\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2105\x10\xd6\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2106\x10\xd7\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2107\x10\xd8\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2108\x10\xd9\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2109\x10\xda\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2110\x10\xdb\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2111\x10\xdc\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2112\x10\xdd\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2113\x10\xde\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2114\x10\xdf\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2115\x10\xe0\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2116\x10\xe1\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2117\x10\xe2\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2118\x10\xe3\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2119\x10\xe4\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2120\x10\xe5\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2121\x10\xe6\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2122\x10\xe7\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2123\x10\xe8\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2124\x10\xe9\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2125\x10\xea\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2126\x10\xeb\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2127\x10\xec\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2128\x10\xed\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2129\x10\xee\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2130\x10\xef\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2131\x10\xf0\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2132\x10\xf1\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2133\x10\xf2\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2134\x10\xf3\x03\x12\"\n" +
	"\x1dCURRENT_TERRITORY_CODE_E_2136\x10\xf4\x03\x12\x1e\n" +
	"\x19CURRENT_TERRITORY_CODE_XK\x10\xf5\x03\x12%\n" +
	" CURRENT_TERRITORY_CODE_WORLDWIDE\x10\xf6\x03\x12!\n" +
	"\x1cCURRENT_TERRITORY_CODE_E_446\x10\xf7\x03*\xb4\x0e\n" +
	"\n" +
	"DanceStyle\x12\x1b\n" +
	"\x17DANCE_STYLE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15DANCE_STYLE_ACRODANCE\x10\x01\x12\x16\n" +
	"\x12DANCE_STYLE_BALLET\x10\x02\x12\x18\n" +
	"\x14DANCE_STYLE_BALLROOM\x10\x03\x12\x1a\n" +
	"\x16DANCE_STYLE_BARCAROLLE\x10\x04\x12\x16\n" +
	"\x12DANCE_STYLE_BOLERO\x10\x05\x12\x1a\n" +
	"\x16DANCE_STYLE_BREAKDANCE\x10\x06\x12\x19\n" +
	"\x15DANCE_STYLE_BREAKDOWN\x10\a\x12\x14\n" +
	"\x10DANCE_STYLE_BUMP\x10\b\x12\x18\n" +
	"\x14DANCE_STYLE_CAKEWALK\x10\t\x12\x16\n" +
	"\x12DANCE_STYLE_CANCAN\x10\n" +
	"\x12\x1c\n" +
	"\x18DANCE_STYLE_CAROLINASHAG\x10\v\x12\x16\n" +
	"\x12DANCE_STYLE_CHACHA\x10\f\x12\x1a\n" +
	"\x16DANCE_STYLE_CHARLESTON\x10\r\x12\x19\n" +
	"\x15DANCE_STYLE_CONGALINE\x10\x0e\x12!\n" +
	"\x1dDANCE_STYLE_CONTEMPORARYDANCE\x10\x0f\x12\x1b\n" +
	"\x17DANCE_STYLE_CONTRADANCE\x10\x10\x12\x1e\n" +
	"\x1aDANCE_STYLE_COUNTRYTWOSTEP\x10\x11\x12#\n" +
	"\x1fDANCE_STYLE_COUNTRYWESTERNDANCE\x10\x12\x12\x1c\n" +
	"\x18DANCE_STYLE_COWBOYCHACHA\x10\x13\x12\x18\n" +
	"\x14DANCE_STYLE_DANSBAND\x10\x14\x12\x1a\n" +
	"\x16DANCE_STYLE_DISCODANCE\x10\x15\x12\x16\n" +
	"\x12DANCE_STYLE_DOUGIE\x10\x16\x12\x1e\n" +
	"\x1aDANCE_STYLE_EASTCOASTSWING\x10\x17\x12\x15\n" +
	"\x11DANCE_STYLE_FORRO\x10\x18\x12\x17\n" +
	"\x13DANCE_STYLE_FOXTROT\x10\x19\x12\x18\n" +
	"\x14DANCE_STYLE_HANDJIVE\x10\x1a\x12\x1b\n" +
	"\x17DANCE_STYLE_HIPHOPDANCE\x10\x1b\x12\x16\n" +
	"\x12DANCE_STYLE_HUSTLE\x10\x1c\x12\x1c\n" +
	"\x18DANCE_STYLE_INTERPRETIVE\x10\x1d\x12\x19\n" +
	"\x15DANCE_STYLE_JAZZDANCE\x10\x1e\x12\x13\n" +
	"\x0fDANCE_STYLE_JIG\x10\x1f\x12\x19\n" +
	"\x15DANCE_STYLE_JITTERBUG\x10 \x12\x14\n" +
	"\x10DANCE_STYLE_JIVE\x10!\x12\x18\n" +
	"\x14DANCE_STYLE_LINDYHOP\x10\"\x12\x19\n" +
	"\x15DANCE_STYLE_LINEDANCE\x10#\x12\x1b\n" +
	"\x17DANCE_STYLE_LIQUIDDANCE\x10$\x12\x17\n" +
	"\x13DANCE_STYLE_LOCKING\x10%\x12\"\n" +
	"\x1eDANCE_STYLE_LYRICALHIPHOPDANCE\x10&\x12\x15\n" +
	"\x11DANCE_STYLE_MAMBO\x10'\x12\x17\n" +
	"\x13DANCE_STYLE_MAZURKA\x10(\x12\x1b\n" +
	"\x17DANCE_STYLE_MODERNDANCE\x10)\x12\x19\n" +
	"\x15DANCE_STYLE_PASODOBLE\x10*\x12\x19\n" +
	"\x15DANCE_STYLE_POLONAISE\x10+\x12\x17\n" +
	"\x13DANCE_STYLE_POPPING\x10,\x12\x19\n" +
	"\x15DANCE_STYLE_QUICKSTEP\x10-\x12\x15\n" +
	"\x11DANCE_STYLE_ROBOT\x10.\x12\x1a\n" +
	"\x16DANCE_STYLE_RODEOSWING\x10/\x12\x15\n" +
	"\x11DANCE_STYLE_RUMBA\x100\x12\x15\n" +
	"\x11DANCE_STYLE_SALSA\x101\x12\x15\n" +
	"\x11DANCE_STYLE_SAMBA\x102\x12\x19\n" +
	"\x15DANCE_STYLE_SLOWWALTZ\x103\x12\x1b\n" +
	"\x17DANCE_STYLE_SQUAREDANCE\x104\x12\x18\n" +
	"\x14DANCE_STYLE_STEPPING\x105\x12\x15\n" +
	"\x11DANCE_STYLE_SWING\x106\x12\x15\n" +
	"\x11DANCE_STYLE_TANGO\x107\x12\x1a\n" +
	"\x16DANCE_STYLE_TAPDANCING\x108\x12\x18\n" +
	"\x14DANCE_STYLE_THETWIST\x109\x12 \n" +
	"\x1cDANCE_STYLE_TRADITIONALDANCE\x10:\x12\x1a\n" +
	"\x16DANCE_STYLE_TRIPLESTEP\x10;\x12\x17\n" +
	"\x13DANCE_STYLE_TURFING\x10<\x12\x19\n" +
	"\x15DANCE_STYLE_UPROCKING\x10=\x12\x1b\n" +
	"\x17DANCE_STYLE_USERDEFINED\x10>\x12\x1d\n" +
	"\x19DANCE_STYLE_VIENNESEWALTZ\x10?\x12\x15\n" +
	"\x11DANCE_STYLE_WALTZ\x10@\x12\x16\n" +
	"\x12DANCE_STYLE_WATUSI\x10A\x12\x1e\n" +
	"\x1aDANCE_STYLE_WESTCOASTSWING\x10B\x12\x1c\n" +
	"\x18DANCE_STYLE_WESTERNSWING\x10C*\xb8\x0e\n" +
	"\x11DataCarrierFormat\x12#\n" +
	"\x1fDATA_CARRIER_FORMAT_UNSPECIFIED\x10\x00\x12$\n" +
	" DATA_CARRIER_FORMAT_AFORMATVIDEO\x10\x01\x12\x1c\n" +
	"\x18DATA_CARRIER_FORMAT_ADAT\x10\x02\x12#\n" +
	"\x1fDATA_CARRIER_FORMAT_ANALOGAUDIO\x10\x03\x12$\n" +
	" DATA_CARRIER_FORMAT_BFORMATVIDEO\x10\x04\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_BETACAM\x10\x05\x12!\n" +
	"\x1dDATA_CARRIER_FORMAT_BETACAMSP\x10\x06\x12!\n" +
	"\x1dDATA_CARRIER_FORMAT_BETACAMSX\x10\a\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_BETAMAX\x10\b\x12$\n" +
	" DATA_CARRIER_FORMAT_CFORMATVIDEO\x10\t\x12/\n" +
	"+DATA_CARRIER_FORMAT_COMPACTDISKDIGITALAUDIO\x10\n" +
	"\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D1DIGITALVIDEO\x10\v\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D2DIGITALVIDEO\x10\f\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D3DIGITALVIDEO\x10\r\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D4DIGITALVIDEO\x10\x0e\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D5DIGITALVIDEO\x10\x0f\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D6DIGITALVIDEO\x10\x10\x12\x1c\n" +
	"\x18DATA_CARRIER_FORMAT_DTRS\x10\x11\x12\x1d\n" +
	"\x19DATA_CARRIER_FORMAT_DVCAM\x10\x12\x12\x1e\n" +
	"\x1aDATA_CARRIER_FORMAT_DVCPRO\x10\x13\x12)\n" +
	"%DATA_CARRIER_FORMAT_DVCPROPROGRESSIVE\x10\x14\x12 \n" +
	"\x1cDATA_CARRIER_FORMAT_DVCPRO50\x10\x15\x12 \n" +
	"\x1cDATA_CARRIER_FORMAT_DVCPROHD\x10\x16\x122\n" +
	".DATA_CARRIER_FORMAT_DIGITALAUDIOSTATIONARYHEAD\x10\x17\x12(\n" +
	"$DATA_CARRIER_FORMAT_DIGITALAUDIOTAPE\x10\x18\x125\n" +
	"1DATA_CARRIER_FORMAT_DIGITALCOMPONENTVIDEOCASSETTE\x10\x19\x12.\n" +
	"*DATA_CARRIER_FORMAT_DIGITALDATASTORAGETAPE\x10\x1a\x12+\n" +
	"'DATA_CARRIER_FORMAT_DIRECTSTREAMDIGITAL\x10\x1b\x12+\n" +
	"'DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE\x10\x1c\x121\n" +
	"-DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE_32BIT\x10\x1d\x12.\n" +
	"*DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEM\x10\x1e\x122\n" +
	".DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEMPLUS\x10\x1f\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_ISO9660\x10 \x12%\n" +
	"!DATA_CARRIER_FORMAT_JVCPCMDIGITAL\x10!\x12,\n" +
	"(DATA_CARRIER_FORMAT_LINEARTAPEFILESYSTEM\x10\"\x12\"\n" +
	"\x1eDATA_CARRIER_FORMAT_MASTERLINK\x10#\x12/\n" +
	"+DATA_CARRIER_FORMAT_NEWTECHNOLOGYFILESYSTEM\x10$\x12%\n" +
	"!DATA_CARRIER_FORMAT_NOTAPPLICABLE\x10%\x12\"\n" +
	"\x1eDATA_CARRIER_FORMAT_PCMDIGITAL\x10&\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_PRODIGI\x10'\x12#\n" +
	"\x1fDATA_CARRIER_FORMAT_PROPRIETARY\x10(\x12\x1d\n" +
	"\x19DATA_CARRIER_FORMAT_RADAR\x10)\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_RADARII\x10*\x12#\n" +
	"\x1fDATA_CARRIER_FORMAT_SONYPCM1630\x10+\x12%\n" +
	"!DATA_CARRIER_FORMAT_STREAMINGDATA\x10,\x126\n" +
	"2DATA_CARRIER_FORMAT_TRANSVERSETRACKQUADRAPLEXVIDEO\x10-*\x80j\n" +
	"\x0fDataCarrierType\x12!\n" +
	"\x1dDATA_CARRIER_TYPE_UNSPECIFIED\x10\x00\x129\n" +
	"5DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_10_5INCHREEL\x10\x01\x126\n" +
	"2DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_7INCHREEL\x10\x02\x12@\n" +
	"<DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\x03\x126\n" +
	"2DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_LARGEREEL\x10\x04\x127\n" +
	"3DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_MEDIUMREEL\x10\x05\x126\n" +
	"2DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_SMALLREEL\x10\x06\x12@\n" +
	"<DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE\x10\a\x12:\n" +
	"6DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_10_5INCHREEL\x10\b\x127\n" +
	"3DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_7INCHREEL\x10\t\x12A\n" +
	"=DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\n" +
	"\x12;\n" +
	"7DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_10_5INCHREEL\x10\v\x128\n" +
	"4DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_7INCHREEL\x10\f\x12B\n" +
	">DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\r\x12<\n" +
	"8DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_10_5INCHREEL\x10\x0e\x129\n" +
	"5DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_7INCHREEL\x10\x0f\x12C\n" +
	"?DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\x10\x12=\n" +
	"9DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_LARGECASSETTE\x10\x11\x12>\n" +
	":DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE\x10\x12\x12=\n" +
	"9DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_SMALLCASSETTE\x10\x13\x12;\n" +
	"7DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_10_5INCHREEL\x10\x14\x128\n" +
	"4DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_7INCHREEL\x10\x15\x12B\n" +
	">DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\x16\x12<\n" +
	"8DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_10_5INCHREEL\x10\x17\x129\n" +
	"5DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_7INCHREEL\x10\x18\x12C\n" +
	"?DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\x19\x12B\n" +
	">DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_EXTRALARGECASSETTE\x10\x1a\x12=\n" +
	"9DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_LARGECASSETTE\x10\x1b\x12>\n" +
	":DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE\x10\x1c\x12=\n" +
	"9DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE\x10\x1d\x125\n" +
	"1DATA_CARRIER_TYPE_E_16MMSEPMAGANALOGAUDIOFILMREEL\x10\x1e\x126\n" +
	"2DATA_CARRIER_TYPE_E_16MMPICTUREANALOGVIDEOFILMREEL\x10\x1f\x129\n" +
	"5DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_10_5INCHREEL\x10 \x127\n" +
	"3DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_12INCHREEL\x10!\x127\n" +
	"3DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_14INCHREEL\x10\"\x12@\n" +
	"<DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE\x10#\x126\n" +
	"2DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_LARGEREEL\x10$\x127\n" +
	"3DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_MEDIUMREEL\x10%\x126\n" +
	"2DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_SMALLREEL\x10&\x12@\n" +
	"<DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE\x10'\x12=\n" +
	"9DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_LARGECASSETTE\x10(\x12>\n" +
	":DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE\x10)\x12=\n" +
	"9DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE\x10*\x125\n" +
	"1DATA_CARRIER_TYPE_E_35MMSEPMAGANALOGAUDIOFILMREEL\x10+\x126\n" +
	"2DATA_CARRIER_TYPE_E_35MMPICTUREANALOGVIDEOFILMREEL\x10,\x125\n" +
	"1DATA_CARRIER_TYPE_E_8MMPICTUREANALOGVIDEOFILMREEL\x10-\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_1DIGITALDATATAPE\x10.\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_2DIGITALDATATAPE\x10/\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_3DIGITALDATATAPE\x100\x12,\n" +
	"(DATA_CARRIER_TYPE_AIT_3EXDIGITALDATATAPE\x101\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_4DIGITALDATATAPE\x102\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_5DIGITALDATATAPE\x103\x12(\n" +
	"$DATA_CARRIER_TYPE_BERNOULLIDISK_20MB\x104\x12<\n" +
	"8DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_LARGECASSETTE\x105\x12<\n" +
	"8DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_SMALLCASSETTE\x106\x12=\n" +
	"9DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_LARGECASSETTE\x107\x12=\n" +
	"9DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_SMALLCASSETTE\x108\x12:\n" +
	"6DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_LARGECASSETTE\x109\x12:\n" +
	"6DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_SMALLCASSETTE\x10:\x12&\n" +
	"\"DATA_CARRIER_TYPE_BINDER_1INCHRING\x10;\x12(\n" +
	"$DATA_CARRIER_TYPE_BINDER_1_5INCHRING\x10<\x12(\n" +
	"$DATA_CARRIER_TYPE_BINDER_0_5INCHRING\x10=\x12&\n" +
	"\"DATA_CARRIER_TYPE_BINDER_2INCHRING\x10>\x12M\n" +
	"IDATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM\x10?\x12M\n" +
	"IDATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10@\x12J\n" +
	"FDATA_CARRIER_TYPE_CDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10A\x12*\n" +
	"&DATA_CARRIER_TYPE_CDROMDIGITALDATADISK\x10B\x12=\n" +
	"9DATA_CARRIER_TYPE_CDIINTERACTIVEMULTIMEDIADIGITALDATADISK\x10C\x124\n" +
	"0DATA_CARRIER_TYPE_COMPACTCASSETTEANALOGAUDIOTAPE\x10D\x12.\n" +
	"*DATA_CARRIER_TYPE_DAT160DIGITALSTORAGETAPE\x10E\x12.\n" +
	"*DATA_CARRIER_TYPE_DAT320DIGITALSTORAGETAPE\x10F\x12-\n" +
	")DATA_CARRIER_TYPE_DAT72DIGITALSTORAGETAPE\x10G\x12*\n" +
	"&DATA_CARRIER_TYPE_DDS_1DIGITALDATATAPE\x10H\x12*\n" +
	"&DATA_CARRIER_TYPE_DDS_2DIGITALDATATAPE\x10I\x12*\n" +
	"&DATA_CARRIER_TYPE_DDS_3DIGITALDATATAPE\x10J\x12*\n" +
	"&DATA_CARRIER_TYPE_DDS_4DIGITALDATATAPE\x10K\x12,\n" +
	"(DATA_CARRIER_TYPE_DLT_IIIDIGITALDATATAPE\x10L\x12+\n" +
	"'DATA_CARRIER_TYPE_DLT_IVDIGITALDATATAPE\x10M\x125\n" +
	"1DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_MINICASSETTE\x10N\x127\n" +
	"3DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_NORMALCASSETTE\x10O\x12+\n" +
	"'DATA_CARRIER_TYPE_DVCAMDIGITALVIDEOTAPE\x10P\x12<\n" +
	"8DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_LARGECASSETTE\x10Q\x12=\n" +
	"9DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_MEDIUMCASSETTE\x10R\x12<\n" +
	"8DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_SMALLCASSETTE\x10S\x12A\n" +
	"=DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_EXTRALARGECASSETTE\x10T\x12<\n" +
	"8DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_LARGECASSETTE\x10U\x12Q\n" +
	"MDATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM\x10V\x12Q\n" +
	"MDATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10W\x12R\n" +
	"NDATA_CARRIER_TYPE_DVD_PLUS_RWREWRITABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10X\x12K\n" +
	"GDATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM\x10Y\x12K\n" +
	"GDATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10Z\x12<\n" +
	"8DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKDOUBLESIDED\x10[\x12<\n" +
	"8DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKSINGLESIDED\x10\\\x12B\n" +
	">DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_LARGECASSETTE\x10]\x12B\n" +
	">DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_SMALLCASSETTE\x10^\x12&\n" +
	"\"DATA_CARRIER_TYPE_DIGITALAUDIOTAPE\x10_\x12,\n" +
	"(DATA_CARRIER_TYPE_DIGITALCOMPACTCASSETTE\x10`\x12>\n" +
	":DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_COMPACTCASSETTE\x10a\x12?\n" +
	";DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_STANDARDCASSETTE\x10b\x12K\n" +
	"GDATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH\x10c\x12L\n" +
	"HDATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH\x10d\x12\x1e\n" +
	"\x1aDATA_CARRIER_TYPE_ENVELOPE\x10e\x126\n" +
	"2DATA_CARRIER_TYPE_EXABYTE8500SERIESDIGITALDATATAPE\x10f\x126\n" +
	"2DATA_CARRIER_TYPE_EXABYTE8700SERIESDIGITALDATATAPE\x10g\x126\n" +
	"2DATA_CARRIER_TYPE_EXABYTE8900SERIESDIGITALDATATAPE\x10h\x123\n" +
	"/DATA_CARRIER_TYPE_EXABYTEMAMMOTHDIGITALDATATAPE\x10i\x12 \n" +
	"\x1cDATA_CARRIER_TYPE_FILESYSTEM\x10j\x12G\n" +
	"CDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH\x10k\x12G\n" +
	"CDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH\x10l\x12G\n" +
	"CDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH\x10m\x12G\n" +
	"CDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH\x10n\x12F\n" +
	"BDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH\x10o\x12P\n" +
	"LDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10p\x12L\n" +
	"HDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_12CM\x10q\x12K\n" +
	"GDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_8CM\x10r\x12L\n" +
	"HDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_12CM\x10s\x12K\n" +
	"GDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_8CM\x10t\x12L\n" +
	"HDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM\x10u\x12K\n" +
	"GDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_8CM\x10v\x12L\n" +
	"HDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10w\x12K\n" +
	"GDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_8CM\x10x\x12;\n" +
	"7DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_LARGECASSETTE\x10y\x12;\n" +
	"7DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_SMALLCASSETTE\x10z\x12+\n" +
	"'DATA_CARRIER_TYPE_HDCAMDIGITALVIDEOTAPE\x10{\x12-\n" +
	")DATA_CARRIER_TYPE_HDVHDTVDIGITALVIDEOTAPE\x10|\x12;\n" +
	"7DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB2_0INTERFACE\x10}\x12;\n" +
	"7DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB3_0INTERFACE\x10~\x128\n" +
	"4DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSBINTERFACE\x10\x7f\x12>\n" +
	"9DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIREINTERFACE\x10\x80\x01\x12B\n" +
	"=DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE\x10\x81\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_HARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\x82\x01\x129\n" +
	"4DATA_CARRIER_TYPE_HARDDISKDRIVE_UNSPECIFIEDINTERFACE\x10\x83\x01\x12*\n" +
	"%DATA_CARRIER_TYPE_HI_8ANALOGVIDEOTAPE\x10\x84\x01\x12B\n" +
	"=DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE\x10\x85\x01\x12B\n" +
	"=DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE\x10\x86\x01\x12?\n" +
	":DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSBINTERFACE\x10\x87\x01\x12D\n" +
	"?DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE\x10\x88\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE\x10\x89\x01\x12M\n" +
	"HDATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USB_SATAINTERFACE\x10\x8a\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\x8b\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE\x10\x8c\x01\x12)\n" +
	"$DATA_CARRIER_TYPE_JAZDIGITALDATADISK\x10\x8d\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_1ULTRIUMDIGITALDATATAPE\x10\x8e\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_2ULTRIUMDIGITALDATATAPE\x10\x8f\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_3ULTRIUMDIGITALDATATAPE\x10\x90\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_4ULTRIUMDIGITALDATATAPE\x10\x91\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_5ULTRIUMDIGITALDATATAPE\x10\x92\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_6ULTRIUMDIGITALDATATAPE\x10\x93\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_7ULTRIUMDIGITALDATATAPE\x10\x94\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_10INCH\x10\x95\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_12INCH\x10\x96\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_14INCH\x10\x97\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_16INCH\x10\x98\x01\x12=\n" +
	"8DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_7INCH\x10\x99\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10\x9a\x01\x126\n" +
	"1DATA_CARRIER_TYPE_LASERDISCOPTICALDISKSINGLESIDED\x10\x9b\x01\x12\x1f\n" +
	"\x1aDATA_CARRIER_TYPE_MINIDISK\x10\x9c\x01\x12#\n" +
	"\x1eDATA_CARRIER_TYPE_MODISK_1_3GB\x10\x9d\x01\x12$\n" +
	"\x1fDATA_CARRIER_TYPE_MODISK_1200MB\x10\x9e\x01\x12#\n" +
	"\x1eDATA_CARRIER_TYPE_MODISK_2_6GB\x10\x9f\x01\x12#\n" +
	"\x1eDATA_CARRIER_TYPE_MODISK_540MB\x10\xa0\x01\x12#\n" +
	"\x1eDATA_CARRIER_TYPE_MODISK_650MB\x10\xa1\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH\x10\xa2\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH\x10\xa3\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH\x10\xa4\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH\x10\xa5\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH\x10\xa6\x01\x12Q\n" +
	"LDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10\xa7\x01\x12\"\n" +
	"\x1dDATA_CARRIER_TYPE_PREMASTERCD\x10\xa8\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE\x10\xa9\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE\x10\xaa\x01\x12C\n" +
	">DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE\x10\xab\x01\x12F\n" +
	"ADATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\xac\x01\x12F\n" +
	"ADATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE\x10\xad\x01\x12;\n" +
	"6DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_COMPACTCASSETTE\x10\xae\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_STANDARDCASSETTE\x10\xaf\x01\x12?\n" +
	":DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE\x10\xb0\x01\x12F\n" +
	"ADATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\xb1\x01\x12F\n" +
	"ADATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE\x10\xb2\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL50PININTERFACE\x10\xb3\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL68PININTERFACE\x10\xb4\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALCENTRONIXINTERFACE\x10\xb5\x01\x12@\n" +
	";DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE\x10\xb6\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\xb7\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL50PININTERFACE\x10\xb8\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL68PININTERFACE\x10\xb9\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL80PININTERFACE\x10\xba\x01\x12K\n" +
	"FDATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\xbb\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_10INCH\x10\xbc\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_12INCH\x10\xbd\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_14INCH\x10\xbe\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_16INCH\x10\xbf\x01\x12=\n" +
	"8DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_7INCH\x10\xc0\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10\xc1\x01\x12L\n" +
	"GDATA_CARRIER_TYPE_SINGLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH\x10\xc2\x01\x12L\n" +
	"GDATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH\x10\xc3\x01\x12M\n" +
	"HDATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH\x10\xc4\x01\x12J\n" +
	"EDATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_8INCH\x10\xc5\x01\x123\n" +
	".DATA_CARRIER_TYPE_SOLIDSTATEMEMORYSTORAGECARDS\x10\xc6\x01\x12.\n" +
	")DATA_CARRIER_TYPE_STORAGEBOX_1_2CUBICFEET\x10\xc7\x01\x12.\n" +
	")DATA_CARRIER_TYPE_STORAGEBOX_2_0CUBICFEET\x10\xc8\x01\x12!\n" +
	"\x1cDATA_CARRIER_TYPE_STORAGEBOX\x10\xc9\x01\x124\n" +
	"/DATA_CARRIER_TYPE_STORAGECONTAINER_1_2CUBICFEET\x10\xca\x01\x124\n" +
	"/DATA_CARRIER_TYPE_STORAGECONTAINER_2_0CUBICFEET\x10\xcb\x01\x12'\n" +
	"\"DATA_CARRIER_TYPE_STORAGECONTAINER\x10\xcc\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_SUPER16MMPICTUREANALOGVIDEOFILMREEL\x10\xcd\x01\x129\n" +
	"4DATA_CARRIER_TYPE_SUPER8MMPICTUREANALOGVIDEOFILMREEL\x10\xce\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_UMATICSPANALOGVIDEOTAPE_SMALLCASSETTE\x10\xcf\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_LARGECASSETTE\x10\xd0\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_SMALLCASSETTE\x10\xd1\x01\x129\n" +
	"4DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_COMPACTCASSETTE\x10\xd2\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_STANDARDCASSETTE\x10\xd3\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_10INCH\x10\xd4\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_12INCH\x10\xd5\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_14INCH\x10\xd6\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_16INCH\x10\xd7\x01\x12;\n" +
	"6DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_7INCH\x10\xd8\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10\xd9\x01\x12+\n" +
	"&DATA_CARRIER_TYPE_VXA_1DIGITALDATATAPE\x10\xda\x01\x12+\n" +
	"&DATA_CARRIER_TYPE_VXA_2DIGITALDATATAPE\x10\xdb\x01\x12+\n" +
	"&DATA_CARRIER_TYPE_VXA_3DIGITALDATATAPE\x10\xdc\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_WAXCYLINDERPHONOGRAMANALOGAUDIODISK\x10\xdd\x01\x121\n" +
	",DATA_CARRIER_TYPE_XDCAMREWRITABLEOPTICALDISK\x10\xde\x01\x12)\n" +
	"$DATA_CARRIER_TYPE_ZIPDIGITALDATADISK\x10\xdf\x01*w\n" +
	"\x11DdexTerritoryCode\x12#\n" +
	"\x1fDDEX_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16DDEX_TERRITORY_CODE_XK\x10\x01\x12!\n" +
	"\x1dDDEX_TERRITORY_CODE_WORLDWIDE\x10\x02*\xb8\x03\n" +
	"\x16DeprecatedCurrencyCode\x12(\n" +
	"$DEPRECATED_CURRENCY_CODE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_CYP\x10\x01\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_EEK\x10\x02\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_LTL\x10\x03\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_LVL\x10\x04\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_MTL\x10\x05\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_MRO\x10\x06\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_ROL\x10\a\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_SIT\x10\b\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_SKK\x10\t\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_STD\x10\n" +
	"\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_VEF\x10\v*\xa3\n" +
	"\n" +
	"\x1aDeprecatedIsoTerritoryCode\x12-\n" +
	")DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_AIDJ\x10\x01\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_ANHH\x10\x02\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_BQAQ\x10\x03\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_BUMM\x10\x04\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_BYAA\x10\x05\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_CSHH\x10\x06\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_CSXX\x10\a\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_CTKI\x10\b\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_DDDE\x10\t\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_DYBJ\x10\n" +
	"\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_FQHH\x10\v\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_FXFR\x10\f\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_GEHH\x10\r\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_HVBF\x10\x0e\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_JTUM\x10\x0f\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_MIUM\x10\x10\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_NHVU\x10\x11\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_NQAQ\x10\x12\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_NTHH\x10\x13\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_PCHH\x10\x14\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_PUUM\x10\x15\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_PZPA\x10\x16\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_RHZW\x10\x17\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_SKIN\x10\x18\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_SUHH\x10\x19\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_TPTL\x10\x1a\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_VDVN\x10\x1b\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_WKUM\x10\x1c\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_YDYE\x10\x1d\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_YUCS\x10\x1e\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_ZRCD\x10\x1f*j\n" +
	"\x15DeprecatedReleaseType\x12'\n" +
	"#DEPRECATED_RELEASE_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$DEPRECATED_RELEASE_TYPE_TRACKRELEASE\x10\x01*\xa5\x01\n" +
	"\x10DigitizationMode\x12!\n" +
	"\x1dDIGITIZATION_MODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15DIGITIZATION_MODE_AAD\x10\x01\x12\x19\n" +
	"\x15DIGITIZATION_MODE_ADD\x10\x02\x12\x19\n" +
	"\x15DIGITIZATION_MODE_DDD\x10\x03\x12\x1d\n" +
	"\x19DIGITIZATION_MODE_UNKNOWN\x10\x04*\xa4\x01\n" +
	"\x11DisplayArtistRole\x12#\n" +
	"\x1fDISPLAY_ARTIST_ROLE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aDISPLAY_ARTIST_ROLE_ARTIST\x10\x01\x12&\n" +
	"\"DISPLAY_ARTIST_ROLE_FEATUREDARTIST\x10\x02\x12\"\n" +
	"\x1eDISPLAY_ARTIST_ROLE_MAINARTIST\x10\x03*\xe0\x05\n" +
	"\x17DistributionChannelType\x12)\n" +
	"%DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT\x10\x01\x12'\n" +
	"#DISTRIBUTION_CHANNEL_TYPE_BROADCAST\x10\x02\x12#\n" +
	"\x1fDISTRIBUTION_CHANNEL_TYPE_CABLE\x10\x03\x12&\n" +
	"\"DISTRIBUTION_CHANNEL_TYPE_INTERNET\x10\x04\x12/\n" +
	"+DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE\x10\x05\x12\"\n" +
	"\x1eDISTRIBUTION_CHANNEL_TYPE_IPTV\x10\x06\x12-\n" +
	")DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE\x10\a\x12(\n" +
	"$DISTRIBUTION_CHANNEL_TYPE_NARROWCAST\x10\b\x12,\n" +
	"(DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM\x10\t\x12(\n" +
	"$DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER\x10\n" +
	"\x12&\n" +
	"\"DISTRIBUTION_CHANNEL_TYPE_PHYSICAL\x10\v\x12'\n" +
	"#DISTRIBUTION_CHANNEL_TYPE_SATELLITE\x10\f\x12'\n" +
	"#DISTRIBUTION_CHANNEL_TYPE_SIMULCAST\x10\r\x12%\n" +
	"!DISTRIBUTION_CHANNEL_TYPE_UNKNOWN\x10\x0e\x12)\n" +
	"%DISTRIBUTION_CHANNEL_TYPE_USERDEFINED\x10\x0f\x12%\n" +
	"!DISTRIBUTION_CHANNEL_TYPE_WEBCAST\x10\x10*\x83\x01\n" +
	"\x0fDocumentTypeLoD\x12\"\n" +
	"\x1eDOCUMENT_TYPE_LO_D_UNSPECIFIED\x10\x00\x12(\n" +
	"$DOCUMENT_TYPE_LO_D_LETTEROFDIRECTION\x10\x01\x12\"\n" +
	"\x1eDOCUMENT_TYPE_LO_D_USERDEFINED\x10\x02*\xa6\x01\n" +
	"\x0fDocumentTypeMWL\x12#\n" +
	"\x1fDOCUMENT_TYPE_M_W_L_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cDOCUMENT_TYPE_M_W_L_CONTRACT\x10\x01\x12'\n" +
	"#DOCUMENT_TYPE_M_W_L_RATECALCULATION\x10\x02\x12#\n" +
	"\x1fDOCUMENT_TYPE_M_W_L_USERDEFINED\x10\x03*t\n" +
	"\n" +
	"DpidStatus\x12\x1b\n" +
	"\x17DPID_STATUS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12DPID_STATUS_ACTIVE\x10\x01\x12\x17\n" +
	"\x13DPID_STATUS_DELETED\x10\x02\x12\x18\n" +
	"\x14DPID_STATUS_REPLACED\x10\x03*\x89\x01\n" +
	"\x12DrmEnforcementType\x12$\n" +
	" DRM_ENFORCEMENT_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" DRM_ENFORCEMENT_TYPE_DRMENFORCED\x10\x01\x12'\n" +
	"#DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED\x10\x02*\xfc\x0f\n" +
	"\x14ElementConfiguration\x12%\n" +
	"!ELEMENT_CONFIGURATION_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_12TRACK\x10\x01\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_16TRACK\x10\x02\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_24TRACK\x10\x03\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_E_3TRACK\x10\x04\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_32TRACK\x10\x05\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_E_4TRACK\x10\x06\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_48TRACK\x10\a\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_E_6TRACK\x10\b\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_E_8TRACK\x10\t\x12%\n" +
	"!ELEMENT_CONFIGURATION_ABLETONLIVE\x10\n" +
	"\x12$\n" +
	" ELEMENT_CONFIGURATION_BRUARCHIVE\x10\v\x12.\n" +
	"*ELEMENT_CONFIGURATION_BANDEDDISC_INSIDEOUT\x10\f\x12.\n" +
	"*ELEMENT_CONFIGURATION_BANDEDDISC_OUTSIDEIN\x10\r\x12 \n" +
	"\x1cELEMENT_CONFIGURATION_CUBASE\x10\x0e\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_DATAFILES\x10\x0f\x12*\n" +
	"&ELEMENT_CONFIGURATION_DIGITALPERFORMER\x10\x10\x12)\n" +
	"%ELEMENT_CONFIGURATION_FINALCUTEXPRESS\x10\x11\x12%\n" +
	"!ELEMENT_CONFIGURATION_FINALCUTPRO\x10\x12\x12%\n" +
	"!ELEMENT_CONFIGURATION_FRUITYLOOPS\x10\x13\x12'\n" +
	"#ELEMENT_CONFIGURATION_FULLTRACKMONO\x10\x14\x12$\n" +
	" ELEMENT_CONFIGURATION_GARAGEBAND\x10\x15\x12'\n" +
	"#ELEMENT_CONFIGURATION_HALFTRACKMONO\x10\x16\x12)\n" +
	"%ELEMENT_CONFIGURATION_HALFTRACKSTEREO\x10\x17\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_HARDCOPY\x10\x18\x12-\n" +
	")ELEMENT_CONFIGURATION_INTERLEAVED5_1FILES\x10\x19\x120\n" +
	",ELEMENT_CONFIGURATION_INTERLEAVEDSTEREOFILES\x10\x1a\x12\x1f\n" +
	"\x1bELEMENT_CONFIGURATION_LOGIC\x10\x1b\x12%\n" +
	"!ELEMENT_CONFIGURATION_LTFSARCHIVE\x10\x1c\x12$\n" +
	" ELEMENT_CONFIGURATION_LTFSBACKUP\x10\x1d\x12&\n" +
	"\"ELEMENT_CONFIGURATION_MEZZOARCHIVE\x10\x1e\x12)\n" +
	"%ELEMENT_CONFIGURATION_MICROSOFTBACKUP\x10\x1f\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_MONOFILES\x10 \x12 \n" +
	"\x1cELEMENT_CONFIGURATION_NUENDO\x10!\x12$\n" +
	" ELEMENT_CONFIGURATION_ORANGEBOOK\x10\"\x12\x1f\n" +
	"\x1bELEMENT_CONFIGURATION_PARIS\x10#\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_PROTOOLS\x10$\x12*\n" +
	"&ELEMENT_CONFIGURATION_QUARTERTRACKMONO\x10%\x12,\n" +
	"(ELEMENT_CONFIGURATION_QUARTERTRACKSTEREO\x10&\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_QUICKTIME\x10'\x12!\n" +
	"\x1dELEMENT_CONFIGURATION_REDBOOK\x10(\x12+\n" +
	"'ELEMENT_CONFIGURATION_RETROSPECTARCHIVE\x10)\x12+\n" +
	"'ELEMENT_CONFIGURATION_RETROSPECTCATALOG\x10*\x12%\n" +
	"!ELEMENT_CONFIGURATION_SPLITSTEREO\x10+\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_STUDIOONE\x10,\x12$\n" +
	" ELEMENT_CONFIGURATION_TARARCHIVE\x10-\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_TARBACKUP\x10.\x12&\n" +
	"\"ELEMENT_CONFIGURATION_TOASTARCHIVE\x10/\x12/\n" +
	"+ELEMENT_CONFIGURATION_TRACKEDDISC_INSIDEOUT\x100\x12/\n" +
	"+ELEMENT_CONFIGURATION_TRACKEDDISC_OUTSIDEIN\x101\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_TWINTRACK\x102*\x96\x03\n" +
	"\x12ElementDesignation\x12#\n" +
	"\x1fELEMENT_DESIGNATION_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aELEMENT_DESIGNATION_BACKUP\x10\x01\x12#\n" +
	"\x1fELEMENT_DESIGNATION_CONVENIENCE\x10\x02\x12\x1c\n" +
	"\x18ELEMENT_DESIGNATION_COPY\x10\x03\x12%\n" +
	"!ELEMENT_DESIGNATION_DOCUMENTATION\x10\x04\x12 \n" +
	"\x1cELEMENT_DESIGNATION_LONGTERM\x10\x05\x12\x1e\n" +
	"\x1aELEMENT_DESIGNATION_MASTER\x10\x06\x12\x1e\n" +
	"\x1aELEMENT_DESIGNATION_SAFETY\x10\a\x12(\n" +
	"$ELEMENT_DESIGNATION_STORAGECONTAINER\x10\b\x12 \n" +
	"\x1cELEMENT_DESIGNATION_TRANSFER\x10\t\x12#\n" +
	"\x1fELEMENT_DESIGNATION_WORKELEMENT\x10\n" +
	"*c\n" +
	"\fEncodingType\x12\x1d\n" +
	"\x19ENCODING_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11ENCODING_TYPE_IPA\x10\x01\x12\x1d\n" +
	"\x19ENCODING_TYPE_USERDEFINED\x10\x02*\x8f\x02\n" +
	"\rEquipmentType\x12\x1e\n" +
	"\x1aEQUIPMENT_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17EQUIPMENT_TYPE_COMPUTER\x10\x01\x12\x1e\n" +
	"\x1aEQUIPMENT_TYPE_LOUDSPEAKER\x10\x02\x12\x1d\n" +
	"\x19EQUIPMENT_TYPE_MICROPHONE\x10\x03\x12\x1b\n" +
	"\x17EQUIPMENT_TYPE_RECORDER\x10\x04\x12\"\n" +
	"\x1eEQUIPMENT_TYPE_SIGNALPROCESSOR\x10\x05\x12\x1b\n" +
	"\x17EQUIPMENT_TYPE_SOFTWARE\x10\x06\x12$\n" +
	" EQUIPMENT_TYPE_MUSICALINSTRUMENT\x10\a*Z\n" +
	"\x0eErnMessageType\x12 \n" +
	"\x1cERN_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE\x10\x01*\x97\x01\n" +
	"\x12ErnTestMessageType\x12%\n" +
	"!ERN_TEST_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'ERN_TEST_MESSAGE_TYPE_NEWRELEASEMESSAGE\x10\x01\x12-\n" +
	")ERN_TEST_MESSAGE_TYPE_PURGERELEASEMESSAGE\x10\x02*\xca\a\n" +
	"\x0eErncFileStatus\x12 \n" +
	"\x1cERNC_FILE_STATUS_UNSPECIFIED\x10\x00\x12&\n" +
	"\"ERNC_FILE_STATUS_ARTISTROLEUNKNOWN\x10\x01\x121\n" +
	"-ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID\x10\x02\x123\n" +
	"/ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS\x10\x03\x12-\n" +
	")ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES\x10\x04\x12\x1f\n" +
	"\x1bERNC_FILE_STATUS_ERNMISSING\x10\x05\x12\x1b\n" +
	"\x17ERNC_FILE_STATUS_FILEOK\x10\x06\x12&\n" +
	"\"ERNC_FILE_STATUS_IDENTIFIERINVALID\x10\a\x12,\n" +
	"(ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID\x10\b\x12\"\n" +
	"\x1eERNC_FILE_STATUS_INTERNALERROR\x10\t\x12$\n" +
	" ERNC_FILE_STATUS_METADATAMISSING\x10\n" +
	"\x12-\n" +
	")ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID\x10\v\x12*\n" +
	"&ERNC_FILE_STATUS_NODEALFORTRACKRELEASE\x10\f\x12.\n" +
	"*ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE\x10\r\x12<\n" +
	"8ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE\x10\x0e\x12-\n" +
	")ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING\x10\x0f\x12$\n" +
	" ERNC_FILE_STATUS_RESOURCECORRUPT\x10\x10\x12$\n" +
	" ERNC_FILE_STATUS_RESOURCEMISSING\x10\x11\x125\n" +
	"1ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS\x10\x12\x125\n" +
	"1ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING\x10\x13\x12%\n" +
	"!ERNC_FILE_STATUS_UNSUPPORTEDUSAGE\x10\x14\x12 \n" +
	"\x1cERNC_FILE_STATUS_USERDEFINED\x10\x15*\xbd\x02\n" +
	"\x16ErncProposedActionType\x12)\n" +
	"%ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY\x10\x01\x123\n" +
	"/ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES\x10\x02\x12)\n" +
	"%ERNC_PROPOSED_ACTION_TYPE_USERDEFINED\x10\x03\x129\n" +
	"5ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE\x10\x04\x120\n" +
	",ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE\x10\x05*\x88\x01\n" +
	"\rErrorSeverity\x12\x1e\n" +
	"\x1aERROR_SEVERITY_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17ERROR_SEVERITY_CRITICAL\x10\x01\x12\x1e\n" +
	"\x1aERROR_SEVERITY_INFORMATION\x10\x02\x12\x1a\n" +
	"\x16ERROR_SEVERITY_WARNING\x10\x03*\x81\x01\n" +
	"\tErrorType\x12\x1a\n" +
	"\x16ERROR_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bERROR_TYPE_CONFORMANCEERROR\x10\x01\x12\x1b\n" +
	"\x17ERROR_TYPE_LOGICALERROR\x10\x02\x12\x1a\n" +
	"\x16ERROR_TYPE_USERDEFINED\x10\x03*\xd4\x01\n" +
	"\x0fExceptionReason\x12 \n" +
	"\x1cEXCEPTION_REASON_UNSPECIFIED\x10\x00\x12'\n" +
	"#EXCEPTION_REASON_DISPUTEDBYLICENSEE\x10\x01\x125\n" +
	"1EXCEPTION_REASON_DISPUTEDBYRELINQUISHINGPUBLISHER\x10\x02\x12\x1d\n" +
	"\x19EXCEPTION_REASON_NOTFOUND\x10\x03\x12 \n" +
	"\x1cEXCEPTION_REASON_USERDEFINED\x10\x04*s\n" +
	"\x0eExpressionType\x12\x1f\n" +
	"\x1bEXPRESSION_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bEXPRESSION_TYPE_INFORMATIVE\x10\x01\x12\x1f\n" +
	"\x1bEXPRESSION_TYPE_INSTRUCTIVE\x10\x02*\xb6\x03\n" +
	"\x1cExternallyLinkedResourceType\x12/\n" +
	"+EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED\x10\x00\x126\n" +
	"2EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA\x10\x01\x12(\n" +
	"$EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO\x10\x02\x124\n" +
	"0EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE\x10\x03\x12:\n" +
	"6EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION\x10\x04\x123\n" +
	"/EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM\x10\x05\x12+\n" +
	"'EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN\x10\x06\x12/\n" +
	"+EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED\x10\a*\xa4\x1e\n" +
	"\bFileType\x12\x19\n" +
	"\x15FILE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13FILE_TYPE_E_3DMFILE\x10\x01\x12\x17\n" +
	"\x13FILE_TYPE_E_3G2FILE\x10\x02\x12\x17\n" +
	"\x13FILE_TYPE_E_3GPFILE\x10\x03\x12\x16\n" +
	"\x12FILE_TYPE_E_7ZFILE\x10\x04\x12\x17\n" +
	"\x13FILE_TYPE_E_8BIFILE\x10\x05\x12\x15\n" +
	"\x11FILE_TYPE_AACFILE\x10\x06\x12\x17\n" +
	"\x13FILE_TYPE_ACCDBFILE\x10\a\x12\x15\n" +
	"\x11FILE_TYPE_AIFFILE\x10\b\x12\x14\n" +
	"\x10FILE_TYPE_AIFILE\x10\t\x12\x15\n" +
	"\x11FILE_TYPE_ANAFILE\x10\n" +
	"\x12\x15\n" +
	"\x11FILE_TYPE_APPFILE\x10\v\x12\x15\n" +
	"\x11FILE_TYPE_ASFFILE\x10\f\x12\x15\n" +
	"\x11FILE_TYPE_ASPFILE\x10\r\x12\x15\n" +
	"\x11FILE_TYPE_ASXFILE\x10\x0e\x12\x15\n" +
	"\x11FILE_TYPE_AUDFILE\x10\x0f\x12\x15\n" +
	"\x11FILE_TYPE_AVIFILE\x10\x10\x12\x15\n" +
	"\x11FILE_TYPE_BAKFILE\x10\x11\x12\x15\n" +
	"\x11FILE_TYPE_BATFILE\x10\x12\x12\x15\n" +
	"\x11FILE_TYPE_BINFILE\x10\x13\x12\x15\n" +
	"\x11FILE_TYPE_BMPFILE\x10\x14\x12\x14\n" +
	"\x10FILE_TYPE_BTFILE\x10\x15\x12\x15\n" +
	"\x11FILE_TYPE_BWFFILE\x10\x16\x12\x15\n" +
	"\x11FILE_TYPE_CABFILE\x10\x17\x12\x15\n" +
	"\x11FILE_TYPE_CERFILE\x10\x18\x12\x15\n" +
	"\x11FILE_TYPE_CFGFILE\x10\x19\x12\x13\n" +
	"\x0fFILE_TYPE_CFILE\x10\x1a\x12\x15\n" +
	"\x11FILE_TYPE_CGIFILE\x10\x1b\x12\x17\n" +
	"\x13FILE_TYPE_CLASSFILE\x10\x1c\x12\x15\n" +
	"\x11FILE_TYPE_COMFILE\x10\x1d\x12\x15\n" +
	"\x11FILE_TYPE_CPLFILE\x10\x1e\x12\x15\n" +
	"\x11FILE_TYPE_CPPFILE\x10\x1f\x12\x14\n" +
	"\x10FILE_TYPE_CSFILE\x10 \x12\x15\n" +
	"\x11FILE_TYPE_CSRFILE\x10!\x12\x15\n" +
	"\x11FILE_TYPE_CSSFILE\x10\"\x12\x15\n" +
	"\x11FILE_TYPE_CSVFILE\x10#\x12\x15\n" +
	"\x11FILE_TYPE_CURFILE\x10$\x12\x15\n" +
	"\x11FILE_TYPE_DATFILE\x10%\x12\x14\n" +
	"\x10FILE_TYPE_DBFILE\x10&\x12\x15\n" +
	"\x11FILE_TYPE_DBXFILE\x10'\x12\x15\n" +
	"\x11FILE_TYPE_DEBFILE\x10(\x12\x15\n" +
	"\x11FILE_TYPE_DLLFILE\x10)\x12\x15\n" +
	"\x11FILE_TYPE_DMGFILE\x10*\x12\x15\n" +
	"\x11FILE_TYPE_DMPFILE\x10+\x12\x15\n" +
	"\x11FILE_TYPE_DOCFILE\x10,\x12\x16\n" +
	"\x12FILE_TYPE_DOCXFILE\x10-\x12\x15\n" +
	"\x11FILE_TYPE_DRVFILE\x10.\x12\x15\n" +
	"\x11FILE_TYPE_DRWFILE\x10/\x12\x15\n" +
	"\x11FILE_TYPE_DSDFILE\x100\x12\x15\n" +
	"\x11FILE_TYPE_DTDFILE\x101\x12\x14\n" +
	"\x10FILE_TYPE_DVFILE\x102\x12\x15\n" +
	"\x11FILE_TYPE_DWGFILE\x103\x12\x15\n" +
	"\x11FILE_TYPE_DXFFILE\x104\x12\x15\n" +
	"\x11FILE_TYPE_EFXFILE\x105\x12\x15\n" +
	"\x11FILE_TYPE_EPSFILE\x106\x12\x15\n" +
	"\x11FILE_TYPE_EXEFILE\x107\x12\x15\n" +
	"\x11FILE_TYPE_FLAFILE\x108\x12\x15\n" +
	"\x11FILE_TYPE_FLVFILE\x109\x12\x15\n" +
	"\x11FILE_TYPE_FNTFILE\x10:\x12\x15\n" +
	"\x11FILE_TYPE_FONFILE\x10;\x12\x18\n" +
	"\x14FILE_TYPE_GADGETFILE\x10<\x12\x15\n" +
	"\x11FILE_TYPE_GAMFILE\x10=\x12\x15\n" +
	"\x11FILE_TYPE_GHOFILE\x10>\x12\x15\n" +
	"\x11FILE_TYPE_GIFFILE\x10?\x12\x15\n" +
	"\x11FILE_TYPE_GPXFILE\x10@\x12\x14\n" +
	"\x10FILE_TYPE_GZFILE\x10A\x12\x15\n" +
	"\x11FILE_TYPE_HQXFILE\x10B\x12\x15\n" +
	"\x11FILE_TYPE_HTMFILE\x10C\x12\x16\n" +
	"\x12FILE_TYPE_HTMLFILE\x10D\x12\x15\n" +
	"\x11FILE_TYPE_IFFFILE\x10E\x12\x16\n" +
	"\x12FILE_TYPE_INDDFILE\x10F\x12\x15\n" +
	"\x11FILE_TYPE_INIFILE\x10G\x12\x15\n" +
	"\x11FILE_TYPE_ISOFILE\x10H\x12\x15\n" +
	"\x11FILE_TYPE_JARFILE\x10I\x12\x16\n" +
	"\x12FILE_TYPE_JAVAFILE\x10J\x12\x15\n" +
	"\x11FILE_TYPE_JPGFILE\x10K\x12\x14\n" +
	"\x10FILE_TYPE_JSFILE\x10L\x12\x15\n" +
	"\x11FILE_TYPE_JSPFILE\x10M\x12\x1a\n" +
	"\x16FILE_TYPE_KEYCHAINFILE\x10N\x12\x15\n" +
	"\x11FILE_TYPE_KEYFILE\x10O\x12\x15\n" +
	"\x11FILE_TYPE_KMLFILE\x10P\x12\x15\n" +
	"\x11FILE_TYPE_LNKFILE\x10Q\x12\x15\n" +
	"\x11FILE_TYPE_LOGFILE\x10R\x12\x15\n" +
	"\x11FILE_TYPE_M3UFILE\x10S\x12\x15\n" +
	"\x11FILE_TYPE_MAXFILE\x10T\x12\x15\n" +
	"\x11FILE_TYPE_MDBFILE\x10U\x12\x13\n" +
	"\x0fFILE_TYPE_MFILE\x10V\x12\x15\n" +
	"\x11FILE_TYPE_MIDFILE\x10W\x12\x15\n" +
	"\x11FILE_TYPE_MIMFILE\x10X\x12\x15\n" +
	"\x11FILE_TYPE_MOVFILE\x10Y\x12\x15\n" +
	"\x11FILE_TYPE_MP3FILE\x10Z\x12\x15\n" +
	"\x11FILE_TYPE_MP4FILE\x10[\x12\x15\n" +
	"\x11FILE_TYPE_MPAFILE\x10\\\x12\x15\n" +
	"\x11FILE_TYPE_MPGFILE\x10]\x12\x15\n" +
	"\x11FILE_TYPE_MSGFILE\x10^\x12\x15\n" +
	"\x11FILE_TYPE_NESFILE\x10_\x12\x15\n" +
	"\x11FILE_TYPE_NEUFILE\x10`\x12\x15\n" +
	"\x11FILE_TYPE_ORIFILE\x10a\x12\x15\n" +
	"\x11FILE_TYPE_OTFFILE\x10b\x12\x17\n" +
	"\x13FILE_TYPE_PAGESFILE\x10c\x12\x15\n" +
	"\x11FILE_TYPE_PCMFILE\x10d\x12\x15\n" +
	"\x11FILE_TYPE_PCTFILE\x10e\x12\x15\n" +
	"\x11FILE_TYPE_PDBFILE\x10f\x12\x15\n" +
	"\x11FILE_TYPE_PDFFILE\x10g\x12\x15\n" +
	"\x11FILE_TYPE_PHPFILE\x10h\x12\x15\n" +
	"\x11FILE_TYPE_PIFFILE\x10i\x12\x15\n" +
	"\x11FILE_TYPE_PKGFILE\x10j\x12\x14\n" +
	"\x10FILE_TYPE_PLFILE\x10k\x12\x15\n" +
	"\x11FILE_TYPE_PLNFILE\x10l\x12\x18\n" +
	"\x14FILE_TYPE_PLUGINFILE\x10m\x12\x15\n" +
	"\x11FILE_TYPE_PNGFILE\x10n\x12\x15\n" +
	"\x11FILE_TYPE_PPSFILE\x10o\x12\x15\n" +
	"\x11FILE_TYPE_PPTFILE\x10p\x12\x16\n" +
	"\x12FILE_TYPE_PPTXFILE\x10q\x12\x15\n" +
	"\x11FILE_TYPE_PRFFILE\x10r\x12\x15\n" +
	"\x11FILE_TYPE_PSDFILE\x10s\x12\x14\n" +
	"\x10FILE_TYPE_PSFILE\x10t\x12\x1a\n" +
	"\x16FILE_TYPE_PSPIMAGEFILE\x10u\x12\x15\n" +
	"\x11FILE_TYPE_PTSFILE\x10v\x12\x15\n" +
	"\x11FILE_TYPE_QXDFILE\x10w\x12\x15\n" +
	"\x11FILE_TYPE_QXPFILE\x10x\x12\x14\n" +
	"\x10FILE_TYPE_RAFILE\x10y\x12\x15\n" +
	"\x11FILE_TYPE_RARFILE\x10z\x12\x16\n" +
	"\x12FILE_TYPE_RELSFILE\x10{\x12\x14\n" +
	"\x10FILE_TYPE_RMFILE\x10|\x12\x15\n" +
	"\x11FILE_TYPE_ROMFILE\x10}\x12\x15\n" +
	"\x11FILE_TYPE_RSSFILE\x10~\x12\x15\n" +
	"\x11FILE_TYPE_RTFFILE\x10\x7f\x12\x16\n" +
	"\x11FILE_TYPE_SAVFILE\x10\x80\x01\x12\x16\n" +
	"\x11FILE_TYPE_SD2FILE\x10\x81\x01\x12\x16\n" +
	"\x11FILE_TYPE_SDFFILE\x10\x82\x01\x12\x16\n" +
	"\x11FILE_TYPE_SITFILE\x10\x83\x01\x12\x17\n" +
	"\x12FILE_TYPE_SITXFILE\x10\x84\x01\x12\x16\n" +
	"\x11FILE_TYPE_SQLFILE\x10\x85\x01\x12\x16\n" +
	"\x11FILE_TYPE_SVGFILE\x10\x86\x01\x12\x16\n" +
	"\x11FILE_TYPE_SWFFILE\x10\x87\x01\x12\x16\n" +
	"\x11FILE_TYPE_SYSFILE\x10\x88\x01\x12\x16\n" +
	"\x11FILE_TYPE_TARFILE\x10\x89\x01\x12\x18\n" +
	"\x13FILE_TYPE_TARGZFILE\x10\x8a\x01\x12\x16\n" +
	"\x11FILE_TYPE_THMFILE\x10\x8b\x01\x12\x16\n" +
	"\x11FILE_TYPE_TIFFILE\x10\x8c\x01\x12\x16\n" +
	"\x11FILE_TYPE_TMPFILE\x10\x8d\x01\x12\x18\n" +
	"\x13FILE_TYPE_TOASTFILE\x10\x8e\x01\x12\x16\n" +
	"\x11FILE_TYPE_TTFFILE\x10\x8f\x01\x12\x16\n" +
	"\x11FILE_TYPE_TXTFILE\x10\x90\x01\x12\x16\n" +
	"\x11FILE_TYPE_UUEFILE\x10\x91\x01\x12\x15\n" +
	"\x10FILE_TYPE_VBFILE\x10\x92\x01\x12\x16\n" +
	"\x11FILE_TYPE_VCDFILE\x10\x93\x01\x12\x16\n" +
	"\x11FILE_TYPE_VCFFILE\x10\x94\x01\x12\x16\n" +
	"\x11FILE_TYPE_VOBFILE\x10\x95\x01\x12\x16\n" +
	"\x11FILE_TYPE_WAVFILE\x10\x96\x01\x12\x16\n" +
	"\x11FILE_TYPE_WKSFILE\x10\x97\x01\x12\x16\n" +
	"\x11FILE_TYPE_WMAFILE\x10\x98\x01\x12\x16\n" +
	"\x11FILE_TYPE_WMVFILE\x10\x99\x01\x12\x16\n" +
	"\x11FILE_TYPE_WPDFILE\x10\x9a\x01\x12\x16\n" +
	"\x11FILE_TYPE_WPSFILE\x10\x9b\x01\x12\x16\n" +
	"\x11FILE_TYPE_WSFFILE\x10\x9c\x01\x12\x18\n" +
	"\x13FILE_TYPE_XHTMLFILE\x10\x9d\x01\x12\x16\n" +
	"\x11FILE_TYPE_XLLFILE\x10\x9e\x01\x12\x16\n" +
	"\x11FILE_TYPE_XLSFILE\x10\x9f\x01\x12\x17\n" +
	"\x12FILE_TYPE_XLSXFILE\x10\xa0\x01\x12\x16\n" +
	"\x11FILE_TYPE_XMLFILE\x10\xa1\x01\x12\x16\n" +
	"\x11FILE_TYPE_YUVFILE\x10\xa2\x01\x12\x16\n" +
	"\x11FILE_TYPE_ZIPFILE\x10\xa3\x01\x12\x17\n" +
	"\x12FILE_TYPE_ZIPXFILE\x10\xa4\x01*r\n" +
	"\x18FingerprintAlgorithmType\x12*\n" +
	"&FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&FINGERPRINT_ALGORITHM_TYPE_USERDEFINED\x10\x01*\xae\f\n" +
	"\x04Form\x12\x14\n" +
	"\x10FORM_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vFORM_ADAGIO\x10\x01\x12\x12\n" +
	"\x0eFORM_ALLEMANDE\x10\x02\x12\r\n" +
	"\tFORM_ARIA\x10\x03\x12\x10\n" +
	"\fFORM_ARTSONG\x10\x04\x12\x12\n" +
	"\x0eFORM_BAGATELLE\x10\x05\x12\x10\n" +
	"\fFORM_BALLADE\x10\x06\x12\x10\n" +
	"\fFORM_BALLATA\x10\a\x12\x13\n" +
	"\x0fFORM_BARCAROLLE\x10\b\x12\x0f\n" +
	"\vFORM_BOLERO\x10\t\x12\x0f\n" +
	"\vFORM_CANCAN\x10\n" +
	"\x12\x0e\n" +
	"\n" +
	"FORM_CANON\x10\v\x12\x10\n" +
	"\fFORM_CANTATA\x10\f\x12\x10\n" +
	"\fFORM_CANZONA\x10\r\x12\x10\n" +
	"\fFORM_CAPRICE\x10\x0e\x12\x0e\n" +
	"\n" +
	"FORM_CAROL\x10\x0f\x12\x11\n" +
	"\rFORM_CAVATINA\x10\x10\x12\x11\n" +
	"\rFORM_CHACONNE\x10\x11\x12\x10\n" +
	"\fFORM_CHANSON\x10\x12\x12\x11\n" +
	"\rFORM_CONCERTO\x10\x13\x12\x11\n" +
	"\rFORM_COURANTE\x10\x14\x12\x0e\n" +
	"\n" +
	"FORM_DANCE\x10\x15\x12\x15\n" +
	"\x11FORM_DIVERTIMENTO\x10\x16\x12\x0e\n" +
	"\n" +
	"FORM_DUMKA\x10\x17\x12\x11\n" +
	"\rFORM_ESTAMPIE\x10\x18\x12\x0e\n" +
	"\n" +
	"FORM_ETUDE\x10\x19\x12\x10\n" +
	"\fFORM_FANFARE\x10\x1a\x12\x10\n" +
	"\fFORM_FANTASY\x10\x1b\x12\x0e\n" +
	"\n" +
	"FORM_FUGUE\x10\x1c\x12\x10\n" +
	"\fFORM_FURIANT\x10\x1d\x12\x11\n" +
	"\rFORM_GALLIARD\x10\x1e\x12\x0e\n" +
	"\n" +
	"FORM_GIGUE\x10\x1f\x12\r\n" +
	"\tFORM_HYMN\x10 \x12\x16\n" +
	"\x12FORM_IMPROVISATION\x10!\x12\x12\n" +
	"\x0eFORM_INTERLUDE\x10\"\x12\x13\n" +
	"\x0fFORM_INTERMEZZO\x10#\x12\x0e\n" +
	"\n" +
	"FORM_LAUDE\x10$\x12\r\n" +
	"\tFORM_LIED\x10%\x12\x11\n" +
	"\rFORM_MADRIGAL\x10&\x12\x0e\n" +
	"\n" +
	"FORM_MARCH\x10'\x12\r\n" +
	"\tFORM_MASS\x10(\x12\x10\n" +
	"\fFORM_MAZURKA\x10)\x12\x10\n" +
	"\fFORM_MELODIE\x10*\x12\x10\n" +
	"\fFORM_MINIMAL\x10+\x12\x0f\n" +
	"\vFORM_MINUET\x10,\x12\x13\n" +
	"\x0fFORM_MOMENTFORM\x10-\x12\x0e\n" +
	"\n" +
	"FORM_MOTET\x10.\x12\x11\n" +
	"\rFORM_NOCTURNE\x10/\x12\x11\n" +
	"\rFORM_OVERTURE\x100\x12\x10\n" +
	"\fFORM_PARTITA\x101\x12\x14\n" +
	"\x10FORM_PASSACAGLIA\x102\x12\x0f\n" +
	"\vFORM_PAVANE\x103\x12\x18\n" +
	"\x14FORM_PERPETUUMMOBILE\x104\x12\x12\n" +
	"\x0eFORM_POLONAISE\x105\x12\x10\n" +
	"\fFORM_PRELUDE\x106\x12\r\n" +
	"\tFORM_RAGA\x107\x12\x11\n" +
	"\rFORM_RHAPSODY\x108\x12\x11\n" +
	"\rFORM_RICERCAR\x109\x12\x0e\n" +
	"\n" +
	"FORM_RONDO\x10:\x12\x13\n" +
	"\x0fFORM_SALTARELLO\x10;\x12\x12\n" +
	"\x0eFORM_SARABANDE\x10<\x12\x10\n" +
	"\fFORM_SCHERZO\x10=\x12\x11\n" +
	"\rFORM_SEQUENCE\x10>\x12\x11\n" +
	"\rFORM_SERENADE\x10?\x12\x1c\n" +
	"\x18FORM_SINFONIACONCERTANTE\x10@\x12\x0f\n" +
	"\vFORM_SONATA\x10A\x12\x11\n" +
	"\rFORM_SONATINA\x10B\x12\x0e\n" +
	"\n" +
	"FORM_SUITE\x10C\x12\x16\n" +
	"\x12FORM_SYMPHONICPOEM\x10D\x12\x11\n" +
	"\rFORM_SYMPHONY\x10E\x12\x13\n" +
	"\x0fFORM_TARANTELLA\x10F\x12\x0f\n" +
	"\vFORM_TIENTO\x10G\x12\x10\n" +
	"\fFORM_TOCCATA\x10H\x12\x12\n" +
	"\x0eFORM_VARIATION\x10I\x12\x11\n" +
	"\rFORM_VOCALISE\x10J\x12\x0e\n" +
	"\n" +
	"FORM_WALTZ\x10K\x12\x17\n" +
	"\x13FORM_TWELVEBARBLUES\x10L\x12\x16\n" +
	"\x12FORM_EIGHTBARBLUES\x10M\x12\x0f\n" +
	"\vFORM_BALLAD\x10N\x12\x14\n" +
	"\x10FORM_POWERBALLAD\x10O\x12\f\n" +
	"\bFORM_RAG\x10P\x12\x16\n" +
	"\x12FORM_RHYTHMCHANGES\x10Q\x12\x12\n" +
	"\x0eFORM_VERSEONLY\x10R\x12\x14\n" +
	"\x10FORM_USERDEFINED\x10S*~\n" +
	"\tFrameRate\x12\x1a\n" +
	"\x16FRAME_RATE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fFRAME_RATE_E_24\x10\x01\x12\x13\n" +
	"\x0fFRAME_RATE_E_25\x10\x02\x12\x16\n" +
	"\x12FRAME_RATE_E_29_97\x10\x03\x12\x13\n" +
	"\x0fFRAME_RATE_E_30\x10\x04*w\n" +
	"\x06Gender\x12\x16\n" +
	"\x12GENDER_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12GENDER_ANDROGYNOUS\x10\x01\x12\x13\n" +
	"\x0fGENDER_FEMININE\x10\x02\x12\x14\n" +
	"\x10GENDER_MASCULINE\x10\x03\x12\x12\n" +
	"\x0eGENDER_UNKNOWN\x10\x04*\xa5\x01\n" +
	"\x16GoverningAgreementType\x12(\n" +
	"$GOVERNING_AGREEMENT_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$GOVERNING_AGREEMENT_TYPE_USERDEFINED\x10\x01\x127\n" +
	"3GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT\x10\x02*\xf6\x04\n" +
	"\x14HashSumAlgorithmType\x12'\n" +
	"#HASH_SUM_ALGORITHM_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dHASH_SUM_ALGORITHM_TYPE_CRC32\x10\x01\x12\x1f\n" +
	"\x1bHASH_SUM_ALGORITHM_TYPE_MD2\x10\x02\x12\x1f\n" +
	"\x1bHASH_SUM_ALGORITHM_TYPE_MD4\x10\x03\x12%\n" +
	"!HASH_SUM_ALGORITHM_TYPE_MD4_MLNET\x10\x04\x12\x1f\n" +
	"\x1bHASH_SUM_ALGORITHM_TYPE_MD5\x10\x05\x12 \n" +
	"\x1cHASH_SUM_ALGORITHM_TYPE_MDC2\x10\x06\x12\"\n" +
	"\x1eHASH_SUM_ALGORITHM_TYPE_RMD160\x10\a\x12\x1f\n" +
	"\x1bHASH_SUM_ALGORITHM_TYPE_SHA\x10\b\x12 \n" +
	"\x1cHASH_SUM_ALGORITHM_TYPE_SHA1\x10\t\x12 \n" +
	"\x1cHASH_SUM_ALGORITHM_TYPE_SHA2\x10\n" +
	"\x12#\n" +
	"\x1fHASH_SUM_ALGORITHM_TYPE_SHA_224\x10\v\x12#\n" +
	"\x1fHASH_SUM_ALGORITHM_TYPE_SHA_256\x10\f\x12 \n" +
	"\x1cHASH_SUM_ALGORITHM_TYPE_SHA3\x10\r\x12#\n" +
	"\x1fHASH_SUM_ALGORITHM_TYPE_SHA_384\x10\x0e\x12#\n" +
	"\x1fHASH_SUM_ALGORITHM_TYPE_SHA_512\x10\x0f\x12'\n" +
	"#HASH_SUM_ALGORITHM_TYPE_USERDEFINED\x10\x10*\xfb\x01\n" +
	"\x0eImageCodecType\x12 \n" +
	"\x1cIMAGE_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14IMAGE_CODEC_TYPE_GIF\x10\x01\x12\x19\n" +
	"\x15IMAGE_CODEC_TYPE_JPEG\x10\x02\x12\x1d\n" +
	"\x19IMAGE_CODEC_TYPE_JPEG2000\x10\x03\x12\x18\n" +
	"\x14IMAGE_CODEC_TYPE_PNG\x10\x04\x12\x19\n" +
	"\x15IMAGE_CODEC_TYPE_TIFF\x10\x05\x12\x1c\n" +
	"\x18IMAGE_CODEC_TYPE_UNKNOWN\x10\x06\x12 \n" +
	"\x1cIMAGE_CODEC_TYPE_USERDEFINED\x10\a*\xc7\x03\n" +
	"\tImageType\x12\x1a\n" +
	"\x16IMAGE_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19IMAGE_TYPE_BACKCOVERIMAGE\x10\x01\x12\x1f\n" +
	"\x1bIMAGE_TYPE_BOOKLETBACKIMAGE\x10\x02\x12 \n" +
	"\x1cIMAGE_TYPE_BOOKLETFRONTIMAGE\x10\x03\x12\x1c\n" +
	"\x18IMAGE_TYPE_DOCUMENTIMAGE\x10\x04\x12\x1e\n" +
	"\x1aIMAGE_TYPE_FRONTCOVERIMAGE\x10\x05\x12\x13\n" +
	"\x0fIMAGE_TYPE_ICON\x10\x06\x12\x13\n" +
	"\x0fIMAGE_TYPE_LOGO\x10\a\x12\x19\n" +
	"\x15IMAGE_TYPE_PHOTOGRAPH\x10\b\x12\x15\n" +
	"\x11IMAGE_TYPE_POSTER\x10\t\x12\x18\n" +
	"\x14IMAGE_TYPE_TRAYIMAGE\x10\n" +
	"\x12\x16\n" +
	"\x12IMAGE_TYPE_UNKNOWN\x10\v\x12\x1a\n" +
	"\x16IMAGE_TYPE_USERDEFINED\x10\f\x12!\n" +
	"\x1dIMAGE_TYPE_VIDEOSCREENCAPTURE\x10\r\x12\x18\n" +
	"\x14IMAGE_TYPE_WALLPAPER\x10\x0e\x12\x17\n" +
	"\x13IMAGE_TYPE_PORTRAIT\x10\x0f*\x94\xb3\x01\n" +
	"\x0eInstrumentType\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_ACCORDION\x10\x01\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_BANDONEON\x10\x02\x12,\n" +
	"(INSTRUMENT_TYPE_CHROMATICBUTTONACCORDION\x10\x03\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_CONCERTINA\x10\x04\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CORDOVOX\x10\x05\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_MELODEON\x10\x06\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_MUSETTE\x10\a\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_PIANOACCORDION\x10\b\x12 \n" +
	"\x1cINSTRUMENT_TYPE_TOYACCORDION\x10\t\x12&\n" +
	"\"INSTRUMENT_TYPE_ACOUSTICBASSGUITAR\x10\n" +
	"\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_BABYBASS\x10\v\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_BASS\x10\f\x12&\n" +
	"\"INSTRUMENT_TYPE_ELECTRICBASSGUITAR\x10\r\x12&\n" +
	"\"INSTRUMENT_TYPE_FRETLESSBASSGUITAR\x10\x0e\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_PICCOLOBASS\x10\x0f\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_UPRIGHTBASS\x10\x10\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_WASHTUBBASS\x10\x11\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_DRUMMACHINE\x10\x12\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_BREAKBEAT\x10\x13\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_DRUMKIT\x10\x14\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_DRUMSAMPLE\x10\x15\x12-\n" +
	")INSTRUMENT_TYPE_E_12_STRINGELECTRICGUITAR\x10\x16\x12%\n" +
	"!INSTRUMENT_TYPE_E_12_STRINGGUITAR\x10\x17\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_ACOUSTICGUITAR\x10\x18\x12 \n" +
	"\x1cINSTRUMENT_TYPE_BAHIANGUITAR\x10\x19\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_BAJOSEXTO\x10\x1a\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_BARITONEGUITAR\x10\x1b\x12!\n" +
	"\x1dINSTRUMENT_TYPE_BAROQUEGUITAR\x10\x1c\x12 \n" +
	"\x1cINSTRUMENT_TYPE_CHAPMANSTICK\x10\x1d\x12%\n" +
	"!INSTRUMENT_TYPE_NYLONSTRINGGUITAR\x10\x1e\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_DOBROGUITAR\x10\x1f\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_ELECTRICGUITAR\x10 \x12!\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICSITAR\x10!\x12#\n" +
	"\x1fINSTRUMENT_TYPE_FRYINGPANGUITAR\x10\"\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_GUITAR\x10#\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_GUITARRON\x10$\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_LAPSTEELGUITAR\x10%\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_PEDABRO\x10&\x12$\n" +
	" INSTRUMENT_TYPE_PEDALSTEELGUITAR\x10'\x12$\n" +
	" INSTRUMENT_TYPE_PORTUGUESEGUITAR\x10(\x12%\n" +
	"!INSTRUMENT_TYPE_RENAISSANCEGUITAR\x10)\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_ROMANTICGUITAR\x10*\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_TENORGUITAR\x10+\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_TIPLE\x10,\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_TOUCHGUITAR\x10-\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_TRES\x10.\x12 \n" +
	"\x1cINSTRUMENT_TYPE_VIOLACAIPIRA\x10/\x12$\n" +
	" INSTRUMENT_TYPE_ACOUSTICKEYBOARD\x100\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_CELESTA\x101\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_CHAMBERLIN\x102\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_CLAVICHORD\x103\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CLAVINET\x104\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_DULCITONE\x105\x12!\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICPIANO\x106\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_HARPSICHORD\x107\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_KEYBOARD\x108\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_MELLOTRON\x109\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_OPTIGAN\x10:\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_PIANET\x10;\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_RHODES\x10<\x12#\n" +
	"\x1fINSTRUMENT_TYPE_SAMPLEDKEYBOARD\x10=\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_SPINET\x10>\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_VAKOORCHESTRON\x10?\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_VIRGINALS\x10@\x12!\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICORGAN\x10A\x12 \n" +
	"\x1cINSTRUMENT_TYPE_HAMMONDORGAN\x10B\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_LOWREYORGAN\x10C\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_ORGAN\x10D\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_PIPEORGAN\x10E\x12!\n" +
	"\x1dINSTRUMENT_TYPE_POSITIVEORGAN\x10F\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_PUMPORGAN\x10G\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_BARRELORGAN\x10H\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_BICYCLEPUMP\x10I\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_CHURCHBELLS\x10J\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_COMB\x10K\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_DICTOPHONE\x10L\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_HOHNERGUITARET\x10M\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_JEWSHARP\x10N\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_KAZOO\x10O\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_MUSICBOX\x10P\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_OMNICHORD\x10Q\x12#\n" +
	"\x1fINSTRUMENT_TYPE_OTHERINSTRUMENT\x10R\x12+\n" +
	"'INSTRUMENT_TYPE_SPECTRASONICSOMNISPHERE\x10S\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_TOYPIANO\x10T\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_TURNTABLE\x10U\x12%\n" +
	"!INSTRUMENT_TYPE_AFRICANPERCUSSION\x10V\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_AGOGOBELLS\x10W\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_ANGKLUNG\x10X\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_ANVIL\x10Y\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_ATUMPAN\x10Z\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_BALAFON\x10[\x12$\n" +
	" INSTRUMENT_TYPE_BASSDRUM_CONCERT\x10\\\x12!\n" +
	"\x1dINSTRUMENT_TYPE_BASSDRUM_KICK\x10]\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_BATA\x10^\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_BELLTREE\x10_\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_BENDIR\x10`\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_BERIMBAU\x10a\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_BINGHIDRUM\x10b\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_BODHRAN\x10c\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_BODYPERCUSSION\x10d\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_BOMBO\x10e\x12 \n" +
	"\x1cINSTRUMENT_TYPE_BOMBOLEGUERO\x10f\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_BONES\x10g\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_BONGOS\x10h\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_BOTTLES\x10i\x12'\n" +
	"#INSTRUMENT_TYPE_BRAZILIANPERCUSSION\x10j\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CABASA\x10k\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_CAIXA\x10l\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_CAJA\x10m\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_CAJON\x10n\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CALABASH\x10o\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CARILLON\x10p\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CASTANET\x10q\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CAXIXI\x10r\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CHIMES\x10s\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CHOCALHO\x10t\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_CLAPSTICK\x10u\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CLAVES\x10v\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_CLAYPOT\x10w\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CONGAS\x10x\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_COWBELL\x10y\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CROTALES\x10z\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_CUICA\x10{\x12 \n" +
	"\x1cINSTRUMENT_TYPE_CYMBAL_CRASH\x10|\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_CYMBAL_RIDE\x10}\x12$\n" +
	" INSTRUMENT_TYPE_CYMBAL_SUSPENDED\x10~\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_CYMBALS\x10\x7f\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_DAF\x10\x80\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DAMARU\x10\x81\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DAVUL\x10\x82\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DAYEREH\x10\x83\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_DEFI\x10\x84\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_DHOL\x10\x85\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DHOLAK\x10\x86\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DJEMBE\x10\x87\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DOHOL\x10\x88\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DOUMBEK\x10\x89\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DRUMSTICKS\x10\x8a\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DUGGI\x10\x8b\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DUNUN\x10\x8c\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ELEPHANTBELL\x10\x8d\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_FINGERCLICKS\x10\x8e\x01\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_FINGERCYMBALS\x10\x8f\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_FINGERSNAPS\x10\x90\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_FLEXATONE\x10\x91\x01\x12(\n" +
	"#INSTRUMENT_TYPE_FOLKLORICPERCUSSION\x10\x92\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_FOOTSTOMP\x10\x93\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_FROG\x10\x94\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GAMBANG\x10\x95\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GAMELAN\x10\x96\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GANGA\x10\x97\x01\x12#\n" +
	"\x1eINSTRUMENT_TYPE_GLASSHARMONICA\x10\x98\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_GLASSHARP\x10\x99\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_GLOCKENSPIEL\x10\x9a\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_GONG\x10\x9b\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_GUACHARACA\x10\x9c\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_GUACHE\x10\x9d\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GUIRA\x10\x9e\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GUIRO\x10\x9f\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_HANDBELLS\x10\xa0\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_HANDCHIMES\x10\xa1\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_HANDCLAPS\x10\xa2\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_HIHATCYMBAL\x10\xa3\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_JAMBLOCK\x10\xa4\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_JAWBONE\x10\xa5\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_JAWHARP\x10\xa6\x01\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_JUG\x10\xa7\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KANJIRA\x10\xa8\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KATSA\x10\xa9\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KENDANG\x10\xaa\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_KHAMAK\x10\xab\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KHARTAL\x10\xac\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KHOL\x10\xad\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_KHONGWONGLEK\x10\xae\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_KHONGWONGYAI\x10\xaf\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_KNUCKLES\x10\xb0\x01\x12$\n" +
	"\x1fINSTRUMENT_TYPE_LATINPERCUSSION\x10\xb1\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_LITHOPHONE\x10\xb2\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_LOKOLE\x10\xb3\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_MADAL\x10\xb4\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_MARACAS\x10\xb5\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_MARIMBA\x10\xb6\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_MARIMBAPHONE\x10\xb7\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MARIMBULA\x10\xb8\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_MAZHAR\x10\xb9\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KALIMBA\x10\xba\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_METALCANS\x10\xbb\x01\x12$\n" +
	"\x1fINSTRUMENT_TYPE_MOUTHPERCUSSION\x10\xbc\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MRIDANGAM\x10\xbd\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MUHARSING\x10\xbe\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_NAAL\x10\xbf\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_NAGARA\x10\xc0\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_OBOROMDRUM\x10\xc1\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_OCTOBAN\x10\xc2\x01\x12)\n" +
	"$INSTRUMENT_TYPE_ORCHESTRALPERCUSSION\x10\xc3\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_PADDLEDRUMS\x10\xc4\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PANDEIRO\x10\xc5\x01\x12)\n" +
	"$INSTRUMENT_TYPE_PERCUSSIONINSTRUMENT\x10\xc6\x01\x120\n" +
	"+INSTRUMENT_TYPE_PITCHEDPERCUSSIONINSTRUMENT\x10\xc7\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PONGLANG\x10\xc8\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_POTSANDPANS\x10\xc9\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_QARKABEB\x10\xca\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_RAINSTICK\x10\xcb\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_RANAT\x10\xcc\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_RATCHET\x10\xcd\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_RATTLE\x10\xce\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_RECORECO\x10\xcf\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_REPINIQUE\x10\xd0\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_RHYTHMSTICK\x10\xd1\x01\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_RIQ\x10\xd2\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_RNGA\x10\xd3\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_ROLMO\x10\xd4\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_ROTOTOMS\x10\xd5\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SABAR\x10\xd6\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SANDBLOCKS\x10\xd7\x01\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_SAW\x10\xd8\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SCRATCHER\x10\xd9\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SHAKER\x10\xda\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SHEKERE\x10\xdb\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SINGINGBOWLS\x10\xdc\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SISTRUM\x10\xdd\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SLAPSTICK\x10\xde\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SLEIGHBELLS\x10\xdf\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SNAREDRUM\x10\xe0\x01\x12'\n" +
	"\"INSTRUMENT_TYPE_SNAREDRUM_MARCHING\x10\xe1\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SPOONS\x10\xe2\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SPRINGDRUM\x10\xe3\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_STEELDRUMS\x10\xe4\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_STICKS\x10\xe5\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SURDO\x10\xe6\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_TAAL\x10\xe7\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TAARIJA\x10\xe8\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TABLA\x10\xe9\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TABOR\x10\xea\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TAIKO\x10\xeb\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_TALKINGDRUM\x10\xec\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TAMBORA\x10\xed\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TAMBORIM\x10\xee\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TAMBOURINE\x10\xef\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_TAONGAPUORO\x10\xf0\x01\x12#\n" +
	"\x1eINSTRUMENT_TYPE_TAR_PERCUSSION\x10\xf1\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TAROL\x10\xf2\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TEMPLEBELL\x10\xf3\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TEMPLEBLOCKS\x10\xf4\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_TENORDRUM\x10\xf5\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_THAVIL\x10\xf6\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_THUNDERSHEET\x10\xf7\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TIBETANBELLS\x10\xf8\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TIMBALES\x10\xf9\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_TIMBAU\x10\xfa\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TIMPANI\x10\xfb\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TINGSHA\x10\xfc\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_TOMPAK\x10\xfd\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_TOMS\x10\xfe\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TONGUEDRUM\x10\xff\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TRIANGLE\x10\x80\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TXALAPARTA\x10\x81\x02\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_UDU\x10\x82\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_ULIULI\x10\x83\x02\x122\n" +
	"-INSTRUMENT_TYPE_UNPITCHEDPERCUSSIONINSTRUMENT\x10\x84\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_URUMEE\x10\x85\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_VIBRAPHONE\x10\x86\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_VIBRASLAP\x10\x87\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_WASHBOARD\x10\x88\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_WATERPHONE\x10\x89\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_WINDCHIMES\x10\x8a\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WINDMACHINE\x10\x8b\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WOBBLEBOARD\x10\x8c\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_WOODBLOCK\x10\x8d\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_XYLOPHONE\x10\x8e\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_XYLORIMBA\x10\x8f\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_ZERBAGHALI\x10\x90\x02\x12#\n" +
	"\x1eINSTRUMENT_TYPE_ZYDECORUBBOARD\x10\x91\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_FORTEPIANO\x10\x92\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_GRANDPIANO\x10\x93\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_LUTHEAL\x10\x94\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_PIANO\x10\x95\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_PIANOHARP\x10\x96\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_PIANOLA\x10\x97\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_PREPAREDPIANO\x10\x98\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SQUAREPIANO\x10\x99\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_TACKPIANO\x10\x9a\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_UPRIGHTPIANO\x10\x9b\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ANIMALSOUNDS\x10\x9c\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_APPLAUSE\x10\x9d\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BIRDSONG\x10\x9e\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_CARSOUNDS\x10\x9f\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_CHATTER\x10\xa0\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_CHEWINGSOUNDS\x10\xa1\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GIZMO\x10\xa2\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_GUNSHOTS\x10\xa3\x02\x12+\n" +
	"&INSTRUMENT_TYPE_MAGNETICTAPETREATMENTS\x10\xa4\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_ORCHESTRALHIT\x10\xa5\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_RECORDNOISE\x10\xa6\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SIREN\x10\xa7\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SOUNDDESIGN\x10\xa8\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SOUNDEFFECTS\x10\xa9\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_TRAINSOUNDS\x10\xaa\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TREATMENTS\x10\xab\x02\x12(\n" +
	"#INSTRUMENT_TYPE_UNINTENDEDARTIFACTS\x10\xac\x02\x12$\n" +
	"\x1fINSTRUMENT_TYPE_E_5_STRINGBANJO\x10\xad\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_AFRICANHARP\x10\xae\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_ALTOVIOL\x10\xaf\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_ANDEANHARP\x10\xb0\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_ARCHLUTE\x10\xb1\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_AUTOHARP\x10\xb2\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BAGLAMA\x10\xb3\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BALALAIKA\x10\xb4\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BANDURA\x10\xb5\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BANDURRIA\x10\xb6\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_BANHU\x10\xb7\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_BANJO\x10\xb8\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BANJOGUITAR\x10\xb9\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BANJOLIN\x10\xba\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BAROQUECELLO\x10\xbb\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BAROQUEVIOLA\x10\xbc\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_BAROQUEVIOLIN\x10\xbd\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BARYTON\x10\xbe\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BASSBANJO\x10\xbf\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BASSCITTERN\x10\xc0\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BASSREBEC\x10\xc1\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BASSVIOL\x10\xc2\x02\x12#\n" +
	"\x1eINSTRUMENT_TYPE_BASSODABRACCIO\x10\xc3\x02\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_BIWA\x10\xc4\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BOUZOUKI\x10\xc5\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BOWEDSTRINGS\x10\xc6\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_BOZOQ\x10\xc7\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BUFOBASS\x10\xc8\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CAVAQUINHO\x10\xc9\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_CELLO\x10\xca\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CELLOBANJO\x10\xcb\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CELTICHARP\x10\xcc\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CHARANGO\x10\xcd\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CIMBALOM\x10\xce\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_CITOLE\x10\xcf\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_CITTERN\x10\xd0\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_CONCERTHARP\x10\xd1\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CRAVIOLA\x10\xd2\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_CRWTH\x10\xd3\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_CUATRO\x10\xd4\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_CUMBUS\x10\xd5\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DANBAU\x10\xd6\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_DANTRANH\x10\xd7\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DILRUBA\x10\xd8\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DOMBRA\x10\xd9\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DOMRA\x10\xda\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DOUBLEBASS\x10\xdb\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DOUBLEHARP\x10\xdc\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_DOUBLEVIOLIN\x10\xdd\x02\x12#\n" +
	"\x1eINSTRUMENT_TYPE_DOUBLEBASSVIOL\x10\xde\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DRANYEN\x10\xdf\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DUTAR\x10\xe0\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DZUDDAHORD\x10\xe1\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_EKTARA\x10\xe2\x02\x12*\n" +
	"%INSTRUMENT_TYPE_ELECTRIC6STRINGVIOLIN\x10\xe3\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICCELLO\x10\xe4\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ELECTRICHARP\x10\xe5\x02\x12%\n" +
	" INSTRUMENT_TYPE_ELECTRICMANDOLIN\x10\xe6\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICVIOLA\x10\xe7\x02\x12#\n" +
	"\x1eINSTRUMENT_TYPE_ELECTRICVIOLIN\x10\xe8\x02\x12.\n" +
	")INSTRUMENT_TYPE_ELECTROACOUSTICHURDYGURDY\x10\xe9\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_ENNANGA\x10\xea\x02\x12&\n" +
	"!INSTRUMENT_TYPE_EPINETTEDESVOSGES\x10\xeb\x02\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_ERHU\x10\xec\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_ESRAJ\x10\xed\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_FIDDLE\x10\xee\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_FOLKHARP\x10\xef\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GADULKA\x10\xf0\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_GARDON\x10\xf1\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_GAYAGEUM\x10\xf2\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_GHAYCHAK\x10\xf3\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GITTERN\x10\xf4\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GUQIN\x10\xf5\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GUSLI\x10\xf6\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GUZHENG\x10\xf7\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_HAEGEUM\x10\xf8\x02\x12%\n" +
	" INSTRUMENT_TYPE_HAMMEREDDULCIMER\x10\xf9\x02\x12$\n" +
	"\x1fINSTRUMENT_TYPE_HAMMEREDSTRINGS\x10\xfa\x02\x12$\n" +
	"\x1fINSTRUMENT_TYPE_HARDANGERFIDDLE\x10\xfb\x02\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_HARP\x10\xfc\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_HUAPANGUERA\x10\xfd\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_HURDYGURDY\x10\xfe\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_IRISHBOUZOUKI\x10\xff\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_JAKHAY\x10\x80\x03\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_JARANAJAROCHA\x10\x81\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_JINGHU\x10\x82\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_KACAPI\x10\x83\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KANTELE\x10\x84\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KANUN\x10\x85\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_KEMENCHE\x10\x86\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KHIM\x10\x87\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KORA\x10\x88\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KOTO\x10\x89\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KUGO\x10\x8a\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_LANGELEIK\x10\x8b\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_LAOUTO\x10\x8c\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_LEONA\x10\x8d\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_LIRONE\x10\x8e\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_LUTE\x10\x8f\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_LYRAVIOL\x10\x90\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_LYRE\x10\x91\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MANDOCELLO\x10\x92\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_MANDOLA\x10\x93\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MANDOLELE\x10\x94\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_MANDOLIN\x10\x95\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MANDOLINO\x10\x96\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_MANDORE\x10\x97\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MARXOPHONE\x10\x98\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_MEDIEVALFIDDLE\x10\x99\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_MEDIEVALHARP\x10\x9a\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MOHANVEENA\x10\x9b\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MUSICALBOW\x10\x9c\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_NGONI\x10\x9d\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_NJARKA\x10\x9e\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_NYATITI\x10\x9f\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_NYCKELHARPA\x10\xa0\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_ORGANISTRUM\x10\xa1\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_ORPHARION\x10\xa2\x03\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_OUD\x10\xa3\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_PANDURA\x10\xa4\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_PARAGUAYANHARP\x10\xa5\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_PHIN\x10\xa6\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_PHONOFIDDLE\x10\xa7\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_PIPA\x10\xa8\x03\x12$\n" +
	"\x1fINSTRUMENT_TYPE_PLUCKEDDULCIMER\x10\xa9\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_PLUCKEDSTRINGS\x10\xaa\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PSALTERY\x10\xab\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_RABEL\x10\xac\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_REBAB\x10\xad\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_REBEC\x10\xae\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SANTOOR\x10\xaf\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SARANGI\x10\xb0\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SAROD\x10\xb1\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SAUNG\x10\xb2\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_SAWDUANG\x10\xb3\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_SHAMISEN\x10\xb4\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SIMSIMIYYA\x10\xb5\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SINTIR\x10\xb6\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SITAR\x10\xb7\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SOPRANODOMRA\x10\xb8\x03\x12%\n" +
	" INSTRUMENT_TYPE_STRINGINSTRUMENT\x10\xb9\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_STROHLVIOLIN\x10\xba\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_SURBAHAR\x10\xbb\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SWARMANDAL\x10\xbc\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TAMBURA\x10\xbd\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TANBOUR\x10\xbe\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TANPURA\x10\xbf\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TAR_STRING\x10\xc0\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TENORBANJO\x10\xc1\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TENORREBEC\x10\xc2\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_TENORVIOL\x10\xc3\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_THEORBO\x10\xc4\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_TIMPLE\x10\xc5\x03\x12&\n" +
	"!INSTRUMENT_TYPE_TOGAMANGUITARVIOL\x10\xc6\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_TREBLEREBEC\x10\xc7\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TREBLEVIOL\x10\xc8\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TROMBAMARINA\x10\xc9\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TUMBI\x10\xca\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TZOURAS\x10\xcb\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_UKULELE\x10\xcc\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_VALIHA\x10\xcd\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_VEENA\x10\xce\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_VENEZUELANHARP\x10\xcf\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_VERACRUZHARP\x10\xd0\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_VITAR\x10\xd1\x03\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_VICHITRAVEENA\x10\xd2\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_VIELLE\x10\xd3\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_VIHUELA\x10\xd4\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_VIOL\x10\xd5\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_VIOLA\x10\xd6\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_VIOLADAMORE\x10\xd7\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_VIOLAPOMPOSA\x10\xd8\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_VIOLIN\x10\xd9\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_VIOLINOPICCOLO\x10\xda\x03\x12$\n" +
	"\x1fINSTRUMENT_TYPE_WELSHTRIPLEHARP\x10\xdb\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_WIRESTRUNGHARP\x10\xdc\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_XALAM\x10\xdd\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_YANGQIN\x10\xde\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_YAYLITAMBUR\x10\xdf\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_YOKIN\x10\xe0\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_YUEQIN\x10\xe1\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_ZEZE\x10\xe2\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_ZHONGHU\x10\xe3\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_ZITHER\x10\xe4\x03\x12&\n" +
	"!INSTRUMENT_TYPE_ARPEGGIATINGSYNTH\x10\xe5\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SYNTHBASS\x10\xe6\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SYNTHBRASS\x10\xe7\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SYNTHCHOIR\x10\xe8\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SYNTHFX\x10\xe9\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SYNTHLEAD\x10\xea\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_SYNTHPAD\x10\xeb\x03\x12$\n" +
	"\x1fINSTRUMENT_TYPE_SYNTHSTEELDRUMS\x10\xec\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SYNTHSTRINGS\x10\xed\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SYNTHESIZER\x10\xee\x03\x12-\n" +
	"(INSTRUMENT_TYPE_GROUPBACKGROUNDVOCALISTS\x10\xef\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BOYVOICE\x10\xf0\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CHILDVOICE\x10\xf1\x03\x120\n" +
	"+INSTRUMENT_TYPE_CHILDRENSBACKGROUNDVOCALIST\x10\xf2\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_FEMALEVOICE\x10\xf3\x03\x12-\n" +
	"(INSTRUMENT_TYPE_FEMALEBACKGROUNDVOCALIST\x10\xf4\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_GIRLVOICE\x10\xf5\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_LEADVOCALIST\x10\xf6\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MALEVOICE\x10\xf7\x03\x12+\n" +
	"&INSTRUMENT_TYPE_MALEBACKGROUNDVOCALIST\x10\xf8\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MIXEDVOICE\x10\xf9\x03\x12,\n" +
	"'INSTRUMENT_TYPE_MIXEDBACKGROUNDVOCALIST\x10\xfa\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_NEUTRALVOICE\x10\xfb\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_ALBOKA\x10\xfc\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_ALPENHORN\x10\xfd\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ALTOCLARINET\x10\xfe\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ALTOCRUMHORN\x10\xff\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_ALTOFLUTE\x10\x80\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_ALTOHORN\x10\x81\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ALTORECORDER\x10\x82\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_ALTOSACKBUT\x10\x83\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_ALTOSAXOPHONE\x10\x84\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_ALTOSHAWM\x10\x85\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ALTOTROMBONE\x10\x86\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_APITO\x10\x87\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_ARGHUL\x10\x88\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_AULOCHROME\x10\x89\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BAGPIPES\x10\x8a\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BANSURI\x10\x8b\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BARITONEHORN\x10\x8c\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BARITONEOBOE\x10\x8d\x04\x12&\n" +
	"!INSTRUMENT_TYPE_BARITONESAXOPHONE\x10\x8e\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_BAROQUEBASSOON\x10\x8f\x04\x12$\n" +
	"\x1fINSTRUMENT_TYPE_BAROQUECLARINET\x10\x90\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BAROQUEFLUTE\x10\x91\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BAROQUEOBOE\x10\x92\x04\x12$\n" +
	"\x1fINSTRUMENT_TYPE_BAROQUERECORDER\x10\x93\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BASSCLARINET\x10\x94\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BASSDULCIAN\x10\x95\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BASSFLUTE\x10\x96\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_BASSHARMONICA\x10\x97\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BASSRECORDER\x10\x98\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BASSSACKBUT\x10\x99\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_BASSSAXOPHONE\x10\x9a\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BASSSHAWM\x10\x9b\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BASSTROMBONE\x10\x9c\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BASSTRUMPET\x10\x9d\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BASSTUBA\x10\x9e\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_BASSETCLARINET\x10\x9f\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_BASSETHORN\x10\xa0\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BASSOON\x10\xa1\x04\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_BAWU\x10\xa2\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BIRDWHISTLE\x10\xa3\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BOMBARD\x10\xa4\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_BOSUNSWHISTLE\x10\xa5\x04\x12$\n" +
	"\x1fINSTRUMENT_TYPE_BRASSINSTRUMENT\x10\xa6\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_BUGLE\x10\xa7\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CALLIOPE\x10\xa8\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_CHALUMEAU\x10\xa9\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CHROMATICHARMONICA\x10\xaa\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CIMBASSO\x10\xab\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CLARINET\x10\xac\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_CLARINOTRUMPET\x10\xad\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CONCHSHELL\x10\xae\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CONTRAALTOCLARINET\x10\xaf\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CONTRABASSCLARINET\x10\xb0\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CONTRABASSRECORDER\x10\xb1\x04\x12+\n" +
	"&INSTRUMENT_TYPE_CONTRABASSSARRUSOPHONE\x10\xb2\x04\x12(\n" +
	"#INSTRUMENT_TYPE_CONTRABASSSAXOPHONE\x10\xb3\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CONTRABASSTROMBONE\x10\xb4\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_CONTRABASSOON\x10\xb5\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_CORNET\x10\xb6\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CORNETTO\x10\xb7\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CRUMHORN\x10\xb8\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DAEGEUM\x10\xb9\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DIDGERIDOO\x10\xba\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DIPLE\x10\xbb\x04\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_DIZI\x10\xbc\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DUDUK\x10\xbd\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DULCIAN\x10\xbe\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_DUNGCHEN\x10\xbf\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_ENGLISHHORN\x10\xc0\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_EUPHONIUM\x10\xc1\x04\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_FIFE\x10\xc2\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_FISCORN\x10\xc3\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_FLABIOL\x10\xc4\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_FLAGEOLET\x10\xc5\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_FLOYERA\x10\xc6\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_FLUGELHORN\x10\xc7\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_FLUTE\x10\xc8\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_FRENCHHORN\x10\xc9\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_FUJARA\x10\xca\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GASBA\x10\xcb\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_GEMSHORN\x10\xcc\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_GERMANFLUTE\x10\xcd\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_GHAITA\x10\xce\x04\x12&\n" +
	"!INSTRUMENT_TYPE_GREATBASSRECORDER\x10\xcf\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_GUANZI\x10\xd0\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GYALING\x10\xd1\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_HARMONICA\x10\xd2\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_HECKELPHONE\x10\xd3\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_HELICON\x10\xd4\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_HERALDTRUMPET\x10\xd5\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_HIGHLANDPIPES\x10\xd6\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_HOTFOUNTAINPEN\x10\xd7\x04\x12$\n" +
	"\x1fINSTRUMENT_TYPE_IRISHLOWWHISTLE\x10\xd8\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_JAGDHORN\x10\xd9\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KAVAL\x10\xda\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_KEYEDTRUMPET\x10\xdb\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KHENE\x10\xdc\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KHLUI\x10\xdd\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_LAUNEDDAS\x10\xde\x04\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_LUR\x10\xdf\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MELLOPHONE\x10\xe0\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_MELODICA\x10\xe1\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_MIJWIZ\x10\xe2\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_MINIATUREKHENE\x10\xe3\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_MIZMAR\x10\xe4\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MOUTHORGAN\x10\xe5\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_NADASWARAM\x10\xe6\x04\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_NAI\x10\xe7\x04\x12(\n" +
	"#INSTRUMENT_TYPE_NATIVEAMERICANFLUTE\x10\xe8\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_NATURALHORN\x10\xe9\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_NATURALTRUMPET\x10\xea\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_NEYFLUTE\x10\xeb\x04\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_OBOE\x10\xec\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_OBOEDAMORE\x10\xed\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_OBOEDACACCIA\x10\xee\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_OCARINA\x10\xef\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_OPHICLEIDE\x10\xf0\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_PAIXIAO\x10\xf1\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PANFLUTE\x10\xf2\x04\x12\x17\n" +
	"\x12INSTRUMENT_TYPE_PI\x10\xf3\x04\x12$\n" +
	"\x1fINSTRUMENT_TYPE_PICCOLOCLARINET\x10\xf4\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_PICCOLOFLUTE\x10\xf5\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_PICCOLOTRUMPET\x10\xf6\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PINKILLU\x10\xf7\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_POCKETTRUMPET\x10\xf8\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_POLICEWHISTLE\x10\xf9\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_POSTHORN\x10\xfa\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_PUNGI\x10\xfb\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_QUENA\x10\xfc\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_QUENACHO\x10\xfd\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_RACKETT\x10\xfe\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_RAUSCHPFEIFE\x10\xff\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_RECORDER\x10\x80\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_REEDINSTRUMENT\x10\x81\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_REGAL\x10\x82\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_RONDADOR\x10\x83\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SACKBUT\x10\x84\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SARRUSOPHONE\x10\x85\x05\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SAXOPHONE\x10\x86\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SERPENT\x10\x87\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SHAKUHACHI\x10\x88\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SHAWM\x10\x89\x05\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SHENAI\x10\x8a\x05\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SHELLTONE\x10\x8b\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SHENG\x10\x8c\x05\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_SHO\x10\x8d\x05\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SHOFAR\x10\x8e\x05\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SHRUTIBOX\x10\x8f\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SHVIWHISTLE\x10\x90\x05\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_SIKU\x10\x91\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_SLIDESAXOPHONE\x10\x92\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SLIDETRUMPET\x10\x93\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SLIDEWHISTLE\x10\x94\x05\x12&\n" +
	"!INSTRUMENT_TYPE_SOPRANINORECORDER\x10\x95\x05\x12'\n" +
	"\"INSTRUMENT_TYPE_SOPRANINOSAXOPHONE\x10\x96\x05\x12$\n" +
	"\x1fINSTRUMENT_TYPE_SOPRANOCLARINET\x10\x97\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_SOPRANOCORNET\x10\x98\x05\x12$\n" +
	"\x1fINSTRUMENT_TYPE_SOPRANOCRUMHORN\x10\x99\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_SOPRANODULCIAN\x10\x9a\x05\x12$\n" +
	"\x1fINSTRUMENT_TYPE_SOPRANORECORDER\x10\x9b\x05\x12%\n" +
	" INSTRUMENT_TYPE_SOPRANOSAXOPHONE\x10\x9c\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SOPRANOSHAWM\x10\x9d\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_SOPRANOTRUMPET\x10\x9e\x05\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SORDUN\x10\x9f\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SOUSAPHONE\x10\xa0\x05\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SULING\x10\xa1\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SUONA\x10\xa2\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TARKA\x10\xa3\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TAROGATO\x10\xa4\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_TENORCRUMHORN\x10\xa5\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TENORDULCIAN\x10\xa6\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TENORFLUTE\x10\xa7\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_TENORRECORDER\x10\xa8\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TENORSACKBUT\x10\xa9\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_TENORSAXOPHONE\x10\xaa\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TENORSHAWM\x10\xab\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_TENORTROMBONE\x10\xac\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TINWHISTLE\x10\xad\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TROMBONE\x10\xae\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TRUMPET\x10\xaf\x05\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_TUBA\x10\xb0\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TUSSELFLOYTE\x10\xb1\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_UILLEANPIPES\x10\xb2\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_VALVETROMBONE\x10\xb3\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_VUVUZELA\x10\xb4\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_WAGNERTUBA\x10\xb5\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WILLOWFLUTE\x10\xb6\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_WINDINSTRUMENT\x10\xb7\x05\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_WOODFLUTE\x10\xb8\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WOODTRUMPET\x10\xb9\x05\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_WOT\x10\xba\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_XAPHOON\x10\xbb\x05\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_XIAO\x10\xbc\x05\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_XUN\x10\xbd\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_ZUMMARA\x10\xbe\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_ZURNA\x10\xbf\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_CHOIR\x10\xc0\x05\x12&\n" +
	"!INSTRUMENT_TYPE_PERCUSSIONSECTION\x10\xc1\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_STRINGSECTION\x10\xc2\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WINDSECTION\x10\xc3\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_USERDEFINED\x10\xc4\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_VOICE\x10\xc5\x05*\xcb\xc8\x01\n" +
	"\x18Iso639Part12LanguageCode\x12+\n" +
	"'ISO639_PART12_LANGUAGE_CODE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AA\x10\x01\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AAR\x10\x02\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AB\x10\x03\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ABK\x10\x04\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AE\x10\x05\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AVE\x10\x06\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AF\x10\a\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AFR\x10\b\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AK\x10\t\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AKA\x10\n" +
	"\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AM\x10\v\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AMH\x10\f\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AN\x10\r\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARG\x10\x0e\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AR\x10\x0f\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARA\x10\x10\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AS\x10\x11\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ASM\x10\x12\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AV\x10\x13\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AVA\x10\x14\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AY\x10\x15\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AYM\x10\x16\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AZ\x10\x17\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AZE\x10\x18\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BA\x10\x19\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAK\x10\x1a\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BE\x10\x1b\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BEL\x10\x1c\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BG\x10\x1d\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BUL\x10\x1e\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BH\x10\x1f\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BIH\x10 \x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BI\x10!\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BIS\x10\"\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BM\x10#\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAM\x10$\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BN\x10%\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BEN\x10&\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BO\x10'\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BOD\x10(\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BR\x10)\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BRE\x10*\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BS\x10+\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BOS\x10,\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CA\x10-\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAT\x10.\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CE\x10/\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHE\x100\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CH\x101\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHA\x102\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CO\x103\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_COS\x104\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CR\x105\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CRE\x106\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CS\x107\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CES\x108\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CU\x109\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHU\x10:\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CV\x10;\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHV\x10<\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CY\x10=\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CYM\x10>\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_DA\x10?\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DAN\x10@\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_DE\x10A\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DEU\x10B\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_DV\x10C\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DIV\x10D\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_DZ\x10E\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DZO\x10F\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EE\x10G\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EWE\x10H\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EL\x10I\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ELL\x10J\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EN\x10K\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ENG\x10L\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EO\x10M\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EPO\x10N\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ES\x10O\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SPA\x10P\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ET\x10Q\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EST\x10R\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EU\x10S\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EUS\x10T\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FA\x10U\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FAS\x10V\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FF\x10W\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FUL\x10X\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FI\x10Y\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FIN\x10Z\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FJ\x10[\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FIJ\x10\\\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FO\x10]\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FAO\x10^\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FR\x10_\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRA\x10`\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FY\x10a\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRY\x10b\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GA\x10c\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GLE\x10d\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GD\x10e\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GLA\x10f\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GL\x10g\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GLG\x10h\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GN\x10i\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GRN\x10j\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GU\x10k\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GUJ\x10l\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GV\x10m\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GLV\x10n\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HA\x10o\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HAU\x10p\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HE\x10q\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HEB\x10r\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HI\x10s\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HIN\x10t\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HO\x10u\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HMO\x10v\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HR\x10w\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HRV\x10x\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HT\x10y\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HAT\x10z\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HU\x10{\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HUN\x10|\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HY\x10}\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HYE\x10~\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HZ\x10\x7f\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HER\x10\x80\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IA\x10\x81\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_INA\x10\x82\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ID\x10\x83\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IND\x10\x84\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IE\x10\x85\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ILE\x10\x86\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IG\x10\x87\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IBO\x10\x88\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_II\x10\x89\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_III\x10\x8a\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IK\x10\x8b\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IPK\x10\x8c\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IO\x10\x8d\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IDO\x10\x8e\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IS\x10\x8f\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ISL\x10\x90\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IT\x10\x91\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ITA\x10\x92\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IU\x10\x93\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IKU\x10\x94\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_JA\x10\x95\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JPN\x10\x96\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_JV\x10\x97\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JAV\x10\x98\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KA\x10\x99\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAT\x10\x9a\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KG\x10\x9b\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KON\x10\x9c\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KI\x10\x9d\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KIK\x10\x9e\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KJ\x10\x9f\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KUA\x10\xa0\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KK\x10\xa1\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAZ\x10\xa2\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KL\x10\xa3\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAL\x10\xa4\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KM\x10\xa5\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KHM\x10\xa6\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KN\x10\xa7\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAN\x10\xa8\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KO\x10\xa9\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KOR\x10\xaa\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KR\x10\xab\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAU\x10\xac\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KS\x10\xad\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAS\x10\xae\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KU\x10\xaf\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KUR\x10\xb0\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KV\x10\xb1\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KOM\x10\xb2\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KW\x10\xb3\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_COR\x10\xb4\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KY\x10\xb5\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KIR\x10\xb6\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LA\x10\xb7\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAT\x10\xb8\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LB\x10\xb9\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LTZ\x10\xba\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LG\x10\xbb\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUG\x10\xbc\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LI\x10\xbd\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LIM\x10\xbe\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LN\x10\xbf\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LIN\x10\xc0\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LO\x10\xc1\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAO\x10\xc2\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LT\x10\xc3\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LIT\x10\xc4\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LU\x10\xc5\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUB\x10\xc6\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LV\x10\xc7\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAV\x10\xc8\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MG\x10\xc9\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MLG\x10\xca\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MH\x10\xcb\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAH\x10\xcc\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MI\x10\xcd\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MRI\x10\xce\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MK\x10\xcf\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MKD\x10\xd0\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ML\x10\xd1\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAL\x10\xd2\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MN\x10\xd3\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MON\x10\xd4\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MO\x10\xd5\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MR\x10\xd6\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAR\x10\xd7\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MS\x10\xd8\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MSA\x10\xd9\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MT\x10\xda\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MLT\x10\xdb\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MY\x10\xdc\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MYA\x10\xdd\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NA\x10\xde\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAU\x10\xdf\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NB\x10\xe0\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NOB\x10\xe1\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ND\x10\xe2\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NDE\x10\xe3\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NE\x10\xe4\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NEP\x10\xe5\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NG\x10\xe6\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NDO\x10\xe7\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NL\x10\xe8\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NLD\x10\xe9\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NN\x10\xea\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NNO\x10\xeb\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NO\x10\xec\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NOR\x10\xed\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NR\x10\xee\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NBL\x10\xef\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NV\x10\xf0\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAV\x10\xf1\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NY\x10\xf2\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NYA\x10\xf3\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OC\x10\xf4\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OCI\x10\xf5\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OJ\x10\xf6\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OJI\x10\xf7\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OM\x10\xf8\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ORM\x10\xf9\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OR\x10\xfa\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ORI\x10\xfb\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OS\x10\xfc\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OSS\x10\xfd\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PA\x10\xfe\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAN\x10\xff\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PI\x10\x80\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PLI\x10\x81\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PL\x10\x82\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_POL\x10\x83\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PS\x10\x84\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PUS\x10\x85\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PT\x10\x86\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_POR\x10\x87\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_QU\x10\x88\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QUE\x10\x89\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RM\x10\x8a\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ROH\x10\x8b\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RN\x10\x8c\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RUN\x10\x8d\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RO\x10\x8e\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RON\x10\x8f\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RU\x10\x90\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RUS\x10\x91\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RW\x10\x92\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KIN\x10\x93\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SA\x10\x94\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAN\x10\x95\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SC\x10\x96\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SRD\x10\x97\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SD\x10\x98\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SND\x10\x99\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SE\x10\x9a\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SME\x10\x9b\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SG\x10\x9c\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAG\x10\x9d\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SI\x10\x9e\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SIN\x10\x9f\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SK\x10\xa0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SLK\x10\xa1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SL\x10\xa2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SLV\x10\xa3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SM\x10\xa4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMO\x10\xa5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SN\x10\xa6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SNA\x10\xa7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SO\x10\xa8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SOM\x10\xa9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SQ\x10\xaa\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SQI\x10\xab\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SR\x10\xac\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SRP\x10\xad\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SS\x10\xae\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SSW\x10\xaf\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ST\x10\xb0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SOT\x10\xb1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SU\x10\xb2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SUN\x10\xb3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SV\x10\xb4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SWE\x10\xb5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SW\x10\xb6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SWA\x10\xb7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TA\x10\xb8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TAM\x10\xb9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TE\x10\xba\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TEL\x10\xbb\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TG\x10\xbc\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TGK\x10\xbd\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TH\x10\xbe\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_THA\x10\xbf\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TI\x10\xc0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TIR\x10\xc1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TK\x10\xc2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUK\x10\xc3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TL\x10\xc4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TGL\x10\xc5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TN\x10\xc6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TSN\x10\xc7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TO\x10\xc8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TON\x10\xc9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TR\x10\xca\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUR\x10\xcb\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TS\x10\xcc\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TSO\x10\xcd\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TT\x10\xce\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TAT\x10\xcf\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TW\x10\xd0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TWI\x10\xd1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TY\x10\xd2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TAH\x10\xd3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_UG\x10\xd4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UIG\x10\xd5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_UK\x10\xd6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UKR\x10\xd7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_UR\x10\xd8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_URD\x10\xd9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_UZ\x10\xda\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UZB\x10\xdb\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_VE\x10\xdc\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VEN\x10\xdd\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_VI\x10\xde\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VIE\x10\xdf\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_VO\x10\xe0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VOL\x10\xe1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_WA\x10\xe2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WLN\x10\xe3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_WO\x10\xe4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WOL\x10\xe5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_XH\x10\xe6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_XHO\x10\xe7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_YI\x10\xe8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YID\x10\xe9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_YO\x10\xea\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YOR\x10\xeb\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ZA\x10\xec\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZHA\x10\xed\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ZH\x10\xee\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZHO\x10\xef\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ZU\x10\xf0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZUL\x10\xf1\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ACE\x10\xf2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ACH\x10\xf3\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ADA\x10\xf4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ADY\x10\xf5\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AFA\x10\xf6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AFH\x10\xf7\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AIN\x10\xf8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AKK\x10\xf9\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ALE\x10\xfa\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ALG\x10\xfb\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ALT\x10\xfc\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ANG\x10\xfd\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ANP\x10\xfe\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_APA\x10\xff\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARC\x10\x80\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARN\x10\x81\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARP\x10\x82\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ART\x10\x83\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARW\x10\x84\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AST\x10\x85\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ATH\x10\x86\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AUS\x10\x87\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AWA\x10\x88\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAD\x10\x89\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAI\x10\x8a\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAL\x10\x8b\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAN\x10\x8c\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAS\x10\x8d\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAT\x10\x8e\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BEJ\x10\x8f\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BEM\x10\x90\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BER\x10\x91\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BGC\x10\x92\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BHO\x10\x93\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BIK\x10\x94\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BIN\x10\x95\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BLA\x10\x96\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BNT\x10\x97\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BRA\x10\x98\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BTK\x10\x99\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BUA\x10\x9a\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BUG\x10\x9b\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BYN\x10\x9c\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAD\x10\x9d\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAI\x10\x9e\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAR\x10\x9f\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAU\x10\xa0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CEB\x10\xa1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CEL\x10\xa2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHB\x10\xa3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHG\x10\xa4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHK\x10\xa5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHM\x10\xa6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHN\x10\xa7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHO\x10\xa8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHP\x10\xa9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHR\x10\xaa\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHY\x10\xab\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CMC\x10\xac\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CNR\x10\xad\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_COP\x10\xae\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CPE\x10\xaf\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CPF\x10\xb0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CPP\x10\xb1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CRH\x10\xb2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CRP\x10\xb3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CSB\x10\xb4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CUS\x10\xb5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DAK\x10\xb6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DAR\x10\xb7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DAY\x10\xb8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DEL\x10\xb9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DEN\x10\xba\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DGR\x10\xbb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DIN\x10\xbc\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DOI\x10\xbd\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DRA\x10\xbe\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DSB\x10\xbf\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DUA\x10\xc0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DUM\x10\xc1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DYU\x10\xc2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EFI\x10\xc3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EGY\x10\xc4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EKA\x10\xc5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ELX\x10\xc6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ENM\x10\xc7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EWO\x10\xc8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FAN\x10\xc9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FAT\x10\xca\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FIL\x10\xcb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FIU\x10\xcc\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FON\x10\xcd\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRM\x10\xce\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRO\x10\xcf\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRR\x10\xd0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRS\x10\xd1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FUR\x10\xd2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GAA\x10\xd3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GAY\x10\xd4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GBA\x10\xd5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GEM\x10\xd6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GEZ\x10\xd7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GIL\x10\xd8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GMH\x10\xd9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GOH\x10\xda\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GON\x10\xdb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GOR\x10\xdc\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GOT\x10\xdd\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GRB\x10\xde\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GRC\x10\xdf\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GSW\x10\xe0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GWI\x10\xe1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HAI\x10\xe2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HAW\x10\xe3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HIL\x10\xe4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HIM\x10\xe5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HIT\x10\xe6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HMN\x10\xe7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HSB\x10\xe8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HUP\x10\xe9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IBA\x10\xea\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IJO\x10\xeb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ILO\x10\xec\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_INC\x10\xed\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_INE\x10\xee\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_INH\x10\xef\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IRA\x10\xf0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IRO\x10\xf1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JBO\x10\xf2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JPR\x10\xf3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JRB\x10\xf4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAA\x10\xf5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAB\x10\xf6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAC\x10\xf7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAM\x10\xf8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAR\x10\xf9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAW\x10\xfa\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KBD\x10\xfb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KHA\x10\xfc\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KHI\x10\xfd\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KHO\x10\xfe\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KMB\x10\xff\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KOK\x10\x80\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KOS\x10\x81\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KPE\x10\x82\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KRC\x10\x83\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KRL\x10\x84\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KRO\x10\x85\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KRU\x10\x86\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KUM\x10\x87\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KUT\x10\x88\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAD\x10\x89\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAH\x10\x8a\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAM\x10\x8b\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LEZ\x10\x8c\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LOL\x10\x8d\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LOZ\x10\x8e\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUA\x10\x8f\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUI\x10\x90\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUN\x10\x91\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUO\x10\x92\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUS\x10\x93\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAD\x10\x94\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAG\x10\x95\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAI\x10\x96\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAK\x10\x97\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAN\x10\x98\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAP\x10\x99\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAS\x10\x9a\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MDF\x10\x9b\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MDR\x10\x9c\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MEN\x10\x9d\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MGA\x10\x9e\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MIC\x10\x9f\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MIN\x10\xa0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MIS\x10\xa1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MKH\x10\xa2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MNC\x10\xa3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MNI\x10\xa4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MNO\x10\xa5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MOH\x10\xa6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MOS\x10\xa7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MUL\x10\xa8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MUN\x10\xa9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MUS\x10\xaa\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MWL\x10\xab\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MWR\x10\xac\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MYN\x10\xad\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MYV\x10\xae\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAH\x10\xaf\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAI\x10\xb0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAP\x10\xb1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NDS\x10\xb2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NEW\x10\xb3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NIA\x10\xb4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NIC\x10\xb5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NIU\x10\xb6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NOG\x10\xb7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NON\x10\xb8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NQO\x10\xb9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NSO\x10\xba\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NUB\x10\xbb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NWC\x10\xbc\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NYM\x10\xbd\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NYN\x10\xbe\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NYO\x10\xbf\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NZI\x10\xc0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OSA\x10\xc1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OTA\x10\xc2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OTO\x10\xc3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAA\x10\xc4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAG\x10\xc5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAL\x10\xc6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAM\x10\xc7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAP\x10\xc8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAU\x10\xc9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PEO\x10\xca\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PHI\x10\xcb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PHN\x10\xcc\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PON\x10\xcd\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PRA\x10\xce\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PRO\x10\xcf\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQA\x10\xd0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQB\x10\xd1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQC\x10\xd2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQD\x10\xd3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQE\x10\xd4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQF\x10\xd5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQG\x10\xd6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQH\x10\xd7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQI\x10\xd8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQJ\x10\xd9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RAJ\x10\xda\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RAP\x10\xdb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RAR\x10\xdc\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ROA\x10\xdd\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ROM\x10\xde\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RUP\x10\xdf\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAD\x10\xe0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAH\x10\xe1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAI\x10\xe2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAL\x10\xe3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAM\x10\xe4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAS\x10\xe5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAT\x10\xe6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SCN\x10\xe7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SCO\x10\xe8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SEL\x10\xe9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SEM\x10\xea\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SGA\x10\xeb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SGN\x10\xec\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SHN\x10\xed\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SID\x10\xee\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SIO\x10\xef\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SIT\x10\xf0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SLA\x10\xf1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMA\x10\xf2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMI\x10\xf3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMJ\x10\xf4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMN\x10\xf5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMS\x10\xf6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SNK\x10\xf7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SOG\x10\xf8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SON\x10\xf9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SRN\x10\xfa\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SRR\x10\xfb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SSA\x10\xfc\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SUK\x10\xfd\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SUS\x10\xfe\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SUX\x10\xff\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SYC\x10\x80\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SYR\x10\x81\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TAI\x10\x82\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TEM\x10\x83\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TER\x10\x84\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TET\x10\x85\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TIG\x10\x86\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TIV\x10\x87\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TKL\x10\x88\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TLH\x10\x89\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TLI\x10\x8a\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TMH\x10\x8b\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TOG\x10\x8c\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TPI\x10\x8d\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TSI\x10\x8e\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUM\x10\x8f\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUP\x10\x90\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUT\x10\x91\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TVL\x10\x92\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TYV\x10\x93\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UDM\x10\x94\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UGA\x10\x95\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UMB\x10\x96\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UND\x10\x97\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VAI\x10\x98\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VOT\x10\x99\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WAK\x10\x9a\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WAL\x10\x9b\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WAR\x10\x9c\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WAS\x10\x9d\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WEN\x10\x9e\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_XAL\x10\x9f\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YAO\x10\xa0\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YAP\x10\xa1\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YPK\x10\xa2\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZAP\x10\xa3\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZBL\x10\xa4\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZEN\x10\xa5\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZGH\x10\xa6\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZND\x10\xa7\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZUN\x10\xa8\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZXX\x10\xa9\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZZA\x10\xaa\x05*i\n" +
	"\x17Iso639Part3LanguageCode\x12*\n" +
	"&ISO639_PART3_LANGUAGE_CODE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_AAA\x10\x01*\xed\"\n" +
	"\x0fIsoCurrencyCode\x12!\n" +
	"\x1dISO_CURRENCY_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AED\x10\x01\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AFN\x10\x02\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ALL\x10\x03\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AMD\x10\x04\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ANG\x10\x05\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AOA\x10\x06\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ARS\x10\a\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AUD\x10\b\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AWG\x10\t\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AZN\x10\n" +
	"\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BAM\x10\v\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BBD\x10\f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BDT\x10\r\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BGN\x10\x0e\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BHD\x10\x0f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BIF\x10\x10\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BMD\x10\x11\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BND\x10\x12\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BOB\x10\x13\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BOV\x10\x14\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BRL\x10\x15\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BSD\x10\x16\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BTN\x10\x17\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BWP\x10\x18\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BYR\x10\x19\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BZD\x10\x1a\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CAD\x10\x1b\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CDF\x10\x1c\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CHF\x10\x1d\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CLF\x10\x1e\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CLP\x10\x1f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CNY\x10 \x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_COP\x10!\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_COU\x10\"\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CRC\x10#\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CUC\x10$\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CUP\x10%\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CVE\x10&\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CZK\x10'\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DJF\x10(\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DKK\x10)\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DOP\x10*\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DZD\x10+\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_EGP\x10,\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ERN\x10-\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ETB\x10.\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_EUR\x10/\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_FJD\x100\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_FKP\x101\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GBP\x102\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GEL\x103\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GHS\x104\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GIP\x105\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GMD\x106\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GNF\x107\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GTQ\x108\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GYD\x109\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HKD\x10:\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HNL\x10;\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HRK\x10<\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HTG\x10=\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HUF\x10>\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_IDR\x10?\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ILS\x10@\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_INR\x10A\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_IQD\x10B\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_IRR\x10C\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ISK\x10D\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_JMD\x10E\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_JOD\x10F\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_JPY\x10G\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KES\x10H\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KGS\x10I\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KHR\x10J\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KMF\x10K\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KPW\x10L\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KRW\x10M\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KWD\x10N\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KYD\x10O\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KZT\x10P\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LAK\x10Q\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LBP\x10R\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LKR\x10S\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LRD\x10T\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LSL\x10U\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LYD\x10V\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MAD\x10W\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MDL\x10X\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MGA\x10Y\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MKD\x10Z\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MMK\x10[\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MNT\x10\\\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MOP\x10]\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MRU\x10^\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MUR\x10_\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MVR\x10`\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MWK\x10a\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MXN\x10b\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MXV\x10c\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MYR\x10d\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MZN\x10e\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NAD\x10f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NGN\x10g\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NIO\x10h\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NOK\x10i\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NPR\x10j\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NZD\x10k\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_OMR\x10l\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PAB\x10m\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PEN\x10n\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PGK\x10o\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PHP\x10p\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PKR\x10q\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PLN\x10r\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PYG\x10s\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_QAR\x10t\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RON\x10u\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RSD\x10v\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RUB\x10w\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RWF\x10x\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SAR\x10y\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SBD\x10z\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SCR\x10{\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SDG\x10|\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SEK\x10}\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SGD\x10~\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SHP\x10\x7f\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SLL\x10\x80\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SOS\x10\x81\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SRD\x10\x82\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SSP\x10\x83\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_STN\x10\x84\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SVC\x10\x85\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SYP\x10\x86\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SZL\x10\x87\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_THB\x10\x88\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TJS\x10\x89\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TMT\x10\x8a\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TND\x10\x8b\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TOP\x10\x8c\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TRY\x10\x8d\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TTD\x10\x8e\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TWD\x10\x8f\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TZS\x10\x90\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UAH\x10\x91\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UGX\x10\x92\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_USD\x10\x93\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UYI\x10\x94\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UYU\x10\x95\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UZS\x10\x96\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VES\x10\x97\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VND\x10\x98\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VUV\x10\x99\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_WST\x10\x9a\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XAF\x10\x9b\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XCD\x10\x9c\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XOF\x10\x9d\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XPF\x10\x9e\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_YER\x10\x9f\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZAR\x10\xa0\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZMW\x10\xa1\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZWL\x10\xa2\x01*\xb0\x93\x01\n" +
	"\x0fIsoLanguageCode\x12!\n" +
	"\x1dISO_LANGUAGE_CODE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AA\x10\x01\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AAR\x10\x02\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AB\x10\x03\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ABK\x10\x04\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AE\x10\x05\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AVE\x10\x06\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AF\x10\a\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AFR\x10\b\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AK\x10\t\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AKA\x10\n" +
	"\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AM\x10\v\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AMH\x10\f\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AN\x10\r\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ARG\x10\x0e\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AR\x10\x0f\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ARA\x10\x10\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AS\x10\x11\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ASM\x10\x12\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AV\x10\x13\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AVA\x10\x14\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AY\x10\x15\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AYM\x10\x16\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AZ\x10\x17\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AZE\x10\x18\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BA\x10\x19\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BAK\x10\x1a\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BE\x10\x1b\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BEL\x10\x1c\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BG\x10\x1d\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BUL\x10\x1e\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BH\x10\x1f\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BIH\x10 \x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BI\x10!\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BIS\x10\"\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BM\x10#\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BAM\x10$\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BN\x10%\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BEN\x10&\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BO\x10'\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BOD\x10(\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BR\x10)\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BRE\x10*\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BS\x10+\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BOS\x10,\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CA\x10-\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CAT\x10.\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CE\x10/\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CHE\x100\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CH\x101\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CHA\x102\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CO\x103\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_COS\x104\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CR\x105\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CRE\x106\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CS\x107\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CES\x108\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CU\x109\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CHU\x10:\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CV\x10;\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CHV\x10<\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CY\x10=\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CYM\x10>\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DA\x10?\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_DAN\x10@\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DE\x10A\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_DEU\x10B\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DV\x10C\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_DIV\x10D\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DZ\x10E\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_DZO\x10F\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EE\x10G\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_EWE\x10H\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EL\x10I\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ELL\x10J\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EN\x10K\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ENG\x10L\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EO\x10M\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_EPO\x10N\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_ES\x10O\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_SPA\x10P\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_ET\x10Q\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_EST\x10R\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EU\x10S\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_EUS\x10T\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FA\x10U\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FAS\x10V\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FF\x10W\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FUL\x10X\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FI\x10Y\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FIN\x10Z\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FJ\x10[\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FIJ\x10\\\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FO\x10]\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FAO\x10^\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FR\x10_\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FRA\x10`\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FY\x10a\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FRY\x10b\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GA\x10c\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GLE\x10d\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GD\x10e\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GLA\x10f\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GL\x10g\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GLG\x10h\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GN\x10i\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GRN\x10j\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GU\x10k\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GUJ\x10l\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GV\x10m\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GLV\x10n\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HA\x10o\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HAU\x10p\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HE\x10q\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HEB\x10r\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HI\x10s\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HIN\x10t\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HO\x10u\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HMO\x10v\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HR\x10w\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HRV\x10x\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HT\x10y\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HAT\x10z\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HU\x10{\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HUN\x10|\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HY\x10}\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HYE\x10~\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HZ\x10\x7f\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HER\x10\x80\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IA\x10\x81\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INA\x10\x82\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ID\x10\x83\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IND\x10\x84\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IE\x10\x85\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ILE\x10\x86\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IG\x10\x87\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IBO\x10\x88\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_II\x10\x89\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_III\x10\x8a\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IK\x10\x8b\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IPK\x10\x8c\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IO\x10\x8d\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IDO\x10\x8e\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IS\x10\x8f\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ISL\x10\x90\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IT\x10\x91\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ITA\x10\x92\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IU\x10\x93\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IKU\x10\x94\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_JA\x10\x95\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JPN\x10\x96\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_JV\x10\x97\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JAV\x10\x98\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KA\x10\x99\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAT\x10\x9a\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KG\x10\x9b\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KON\x10\x9c\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KI\x10\x9d\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KIK\x10\x9e\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KJ\x10\x9f\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUA\x10\xa0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KK\x10\xa1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAZ\x10\xa2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KL\x10\xa3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAL\x10\xa4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KM\x10\xa5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHM\x10\xa6\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KN\x10\xa7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAN\x10\xa8\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KO\x10\xa9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOR\x10\xaa\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KR\x10\xab\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAU\x10\xac\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KS\x10\xad\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAS\x10\xae\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KU\x10\xaf\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUR\x10\xb0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KV\x10\xb1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOM\x10\xb2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KW\x10\xb3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_COR\x10\xb4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KY\x10\xb5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KIR\x10\xb6\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LA\x10\xb7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAT\x10\xb8\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LB\x10\xb9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LTZ\x10\xba\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LG\x10\xbb\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUG\x10\xbc\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LI\x10\xbd\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LIM\x10\xbe\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LN\x10\xbf\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LIN\x10\xc0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LO\x10\xc1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAO\x10\xc2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LT\x10\xc3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LIT\x10\xc4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LU\x10\xc5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUB\x10\xc6\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LV\x10\xc7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAV\x10\xc8\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MG\x10\xc9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MLG\x10\xca\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MH\x10\xcb\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAH\x10\xcc\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MI\x10\xcd\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MRI\x10\xce\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MK\x10\xcf\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MKD\x10\xd0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ML\x10\xd1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAL\x10\xd2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MN\x10\xd3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MON\x10\xd4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MO\x10\xd5\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MR\x10\xd6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAR\x10\xd7\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MS\x10\xd8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MSA\x10\xd9\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MT\x10\xda\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MLT\x10\xdb\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MY\x10\xdc\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MYA\x10\xdd\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NA\x10\xde\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAU\x10\xdf\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NB\x10\xe0\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NOB\x10\xe1\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ND\x10\xe2\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NDE\x10\xe3\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NE\x10\xe4\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NEP\x10\xe5\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NG\x10\xe6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NDO\x10\xe7\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NL\x10\xe8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NLD\x10\xe9\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NN\x10\xea\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NNO\x10\xeb\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NO\x10\xec\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NOR\x10\xed\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NR\x10\xee\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NBL\x10\xef\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NV\x10\xf0\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAV\x10\xf1\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NY\x10\xf2\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYA\x10\xf3\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OC\x10\xf4\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OCI\x10\xf5\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OJ\x10\xf6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OJI\x10\xf7\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OM\x10\xf8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ORM\x10\xf9\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OR\x10\xfa\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ORI\x10\xfb\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OS\x10\xfc\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OSS\x10\xfd\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PA\x10\xfe\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAN\x10\xff\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PI\x10\x80\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PLI\x10\x81\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PL\x10\x82\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_POL\x10\x83\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PS\x10\x84\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PUS\x10\x85\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PT\x10\x86\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_POR\x10\x87\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_QU\x10\x88\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QUE\x10\x89\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RM\x10\x8a\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ROH\x10\x8b\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RN\x10\x8c\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RUN\x10\x8d\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RO\x10\x8e\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RON\x10\x8f\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RU\x10\x90\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RUS\x10\x91\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RW\x10\x92\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KIN\x10\x93\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SA\x10\x94\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAN\x10\x95\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SC\x10\x96\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRD\x10\x97\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SD\x10\x98\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SND\x10\x99\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SE\x10\x9a\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SME\x10\x9b\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SG\x10\x9c\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAG\x10\x9d\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SI\x10\x9e\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SIN\x10\x9f\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SK\x10\xa0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SLK\x10\xa1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SL\x10\xa2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SLV\x10\xa3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SM\x10\xa4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMO\x10\xa5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SN\x10\xa6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SNA\x10\xa7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SO\x10\xa8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SOM\x10\xa9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SQ\x10\xaa\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SQI\x10\xab\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SR\x10\xac\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRP\x10\xad\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SS\x10\xae\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SSW\x10\xaf\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ST\x10\xb0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SOT\x10\xb1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SU\x10\xb2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUN\x10\xb3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SV\x10\xb4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SWE\x10\xb5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SW\x10\xb6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SWA\x10\xb7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TA\x10\xb8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAM\x10\xb9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TE\x10\xba\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TEL\x10\xbb\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TG\x10\xbc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TGK\x10\xbd\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TH\x10\xbe\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_THA\x10\xbf\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TI\x10\xc0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TIR\x10\xc1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TK\x10\xc2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUK\x10\xc3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TL\x10\xc4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TGL\x10\xc5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TN\x10\xc6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TSN\x10\xc7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TO\x10\xc8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TON\x10\xc9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TR\x10\xca\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUR\x10\xcb\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TS\x10\xcc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TSO\x10\xcd\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TT\x10\xce\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAT\x10\xcf\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TW\x10\xd0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TWI\x10\xd1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TY\x10\xd2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAH\x10\xd3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UG\x10\xd4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UIG\x10\xd5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UK\x10\xd6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UKR\x10\xd7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UR\x10\xd8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_URD\x10\xd9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UZ\x10\xda\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UZB\x10\xdb\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_VE\x10\xdc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VEN\x10\xdd\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_VI\x10\xde\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VIE\x10\xdf\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_VO\x10\xe0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VOL\x10\xe1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_WA\x10\xe2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WLN\x10\xe3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_WO\x10\xe4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WOL\x10\xe5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_XH\x10\xe6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_XHO\x10\xe7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_YI\x10\xe8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YID\x10\xe9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_YO\x10\xea\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YOR\x10\xeb\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ZA\x10\xec\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZHA\x10\xed\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ZH\x10\xee\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZHO\x10\xef\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ZU\x10\xf0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZUL\x10\xf1\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ACE\x10\xf2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ACH\x10\xf3\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ADA\x10\xf4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ADY\x10\xf5\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AFA\x10\xf6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AFH\x10\xf7\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AIN\x10\xf8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AKK\x10\xf9\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ALE\x10\xfa\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ALG\x10\xfb\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ALT\x10\xfc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ANG\x10\xfd\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ANP\x10\xfe\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_APA\x10\xff\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARC\x10\x80\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARN\x10\x81\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARP\x10\x82\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ART\x10\x83\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARW\x10\x84\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AST\x10\x85\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ATH\x10\x86\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AUS\x10\x87\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AWA\x10\x88\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAD\x10\x89\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAI\x10\x8a\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAL\x10\x8b\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAN\x10\x8c\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAS\x10\x8d\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAT\x10\x8e\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BEJ\x10\x8f\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BEM\x10\x90\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BER\x10\x91\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BGC\x10\x92\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BHO\x10\x93\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BIK\x10\x94\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BIN\x10\x95\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BLA\x10\x96\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BNT\x10\x97\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BRA\x10\x98\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BTK\x10\x99\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BUA\x10\x9a\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BUG\x10\x9b\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BYN\x10\x9c\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAD\x10\x9d\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAI\x10\x9e\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAR\x10\x9f\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAU\x10\xa0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CEB\x10\xa1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CEL\x10\xa2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHB\x10\xa3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHG\x10\xa4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHK\x10\xa5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHM\x10\xa6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHN\x10\xa7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHO\x10\xa8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHP\x10\xa9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHR\x10\xaa\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHY\x10\xab\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CMC\x10\xac\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CNR\x10\xad\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_COP\x10\xae\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CPE\x10\xaf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CPF\x10\xb0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CPP\x10\xb1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CRH\x10\xb2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CRP\x10\xb3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CSB\x10\xb4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CUS\x10\xb5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAK\x10\xb6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAR\x10\xb7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAY\x10\xb8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DEL\x10\xb9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DEN\x10\xba\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DGR\x10\xbb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DIN\x10\xbc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DOI\x10\xbd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DRA\x10\xbe\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DSB\x10\xbf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DUA\x10\xc0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DUM\x10\xc1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DYU\x10\xc2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EFI\x10\xc3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EGY\x10\xc4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EKA\x10\xc5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ELX\x10\xc6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ENM\x10\xc7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EWO\x10\xc8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FAN\x10\xc9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FAT\x10\xca\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FIL\x10\xcb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FIU\x10\xcc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FON\x10\xcd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRM\x10\xce\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRO\x10\xcf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRR\x10\xd0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRS\x10\xd1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FUR\x10\xd2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GAA\x10\xd3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GAY\x10\xd4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GBA\x10\xd5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GEM\x10\xd6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GEZ\x10\xd7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GIL\x10\xd8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GMH\x10\xd9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GOH\x10\xda\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GON\x10\xdb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GOR\x10\xdc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GOT\x10\xdd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GRB\x10\xde\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GRC\x10\xdf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GSW\x10\xe0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GWI\x10\xe1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HAI\x10\xe2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HAW\x10\xe3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIL\x10\xe4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIM\x10\xe5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIT\x10\xe6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HMN\x10\xe7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HSB\x10\xe8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HUP\x10\xe9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IBA\x10\xea\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IJO\x10\xeb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ILO\x10\xec\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INC\x10\xed\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INE\x10\xee\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INH\x10\xef\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IRA\x10\xf0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IRO\x10\xf1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JBO\x10\xf2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JPR\x10\xf3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JRB\x10\xf4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAA\x10\xf5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAB\x10\xf6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAC\x10\xf7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAM\x10\xf8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAR\x10\xf9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAW\x10\xfa\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KBD\x10\xfb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHA\x10\xfc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHI\x10\xfd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHO\x10\xfe\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KMB\x10\xff\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOK\x10\x80\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOS\x10\x81\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KPE\x10\x82\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRC\x10\x83\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRL\x10\x84\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRO\x10\x85\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRU\x10\x86\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUM\x10\x87\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUT\x10\x88\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAD\x10\x89\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAH\x10\x8a\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAM\x10\x8b\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LEZ\x10\x8c\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LOL\x10\x8d\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LOZ\x10\x8e\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUA\x10\x8f\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUI\x10\x90\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUN\x10\x91\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUO\x10\x92\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUS\x10\x93\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAD\x10\x94\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAG\x10\x95\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAI\x10\x96\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAK\x10\x97\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAN\x10\x98\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAP\x10\x99\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAS\x10\x9a\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MDF\x10\x9b\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MDR\x10\x9c\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MEN\x10\x9d\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MGA\x10\x9e\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MIC\x10\x9f\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MIN\x10\xa0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MIS\x10\xa1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MKH\x10\xa2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MNC\x10\xa3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MNI\x10\xa4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MNO\x10\xa5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MOH\x10\xa6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MOS\x10\xa7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUL\x10\xa8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUN\x10\xa9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUS\x10\xaa\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MWL\x10\xab\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MWR\x10\xac\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MYN\x10\xad\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MYV\x10\xae\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAH\x10\xaf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAI\x10\xb0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAP\x10\xb1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NDS\x10\xb2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NEW\x10\xb3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NIA\x10\xb4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NIC\x10\xb5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NIU\x10\xb6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NOG\x10\xb7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NON\x10\xb8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NQO\x10\xb9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NSO\x10\xba\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NUB\x10\xbb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NWC\x10\xbc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYM\x10\xbd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYN\x10\xbe\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYO\x10\xbf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NZI\x10\xc0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OSA\x10\xc1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OTA\x10\xc2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OTO\x10\xc3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAA\x10\xc4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAG\x10\xc5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAL\x10\xc6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAM\x10\xc7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAP\x10\xc8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAU\x10\xc9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PEO\x10\xca\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PHI\x10\xcb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PHN\x10\xcc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PON\x10\xcd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PRA\x10\xce\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PRO\x10\xcf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQA\x10\xd0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQB\x10\xd1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQC\x10\xd2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQD\x10\xd3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQE\x10\xd4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQF\x10\xd5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQG\x10\xd6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQH\x10\xd7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQI\x10\xd8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQJ\x10\xd9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RAJ\x10\xda\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RAP\x10\xdb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RAR\x10\xdc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ROA\x10\xdd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ROM\x10\xde\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RUP\x10\xdf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAD\x10\xe0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAH\x10\xe1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAI\x10\xe2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAL\x10\xe3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAM\x10\xe4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAS\x10\xe5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAT\x10\xe6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCN\x10\xe7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCO\x10\xe8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SEL\x10\xe9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SEM\x10\xea\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SGA\x10\xeb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SGN\x10\xec\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SHN\x10\xed\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SID\x10\xee\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SIO\x10\xef\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SIT\x10\xf0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SLA\x10\xf1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMA\x10\xf2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMI\x10\xf3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMJ\x10\xf4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMN\x10\xf5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMS\x10\xf6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SNK\x10\xf7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SOG\x10\xf8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SON\x10\xf9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRN\x10\xfa\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRR\x10\xfb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SSA\x10\xfc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUK\x10\xfd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUS\x10\xfe\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUX\x10\xff\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SYC\x10\x80\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SYR\x10\x81\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAI\x10\x82\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TEM\x10\x83\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TER\x10\x84\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TET\x10\x85\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TIG\x10\x86\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TIV\x10\x87\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TKL\x10\x88\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TLH\x10\x89\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TLI\x10\x8a\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TMH\x10\x8b\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TOG\x10\x8c\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TPI\x10\x8d\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TSI\x10\x8e\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUM\x10\x8f\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUP\x10\x90\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUT\x10\x91\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TVL\x10\x92\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TYV\x10\x93\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UDM\x10\x94\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UGA\x10\x95\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UMB\x10\x96\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UND\x10\x97\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VAI\x10\x98\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VOT\x10\x99\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAK\x10\x9a\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAL\x10\x9b\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAR\x10\x9c\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAS\x10\x9d\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WEN\x10\x9e\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_XAL\x10\x9f\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YAO\x10\xa0\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YAP\x10\xa1\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YPK\x10\xa2\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZAP\x10\xa3\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZBL\x10\xa4\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZEN\x10\xa5\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZGH\x10\xa6\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZND\x10\xa7\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZUN\x10\xa8\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZXX\x10\xa9\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZZA\x10\xaa\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AAA\x10\xab\x05*\x887\n" +
	"\x10IsoTerritoryCode\x12\"\n" +
	"\x1eISO_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AD\x10\x01\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AE\x10\x02\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AF\x10\x03\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AG\x10\x04\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AI\x10\x05\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AL\x10\x06\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AM\x10\a\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AN\x10\b\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AO\x10\t\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AQ\x10\n" +
	"\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AR\x10\v\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AS\x10\f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AT\x10\r\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AU\x10\x0e\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AW\x10\x0f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AX\x10\x10\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AZ\x10\x11\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BA\x10\x12\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BB\x10\x13\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BD\x10\x14\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BE\x10\x15\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BF\x10\x16\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BG\x10\x17\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BH\x10\x18\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BI\x10\x19\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BJ\x10\x1a\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BL\x10\x1b\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BM\x10\x1c\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BN\x10\x1d\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BO\x10\x1e\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BQ\x10\x1f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BR\x10 \x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BS\x10!\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BT\x10\"\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BV\x10#\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BW\x10$\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BY\x10%\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BZ\x10&\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CA\x10'\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CC\x10(\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CD\x10)\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CF\x10*\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CG\x10+\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CH\x10,\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CI\x10-\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CK\x10.\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CL\x10/\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CM\x100\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CN\x101\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CO\x102\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CR\x103\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CS\x104\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CU\x105\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CV\x106\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CW\x107\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CX\x108\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CY\x109\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CZ\x10:\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DE\x10;\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DJ\x10<\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DK\x10=\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DM\x10>\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DO\x10?\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DZ\x10@\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EC\x10A\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EE\x10B\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EG\x10C\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EH\x10D\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ER\x10E\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ES\x10F\x12\x1c\n" +
	"\x18ISO_TERRITORY_CODE_ES_CE\x10G\x12\x1c\n" +
	"\x18ISO_TERRITORY_CODE_ES_CN\x10H\x12\x1c\n" +
	"\x18ISO_TERRITORY_CODE_ES_ML\x10I\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ET\x10J\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FI\x10K\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FJ\x10L\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FK\x10M\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FM\x10N\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FO\x10O\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FR\x10P\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GA\x10Q\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GB\x10R\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GD\x10S\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GE\x10T\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GF\x10U\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GG\x10V\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GH\x10W\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GI\x10X\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GL\x10Y\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GM\x10Z\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GN\x10[\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GP\x10\\\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GQ\x10]\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GR\x10^\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GS\x10_\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GT\x10`\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GU\x10a\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GW\x10b\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GY\x10c\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HK\x10d\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HM\x10e\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HN\x10f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HR\x10g\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HT\x10h\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HU\x10i\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ID\x10j\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IE\x10k\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IL\x10l\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IM\x10m\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IN\x10n\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IO\x10o\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IQ\x10p\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IR\x10q\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IS\x10r\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IT\x10s\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JE\x10t\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JM\x10u\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JO\x10v\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JP\x10w\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KE\x10x\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KG\x10y\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KH\x10z\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KI\x10{\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KM\x10|\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KN\x10}\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KP\x10~\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KR\x10\x7f\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_KW\x10\x80\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_KY\x10\x81\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_KZ\x10\x82\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LA\x10\x83\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LB\x10\x84\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LC\x10\x85\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LI\x10\x86\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LK\x10\x87\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LR\x10\x88\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LS\x10\x89\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LT\x10\x8a\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LU\x10\x8b\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LV\x10\x8c\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LY\x10\x8d\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MA\x10\x8e\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MC\x10\x8f\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MD\x10\x90\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ME\x10\x91\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MF\x10\x92\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MG\x10\x93\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MH\x10\x94\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MK\x10\x95\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ML\x10\x96\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MM\x10\x97\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MN\x10\x98\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MO\x10\x99\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MP\x10\x9a\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MQ\x10\x9b\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MR\x10\x9c\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MS\x10\x9d\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MT\x10\x9e\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MU\x10\x9f\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MV\x10\xa0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MW\x10\xa1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MX\x10\xa2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MY\x10\xa3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MZ\x10\xa4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NA\x10\xa5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NC\x10\xa6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NE\x10\xa7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NF\x10\xa8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NG\x10\xa9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NI\x10\xaa\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NL\x10\xab\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NO\x10\xac\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NP\x10\xad\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NR\x10\xae\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NU\x10\xaf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NZ\x10\xb0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_OM\x10\xb1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PA\x10\xb2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PE\x10\xb3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PF\x10\xb4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PG\x10\xb5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PH\x10\xb6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PK\x10\xb7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PL\x10\xb8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PM\x10\xb9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PN\x10\xba\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PR\x10\xbb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PS\x10\xbc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PT\x10\xbd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PW\x10\xbe\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PY\x10\xbf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_QA\x10\xc0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RE\x10\xc1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RO\x10\xc2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RS\x10\xc3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RU\x10\xc4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RW\x10\xc5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SA\x10\xc6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SB\x10\xc7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SC\x10\xc8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SD\x10\xc9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SE\x10\xca\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SG\x10\xcb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SH\x10\xcc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SI\x10\xcd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SJ\x10\xce\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SK\x10\xcf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SL\x10\xd0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SM\x10\xd1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SN\x10\xd2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SO\x10\xd3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SR\x10\xd4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SS\x10\xd5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ST\x10\xd6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SV\x10\xd7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SX\x10\xd8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SY\x10\xd9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SZ\x10\xda\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TC\x10\xdb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TD\x10\xdc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TF\x10\xdd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TG\x10\xde\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TH\x10\xdf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TJ\x10\xe0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TK\x10\xe1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TL\x10\xe2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TM\x10\xe3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TN\x10\xe4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TO\x10\xe5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TR\x10\xe6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TT\x10\xe7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TV\x10\xe8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TW\x10\xe9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TZ\x10\xea\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UA\x10\xeb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UG\x10\xec\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UM\x10\xed\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_US\x10\xee\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UY\x10\xef\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UZ\x10\xf0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VA\x10\xf1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VC\x10\xf2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VE\x10\xf3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VG\x10\xf4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VI\x10\xf5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VN\x10\xf6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VU\x10\xf7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_WF\x10\xf8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_WS\x10\xf9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_YE\x10\xfa\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_YT\x10\xfb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ZA\x10\xfc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ZM\x10\xfd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ZW\x10\xfe\x01*w\n" +
	"\rLabelNameType\x12\x1f\n" +
	"\x1bLABEL_NAME_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" LABEL_NAME_TYPE_DISPLAYLABELNAME\x10\x01\x12\x1f\n" +
	"\x1bLABEL_NAME_TYPE_USERDEFINED\x10\x02*`\n" +
	"\tLabelType\x12\x1a\n" +
	"\x16LABEL_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17LABEL_TYPE_DISPLAYLABEL\x10\x01\x12\x1a\n" +
	"\x16LABEL_TYPE_USERDEFINED\x10\x02*\xed\x01\n" +
	"\x18LanguageLocalizationType\x12*\n" +
	"&LANGUAGE_LOCALIZATION_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!LANGUAGE_LOCALIZATION_TYPE_DUBBED\x10\x01\x12(\n" +
	"$LANGUAGE_LOCALIZATION_TYPE_SUBTITLED\x10\x02\x12+\n" +
	"'LANGUAGE_LOCALIZATION_TYPE_MULTILINGUAL\x10\x03\x12'\n" +
	"#LANGUAGE_LOCALIZATION_TYPE_ORIGINAL\x10\x04*\x8b\x01\n" +
	"\rLicenseRecord\x12\x1e\n" +
	"\x1aLICENSE_RECORD_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19LICENSE_RECORD_HASLICENSE\x10\x01\x12\x1f\n" +
	"\x1bLICENSE_RECORD_HASNOLICENSE\x10\x02\x12\x1a\n" +
	"\x16LICENSE_RECORD_UNKNOWN\x10\x03*\x95\x01\n" +
	"\x14LicenseRefusalReason\x12&\n" +
	"\"LICENSE_REFUSAL_REASON_UNSPECIFIED\x10\x00\x12&\n" +
	"\"LICENSE_REFUSAL_REASON_USERDEFINED\x10\x01\x12-\n" +
	")LICENSE_REFUSAL_REASON_WORKINPUBLICDOMAIN\x10\x02*\x9f\x05\n" +
	"\x16LicenseRejectionReason\x12(\n" +
	"$LICENSE_REJECTION_REASON_UNSPECIFIED\x10\x00\x126\n" +
	"2LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES\x10\x01\x12;\n" +
	"7LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE\x10\x02\x12:\n" +
	"6LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER\x10\x03\x12+\n" +
	"'LICENSE_REJECTION_REASON_LICENSEBLOCKED\x10\x04\x12*\n" +
	"&LICENSE_REJECTION_REASON_LICENSEEXISTS\x10\x05\x12-\n" +
	")LICENSE_REJECTION_REASON_LICENSENOTNEEDED\x10\x06\x126\n" +
	"2LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING\x10\a\x12.\n" +
	"*LICENSE_REJECTION_REASON_SHARESPLITSDIFFER\x10\b\x12/\n" +
	"+LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN\x10\t\x122\n" +
	".LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES\x10\n" +
	"\x12+\n" +
	"'LICENSE_REJECTION_REASON_WRONGADDRESSEE\x10\v\x12(\n" +
	"$LICENSE_REJECTION_REASON_USERDEFINED\x10\f*\xf7\x01\n" +
	"\x19LinkAcknowledgementStatus\x12+\n" +
	"'LINK_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED\x10\x00\x12(\n" +
	"$LINK_ACKNOWLEDGEMENT_STATUS_ACCEPTED\x10\x01\x12,\n" +
	"(LINK_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED\x10\x02\x12(\n" +
	"$LINK_ACKNOWLEDGEMENT_STATUS_CONFLICT\x10\x03\x12+\n" +
	"'LINK_ACKNOWLEDGEMENT_STATUS_USERDEFINED\x10\x04*\x9d\x01\n" +
	"\x0fLinkDescription\x12 \n" +
	"\x1cLINK_DESCRIPTION_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19LINK_DESCRIPTION_COVERART\x10\x01\x12'\n" +
	"#LINK_DESCRIPTION_VIDEOSCREENCAPTURE\x10\x02\x12 \n" +
	"\x1cLINK_DESCRIPTION_USERDEFINED\x10\x03*\xb2\x02\n" +
	"\n" +
	"LyricsType\x12\x1b\n" +
	"\x17LYRICS_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12LYRICS_TYPE_CHORUS\x10\x01\x12\x1e\n" +
	"\x1aLYRICS_TYPE_CHORUSANDVERSE\x10\x02\x12\x18\n" +
	"\x14LYRICS_TYPE_COMPLETE\x10\x03\x12\x1f\n" +
	"\x1bLYRICS_TYPE_FIRSTLINEOFTEXT\x10\x04\x12\x14\n" +
	"\x10LYRICS_TYPE_HOOK\x10\x05\x12\x19\n" +
	"\x15LYRICS_TYPE_JAZZSCATS\x10\x06\x12\x16\n" +
	"\x12LYRICS_TYPE_STANZA\x10\a\x12\x17\n" +
	"\x13LYRICS_TYPE_UNKNOWN\x10\b\x12\x1b\n" +
	"\x17LYRICS_TYPE_USERDEFINED\x10\t\x12\x15\n" +
	"\x11LYRICS_TYPE_VERSE\x10\n" +
	"*\xbc\x01\n" +
	"\x0fMeasurementType\x12 \n" +
	"\x1cMEASUREMENT_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"MEASUREMENT_TYPE_BOTHAUDIOANDVIDEO\x10\x01\x12'\n" +
	"#MEASUREMENT_TYPE_EITHERAUDIOORVIDEO\x10\x02\x12\x1a\n" +
	"\x16MEASUREMENT_TYPE_AUDIO\x10\x03\x12\x1a\n" +
	"\x16MEASUREMENT_TYPE_VIDEO\x10\x04*\x9e\x01\n" +
	"\x0eMembershipType\x12\x1f\n" +
	"\x1bMEMBERSHIP_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eMEMBERSHIP_TYPE_NATIONALMEMBER\x10\x01\x12\"\n" +
	"\x1eMEMBERSHIP_TYPE_REGIONALMEMBER\x10\x02\x12#\n" +
	"\x1fMEMBERSHIP_TYPE_WORLDWIDEMEMBER\x10\x03*\xaa\x02\n" +
	"\x11MessageActionType\x12#\n" +
	"\x1fMESSAGE_ACTION_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY\x10\x01\x12,\n" +
	"(MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY\x10\x02\x12*\n" +
	"&MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY\x10\x03\x12\"\n" +
	"\x1eMESSAGE_ACTION_TYPE_REDELIVERY\x10\x04\x12 \n" +
	"\x1cMESSAGE_ACTION_TYPE_TAKEDOWN\x10\x05\x12#\n" +
	"\x1fMESSAGE_ACTION_TYPE_USERDEFINED\x10\x06*\x86\x01\n" +
	"\x12MessageControlType\x12$\n" +
	" MESSAGE_CONTROL_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" MESSAGE_CONTROL_TYPE_LIVEMESSAGE\x10\x01\x12$\n" +
	" MESSAGE_CONTROL_TYPE_TESTMESSAGE\x10\x02*\x94\x01\n" +
	"\x0eMessagePurpose\x12\x1f\n" +
	"\x1bMESSAGE_PURPOSE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17MESSAGE_PURPOSE_LICENSE\x10\x01\x12\x1f\n" +
	"\x1bMESSAGE_PURPOSE_NDMALICENSE\x10\x02\x12#\n" +
	"\x1fMESSAGE_PURPOSE_ACKNOWLEDGEMENT\x10\x03*\xcc\x02\n" +
	"\vMessageType\x12\x1c\n" +
	"\x18MESSAGE_TYPE_UNSPECIFIED\x10\x00\x124\n" +
	"0MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE\x10\x01\x12/\n" +
	"+MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE\x10\x02\x12&\n" +
	"\"MESSAGE_TYPE_LICENSEREQUESTMESSAGE\x10\x03\x12\x1f\n" +
	"\x1bMESSAGE_TYPE_LICENSEMESSAGE\x10\x04\x12)\n" +
	"%MESSAGE_TYPE_LICENSEREVOCATIONMESSAGE\x10\x05\x12\x1b\n" +
	"\x17MESSAGE_TYPE_LODMESSAGE\x10\x06\x12'\n" +
	"#MESSAGE_TYPE_LODCONFIRMATIONMESSAGE\x10\a*\xdb\x01\n" +
	"\x12MetadataSourceType\x12$\n" +
	" METADATA_SOURCE_TYPE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fMETADATA_SOURCE_TYPE_JOURNALIST\x10\x01\x12)\n" +
	"%METADATA_SOURCE_TYPE_METADATAPROVIDER\x10\x02\x12)\n" +
	"%METADATA_SOURCE_TYPE_RIGHTSCONTROLLER\x10\x03\x12$\n" +
	" METADATA_SOURCE_TYPE_USERDEFINED\x10\x04*\xa8\x01\n" +
	"\x11MissingLinkReason\x12#\n" +
	"\x1fMISSING_LINK_REASON_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fMISSING_LINK_REASON_NOLINKFOUND\x10\x01\x12$\n" +
	" MISSING_LINK_REASON_NOMATCHFOUND\x10\x02\x12#\n" +
	"\x1fMISSING_LINK_REASON_USERDEFINED\x10\x03*2\n" +
	"\x04Mode\x12\x14\n" +
	"\x10MODE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10MODE_USERDEFINED\x10\x01*\x9e\x04\n" +
	"\x04Mood\x12\x14\n" +
	"\x10MOOD_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"MOOD_ANGRY\x10\x01\x12\x15\n" +
	"\x11MOOD_ANTICIPATION\x10\x02\x12\x0e\n" +
	"\n" +
	"MOOD_CHILL\x10\x03\x12\x12\n" +
	"\x0eMOOD_CONFIDENT\x10\x04\x12\r\n" +
	"\tMOOD_DARK\x10\x05\x12\x10\n" +
	"\fMOOD_DISGUST\x10\x06\x12\x11\n" +
	"\rMOOD_DRAMATIC\x10\a\x12\x12\n" +
	"\x0eMOOD_EMPOWERED\x10\b\x12\x12\n" +
	"\x0eMOOD_ENERGIZED\x10\t\x12\r\n" +
	"\tMOOD_EVIL\x10\n" +
	"\x12\x14\n" +
	"\x10MOOD_FEELINGDOWN\x10\v\x12\x14\n" +
	"\x10MOOD_FEELINGGOOD\x10\f\x12\r\n" +
	"\tMOOD_FREE\x10\r\x12\x0e\n" +
	"\n" +
	"MOOD_HAPPY\x10\x0e\x12\x11\n" +
	"\rMOOD_HUNGOVER\x10\x0f\x12\x12\n" +
	"\x0eMOOD_INSPIRING\x10\x10\x12\x0f\n" +
	"\vMOOD_LOWKEY\x10\x11\x12\x0f\n" +
	"\vMOOD_MELLOW\x10\x12\x12\x12\n" +
	"\x0eMOOD_MOTIVATED\x10\x13\x12\x11\n" +
	"\rMOOD_PEACEFUL\x10\x14\x12\x0e\n" +
	"\n" +
	"MOOD_QUIET\x10\x15\x12\x11\n" +
	"\rMOOD_RAINYDAY\x10\x16\x12\x11\n" +
	"\rMOOD_ROMANTIC\x10\x17\x12\f\n" +
	"\bMOOD_SAD\x10\x18\x12\x10\n" +
	"\fMOOD_SOULFUL\x10\x19\x12\x11\n" +
	"\rMOOD_SURPRISE\x10\x1a\x12\x10\n" +
	"\fMOOD_SWAGGER\x10\x1b\x12\x14\n" +
	"\x10MOOD_USERDEFINED\x10\x1c*\x9b\x01\n" +
	"\x0fMoodOrThemeType\x12\"\n" +
	"\x1eMOOD_OR_THEME_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19MOOD_OR_THEME_TYPE_LYRICS\x10\x01\x12&\n" +
	"\"MOOD_OR_THEME_TYPE_LYRICSANDMELODY\x10\x02\x12\x1d\n" +
	"\x19MOOD_OR_THEME_TYPE_MELODY\x10\x03*\xea\x11\n" +
	"\x1aMusicalWorkContributorRole\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12)\n" +
	"%MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER\x10\x01\x12+\n" +
	"'MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT\x10\x02\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER\x10\x03\x12(\n" +
	"$MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR\x10\x04\x124\n" +
	"0MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS\x10\x05\x123\n" +
	"/MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD\x10\x06\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER\x10\a\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER\x10\b\x122\n" +
	".MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST\x10\t\x12+\n" +
	"'MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR\x10\n" +
	"\x12)\n" +
	"%MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR\x10\v\x120\n" +
	",MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR\x10\f\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT\x10\r\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER\x10\x0e\x12(\n" +
	"$MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER\x10\x0f\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST\x10\x10\x124\n" +
	"0MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT\x10\x11\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST\x10\x12\x12.\n" +
	"*MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER\x10\x13\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST\x10\x14\x12/\n" +
	"+MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER\x10\x15\x120\n" +
	",MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR\x10\x16\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER\x10\x17\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT\x10\x18\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER\x10\x19\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER\x10\x1a\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR\x10\x1b\x122\n" +
	".MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR\x10\x1c\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR\x10\x1d\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER\x10\x1e\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST\x10\x1f\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR\x10 \x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER\x10!\x12.\n" +
	"*MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER\x10\"\x12>\n" +
	":MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL\x10#\x12/\n" +
	"+MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER\x10$\x123\n" +
	"/MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT\x10%\x121\n" +
	"-MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER\x10&\x120\n" +
	",MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER\x10'\x124\n" +
	"0MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER\x10(\x123\n" +
	"/MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER\x10)\x125\n" +
	"1MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER\x10*\x12.\n" +
	"*MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER\x10+\x126\n" +
	"2MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER\x10,\x12)\n" +
	"%MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN\x10-\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED\x10.*\x81\n" +
	"\n" +
	"\x0fMusicalWorkType\x12!\n" +
	"\x1dMUSICAL_WORK_TYPE_UNSPECIFIED\x10\x00\x12/\n" +
	"+MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE\x10\x01\x12-\n" +
	")MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK\x10\x02\x12*\n" +
	"&MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS\x10\x03\x12*\n" +
	"&MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC\x10\x04\x12*\n" +
	"&MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK\x10\x05\x12*\n" +
	"&MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK\x10\x06\x12\"\n" +
	"\x1eMUSICAL_WORK_TYPE_LYRICREMOVAL\x10\a\x12&\n" +
	"\"MUSICAL_WORK_TYPE_LYRICREPLACEMENT\x10\b\x12&\n" +
	"\"MUSICAL_WORK_TYPE_LYRICTRANSLATION\x10\t\x12\x1c\n" +
	"\x18MUSICAL_WORK_TYPE_MASHUP\x10\n" +
	"\x12\x1c\n" +
	"\x18MUSICAL_WORK_TYPE_MEDLEY\x10\v\x12.\n" +
	"*MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK\x10\f\x12)\n" +
	"%MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT\x10\r\x12,\n" +
	"(MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES\x10\x0e\x12&\n" +
	"\"MUSICAL_WORK_TYPE_MUSICARRANGEMENT\x10\x0f\x12,\n" +
	"(MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT\x10\x10\x12/\n" +
	"+MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT\x10\x11\x12-\n" +
	")MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION\x10\x12\x12)\n" +
	"%MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK\x10\x13\x12\x1f\n" +
	"\x1bMUSICAL_WORK_TYPE_POTPOURRI\x10\x14\x120\n" +
	",MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK\x10\x15\x12)\n" +
	"%MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK\x10\x16\x12+\n" +
	"'MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK\x10\x17\x12&\n" +
	"\"MUSICAL_WORK_TYPE_TVPRODUCTIONWORK\x10\x18\x12\x1d\n" +
	"\x19MUSICAL_WORK_TYPE_UNKNOWN\x10\x19\x12,\n" +
	"(MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT\x10\x1a\x123\n" +
	"/MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT\x10\x1b\x12!\n" +
	"\x1dMUSICAL_WORK_TYPE_USERDEFINED\x10\x1c\x12)\n" +
	"%MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK\x10\x1d*q\n" +
	"\x0eMwnlFileStatus\x12 \n" +
	"\x1cMWNL_FILE_STATUS_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17MWNL_FILE_STATUS_FILEOK\x10\x01\x12 \n" +
	"\x1cMWNL_FILE_STATUS_USERDEFINED\x10\x02*\x96\x01\n" +
	"\x16MwnlProposedActionType\x12)\n" +
	"%MWNL_PROPOSED_ACTION_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"MWNL_PROPOSED_ACTION_TYPE_RESUBMIT\x10\x01\x12)\n" +
	"%MWNL_PROPOSED_ACTION_TYPE_USERDEFINED\x10\x02*\xc4.\n" +
	"\rNewStudioRole\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"NEW_STUDIO_ROLE_ADDITIONALENGINEER\x10\x01\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_ANIMALTRAINER\x10\x02\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_ANIMATOR\x10\x03\x12\x1d\n" +
	"\x19NEW_STUDIO_ROLE_ANNOTATOR\x10\x04\x12$\n" +
	" NEW_STUDIO_ROLE_AANDRCOORDINATOR\x10\x05\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_ARMOURER\x10\x06\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_ARTDIRECTOR\x10\a\x121\n" +
	"-NEW_STUDIO_ROLE_ARTISTBACKGROUNDVOCALENGINEER\x10\b\x12'\n" +
	"#NEW_STUDIO_ROLE_ARTISTVOCALENGINEER\x10\t\x12-\n" +
	")NEW_STUDIO_ROLE_ARTISTVOCALSECONDENGINEER\x10\n" +
	"\x12+\n" +
	"'NEW_STUDIO_ROLE_ASSISTANTCAMERAOPERATOR\x10\v\x124\n" +
	"0NEW_STUDIO_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN\x10\f\x12%\n" +
	"!NEW_STUDIO_ROLE_ASSISTANTDIRECTOR\x10\r\x12%\n" +
	"!NEW_STUDIO_ROLE_ASSISTANTPRODUCER\x10\x0e\x12)\n" +
	"%NEW_STUDIO_ROLE_ASSISTANTVISUALEDITOR\x10\x0f\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_AURALTRAINER\x10\x10\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_BINDER\x10\x11\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_BINDINGDESIGNER\x10\x12\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_BOOKDESIGNER\x10\x13\x12$\n" +
	" NEW_STUDIO_ROLE_BOOKJACKDESIGNER\x10\x14\x12%\n" +
	"!NEW_STUDIO_ROLE_BOOKPLATEDESIGNER\x10\x15\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_BOOKPRODUCER\x10\x16\x12&\n" +
	"\"NEW_STUDIO_ROLE_BROADCASTASSISTANT\x10\x17\x12'\n" +
	"#NEW_STUDIO_ROLE_BROADCASTJOURNALIST\x10\x18\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_CAMERAOPERATOR\x10\x19\x12\x1d\n" +
	"\x19NEW_STUDIO_ROLE_CARPENTER\x10\x1a\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_CASTINGDIRECTOR\x10\x1b\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_CENSOR\x10\x1c\x12+\n" +
	"'NEW_STUDIO_ROLE_CHIEFLIGHTINGTECHNICIAN\x10\x1d\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_CHOREOGRAPHER\x10\x1e\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_CLAPPERLOADER\x10\x1f\x12'\n" +
	"#NEW_STUDIO_ROLE_COEXECUTIVEPRODUCER\x10 \x12,\n" +
	"(NEW_STUDIO_ROLE_COMMISSIONINGBROADCASTER\x10!\x12'\n" +
	"#NEW_STUDIO_ROLE_COMPILATIONPRODUCER\x10\"\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_CONSULTANT\x10#\x12%\n" +
	"!NEW_STUDIO_ROLE_CONTINUITYCHECKER\x10$\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_CONTRACTOR\x10%\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_COPRODUCER\x10&\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_CORRESPONDENT\x10'\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_COSTUMEDESIGNER\x10(\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_COVERDESIGNER\x10)\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_DESIGNER\x10*\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_DIALOGUECOACH\x10+\x123\n" +
	"/NEW_STUDIO_ROLE_DIGITALAUDIOWORKSTATIONENGINEER\x10,\x12*\n" +
	"&NEW_STUDIO_ROLE_DIGITALEDITINGENGINEER\x10-\x120\n" +
	",NEW_STUDIO_ROLE_DIGITALEDITINGSECONDENGINEER\x10.\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_DIRECTOR\x10/\x12/\n" +
	"+NEW_STUDIO_ROLE_DIRECTSTREAMDIGITALENGINEER\x100\x12'\n" +
	"#NEW_STUDIO_ROLE_DISTRIBUTIONCOMPANY\x101\x12\x1b\n" +
	"\x17NEW_STUDIO_ROLE_DRESSER\x102\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_DUBBER\x103\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_EDITOR\x104\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_EDITORINCHIEF\x105\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_EDITOROFTHEDAY\x106\x12\x1b\n" +
	"\x17NEW_STUDIO_ROLE_ENCODER\x107\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_ENGINEER\x108\x12%\n" +
	"!NEW_STUDIO_ROLE_EXECUTIVEPRODUCER\x109\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_EXPERT\x10:\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_FIGHTDIRECTOR\x10;\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_FILMDIRECTOR\x10<\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_FILMDISTRIBUTOR\x10=\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_FILMEDITOR\x10>\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_FILMPRODUCER\x10?\x12%\n" +
	"!NEW_STUDIO_ROLE_FILMSOUNDENGINEER\x10@\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_FLOORMANAGER\x10A\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_FOCUSPULLER\x10B\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_FOLEYARTIST\x10C\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_FOLEYEDITOR\x10D\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_FOLEYMIXER\x10E\x12$\n" +
	" NEW_STUDIO_ROLE_GRAPHICASSISTANT\x10F\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_GRAPHICDESIGNER\x10G\x12\x1d\n" +
	"\x19NEW_STUDIO_ROLE_GREENSMAN\x10H\x12\x18\n" +
	"\x14NEW_STUDIO_ROLE_GRIP\x10I\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_HAIRDRESSER\x10J\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_INITIALPRODUCER\x10K\x12\x1b\n" +
	"\x17NEW_STUDIO_ROLE_KEYGRIP\x10L\x12\x1b\n" +
	"\x17NEW_STUDIO_ROLE_LEADMAN\x10M\x12$\n" +
	" NEW_STUDIO_ROLE_LIGHTINGDIRECTOR\x10N\x12&\n" +
	"\"NEW_STUDIO_ROLE_LIGHTINGTECHNICIAN\x10O\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_LOCATIONMANAGER\x10P\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_MAKEUPARTIST\x10Q\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_MANUFACTURER\x10R\x12%\n" +
	"!NEW_STUDIO_ROLE_MASTERINGENGINEER\x10S\x12+\n" +
	"'NEW_STUDIO_ROLE_MASTERINGSECONDENGINEER\x10T\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_MATTEARTIST\x10U\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_MIXINGENGINEER\x10V\x12(\n" +
	"$NEW_STUDIO_ROLE_MIXINGSECONDENGINEER\x10W\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_MUSICDIRECTOR\x10X\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_MUSICIAN\x10Y\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_NEWSPRODUCER\x10Z\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_OVERDUBENGINEER\x10[\x12)\n" +
	"%NEW_STUDIO_ROLE_OVERDUBSECONDENGINEER\x10\\\x12'\n" +
	"#NEW_STUDIO_ROLE_PHOTOGRAPHYDIRECTOR\x10]\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_POSTPRODUCER\x10^\x12'\n" +
	"#NEW_STUDIO_ROLE_PROGRAMMINGENGINEER\x10_\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_PREPRODUCTION\x10`\x12)\n" +
	"%NEW_STUDIO_ROLE_PREPRODUCTIONENGINEER\x10a\x12%\n" +
	"!NEW_STUDIO_ROLE_PRODUCTIONCOMPANY\x10b\x12(\n" +
	"$NEW_STUDIO_ROLE_PRODUCTIONDEPARTMENT\x10c\x12%\n" +
	"!NEW_STUDIO_ROLE_PRODUCTIONMANAGER\x10d\x12'\n" +
	"#NEW_STUDIO_ROLE_PRODUCTIONSECRETARY\x10e\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_PROGRAMPRODUCER\x10f\x12)\n" +
	"%NEW_STUDIO_ROLE_PROGRAMPROPOSALWRITER\x10g\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_PROPERTYMANAGER\x10h\x12&\n" +
	"\"NEW_STUDIO_ROLE_PUBLISHINGDIRECTOR\x10i\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_PYROTECHNICIAN\x10j\x12%\n" +
	"!NEW_STUDIO_ROLE_RECORDINGENGINEER\x10k\x12+\n" +
	"'NEW_STUDIO_ROLE_RECORDINGSECONDENGINEER\x10l\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_REDACTOR\x10m\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_REISSUEPRODUCER\x10n\x12$\n" +
	" NEW_STUDIO_ROLE_REMIXINGENGINEER\x10o\x12*\n" +
	"&NEW_STUDIO_ROLE_REMIXINGSECONDENGINEER\x10p\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_REPETITEUR\x10q\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_RESEARCHER\x10r\x12$\n" +
	" NEW_STUDIO_ROLE_RESEARCHTEAMHEAD\x10s\x12&\n" +
	"\"NEW_STUDIO_ROLE_RESEARCHTEAMMEMBER\x10t\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_RESTAGER\x10u\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_RIGGER\x10v\x12-\n" +
	")NEW_STUDIO_ROLE_RIGHTSCONTROLLERONPRODUCT\x10w\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_RUNNER\x10x\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_SCENICOPERATIVE\x10y\x12%\n" +
	"!NEW_STUDIO_ROLE_SCIENTIFICADVISOR\x10z\x12$\n" +
	" NEW_STUDIO_ROLE_SCRIPTSUPERVISOR\x10{\x121\n" +
	"-NEW_STUDIO_ROLE_SECONDASSISTANTCAMERAOPERATOR\x10|\x12+\n" +
	"'NEW_STUDIO_ROLE_SECONDASSISTANTDIRECTOR\x10}\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_SECONDENGINEER\x10~\x12&\n" +
	"\"NEW_STUDIO_ROLE_SECONDUNITDIRECTOR\x10\x7f\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_SERIESPRODUCER\x10\x80\x01\x12 \n" +
	"\x1bNEW_STUDIO_ROLE_SETDESIGNER\x10\x81\x01\x12\x1f\n" +
	"\x1aNEW_STUDIO_ROLE_SETDRESSER\x10\x82\x01\x12\"\n" +
	"\x1dNEW_STUDIO_ROLE_SOUNDDESIGNER\x10\x83\x01\x12\x1f\n" +
	"\x1aNEW_STUDIO_ROLE_SOUNDMIXER\x10\x84\x01\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_SOUNDRECORDIST\x10\x85\x01\x12-\n" +
	"(NEW_STUDIO_ROLE_SPECIALEFFECTSTECHNICIAN\x10\x86\x01\x12\x1c\n" +
	"\x17NEW_STUDIO_ROLE_SPONSOR\x10\x87\x01\x12\"\n" +
	"\x1dNEW_STUDIO_ROLE_STAGEDIRECTOR\x10\x88\x01\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_STRINGENGINEER\x10\x89\x01\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_STRINGPRODUCER\x10\x8a\x01\x12$\n" +
	"\x1fNEW_STUDIO_ROLE_STUDIOCONDUCTOR\x10\x8b\x01\x12$\n" +
	"\x1fNEW_STUDIO_ROLE_STUDIOPERSONNEL\x10\x8c\x01\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_STUDIOPRODUCER\x10\x8d\x01\x12$\n" +
	"\x1fNEW_STUDIO_ROLE_SUBTITLESEDITOR\x10\x8e\x01\x12(\n" +
	"#NEW_STUDIO_ROLE_SUBTITLESTRANSLATOR\x10\x8f\x01\x12!\n" +
	"\x1cNEW_STUDIO_ROLE_TAPEOPERATOR\x10\x90\x01\x12&\n" +
	"!NEW_STUDIO_ROLE_TECHNICALDIRECTOR\x10\x91\x01\x12\x1f\n" +
	"\x1aNEW_STUDIO_ROLE_TONMEISTER\x10\x92\x01\x12%\n" +
	" NEW_STUDIO_ROLE_TRACKINGENGINEER\x10\x93\x01\x12+\n" +
	"&NEW_STUDIO_ROLE_TRACKINGSECONDENGINEER\x10\x94\x01\x121\n" +
	",NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESENGINEER\x10\x95\x01\x127\n" +
	"2NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER\x10\x96\x01\x12*\n" +
	"%NEW_STUDIO_ROLE_TRANSPORTATIONMANAGER\x10\x97\x01\x12!\n" +
	"\x1cNEW_STUDIO_ROLE_VIDEOGRAPHER\x10\x98\x01\x12 \n" +
	"\x1bNEW_STUDIO_ROLE_USERDEFINED\x10\x99\x01\x12\"\n" +
	"\x1dNEW_STUDIO_ROLE_VIDEOPRODUCER\x10\x9a\x01\x12 \n" +
	"\x1bNEW_STUDIO_ROLE_VISIONMIXER\x10\x9b\x01\x12!\n" +
	"\x1cNEW_STUDIO_ROLE_VISUALEDITOR\x10\x9c\x01\x12,\n" +
	"'NEW_STUDIO_ROLE_VISUALEFFECTSTECHNICIAN\x10\x9d\x01\x12\"\n" +
	"\x1dNEW_STUDIO_ROLE_VOCALPRODUCER\x10\x9e\x01\x12\x1d\n" +
	"\x18NEW_STUDIO_ROLE_WARDROBE\x10\x9f\x01*\xc8\x01\n" +
	"\x13OperatingSystemType\x12%\n" +
	"!OPERATING_SYSTEM_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bOPERATING_SYSTEM_TYPE_MACOS\x10\x01\x12#\n" +
	"\x1fOPERATING_SYSTEM_TYPE_MSWINDOWS\x10\x02\x12!\n" +
	"\x1dOPERATING_SYSTEM_TYPE_SYMBIAN\x10\x03\x12!\n" +
	"\x1dOPERATING_SYSTEM_TYPE_UNKNOWN\x10\x04*i\n" +
	"\tPLineType\x12\x1b\n" +
	"\x17P_LINE_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19P_LINE_TYPE_ORIGINALPLINE\x10\x01\x12 \n" +
	"\x1cP_LINE_TYPE_REMASTERINGPLINE\x10\x02*\xaf\x02\n" +
	"\x13ParentalWarningType\x12%\n" +
	"!PARENTAL_WARNING_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1ePARENTAL_WARNING_TYPE_EXPLICIT\x10\x01\x12/\n" +
	"+PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED\x10\x02\x12+\n" +
	"'PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE\x10\x03\x12%\n" +
	"!PARENTAL_WARNING_TYPE_NOTEXPLICIT\x10\x04\x12!\n" +
	"\x1dPARENTAL_WARNING_TYPE_UNKNOWN\x10\x05\x12%\n" +
	"!PARENTAL_WARNING_TYPE_USERDEFINED\x10\x06*\xd2\x02\n" +
	"\x15PartyRelationshipType\x12'\n" +
	"#PARTY_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!PARTY_RELATIONSHIP_TYPE_HASMEMBER\x10\x01\x12#\n" +
	"\x1fPARTY_RELATIONSHIP_TYPE_HASPART\x10\x02\x12%\n" +
	"!PARTY_RELATIONSHIP_TYPE_ISCHILDOF\x10\x03\x12&\n" +
	"\"PARTY_RELATIONSHIP_TYPE_ISMEMBEROF\x10\x04\x12&\n" +
	"\"PARTY_RELATIONSHIP_TYPE_ISPARENTOF\x10\x05\x12$\n" +
	" PARTY_RELATIONSHIP_TYPE_ISPARTOF\x10\x06\x12'\n" +
	"#PARTY_RELATIONSHIP_TYPE_USERDEFINED\x10\a*\xd2\x02\n" +
	"\x0ePercentageType\x12\x1f\n" +
	"\x1bPERCENTAGE_TYPE_UNSPECIFIED\x10\x00\x122\n" +
	".PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED\x10\x01\x12,\n" +
	"(PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE\x10\x02\x12*\n" +
	"&PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE\x10\x03\x12(\n" +
	"$PERCENTAGE_TYPE_PERCENTAGEOFNETSALES\x10\x04\x121\n" +
	"-PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID\x10\x05\x124\n" +
	"0PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE\x10\x06*\xde\x03\n" +
	"\x06Period\x12\x16\n" +
	"\x12PERIOD_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13PERIOD_ANCIENTMUSIC\x10\x01\x12\x15\n" +
	"\x11PERIOD_ARSANTIQUA\x10\x02\x12\x12\n" +
	"\x0ePERIOD_ARSNOVA\x10\x03\x12\x17\n" +
	"\x13PERIOD_ARSSUBTILIOR\x10\x04\x12\x12\n" +
	"\x0ePERIOD_BAROQUE\x10\x05\x12\x14\n" +
	"\x10PERIOD_CLASSICAL\x10\x06\x12\x17\n" +
	"\x13PERIOD_CONTEMPORARY\x10\a\x12\x18\n" +
	"\x14PERIOD_EARLYROMANTIC\x10\b\x12\x17\n" +
	"\x13PERIOD_EXPERIMENTAL\x10\t\x12\x16\n" +
	"\x12PERIOD_GALANTMUSIC\x10\n" +
	"\x12\x15\n" +
	"\x11PERIOD_HIGHMODERN\x10\v\x12\x18\n" +
	"\x14PERIOD_IMPRESSIONISM\x10\f\x12\x17\n" +
	"\x13PERIOD_LATEROMANTIC\x10\r\x12\x13\n" +
	"\x0fPERIOD_MEDIEVAL\x10\x0e\x12\x11\n" +
	"\rPERIOD_MODERN\x10\x0f\x12\x18\n" +
	"\x14PERIOD_NEOCLASSICISM\x10\x10\x12\x15\n" +
	"\x11PERIOD_POSTMODERN\x10\x11\x12\x16\n" +
	"\x12PERIOD_RENAISSANCE\x10\x12\x12\x16\n" +
	"\x12PERIOD_USERDEFINED\x10\x13*\xcc\x03\n" +
	"\x13PhysicalCarrierType\x12%\n" +
	"!PHYSICAL_CARRIER_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cPHYSICAL_CARRIER_TYPE_BLURAY\x10\x01\x12\x1c\n" +
	"\x18PHYSICAL_CARRIER_TYPE_CD\x10\x02\x12#\n" +
	"\x1fPHYSICAL_CARRIER_TYPE_COMBIPACK\x10\x03\x12)\n" +
	"%PHYSICAL_CARRIER_TYPE_COMPACTCASSETTE\x10\x04\x12\"\n" +
	"\x1ePHYSICAL_CARRIER_TYPE_DUALDISC\x10\x05\x12\x1d\n" +
	"\x19PHYSICAL_CARRIER_TYPE_DVD\x10\x06\x12&\n" +
	"\"PHYSICAL_CARRIER_TYPE_MEMORYDEVICE\x10\a\x12\x1e\n" +
	"\x1aPHYSICAL_CARRIER_TYPE_SACD\x10\b\x12%\n" +
	"!PHYSICAL_CARRIER_TYPE_USERDEFINED\x10\t\x12'\n" +
	"#PHYSICAL_CARRIER_TYPE_VIDEOCASSETTE\x10\n" +
	"\x12#\n" +
	"\x1fPHYSICAL_CARRIER_TYPE_VINYLDISK\x10\v*\xc0\x01\n" +
	"\x14PriceInformationType\x12&\n" +
	"\"PRICE_INFORMATION_TYPE_UNSPECIFIED\x10\x00\x12.\n" +
	"*PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE\x10\x01\x12(\n" +
	"$PRICE_INFORMATION_TYPE_PREORDERPRICE\x10\x02\x12&\n" +
	"\"PRICE_INFORMATION_TYPE_USERDEFINED\x10\x03*\xf3\x01\n" +
	"\vProductType\x12\x1c\n" +
	"\x18PRODUCT_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19PRODUCT_TYPE_AUDIOPRODUCT\x10\x01\x12 \n" +
	"\x1cPRODUCT_TYPE_GRAPHICSPRODUCT\x10\x02\x12(\n" +
	"$PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT\x10\x03\x12\x1e\n" +
	"\x1aPRODUCT_TYPE_MOBILEPRODUCT\x10\x04\x12\x1c\n" +
	"\x18PRODUCT_TYPE_USERDEFINED\x10\x05\x12\x1d\n" +
	"\x19PRODUCT_TYPE_VIDEOPRODUCT\x10\x06*\xe8\x03\n" +
	"\tProfileId\x12\x1a\n" +
	"\x16PROFILE_ID_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cPROFILE_ID_BASICAUDIOPROFILE\x10\x01\x12#\n" +
	"\x1fPROFILE_ID_BASICAUDIOPROFILESRB\x10\x02\x12\x19\n" +
	"\x15PROFILE_ID_UGCPROFILE\x10\x03\x12!\n" +
	"\x1dPROFILE_ID_AUDIOVISUALPROFILE\x10\x04\x12$\n" +
	" PROFILE_ID_AUDIOVISUALPROFILESRB\x10\x05\x12&\n" +
	"\"PROFILE_ID_ROYALTYREPORTINGPROFILE\x10\x06\x12$\n" +
	" PROFILE_ID_RADIOBROADCASTPROFILE\x10\a\x12<\n" +
	"8PROFILE_ID_FINANCIALREPORTINGTORECORDCOMPANIESPROFILESRB\x10\b\x12 \n" +
	"\x1cPROFILE_ID_MASTERLISTPROFILE\x10\t\x12#\n" +
	"\x1fPROFILE_ID_MASTERLISTPROFILESRB\x10\n" +
	"\x12#\n" +
	"\x1fPROFILE_ID_BASICAUDIOPROFILEMLC\x10\v\x12\x1c\n" +
	"\x18PROFILE_ID_UGCPROFILESRB\x10\f*\xe3\x01\n" +
	"\aPurpose\x12\x17\n" +
	"\x13PURPOSE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17PURPOSE_BACKGROUNDMUSIC\x10\x01\x12\x1f\n" +
	"\x1bPURPOSE_CHANNELTRAILERMUSIC\x10\x02\x12\x13\n" +
	"\x0fPURPOSE_EXTRACT\x10\x03\x12\x1c\n" +
	"\x18PURPOSE_FILMTRAILERMUSIC\x10\x04\x12\x1b\n" +
	"\x17PURPOSE_FOREGROUNDMUSIC\x10\x05\x12\x18\n" +
	"\x14PURPOSE_TRAILERMUSIC\x10\x06\x12\x17\n" +
	"\x13PURPOSE_USERDEFINED\x10\a*\xa4\x11\n" +
	"\fRatingAgency\x12\x1d\n" +
	"\x19RATING_AGENCY_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12RATING_AGENCY_ACMA\x10\x01\x12\x15\n" +
	"\x11RATING_AGENCY_AFR\x10\x02\x12\x17\n" +
	"\x13RATING_AGENCY_AGCOM\x10\x03\x12\x18\n" +
	"\x14RATING_AGENCY_ANATEL\x10\x04\x12\x16\n" +
	"\x12RATING_AGENCY_BBFC\x10\x05\x12\x16\n" +
	"\x12RATING_AGENCY_BFCO\x10\x06\x12\x16\n" +
	"\x12RATING_AGENCY_BFSC\x10\a\x12\x16\n" +
	"\x12RATING_AGENCY_BFVC\x10\b\x12\x17\n" +
	"\x13RATING_AGENCY_BMUKK\x10\t\x12\x16\n" +
	"\x12RATING_AGENCY_CBFC\x10\n" +
	"\x12\x16\n" +
	"\x12RATING_AGENCY_CBSC\x10\v\x12\x18\n" +
	"\x14RATING_AGENCY_CBSC_F\x10\f\x12\x15\n" +
	"\x11RATING_AGENCY_CCC\x10\r\x12\x15\n" +
	"\x11RATING_AGENCY_CCE\x10\x0e\x12\x17\n" +
	"\x13RATING_AGENCY_CHVRS\x10\x0f\x12\x16\n" +
	"\x12RATING_AGENCY_CICF\x10\x10\x12\x15\n" +
	"\x11RATING_AGENCY_CNA\x10\x11\x12\x15\n" +
	"\x11RATING_AGENCY_CNC\x10\x12\x12\x16\n" +
	"\x12RATING_AGENCY_CPBC\x10\x13\x12\x15\n" +
	"\x11RATING_AGENCY_CSA\x10\x14\x12\x16\n" +
	"\x12RATING_AGENCY_CSCF\x10\x15\x12\x17\n" +
	"\x13RATING_AGENCY_DJCTQ\x10\x16\x12\x17\n" +
	"\x13RATING_AGENCY_EIRIN\x10\x17\x12\x16\n" +
	"\x12RATING_AGENCY_ESRB\x10\x18\x12\x15\n" +
	"\x11RATING_AGENCY_FAB\x10\x19\x12\x15\n" +
	"\x11RATING_AGENCY_FCB\x10\x1a\x12\x15\n" +
	"\x11RATING_AGENCY_FCO\x10\x1b\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_CH\x10\x1c\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_CZ\x10\x1d\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_EG\x10\x1e\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_EE\x10\x1f\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_GR\x10 \x12\x19\n" +
	"\x15RATING_AGENCY_FILM_PE\x10!\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_SK\x10\"\x12\x1e\n" +
	"\x1aRATING_AGENCY_FILMTILSYNET\x10#\x12\x15\n" +
	"\x11RATING_AGENCY_FPB\x10$\x12\x15\n" +
	"\x11RATING_AGENCY_FRB\x10%\x12\x15\n" +
	"\x11RATING_AGENCY_FSK\x10&\x12\x16\n" +
	"\x12RATING_AGENCY_ICAA\x10'\x12\x16\n" +
	"\x12RATING_AGENCY_IFCO\x10(\x12\x17\n" +
	"\x13RATING_AGENCY_IFCOF\x10)\x12\x17\n" +
	"\x13RATING_AGENCY_INCAA\x10*\x12\x16\n" +
	"\x12RATING_AGENCY_KFCB\x10+\x12\x1c\n" +
	"\x18RATING_AGENCY_KIJKWIJZER\x10,\x12\x16\n" +
	"\x12RATING_AGENCY_KMRB\x10-\x12\x14\n" +
	"\x10RATING_AGENCY_KR\x10.\x12\x17\n" +
	"\x13RATING_AGENCY_KRRIT\x10/\x12\x15\n" +
	"\x11RATING_AGENCY_LSF\x100\x12\x17\n" +
	"\x13RATING_AGENCY_MBACT\x101\x12\x15\n" +
	"\x11RATING_AGENCY_MBU\x102\x12\x17\n" +
	"\x13RATING_AGENCY_MCCAA\x103\x12\x15\n" +
	"\x11RATING_AGENCY_MDA\x104\x12\x16\n" +
	"\x12RATING_AGENCY_MDCB\x105\x12\x1f\n" +
	"\x1bRATING_AGENCY_MEDIETILSYNET\x106\x12\x16\n" +
	"\x12RATING_AGENCY_MEKU\x107\x12\x16\n" +
	"\x12RATING_AGENCY_MFCB\x108\x12\x15\n" +
	"\x11RATING_AGENCY_MIC\x109\x12\x16\n" +
	"\x12RATING_AGENCY_MKRF\x10:\x12\x15\n" +
	"\x11RATING_AGENCY_MOC\x10;\x12\x18\n" +
	"\x14RATING_AGENCY_MOC_TW\x10<\x12\x16\n" +
	"\x12RATING_AGENCY_MPAA\x10=\x12\x17\n" +
	"\x13RATING_AGENCY_MPAAT\x10>\x12\x17\n" +
	"\x13RATING_AGENCY_MTRCB\x10?\x12\x15\n" +
	"\x11RATING_AGENCY_NBC\x10@\x12\x15\n" +
	"\x11RATING_AGENCY_NCS\x10A\x12\x16\n" +
	"\x12RATING_AGENCY_NFRC\x10B\x12\x17\n" +
	"\x13RATING_AGENCY_NFVCB\x10C\x12\x17\n" +
	"\x13RATING_AGENCY_NICAM\x10D\x12\x15\n" +
	"\x11RATING_AGENCY_NKC\x10E\x12\x16\n" +
	"\x12RATING_AGENCY_OFLC\x10F\x12\x19\n" +
	"\x15RATING_AGENCY_OFLC_NZ\x10G\x12\x16\n" +
	"\x12RATING_AGENCY_OFRB\x10H\x12\x16\n" +
	"\x12RATING_AGENCY_PEGI\x10I\x12\x17\n" +
	"\x13RATING_AGENCY_RCNOF\x10J\x12\x16\n" +
	"\x12RATING_AGENCY_RDCQ\x10K\x12\x16\n" +
	"\x12RATING_AGENCY_RIAA\x10L\x12\x15\n" +
	"\x11RATING_AGENCY_RTC\x10M\x12\x15\n" +
	"\x11RATING_AGENCY_RTE\x10N\x12\x15\n" +
	"\x11RATING_AGENCY_SBB\x10O\x12\x17\n" +
	"\x13RATING_AGENCY_SIBCI\x10P\x12\x17\n" +
	"\x13RATING_AGENCY_SMAIS\x10Q\x12\x17\n" +
	"\x13RATING_AGENCY_SM_SA\x10R\x12\x19\n" +
	"\x15RATING_AGENCY_SPIO_JK\x10S\x12\x16\n" +
	"\x12RATING_AGENCY_USFA\x10T\x12\x16\n" +
	"\x12RATING_AGENCY_TELA\x10U\x12\x16\n" +
	"\x12RATING_AGENCY_TVPG\x10V\x12\x1d\n" +
	"\x19RATING_AGENCY_USERDEFINED\x10W\x12\x15\n" +
	"\x11RATING_AGENCY_VET\x10X*\xe7\x04\n" +
	"\fRatingReason\x12\x1d\n" +
	"\x19RATING_REASON_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17RATING_REASON_BEHAVIOUR\x10\x01\x12\x1b\n" +
	"\x17RATING_REASON_BLASPHEMY\x10\x02\x12\x17\n" +
	"\x13RATING_REASON_CRIME\x10\x03\x12+\n" +
	"'RATING_REASON_DISCRIMINATIONORPREJUDICE\x10\x04\x12\x17\n" +
	"\x13RATING_REASON_DRUGS\x10\x05\x12\x1d\n" +
	"\x19RATING_REASON_EXPLICITSEX\x10\x06\x12!\n" +
	"\x1dRATING_REASON_EXTREMEVIOLENCE\x10\a\x12\x1e\n" +
	"\x1aRATING_REASON_FEARORHORROR\x10\b\x12\x1a\n" +
	"\x16RATING_REASON_GAMBLING\x10\t\x12\x1e\n" +
	"\x1aRATING_REASON_ILLEGALDRUGS\x10\n" +
	"\x12\x1a\n" +
	"\x16RATING_REASON_LANGUAGE\x10\v\x12\x1c\n" +
	"\x18RATING_REASON_LEGALDRUGS\x10\f\x12\x18\n" +
	"\x14RATING_REASON_NUDITY\x10\r\x12 \n" +
	"\x1cRATING_REASON_ONLINEGAMEPLAY\x10\x0e\x12\x15\n" +
	"\x11RATING_REASON_SEX\x10\x0f\x12 \n" +
	"\x1cRATING_REASON_SEXUALVIOLENCE\x10\x10\x12\x17\n" +
	"\x13RATING_REASON_THEME\x10\x11\x12\x1d\n" +
	"\x19RATING_REASON_USERDEFINED\x10\x12\x12\x1a\n" +
	"\x16RATING_REASON_VIOLENCE\x10\x13*\xe6\x04\n" +
	"\x0eRdrMessageType\x12 \n" +
	"\x1cRDR_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12B\n" +
	">RDR_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE\x10\x01\x12<\n" +
	"8RDR_MESSAGE_TYPE_REQUESTSOUNDRECORDINGRIGHTSCLAIMMESSAGE\x10\x02\x12;\n" +
	"7RDR_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE\x10\x03\x123\n" +
	"/RDR_MESSAGE_TYPE_RIGHTSCLAIMSTATUSUPDATEMESSAGE\x10\x04\x128\n" +
	"4RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATEMESSAGE\x10\x05\x12D\n" +
	"@RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATESTATUSUPDATEMESSAGE\x10\x06\x123\n" +
	"/RDR_MESSAGE_TYPE_REVOKECOLLECTIONMANDATEMESSAGE\x10\a\x12'\n" +
	"#RDR_MESSAGE_TYPE_SALESREPORTMESSAGE\x10\b\x120\n" +
	",RDR_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE\x10\t\x12.\n" +
	"*RDR_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE\x10\n" +
	"*\xd0\x01\n" +
	"\x0eRdrcFileStatus\x12 \n" +
	"\x1cRDRC_FILE_STATUS_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17RDRC_FILE_STATUS_FILEOK\x10\x01\x12 \n" +
	"\x1cRDRC_FILE_STATUS_USERDEFINED\x10\x02\x12\x1a\n" +
	"\x16RDRC_FILE_STATUS_ERROR\x10\x03\x12!\n" +
	"\x1dRDRC_FILE_STATUS_FILERECEIVED\x10\x04\x12\x1e\n" +
	"\x1aRDRC_FILE_STATUS_FILEVALID\x10\x05*\xcf\x01\n" +
	"\x14RecipientRevenueType\x12&\n" +
	"\"RECIPIENT_REVENUE_TYPE_UNSPECIFIED\x10\x00\x126\n" +
	"2RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE\x10\x01\x12+\n" +
	"'RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE\x10\x02\x12*\n" +
	"&RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE\x10\x03*\xd3\x02\n" +
	"\rRecordingMode\x12\x1e\n" +
	"\x1aRECORDING_MODE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cRECORDING_MODE_BINAURALAUDIO\x10\x01\x12\x16\n" +
	"\x12RECORDING_MODE_LCR\x10\x02\x12\x17\n" +
	"\x13RECORDING_MODE_MONO\x10\x03\x12$\n" +
	" RECORDING_MODE_MULTICHANNELAUDIO\x10\x04\x12\x1d\n" +
	"\x19RECORDING_MODE_MULTITRACK\x10\x05\x12\x17\n" +
	"\x13RECORDING_MODE_QUAD\x10\x06\x12\x18\n" +
	"\x14RECORDING_MODE_STEMS\x10\a\x12\x19\n" +
	"\x15RECORDING_MODE_STEREO\x10\b\x12 \n" +
	"\x1cRECORDING_MODE_SURROUNDSOUND\x10\t\x12\x1a\n" +
	"\x16RECORDING_MODE_UNKNOWN\x10\n" +
	"*\xe5\x04\n" +
	"\x11RecordingPartType\x12#\n" +
	"\x1fRECORDING_PART_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dRECORDING_PART_TYPE_BREAKDOWN\x10\x01\x12\x1e\n" +
	"\x1aRECORDING_PART_TYPE_BRIDGE\x10\x02\x12\x1e\n" +
	"\x1aRECORDING_PART_TYPE_CHORUS\x10\x03\x12\x1c\n" +
	"\x18RECORDING_PART_TYPE_CODA\x10\x04\x12\x1c\n" +
	"\x18RECORDING_PART_TYPE_DROP\x10\x05\x12\x1c\n" +
	"\x18RECORDING_PART_TYPE_HEAD\x10\x06\x12\x1c\n" +
	"\x18RECORDING_PART_TYPE_HOOK\x10\a\x12\x1d\n" +
	"\x19RECORDING_PART_TYPE_INTRO\x10\b\x12!\n" +
	"\x1dRECORDING_PART_TYPE_KEYCHANGE\x10\t\x12$\n" +
	" RECORDING_PART_TYPE_MIDDLEEIGHTH\x10\n" +
	"\x12\x1d\n" +
	"\x19RECORDING_PART_TYPE_OUTRO\x10\v\x12!\n" +
	"\x1dRECORDING_PART_TYPE_PRECHORUS\x10\f\x12\x1f\n" +
	"\x1bRECORDING_PART_TYPE_PREVIEW\x10\r\x12#\n" +
	"\x1fRECORDING_PART_TYPE_SOLOSECTION\x10\x0e\x12\x1c\n" +
	"\x18RECORDING_PART_TYPE_USED\x10\x0f\x12#\n" +
	"\x1fRECORDING_PART_TYPE_USERDEFINED\x10\x10\x12\x1d\n" +
	"\x19RECORDING_PART_TYPE_VERSE\x10\x11*\x8a\x01\n" +
	"\x11ReferenceCreation\x12\"\n" +
	"\x1eREFERENCE_CREATION_UNSPECIFIED\x10\x00\x12(\n" +
	"$REFERENCE_CREATION_REFERENCERESOURCE\x10\x01\x12'\n" +
	"#REFERENCE_CREATION_CONSUMERRESOURCE\x10\x02*i\n" +
	"\rReferenceUnit\x12\x1e\n" +
	"\x1aREFERENCE_UNIT_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19REFERENCE_UNIT_PERLICENSE\x10\x01\x12\x19\n" +
	"\x15REFERENCE_UNIT_PERUSE\x10\x02*\xdb\x02\n" +
	"\x12RegistrationStatus\x12#\n" +
	"\x1fREGISTRATION_STATUS_UNSPECIFIED\x10\x00\x121\n" +
	"-REGISTRATION_STATUS_CLAIMMEETSCOREDATAPROFILE\x10\x01\x124\n" +
	"0REGISTRATION_STATUS_CLAIMMEETSRECOMMENDEDPROFILE\x10\x02\x12%\n" +
	"!REGISTRATION_STATUS_PENDINGREVIEW\x10\x03\x121\n" +
	"-REGISTRATION_STATUS_RESOURCEREGISTEREDINVALID\x10\x04\x12/\n" +
	"+REGISTRATION_STATUS_RESOURCEREGISTEREDVALID\x10\x05\x12,\n" +
	"(REGISTRATION_STATUS_REGISTRATIONREJECTED\x10\x06*\xc2\x05\n" +
	"\x13RelatedResourceType\x12%\n" +
	"!RELATED_RESOURCE_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&RELATED_RESOURCE_TYPE_ACAPPELLAVERSION\x10\x01\x12)\n" +
	"%RELATED_RESOURCE_TYPE_ACOUSTICVERSION\x10\x02\x12&\n" +
	"\"RELATED_RESOURCE_TYPE_ALBUMVERSION\x10\x03\x12,\n" +
	"(RELATED_RESOURCE_TYPE_ALTERNATIVEVERSION\x10\x04\x12&\n" +
	"\"RELATED_RESOURCE_TYPE_CLEANVERSION\x10\x05\x12\x1f\n" +
	"\x1bRELATED_RESOURCE_TYPE_COVER\x10\x06\x12%\n" +
	"!RELATED_RESOURCE_TYPE_DEMOVERSION\x10\a\x12-\n" +
	")RELATED_RESOURCE_TYPE_INSTRUMENTALVERSION\x10\b\x12%\n" +
	"!RELATED_RESOURCE_TYPE_LIVEVERSION\x10\t\x12 \n" +
	"\x1cRELATED_RESOURCE_TYPE_MEDLEY\x10\n" +
	"\x12+\n" +
	"'RELATED_RESOURCE_TYPE_ORIGINALRECORDING\x10\v\x12&\n" +
	"\"RELATED_RESOURCE_TYPE_RADIOVERSION\x10\f\x12'\n" +
	"#RELATED_RESOURCE_TYPE_SINGLEVERSION\x10\r\x12'\n" +
	"#RELATED_RESOURCE_TYPE_STUDIOVERSION\x10\x0e\x12!\n" +
	"\x1dRELATED_RESOURCE_TYPE_TVTRACK\x10\x0f\x12%\n" +
	"!RELATED_RESOURCE_TYPE_USERDEFINED\x10\x10*\x90\x02\n" +
	"\x11RelationalRelator\x12\"\n" +
	"\x1eRELATIONAL_RELATOR_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aRELATIONAL_RELATOR_EQUALTO\x10\x01\x12\x1f\n" +
	"\x1bRELATIONAL_RELATOR_LESSTHAN\x10\x02\x12(\n" +
	"$RELATIONAL_RELATOR_LESSTHANOREQUALTO\x10\x03\x12\x1f\n" +
	"\x1bRELATIONAL_RELATOR_MORETHAN\x10\x04\x12(\n" +
	"$RELATIONAL_RELATOR_MORETHANOREQUALTO\x10\x05\x12!\n" +
	"\x1dRELATIONAL_RELATOR_NOTEQUALTO\x10\x06*\xf2\x01\n" +
	"\x1eReleaseProfileVariantVersionId\x122\n" +
	".RELEASE_PROFILE_VARIANT_VERSION_ID_UNSPECIFIED\x10\x00\x12/\n" +
	"+RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET\x10\x01\x129\n" +
	"5RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET_CLASSICAL\x10\x02\x120\n" +
	",RELEASE_PROFILE_VARIANT_VERSION_ID_CLASSICAL\x10\x03*\xa8\x03\n" +
	"\x17ReleaseProfileVersionId\x12*\n" +
	"&RELEASE_PROFILE_VERSION_ID_UNSPECIFIED\x10\x00\x12$\n" +
	" RELEASE_PROFILE_VERSION_ID_AUDIO\x10\x01\x12$\n" +
	" RELEASE_PROFILE_VERSION_ID_DJMIX\x10\x02\x127\n" +
	"3RELEASE_PROFILE_VERSION_ID_LONGFORMMUSICALWORKVIDEO\x10\x03\x12)\n" +
	"%RELEASE_PROFILE_VERSION_ID_MIXEDMEDIA\x10\x04\x12'\n" +
	"#RELEASE_PROFILE_VERSION_ID_RINGTONE\x10\x05\x120\n" +
	",RELEASE_PROFILE_VERSION_ID_SIMPLEAUDIOSINGLE\x10\x06\x120\n" +
	",RELEASE_PROFILE_VERSION_ID_SIMPLEVIDEOSINGLE\x10\a\x12$\n" +
	" RELEASE_PROFILE_VERSION_ID_VIDEO\x10\b*\xaf\b\n" +
	"\x17ReleaseRelationshipType\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x123\n" +
	"/RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE\x10\x01\x127\n" +
	"3RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE\x10\x02\x12,\n" +
	"(RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM\x10\x03\x123\n" +
	"/RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST\x10\x04\x12+\n" +
	"'RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST\x10\x05\x125\n" +
	"1RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT\x10\x06\x12/\n" +
	"+RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT\x10\a\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING\x10\b\x12;\n" +
	"7RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL\x10\t\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO\x10\n" +
	"\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO\x10\v\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM\x10\f\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO\x10\r\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO\x10\x0e\x12-\n" +
	")RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE\x10\x0f\x12;\n" +
	"7RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL\x10\x10\x122\n" +
	".RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE\x10\x11\x122\n" +
	".RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM\x10\x12\x12%\n" +
	"!RELEASE_RELATIONSHIP_TYPE_UNKNOWN\x10\x13\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_USERDEFINED\x10\x14*\x94\x01\n" +
	"\x13ReleaseResourceType\x12%\n" +
	"!RELEASE_RESOURCE_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE\x10\x01\x12+\n" +
	"'RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE\x10\x02*\xdc\r\n" +
	"\vReleaseType\x12\x1c\n" +
	"\x18RELEASE_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12RELEASE_TYPE_ALBUM\x10\x01\x12!\n" +
	"\x1dRELEASE_TYPE_ALERTTONERELEASE\x10\x02\x12\x1e\n" +
	"\x1aRELEASE_TYPE_ASPERCONTRACT\x10\x03\x12!\n" +
	"\x1dRELEASE_TYPE_AUDIOBOOKRELEASE\x10\x04\x12\"\n" +
	"\x1eRELEASE_TYPE_AUDIODRAMARELEASE\x10\x05\x12&\n" +
	"\"RELEASE_TYPE_BACKCOVERIMAGERELEASE\x10\x06\x12(\n" +
	"$RELEASE_TYPE_BOOKLETBACKIMAGERELEASE\x10\a\x12)\n" +
	"%RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE\x10\b\x12\x1f\n" +
	"\x1bRELEASE_TYPE_BOOKLETRELEASE\x10\t\x12\x17\n" +
	"\x13RELEASE_TYPE_BUNDLE\x10\n" +
	"\x12\x1f\n" +
	"\x1bRELEASE_TYPE_CLASSICALALBUM\x10\v\x12)\n" +
	"%RELEASE_TYPE_CLASSICALDIGITALBOXEDSET\x10\f\x12)\n" +
	"%RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM\x10\r\x12\x1d\n" +
	"\x19RELEASE_TYPE_CONCERTVIDEO\x10\x0e\x12%\n" +
	"!RELEASE_TYPE_DIGITALBOXSETRELEASE\x10\x0f\x12\x16\n" +
	"\x12RELEASE_TYPE_DJMIX\x10\x10\x12\x1c\n" +
	"\x18RELEASE_TYPE_DOCUMENTARY\x10\x11\x12\x16\n" +
	"\x12RELEASE_TYPE_DRAMA\x10\x12\x12-\n" +
	")RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE\x10\x13\x12\x1d\n" +
	"\x19RELEASE_TYPE_EBOOKRELEASE\x10\x14\x12\x13\n" +
	"\x0fRELEASE_TYPE_EP\x10\x15\x12\x18\n" +
	"\x14RELEASE_TYPE_EPISODE\x10\x16\x12\x1c\n" +
	"\x18RELEASE_TYPE_FEATUREFILM\x10\x17\x12\x1f\n" +
	"\x1bRELEASE_TYPE_KARAOKERELEASE\x10\x18\x12\x1f\n" +
	"\x1bRELEASE_TYPE_LIVEEVENTVIDEO\x10\x19\x12\x1c\n" +
	"\x18RELEASE_TYPE_LOGORELEASE\x10\x1a\x120\n" +
	",RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE\x10\x1b\x123\n" +
	"/RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE\x10\x1c\x12\"\n" +
	"\x1eRELEASE_TYPE_LYRICSHEETRELEASE\x10\x1d\x12 \n" +
	"\x1cRELEASE_TYPE_MULTIMEDIAALBUM\x10\x1e\x12*\n" +
	"&RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET\x10\x1f\x12!\n" +
	"\x1dRELEASE_TYPE_MULTIMEDIASINGLE\x10 \x12,\n" +
	"(RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE\x10!\x12/\n" +
	"+RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE\x10\"\x12\x19\n" +
	"\x15RELEASE_TYPE_PLAYLIST\x10#\x12$\n" +
	" RELEASE_TYPE_RINGBACKTONERELEASE\x10$\x12 \n" +
	"\x1cRELEASE_TYPE_RINGTONERELEASE\x10%\x12\x17\n" +
	"\x13RELEASE_TYPE_SEASON\x10&\x12\x17\n" +
	"\x13RELEASE_TYPE_SERIES\x10'\x12\"\n" +
	"\x1eRELEASE_TYPE_SHEETMUSICRELEASE\x10(\x12\x1a\n" +
	"\x16RELEASE_TYPE_SHORTFILM\x10)\x12\x17\n" +
	"\x13RELEASE_TYPE_SINGLE\x10*\x12&\n" +
	"\"RELEASE_TYPE_SINGLERESOURCERELEASE\x10+\x12\x1b\n" +
	"\x17RELEASE_TYPE_STEMBUNDLE\x10,\x12\x1c\n" +
	"\x18RELEASE_TYPE_USERDEFINED\x10-\x12\x1b\n" +
	"\x17RELEASE_TYPE_VIDEOALBUM\x10.\x12'\n" +
	"#RELEASE_TYPE_VIDEOMASTERTONERELEASE\x10/\x12\x1c\n" +
	"\x18RELEASE_TYPE_VIDEOSINGLE\x100\x12!\n" +
	"\x1dRELEASE_TYPE_WALLPAPERRELEASE\x101\x12\x1d\n" +
	"\x19RELEASE_TYPE_TRACKRELEASE\x102*\xc9\x10\n" +
	"\x0fReleaseTypeERN4\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19RELEASE_TYPE_E_R_N4_ALBUM\x10\x01\x12(\n" +
	"$RELEASE_TYPE_E_R_N4_ALERTTONERELEASE\x10\x02\x12%\n" +
	"!RELEASE_TYPE_E_R_N4_ASPERCONTRACT\x10\x03\x12(\n" +
	"$RELEASE_TYPE_E_R_N4_AUDIOBOOKRELEASE\x10\x04\x12(\n" +
	"$RELEASE_TYPE_E_R_N4_AUDIOCLIPRELEASE\x10\x05\x12)\n" +
	"%RELEASE_TYPE_E_R_N4_AUDIODRAMARELEASE\x10\x06\x12-\n" +
	")RELEASE_TYPE_E_R_N4_BACKCOVERIMAGERELEASE\x10\a\x12/\n" +
	"+RELEASE_TYPE_E_R_N4_BOOKLETBACKIMAGERELEASE\x10\b\x120\n" +
	",RELEASE_TYPE_E_R_N4_BOOKLETFRONTIMAGERELEASE\x10\t\x12&\n" +
	"\"RELEASE_TYPE_E_R_N4_BOOKLETRELEASE\x10\n" +
	"\x12\x1e\n" +
	"\x1aRELEASE_TYPE_E_R_N4_BUNDLE\x10\v\x12&\n" +
	"\"RELEASE_TYPE_E_R_N4_CLASSICALALBUM\x10\f\x120\n" +
	",RELEASE_TYPE_E_R_N4_CLASSICALDIGITALBOXEDSET\x10\r\x120\n" +
	",RELEASE_TYPE_E_R_N4_CLASSICALMULTIMEDIAALBUM\x10\x0e\x12$\n" +
	" RELEASE_TYPE_E_R_N4_CONCERTVIDEO\x10\x0f\x12,\n" +
	"(RELEASE_TYPE_E_R_N4_DIGITALBOXSETRELEASE\x10\x10\x12\x1d\n" +
	"\x19RELEASE_TYPE_E_R_N4_DJMIX\x10\x11\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_DOCUMENTARY\x10\x12\x12\x1d\n" +
	"\x19RELEASE_TYPE_E_R_N4_DRAMA\x10\x13\x124\n" +
	"0RELEASE_TYPE_E_R_N4_DRAMATICOMUSICALVIDEORELEASE\x10\x14\x12$\n" +
	" RELEASE_TYPE_E_R_N4_EBOOKRELEASE\x10\x15\x12\x1a\n" +
	"\x16RELEASE_TYPE_E_R_N4_EP\x10\x16\x12\x1f\n" +
	"\x1bRELEASE_TYPE_E_R_N4_EPISODE\x10\x17\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_FEATUREFILM\x10\x18\x12&\n" +
	"\"RELEASE_TYPE_E_R_N4_KARAOKERELEASE\x10\x19\x12&\n" +
	"\"RELEASE_TYPE_E_R_N4_LIVEEVENTVIDEO\x10\x1a\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_LOGORELEASE\x10\x1b\x127\n" +
	"3RELEASE_TYPE_E_R_N4_LONGFORMMUSICALWORKVIDEORELEASE\x10\x1c\x12:\n" +
	"6RELEASE_TYPE_E_R_N4_LONGFORMNONMUSICALWORKVIDEORELEASE\x10\x1d\x12)\n" +
	"%RELEASE_TYPE_E_R_N4_LYRICSHEETRELEASE\x10\x1e\x12'\n" +
	"#RELEASE_TYPE_E_R_N4_MULTIMEDIAALBUM\x10\x1f\x121\n" +
	"-RELEASE_TYPE_E_R_N4_MULTIMEDIADIGITALBOXEDSET\x10 \x12(\n" +
	"$RELEASE_TYPE_E_R_N4_MULTIMEDIASINGLE\x10!\x123\n" +
	"/RELEASE_TYPE_E_R_N4_MUSICALWORKBASEDGAMERELEASE\x10\"\x126\n" +
	"2RELEASE_TYPE_E_R_N4_NONMUSICALWORKBASEDGAMERELEASE\x10#\x12 \n" +
	"\x1cRELEASE_TYPE_E_R_N4_PLAYLIST\x10$\x12+\n" +
	"'RELEASE_TYPE_E_R_N4_RINGBACKTONERELEASE\x10%\x12'\n" +
	"#RELEASE_TYPE_E_R_N4_RINGTONERELEASE\x10&\x12\x1e\n" +
	"\x1aRELEASE_TYPE_E_R_N4_SEASON\x10'\x12\x1e\n" +
	"\x1aRELEASE_TYPE_E_R_N4_SERIES\x10(\x12)\n" +
	"%RELEASE_TYPE_E_R_N4_SHEETMUSICRELEASE\x10)\x12!\n" +
	"\x1dRELEASE_TYPE_E_R_N4_SHORTFILM\x10*\x12\x1e\n" +
	"\x1aRELEASE_TYPE_E_R_N4_SINGLE\x10+\x12-\n" +
	")RELEASE_TYPE_E_R_N4_SINGLERESOURCERELEASE\x10,\x12\"\n" +
	"\x1eRELEASE_TYPE_E_R_N4_STEMBUNDLE\x10-\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_USERDEFINED\x10.\x12\"\n" +
	"\x1eRELEASE_TYPE_E_R_N4_VIDEOALBUM\x10/\x12.\n" +
	"*RELEASE_TYPE_E_R_N4_VIDEOMASTERTONERELEASE\x100\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_VIDEOSINGLE\x101\x12(\n" +
	"$RELEASE_TYPE_E_R_N4_WALLPAPERRELEASE\x102*\xeb\x02\n" +
	"\x12ReleaseTypeMCNOTIF\x12*\n" +
	"&RELEASE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED\x10\x00\x12$\n" +
	" RELEASE_TYPE_M_C_N_O_T_I_F_ALBUM\x10\x01\x12!\n" +
	"\x1dRELEASE_TYPE_M_C_N_O_T_I_F_EP\x10\x02\x122\n" +
	".RELEASE_TYPE_M_C_N_O_T_I_F_RINGBACKTONERELEASE\x10\x03\x12.\n" +
	"*RELEASE_TYPE_M_C_N_O_T_I_F_RINGTONERELEASE\x10\x04\x12%\n" +
	"!RELEASE_TYPE_M_C_N_O_T_I_F_SINGLE\x10\x05\x12)\n" +
	"%RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOALBUM\x10\x06\x12*\n" +
	"&RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOSINGLE\x10\a*\xc6\x01\n" +
	"\x15RequestMessagePurpose\x12'\n" +
	"#REQUEST_MESSAGE_PURPOSE_UNSPECIFIED\x10\x00\x12*\n" +
	"&REQUEST_MESSAGE_PURPOSE_LICENSEREQUEST\x10\x01\x12.\n" +
	"*REQUEST_MESSAGE_PURPOSE_NDMALICENSEREQUEST\x10\x02\x12(\n" +
	"$REQUEST_MESSAGE_PURPOSE_NOTIFICATION\x10\x03*\xd9\x03\n" +
	"\rRequestReason\x12\x1e\n" +
	"\x1aREQUEST_REASON_UNSPECIFIED\x10\x00\x12+\n" +
	"'REQUEST_REASON_DISPUTERESOLUTIONREQUEST\x10\x01\x12!\n" +
	"\x1dREQUEST_REASON_GENERALREQUEST\x10\x02\x12$\n" +
	" REQUEST_REASON_PUBLISHERADDITION\x10\x03\x12\"\n" +
	"\x1eREQUEST_REASON_PUBLISHERCHANGE\x10\x04\x12#\n" +
	"\x1fREQUEST_REASON_PUBLISHERREMOVAL\x10\x05\x12\x19\n" +
	"\x15REQUEST_REASON_RECALL\x10\x06\x12$\n" +
	" REQUEST_REASON_RELEASELISTUPDATE\x10\a\x12\"\n" +
	"\x1eREQUEST_REASON_SPECIFICREQUEST\x10\b\x12\x1e\n" +
	"\x1aREQUEST_REASON_USERDEFINED\x10\t\x12!\n" +
	"\x1dREQUEST_REASON_WRITERADDITION\x10\n" +
	"\x12\x1f\n" +
	"\x1bREQUEST_REASON_WRITERCHANGE\x10\v\x12 \n" +
	"\x1cREQUEST_REASON_WRITERREMOVAL\x10\f*\x89a\n" +
	"\x17ResourceContributorRole\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_ACCOMPANYIST\x10\x01\x12#\n" +
	"\x1fRESOURCE_CONTRIBUTOR_ROLE_ACTOR\x10\x02\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALENGINEER\x10\x03\x126\n" +
	"2RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER\x10\x04\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER\x10\x05\x12;\n" +
	"7RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER\x10\x06\x126\n" +
	"2RESOURCE_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER\x10\a\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_ANCHORPERSON\x10\b\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_ANIMALTRAINER\x10\t\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_ANIMATOR\x10\n" +
	"\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_ANNOTATOR\x10\v\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_ANNOUNCER\x10\f\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR\x10\r\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_AANDRCOORDINATOR\x10\x0e\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_ARMOURER\x10\x0f\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_ARTCOPYIST\x10\x10\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_ARTDIRECTOR\x10\x11\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_ARTIST\x10\x12\x12;\n" +
	"7RESOURCE_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER\x10\x13\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER\x10\x14\x127\n" +
	"3RESOURCE_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER\x10\x15\x125\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR\x10\x16\x12>\n" +
	":RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN\x10\x17\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR\x10\x18\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR\x10\x19\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTEDITOR\x10\x1a\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTENGINEER\x10\x1b\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER\x10\x1c\x123\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR\x10\x1d\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER\x10\x1e\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER\x10\x1f\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_AURALTRAINER\x10 \x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST\x10!\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_BALANCEENGINEER\x10\"\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_BANDLEADER\x10#\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_BINDER\x10$\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_BINDINGDESIGNER\x10%\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_BOOKDESIGNER\x10&\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER\x10'\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER\x10(\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_BOOKPRODUCER\x10)\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_BROADCASTASSISTANT\x10*\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST\x10+\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_CALLIGRAPHER\x10,\x12,\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_CAMERAOPERATOR\x10-\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_CARPENTER\x10.\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_CARTOGRAPHER\x10/\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_CARTOONIST\x100\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_CASTINGDIRECTOR\x101\x12%\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_CAUSEUR\x102\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_CENSOR\x103\x125\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN\x104\x12#\n" +
	"\x1fRESOURCE_CONTRIBUTOR_ROLE_CHOIR\x105\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_CHOIRMEMBER\x106\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_CHOREOGRAPHER\x107\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_CHORUSMASTER\x108\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_CIRCUSARTIST\x109\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_CLAPPERLOADER\x10:\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_CLUBDJ\x10;\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_CODIRECTOR\x10<\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER\x10=\x12,\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_COLORSEPARATOR\x10>\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_COMEDIAN\x10?\x12%\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_COMIXER\x10@\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_COMIXINGENGINEER\x10A\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_COMMENTATOR\x10B\x126\n" +
	"2RESOURCE_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER\x10C\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER\x10D\x124\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR\x10E\x120\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER\x10F\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_CONCERTMASTER\x10G\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_CONDUCTOR\x10H\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_CONSULTANT\x10I\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_CONTINUITYCHECKER\x10J\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_CONTRACTOR\x10K\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_COPRODUCER\x10L\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_CORRESPONDENT\x10M\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_COSTUMEDESIGNER\x10N\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_COVERDESIGNER\x10O\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_DANCER\x10P\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_DELINEATOR\x10Q\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_DESIGNER\x10R\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_DIALOGUECOACH\x10S\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR\x10T\x12=\n" +
	"9RESOURCE_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER\x10U\x124\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER\x10V\x12:\n" +
	"6RESOURCE_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER\x10W\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_DIRECTOR\x10X\x129\n" +
	"5RESOURCE_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER\x10Y\x121\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY\x10Z\x12 \n" +
	"\x1cRESOURCE_CONTRIBUTOR_ROLE_DJ\x10[\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_DRAUGHTSMAN\x10\\\x12%\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_DRESSER\x10]\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_DUBBER\x10^\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_EDITOR\x10_\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_EDITORINCHIEF\x10`\x12,\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_EDITOROFTHEDAY\x10a\x12%\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_ENCODER\x10b\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_ENGINEER\x10c\x12&\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_ENSEMBLE\x10d\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER\x10e\x12$\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_EXPERT\x10f\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_FACSIMILIST\x10g\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_FIGHTDIRECTOR\x10h\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_FILMDIRECTOR\x10i\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR\x10j\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_FILMEDITOR\x10k\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_FILMPRODUCER\x10l\x12/\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER\x10m\x12*\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_FLOORMANAGER\x10n\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_FOCUSPULLER\x10o\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_FOLEYARTIST\x10p\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_FOLEYEDITOR\x10q\x12(\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_FOLEYMIXER\x10r\x12+\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_GRAPHICARTIST\x10s\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_GRAPHICASSISTANT\x10t\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_GRAPHICDESIGNER\x10u\x12'\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_GREENSMAN\x10v\x12\"\n" +
	"\x1eRESOURCE_CONTRIBUTOR_ROLE_GRIP\x10w\x12,\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_GUESTCONDUCTOR\x10x\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_GROUPMEMBER\x10y\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_HAIRDRESSER\x10z\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_ILLUSTRATOR\x10{\x125\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER\x10|\x12-\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_INITIALPRODUCER\x10}\x12.\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST\x10~\x12)\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_INTERVIEWER\x10\x7f\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_KEYCHARACTER\x10\x80\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_KEYGRIP\x10\x81\x01\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_KEYTALENT\x10\x82\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_LEADMAN\x10\x83\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_LEADPERFORMER\x10\x84\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_LEADVOCALIST\x10\x85\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR\x10\x86\x01\x121\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN\x10\x87\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_LOCATIONMANAGER\x10\x88\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_MAKEUPARTIST\x10\x89\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_MANUFACTURER\x10\x8a\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_MASTERINGENGINEER\x10\x8b\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER\x10\x8c\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_MATTEARTIST\x10\x8d\x01\x12$\n" +
	"\x1fRESOURCE_CONTRIBUTOR_ROLE_MIXER\x10\x8e\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_MIXINGENGINEER\x10\x8f\x01\x123\n" +
	".RESOURCE_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER\x10\x90\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_MUSICARRANGER\x10\x91\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_MUSICCOPYIST\x10\x92\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_MUSICDIRECTOR\x10\x93\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_MUSICGROUP\x10\x94\x01\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_MUSICIAN\x10\x95\x01\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_NARRATOR\x10\x96\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_NEWSPRODUCER\x10\x97\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_NEWSREADER\x10\x98\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_NOTSPECIFIED\x10\x99\x01\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRA\x10\x9a\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER\x10\x9b\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_ORIGINALARTIST\x10\x9c\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_OVERDUBENGINEER\x10\x9d\x01\x124\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER\x10\x9e\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_PAINTER\x10\x9f\x01\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_PERFORMER\x10\xa0\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHER\x10\xa1\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR\x10\xa2\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_PLAYBACKSINGER\x10\xa3\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_POSTPRODUCER\x10\xa4\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTION\x10\xa5\x01\x124\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER\x10\xa6\x01\x12:\n" +
	"5RESOURCE_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER\x10\xa7\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN\x10\xa8\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT\x10\xa9\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY\x10\xaa\x01\x124\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR\x10\xab\x01\x123\n" +
	".RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT\x10\xac\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER\x10\xad\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY\x10\xae\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_PROJECTENGINEER\x10\xaf\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMER\x10\xb0\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER\x10\xb1\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_PROGRAMPRODUCER\x10\xb2\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_PROPERTYMANAGER\x10\xb3\x01\x121\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR\x10\xb4\x01\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_PUPPETEER\x10\xb5\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_PYROTECHNICIAN\x10\xb6\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_RECORDINGENGINEER\x10\xb7\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER\x10\xb8\x01\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_REDACTOR\x10\xb9\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_REISSUEPRODUCER\x10\xba\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_REMIXEDARTIST\x10\xbb\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_REMIXER\x10\xbc\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_REMIXINGENGINEER\x10\xbd\x01\x125\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER\x10\xbe\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_REPETITEUR\x10\xbf\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_RESEARCHER\x10\xc0\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD\x10\xc1\x01\x121\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER\x10\xc2\x01\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_RESTAGER\x10\xc3\x01\x12%\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_RIGGER\x10\xc4\x01\x128\n" +
	"3RESOURCE_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT\x10\xc5\x01\x12%\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_RUNNER\x10\xc6\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SCENICOPERATIVE\x10\xc7\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR\x10\xc8\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR\x10\xc9\x01\x12<\n" +
	"7RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR\x10\xca\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR\x10\xcb\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SECONDCONDUCTOR\x10\xcc\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_SECONDENGINEER\x10\xcd\x01\x121\n" +
	",RESOURCE_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR\x10\xce\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_SERIESPRODUCER\x10\xcf\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_SETDESIGNER\x10\xd0\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_SETDRESSER\x10\xd1\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER\x10\xd2\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_SOLOIST\x10\xd3\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_SOUNDDESIGNER\x10\xd4\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_SOUNDMIXER\x10\xd5\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_SOUNDRECORDIST\x10\xd6\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR\x10\xd7\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_SPEAKER\x10\xd8\x01\x127\n" +
	"2RESOURCE_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN\x10\xd9\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_SPONSOR\x10\xda\x01\x125\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER\x10\xdb\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_STAGEDIRECTOR\x10\xdc\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_STAGEENGINEER\x10\xdd\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_STORYTELLER\x10\xde\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_STRINGENGINEER\x10\xdf\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_STRINGPRODUCER\x10\xe0\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_STRINGSDIRECTOR\x10\xe1\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR\x10\xe2\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_STUDIOMUSICIAN\x10\xe3\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_STUDIOPERSONNEL\x10\xe4\x01\x12-\n" +
	"(RESOURCE_CONTRIBUTOR_ROLE_STUDIOPRODUCER\x10\xe5\x01\x12%\n" +
	" RESOURCE_CONTRIBUTOR_ROLE_STUNTS\x10\xe6\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESEDITOR\x10\xe7\x01\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR\x10\xe8\x01\x12.\n" +
	")RESOURCE_CONTRIBUTOR_ROLE_SUPPORTINGACTOR\x10\xe9\x01\x125\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER\x10\xea\x01\x12;\n" +
	"6RESOURCE_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER\x10\xeb\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_TAPEOPERATOR\x10\xec\x01\x120\n" +
	"+RESOURCE_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR\x10\xed\x01\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_TONMEISTER\x10\xee\x01\x12/\n" +
	"*RESOURCE_CONTRIBUTOR_ROLE_TRACKINGENGINEER\x10\xef\x01\x125\n" +
	"0RESOURCE_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER\x10\xf0\x01\x12;\n" +
	"6RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER\x10\xf1\x01\x12A\n" +
	"<RESOURCE_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER\x10\xf2\x01\x124\n" +
	"/RESOURCE_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER\x10\xf3\x01\x128\n" +
	"3RESOURCE_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL\x10\xf4\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_TYPEDESIGNER\x10\xf5\x01\x12&\n" +
	"!RESOURCE_CONTRIBUTOR_ROLE_UNKNOWN\x10\xf6\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_USERDEFINED\x10\xf7\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VIDEODIRECTOR\x10\xf8\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_VIDEOGRAPHER\x10\xf9\x01\x123\n" +
	".RESOURCE_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR\x10\xfa\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VIDEOPRODUCER\x10\xfb\x01\x12*\n" +
	"%RESOURCE_CONTRIBUTOR_ROLE_VISIONMIXER\x10\xfc\x01\x12+\n" +
	"&RESOURCE_CONTRIBUTOR_ROLE_VISUALEDITOR\x10\xfd\x01\x126\n" +
	"1RESOURCE_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN\x10\xfe\x01\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VOCALARRANGER\x10\xff\x01\x123\n" +
	".RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER\x10\x80\x02\x129\n" +
	"4RESOURCE_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER\x10\x81\x02\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VOCALENGINEER\x10\x82\x02\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_VOCALIST\x10\x83\x02\x122\n" +
	"-RESOURCE_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER\x10\x84\x02\x12,\n" +
	"'RESOURCE_CONTRIBUTOR_ROLE_VOCALPRODUCER\x10\x85\x02\x12)\n" +
	"$RESOURCE_CONTRIBUTOR_ROLE_VOICEACTOR\x10\x86\x02\x12'\n" +
	"\"RESOURCE_CONTRIBUTOR_ROLE_WARDROBE\x10\x87\x02\x12(\n" +
	"#RESOURCE_CONTRIBUTOR_ROLE_PRESENTER\x10\x88\x02*\xf4\x01\n" +
	"\x11ResourceGroupType\x12#\n" +
	"\x1fRESOURCE_GROUP_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dRESOURCE_GROUP_TYPE_COMPONENT\x10\x01\x12(\n" +
	"$RESOURCE_GROUP_TYPE_COMPONENTRELEASE\x10\x02\x12%\n" +
	"!RESOURCE_GROUP_TYPE_MULTIWORKPART\x10\x03\x12(\n" +
	"$RESOURCE_GROUP_TYPE_RELEASECOMPONENT\x10\x04\x12\x1c\n" +
	"\x18RESOURCE_GROUP_TYPE_SIDE\x10\x05*\xb4\x03\n" +
	"\x18ResourceRelationshipType\x12*\n" +
	"&RESOURCE_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x122\n" +
	".RESOURCE_RELATIONSHIP_TYPE_CONTAINSSAMPLESFROM\x10\x01\x12-\n" +
	")RESOURCE_RELATIONSHIP_TYPE_HASCONTENTFROM\x10\x02\x12*\n" +
	"&RESOURCE_RELATIONSHIP_TYPE_ISCOVEREDBY\x10\x03\x12(\n" +
	"$RESOURCE_RELATIONSHIP_TYPE_ISCOVEROF\x10\x04\x122\n" +
	".RESOURCE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING\x10\x05\x12'\n" +
	"#RESOURCE_RELATIONSHIP_TYPE_ISPARTOF\x10\x06\x12*\n" +
	"&RESOURCE_RELATIONSHIP_TYPE_ISSAMPLEDBY\x10\a\x12*\n" +
	"&RESOURCE_RELATIONSHIP_TYPE_USERDEFINED\x10\b*\x92\x02\n" +
	"\fResourceType\x12\x1d\n" +
	"\x19RESOURCE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13RESOURCE_TYPE_IMAGE\x10\x01\x12\x16\n" +
	"\x12RESOURCE_TYPE_MIDI\x10\x02\x12\x1c\n" +
	"\x18RESOURCE_TYPE_SHEETMUSIC\x10\x03\x12\x1a\n" +
	"\x16RESOURCE_TYPE_SOFTWARE\x10\x04\x12 \n" +
	"\x1cRESOURCE_TYPE_SOUNDRECORDING\x10\x05\x12\x16\n" +
	"\x12RESOURCE_TYPE_TEXT\x10\x06\x12%\n" +
	"!RESOURCE_TYPE_USERDEFINEDRESOURCE\x10\a\x12\x17\n" +
	"\x13RESOURCE_TYPE_VIDEO\x10\b*\xc5\x01\n" +
	"\x13ResourceTypeMCNOTIF\x12+\n" +
	"'RESOURCE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED\x10\x00\x12*\n" +
	"&RESOURCE_TYPE_M_C_N_O_T_I_F_SHEETMUSIC\x10\x01\x12.\n" +
	"*RESOURCE_TYPE_M_C_N_O_T_I_F_SOUNDRECORDING\x10\x02\x12%\n" +
	"!RESOURCE_TYPE_M_C_N_O_T_I_F_VIDEO\x10\x03*\x84\x01\n" +
	"\x10ResourceTypeRDRR\x12%\n" +
	"!RESOURCE_TYPE_R_D_R_R_UNSPECIFIED\x10\x00\x12(\n" +
	"$RESOURCE_TYPE_R_D_R_R_SOUNDRECORDING\x10\x01\x12\x1f\n" +
	"\x1bRESOURCE_TYPE_R_D_R_R_VIDEO\x10\x02*\xdd\x02\n" +
	"\x1cResourceWorkRelationshipType\x12/\n" +
	"+RESOURCE_WORK_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x122\n" +
	".RESOURCE_WORK_RELATIONSHIP_TYPE_INTERPELLATION\x10\x01\x12*\n" +
	"&RESOURCE_WORK_RELATIONSHIP_TYPE_MEDLEY\x10\x02\x128\n" +
	"4RESOURCE_WORK_RELATIONSHIP_TYPE_MULTIPLEWORKRESOURCE\x10\x03\x12:\n" +
	"6RESOURCE_WORK_RELATIONSHIP_TYPE_MUSICALWORKWITHSAMPLES\x10\x04\x126\n" +
	"2RESOURCE_WORK_RELATIONSHIP_TYPE_SINGLEWORKRESOURCE\x10\x05*\xb4\x01\n" +
	"\x11RevenueSourceType\x12#\n" +
	"\x1fREVENUE_SOURCE_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$REVENUE_SOURCE_TYPE_FINANCIALREVENUE\x10\x01\x12(\n" +
	"$REVENUE_SOURCE_TYPE_INDEMNITYREVENUE\x10\x02\x12&\n" +
	"\"REVENUE_SOURCE_TYPE_ROYALTYREVENUE\x10\x03*\xa5\x04\n" +
	"\vRhythmStyle\x12\x1c\n" +
	"\x18RHYTHM_STYLE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aRHYTHM_STYLE_E_4ONTHEFLOOR\x10\x01\x12\x16\n" +
	"\x12RHYTHM_STYLE_BLUES\x10\x02\x12\x1d\n" +
	"\x19RHYTHM_STYLE_BOOGIEWOOGIE\x10\x03\x12\x18\n" +
	"\x14RHYTHM_STYLE_CALYPSO\x10\x04\x12\x17\n" +
	"\x13RHYTHM_STYLE_CUMBIA\x10\x05\x12\x17\n" +
	"\x13RHYTHM_STYLE_DEMBOW\x10\x06\x12\x16\n" +
	"\x12RHYTHM_STYLE_DISCO\x10\a\x12\x19\n" +
	"\x15RHYTHM_STYLE_FLAMENCO\x10\b\x12\x19\n" +
	"\x15RHYTHM_STYLE_MERENGUE\x10\t\x12\x1a\n" +
	"\x16RHYTHM_STYLE_NYABINGHI\x10\n" +
	"\x12\x18\n" +
	"\x14RHYTHM_STYLE_ONEDROP\x10\v\x12\x1b\n" +
	"\x17RHYTHM_STYLE_POLYRHYTHM\x10\f\x12\x1c\n" +
	"\x18RHYTHM_STYLE_ROCKANDROLL\x10\r\x12\x16\n" +
	"\x12RHYTHM_STYLE_RUMBA\x10\x0e\x12\x18\n" +
	"\x14RHYTHM_STYLE_SHUFFLE\x10\x0f\x12\x16\n" +
	"\x12RHYTHM_STYLE_SKANK\x10\x10\x12\x15\n" +
	"\x11RHYTHM_STYLE_TALA\x10\x11\x12\x17\n" +
	"\x13RHYTHM_STYLE_TEJANO\x10\x12\x12\x1c\n" +
	"\x18RHYTHM_STYLE_USERDEFINED\x10\x13*\xe6\x01\n" +
	"\x0eRightShareType\x12 \n" +
	"\x1cRIGHT_SHARE_TYPE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fRIGHT_SHARE_TYPE_LICENSINGSHARE\x10\x01\x12/\n" +
	"+RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE\x10\x02\x12/\n" +
	"+RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE\x10\x03\x12+\n" +
	"'RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE\x10\x04*\xbc\x01\n" +
	"\x15RightsClaimPolicyType\x12(\n" +
	"$RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS\x10\x01\x12%\n" +
	"!RIGHTS_CLAIM_POLICY_TYPE_MONETIZE\x10\x02\x12(\n" +
	"$RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE\x10\x03*\x92\x02\n" +
	"\x11RightsClaimStatus\x12#\n" +
	"\x1fRIGHTS_CLAIM_STATUS_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cRIGHTS_CLAIM_STATUS_CONFLICT\x10\x01\x12(\n" +
	"$RIGHTS_CLAIM_STATUS_DATAINCONSISTENT\x10\x02\x12\"\n" +
	"\x1eRIGHTS_CLAIM_STATUS_NOCONFLICT\x10\x03\x12%\n" +
	"!RIGHTS_CLAIM_STATUS_PENDINGREVIEW\x10\x04\x12 \n" +
	"\x1cRIGHTS_CLAIM_STATUS_REJECTED\x10\x05\x12\x1f\n" +
	"\x1bRIGHTS_CLAIM_STATUS_REVOKED\x10\x06*\x85\x02\n" +
	"\x11RightsControlType\x12#\n" +
	"\x1fRIGHTS_CONTROL_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%RIGHTS_CONTROL_TYPE_EXCLUSIVELICENSEE\x10\x01\x12\"\n" +
	"\x1eRIGHTS_CONTROL_TYPE_LOCALPAYEE\x10\x02\x12%\n" +
	"!RIGHTS_CONTROL_TYPE_ORIGINALOWNER\x10\x03\x12+\n" +
	"'RIGHTS_CONTROL_TYPE_RIGHTSADMINISTRATOR\x10\x04\x12(\n" +
	"$RIGHTS_CONTROL_TYPE_SUCCESSORINTITLE\x10\x05*\xcf\x02\n" +
	"\x14RightsControllerRole\x12&\n" +
	"\"RIGHTS_CONTROLLER_ROLE_UNSPECIFIED\x10\x00\x126\n" +
	"2RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY\x10\x01\x12%\n" +
	"!RIGHTS_CONTROLLER_ROLE_LOCALPAYEE\x10\x02\x12.\n" +
	"*RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR\x10\x03\x12+\n" +
	"'RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER\x10\x04\x12/\n" +
	"+RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR\x10\x05\x12\"\n" +
	"\x1eRIGHTS_CONTROLLER_ROLE_UNKNOWN\x10\x06*\xc3\x01\n" +
	"\x14RightsControllerType\x12&\n" +
	"\"RIGHTS_CONTROLLER_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER\x10\x01\x12+\n" +
	"'RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE\x10\x02\x12,\n" +
	"(RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE\x10\x03*\xb5\x02\n" +
	"\x0eRightsCoverage\x12\x1f\n" +
	"\x1bRIGHTS_COVERAGE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"RIGHTS_COVERAGE_MAKEAVAILABLERIGHT\x10\x01\x12#\n" +
	"\x1fRIGHTS_COVERAGE_MECHANICALRIGHT\x10\x02\x12#\n" +
	"\x1fRIGHTS_COVERAGE_PERFORMINGRIGHT\x10\x03\x12\x1e\n" +
	"\x1aRIGHTS_COVERAGE_PRINTRIGHT\x10\x04\x12%\n" +
	"!RIGHTS_COVERAGE_REPRODUCTIONRIGHT\x10\x05\x12(\n" +
	"$RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT\x10\x06\x12\x1f\n" +
	"\x1bRIGHTS_COVERAGE_USERDEFINED\x10\a*\xf1\x01\n" +
	"\x12RightsCoverageMWNL\x12'\n" +
	"#RIGHTS_COVERAGE_M_W_N_L_UNSPECIFIED\x10\x00\x12+\n" +
	"'RIGHTS_COVERAGE_M_W_N_L_MECHANICALRIGHT\x10\x01\x12+\n" +
	"'RIGHTS_COVERAGE_M_W_N_L_PERFORMINGRIGHT\x10\x02\x12&\n" +
	"\"RIGHTS_COVERAGE_M_W_N_L_PRINTRIGHT\x10\x03\x120\n" +
	",RIGHTS_COVERAGE_M_W_N_L_SYNCHRONIZATIONRIGHT\x10\x04*\xa2\x01\n" +
	"\x16RightsStatementProfile\x12(\n" +
	"$RIGHTS_STATEMENT_PROFILE_UNSPECIFIED\x10\x00\x120\n" +
	",RIGHTS_STATEMENT_PROFILE_MANDATEDUSAGERIGHTS\x10\x01\x12,\n" +
	"(RIGHTS_STATEMENT_PROFILE_RIGHTSSTATEMENT\x10\x02*\xf4\x02\n" +
	"\rRootChordNote\x12\x1f\n" +
	"\x1bROOT_CHORD_NOTE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11ROOT_CHORD_NOTE_A\x10\x01\x12\x18\n" +
	"\x14ROOT_CHORD_NOTE_AB_G\x10\x02\x12\x15\n" +
	"\x11ROOT_CHORD_NOTE_B\x10\x03\x12\x18\n" +
	"\x14ROOT_CHORD_NOTE_BB_A\x10\x04\x12\x15\n" +
	"\x11ROOT_CHORD_NOTE_C\x10\x05\x12\x18\n" +
	"\x14ROOT_CHORD_NOTE_C_DB\x10\x06\x12\x15\n" +
	"\x11ROOT_CHORD_NOTE_D\x10\a\x12\x15\n" +
	"\x11ROOT_CHORD_NOTE_E\x10\b\x12\x18\n" +
	"\x14ROOT_CHORD_NOTE_EB_D\x10\t\x12\x15\n" +
	"\x11ROOT_CHORD_NOTE_F\x10\n" +
	"\x12\x15\n" +
	"\x11ROOT_CHORD_NOTE_G\x10\v\x12\x18\n" +
	"\x14ROOT_CHORD_NOTE_GB_F\x10\f\x12\x1f\n" +
	"\x1bROOT_CHORD_NOTE_USERDEFINED\x10\r*\x92\x05\n" +
	"\x10RootChordQuality\x12\"\n" +
	"\x1eROOT_CHORD_QUALITY_UNSPECIFIED\x10\x00\x12'\n" +
	"#ROOT_CHORD_QUALITY_AUGMENTEDSEVENTH\x10\x01\x12%\n" +
	"!ROOT_CHORD_QUALITY_AUGMENTEDTRIAD\x10\x02\x12(\n" +
	"$ROOT_CHORD_QUALITY_DIMINISHEDSEVENTH\x10\x03\x12&\n" +
	"\"ROOT_CHORD_QUALITY_DIMINISHEDTRIAD\x10\x04\x12&\n" +
	"\"ROOT_CHORD_QUALITY_DOMINANTSEVENTH\x10\x05\x12\x1c\n" +
	"\x18ROOT_CHORD_QUALITY_FIFTH\x10\x06\x12,\n" +
	"(ROOT_CHORD_QUALITY_HALFDIMINISHEDSEVENTH\x10\a\x12#\n" +
	"\x1fROOT_CHORD_QUALITY_MAJORSEVENTH\x10\b\x12!\n" +
	"\x1dROOT_CHORD_QUALITY_MAJORSIXTH\x10\t\x12!\n" +
	"\x1dROOT_CHORD_QUALITY_MAJORTRIAD\x10\n" +
	"\x12(\n" +
	"$ROOT_CHORD_QUALITY_MAJORMINORSEVENTH\x10\v\x12#\n" +
	"\x1fROOT_CHORD_QUALITY_MINORSEVENTH\x10\f\x12!\n" +
	"\x1dROOT_CHORD_QUALITY_MINORSIXTH\x10\r\x12!\n" +
	"\x1dROOT_CHORD_QUALITY_MINORTRIAD\x10\x0e\x12 \n" +
	"\x1cROOT_CHORD_QUALITY_SUSPENDED\x10\x0f\x12\"\n" +
	"\x1eROOT_CHORD_QUALITY_USERDEFINED\x10\x10*\xd4\x03\n" +
	"\x1aRoyaltyRateCalculationType\x12-\n" +
	")ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED\x10\x00\x12B\n" +
	">ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE\x10\x01\x12=\n" +
	"9ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE\x10\x02\x127\n" +
	"3ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE\x10\x03\x12=\n" +
	"9ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE\x10\x04\x126\n" +
	"2ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE\x10\x05\x12%\n" +
	"!ROYALTY_RATE_CALCULATION_TYPE_PPD\x10\x06\x12-\n" +
	")ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE\x10\a*\x82\x01\n" +
	"\x0fRoyaltyRateType\x12!\n" +
	"\x1dROYALTY_RATE_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bROYALTY_RATE_TYPE_PENNYRATE\x10\x01\x12+\n" +
	"'ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE\x10\x02*\xcd\x04\n" +
	"\vSessionType\x12\x1c\n" +
	"\x18SESSION_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19SESSION_TYPE_ARTISTVOCALS\x10\x01\x12\x15\n" +
	"\x11SESSION_TYPE_DEMO\x10\x02\x12\x1f\n" +
	"\x1bSESSION_TYPE_DIGITALEDITING\x10\x03\x12\x18\n" +
	"\x14SESSION_TYPE_EDITING\x10\x04\x12 \n" +
	"\x1cSESSION_TYPE_LIVEPERFORMANCE\x10\x05\x12\x1a\n" +
	"\x16SESSION_TYPE_MASTERING\x10\x06\x12\x17\n" +
	"\x13SESSION_TYPE_MIXING\x10\a\x12\x18\n" +
	"\x14SESSION_TYPE_OVERDUB\x10\b\x12\x1e\n" +
	"\x1aSESSION_TYPE_PREPRODUCTION\x10\t\x12\x1d\n" +
	"\x19SESSION_TYPE_PRESERVATION\x10\n" +
	"\x12\x1b\n" +
	"\x17SESSION_TYPE_PRODUCTION\x10\v\x12\x18\n" +
	"\x14SESSION_TYPE_PROJECT\x10\f\x12\x1a\n" +
	"\x16SESSION_TYPE_RECORDING\x10\r\x12\x19\n" +
	"\x15SESSION_TYPE_REMIXING\x10\x0e\x12\x19\n" +
	"\x15SESSION_TYPE_TRACKING\x10\x0f\x12\x19\n" +
	"\x15SESSION_TYPE_TRANSFER\x10\x10\x12%\n" +
	"!SESSION_TYPE_TRANSFERSANDSAFETIES\x10\x11\x12\x1c\n" +
	"\x18SESSION_TYPE_USERDEFINED\x10\x12\x12\x16\n" +
	"\x12SESSION_TYPE_VOCAL\x10\x13*e\n" +
	"\x13SheetMusicCodecType\x12&\n" +
	"\"SHEET_MUSIC_CODEC_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"SHEET_MUSIC_CODEC_TYPE_USERDEFINED\x10\x01*T\n" +
	"\x0eSheetMusicType\x12 \n" +
	"\x1cSHEET_MUSIC_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cSHEET_MUSIC_TYPE_USERDEFINED\x10\x01*\xff\x01\n" +
	"\fSoftwareType\x12\x1d\n" +
	"\x19SOFTWARE_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" SOFTWARE_TYPE_INTERACTIVEBOOKLET\x10\x01\x12&\n" +
	"\"SOFTWARE_TYPE_MUSICALWORKBASEDGAME\x10\x02\x12)\n" +
	"%SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME\x10\x03\x12\x1d\n" +
	"\x19SOFTWARE_TYPE_SCREENSAVER\x10\x04\x12\x19\n" +
	"\x15SOFTWARE_TYPE_UNKNOWN\x10\x05\x12\x1d\n" +
	"\x19SOFTWARE_TYPE_USERDEFINED\x10\x06*\xc1\x03\n" +
	"\x12SoundRecordingType\x12$\n" +
	" SOUND_RECORDING_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eSOUND_RECORDING_TYPE_AUDIOSTEM\x10\x01\x12;\n" +
	"7SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING\x10\x02\x122\n" +
	".SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING\x10\x03\x12>\n" +
	":SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING\x10\x04\x125\n" +
	"1SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING\x10\x05\x121\n" +
	"-SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING\x10\x06\x12 \n" +
	"\x1cSOUND_RECORDING_TYPE_UNKNOWN\x10\a\x12$\n" +
	" SOUND_RECORDING_TYPE_USERDEFINED\x10\b*\x81\x02\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13STATUS_ASSETSNEEDED\x10\x01\x12\x1c\n" +
	"\x18STATUS_AWAITINGMATERIALS\x10\x02\x12\x13\n" +
	"\x0fSTATUS_BACKEDUP\x10\x03\x12\x13\n" +
	"\x0fSTATUS_CANCELED\x10\x04\x12\x11\n" +
	"\rSTATUS_CLOSED\x10\x05\x12\x14\n" +
	"\x10STATUS_COMPLETED\x10\x06\x12\x11\n" +
	"\rSTATUS_INWORK\x10\a\x12\x15\n" +
	"\x11STATUS_NOTSTARTED\x10\b\x12\x16\n" +
	"\x12STATUS_USERDEFINED\x10\t\x12\x13\n" +
	"\x0fSTATUS_VERIFIED\x10\n" +
	"*\xc6f\n" +
	"\bSubGenre\x12\x19\n" +
	"\x15SUB_GENRE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eSUB_GENRE_ACOUSTICCHICAGOBLUES\x10\x01\x12\x1a\n" +
	"\x16SUB_GENRE_BOOGIEWOOGIE\x10\x02\x12\x1a\n" +
	"\x16SUB_GENRE_BRITISHBLUES\x10\x03\x12\x1a\n" +
	"\x16SUB_GENRE_CHICAGOBLUES\x10\x04\x12 \n" +
	"\x1cSUB_GENRE_CLASSICFEMALEBLUES\x10\x05\x12\x1a\n" +
	"\x16SUB_GENRE_COUNTRYBLUES\x10\x06\x12\x18\n" +
	"\x14SUB_GENRE_DELTABLUES\x10\a\x12 \n" +
	"\x1cSUB_GENRE_ELECTRICTEXASBLUES\x10\b\x12\x1e\n" +
	"\x1aSUB_GENRE_HILLCOUNTRYBLUES\x10\t\x12\x18\n" +
	"\x14SUB_GENRE_JUMP_BLUES\x10\n" +
	"\x12\x19\n" +
	"\x15SUB_GENRE_MODERNBLUES\x10\v\x12\x1d\n" +
	"\x19SUB_GENRE_NEWORLEANSBLUES\x10\f\x12\x18\n" +
	"\x14SUB_GENRE_PIANOBLUES\x10\r\x12\x1b\n" +
	"\x17SUB_GENRE_PIEDMONTBLUES\x10\x0e\x12\x13\n" +
	"\x0fSUB_GENRE_ROOTS\x10\x0f\x12\x18\n" +
	"\x14SUB_GENRE_SWAMPBLUES\x10\x10\x12\x18\n" +
	"\x14SUB_GENRE_TEXASBLUES\x10\x11\x12!\n" +
	"\x1dSUB_GENRE_TRADITIONALACOUSTIC\x10\x12\x12!\n" +
	"\x1dSUB_GENRE_TRADITIONALELECTRIC\x10\x13\x12\x1c\n" +
	"\x18SUB_GENRE_WESTCOASTBLUES\x10\x14\x12\x1b\n" +
	"\x17SUB_GENRE_E_20THCENTURY\x10\x15\x12\x1b\n" +
	"\x17SUB_GENRE_E_21STCENTURY\x10\x16\x12\x18\n" +
	"\x14SUB_GENRE_ACOUSMATIC\x10\x17\x12\x1c\n" +
	"\x18SUB_GENRE_AMBROSIANCHANT\x10\x18\x12\x18\n" +
	"\x14SUB_GENRE_ARSANTIQUA\x10\x19\x12\x15\n" +
	"\x11SUB_GENRE_ARSNOVA\x10\x1a\x12\x15\n" +
	"\x11SUB_GENRE_BAROQUE\x10\x1b\x12\x1c\n" +
	"\x18SUB_GENRE_BYZANTINECHANT\x10\x1c\x12\x17\n" +
	"\x13SUB_GENRE_CLASSICAL\x10\x1d\x12 \n" +
	"\x1cSUB_GENRE_CLASSICALCROSSOVER\x10\x1e\x12\x1a\n" +
	"\x16SUB_GENRE_CONTEMPORARY\x10\x1f\x12\x1e\n" +
	"\x1aSUB_GENRE_EARLY20THCENTURY\x10 \x12\x1a\n" +
	"\x16SUB_GENRE_EARLYBAROQUE\x10!\x12\x1d\n" +
	"\x19SUB_GENRE_EARLYELECTRONIC\x10\"\x12\x1e\n" +
	"\x1aSUB_GENRE_EARLYRENAISSANCE\x10#\x12\x1b\n" +
	"\x17SUB_GENRE_EARLYROMANTIC\x10$\x12#\n" +
	"\x1fSUB_GENRE_EXPERIMENTALCLASSICAL\x10%\x12\x1b\n" +
	"\x17SUB_GENRE_EXPRESSIONISM\x10&\x12!\n" +
	"\x1dSUB_GENRE_FIRSTVIENNESESCHOOL\x10'\x12\x16\n" +
	"\x12SUB_GENRE_FUTURISM\x10(\x12\x1c\n" +
	"\x18SUB_GENRE_GREGORIANCHANT\x10)\x12\x1b\n" +
	"\x17SUB_GENRE_IMPRESSIONISM\x10*\x12\x1d\n" +
	"\x19SUB_GENRE_LATE20THCENTURY\x10+\x12\x19\n" +
	"\x15SUB_GENRE_LATEBAROQUE\x10,\x12\x1d\n" +
	"\x19SUB_GENRE_LATERENAISSANCE\x10-\x12\x1a\n" +
	"\x16SUB_GENRE_LATEROMANTIC\x10.\x12\x18\n" +
	"\x14SUB_GENRE_LIGHTMUSIC\x10/\x12\x16\n" +
	"\x12SUB_GENRE_MEDIEVAL\x100\x12\x1f\n" +
	"\x1bSUB_GENRE_MIDDLE20THCENTURY\x101\x12\x1b\n" +
	"\x17SUB_GENRE_MIDDLEBAROQUE\x102\x12\x1f\n" +
	"\x1bSUB_GENRE_MIDDLERENAISSANCE\x103\x12\x1c\n" +
	"\x18SUB_GENRE_MIDDLEROMANTIC\x104\x12\x18\n" +
	"\x14SUB_GENRE_MINIMALISM\x105\x12\x17\n" +
	"\x13SUB_GENRE_MODERNISM\x106\x12\x1d\n" +
	"\x19SUB_GENRE_MUSIQUECONCRETE\x107\x12\x19\n" +
	"\x15SUB_GENRE_NATIONALIST\x108\x12\x1a\n" +
	"\x16SUB_GENRE_NEOCLASSICAL\x109\x12\x19\n" +
	"\x15SUB_GENRE_NEOROMANTIC\x10:\x12\x1e\n" +
	"\x1aSUB_GENRE_ORCHESTRALFUSION\x10;\x12\x15\n" +
	"\x11SUB_GENRE_ORGANUM\x10<\x12\x17\n" +
	"\x13SUB_GENRE_PLAINSONG\x10=\x12\x1b\n" +
	"\x17SUB_GENRE_POSTCLASSICAL\x10>\x12\x1c\n" +
	"\x18SUB_GENRE_POSTMINIMALISM\x10?\x12\x1a\n" +
	"\x16SUB_GENRE_PRECLASSICAL\x10@\x12\x19\n" +
	"\x15SUB_GENRE_RENAISSANCE\x10A\x12\x16\n" +
	"\x12SUB_GENRE_ROMANTIC\x10B\x12\x17\n" +
	"\x13SUB_GENRE_SERIALISM\x10C\x12\x19\n" +
	"\x15SUB_GENRE_SPECTRALISM\x10D\x12 \n" +
	"\x1cSUB_GENRE_ALTERNATIVECOUNTRY\x10E\x12\x17\n" +
	"\x13SUB_GENRE_AMERICANA\x10F\x12\x1e\n" +
	"\x1aSUB_GENRE_BAKERSFIELDSOUND\x10G\x12\x17\n" +
	"\x13SUB_GENRE_BLUEGRASS\x10H\x12\x18\n" +
	"\x14SUB_GENRE_COUNTRYPOP\x10I\x12\x18\n" +
	"\x14SUB_GENRE_COUNTRYRAP\x10J\x12\x19\n" +
	"\x15SUB_GENRE_COUNTRYROCK\x10K\x12\x17\n" +
	"\x13SUB_GENRE_HONKYTONK\x10L\x12\x1b\n" +
	"\x17SUB_GENRE_MODERNCOUNTRY\x10M\x12\x1c\n" +
	"\x18SUB_GENRE_NASHVILLESOUND\x10N\x12#\n" +
	"\x1fSUB_GENRE_NEOTRADITIONALCOUNTRY\x10O\x12\x1b\n" +
	"\x17SUB_GENRE_OUTLAWCOUNTRY\x10P\x12\x1a\n" +
	"\x16SUB_GENRE_TEXASCOUNTRY\x10Q\x12 \n" +
	"\x1cSUB_GENRE_TRADITIONALCOUNTRY\x10R\x12\x1a\n" +
	"\x16SUB_GENRE_WESTERNSWING\x10S\x12\x1b\n" +
	"\x17SUB_GENRE_E_2STEPGARAGE\x10T\x12\x17\n" +
	"\x13SUB_GENRE_ACIDHOUSE\x10U\x12\x18\n" +
	"\x14SUB_GENRE_ACIDTECHNO\x10V\x12\x15\n" +
	"\x11SUB_GENRE_AMBIENT\x10W\x12\x1a\n" +
	"\x16SUB_GENRE_AMBIENTHOUSE\x10X\x12\x16\n" +
	"\x12SUB_GENRE_BASSLINE\x10Y\x12\x15\n" +
	"\x11SUB_GENRE_BIGBEAT\x10Z\x12\x17\n" +
	"\x13SUB_GENRE_BREAKBEAT\x10[\x12\x18\n" +
	"\x14SUB_GENRE_BROKENBEAT\x10\\\x12\x1a\n" +
	"\x16SUB_GENRE_CHICAGOHOUSE\x10]\x12\x17\n" +
	"\x13SUB_GENRE_DEEPHOUSE\x10^\x12\x1a\n" +
	"\x16SUB_GENRE_DETROITHOUSE\x10_\x12\x1b\n" +
	"\x17SUB_GENRE_DETROITTECHNO\x10`\x12\x1d\n" +
	"\x19SUB_GENRE_DIGITALHARDCORE\x10a\x12\x17\n" +
	"\x13SUB_GENRE_DOWNTEMPO\x10b\x12\x18\n" +
	"\x14SUB_GENRE_DRILLNBASS\x10c\x12\x17\n" +
	"\x13SUB_GENRE_DRUMNBASS\x10d\x12\x16\n" +
	"\x12SUB_GENRE_DRUMSTEP\x10e\x12\x17\n" +
	"\x13SUB_GENRE_DUBSTEPUK\x10f\x12\x17\n" +
	"\x13SUB_GENRE_DUBSTEPUS\x10g\x12\x18\n" +
	"\x14SUB_GENRE_DUBTRONICA\x10h\x12\x18\n" +
	"\x14SUB_GENRE_DUTCHHOUSE\x10i\x12\x11\n" +
	"\rSUB_GENRE_EBM\x10j\x12\x15\n" +
	"\x11SUB_GENRE_ELECTRO\x10k\x12\x1a\n" +
	"\x16SUB_GENRE_ELECTROHOUSE\x10l\x12\"\n" +
	"\x1eSUB_GENRE_ELECTRONICA_ECLECTIC\x10m\x12\x17\n" +
	"\x13SUB_GENRE_EURODANCE\x10n\x12$\n" +
	" SUB_GENRE_EXPERIMENTALELECTRONIC\x10o\x12\x19\n" +
	"\x15SUB_GENRE_FRENCHHOUSE\x10p\x12\x1a\n" +
	"\x16SUB_GENRE_FUTUREGARAGE\x10q\x12\x13\n" +
	"\x0fSUB_GENRE_GABBA\x10r\x12\x19\n" +
	"\x15SUB_GENRE_GARAGEHOUSE\x10s\x12\x14\n" +
	"\x10SUB_GENRE_GLITCH\x10t\x12\x1b\n" +
	"\x17SUB_GENRE_HAPPYHARDCORE\x10u\x12\x18\n" +
	"\x14SUB_GENRE_HARDTRANCE\x10v\x12\x16\n" +
	"\x12SUB_GENRE_HARDCORE\x10w\x12\x1f\n" +
	"\x1bSUB_GENRE_HARDCOREBREAKBEAT\x10x\x12\x17\n" +
	"\x13SUB_GENRE_HARDSTYLE\x10y\x12\x16\n" +
	"\x12SUB_GENRE_HIPHOUSE\x10z\x12\x13\n" +
	"\x0fSUB_GENRE_HOUSE\x10{\x12\x11\n" +
	"\rSUB_GENRE_IDM\x10|\x12\x17\n" +
	"\x13SUB_GENRE_JAZZHOUSE\x10}\x12\x14\n" +
	"\x10SUB_GENRE_JUNGLE\x10~\x12\x14\n" +
	"\x10SUB_GENRE_KWAITO\x10\x7f\x12\x19\n" +
	"\x14SUB_GENRE_LATINHOUSE\x10\x80\x01\x12\x1b\n" +
	"\x16SUB_GENRE_MINIMALHOUSE\x10\x81\x01\x12\x1c\n" +
	"\x17SUB_GENRE_MINIMALTECHNO\x10\x82\x01\x12\x19\n" +
	"\x14SUB_GENRE_NOISEMUSIC\x10\x83\x01\x12\x16\n" +
	"\x11SUB_GENRE_NUDISCO\x10\x84\x01\x12\x1f\n" +
	"\x1aSUB_GENRE_PROGRESSIVEHOUSE\x10\x85\x01\x12 \n" +
	"\x1bSUB_GENRE_PROGRESSIVETRANCE\x10\x86\x01\x12 \n" +
	"\x1bSUB_GENRE_PSYCHEDELICTRANCE\x10\x87\x01\x12\x16\n" +
	"\x11SUB_GENRE_SCHRANZ\x10\x88\x01\x12\x1a\n" +
	"\x15SUB_GENRE_SPEEDGARAGE\x10\x89\x01\x12\x18\n" +
	"\x13SUB_GENRE_SYNTHWAVE\x10\x8a\x01\x12\x18\n" +
	"\x13SUB_GENRE_TECHHOUSE\x10\x8b\x01\x12\x15\n" +
	"\x10SUB_GENRE_TECHNO\x10\x8c\x01\x12\x15\n" +
	"\x10SUB_GENRE_TRANCE\x10\x8d\x01\x12\x1a\n" +
	"\x15SUB_GENRE_TRIBALHOUSE\x10\x8e\x01\x12\x16\n" +
	"\x11SUB_GENRE_TRIPHOP\x10\x8f\x01\x12\x16\n" +
	"\x11SUB_GENRE_UKFUNKY\x10\x90\x01\x12\x17\n" +
	"\x12SUB_GENRE_UKGARAGE\x10\x91\x01\x12\x19\n" +
	"\x14SUB_GENRE_VOCALHOUSE\x10\x92\x01\x12\x1b\n" +
	"\x16SUB_GENRE_AMERICANFOLK\x10\x93\x01\x12&\n" +
	"!SUB_GENRE_AMERICANPRIMITIVEGUITAR\x10\x94\x01\x12\x1e\n" +
	"\x19SUB_GENRE_BARBERSHOPMUSIC\x10\x95\x01\x12\x1a\n" +
	"\x15SUB_GENRE_BRITISHFOLK\x10\x96\x01\x12\x1f\n" +
	"\x1aSUB_GENRE_CANADIANFIDDLING\x10\x97\x01\x12\x1b\n" +
	"\x16SUB_GENRE_CANADIANFOLK\x10\x98\x01\x12\x15\n" +
	"\x10SUB_GENRE_CELTIC\x10\x99\x01\x12\x1b\n" +
	"\x16SUB_GENRE_ELECTRICFOLK\x10\x9a\x01\x12\x1a\n" +
	"\x15SUB_GENRE_ENGLISHFOLK\x10\x9b\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FOLKBAROQUE\x10\x9c\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FOLKREVIVAL\x10\x9d\x01\x12\x18\n" +
	"\x13SUB_GENRE_INDIEFOLK\x10\x9e\x01\x12\x18\n" +
	"\x13SUB_GENRE_IRISHFOLK\x10\x9f\x01\x12 \n" +
	"\x1bSUB_GENRE_NORTHAMERICANFOLK\x10\xa0\x01\x12\x16\n" +
	"\x11SUB_GENRE_OLDTIME\x10\xa1\x01\x12\x1b\n" +
	"\x16SUB_GENRE_SCOTTISHFOLK\x10\xa2\x01\x12\x1a\n" +
	"\x15SUB_GENRE_SEASHANTIES\x10\xa3\x01\x12\x18\n" +
	"\x13SUB_GENRE_WELSHFOLK\x10\xa4\x01\x12\x15\n" +
	"\x10SUB_GENRE_ZYDECO\x10\xa5\x01\x12\x1c\n" +
	"\x17SUB_GENRE_CLASSICGOSPEL\x10\xa6\x01\x12\x1d\n" +
	"\x18SUB_GENRE_SOUTHERNGOSPEL\x10\xa7\x01\x12\x1d\n" +
	"\x18SUB_GENRE_ALTERNATIVERAP\x10\xa8\x01\x12\x1b\n" +
	"\x16SUB_GENRE_CHRISTIANRAP\x10\xa9\x01\x12\x1c\n" +
	"\x17SUB_GENRE_CLASSICHIPHOP\x10\xaa\x01\x12\x1b\n" +
	"\x16SUB_GENRE_CONSCIOUSRAP\x10\xab\x01\x12\x14\n" +
	"\x0fSUB_GENRE_CRUNK\x10\xac\x01\x12\x17\n" +
	"\x12SUB_GENRE_DIRTYRAP\x10\xad\x01\x12\x1e\n" +
	"\x19SUB_GENRE_EASTCOASTHIPHOP\x10\xae\x01\x12!\n" +
	"\x1cSUB_GENRE_EXPERIMENTALHIPHOP\x10\xaf\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FUNKCARIOCA\x10\xb0\x01\x12\x14\n" +
	"\x0fSUB_GENRE_GFUNK\x10\xb1\x01\x12\x19\n" +
	"\x14SUB_GENRE_GANGSTARAP\x10\xb2\x01\x12\x18\n" +
	"\x13SUB_GENRE_GOLDENAGE\x10\xb3\x01\x12\x14\n" +
	"\x0fSUB_GENRE_GRIME\x10\xb4\x01\x12\x1a\n" +
	"\x15SUB_GENRE_HARDCORERAP\x10\xb5\x01\x12!\n" +
	"\x1cSUB_GENRE_INSTRUMENTALHIPHOP\x10\xb6\x01\x12\x18\n" +
	"\x13SUB_GENRE_MIAMIBASS\x10\xb7\x01\x12\x15\n" +
	"\x10SUB_GENRE_POPRAP\x10\xb8\x01\x12\x1a\n" +
	"\x15SUB_GENRE_SOUTHERNRAP\x10\xb9\x01\x12\x13\n" +
	"\x0eSUB_GENRE_TRAP\x10\xba\x01\x12\x1e\n" +
	"\x19SUB_GENRE_WESTCOASTHIPHOP\x10\xbb\x01\x12\x17\n" +
	"\x12SUB_GENRE_ACIDJAZZ\x10\xbc\x01\x12\x1a\n" +
	"\x15SUB_GENRE_AFRICANJAZZ\x10\xbd\x01\x12\x1d\n" +
	"\x18SUB_GENRE_AVANTGARDEJAZZ\x10\xbe\x01\x12\x14\n" +
	"\x0fSUB_GENRE_BEBOP\x10\xbf\x01\x12\x18\n" +
	"\x13SUB_GENRE_BOSSANOVA\x10\xc0\x01\x12\x1f\n" +
	"\x1aSUB_GENRE_BRITISHDANCEBAND\x10\xc1\x01\x12\x17\n" +
	"\x12SUB_GENRE_CAPEJAZZ\x10\xc2\x01\x12\x17\n" +
	"\x12SUB_GENRE_COOLJAZZ\x10\xc3\x01\x12\x18\n" +
	"\x13SUB_GENRE_DIXIELAND\x10\xc4\x01\x12\x1c\n" +
	"\x17SUB_GENRE_ETHIOPIANJAZZ\x10\xc5\x01\x12\x17\n" +
	"\x12SUB_GENRE_FREEJAZZ\x10\xc6\x01\x12\x18\n" +
	"\x13SUB_GENRE_GYPSYJAZZ\x10\xc7\x01\x12\x16\n" +
	"\x11SUB_GENRE_HARDBOP\x10\xc8\x01\x12\x18\n" +
	"\x13SUB_GENRE_JAZZBLUES\x10\xc9\x01\x12\x17\n" +
	"\x12SUB_GENRE_JAZZFUNK\x10\xca\x01\x12\x19\n" +
	"\x14SUB_GENRE_JAZZFUSION\x10\xcb\x01\x12\x17\n" +
	"\x12SUB_GENRE_JAZZROCK\x10\xcc\x01\x12\x16\n" +
	"\x11SUB_GENRE_JAZZPOP\x10\xcd\x01\x12\x18\n" +
	"\x13SUB_GENRE_LATINJAZZ\x10\xce\x01\x12\x18\n" +
	"\x13SUB_GENRE_MODALJAZZ\x10\xcf\x01\x12\x1d\n" +
	"\x18SUB_GENRE_MODERNCREATIVE\x10\xd0\x01\x12\x19\n" +
	"\x14SUB_GENRE_MODERNJAZZ\x10\xd1\x01\x12\x16\n" +
	"\x11SUB_GENRE_POSTBOP\x10\xd2\x01\x12\x19\n" +
	"\x14SUB_GENRE_SMOOTHJAZZ\x10\xd3\x01\x12\x17\n" +
	"\x12SUB_GENRE_SOULJAZZ\x10\xd4\x01\x12\x14\n" +
	"\x0fSUB_GENRE_SWING\x10\xd5\x01\x12\x1b\n" +
	"\x16SUB_GENRE_SWINGREVIVAL\x10\xd6\x01\x12\x1e\n" +
	"\x19SUB_GENRE_TRADITIONALJAZZ\x10\xd7\x01\x12\x1d\n" +
	"\x18SUB_GENRE_TRADITIONALPOP\x10\xd8\x01\x12\x16\n" +
	"\x11SUB_GENRE_BACHATA\x10\xd9\x01\x12\x14\n" +
	"\x0fSUB_GENRE_BANDA\x10\xda\x01\x12\x17\n" +
	"\x12SUB_GENRE_BOOGALOO\x10\xdb\x01\x12\x18\n" +
	"\x13SUB_GENRE_BRAZILIAN\x10\xdc\x01\x12\x17\n" +
	"\x12SUB_GENRE_CONJUNTO\x10\xdd\x01\x12\x17\n" +
	"\x12SUB_GENRE_CORRIDOS\x10\xde\x01\x12\x1a\n" +
	"\x15SUB_GENRE_DURANGUENSE\x10\xdf\x01\x12\x16\n" +
	"\x11SUB_GENRE_GRUPERA\x10\xe0\x01\x12\x16\n" +
	"\x11SUB_GENRE_HUPANGO\x10\xe1\x01\x12\x17\n" +
	"\x12SUB_GENRE_MARIACHI\x10\xe2\x01\x12\x1d\n" +
	"\x18SUB_GENRE_NEWMEXICOMUSIC\x10\xe3\x01\x12\x16\n" +
	"\x11SUB_GENRE_NORTENO\x10\xe4\x01\x12\x17\n" +
	"\x12SUB_GENRE_RANCHERA\x10\xe5\x01\x12\x18\n" +
	"\x13SUB_GENRE_REGGAETON\x10\xe6\x01\x12\x1e\n" +
	"\x19SUB_GENRE_REGIONALMEXICAN\x10\xe7\x01\x12\x14\n" +
	"\x0fSUB_GENRE_SALSA\x10\xe8\x01\x12\x18\n" +
	"\x13SUB_GENRE_SERTANEJO\x10\xe9\x01\x12\x15\n" +
	"\x10SUB_GENRE_TEJANO\x10\xea\x01\x12\x19\n" +
	"\x14SUB_GENRE_AFRICANPOP\x10\xeb\x01\x12\x17\n" +
	"\x12SUB_GENRE_AFROBEAT\x10\xec\x01\x12\x1f\n" +
	"\x1aSUB_GENRE_ALTERNATIVEDANCE\x10\xed\x01\x12\x1d\n" +
	"\x18SUB_GENRE_ALTERNATIVEPOP\x10\xee\x01\x12\x12\n" +
	"\rSUB_GENRE_AXE\x10\xef\x01\x12\x16\n" +
	"\x11SUB_GENRE_BIKUTSI\x10\xf0\x01\x12\x18\n" +
	"\x13SUB_GENRE_BOLLYWOOD\x10\xf1\x01\x12\x1b\n" +
	"\x16SUB_GENRE_BRAZILIANPOP\x10\xf2\x01\x12\x14\n" +
	"\x0fSUB_GENRE_BREGA\x10\xf3\x01\x12\x17\n" +
	"\x12SUB_GENRE_CANTOPOP\x10\xf4\x01\x12\x1b\n" +
	"\x16SUB_GENRE_CARIBBEANPOP\x10\xf5\x01\x12\x19\n" +
	"\x14SUB_GENRE_CHAMBERPOP\x10\xf6\x01\x12\x19\n" +
	"\x14SUB_GENRE_CHIMURENGA\x10\xf7\x01\x12\x19\n" +
	"\x14SUB_GENRE_CHINESEPOP\x10\xf8\x01\x12\x17\n" +
	"\x12SUB_GENRE_DREAMPOP\x10\xf9\x01\x12\x1b\n" +
	"\x16SUB_GENRE_ELECTROCLASH\x10\xfa\x01\x12\x1c\n" +
	"\x17SUB_GENRE_ELECTRONICPOP\x10\xfb\x01\x12\x13\n" +
	"\x0eSUB_GENRE_ENKA\x10\xfc\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FILIPINOPOP\x10\xfd\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FOLKTRONICA\x10\xfe\x01\x12\x18\n" +
	"\x13SUB_GENRE_FRENCHPOP\x10\xff\x01\x12\x18\n" +
	"\x13SUB_GENRE_GERMANPOP\x10\x80\x02\x12\x17\n" +
	"\x12SUB_GENRE_GREEKPOP\x10\x81\x02\x12\x17\n" +
	"\x12SUB_GENRE_HIGHLIFE\x10\x82\x02\x12\x16\n" +
	"\x11SUB_GENRE_HIPLIFE\x10\x83\x02\x12\x19\n" +
	"\x14SUB_GENRE_HOKKIENPOP\x10\x84\x02\x12\x18\n" +
	"\x13SUB_GENRE_INDIANPOP\x10\x85\x02\x12\x17\n" +
	"\x12SUB_GENRE_INDIEPOP\x10\x86\x02\x12\x1b\n" +
	"\x16SUB_GENRE_INDIETRONICA\x10\x87\x02\x12\x1c\n" +
	"\x17SUB_GENRE_INDONESIANPOP\x10\x88\x02\x12\x1a\n" +
	"\x15SUB_GENRE_JAPANESEPOP\x10\x89\x02\x12\x18\n" +
	"\x13SUB_GENRE_KAYOKYOKU\x10\x8a\x02\x12\x16\n" +
	"\x11SUB_GENRE_KIZOMBA\x10\x8b\x02\x12\x18\n" +
	"\x13SUB_GENRE_KOREANPOP\x10\x8c\x02\x12\x15\n" +
	"\x10SUB_GENRE_KUDURO\x10\x8d\x02\x12\x1d\n" +
	"\x18SUB_GENRE_LATINFREESTYLE\x10\x8e\x02\x12\x19\n" +
	"\x14SUB_GENRE_MADCHESTER\x10\x8f\x02\x12\x16\n" +
	"\x11SUB_GENRE_MAKOSSA\x10\x90\x02\x12\x17\n" +
	"\x12SUB_GENRE_MANDOPOP\x10\x91\x02\x12\x15\n" +
	"\x10SUB_GENRE_MBALAX\x10\x92\x02\x12\x17\n" +
	"\x12SUB_GENRE_MBAQANGA\x10\x93\x02\x12\x1a\n" +
	"\x15SUB_GENRE_MODERNLAIKO\x10\x94\x02\x12\x18\n" +
	"\x13SUB_GENRE_MODERNPOP\x10\x95\x02\x12\x12\n" +
	"\rSUB_GENRE_MPB\x10\x96\x02\x12$\n" +
	"\x1fSUB_GENRE_MUSICOFTHEPHILIPPINES\x10\x97\x02\x12\x12\n" +
	"\rSUB_GENRE_NDW\x10\x98\x02\x12\x1d\n" +
	"\x18SUB_GENRE_NEOPSYCHEDELIA\x10\x99\x02\x12\x1a\n" +
	"\x15SUB_GENRE_NEWROMANTIC\x10\x9a\x02\x12\x16\n" +
	"\x11SUB_GENRE_NEWWAVE\x10\x9b\x02\x12\x17\n" +
	"\x12SUB_GENRE_NOISEPOP\x10\x9c\x02\x12\x1e\n" +
	"\x19SUB_GENRE_NOUVELLECHANSON\x10\x9d\x02\x12\x16\n" +
	"\x11SUB_GENRE_POPROCK\x10\x9e\x02\x12\x1d\n" +
	"\x18SUB_GENRE_PSYCHEDELICPOP\x10\x9f\x02\x12\x17\n" +
	"\x12SUB_GENRE_SCHLAGER\x10\xa0\x02\x12\x13\n" +
	"\x0eSUB_GENRE_SOCA\x10\xa1\x02\x12\x16\n" +
	"\x11SUB_GENRE_SOUKOUS\x10\xa2\x02\x12\x17\n" +
	"\x12SUB_GENRE_SYNTHPOP\x10\xa3\x02\x12\x15\n" +
	"\x10SUB_GENRE_TELUGU\x10\xa4\x02\x12\x16\n" +
	"\x11SUB_GENRE_TWEEPOP\x10\xa5\x02\x12\x17\n" +
	"\x12SUB_GENRE_AFROFUNK\x10\xa6\x02\x12\x1f\n" +
	"\x1aSUB_GENRE_ALTERNATIVER_N_B\x10\xa7\x02\x12\x1b\n" +
	"\x16SUB_GENRE_BLUEEYEDSOUL\x10\xa8\x02\x12\x15\n" +
	"\x10SUB_GENRE_BOOGIE\x10\xa9\x02\x12\x1a\n" +
	"\x15SUB_GENRE_CHICAGOSOUL\x10\xaa\x02\x12\x1b\n" +
	"\x16SUB_GENRE_CLASSICR_N_B\x10\xab\x02\x12 \n" +
	"\x1bSUB_GENRE_CONTEMPORARYR_N_B\x10\xac\x02\x12\x17\n" +
	"\x12SUB_GENRE_DEEPSOUL\x10\xad\x02\x12\x14\n" +
	"\x0fSUB_GENRE_DISCO\x10\xae\x02\x12\x15\n" +
	"\x10SUB_GENRE_DOOWOP\x10\xaf\x02\x12\x13\n" +
	"\x0eSUB_GENRE_FUNK\x10\xb0\x02\x12\x13\n" +
	"\x0eSUB_GENRE_GOGO\x10\xb1\x02\x12\x14\n" +
	"\x0fSUB_GENRE_HINRG\x10\xb2\x02\x12\x19\n" +
	"\x14SUB_GENRE_ITALODISCO\x10\xb3\x02\x12\x1a\n" +
	"\x15SUB_GENRE_MEMPHISSOUL\x10\xb4\x02\x12\x1e\n" +
	"\x19SUB_GENRE_MINNEAPOLISFUNK\x10\xb5\x02\x12\x1a\n" +
	"\x15SUB_GENRE_MODERNR_N_B\x10\xb6\x02\x12\x1a\n" +
	"\x15SUB_GENRE_MOTOWNSOUND\x10\xb7\x02\x12\x16\n" +
	"\x11SUB_GENRE_NEOSOUL\x10\xb8\x02\x12\x1b\n" +
	"\x16SUB_GENRE_NEWJACKSWING\x10\xb9\x02\x12\x1e\n" +
	"\x19SUB_GENRE_NEWORLEANSR_N_B\x10\xba\x02\x12\x15\n" +
	"\x10SUB_GENRE_OGFUNK\x10\xbb\x02\x12\x14\n" +
	"\x0fSUB_GENRE_PFUNK\x10\xbc\x02\x12\x1a\n" +
	"\x15SUB_GENRE_PHILLYSOUND\x10\xbd\x02\x12\x16\n" +
	"\x11SUB_GENRE_POPFUNK\x10\xbe\x02\x12\x1e\n" +
	"\x19SUB_GENRE_PSYCHEDELICSOUL\x10\xbf\x02\x12\x19\n" +
	"\x14SUB_GENRE_QUIETSTORM\x10\xc0\x02\x12\x18\n" +
	"\x13SUB_GENRE_RETROSOUL\x10\xc1\x02\x12\x13\n" +
	"\x0eSUB_GENRE_SOUL\x10\xc2\x02\x12\x1b\n" +
	"\x16SUB_GENRE_SOUTHERNSOUL\x10\xc3\x02\x12\x1f\n" +
	"\x1aSUB_GENRE_TRADITIONALR_N_B\x10\xc4\x02\x12&\n" +
	"!SUB_GENRE_URBANCONTEMPORARYGOSPEL\x10\xc5\x02\x12\x1c\n" +
	"\x17SUB_GENRE_WESTCOASTSOUL\x10\xc6\x02\x12\x18\n" +
	"\x13SUB_GENRE_DANCEHALL\x10\xc7\x02\x12\x12\n" +
	"\rSUB_GENRE_DUB\x10\xc8\x02\x12\x19\n" +
	"\x14SUB_GENRE_ROCKSTEADY\x10\xc9\x02\x12\x1a\n" +
	"\x15SUB_GENRE_ROOTSREGGAE\x10\xca\x02\x12\x12\n" +
	"\rSUB_GENRE_SKA\x10\xcb\x02\x12\x17\n" +
	"\x12SUB_GENRE_AFROROCK\x10\xcc\x02\x12\x17\n" +
	"\x12SUB_GENRE_ALTMETAL\x10\xcd\x02\x12\x1e\n" +
	"\x19SUB_GENRE_ALTERNATIVEROCK\x10\xce\x02\x12\x16\n" +
	"\x11SUB_GENRE_ARTROCK\x10\xcf\x02\x12\x19\n" +
	"\x14SUB_GENRE_BLACKMETAL\x10\xd0\x02\x12\x19\n" +
	"\x14SUB_GENRE_BOOGIEROCK\x10\xd1\x02\x12\x17\n" +
	"\x12SUB_GENRE_BRITROCK\x10\xd2\x02\x12\x1e\n" +
	"\x19SUB_GENRE_BRITISHINVASION\x10\xd3\x02\x12\x16\n" +
	"\x11SUB_GENRE_BRITPOP\x10\xd4\x02\x12\x1a\n" +
	"\x15SUB_GENRE_CLASSICROCK\x10\xd5\x02\x12\x17\n" +
	"\x12SUB_GENRE_DARKWAVE\x10\xd6\x02\x12\x19\n" +
	"\x14SUB_GENRE_DEATHMETAL\x10\xd7\x02\x12\x18\n" +
	"\x13SUB_GENRE_DOOMMETAL\x10\xd8\x02\x12\x18\n" +
	"\x13SUB_GENRE_EARLYROCK\x10\xd9\x02\x12\x1a\n" +
	"\x15SUB_GENRE_ELECTROGOTH\x10\xda\x02\x12\x16\n" +
	"\x11SUB_GENRE_EMOROCK\x10\xdb\x02\x12\x1f\n" +
	"\x1aSUB_GENRE_EXPERIMENTALROCK\x10\xdc\x02\x12\x18\n" +
	"\x13SUB_GENRE_FUNKMETAL\x10\xdd\x02\x12\x19\n" +
	"\x14SUB_GENRE_GARAGEROCK\x10\xde\x02\x12\x17\n" +
	"\x12SUB_GENRE_GLAMROCK\x10\xdf\x02\x12\x1a\n" +
	"\x15SUB_GENRE_GOTHICMETAL\x10\xe0\x02\x12\x19\n" +
	"\x14SUB_GENRE_GOTHICROCK\x10\xe1\x02\x12\x18\n" +
	"\x13SUB_GENRE_GRINDCORE\x10\xe2\x02\x12\x15\n" +
	"\x10SUB_GENRE_GRUNGE\x10\xe3\x02\x12\x18\n" +
	"\x13SUB_GENRE_HAIRMETAL\x10\xe4\x02\x12\x17\n" +
	"\x12SUB_GENRE_HARDROCK\x10\xe5\x02\x12\x1b\n" +
	"\x16SUB_GENRE_HARDCOREPUNK\x10\xe6\x02\x12\x1c\n" +
	"\x17SUB_GENRE_HEARTLANDROCK\x10\xe7\x02\x12\x18\n" +
	"\x13SUB_GENRE_INDIEROCK\x10\xe8\x02\x12\x19\n" +
	"\x14SUB_GENRE_INDUSTRIAL\x10\xe9\x02\x12\x1e\n" +
	"\x19SUB_GENRE_INDUSTRIALMETAL\x10\xea\x02\x12\x1a\n" +
	"\x15SUB_GENRE_JOVEMGUARDA\x10\xeb\x02\x12\x18\n" +
	"\x13SUB_GENRE_KRAUTROCK\x10\xec\x02\x12\x17\n" +
	"\x12SUB_GENRE_MATHROCK\x10\xed\x02\x12\x19\n" +
	"\x14SUB_GENRE_MERSEYBEAT\x10\xee\x02\x12\x14\n" +
	"\x0fSUB_GENRE_METAL\x10\xef\x02\x12\x18\n" +
	"\x13SUB_GENRE_METALCORE\x10\xf0\x02\x12\x15\n" +
	"\x10SUB_GENRE_NOWAVE\x10\xf1\x02\x12\x18\n" +
	"\x13SUB_GENRE_NOISEROCK\x10\xf2\x02\x12\x16\n" +
	"\x11SUB_GENRE_NUMETAL\x10\xf3\x02\x12\x11\n" +
	"\fSUB_GENRE_OI\x10\xf4\x02\x12\x16\n" +
	"\x11SUB_GENRE_POPPUNK\x10\xf5\x02\x12\x19\n" +
	"\x14SUB_GENRE_POSTGRUNGE\x10\xf6\x02\x12\x17\n" +
	"\x12SUB_GENRE_POSTROCK\x10\xf7\x02\x12\x1b\n" +
	"\x16SUB_GENRE_POSTHARDCORE\x10\xf8\x02\x12\x17\n" +
	"\x12SUB_GENRE_POSTPUNK\x10\xf9\x02\x12\x17\n" +
	"\x12SUB_GENRE_POWERPOP\x10\xfa\x02\x12\x1f\n" +
	"\x1aSUB_GENRE_PROGRESSIVEMETAL\x10\xfb\x02\x12\x1e\n" +
	"\x19SUB_GENRE_PROGRESSIVEROCK\x10\xfc\x02\x12\x18\n" +
	"\x13SUB_GENRE_PROTOPUNK\x10\xfd\x02\x12\x1e\n" +
	"\x19SUB_GENRE_PSYCHEDELICROCK\x10\xfe\x02\x12\x1a\n" +
	"\x15SUB_GENRE_PSYCHOBILLY\x10\xff\x02\x12\x13\n" +
	"\x0eSUB_GENRE_PUNK\x10\x80\x03\x12\x18\n" +
	"\x13SUB_GENRE_RIOTGRRRL\x10\x81\x03\x12\x18\n" +
	"\x13SUB_GENRE_ROCKNROLL\x10\x82\x03\x12\x19\n" +
	"\x14SUB_GENRE_ROCKABILLY\x10\x83\x03\x12\x18\n" +
	"\x13SUB_GENRE_SAMBAROCK\x10\x84\x03\x12\x16\n" +
	"\x11SUB_GENRE_SCREAMO\x10\x85\x03\x12\x17\n" +
	"\x12SUB_GENRE_SHOEGAZE\x10\x86\x03\x12\x17\n" +
	"\x12SUB_GENRE_SOFTROCK\x10\x87\x03\x12 \n" +
	"\x1bSUB_GENRE_SOUTHAMERICANROCK\x10\x88\x03\x12\x1b\n" +
	"\x16SUB_GENRE_SOUTHERNROCK\x10\x89\x03\x12\x18\n" +
	"\x13SUB_GENRE_SPACEROCK\x10\x8a\x03\x12\x19\n" +
	"\x14SUB_GENRE_SPEEDMETAL\x10\x8b\x03\x12\x19\n" +
	"\x14SUB_GENRE_STONERROCK\x10\x8c\x03\x12\x13\n" +
	"\x0eSUB_GENRE_SURF\x10\x8d\x03\x12\x18\n" +
	"\x13SUB_GENRE_SWAMPROCK\x10\x8e\x03\x12\x1b\n" +
	"\x16SUB_GENRE_THIRDWAVESKA\x10\x8f\x03\x12\x1a\n" +
	"\x15SUB_GENRE_THRASHMETAL\x10\x90\x03\x12\x19\n" +
	"\x14SUB_GENRE_TROPICALIA\x10\x91\x03\x12\x16\n" +
	"\x11SUB_GENRE_TWOTONE\x10\x92\x03\x12\x1a\n" +
	"\x15SUB_GENRE_UNDERGROUND\x10\x93\x03\x12\x19\n" +
	"\x14SUB_GENRE_COMMENTARY\x10\x94\x03\x12\x1b\n" +
	"\x16SUB_GENRE_CONVERSATION\x10\x95\x03\x12\x18\n" +
	"\x13SUB_GENRE_INTERVIEW\x10\x96\x03\x12\x18\n" +
	"\x13SUB_GENRE_MONOLOGUE\x10\x97\x03\x12\x15\n" +
	"\x10SUB_GENRE_POETRY\x10\x98\x03\x12\x13\n" +
	"\x0eSUB_GENRE_SKIT\x10\x99\x03\x12\x1c\n" +
	"\x17SUB_GENRE_STANDUPCOMEDY\x10\x9a\x03\x12\x14\n" +
	"\x0fSUB_GENRE_AFOXE\x10\x9b\x03\x12\x1b\n" +
	"\x16SUB_GENRE_AFRICANMUSIC\x10\x9c\x03\x12\x1f\n" +
	"\x1aSUB_GENRE_ARGENTINIANMUSIC\x10\x9d\x03\x12\x1c\n" +
	"\x17SUB_GENRE_BALINESEMUSIC\x10\x9e\x03\x12\x1d\n" +
	"\x18SUB_GENRE_BRAZILIANMUSIC\x10\x9f\x03\x12\x16\n" +
	"\x11SUB_GENRE_CALYPSO\x10\xa0\x03\x12\x1c\n" +
	"\x17SUB_GENRE_CAPOEIRAMUSIC\x10\xa1\x03\x12\x1d\n" +
	"\x18SUB_GENRE_CARIBBEANMUSIC\x10\xa2\x03\x12\x1c\n" +
	"\x17SUB_GENRE_CARNATICMUSIC\x10\xa3\x03\x12\x18\n" +
	"\x13SUB_GENRE_CHACHACHA\x10\xa4\x03\x12\x1b\n" +
	"\x16SUB_GENRE_CHILEANMUSIC\x10\xa5\x03\x12\x14\n" +
	"\x0fSUB_GENRE_CHORO\x10\xa6\x03\x12\x1d\n" +
	"\x18SUB_GENRE_COLOMBIANMUSIC\x10\xa7\x03\x12\x1a\n" +
	"\x15SUB_GENRE_CONTRADANZA\x10\xa8\x03\x12\x19\n" +
	"\x14SUB_GENRE_CUBANMUSIC\x10\xa9\x03\x12\x14\n" +
	"\x0fSUB_GENRE_CUECA\x10\xaa\x03\x12\x15\n" +
	"\x10SUB_GENRE_CUMBIA\x10\xab\x03\x12\x19\n" +
	"\x14SUB_GENRE_CZECHMUSIC\x10\xac\x03\x12\x15\n" +
	"\x10SUB_GENRE_DANZON\x10\xad\x03\x12\x17\n" +
	"\x12SUB_GENRE_DIMOTIKO\x10\xae\x03\x12\x1d\n" +
	"\x18SUB_GENRE_DOMINICANMUSIC\x10\xaf\x03\x12\x13\n" +
	"\x0eSUB_GENRE_FADO\x10\xb0\x03\x12\x17\n" +
	"\x12SUB_GENRE_FLAMENCO\x10\xb1\x03\x12\x1a\n" +
	"\x15SUB_GENRE_FRENCHMUSIC\x10\xb2\x03\x12\x1a\n" +
	"\x15SUB_GENRE_GAUCHOMUSIC\x10\xb3\x03\x12\x1a\n" +
	"\x15SUB_GENRE_GERMANMUSIC\x10\xb4\x03\x12\x19\n" +
	"\x14SUB_GENRE_GREEKMUSIC\x10\xb5\x03\x12\x17\n" +
	"\x12SUB_GENRE_GUARACHA\x10\xb6\x03\x12'\n" +
	"\"SUB_GENRE_HINDUSTANICLASSICALMUSIC\x10\xb7\x03\x12\x1a\n" +
	"\x15SUB_GENRE_INDIANMUSIC\x10\xb8\x03\x12\x1e\n" +
	"\x19SUB_GENRE_INDONESIANMUSIC\x10\xb9\x03\x12\x19\n" +
	"\x14SUB_GENRE_IRISHMUSIC\x10\xba\x03\x12\x1b\n" +
	"\x16SUB_GENRE_ITALIANMUSIC\x10\xbb\x03\x12\x1c\n" +
	"\x17SUB_GENRE_JAMAICANMUSIC\x10\xbc\x03\x12\x1c\n" +
	"\x17SUB_GENRE_JAVANESEMUSIC\x10\xbd\x03\x12\x1a\n" +
	"\x15SUB_GENRE_JEWISHMUSIC\x10\xbe\x03\x12\x1a\n" +
	"\x15SUB_GENRE_JUGENSEMBLE\x10\xbf\x03\x12\x16\n" +
	"\x11SUB_GENRE_KLEZMER\x10\xc0\x03\x12\x14\n" +
	"\x0fSUB_GENRE_MAMBO\x10\xc1\x03\x12\x17\n" +
	"\x12SUB_GENRE_MARACATU\x10\xc2\x03\x12\x17\n" +
	"\x12SUB_GENRE_MERENGUE\x10\xc3\x03\x12\x1b\n" +
	"\x16SUB_GENRE_MEXICANMUSIC\x10\xc4\x03\x12!\n" +
	"\x1cSUB_GENRE_MIDDLEEASTERNMUSIC\x10\xc5\x03\x12\x1d\n" +
	"\x18SUB_GENRE_NEAPOLITANSONG\x10\xc6\x03\x12!\n" +
	"\x1cSUB_GENRE_NORTHAMERICANMUSIC\x10\xc7\x03\x12\x1d\n" +
	"\x18SUB_GENRE_PAKISTANIMUSIC\x10\xc8\x03\x12\x13\n" +
	"\x0eSUB_GENRE_PALO\x10\xc9\x03\x12\x13\n" +
	"\x0eSUB_GENRE_PILN\x10\xca\x03\x12\x14\n" +
	"\x0fSUB_GENRE_POLKA\x10\xcb\x03\x12\x1e\n" +
	"\x19SUB_GENRE_PORTUGUESEMUSIC\x10\xcc\x03\x12\x1f\n" +
	"\x1aSUB_GENRE_PUERTORICANMUSIC\x10\xcd\x03\x12\x1b\n" +
	"\x16SUB_GENRE_PUNJABIMUSIC\x10\xce\x03\x12\x16\n" +
	"\x11SUB_GENRE_RAGTIME\x10\xcf\x03\x12\x16\n" +
	"\x11SUB_GENRE_REPENTE\x10\xd0\x03\x12\x1c\n" +
	"\x17SUB_GENRE_ROMANIANMUSIC\x10\xd1\x03\x12\x15\n" +
	"\x10SUB_GENRE_SALVES\x10\xd2\x03\x12\x14\n" +
	"\x0fSUB_GENRE_SAMBA\x10\xd3\x03\x12\x12\n" +
	"\rSUB_GENRE_SON\x10\xd4\x03\x12!\n" +
	"\x1cSUB_GENRE_SOUTHAMERICANMUSIC\x10\xd5\x03\x12\x1b\n" +
	"\x16SUB_GENRE_SPANISHMUSIC\x10\xd6\x03\x12\x18\n" +
	"\x13SUB_GENRE_SPIRITUAL\x10\xd7\x03\x12\x14\n" +
	"\x0fSUB_GENRE_TANGO\x10\xd8\x03\x12\x1b\n" +
	"\x16SUB_GENRE_TIBETANMUSIC\x10\xd9\x03\x12\x15\n" +
	"\x10SUB_GENRE_TONADA\x10\xda\x03\x12\x1b\n" +
	"\x16SUB_GENRE_TURKISHMUSIC\x10\xdb\x03\x12$\n" +
	"\x1fSUB_GENRE_TURKISHCLASSICALMUSIC\x10\xdc\x03\x12\x18\n" +
	"\x13SUB_GENRE_WORKSONGS\x10\xdd\x03\x12\x16\n" +
	"\x11SUB_GENRE_EXOTICA\x10\xde\x03\x12\x15\n" +
	"\x10SUB_GENRE_NEWAGE\x10\xdf\x03\x12\x1a\n" +
	"\x15SUB_GENRE_NEWFLAMENCO\x10\xe0\x03\x12\x1e\n" +
	"\x19SUB_GENRE_WORLDFUSIONJAZZ\x10\xe1\x03\x12\x18\n" +
	"\x13SUB_GENRE_WORLDBEAT\x10\xe2\x03\x12\x1a\n" +
	"\x15SUB_GENRE_USERDEFINED\x10\xe3\x03*g\n" +
	"\fSubTitleType\x12\x1e\n" +
	"\x1aSUB_TITLE_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17SUB_TITLE_TYPE_LOCATION\x10\x01\x12\x1a\n" +
	"\x16SUB_TITLE_TYPE_VERSION\x10\x02*l\n" +
	"\vSummaryType\x12\x1c\n" +
	"\x18SUMMARY_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18SUMMARY_TYPE_CONTRIBUTOR\x10\x01\x12!\n" +
	"\x1dSUMMARY_TYPE_RIGHTSCONTROLLER\x10\x02*\xbb\x06\n" +
	"\x11SupplyChainStatus\x12#\n" +
	"\x1fSUPPLY_CHAIN_STATUS_UNSPECIFIED\x10\x00\x125\n" +
	"1SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR\x10\x01\x126\n" +
	"2SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR\x10\x02\x12D\n" +
	"@SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR\x10\x03\x128\n" +
	"4SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR\x10\x04\x127\n" +
	"3SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR\x10\x05\x12;\n" +
	"7SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR\x10\x06\x127\n" +
	"3SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS\x10\a\x12+\n" +
	"'SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE\x10\b\x12;\n" +
	"7SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR\x10\t\x123\n" +
	"/SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION\x10\n" +
	"\x12@\n" +
	"<SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR\x10\v\x12#\n" +
	"\x1fSUPPLY_CHAIN_STATUS_USERDEFINED\x10\f\x125\n" +
	"1SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE\x10\r\x12&\n" +
	"\"SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT\x10\x0e*\xf0\x03\n" +
	"\x05Tempo\x12\x15\n" +
	"\x11TEMPO_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fTEMPO_ADAGIETTO\x10\x01\x12\x10\n" +
	"\fTEMPO_ADAGIO\x10\x02\x12\x14\n" +
	"\x10TEMPO_ADAGISSIMO\x10\x03\x12\x14\n" +
	"\x10TEMPO_ALLEGRETTO\x10\x04\x12\x16\n" +
	"\x12TEMPO_ALLEGRISSIMO\x10\x05\x12\x11\n" +
	"\rTEMPO_ALLEGRO\x10\x06\x12\x19\n" +
	"\x15TEMPO_ALLEGROMODERATO\x10\a\x12\x11\n" +
	"\rTEMPO_ANDANTE\x10\b\x12\x19\n" +
	"\x15TEMPO_ANDANTEMODERATO\x10\t\x12\x13\n" +
	"\x0fTEMPO_ANDANTINO\x10\n" +
	"\x12\x0f\n" +
	"\vTEMPO_GRAVE\x10\v\x12\x13\n" +
	"\x0fTEMPO_LARGHETTO\x10\f\x12\x15\n" +
	"\x11TEMPO_LARGHISSIMO\x10\r\x12\x0f\n" +
	"\vTEMPO_LARGO\x10\x0e\x12\x0f\n" +
	"\vTEMPO_LENTO\x10\x0f\x12\x18\n" +
	"\x14TEMPO_MARCIAMODERATO\x10\x10\x12\x12\n" +
	"\x0eTEMPO_MODERATO\x10\x11\x12\x15\n" +
	"\x11TEMPO_PRESTISSIMO\x10\x12\x12\x10\n" +
	"\fTEMPO_PRESTO\x10\x13\x12\x15\n" +
	"\x11TEMPO_USERDEFINED\x10\x14\x12\x10\n" +
	"\fTEMPO_VIVACE\x10\x15\x12\x15\n" +
	"\x11TEMPO_VIVACISSIMO\x10\x16*r\n" +
	"\x11TerritoryCodeType\x12#\n" +
	"\x1fTERRITORY_CODE_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17TERRITORY_CODE_TYPE_ISO\x10\x01\x12\x1b\n" +
	"\x17TERRITORY_CODE_TYPE_TIS\x10\x02*\x9d\x02\n" +
	")TerritoryCodeTypeIncludingDeprecatedCodes\x12>\n" +
	":TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED\x10\x00\x12@\n" +
	"<TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO\x10\x01\x126\n" +
	"2TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO\x10\x02\x126\n" +
	"2TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS\x10\x03*\xd0\x05\n" +
	"\rTextCodecType\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15TEXT_CODEC_TYPE_ASCII\x10\x01\x12'\n" +
	"#TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT\x10\x02\x12\x1a\n" +
	"\x16TEXT_CODEC_TYPE_EBU_TT\x10\x03\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_ENHANCEDLRC\x10\x04\x12\x18\n" +
	"\x14TEXT_CODEC_TYPE_EPUB\x10\x05\x12\x18\n" +
	"\x14TEXT_CODEC_TYPE_HTML\x10\x06\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_LRC\x10\a\x12!\n" +
	"\x1dTEXT_CODEC_TYPE_MICROSOFTWORD\x10\b\x12$\n" +
	" TEXT_CODEC_TYPE_OPENDOCUMENTTEXT\x10\t\x12\x19\n" +
	"\x15TEXT_CODEC_TYPE_OOXML\x10\n" +
	"\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_PDF\x10\v\x12\x1e\n" +
	"\x1aTEXT_CODEC_TYPE_POSTSCRIPT\x10\f\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_RTF\x10\r\x12\x1d\n" +
	"\x19TEXT_CODEC_TYPE_SIMPLELRC\x10\x0e\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_SRT\x10\x0f\x12\x18\n" +
	"\x14TEXT_CODEC_TYPE_TTML\x10\x10\x12\x1b\n" +
	"\x17TEXT_CODEC_TYPE_UNKNOWN\x10\x11\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_USERDEFINED\x10\x12\x12\x1c\n" +
	"\x18TEXT_CODEC_TYPE_UTF8TEXT\x10\x13\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_VTT\x10\x14\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_WINDOWSTEXT\x10\x15\x12\x19\n" +
	"\x15TEXT_CODEC_TYPE_XHTML\x10\x16\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_XML\x10\x17*\xf7\x01\n" +
	"\bTextType\x12\x19\n" +
	"\x15TEXT_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TEXT_TYPE_CAPTION\x10\x01\x12\x13\n" +
	"\x0fTEXT_TYPE_EBOOK\x10\x02\x12\x18\n" +
	"\x14TEXT_TYPE_LINERNOTES\x10\x03\x12\x17\n" +
	"\x13TEXT_TYPE_LYRICTEXT\x10\x04\x12#\n" +
	"\x1fTEXT_TYPE_NONINTERACTIVEBOOKLET\x10\x05\x12\x1a\n" +
	"\x16TEXT_TYPE_TEXTDOCUMENT\x10\x06\x12\x15\n" +
	"\x11TEXT_TYPE_UNKNOWN\x10\a\x12\x19\n" +
	"\x15TEXT_TYPE_USERDEFINED\x10\b*\x86\x01\n" +
	"\fTextTypeATOM\x12!\n" +
	"\x1dTEXT_TYPE_A_T_O_M_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16TEXT_TYPE_A_T_O_M_TEXT\x10\x01\x12\x1a\n" +
	"\x16TEXT_TYPE_A_T_O_M_HTML\x10\x02\x12\x1b\n" +
	"\x17TEXT_TYPE_A_T_O_M_XHTML\x10\x03*\xae\xcf\x01\n" +
	"\x05Theme\x12\x15\n" +
	"\x11THEME_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10THEME_ACTIVITIES\x10\x01\x12\x14\n" +
	"\x10THEME_COMINGHOME\x10\x02\x12\x11\n" +
	"\rTHEME_RAPGAME\x10\x03\x12\x13\n" +
	"\x0fTHEME_ALLIGATOR\x10\x04\x12\x11\n" +
	"\rTHEME_ANIMALS\x10\x05\x12\x0e\n" +
	"\n" +
	"THEME_BEAR\x10\x06\x12\x0e\n" +
	"\n" +
	"THEME_BIRD\x10\a\x12\r\n" +
	"\tTHEME_BUG\x10\b\x12\x13\n" +
	"\x0fTHEME_BUTTERFLY\x10\t\x12\r\n" +
	"\tTHEME_CAT\x10\n" +
	"\x12\r\n" +
	"\tTHEME_COW\x10\v\x12\x13\n" +
	"\x0fTHEME_CROCODILE\x10\f\x12\x12\n" +
	"\x0eTHEME_DINOSAUR\x10\r\x12\r\n" +
	"\tTHEME_DOG\x10\x0e\x12\x11\n" +
	"\rTHEME_DOLPHIN\x10\x0f\x12\x0f\n" +
	"\vTHEME_EAGLE\x10\x10\x12\x12\n" +
	"\x0eTHEME_ELEPHANT\x10\x11\x12\x0e\n" +
	"\n" +
	"THEME_FISH\x10\x12\x12\x0e\n" +
	"\n" +
	"THEME_FOWL\x10\x13\x12\r\n" +
	"\tTHEME_FOX\x10\x14\x12\x0e\n" +
	"\n" +
	"THEME_FROG\x10\x15\x12\x0f\n" +
	"\vTHEME_HORSE\x10\x16\x12\x10\n" +
	"\fTHEME_INSECT\x10\x17\x12\x12\n" +
	"\x0eTHEME_KANGAROO\x10\x18\x12\x0e\n" +
	"\n" +
	"THEME_LION\x10\x19\x12\x10\n" +
	"\fTHEME_MAMMAL\x10\x1a\x12\x10\n" +
	"\fTHEME_MONKEY\x10\x1b\x12\x0f\n" +
	"\vTHEME_MOUSE\x10\x1c\x12\x0e\n" +
	"\n" +
	"THEME_MULE\x10\x1d\x12\x15\n" +
	"\x11THEME_NIGHTINGALE\x10\x1e\x12\r\n" +
	"\tTHEME_PIG\x10\x1f\x12\x0e\n" +
	"\n" +
	"THEME_PONY\x10 \x12\x12\n" +
	"\x0eTHEME_PORPOISE\x10!\x12\x10\n" +
	"\fTHEME_RABBIT\x10\"\x12\r\n" +
	"\tTHEME_RAT\x10#\x12\x11\n" +
	"\rTHEME_REPTILE\x10$\x12\x0f\n" +
	"\vTHEME_SHARK\x10%\x12\x0f\n" +
	"\vTHEME_SHEEP\x10&\x12\x0f\n" +
	"\vTHEME_SNAKE\x10'\x12\x10\n" +
	"\fTHEME_SPIDER\x10(\x12\x0f\n" +
	"\vTHEME_TIGER\x10)\x12\x0f\n" +
	"\vTHEME_WHALE\x10*\x12\x0e\n" +
	"\n" +
	"THEME_WOLF\x10+\x12\x0e\n" +
	"\n" +
	"THEME_ARMS\x10,\x12\x0e\n" +
	"\n" +
	"THEME_BACK\x10-\x12\x0f\n" +
	"\vTHEME_BELLY\x10.\x12\x0f\n" +
	"\vTHEME_BLOOD\x10/\x12\x0e\n" +
	"\n" +
	"THEME_BODY\x100\x12\x13\n" +
	"\x0fTHEME_BODYPARTS\x101\x12\x0f\n" +
	"\vTHEME_BRAIN\x102\x12\x0e\n" +
	"\n" +
	"THEME_EARS\x103\x12\x0e\n" +
	"\n" +
	"THEME_EYES\x104\x12\x0e\n" +
	"\n" +
	"THEME_FACE\x105\x12\x0e\n" +
	"\n" +
	"THEME_FEET\x106\x12\x11\n" +
	"\rTHEME_FINGERS\x107\x12\r\n" +
	"\tTHEME_FUR\x108\x12\x0e\n" +
	"\n" +
	"THEME_HAIR\x109\x12\x0f\n" +
	"\vTHEME_HANDS\x10:\x12\x0e\n" +
	"\n" +
	"THEME_HEAD\x10;\x12\x0f\n" +
	"\vTHEME_HEART\x10<\x12\x0e\n" +
	"\n" +
	"THEME_HIPS\x10=\x12\x0f\n" +
	"\vTHEME_KNEES\x10>\x12\x0e\n" +
	"\n" +
	"THEME_LEGS\x10?\x12\x0e\n" +
	"\n" +
	"THEME_LIPS\x10@\x12\x0f\n" +
	"\vTHEME_MOUTH\x10A\x12\x1b\n" +
	"\x17THEME_MULTIPLEBODYPARTS\x10B\x12\x0e\n" +
	"\n" +
	"THEME_NECK\x10C\x12\r\n" +
	"\tTHEME_PAW\x10D\x12\x0e\n" +
	"\n" +
	"THEME_REAR\x10E\x12\x12\n" +
	"\x0eTHEME_SHOULDER\x10F\x12\x0e\n" +
	"\n" +
	"THEME_SKIN\x10G\x12\x0f\n" +
	"\vTHEME_TEETH\x10H\x12\x10\n" +
	"\fTHEME_TONGUE\x10I\x12\x16\n" +
	"\x12THEME_BODYLANGUAGE\x10J\x12\x11\n" +
	"\rTHEME_CALLOUT\x10K\x12\x13\n" +
	"\x0fTHEME_CELLPHONE\x10L\x12\x17\n" +
	"\x13THEME_COMMUNICATION\x10M\x12\x16\n" +
	"\x12THEME_CONVERSATION\x10N\x12\x13\n" +
	"\x0fTHEME_LECTURING\x10O\x12\x13\n" +
	"\x0fTHEME_LISTENING\x10P\x12\x10\n" +
	"\fTHEME_METHOD\x10Q\x12\x0f\n" +
	"\vTHEME_PHONE\x10R\x12\x12\n" +
	"\x0eTHEME_QUESTION\x10S\x12\x10\n" +
	"\fTHEME_SCREAM\x10T\x12\x12\n" +
	"\x0eTHEME_SHOUTING\x10U\x12\x11\n" +
	"\rTHEME_SILENCE\x10V\x12\x0f\n" +
	"\vTHEME_STYLE\x10W\x12\x11\n" +
	"\rTHEME_TALKING\x10X\x12\x0e\n" +
	"\n" +
	"THEME_TELL\x10Y\x12\x15\n" +
	"\x11THEME_TEXTMESSAGE\x10Z\x12\x11\n" +
	"\rTHEME_WHISPER\x10[\x12\x0f\n" +
	"\vTHEME_WORDS\x10\\\x12\x10\n" +
	"\fTHEME_ACCUSE\x10]\x12\x10\n" +
	"\fTHEME_AFRAID\x10^\x12\x0f\n" +
	"\vTHEME_ALONE\x10_\x12\x14\n" +
	"\x10THEME_AMBIVALENT\x10`\x12\x0f\n" +
	"\vTHEME_ANGER\x10a\x12\x0f\n" +
	"\vTHEME_ANGST\x10b\x12\x11\n" +
	"\rTHEME_ANXIOUS\x10c\x12\x13\n" +
	"\x0fTHEME_APOLOGIZE\x10d\x12\x12\n" +
	"\x0eTHEME_ATTITUDE\x10e\x12\r\n" +
	"\tTHEME_BAD\x10f\x12\r\n" +
	"\tTHEME_BEG\x10g\x12\x10\n" +
	"\fTHEME_BETRAY\x10h\x12\x0f\n" +
	"\vTHEME_BLAME\x10i\x12\x0f\n" +
	"\vTHEME_BORED\x10j\x12\x0e\n" +
	"\n" +
	"THEME_BRAG\x10k\x12\x13\n" +
	"\x0fTHEME_BREAKDOWN\x10l\x12\x10\n" +
	"\fTHEME_BURDEN\x10m\x12\x11\n" +
	"\rTHEME_CHARITY\x10n\x12\x15\n" +
	"\x11THEME_COMPETITIVE\x10o\x12\x12\n" +
	"\x0eTHEME_COMPLAIN\x10p\x12\x12\n" +
	"\x0eTHEME_CONFLICT\x10q\x12\x12\n" +
	"\x0eTHEME_CONFUSED\x10r\x12\x12\n" +
	"\x0eTHEME_CONTEMPT\x10s\x12\x0f\n" +
	"\vTHEME_CRAZY\x10t\x12\x13\n" +
	"\x0fTHEME_CRITICIZE\x10u\x12\x0f\n" +
	"\vTHEME_CRUEL\x10v\x12\x10\n" +
	"\fTHEME_DANGER\x10w\x12\x10\n" +
	"\fTHEME_DEFEAT\x10x\x12\x12\n" +
	"\x0eTHEME_DEFEATED\x10y\x12\x11\n" +
	"\rTHEME_DESPAIR\x10z\x12\x13\n" +
	"\x0fTHEME_DIFFICULT\x10{\x12\x18\n" +
	"\x14THEME_DISAPPOINTMENT\x10|\x12\x19\n" +
	"\x15THEME_DISSATISFACTION\x10}\x12\x0f\n" +
	"\vTHEME_DIZZY\x10~\x12\r\n" +
	"\tTHEME_EGO\x10\x7f\x12\x16\n" +
	"\x11THEME_EMBARRASSED\x10\x80\x01\x12\x14\n" +
	"\x0fTHEME_EMERGENCY\x10\x81\x01\x12\x10\n" +
	"\vTHEME_EMPTY\x10\x82\x01\x12\x0e\n" +
	"\tTHEME_END\x10\x83\x01\x12\x10\n" +
	"\vTHEME_ENEMY\x10\x84\x01\x12\x11\n" +
	"\fTHEME_EXCUSE\x10\x85\x01\x12\x12\n" +
	"\rTHEME_FAILURE\x10\x86\x01\x12\x0f\n" +
	"\n" +
	"THEME_FAKE\x10\x87\x01\x12\x0f\n" +
	"\n" +
	"THEME_FOOL\x10\x88\x01\x12\x11\n" +
	"\fTHEME_FORGET\x10\x89\x01\x12\x12\n" +
	"\rTHEME_FRAGILE\x10\x8a\x01\x12\x11\n" +
	"\fTHEME_GOSSIP\x10\x8b\x01\x12\x10\n" +
	"\vTHEME_GREED\x10\x8c\x01\x12\x10\n" +
	"\vTHEME_GUILT\x10\x8d\x01\x12\x0f\n" +
	"\n" +
	"THEME_HATE\x10\x8e\x01\x12\x0f\n" +
	"\n" +
	"THEME_HIDE\x10\x8f\x01\x12\x11\n" +
	"\fTHEME_HORROR\x10\x90\x01\x12\x19\n" +
	"\x14THEME_IDENTITYCRISIS\x10\x91\x01\x12\x14\n" +
	"\x0fTHEME_IGNORANCE\x10\x92\x01\x12\x13\n" +
	"\x0eTHEME_INSECURE\x10\x93\x01\x12\x11\n" +
	"\fTHEME_INSULT\x10\x94\x01\x12\x12\n" +
	"\rTHEME_JEALOUS\x10\x95\x01\x12\x0f\n" +
	"\n" +
	"THEME_LAZY\x10\x96\x01\x12\x0f\n" +
	"\n" +
	"THEME_LOSS\x10\x97\x01\x12\x0f\n" +
	"\n" +
	"THEME_LOST\x10\x98\x01\x12\x15\n" +
	"\x10THEME_MANIPULATE\x10\x99\x01\x12\x0f\n" +
	"\n" +
	"THEME_MEAN\x10\x9a\x01\x12\x16\n" +
	"\x11THEME_MISBEHAVIOR\x10\x9b\x01\x12\x13\n" +
	"\x0eTHEME_MISTAKES\x10\x9c\x01\x12\x13\n" +
	"\x0eTHEME_MOURNING\x10\x9d\x01\x12\x12\n" +
	"\rTHEME_NERVOUS\x10\x9e\x01\x12\x0f\n" +
	"\n" +
	"THEME_PAIN\x10\x9f\x01\x12\x10\n" +
	"\vTHEME_PANIC\x10\xa0\x01\x12\x11\n" +
	"\fTHEME_POISON\x10\xa1\x01\x12\x13\n" +
	"\x0eTHEME_PROBLEMS\x10\xa2\x01\x12\x14\n" +
	"\x0fTHEME_REBELLION\x10\xa3\x01\x12\x11\n" +
	"\fTHEME_REGRET\x10\xa4\x01\x12\x12\n" +
	"\rTHEME_REVENGE\x10\xa5\x01\x12\x0e\n" +
	"\tTHEME_SAD\x10\xa6\x01\x12\x12\n" +
	"\rTHEME_SECRETS\x10\xa7\x01\x12\x10\n" +
	"\vTHEME_SHAME\x10\xa8\x01\x12\x0e\n" +
	"\tTHEME_SHY\x10\xa9\x01\x12\x11\n" +
	"\fTHEME_SLEAZY\x10\xaa\x01\x12\x0f\n" +
	"\n" +
	"THEME_STOP\x10\xab\x01\x12\x12\n" +
	"\rTHEME_STRANGE\x10\xac\x01\x12\x11\n" +
	"\fTHEME_STRESS\x10\xad\x01\x12\x13\n" +
	"\x0eTHEME_STUBBORN\x10\xae\x01\x12\x11\n" +
	"\fTHEME_STUPID\x10\xaf\x01\x12\x12\n" +
	"\rTHEME_SUICIDE\x10\xb0\x01\x12\x15\n" +
	"\x10THEME_TEMPTATION\x10\xb1\x01\x12\x13\n" +
	"\x0eTHEME_TERRIBLE\x10\xb2\x01\x12\x13\n" +
	"\x0eTHEME_THREATEN\x10\xb3\x01\x12\x0f\n" +
	"\n" +
	"THEME_TORN\x10\xb4\x01\x12\x12\n" +
	"\rTHEME_TRAGEDY\x10\xb5\x01\x12\x12\n" +
	"\rTHEME_TRAPPED\x10\xb6\x01\x12\x12\n" +
	"\rTHEME_TROUBLE\x10\xb7\x01\x12\x13\n" +
	"\x0eTHEME_WASTEFUL\x10\xb8\x01\x12\x10\n" +
	"\vTHEME_WORRY\x10\xb9\x01\x12\x10\n" +
	"\vTHEME_WRONG\x10\xba\x01\x12\x14\n" +
	"\x0fTHEME_AWARENESS\x10\xbb\x01\x12\x14\n" +
	"\x0fTHEME_CHALLENGE\x10\xbc\x01\x12\x11\n" +
	"\fTHEME_CHANGE\x10\xbd\x01\x12\x18\n" +
	"\x13THEME_CONSCIOUSNESS\x10\xbe\x01\x12\x13\n" +
	"\x0eTHEME_DAYDREAM\x10\xbf\x01\x12\x10\n" +
	"\vTHEME_IDEAS\x10\xc0\x01\x12\x16\n" +
	"\x11THEME_INFORMATION\x10\xc1\x01\x12\x12\n" +
	"\rTHEME_INSIGHT\x10\xc2\x01\x12\x13\n" +
	"\x0eTHEME_INSOMNIA\x10\xc3\x01\x12\x14\n" +
	"\x0fTHEME_INVISIBLE\x10\xc4\x01\x12\x14\n" +
	"\x0fTHEME_KNOWLEDGE\x10\xc5\x01\x12\x11\n" +
	"\fTHEME_MEMORY\x10\xc6\x01\x12\x14\n" +
	"\x0fTHEME_MENTALITY\x10\xc7\x01\x12\x0f\n" +
	"\n" +
	"THEME_MIND\x10\xc8\x01\x12\x13\n" +
	"\x0eTHEME_OPINIONS\x10\xc9\x01\x12\x15\n" +
	"\x10THEME_PHILOSOPHY\x10\xca\x01\x12\x12\n" +
	"\rTHEME_PRIVACY\x10\xcb\x01\x12\x16\n" +
	"\x11THEME_QUESTIONING\x10\xcc\x01\x12\x13\n" +
	"\x0eTHEME_REMEMBER\x10\xcd\x01\x12\x11\n" +
	"\fTHEME_SAFETY\x10\xce\x01\x12\x0f\n" +
	"\n" +
	"THEME_SAME\x10\xcf\x01\x12\x10\n" +
	"\vTHEME_SLEEP\x10\xd0\x01\x12\x13\n" +
	"\x0eTHEME_SOLITUDE\x10\xd1\x01\x12\x11\n" +
	"\fTHEME_WISDOM\x10\xd2\x01\x12\x0e\n" +
	"\tTHEME_AIR\x10\xd3\x01\x12\x10\n" +
	"\vTHEME_ASHES\x10\xd4\x01\x12\x0e\n" +
	"\tTHEME_BAY\x10\xd5\x01\x12\x10\n" +
	"\vTHEME_BEACH\x10\xd6\x01\x12\x10\n" +
	"\vTHEME_BLACK\x10\xd7\x01\x12\x0f\n" +
	"\n" +
	"THEME_BLUE\x10\xd8\x01\x12\x10\n" +
	"\vTHEME_BROWN\x10\xd9\x01\x12\x12\n" +
	"\rTHEME_BURNING\x10\xda\x01\x12\x10\n" +
	"\vTHEME_CLIFF\x10\xdb\x01\x12\x10\n" +
	"\vTHEME_COAST\x10\xdc\x01\x12\x0f\n" +
	"\n" +
	"THEME_COLD\x10\xdd\x01\x12\x10\n" +
	"\vTHEME_COLOR\x10\xde\x01\x12\x11\n" +
	"\fTHEME_DESERT\x10\xdf\x01\x12\x10\n" +
	"\vTHEME_EARTH\x10\xe0\x01\x12\x15\n" +
	"\x10THEME_EARTHQUAKE\x10\xe1\x01\x12\x13\n" +
	"\x0eTHEME_ELEMENTS\x10\xe2\x01\x12\x15\n" +
	"\x10THEME_EVERYTHING\x10\xe3\x01\x12\x0f\n" +
	"\n" +
	"THEME_FIRE\x10\xe4\x01\x12\x10\n" +
	"\vTHEME_FLOOD\x10\xe5\x01\x12\x11\n" +
	"\fTHEME_FOREST\x10\xe6\x01\x12\x14\n" +
	"\x0fTHEME_GEOGRAPHY\x10\xe7\x01\x12\x10\n" +
	"\vTHEME_GREEN\x10\xe8\x01\x12\x0f\n" +
	"\n" +
	"THEME_GREY\x10\xe9\x01\x12\x11\n" +
	"\fTHEME_HARBOR\x10\xea\x01\x12\x13\n" +
	"\x0eTHEME_HIGHLAND\x10\xeb\x01\x12\x10\n" +
	"\vTHEME_HILLS\x10\xec\x01\x12\x0e\n" +
	"\tTHEME_HOT\x10\xed\x01\x12\x11\n" +
	"\fTHEME_ISLAND\x10\xee\x01\x12\x0f\n" +
	"\n" +
	"THEME_LAKE\x10\xef\x01\x12\x14\n" +
	"\x0fTHEME_LIGHTNING\x10\xf0\x01\x12\x0f\n" +
	"\n" +
	"THEME_MOON\x10\xf1\x01\x12\x13\n" +
	"\x0eTHEME_MOUNTAIN\x10\xf2\x01\x12\x11\n" +
	"\fTHEME_NATURE\x10\xf3\x01\x12\x10\n" +
	"\vTHEME_OCEAN\x10\xf4\x01\x12\x11\n" +
	"\fTHEME_ORANGE\x10\xf5\x01\x12\x0f\n" +
	"\n" +
	"THEME_PINK\x10\xf6\x01\x12\x11\n" +
	"\fTHEME_PLANET\x10\xf7\x01\x12\x11\n" +
	"\fTHEME_PURPLE\x10\xf8\x01\x12\x0f\n" +
	"\n" +
	"THEME_RAIN\x10\xf9\x01\x12\x12\n" +
	"\rTHEME_RAINBOW\x10\xfa\x01\x12\x0e\n" +
	"\tTHEME_RED\x10\xfb\x01\x12\x10\n" +
	"\vTHEME_RIVER\x10\xfc\x01\x12\x0e\n" +
	"\tTHEME_SEA\x10\xfd\x01\x12\x0e\n" +
	"\tTHEME_SKY\x10\xfe\x01\x12\x10\n" +
	"\vTHEME_SMOKE\x10\xff\x01\x12\x0f\n" +
	"\n" +
	"THEME_SNOW\x10\x80\x02\x12\x11\n" +
	"\fTHEME_SOUNDS\x10\x81\x02\x12\x0f\n" +
	"\n" +
	"THEME_STAR\x10\x82\x02\x12\x10\n" +
	"\vTHEME_STORM\x10\x83\x02\x12\x0e\n" +
	"\tTHEME_SUN\x10\x84\x02\x12\x13\n" +
	"\x0eTHEME_SUNSHINE\x10\x85\x02\x12\x10\n" +
	"\vTHEME_SWAMP\x10\x86\x02\x12\x16\n" +
	"\x11THEME_TEMPERATURE\x10\x87\x02\x12\x13\n" +
	"\x0eTHEME_UNIVERSE\x10\x88\x02\x12\x11\n" +
	"\fTHEME_VALLEY\x10\x89\x02\x12\x12\n" +
	"\rTHEME_VOLCANO\x10\x8a\x02\x12\x10\n" +
	"\vTHEME_WATER\x10\x8b\x02\x12\x14\n" +
	"\x0fTHEME_WATERFALL\x10\x8c\x02\x12\x10\n" +
	"\vTHEME_WHITE\x10\x8d\x02\x12\x0f\n" +
	"\n" +
	"THEME_WIND\x10\x8e\x02\x12\x11\n" +
	"\fTHEME_YELLOW\x10\x8f\x02\x12!\n" +
	"\x1cTHEME_AMUSEMENTPARKSANDRIDES\x10\x90\x02\x12\x18\n" +
	"\x13THEME_BIRTHDAYPARTY\x10\x91\x02\x12\x13\n" +
	"\x0eTHEME_CARNIVAL\x10\x92\x02\x12\x16\n" +
	"\x11THEME_CELEBRATION\x10\x93\x02\x12\x11\n" +
	"\fTHEME_CIRCUS\x10\x94\x02\x12\x10\n" +
	"\vTHEME_CLOWN\x10\x95\x02\x12\x15\n" +
	"\x10THEME_DANCEPARTY\x10\x96\x02\x12\x10\n" +
	"\vTHEME_EVENT\x10\x97\x02\x12\x0f\n" +
	"\n" +
	"THEME_FAIR\x10\x98\x02\x12\x11\n" +
	"\fTHEME_PARADE\x10\x99\x02\x12\x10\n" +
	"\vTHEME_PARTY\x10\x9a\x02\x12\x18\n" +
	"\x13THEME_SURPRISEPARTY\x10\x9b\x02\x12\x12\n" +
	"\rTHEME_WINNING\x10\x9c\x02\x12\x13\n" +
	"\x0eTHEME_ABORTION\x10\x9d\x02\x12\x13\n" +
	"\x0eTHEME_ADOPTION\x10\x9e\x02\x12\x0f\n" +
	"\n" +
	"THEME_AUNT\x10\x9f\x02\x12\x0f\n" +
	"\n" +
	"THEME_BABY\x10\xa0\x02\x12\x10\n" +
	"\vTHEME_BIRTH\x10\xa1\x02\x12\x17\n" +
	"\x12THEME_BIRTHCONTROL\x10\xa2\x02\x12\x15\n" +
	"\x10THEME_BROKENHOME\x10\xa3\x02\x12\x12\n" +
	"\rTHEME_BROTHER\x10\xa4\x02\x12\x13\n" +
	"\x0eTHEME_CHILDREN\x10\xa5\x02\x12\x11\n" +
	"\fTHEME_COUSIN\x10\xa6\x02\x12\x13\n" +
	"\x0eTHEME_DAUGHTER\x10\xa7\x02\x12\x11\n" +
	"\fTHEME_FAMILY\x10\xa8\x02\x12\x15\n" +
	"\x10THEME_FAMILYLIFE\x10\xa9\x02\x12\x17\n" +
	"\x12THEME_FAMILYMEMBER\x10\xaa\x02\x12\x11\n" +
	"\fTHEME_FATHER\x10\xab\x02\x12\x16\n" +
	"\x11THEME_GRANDPARENT\x10\xac\x02\x12\x12\n" +
	"\rTHEME_HUSBAND\x10\xad\x02\x12\x11\n" +
	"\fTHEME_MOTHER\x10\xae\x02\x12\x11\n" +
	"\fTHEME_ORPHAN\x10\xaf\x02\x12\x11\n" +
	"\fTHEME_PARENT\x10\xb0\x02\x12\x14\n" +
	"\x0fTHEME_PREGNANCY\x10\xb1\x02\x12\x17\n" +
	"\x12THEME_SINGLEPARENT\x10\xb2\x02\x12\x11\n" +
	"\fTHEME_SISTER\x10\xb3\x02\x12\x0e\n" +
	"\tTHEME_SON\x10\xb4\x02\x12\x15\n" +
	"\x10THEME_STEPPARENT\x10\xb5\x02\x12\x10\n" +
	"\vTHEME_UNCLE\x10\xb6\x02\x12\x0f\n" +
	"\n" +
	"THEME_WIFE\x10\xb7\x02\x12\x14\n" +
	"\x0fTHEME_ADORATION\x10\xb8\x02\x12\x11\n" +
	"\fTHEME_ADVICE\x10\xb9\x02\x12\x0e\n" +
	"\tTHEME_ALL\x10\xba\x02\x12\x11\n" +
	"\fTHEME_ALWAYS\x10\xbb\x02\x12\x13\n" +
	"\x0eTHEME_AMBITION\x10\xbc\x02\x12\x13\n" +
	"\x0eTHEME_ANYTHING\x10\xbd\x02\x12\x14\n" +
	"\x0fTHEME_ASSURANCE\x10\xbe\x02\x12\x14\n" +
	"\x0fTHEME_BEGINNING\x10\xbf\x02\x12\x12\n" +
	"\rTHEME_BELIEVE\x10\xc0\x02\x12\x0f\n" +
	"\n" +
	"THEME_BEST\x10\xc1\x02\x12\x13\n" +
	"\x0eTHEME_CALMNESS\x10\xc2\x02\x12\x13\n" +
	"\x0eTHEME_CAREFREE\x10\xc3\x02\x12\x12\n" +
	"\rTHEME_CHOICES\x10\xc4\x02\x12\x12\n" +
	"\rTHEME_COMFORT\x10\xc5\x02\x12\x15\n" +
	"\x10THEME_COMPASSION\x10\xc6\x02\x12\x16\n" +
	"\x11THEME_COMPLIMENTS\x10\xc7\x02\x12\x15\n" +
	"\x10THEME_CONFIDENCE\x10\xc8\x02\x12\x15\n" +
	"\x10THEME_CONNECTION\x10\xc9\x02\x12\x15\n" +
	"\x10THEME_CONSISTENT\x10\xca\x02\x12\x0f\n" +
	"\n" +
	"THEME_COOL\x10\xcb\x02\x12\x12\n" +
	"\rTHEME_COURAGE\x10\xcc\x02\x12\x10\n" +
	"\vTHEME_CRAVE\x10\xcd\x02\x12\x11\n" +
	"\fTHEME_DESIRE\x10\xce\x02\x12\x18\n" +
	"\x13THEME_DETERMINATION\x10\xcf\x02\x12\x13\n" +
	"\x0eTHEME_ECSTATIC\x10\xd0\x02\x12\x14\n" +
	"\x0fTHEME_EMPOWERED\x10\xd1\x02\x12\x13\n" +
	"\x0eTHEME_EQUALITY\x10\xd2\x02\x12\x15\n" +
	"\x10THEME_EXCELLENCE\x10\xd3\x02\x12\x12\n" +
	"\rTHEME_EXCITED\x10\xd4\x02\x12\x12\n" +
	"\rTHEME_EXPLORE\x10\xd5\x02\x12\x12\n" +
	"\rTHEME_FANTASY\x10\xd6\x02\x12\x13\n" +
	"\x0eTHEME_FAVORITE\x10\xd7\x02\x12\x0f\n" +
	"\n" +
	"THEME_FEEL\x10\xd8\x02\x12\x13\n" +
	"\x0eTHEME_FEELINGS\x10\xd9\x02\x12\x12\n" +
	"\rTHEME_FORGIVE\x10\xda\x02\x12\x10\n" +
	"\vTHEME_FOUND\x10\xdb\x02\x12\x0e\n" +
	"\tTHEME_FUN\x10\xdc\x02\x12\x11\n" +
	"\fTHEME_GENTLE\x10\xdd\x02\x12\x16\n" +
	"\x11THEME_GETTINGOVER\x10\xde\x02\x12\x0f\n" +
	"\n" +
	"THEME_GIVE\x10\xdf\x02\x12\x0f\n" +
	"\n" +
	"THEME_GOOD\x10\xe0\x02\x12\x14\n" +
	"\x0fTHEME_GRATITUDE\x10\xe1\x02\x12\x14\n" +
	"\x0fTHEME_HAPPINESS\x10\xe2\x02\x12\x10\n" +
	"\vTHEME_HELLO\x10\xe3\x02\x12\x0f\n" +
	"\n" +
	"THEME_HELP\x10\xe4\x02\x12\x12\n" +
	"\rTHEME_HEROISM\x10\xe5\x02\x12\x12\n" +
	"\rTHEME_HIGHEST\x10\xe6\x02\x12\x12\n" +
	"\rTHEME_HONESTY\x10\xe7\x02\x12\x0f\n" +
	"\n" +
	"THEME_HOPE\x10\xe8\x02\x12\x17\n" +
	"\x12THEME_INDEPENDENCE\x10\xe9\x02\x12\x18\n" +
	"\x13THEME_INDIVIDUALITY\x10\xea\x02\x12\x14\n" +
	"\x0fTHEME_INNOCENCE\x10\xeb\x02\x12\x16\n" +
	"\x11THEME_INSPIRATION\x10\xec\x02\x12\x14\n" +
	"\x0fTHEME_INTEGRITY\x10\xed\x02\x12\x14\n" +
	"\x0fTHEME_INTENTION\x10\xee\x02\x12\x13\n" +
	"\x0eTHEME_LAUGHTER\x10\xef\x02\x12\x11\n" +
	"\fTHEME_LEADER\x10\xf0\x02\x12\x11\n" +
	"\fTHEME_LIVING\x10\xf1\x02\x12\x12\n" +
	"\rTHEME_LOYALTY\x10\xf2\x02\x12\x10\n" +
	"\vTHEME_LUCKY\x10\xf3\x02\x12\x13\n" +
	"\x0eTHEME_MORALITY\x10\xf4\x02\x12\x15\n" +
	"\x10THEME_MOTIVATION\x10\xf5\x02\x12\x14\n" +
	"\x0fTHEME_NOSTALGIA\x10\xf6\x02\x12\x16\n" +
	"\x11THEME_OPPORTUNITY\x10\xf7\x02\x12\x13\n" +
	"\x0eTHEME_OPTIMISM\x10\xf8\x02\x12\x13\n" +
	"\x0eTHEME_PATIENCE\x10\xf9\x02\x12\x10\n" +
	"\vTHEME_PEACE\x10\xfa\x02\x12\x15\n" +
	"\x10THEME_PERFECTION\x10\xfb\x02\x12\x14\n" +
	"\x0fTHEME_PERSEVERE\x10\xfc\x02\x12\x11\n" +
	"\fTHEME_PLEASE\x10\xfd\x02\x12\x16\n" +
	"\x11THEME_POSSIBILITY\x10\xfe\x02\x12\x10\n" +
	"\vTHEME_PRIDE\x10\xff\x02\x12\x12\n" +
	"\rTHEME_PROMISE\x10\x80\x03\x12\x12\n" +
	"\rTHEME_PROTECT\x10\x81\x03\x12\x12\n" +
	"\rTHEME_QUALITY\x10\x82\x03\x12\x0f\n" +
	"\n" +
	"THEME_REAL\x10\x83\x03\x12\x13\n" +
	"\x0eTHEME_RECOVERY\x10\x84\x03\x12\x11\n" +
	"\fTHEME_RESCUE\x10\x85\x03\x12\x14\n" +
	"\x0fTHEME_RESILIENT\x10\x86\x03\x12\x12\n" +
	"\rTHEME_RESPECT\x10\x87\x03\x12\x12\n" +
	"\rTHEME_REUNITE\x10\x88\x03\x12\x10\n" +
	"\vTHEME_RIGHT\x10\x89\x03\x12\x17\n" +
	"\x12THEME_SATISFACTION\x10\x8a\x03\x12\x0f\n" +
	"\n" +
	"THEME_SAVE\x10\x8b\x03\x12\x12\n" +
	"\rTHEME_SHELTER\x10\x8c\x03\x12\x11\n" +
	"\fTHEME_SIMPLE\x10\x8d\x03\x12\x10\n" +
	"\vTHEME_SMART\x10\x8e\x03\x12\x10\n" +
	"\vTHEME_SMILE\x10\x8f\x03\x12\x14\n" +
	"\x0fTHEME_SPACEDOUT\x10\x90\x03\x12\x12\n" +
	"\rTHEME_SPECIAL\x10\x91\x03\x12\x10\n" +
	"\vTHEME_STICK\x10\x92\x03\x12\x11\n" +
	"\fTHEME_STRONG\x10\x93\x03\x12\x12\n" +
	"\rTHEME_SUCCESS\x10\x94\x03\x12\x16\n" +
	"\x11THEME_SUPERIORITY\x10\x95\x03\x12\x12\n" +
	"\rTHEME_SUPPORT\x10\x96\x03\x12\x12\n" +
	"\rTHEME_SURVIVE\x10\x97\x03\x12\x12\n" +
	"\rTHEME_SWAGGER\x10\x98\x03\x12\x10\n" +
	"\vTHEME_SWEET\x10\x99\x03\x12\x13\n" +
	"\x0eTHEME_SYMPATHY\x10\x9a\x03\x12\x10\n" +
	"\vTHEME_TRUST\x10\x9b\x03\x12\x10\n" +
	"\vTHEME_TRUTH\x10\x9c\x03\x12\x0e\n" +
	"\tTHEME_TRY\x10\x9d\x03\x12\x17\n" +
	"\x12THEME_UNBELIEVABLE\x10\x9e\x03\x12\x18\n" +
	"\x13THEME_UNDERSTANDING\x10\x9f\x03\x12\x11\n" +
	"\fTHEME_UNIQUE\x10\xa0\x03\x12\x10\n" +
	"\vTHEME_UNITY\x10\xa1\x03\x12\x12\n" +
	"\rTHEME_WELCOME\x10\xa2\x03\x12\x0f\n" +
	"\n" +
	"THEME_WISH\x10\xa3\x03\x12\x14\n" +
	"\x0fTHEME_WONDERFUL\x10\xa4\x03\x12\x15\n" +
	"\x10THEME_ATTRACTIVE\x10\xa5\x03\x12\x1b\n" +
	"\x16THEME_BATTLEOFTHESEXES\x10\xa6\x03\x12\x14\n" +
	"\x0fTHEME_BEAUTIFUL\x10\xa7\x03\x12\x11\n" +
	"\fTHEME_BEAUTY\x10\xa8\x03\x12\x0f\n" +
	"\n" +
	"THEME_BOYS\x10\xa9\x03\x12\x11\n" +
	"\fTHEME_GENDER\x10\xaa\x03\x12\x10\n" +
	"\vTHEME_GIRLS\x10\xab\x03\x12\x13\n" +
	"\x0eTHEME_HANDSOME\x10\xac\x03\x12\x11\n" +
	"\fTHEME_LOVELY\x10\xad\x03\x12\x0e\n" +
	"\tTHEME_MEN\x10\xae\x03\x12\x14\n" +
	"\x0fTHEME_MENSNAMES\x10\xaf\x03\x12\x11\n" +
	"\fTHEME_PRETTY\x10\xb0\x03\x12\x0f\n" +
	"\n" +
	"THEME_UGLY\x10\xb1\x03\x12\x10\n" +
	"\vTHEME_WOMEN\x10\xb2\x03\x12\x16\n" +
	"\x11THEME_WOMENSNAMES\x10\xb3\x03\x12\x13\n" +
	"\x0eTHEME_GESTURES\x10\xb4\x03\x12\x12\n" +
	"\rTHEME_DISEASE\x10\xb5\x03\x12\x11\n" +
	"\fTHEME_DOCTOR\x10\xb6\x03\x12\x10\n" +
	"\vTHEME_FEVER\x10\xb7\x03\x12\x12\n" +
	"\rTHEME_HEALING\x10\xb8\x03\x12\x1c\n" +
	"\x17THEME_HEALTHANDWELLNESS\x10\xb9\x03\x12\x13\n" +
	"\x0eTHEME_HOSPITAL\x10\xba\x03\x12\x12\n" +
	"\rTHEME_MEDICAL\x10\xbb\x03\x12\x18\n" +
	"\x13THEME_MENTALILLNESS\x10\xbc\x03\x12\x19\n" +
	"\x14THEME_PHARMACEUTICAL\x10\xbd\x03\x12\x17\n" +
	"\x12THEME_PHYSICALPAIN\x10\xbe\x03\x12\x10\n" +
	"\vTHEME_REHAB\x10\xbf\x03\x12\x14\n" +
	"\x0fTHEME_CHRISTMAS\x10\xc0\x03\x12\x14\n" +
	"\x0fTHEME_HALLOWEEN\x10\xc1\x03\x12\x12\n" +
	"\rTHEME_HOLIDAY\x10\xc2\x03\x12\x14\n" +
	"\x0fTHEME_MARDIGRAS\x10\xc3\x03\x12\x12\n" +
	"\rTHEME_NEWYEAR\x10\xc4\x03\x12\x13\n" +
	"\x0eTHEME_VACATION\x10\xc5\x03\x12\x15\n" +
	"\x10THEME_ADDICTEDTO\x10\xc6\x03\x12\x14\n" +
	"\x0fTHEME_AFFECTION\x10\xc7\x03\x12\x16\n" +
	"\x11THEME_ANNIVERSARY\x10\xc8\x03\x12\x17\n" +
	"\x12THEME_ATFIRSTSIGHT\x10\xc9\x03\x12\x17\n" +
	"\x12THEME_BACKTOGETHER\x10\xca\x03\x12\x12\n" +
	"\rTHEME_BEINGIN\x10\xcb\x03\x12\x12\n" +
	"\rTHEME_BREAKUP\x10\xcc\x03\x12\x16\n" +
	"\x11THEME_CANTGETOVER\x10\xcd\x03\x12\x15\n" +
	"\x10THEME_CANTRESIST\x10\xce\x03\x12\x11\n" +
	"\fTHEME_CHOOSE\x10\xcf\x03\x12\x15\n" +
	"\x10THEME_COMMITMENT\x10\xd0\x03\x12\x11\n" +
	"\fTHEME_COUPLE\x10\xd1\x03\x12\x10\n" +
	"\vTHEME_CRUSH\x10\xd2\x03\x12\x11\n" +
	"\fTHEME_DATING\x10\xd3\x03\x12\x14\n" +
	"\x0fTHEME_DESPERATE\x10\xd4\x03\x12\x14\n" +
	"\x0fTHEME_DISCOVERY\x10\xd5\x03\x12\x12\n" +
	"\rTHEME_DIVORCE\x10\xd6\x03\x12\x11\n" +
	"\fTHEME_DONTGO\x10\xd7\x03\x12\x16\n" +
	"\x11THEME_DONTLEAVEME\x10\xd8\x03\x12\x15\n" +
	"\x10THEME_ENGAGEMENT\x10\xd9\x03\x12\x14\n" +
	"\x0fTHEME_FALLINGIN\x10\xda\x03\x12\x13\n" +
	"\x0eTHEME_FAREWELL\x10\xdb\x03\x12\x10\n" +
	"\vTHEME_FLIRT\x10\xdc\x03\x12\x14\n" +
	"\x0fTHEME_FORBIDDEN\x10\xdd\x03\x12\x0f\n" +
	"\n" +
	"THEME_FREE\x10\xde\x03\x12\x15\n" +
	"\x10THEME_FRIENDSHIP\x10\xdf\x03\x12\x12\n" +
	"\rTHEME_GETLOST\x10\xe0\x03\x12\x14\n" +
	"\x0fTHEME_HEARTACHE\x10\xe1\x03\x12\x14\n" +
	"\x0fTHEME_HOLDINGON\x10\xe2\x03\x12\x14\n" +
	"\x0fTHEME_HONEYMOON\x10\xe3\x03\x12\x10\n" +
	"\vTHEME_IDEAL\x10\xe4\x03\x12\x14\n" +
	"\x0fTHEME_INTROUBLE\x10\xe5\x03\x12\x15\n" +
	"\x10THEME_INFATUATED\x10\xe6\x03\x12\x0f\n" +
	"\n" +
	"THEME_KISS\x10\xe7\x03\x12\x12\n" +
	"\rTHEME_LASTING\x10\xe8\x03\x12\x0f\n" +
	"\n" +
	"THEME_LIES\x10\xe9\x03\x12\x11\n" +
	"\fTHEME_LONELY\x10\xea\x03\x12\x12\n" +
	"\rTHEME_LONGING\x10\xeb\x03\x12\x14\n" +
	"\x0fTHEME_LOSINGYOU\x10\xec\x03\x12 \n" +
	"\x1bTHEME_LOSTTHATLOVINGFEELING\x10\xed\x03\x12\x0f\n" +
	"\n" +
	"THEME_LOVE\x10\xee\x03\x12\x16\n" +
	"\x11THEME_MARRIEDLIFE\x10\xef\x03\x12\x1a\n" +
	"\x15THEME_MENTALKINGTOMEN\x10\xf0\x03\x12\x1c\n" +
	"\x17THEME_MENTALKINGTOWOMEN\x10\xf1\x03\x12\x15\n" +
	"\x10THEME_MISSINGYOU\x10\xf2\x03\x12\x13\n" +
	"\x0eTHEME_MOVINGON\x10\xf3\x03\x12\x0f\n" +
	"\n" +
	"THEME_NEED\x10\xf4\x03\x12\x16\n" +
	"\x11THEME_NONROMANTIC\x10\xf5\x03\x12\x17\n" +
	"\x12THEME_NOTCOMMITTED\x10\xf6\x03\x12\x14\n" +
	"\x0fTHEME_NOTMYTYPE\x10\xf7\x03\x12\x14\n" +
	"\x0fTHEME_OBSESSION\x10\xf8\x03\x12\x18\n" +
	"\x13THEME_ONENIGHTSTAND\x10\xf9\x03\x12\x13\n" +
	"\x0eTHEME_PLATONIC\x10\xfa\x03\x12\x11\n" +
	"\fTHEME_PLAYER\x10\xfb\x03\x12\x14\n" +
	"\x0fTHEME_POSSESSED\x10\xfc\x03\x12\x14\n" +
	"\x0fTHEME_REJECTION\x10\xfd\x03\x12\x0f\n" +
	"\n" +
	"THEME_RISK\x10\xfe\x03\x12\x12\n" +
	"\rTHEME_ROMANCE\x10\xff\x03\x12\x13\n" +
	"\x0eTHEME_ROMANTIC\x10\x80\x04\x12\x17\n" +
	"\x12THEME_SEARCHINGFOR\x10\x81\x04\x12\x12\n" +
	"\rTHEME_SEDUCED\x10\x82\x04\x12\x19\n" +
	"\x14THEME_SHOULDHAVESAID\x10\x83\x04\x12\x17\n" +
	"\x12THEME_SINGLEPERSON\x10\x84\x04\x12\x15\n" +
	"\x10THEME_TAKEMEBACK\x10\x85\x04\x12\x17\n" +
	"\x12THEME_TOGETHERNESS\x10\x86\x04\x12\x11\n" +
	"\fTHEME_UNFAIR\x10\x87\x04\x12\x15\n" +
	"\x10THEME_UNFAITHFUL\x10\x88\x04\x12\x15\n" +
	"\x10THEME_UNREQUITED\x10\x89\x04\x12\x1c\n" +
	"\x17THEME_USAGAINSTTHEWORLD\x10\x8a\x04\x12\x14\n" +
	"\x0fTHEME_VALENTINE\x10\x8b\x04\x12\x1d\n" +
	"\x18THEME_WESHOULDBETOGETHER\x10\x8c\x04\x12\x12\n" +
	"\rTHEME_WEDDING\x10\x8d\x04\x12\x1c\n" +
	"\x17THEME_WOMENTALKINGTOMEN\x10\x8e\x04\x12\x1e\n" +
	"\x19THEME_WOMENTALKINGTOWOMEN\x10\x8f\x04\x12\x10\n" +
	"\vTHEME_YOUNG\x10\x90\x04\x12\x10\n" +
	"\vTHEME_ABOVE\x10\x91\x04\x12\x11\n" +
	"\fTHEME_BEHIND\x10\x92\x04\x12\x10\n" +
	"\vTHEME_BELOW\x10\x93\x04\x12\x0e\n" +
	"\tTHEME_BIG\x10\x94\x04\x12\x10\n" +
	"\vTHEME_CLOSE\x10\x95\x04\x12\x0f\n" +
	"\n" +
	"THEME_DEEP\x10\x96\x04\x12\x14\n" +
	"\x0fTHEME_DIRECTION\x10\x97\x04\x12\x13\n" +
	"\x0eTHEME_DISTANCE\x10\x98\x04\x12\x0f\n" +
	"\n" +
	"THEME_DOWN\x10\x99\x04\x12\x0f\n" +
	"\n" +
	"THEME_EAST\x10\x9a\x04\x12\x0e\n" +
	"\tTHEME_FAR\x10\x9b\x04\x12\x0e\n" +
	"\tTHEME_FAT\x10\x9c\x04\x12\x0f\n" +
	"\n" +
	"THEME_HIGH\x10\x9d\x04\x12\x12\n" +
	"\rTHEME_HUNDRED\x10\x9e\x04\x12\x12\n" +
	"\rTHEME_INFRONT\x10\x9f\x04\x12\x0f\n" +
	"\n" +
	"THEME_INCH\x10\xa0\x04\x12\x0f\n" +
	"\n" +
	"THEME_LEFT\x10\xa1\x04\x12\x0e\n" +
	"\tTHEME_LOW\x10\xa2\x04\x12\x16\n" +
	"\x11THEME_MEASUREMENT\x10\xa3\x04\x12\x0f\n" +
	"\n" +
	"THEME_MILE\x10\xa4\x04\x12\x12\n" +
	"\rTHEME_MILLION\x10\xa5\x04\x12\x0f\n" +
	"\n" +
	"THEME_NEAR\x10\xa6\x04\x12\x10\n" +
	"\vTHEME_NORTH\x10\xa7\x04\x12\x11\n" +
	"\fTHEME_NUMBER\x10\xa8\x04\x12\x0f\n" +
	"\n" +
	"THEME_SIZE\x10\xa9\x04\x12\x10\n" +
	"\vTHEME_SMALL\x10\xaa\x04\x12\x10\n" +
	"\vTHEME_SOUTH\x10\xab\x04\x12\x0f\n" +
	"\n" +
	"THEME_TALL\x10\xac\x04\x12\x0f\n" +
	"\n" +
	"THEME_THIN\x10\xad\x04\x12\x13\n" +
	"\x0eTHEME_THOUSAND\x10\xae\x04\x12\r\n" +
	"\bTHEME_UP\x10\xaf\x04\x12\x0f\n" +
	"\n" +
	"THEME_WEST\x10\xb0\x04\x12\x11\n" +
	"\fTHEME_ACTION\x10\xb1\x04\x12\x14\n" +
	"\x0fTHEME_AIRPLANES\x10\xb2\x04\x12\x13\n" +
	"\x0eTHEME_BASEBALL\x10\xb3\x04\x12\x15\n" +
	"\x10THEME_BASKETBALL\x10\xb4\x04\x12\x13\n" +
	"\x0eTHEME_BICYCLES\x10\xb5\x04\x12\x11\n" +
	"\fTHEME_BOUNCE\x10\xb6\x04\x12\x11\n" +
	"\fTHEME_BOXING\x10\xb7\x04\x12\x12\n" +
	"\rTHEME_BREATHE\x10\xb8\x04\x12\x10\n" +
	"\vTHEME_BUILD\x10\xb9\x04\x12\x0e\n" +
	"\tTHEME_BUS\x10\xba\x04\x12\x0f\n" +
	"\n" +
	"THEME_BUSY\x10\xbb\x04\x12\x14\n" +
	"\x0fTHEME_CARRACING\x10\xbc\x04\x12\x0f\n" +
	"\n" +
	"THEME_CARS\x10\xbd\x04\x12\x10\n" +
	"\vTHEME_CHASE\x10\xbe\x04\x12\x10\n" +
	"\vTHEME_CLEAN\x10\xbf\x04\x12\x10\n" +
	"\vTHEME_CLIMB\x10\xc0\x04\x12\x10\n" +
	"\vTHEME_CRASH\x10\xc1\x04\x12\x11\n" +
	"\fTHEME_CREATE\x10\xc2\x04\x12\x0e\n" +
	"\tTHEME_CRY\x10\xc3\x04\x12\x10\n" +
	"\vTHEME_DANCE\x10\xc4\x04\x12\x10\n" +
	"\vTHEME_DRIFT\x10\xc5\x04\x12\x10\n" +
	"\vTHEME_DRINK\x10\xc6\x04\x12\x10\n" +
	"\vTHEME_DRIVE\x10\xc7\x04\x12\x11\n" +
	"\fTHEME_ESCAPE\x10\xc8\x04\x12\x13\n" +
	"\x0eTHEME_EXERCISE\x10\xc9\x04\x12\x0f\n" +
	"\n" +
	"THEME_FALL\x10\xca\x04\x12\x0f\n" +
	"\n" +
	"THEME_FAST\x10\xcb\x04\x12\x0f\n" +
	"\n" +
	"THEME_FIND\x10\xcc\x04\x12\x12\n" +
	"\rTHEME_FISHING\x10\xcd\x04\x12\x0e\n" +
	"\tTHEME_FIX\x10\xce\x04\x12\x0e\n" +
	"\tTHEME_FLY\x10\xcf\x04\x12\x11\n" +
	"\fTHEME_FOLLOW\x10\xd0\x04\x12\x13\n" +
	"\x0eTHEME_FOOTBALL\x10\xd1\x04\x12\r\n" +
	"\bTHEME_GO\x10\xd2\x04\x12\x0f\n" +
	"\n" +
	"THEME_GOLF\x10\xd3\x04\x12\x16\n" +
	"\x11THEME_HORSERACING\x10\xd4\x04\x12\x0f\n" +
	"\n" +
	"THEME_JUMP\x10\xd5\x04\x12\x10\n" +
	"\vTHEME_LEARN\x10\xd6\x04\x12\x10\n" +
	"\vTHEME_LEAVE\x10\xd7\x04\x12\x0f\n" +
	"\n" +
	"THEME_LOOK\x10\xd8\x04\x12\x0f\n" +
	"\n" +
	"THEME_MINE\x10\xd9\x04\x12\x11\n" +
	"\fTHEME_MOTION\x10\xda\x04\x12\x16\n" +
	"\x11THEME_MOTORCYCLES\x10\xdb\x04\x12\x0f\n" +
	"\n" +
	"THEME_MOVE\x10\xdc\x04\x12\x13\n" +
	"\x0eTHEME_OLYMPICS\x10\xdd\x04\x12\x14\n" +
	"\x0fTHEME_PLAYMUSIC\x10\xde\x04\x12\x10\n" +
	"\vTHEME_READY\x10\xdf\x04\x12\x12\n" +
	"\rTHEME_REFLECT\x10\xe0\x04\x12\x10\n" +
	"\vTHEME_RELAX\x10\xe1\x04\x12\x11\n" +
	"\fTHEME_REPEAT\x10\xe2\x04\x12\x11\n" +
	"\fTHEME_RETURN\x10\xe3\x04\x12\x12\n" +
	"\rTHEME_REVOLVE\x10\xe4\x04\x12\x0f\n" +
	"\n" +
	"THEME_RIDE\x10\xe5\x04\x12\x0f\n" +
	"\n" +
	"THEME_ROCK\x10\xe6\x04\x12\x0e\n" +
	"\tTHEME_RUN\x10\xe7\x04\x12\x0f\n" +
	"\n" +
	"THEME_SAIL\x10\xe8\x04\x12\x11\n" +
	"\fTHEME_SEARCH\x10\xe9\x04\x12\x10\n" +
	"\vTHEME_SHAKE\x10\xea\x04\x12\x10\n" +
	"\vTHEME_SHINE\x10\xeb\x04\x12\x10\n" +
	"\vTHEME_SHOOT\x10\xec\x04\x12\x0f\n" +
	"\n" +
	"THEME_SING\x10\xed\x04\x12\x0e\n" +
	"\tTHEME_SIT\x10\xee\x04\x12\x10\n" +
	"\vTHEME_SKATE\x10\xef\x04\x12\x15\n" +
	"\x10THEME_SKATEBOARD\x10\xf0\x04\x12\x0e\n" +
	"\tTHEME_SKI\x10\xf1\x04\x12\x0f\n" +
	"\n" +
	"THEME_SLOW\x10\xf2\x04\x12\x10\n" +
	"\vTHEME_SPEED\x10\xf3\x04\x12\x10\n" +
	"\vTHEME_SPORT\x10\xf4\x04\x12\x10\n" +
	"\vTHEME_STAND\x10\xf5\x04\x12\x10\n" +
	"\vTHEME_START\x10\xf6\x04\x12\x10\n" +
	"\vTHEME_STEAL\x10\xf7\x04\x12\x0f\n" +
	"\n" +
	"THEME_SURF\x10\xf8\x04\x12\x0f\n" +
	"\n" +
	"THEME_SWIM\x10\xf9\x04\x12\x0f\n" +
	"\n" +
	"THEME_TAXI\x10\xfa\x04\x12\x10\n" +
	"\vTHEME_TEACH\x10\xfb\x04\x12\x11\n" +
	"\fTHEME_TRAINS\x10\xfc\x04\x12\x19\n" +
	"\x14THEME_TRANSPORTATION\x10\xfd\x04\x12\x11\n" +
	"\fTHEME_TRAVEL\x10\xfe\x04\x12\x11\n" +
	"\fTHEME_TRUCKS\x10\xff\x04\x12\x0f\n" +
	"\n" +
	"THEME_TURN\x10\x80\x05\x12\x0f\n" +
	"\n" +
	"THEME_WAIT\x10\x81\x05\x12\x0f\n" +
	"\n" +
	"THEME_WALK\x10\x82\x05\x12\x0f\n" +
	"\n" +
	"THEME_WILD\x10\x83\x05\x12\x0f\n" +
	"\n" +
	"THEME_WORK\x10\x84\x05\x12\x10\n" +
	"\vTHEME_WRITE\x10\x85\x05\x12\x0f\n" +
	"\n" +
	"THEME_NONE\x10\x86\x05\x12\x15\n" +
	"\x10THEME_AMMUNITION\x10\x87\x05\x12\x0e\n" +
	"\tTHEME_ART\x10\x88\x05\x12\x0f\n" +
	"\n" +
	"THEME_BASS\x10\x89\x05\x12\x10\n" +
	"\vTHEME_BEATS\x10\x8a\x05\x12\x10\n" +
	"\vTHEME_BELLS\x10\x8b\x05\x12\x13\n" +
	"\x0eTHEME_BEVERAGE\x10\x8c\x05\x12\x0f\n" +
	"\n" +
	"THEME_BOOK\x10\x8d\x05\x12\x10\n" +
	"\vTHEME_BRASS\x10\x8e\x05\x12\x11\n" +
	"\fTHEME_CAMERA\x10\x8f\x05\x12\x11\n" +
	"\fTHEME_CANDLE\x10\x90\x05\x12\x10\n" +
	"\vTHEME_CANDY\x10\x91\x05\x12\x13\n" +
	"\x0eTHEME_CARDGAME\x10\x92\x05\x12\x13\n" +
	"\x0eTHEME_CLOTHING\x10\x93\x05\x12\x13\n" +
	"\x0eTHEME_COMPUTER\x10\x94\x05\x12\x14\n" +
	"\x0fTHEME_CONTAINER\x10\x95\x05\x12\x13\n" +
	"\x0eTHEME_COSMETIC\x10\x96\x05\x12\x10\n" +
	"\vTHEME_DRUMS\x10\x97\x05\x12\x14\n" +
	"\x0fTHEME_EDUCATION\x10\x98\x05\x12\x11\n" +
	"\fTHEME_FABRIC\x10\x99\x05\x12\x0f\n" +
	"\n" +
	"THEME_FAME\x10\x9a\x05\x12\x12\n" +
	"\rTHEME_FASHION\x10\x9b\x05\x12\x11\n" +
	"\fTHEME_FLOWER\x10\x9c\x05\x12\x0f\n" +
	"\n" +
	"THEME_FOOD\x10\x9d\x05\x12\x11\n" +
	"\fTHEME_FRUITS\x10\x9e\x05\x12\x14\n" +
	"\x0fTHEME_FURNITURE\x10\x9f\x05\x12\x13\n" +
	"\x0eTHEME_GAMBLING\x10\xa0\x05\x12\x0f\n" +
	"\n" +
	"THEME_GAME\x10\xa1\x05\x12\x12\n" +
	"\rTHEME_GARBAGE\x10\xa2\x05\x12\x13\n" +
	"\x0eTHEME_GASOLINE\x10\xa3\x05\x12\x0f\n" +
	"\n" +
	"THEME_GOLD\x10\xa4\x05\x12\x11\n" +
	"\fTHEME_GUITAR\x10\xa5\x05\x12\x0e\n" +
	"\tTHEME_GUN\x10\xa6\x05\x12\x0e\n" +
	"\tTHEME_HAT\x10\xa7\x05\x12\x0f\n" +
	"\n" +
	"THEME_HOLE\x10\xa8\x05\x12\x0f\n" +
	"\n" +
	"THEME_HORN\x10\xa9\x05\x12\x12\n" +
	"\rTHEME_JEWELRY\x10\xaa\x05\x12\x12\n" +
	"\rTHEME_JUKEBOX\x10\xab\x05\x12\x0f\n" +
	"\n" +
	"THEME_KEYS\x10\xac\x05\x12\x10\n" +
	"\vTHEME_LIGHT\x10\xad\x05\x12\x0f\n" +
	"\n" +
	"THEME_LOCK\x10\xae\x05\x12\x0f\n" +
	"\n" +
	"THEME_MAIL\x10\xaf\x05\x12\x13\n" +
	"\x0eTHEME_MISPLACE\x10\xb0\x05\x12\x10\n" +
	"\vTHEME_MONEY\x10\xb1\x05\x12\x10\n" +
	"\vTHEME_MOVIE\x10\xb2\x05\x12\x10\n" +
	"\vTHEME_MUSIC\x10\xb3\x05\x12\x18\n" +
	"\x13THEME_MUSICBUSINESS\x10\xb4\x05\x12\x1c\n" +
	"\x17THEME_MUSICALINSTRUMENT\x10\xb5\x05\x12\x0f\n" +
	"\n" +
	"THEME_NEWS\x10\xb6\x05\x12\x12\n" +
	"\rTHEME_OBJECTS\x10\xb7\x05\x12\x10\n" +
	"\vTHEME_PAPER\x10\xb8\x05\x12\x15\n" +
	"\x10THEME_PERCUSSION\x10\xb9\x05\x12\x15\n" +
	"\x10THEME_PHOTOGRAPH\x10\xba\x05\x12\x10\n" +
	"\vTHEME_PIANO\x10\xbb\x05\x12\x1a\n" +
	"\x15THEME_PRODUCTANDBRAND\x10\xbc\x05\x12\x10\n" +
	"\vTHEME_RADIO\x10\xbd\x05\x12\x11\n" +
	"\fTHEME_RHYTHM\x10\xbe\x05\x12\x17\n" +
	"\x12THEME_ROADACCIDENT\x10\xbf\x05\x12\x10\n" +
	"\vTHEME_ROBOT\x10\xc0\x05\x12\x0f\n" +
	"\n" +
	"THEME_SHIP\x10\xc1\x05\x12\x0f\n" +
	"\n" +
	"THEME_SHOE\x10\xc2\x05\x12\x13\n" +
	"\x0eTHEME_SHOPPING\x10\xc3\x05\x12\x12\n" +
	"\rTHEME_SHOWBIZ\x10\xc4\x05\x12\x11\n" +
	"\fTHEME_SILVER\x10\xc5\x05\x12\x11\n" +
	"\fTHEME_STRING\x10\xc6\x05\x12\x18\n" +
	"\x13THEME_STRINGANDROPE\x10\xc7\x05\x12\x16\n" +
	"\x11THEME_SYNTHESIZER\x10\xc8\x05\x12\x11\n" +
	"\fTHEME_TATTOO\x10\xc9\x05\x12\x15\n" +
	"\x10THEME_TECHNOLOGY\x10\xca\x05\x12\x15\n" +
	"\x10THEME_TELEVISION\x10\xcb\x05\x12\x10\n" +
	"\vTHEME_TOOLS\x10\xcc\x05\x12\x0e\n" +
	"\tTHEME_TOY\x10\xcd\x05\x12\x0f\n" +
	"\n" +
	"THEME_TREE\x10\xce\x05\x12\x12\n" +
	"\rTHEME_TRUMPET\x10\xcf\x05\x12\x0e\n" +
	"\tTHEME_UFO\x10\xd0\x05\x12\x14\n" +
	"\x0fTHEME_VEGETABLE\x10\xd1\x05\x12\x14\n" +
	"\x0fTHEME_VIDEOGAME\x10\xd2\x05\x12\x10\n" +
	"\vTHEME_VOICE\x10\xd3\x05\x12\x11\n" +
	"\fTHEME_WEAPON\x10\xd4\x05\x12\x12\n" +
	"\rTHEME_WHISTLE\x10\xd5\x05\x12\x15\n" +
	"\x10THEME_WINDCHIMES\x10\xd6\x05\x12\x13\n" +
	"\x0eTHEME_WOODWIND\x10\xd7\x05\x12\x10\n" +
	"\vTHEME_ACTOR\x10\xd8\x05\x12\x10\n" +
	"\vTHEME_ALIEN\x10\xd9\x05\x12\x14\n" +
	"\x0fTHEME_ASTRONAUT\x10\xda\x05\x12\x14\n" +
	"\x0fTHEME_BALLERINA\x10\xdb\x05\x12\x11\n" +
	"\fTHEME_BLONDE\x10\xdc\x05\x12\x0f\n" +
	"\n" +
	"THEME_BOSS\x10\xdd\x05\x12\x13\n" +
	"\x0eTHEME_BRUNETTE\x10\xde\x05\x12\x14\n" +
	"\x0fTHEME_CELEBRITY\x10\xdf\x05\x12\x16\n" +
	"\x11THEME_CHEERLEADER\x10\xe0\x05\x12\x10\n" +
	"\vTHEME_COMIC\x10\xe1\x05\x12\x1b\n" +
	"\x16THEME_COWBOYANDCOWGIRL\x10\xe2\x05\x12\x10\n" +
	"\vTHEME_ELVIS\x10\xe3\x05\x12\x0f\n" +
	"\n" +
	"THEME_GEEK\x10\xe4\x05\x12\x10\n" +
	"\vTHEME_GHOST\x10\xe5\x05\x12\x10\n" +
	"\vTHEME_GYPSY\x10\xe6\x05\x12\x0f\n" +
	"\n" +
	"THEME_HERO\x10\xe7\x05\x12\x14\n" +
	"\x0fTHEME_HILLBILLY\x10\xe8\x05\x12\x11\n" +
	"\fTHEME_HIPPIE\x10\xe9\x05\x12\x13\n" +
	"\x0eTHEME_IDENTITY\x10\xea\x05\x12\x13\n" +
	"\x0eTHEME_MAGICIAN\x10\xeb\x05\x12\r\n" +
	"\bTHEME_ME\x10\xec\x05\x12\x12\n" +
	"\rTHEME_MONSTER\x10\xed\x05\x12\x11\n" +
	"\fTHEME_OUTLAW\x10\xee\x05\x12\x11\n" +
	"\fTHEME_PEOPLE\x10\xef\x05\x12\x11\n" +
	"\fTHEME_PIRATE\x10\xf0\x05\x12\x12\n" +
	"\rTHEME_REDHEAD\x10\xf1\x05\x12\x12\n" +
	"\rTHEME_ROYALTY\x10\xf2\x05\x12\x15\n" +
	"\x10THEME_SANTACLAUS\x10\xf3\x05\x12\x12\n" +
	"\rTHEME_SNOWMAN\x10\xf4\x05\x12\x18\n" +
	"\x13THEME_SOCIALOUTCAST\x10\xf5\x05\x12\x12\n" +
	"\rTHEME_STALKER\x10\xf6\x05\x12\x1d\n" +
	"\x18THEME_STORYBOOKCHARACTER\x10\xf7\x05\x12\x14\n" +
	"\x0fTHEME_SUPERHERO\x10\xf8\x05\x12\x0f\n" +
	"\n" +
	"THEME_THEM\x10\xf9\x05\x12\x15\n" +
	"\x10THEME_THREEKINGS\x10\xfa\x05\x12\r\n" +
	"\bTHEME_US\x10\xfb\x05\x12\x12\n" +
	"\rTHEME_VILLAIN\x10\xfc\x05\x12\x11\n" +
	"\fTHEME_WAITER\x10\xfd\x05\x12\x10\n" +
	"\vTHEME_WITCH\x10\xfe\x05\x12\x0e\n" +
	"\tTHEME_YOU\x10\xff\x05\x12\x10\n" +
	"\vTHEME_YOUTH\x10\x80\x06\x12\x16\n" +
	"\x11THEME_AFGHANISTAN\x10\x81\x06\x12\x11\n" +
	"\fTHEME_AFRICA\x10\x82\x06\x12\x12\n" +
	"\rTHEME_ALABAMA\x10\x83\x06\x12\x11\n" +
	"\fTHEME_ALASKA\x10\x84\x06\x12\x12\n" +
	"\rTHEME_ALBANIA\x10\x85\x06\x12\x12\n" +
	"\rTHEME_ALGERIA\x10\x86\x06\x12\x14\n" +
	"\x0fTHEME_AMSTERDAM\x10\x87\x06\x12\x12\n" +
	"\rTHEME_ANDORRA\x10\x88\x06\x12\x11\n" +
	"\fTHEME_ANGOLA\x10\x89\x06\x12\x1c\n" +
	"\x17THEME_ANTIGUAANDBARBUDA\x10\x8a\x06\x12\x14\n" +
	"\x0fTHEME_ARGENTINA\x10\x8b\x06\x12\x12\n" +
	"\rTHEME_ARIZONA\x10\x8c\x06\x12\x13\n" +
	"\x0eTHEME_ARKANSAS\x10\x8d\x06\x12\x12\n" +
	"\rTHEME_ARMENIA\x10\x8e\x06\x12\x0f\n" +
	"\n" +
	"THEME_ASIA\x10\x8f\x06\x12\x12\n" +
	"\rTHEME_ATLANTA\x10\x90\x06\x12\x14\n" +
	"\x0fTHEME_AUSTRALIA\x10\x91\x06\x12\x12\n" +
	"\rTHEME_AUSTRIA\x10\x92\x06\x12\x15\n" +
	"\x10THEME_AZERBAIJAN\x10\x93\x06\x12\x12\n" +
	"\rTHEME_BAHAMAS\x10\x94\x06\x12\x12\n" +
	"\rTHEME_BAHRAIN\x10\x95\x06\x12\x0f\n" +
	"\n" +
	"THEME_BALI\x10\x96\x06\x12\x12\n" +
	"\rTHEME_BALKANS\x10\x97\x06\x12\x17\n" +
	"\x12THEME_BALTICSTATES\x10\x98\x06\x12\x14\n" +
	"\x0fTHEME_BALTIMORE\x10\x99\x06\x12\x15\n" +
	"\x10THEME_BANGLADESH\x10\x9a\x06\x12\x13\n" +
	"\x0eTHEME_BARBADOS\x10\x9b\x06\x12\x0f\n" +
	"\n" +
	"THEME_BARS\x10\x9c\x06\x12\x13\n" +
	"\x0eTHEME_BATHROOM\x10\x9d\x06\x12\x12\n" +
	"\rTHEME_BEDROOM\x10\x9e\x06\x12\x12\n" +
	"\rTHEME_BELARUS\x10\x9f\x06\x12\x12\n" +
	"\rTHEME_BELGIUM\x10\xa0\x06\x12\x11\n" +
	"\fTHEME_BELIZE\x10\xa1\x06\x12\x12\n" +
	"\rTHEME_BENELUX\x10\xa2\x06\x12\x10\n" +
	"\vTHEME_BENIN\x10\xa3\x06\x12\x11\n" +
	"\fTHEME_BERLIN\x10\xa4\x06\x12\x12\n" +
	"\rTHEME_BERMUDA\x10\xa5\x06\x12\x11\n" +
	"\fTHEME_BHUTAN\x10\xa6\x06\x12\x15\n" +
	"\x10THEME_BIRMINGHAM\x10\xa7\x06\x12\x14\n" +
	"\x0fTHEME_BOARDWALK\x10\xa8\x06\x12\x12\n" +
	"\rTHEME_BOLIVIA\x10\xa9\x06\x12\x1f\n" +
	"\x1aTHEME_BOSNIAANDHERZEGOVINA\x10\xaa\x06\x12\x11\n" +
	"\fTHEME_BOSTON\x10\xab\x06\x12\x13\n" +
	"\x0eTHEME_BOTSWANA\x10\xac\x06\x12\x11\n" +
	"\fTHEME_BRAZIL\x10\xad\x06\x12\x11\n" +
	"\fTHEME_BRIDGE\x10\xae\x06\x12\x12\n" +
	"\rTHEME_BRITAIN\x10\xaf\x06\x12\x17\n" +
	"\x12THEME_BRITISHISLES\x10\xb0\x06\x12\x11\n" +
	"\fTHEME_BRUNEI\x10\xb1\x06\x12\x13\n" +
	"\x0eTHEME_BUILDING\x10\xb2\x06\x12\x13\n" +
	"\x0eTHEME_BULGARIA\x10\xb3\x06\x12\x16\n" +
	"\x11THEME_BURKINAFASO\x10\xb4\x06\x12\x12\n" +
	"\rTHEME_BURUNDI\x10\xb5\x06\x12\x15\n" +
	"\x10THEME_CALIFORNIA\x10\xb6\x06\x12\x13\n" +
	"\x0eTHEME_CAMBODIA\x10\xb7\x06\x12\x13\n" +
	"\x0eTHEME_CAMEROON\x10\xb8\x06\x12\x11\n" +
	"\fTHEME_CANADA\x10\xb9\x06\x12\x14\n" +
	"\x0fTHEME_CAPEVERDE\x10\xba\x06\x12\x14\n" +
	"\x0fTHEME_CAROLINAS\x10\xbb\x06\x12\x11\n" +
	"\fTHEME_CASINO\x10\xbc\x06\x12\x13\n" +
	"\x0eTHEME_CEMETARY\x10\xbd\x06\x12!\n" +
	"\x1cTHEME_CENTRALAFRICANREPUBLIC\x10\xbe\x06\x12\x19\n" +
	"\x14THEME_CENTRALAMERICA\x10\xbf\x06\x12\x0f\n" +
	"\n" +
	"THEME_CHAD\x10\xc0\x06\x12\x12\n" +
	"\rTHEME_CHICAGO\x10\xc1\x06\x12\x10\n" +
	"\vTHEME_CHILE\x10\xc2\x06\x12\x10\n" +
	"\vTHEME_CHINA\x10\xc3\x06\x12\x15\n" +
	"\x10THEME_CINCINNATI\x10\xc4\x06\x12\x0f\n" +
	"\n" +
	"THEME_CITY\x10\xc5\x06\x12\x13\n" +
	"\x0eTHEME_CITYLIFE\x10\xc6\x06\x12\x0f\n" +
	"\n" +
	"THEME_CLUB\x10\xc7\x06\x12\x13\n" +
	"\x0eTHEME_COLOMBIA\x10\xc8\x06\x12\x13\n" +
	"\x0eTHEME_COLORADO\x10\xc9\x06\x12\x12\n" +
	"\rTHEME_COMOROS\x10\xca\x06\x12\x16\n" +
	"\x11THEME_CONNECTICUT\x10\xcb\x06\x12\x14\n" +
	"\x0fTHEME_CONTINENT\x10\xcc\x06\x12\x16\n" +
	"\x11THEME_COOKISLANDS\x10\xcd\x06\x12\x14\n" +
	"\x0fTHEME_COSTARICA\x10\xce\x06\x12\x12\n" +
	"\rTHEME_COUNTRY\x10\xcf\x06\x12\x16\n" +
	"\x11THEME_COUNTRYLIFE\x10\xd0\x06\x12\x12\n" +
	"\rTHEME_CROATIA\x10\xd1\x06\x12\x0f\n" +
	"\n" +
	"THEME_CUBA\x10\xd2\x06\x12\x11\n" +
	"\fTHEME_CYPRUS\x10\xd3\x06\x12\x18\n" +
	"\x13THEME_CZECHREPUBLIC\x10\xd4\x06\x12\x19\n" +
	"\x14THEME_CZECHOSLOVAKIA\x10\xd5\x06\x12\x11\n" +
	"\fTHEME_DALLAS\x10\xd6\x06\x12\x13\n" +
	"\x0eTHEME_DELAWARE\x10\xd7\x06\x12'\n" +
	"\"THEME_DEMOCRATICREPUBLICOFTHECONGO\x10\xd8\x06\x12\x12\n" +
	"\rTHEME_DENMARK\x10\xd9\x06\x12\x11\n" +
	"\fTHEME_DENVER\x10\xda\x06\x12\x12\n" +
	"\rTHEME_DETROIT\x10\xdb\x06\x12\x13\n" +
	"\x0eTHEME_DJIBOUTI\x10\xdc\x06\x12\x13\n" +
	"\x0eTHEME_DOMINICA\x10\xdd\x06\x12\x1c\n" +
	"\x17THEME_DOMINICANREPUBLIC\x10\xde\x06\x12\x0f\n" +
	"\n" +
	"THEME_DOOR\x10\xdf\x06\x12\x11\n" +
	"\fTHEME_DUBLIN\x10\xe0\x06\x12\x18\n" +
	"\x13THEME_EASTERNEUROPE\x10\xe1\x06\x12\x12\n" +
	"\rTHEME_ECUADOR\x10\xe2\x06\x12\x10\n" +
	"\vTHEME_EGYPT\x10\xe3\x06\x12\x15\n" +
	"\x10THEME_ELSALVADOR\x10\xe4\x06\x12\x12\n" +
	"\rTHEME_ENGLAND\x10\xe5\x06\x12\x1b\n" +
	"\x16THEME_EQUATORIALGUINEA\x10\xe6\x06\x12\x12\n" +
	"\rTHEME_ERITREA\x10\xe7\x06\x12\x12\n" +
	"\rTHEME_ESTONIA\x10\xe8\x06\x12\x13\n" +
	"\x0eTHEME_ESWATINI\x10\xe9\x06\x12\x13\n" +
	"\x0eTHEME_ETHIOPIA\x10\xea\x06\x12\x11\n" +
	"\fTHEME_EUROPE\x10\xeb\x06\x12\x1c\n" +
	"\x17THEME_EUROPEANCONTINENT\x10\xec\x06\x12\x1f\n" +
	"\x1aTHEME_EUROPEANECONOMICAREA\x10\xed\x06\x12$\n" +
	"\x1fTHEME_EUROPEANECONOMICCOMMUNITY\x10\xee\x06\x12\x18\n" +
	"\x13THEME_EUROPEANUNION\x10\xef\x06\x12\x0f\n" +
	"\n" +
	"THEME_FARM\x10\xf0\x06\x12\x0f\n" +
	"\n" +
	"THEME_FIJI\x10\xf1\x06\x12\x12\n" +
	"\rTHEME_FINLAND\x10\xf2\x06\x12\x1a\n" +
	"\x15THEME_FLOORANDCEILING\x10\xf3\x06\x12\x12\n" +
	"\rTHEME_FLORIDA\x10\xf4\x06\x12\x11\n" +
	"\fTHEME_FRANCE\x10\xf5\x06\x12\x1a\n" +
	"\x15THEME_FRENCHCARIBBEAN\x10\xf6\x06\x12\x17\n" +
	"\x12THEME_FRENCHGUIANA\x10\xf7\x06\x12\x1a\n" +
	"\x15THEME_FRENCHPOLYNESIA\x10\xf8\x06\x12\x10\n" +
	"\vTHEME_GABON\x10\xf9\x06\x12\x11\n" +
	"\fTHEME_GAMBIA\x10\xfa\x06\x12\x16\n" +
	"\x11THEME_GANGSTALIFE\x10\xfb\x06\x12\x11\n" +
	"\fTHEME_GARDEN\x10\xfc\x06\x12\x15\n" +
	"\x10THEME_GASSTATION\x10\xfd\x06\x12\x1d\n" +
	"\x18THEME_GEOGRAPHICLOCATION\x10\xfe\x06\x12\x12\n" +
	"\rTHEME_GEORGIA\x10\xff\x06\x12\x12\n" +
	"\rTHEME_GERMANY\x10\x80\a\x12\x10\n" +
	"\vTHEME_GHANA\x10\x81\a\x12\x13\n" +
	"\x0eTHEME_GOODLIFE\x10\x82\a\x12\x17\n" +
	"\x12THEME_GREATBRITAIN\x10\x83\a\x12\x11\n" +
	"\fTHEME_GREECE\x10\x84\a\x12\x12\n" +
	"\rTHEME_GRENADA\x10\x85\a\x12\x14\n" +
	"\x0fTHEME_GUATEMALA\x10\x86\a\x12\x11\n" +
	"\fTHEME_GUINEA\x10\x87\a\x12\x18\n" +
	"\x13THEME_GUINEA_BISSAU\x10\x88\a\x12\x11\n" +
	"\fTHEME_GUYANA\x10\x89\a\x12\x10\n" +
	"\vTHEME_HAITI\x10\x8a\a\x12\x11\n" +
	"\fTHEME_HAVANA\x10\x8b\a\x12\x11\n" +
	"\fTHEME_HAWAII\x10\x8c\a\x12\x12\n" +
	"\rTHEME_HIGHWAY\x10\x8d\a\x12\x12\n" +
	"\rTHEME_HOLLAND\x10\x8e\a\x12\x14\n" +
	"\x0fTHEME_HOLLYWOOD\x10\x8f\a\x12\x0f\n" +
	"\n" +
	"THEME_HOME\x10\x90\a\x12\x13\n" +
	"\x0eTHEME_HONDURAS\x10\x91\a\x12\x13\n" +
	"\x0eTHEME_HONGKONG\x10\x92\a\x12\x10\n" +
	"\vTHEME_HOTEL\x10\x93\a\x12\x10\n" +
	"\vTHEME_HOUSE\x10\x94\a\x12\x12\n" +
	"\rTHEME_HOUSTON\x10\x95\a\x12\x12\n" +
	"\rTHEME_HUNGARY\x10\x96\a\x12\x12\n" +
	"\rTHEME_ICELAND\x10\x97\a\x12\x10\n" +
	"\vTHEME_IDAHO\x10\x98\a\x12\x13\n" +
	"\x0eTHEME_ILLINOIS\x10\x99\a\x12\x10\n" +
	"\vTHEME_INDIA\x10\x9a\a\x12\x12\n" +
	"\rTHEME_INDIANA\x10\x9b\a\x12\x14\n" +
	"\x0fTHEME_INDONESIA\x10\x9c\a\x12\x0f\n" +
	"\n" +
	"THEME_IOWA\x10\x9d\a\x12\x0f\n" +
	"\n" +
	"THEME_IRAN\x10\x9e\a\x12\x0f\n" +
	"\n" +
	"THEME_IRAQ\x10\x9f\a\x12\x12\n" +
	"\rTHEME_IRELAND\x10\xa0\a\x12\x14\n" +
	"\x0fTHEME_ISLEOFMAN\x10\xa1\a\x12\x11\n" +
	"\fTHEME_ISRAEL\x10\xa2\a\x12\x10\n" +
	"\vTHEME_ITALY\x10\xa3\a\x12\x15\n" +
	"\x10THEME_IVORYCOAST\x10\xa4\a\x12\x12\n" +
	"\rTHEME_JAMAICA\x10\xa5\a\x12\x10\n" +
	"\vTHEME_JAPAN\x10\xa6\a\x12\x0f\n" +
	"\n" +
	"THEME_JAVA\x10\xa7\a\x12\x11\n" +
	"\fTHEME_JORDAN\x10\xa8\a\x12\x11\n" +
	"\fTHEME_KANSAS\x10\xa9\a\x12\x15\n" +
	"\x10THEME_KANSASCITY\x10\xaa\a\x12\x15\n" +
	"\x10THEME_KAZAKHSTAN\x10\xab\a\x12\x13\n" +
	"\x0eTHEME_KENTUCKY\x10\xac\a\x12\x10\n" +
	"\vTHEME_KENYA\x10\xad\a\x12\x13\n" +
	"\x0eTHEME_KIRIBATI\x10\xae\a\x12\x11\n" +
	"\fTHEME_KUWAIT\x10\xaf\a\x12\x15\n" +
	"\x10THEME_KYRGYZSTAN\x10\xb0\a\x12\x0f\n" +
	"\n" +
	"THEME_LAOS\x10\xb1\a\x12\x13\n" +
	"\x0eTHEME_LASVEGAS\x10\xb2\a\x12\x11\n" +
	"\fTHEME_LATVIA\x10\xb3\a\x12\x12\n" +
	"\rTHEME_LEBANON\x10\xb4\a\x12\x12\n" +
	"\rTHEME_LESOTHO\x10\xb5\a\x12\x12\n" +
	"\rTHEME_LIBERIA\x10\xb6\a\x12\x10\n" +
	"\vTHEME_LIBYA\x10\xb7\a\x12\x18\n" +
	"\x13THEME_LIECHTENSTEIN\x10\xb8\a\x12\x15\n" +
	"\x10THEME_LIGHTHOUSE\x10\xb9\a\x12\x14\n" +
	"\x0fTHEME_LITHUANIA\x10\xba\a\x12\x13\n" +
	"\x0eTHEME_LOCATION\x10\xbb\a\x12\x11\n" +
	"\fTHEME_LONDON\x10\xbc\a\x12\x15\n" +
	"\x10THEME_LOSANGELES\x10\xbd\a\x12\x14\n" +
	"\x0fTHEME_LOUISIANA\x10\xbe\a\x12\x15\n" +
	"\x10THEME_LUXEMBOURG\x10\xbf\a\x12\x10\n" +
	"\vTHEME_MACAO\x10\xc0\a\x12\x15\n" +
	"\x10THEME_MADAGASCAR\x10\xc1\a\x12\x10\n" +
	"\vTHEME_MAINE\x10\xc2\a\x12\x11\n" +
	"\fTHEME_MALAWI\x10\xc3\a\x12\x13\n" +
	"\x0eTHEME_MALAYSIA\x10\xc4\a\x12\x13\n" +
	"\x0eTHEME_MALDIVES\x10\xc5\a\x12\x0f\n" +
	"\n" +
	"THEME_MALI\x10\xc6\a\x12\x10\n" +
	"\vTHEME_MALTA\x10\xc7\a\x12\x1a\n" +
	"\x15THEME_MARSHALLISLANDS\x10\xc8\a\x12\x13\n" +
	"\x0eTHEME_MARYLAND\x10\xc9\a\x12\x18\n" +
	"\x13THEME_MASSACHUSETTS\x10\xca\a\x12\x15\n" +
	"\x10THEME_MAURITANIA\x10\xcb\a\x12\x14\n" +
	"\x0fTHEME_MAURITIUS\x10\xcc\a\x12\x12\n" +
	"\rTHEME_MEDELLN\x10\xcd\a\x12\x12\n" +
	"\rTHEME_MEMPHIS\x10\xce\a\x12\x11\n" +
	"\fTHEME_MEXICO\x10\xcf\a\x12\x10\n" +
	"\vTHEME_MIAMI\x10\xd0\a\x12\x13\n" +
	"\x0eTHEME_MICHIGAN\x10\xd1\a\x12\x15\n" +
	"\x10THEME_MICRONESIA\x10\xd2\a\x12\x15\n" +
	"\x10THEME_MIDDLEEAST\x10\xd3\a\x12\x14\n" +
	"\x0fTHEME_MINNESOTA\x10\xd4\a\x12\x16\n" +
	"\x11THEME_MISSISSIPPI\x10\xd5\a\x12\x13\n" +
	"\x0eTHEME_MISSOURI\x10\xd6\a\x12\x11\n" +
	"\fTHEME_MOBILE\x10\xd7\a\x12\x12\n" +
	"\rTHEME_MOLDOVA\x10\xd8\a\x12\x11\n" +
	"\fTHEME_MONACO\x10\xd9\a\x12\x13\n" +
	"\x0eTHEME_MONGOLIA\x10\xda\a\x12\x12\n" +
	"\rTHEME_MONTANA\x10\xdb\a\x12\x15\n" +
	"\x10THEME_MONTENEGRO\x10\xdc\a\x12\x12\n" +
	"\rTHEME_MOROCCO\x10\xdd\a\x12\x11\n" +
	"\fTHEME_MOSCOW\x10\xde\a\x12\x15\n" +
	"\x10THEME_MOZAMBIQUE\x10\xdf\a\x12\x12\n" +
	"\rTHEME_MYANMAR\x10\xe0\a\x12\x12\n" +
	"\rTHEME_NAMIBIA\x10\xe1\a\x12\x14\n" +
	"\x0fTHEME_NASHVILLE\x10\xe2\a\x12\x10\n" +
	"\vTHEME_NAURU\x10\xe3\a\x12\x13\n" +
	"\x0eTHEME_NEBRASKA\x10\xe4\a\x12\x10\n" +
	"\vTHEME_NEPAL\x10\xe5\a\x12\x16\n" +
	"\x11THEME_NETHERLANDS\x10\xe6\a\x12\x11\n" +
	"\fTHEME_NEVADA\x10\xe7\a\x12\x17\n" +
	"\x12THEME_NEWHAMPSHIRE\x10\xe8\a\x12\x14\n" +
	"\x0fTHEME_NEWJERSEY\x10\xe9\a\x12\x14\n" +
	"\x0fTHEME_NEWMEXICO\x10\xea\a\x12\x15\n" +
	"\x10THEME_NEWORLEANS\x10\xeb\a\x12\x16\n" +
	"\x11THEME_NEWYORKCITY\x10\xec\a\x12\x12\n" +
	"\rTHEME_NEWYORK\x10\xed\a\x12\x15\n" +
	"\x10THEME_NEWZEALAND\x10\xee\a\x12\x14\n" +
	"\x0fTHEME_NICARAGUA\x10\xef\a\x12\x10\n" +
	"\vTHEME_NIGER\x10\xf0\a\x12\x12\n" +
	"\rTHEME_NIGERIA\x10\xf1\a\x12\x17\n" +
	"\x12THEME_NORTHAMERICA\x10\xf2\a\x12\x16\n" +
	"\x11THEME_NORTHDAKOTA\x10\xf3\a\x12\x15\n" +
	"\x10THEME_NORTHKOREA\x10\xf4\a\x12\x19\n" +
	"\x14THEME_NORTHMACEDONIA\x10\xf5\a\x12\x11\n" +
	"\fTHEME_NORWAY\x10\xf6\a\x12\x12\n" +
	"\rTHEME_OCEANIA\x10\xf7\a\x12\x0f\n" +
	"\n" +
	"THEME_OHIO\x10\xf8\a\x12\x13\n" +
	"\x0eTHEME_OKLAHOMA\x10\xf9\a\x12\x0f\n" +
	"\n" +
	"THEME_OMAN\x10\xfa\a\x12\x11\n" +
	"\fTHEME_OREGON\x10\xfb\a\x12\x12\n" +
	"\rTHEME_OUTDOOR\x10\xfc\a\x12\x19\n" +
	"\x14THEME_PACIFICISLANDS\x10\xfd\a\x12\x0e\n" +
	"\tTHEME_PAD\x10\xfe\a\x12\x13\n" +
	"\x0eTHEME_PAKISTAN\x10\xff\a\x12\x10\n" +
	"\vTHEME_PALAU\x10\x80\b\x12\x11\n" +
	"\fTHEME_PANAMA\x10\x81\b\x12\x19\n" +
	"\x14THEME_PAPUANEWGUINEA\x10\x82\b\x12\x13\n" +
	"\x0eTHEME_PARAGUAY\x10\x83\b\x12\x10\n" +
	"\vTHEME_PARIS\x10\x84\b\x12\x0f\n" +
	"\n" +
	"THEME_PARK\x10\x85\b\x12\x17\n" +
	"\x12THEME_PENNSYLVANIA\x10\x86\b\x12\x0f\n" +
	"\n" +
	"THEME_PERU\x10\x87\b\x12\x17\n" +
	"\x12THEME_PHILADELPHIA\x10\x88\b\x12\x16\n" +
	"\x11THEME_PHILIPPINES\x10\x89\b\x12\x10\n" +
	"\vTHEME_PLACE\x10\x8a\b\x12\x11\n" +
	"\fTHEME_POLAND\x10\x8b\b\x12\x14\n" +
	"\x0fTHEME_POLYNESIA\x10\x8c\b\x12\x13\n" +
	"\x0eTHEME_PORTUGAL\x10\x8d\b\x12\x12\n" +
	"\rTHEME_PRAIRIE\x10\x8e\b\x12\x15\n" +
	"\x10THEME_PUERTORICO\x10\x8f\b\x12\x10\n" +
	"\vTHEME_QATAR\x10\x90\b\x12\x10\n" +
	"\vTHEME_RANCH\x10\x91\b\x12\x1d\n" +
	"\x18THEME_REPUBLICOFTHECONGO\x10\x92\b\x12\x15\n" +
	"\x10THEME_RESTAURANT\x10\x93\b\x12\x16\n" +
	"\x11THEME_RHODEISLAND\x10\x94\b\x12\x17\n" +
	"\x12THEME_RIODEJANEIRO\x10\x95\b\x12\x0f\n" +
	"\n" +
	"THEME_ROAD\x10\x96\b\x12\x10\n" +
	"\vTHEME_RODEO\x10\x97\b\x12\x12\n" +
	"\rTHEME_ROMANIA\x10\x98\b\x12\x0f\n" +
	"\n" +
	"THEME_ROME\x10\x99\b\x12\x11\n" +
	"\fTHEME_RUSSIA\x10\x9a\b\x12\x11\n" +
	"\fTHEME_RWANDA\x10\x9b\b\x12\x1d\n" +
	"\x18THEME_SAINTKITTSANDNEVIS\x10\x9c\b\x12\x15\n" +
	"\x10THEME_SAINTLUCIA\x10\x9d\b\x12'\n" +
	"\"THEME_SAINTVINCENTANDTHEGRENADINES\x10\x9e\b\x12\x17\n" +
	"\x12THEME_SALTLAKECITY\x10\x9f\b\x12\x10\n" +
	"\vTHEME_SAMOA\x10\xa0\b\x12\x15\n" +
	"\x10THEME_SANANTONIO\x10\xa1\b\x12\x17\n" +
	"\x12THEME_SANFRANCISCO\x10\xa2\b\x12\x14\n" +
	"\x0fTHEME_SANMARINO\x10\xa3\b\x12\x12\n" +
	"\rTHEME_SANTAFE\x10\xa4\b\x12\x1d\n" +
	"\x18THEME_SAOTOMEANDPRINCIPE\x10\xa5\b\x12\x16\n" +
	"\x11THEME_SAUDIARABIA\x10\xa6\b\x12\x13\n" +
	"\x0eTHEME_SAVANNAH\x10\xa7\b\x12\x16\n" +
	"\x11THEME_SCANDINAVIA\x10\xa8\b\x12\x11\n" +
	"\fTHEME_SCHOOL\x10\xa9\b\x12\x13\n" +
	"\x0eTHEME_SCOTLAND\x10\xaa\b\x12\x12\n" +
	"\rTHEME_SENEGAL\x10\xab\b\x12\x11\n" +
	"\fTHEME_SERBIA\x10\xac\b\x12\x15\n" +
	"\x10THEME_SEYCHELLES\x10\xad\b\x12\x16\n" +
	"\x11THEME_SIERRALEONE\x10\xae\b\x12\x14\n" +
	"\x0fTHEME_SINGAPORE\x10\xaf\b\x12\x14\n" +
	"\x0fTHEME_SITUATION\x10\xb0\b\x12\x13\n" +
	"\x0eTHEME_SLOVAKIA\x10\xb1\b\x12\x13\n" +
	"\x0eTHEME_SLOVENIA\x10\xb2\b\x12\x18\n" +
	"\x13THEME_SMALLTOWNLIFE\x10\xb3\b\x12\x19\n" +
	"\x14THEME_SOLOMONISLANDS\x10\xb4\b\x12\x12\n" +
	"\rTHEME_SOMALIA\x10\xb5\b\x12\x16\n" +
	"\x11THEME_SOUTHAFRICA\x10\xb6\b\x12\x17\n" +
	"\x12THEME_SOUTHAMERICA\x10\xb7\b\x12\x16\n" +
	"\x11THEME_SOUTHDAKOTA\x10\xb8\b\x12\x18\n" +
	"\x13THEME_SOUTHEASTASIA\x10\xb9\b\x12\x15\n" +
	"\x10THEME_SOUTHKOREA\x10\xba\b\x12\x15\n" +
	"\x10THEME_SOUTHSUDAN\x10\xbb\b\x12\x10\n" +
	"\vTHEME_SPAIN\x10\xbc\b\x12\x13\n" +
	"\x0eTHEME_SRILANKA\x10\xbd\b\x12\x13\n" +
	"\x0eTHEME_ST_LOUIS\x10\xbe\b\x12\x19\n" +
	"\x14THEME_POLITICALSTATE\x10\xbf\b\x12\x11\n" +
	"\fTHEME_STREET\x10\xc0\b\x12\x10\n" +
	"\vTHEME_SUDAN\x10\xc1\b\x12\x13\n" +
	"\x0eTHEME_SURINAME\x10\xc2\b\x12\x11\n" +
	"\fTHEME_SWEDEN\x10\xc3\b\x12\x16\n" +
	"\x11THEME_SWITZERLAND\x10\xc4\b\x12\x10\n" +
	"\vTHEME_SYRIA\x10\xc5\b\x12\x11\n" +
	"\fTHEME_TAIWAN\x10\xc6\b\x12\x15\n" +
	"\x10THEME_TAJIKISTAN\x10\xc7\b\x12\x13\n" +
	"\x0eTHEME_TANZANIA\x10\xc8\b\x12\x14\n" +
	"\x0fTHEME_TENNESSEE\x10\xc9\b\x12\x10\n" +
	"\vTHEME_TEXAS\x10\xca\b\x12\x13\n" +
	"\x0eTHEME_THAILAND\x10\xcb\b\x12\x12\n" +
	"\rTHEME_THEATRE\x10\xcc\b\x12\x10\n" +
	"\vTHEME_TIBET\x10\xcd\b\x12\x16\n" +
	"\x11THEME_TIMOR_LESTE\x10\xce\b\x12\x0f\n" +
	"\n" +
	"THEME_TOGO\x10\xcf\b\x12\x10\n" +
	"\vTHEME_TOKYO\x10\xd0\b\x12\x10\n" +
	"\vTHEME_TONGA\x10\xd1\b\x12\x10\n" +
	"\vTHEME_TRAIL\x10\xd2\b\x12\x1c\n" +
	"\x17THEME_TRINIDADANDTOBAGO\x10\xd3\b\x12\x10\n" +
	"\vTHEME_TULSA\x10\xd4\b\x12\x12\n" +
	"\rTHEME_TUNISIA\x10\xd5\b\x12\x11\n" +
	"\fTHEME_TURKEY\x10\xd6\b\x12\x17\n" +
	"\x12THEME_TURKMENISTAN\x10\xd7\b\x12\x11\n" +
	"\fTHEME_TUVALU\x10\xd8\b\x12\x11\n" +
	"\fTHEME_UGANDA\x10\xd9\b\x12\x12\n" +
	"\rTHEME_UKRAINE\x10\xda\b\x12\x1d\n" +
	"\x18THEME_UNITEDARABEMIRATES\x10\xdb\b\x12\x18\n" +
	"\x13THEME_UNITEDKINGDOM\x10\xdc\b\x12\x17\n" +
	"\x12THEME_UNITEDSTATES\x10\xdd\b\x12\x12\n" +
	"\rTHEME_URUGUAY\x10\xde\b\x12\x0f\n" +
	"\n" +
	"THEME_UTAH\x10\xdf\b\x12\x15\n" +
	"\x10THEME_UZBEKISTAN\x10\xe0\b\x12\x12\n" +
	"\rTHEME_VANUATU\x10\xe1\b\x12\x12\n" +
	"\rTHEME_VATICAN\x10\xe2\b\x12\x14\n" +
	"\x0fTHEME_VENEZUELA\x10\xe3\b\x12\x12\n" +
	"\rTHEME_VERMONT\x10\xe4\b\x12\x11\n" +
	"\fTHEME_VIENNA\x10\xe5\b\x12\x12\n" +
	"\rTHEME_VIETNAM\x10\xe6\b\x12\x13\n" +
	"\x0eTHEME_VIRGINIA\x10\xe7\b\x12\x10\n" +
	"\vTHEME_WALES\x10\xe8\b\x12\x0f\n" +
	"\n" +
	"THEME_WALL\x10\xe9\b\x12\x15\n" +
	"\x10THEME_WASHINGTON\x10\xea\b\x12\x15\n" +
	"\x10THEME_WESTINDIES\x10\xeb\b\x12\x17\n" +
	"\x12THEME_WESTVIRGINIA\x10\xec\b\x12\x18\n" +
	"\x13THEME_WESTERNSAHARA\x10\xed\b\x12\x11\n" +
	"\fTHEME_WINDOW\x10\xee\b\x12\x14\n" +
	"\x0fTHEME_WISCONSIN\x10\xef\b\x12\x10\n" +
	"\vTHEME_WORLD\x10\xf0\b\x12\x12\n" +
	"\rTHEME_WYOMING\x10\xf1\b\x12\x10\n" +
	"\vTHEME_YEMEN\x10\xf2\b\x12\x15\n" +
	"\x10THEME_YUGOSLAVIA\x10\xf3\b\x12\x11\n" +
	"\fTHEME_ZAMBIA\x10\xf4\b\x12\x13\n" +
	"\x0eTHEME_ZIMBABWE\x10\xf5\b\x12\x0e\n" +
	"\tTHEME_ZOO\x10\xf6\b\x12\x1c\n" +
	"\x17THEME_CAPITALPUNISHMENT\x10\xf7\b\x12\x16\n" +
	"\x11THEME_CIVILRIGHTS\x10\xf8\b\x12\x10\n" +
	"\vTHEME_CRIME\x10\xf9\b\x12\x1a\n" +
	"\x15THEME_DRAFTRESISTANCE\x10\xfa\b\x12\x15\n" +
	"\x10THEME_ENLISTMENT\x10\xfb\b\x12\x16\n" +
	"\x11THEME_ENVIRONMENT\x10\xfc\b\x12\x14\n" +
	"\x0fTHEME_ESPIONAGE\x10\xfd\b\x12\x12\n" +
	"\rTHEME_FASCISM\x10\xfe\b\x12\x13\n" +
	"\x0eTHEME_FEMINISM\x10\xff\b\x12\x12\n" +
	"\rTHEME_FREEDOM\x10\x80\t\x12\x15\n" +
	"\x10THEME_GOVERNMENT\x10\x81\t\x12\x12\n" +
	"\rTHEME_JUSTICE\x10\x82\t\x12\x16\n" +
	"\x11THEME_LAWANDORDER\x10\x83\t\x12\x19\n" +
	"\x14THEME_LAWENFORCEMENT\x10\x84\t\x12\x13\n" +
	"\x0eTHEME_MILITARY\x10\x85\t\x12\x18\n" +
	"\x13THEME_NUCLEARENERGY\x10\x86\t\x12\x15\n" +
	"\x10THEME_NUCLEARWAR\x10\x87\t\x12\x15\n" +
	"\x10THEME_OPPRESSION\x10\x88\t\x12\x15\n" +
	"\x10THEME_PATRIOTISM\x10\x89\t\x12\x14\n" +
	"\x0fTHEME_POLITICAL\x10\x8a\t\x12\x13\n" +
	"\x0eTHEME_POLITICS\x10\x8b\t\x12\x12\n" +
	"\rTHEME_POVERTY\x10\x8c\t\x12\x1a\n" +
	"\x15THEME_POWERANDCONTROL\x10\x8d\t\x12\x14\n" +
	"\x0fTHEME_PREJUDICE\x10\x8e\t\x12\x14\n" +
	"\x0fTHEME_PRESIDENT\x10\x8f\t\x12\x11\n" +
	"\fTHEME_PRISON\x10\x90\t\x12\x12\n" +
	"\rTHEME_PROTEST\x10\x91\t\x12\x11\n" +
	"\fTHEME_RACISM\x10\x92\t\x12\x15\n" +
	"\x10THEME_REVOLUTION\x10\x93\t\x12\x16\n" +
	"\x11THEME_SEGREGATION\x10\x94\t\x12\x12\n" +
	"\rTHEME_SLAVERY\x10\x95\t\x12\x13\n" +
	"\x0eTHEME_SUFFRAGE\x10\x96\t\x12\x10\n" +
	"\vTHEME_UNION\x10\x97\t\x12\x0e\n" +
	"\tTHEME_WAR\x10\x98\t\x12\x17\n" +
	"\x12THEME_WORKINGCLASS\x10\x99\t\x12\x15\n" +
	"\x10THEME_MAKINGLOVE\x10\x9a\t\x12\x15\n" +
	"\x10THEME_SENSUALITY\x10\x9b\t\x12\x10\n" +
	"\vTHEME_ANGEL\x10\x9c\t\x12\x15\n" +
	"\x10THEME_ARMAGEDDON\x10\x9d\t\x12\x14\n" +
	"\x0fTHEME_ASTROLOGY\x10\x9e\t\x12\x11\n" +
	"\fTHEME_BELIEF\x10\x9f\t\x12\x10\n" +
	"\vTHEME_BLESS\x10\xa0\t\x12\x11\n" +
	"\fTHEME_BUDDHA\x10\xa1\t\x12\x11\n" +
	"\fTHEME_CHURCH\x10\xa2\t\x12\x16\n" +
	"\x11THEME_CRUCIFIXION\x10\xa3\t\x12\x13\n" +
	"\x0eTHEME_DARKNESS\x10\xa4\t\x12\x10\n" +
	"\vTHEME_DEATH\x10\xa5\t\x12\x10\n" +
	"\vTHEME_DEVIL\x10\xa6\t\x12\x10\n" +
	"\vTHEME_DREAM\x10\xa7\t\x12\x18\n" +
	"\x13THEME_ENLIGHTENMENT\x10\xa8\t\x12\x0f\n" +
	"\n" +
	"THEME_EVIL\x10\xa9\t\x12\x10\n" +
	"\vTHEME_FAITH\x10\xaa\t\x12\x17\n" +
	"\x12THEME_FAITHINDOUBT\x10\xab\t\x12\x0f\n" +
	"\n" +
	"THEME_FATE\x10\xac\t\x12\x18\n" +
	"\x13THEME_FORTUNETELLER\x10\xad\t\x12\x0e\n" +
	"\tTHEME_GOD\x10\xae\t\x12\x11\n" +
	"\fTHEME_HEAVEN\x10\xaf\t\x12\x0f\n" +
	"\n" +
	"THEME_HELL\x10\xb0\t\x12\x0f\n" +
	"\n" +
	"THEME_IDEA\x10\xb1\t\x12\x16\n" +
	"\x11THEME_IMMORTALITY\x10\xb2\t\x12\x16\n" +
	"\x11THEME_JESUSCHRIST\x10\xb3\t\x12\x10\n" +
	"\vTHEME_KARMA\x10\xb4\t\x12\x10\n" +
	"\vTHEME_MAGIC\x10\xb5\t\x12\x10\n" +
	"\vTHEME_MERCY\x10\xb6\t\x12\x12\n" +
	"\rTHEME_MIRACLE\x10\xb7\t\x12\x12\n" +
	"\rTHEME_MYSTERY\x10\xb8\t\x12\x14\n" +
	"\x0fTHEME_NIGHTMARE\x10\xb9\t\x12\x11\n" +
	"\fTHEME_PRAYER\x10\xba\t\x12\x13\n" +
	"\x0eTHEME_PROPHECY\x10\xbb\t\x12\x15\n" +
	"\x10THEME_REDEMPTION\x10\xbc\t\x12\x13\n" +
	"\x0eTHEME_RELIGION\x10\xbd\t\x12\x10\n" +
	"\vTHEME_SIGNS\x10\xbe\t\x12\x0e\n" +
	"\tTHEME_SIN\x10\xbf\t\x12\x11\n" +
	"\fTHEME_SPIRIT\x10\xc0\t\x12\x17\n" +
	"\x12THEME_SUPERNATURAL\x10\xc1\t\x12\x10\n" +
	"\vTHEME_TAROT\x10\xc2\t\x12\x11\n" +
	"\fTHEME_UTOPIA\x10\xc3\t\x12\x11\n" +
	"\fTHEME_VOODOO\x10\xc4\t\x12\x13\n" +
	"\x0eTHEME_WIZARDRY\x10\xc5\t\x12\x11\n" +
	"\fTHEME_ZODIAC\x10\xc6\t\x12\x14\n" +
	"\x0fTHEME_ADDICTION\x10\xc7\t\x12\x12\n" +
	"\rTHEME_ALCOHOL\x10\xc8\t\x12\x13\n" +
	"\x0eTHEME_ANTIDRUG\x10\xc9\t\x12\x0f\n" +
	"\n" +
	"THEME_DRUG\x10\xca\t\x12\x16\n" +
	"\x11THEME_INTOXICATED\x10\xcb\t\x12\x10\n" +
	"\vTHEME_SOBER\x10\xcc\t\x12\x15\n" +
	"\x10THEME_SUBSTANCES\x10\xcd\t\x12\x12\n" +
	"\rTHEME_TOBACCO\x10\xce\t\x12\x16\n" +
	"\x11THEME_ADOLESCENCE\x10\xcf\t\x12\x14\n" +
	"\x0fTHEME_AFTERNOON\x10\xd0\t\x12\x10\n" +
	"\vTHEME_APRIL\x10\xd1\t\x12\x11\n" +
	"\fTHEME_AUGUST\x10\xd2\t\x12\x0f\n" +
	"\n" +
	"THEME_DATE\x10\xd3\t\x12\x0f\n" +
	"\n" +
	"THEME_DAWN\x10\xd4\t\x12\x0e\n" +
	"\tTHEME_DAY\x10\xd5\t\x12\x12\n" +
	"\rTHEME_DAYTIME\x10\xd6\t\x12\x13\n" +
	"\x0eTHEME_DECEMBER\x10\xd7\t\x12\x13\n" +
	"\x0eTHEME_ETERNITY\x10\xd8\t\x12\x13\n" +
	"\x0eTHEME_EVERYDAY\x10\xd9\t\x12\x11\n" +
	"\fTHEME_AUTUMN\x10\xda\t\x12\x13\n" +
	"\x0eTHEME_FEBRUARY\x10\xdb\t\x12\x11\n" +
	"\fTHEME_FRIDAY\x10\xdc\t\x12\x11\n" +
	"\fTHEME_FUTURE\x10\xdd\t\x12\x12\n" +
	"\rTHEME_GENERAL\x10\xde\t\x12\x14\n" +
	"\x0fTHEME_GOODNIGHT\x10\xdf\t\x12\x14\n" +
	"\x0fTHEME_GROWOLDER\x10\xe0\t\x12\x11\n" +
	"\fTHEME_GROWUP\x10\xe1\t\x12\x12\n" +
	"\rTHEME_HISTORY\x10\xe2\t\x12\x10\n" +
	"\vTHEME_HUMAN\x10\xe3\t\x12\x12\n" +
	"\rTHEME_JANUARY\x10\xe4\t\x12\x0f\n" +
	"\n" +
	"THEME_JULY\x10\xe5\t\x12\x0f\n" +
	"\n" +
	"THEME_JUNE\x10\xe6\t\x12\x14\n" +
	"\x0fTHEME_LASTNIGHT\x10\xe7\t\x12\x0f\n" +
	"\n" +
	"THEME_LATE\x10\xe8\t\x12\x10\n" +
	"\vTHEME_MARCH\x10\xe9\t\x12\x0e\n" +
	"\tTHEME_MAY\x10\xea\t\x12\x13\n" +
	"\x0eTHEME_MIDNIGHT\x10\xeb\t\x12\x11\n" +
	"\fTHEME_MONDAY\x10\xec\t\x12\x10\n" +
	"\vTHEME_MONTH\x10\xed\t\x12\x12\n" +
	"\rTHEME_MORNING\x10\xee\t\x12\x0e\n" +
	"\tTHEME_NEW\x10\xef\t\x12\x11\n" +
	"\fTHEME_NEWDAY\x10\xf0\t\x12\x10\n" +
	"\vTHEME_NIGHT\x10\xf1\t\x12\x0f\n" +
	"\n" +
	"THEME_NOON\x10\xf2\t\x12\x13\n" +
	"\x0eTHEME_NOVEMBER\x10\xf3\t\x12\x0e\n" +
	"\tTHEME_NOW\x10\xf4\t\x12\x12\n" +
	"\rTHEME_OCTOBER\x10\xf5\t\x12\x0e\n" +
	"\tTHEME_OLD\x10\xf6\t\x12\x0f\n" +
	"\n" +
	"THEME_PAST\x10\xf7\t\x12\x12\n" +
	"\rTHEME_PRESENT\x10\xf8\t\x12\x13\n" +
	"\x0eTHEME_SATURDAY\x10\xf9\t\x12\x11\n" +
	"\fTHEME_SEASON\x10\xfa\t\x12\x14\n" +
	"\x0fTHEME_SEPTEMBER\x10\xfb\t\x12\x16\n" +
	"\x11THEME_SPECIFICAGE\x10\xfc\t\x12\x17\n" +
	"\x12THEME_SPECIFICTIME\x10\xfd\t\x12\x11\n" +
	"\fTHEME_SPRING\x10\xfe\t\x12\x11\n" +
	"\fTHEME_SUMMER\x10\xff\t\x12\x11\n" +
	"\fTHEME_SUNDAY\x10\x80\n" +
	"\x12\x12\n" +
	"\rTHEME_SUNRISE\x10\x81\n" +
	"\x12\x13\n" +
	"\x0eTHEME_THURSDAY\x10\x82\n" +
	"\x12\x0f\n" +
	"\n" +
	"THEME_TIME\x10\x83\n" +
	"\x12\x14\n" +
	"\x0fTHEME_TIMEOFDAY\x10\x84\n" +
	"\x12\x10\n" +
	"\vTHEME_TODAY\x10\x85\n" +
	"\x12\x13\n" +
	"\x0eTHEME_TOMORROW\x10\x86\n" +
	"\x12\x12\n" +
	"\rTHEME_TONIGHT\x10\x87\n" +
	"\x12\x14\n" +
	"\x0fTHEME_TRADITION\x10\x88\n" +
	"\x12\x12\n" +
	"\rTHEME_TUESDAY\x10\x89\n" +
	"\x12\x14\n" +
	"\x0fTHEME_WEDNESDAY\x10\x8a\n" +
	"\x12\x0f\n" +
	"\n" +
	"THEME_WEEK\x10\x8b\n" +
	"\x12\x12\n" +
	"\rTHEME_WEEKEND\x10\x8c\n" +
	"\x12\x11\n" +
	"\fTHEME_WINTER\x10\x8d\n" +
	"\x12\x14\n" +
	"\x0fTHEME_YESTERDAY\x10\x8e\n" +
	"\x12\x1b\n" +
	"\x16THEME_DOMESTICVIOLENCE\x10\x8f\n" +
	"\x12\x10\n" +
	"\vTHEME_FIGHT\x10\x90\n" +
	"\x12\x13\n" +
	"\x0eTHEME_GENOCIDE\x10\x91\n" +
	"\x12\x11\n" +
	"\fTHEME_MURDER\x10\x92\n" +
	"\x12\x13\n" +
	"\x0eTHEME_VIOLENCE\x10\x93\n" +
	"\x12\x16\n" +
	"\x11THEME_USERDEFINED\x10\x94\n" +
	"\x12\x11\n" +
	"\fTHEME_DINNER\x10\x95\n" +
	"\x12\x10\n" +
	"\vTHEME_FOCUS\x10\x96\n" +
	"\x12\x12\n" +
	"\rTHEME_FUNERAL\x10\x97\n" +
	"\x12\x12\n" +
	"\rTHEME_HANGOUT\x10\x98\n" +
	"\x12\x12\n" +
	"\rTHEME_KARAOKE\x10\x99\n" +
	"\x12\x15\n" +
	"\x10THEME_MEDITATION\x10\x9a\n" +
	"\x12\x13\n" +
	"\x0eTHEME_ROADTRIP\x10\x9b\n" +
	"\x12\x12\n" +
	"\rTHEME_VICTORY\x10\x9c\n" +
	"\x12\x11\n" +
	"\fTHEME_WAKING\x10\x9d\n" +
	"\x12\x12\n" +
	"\rTHEME_WORKOUT\x10\x9e\n" +
	"\x12\x12\n" +
	"\rTHEME_WORSHIP\x10\x9f\n" +
	"\x12\x0f\n" +
	"\n" +
	"THEME_YOGA\x10\xa0\n" +
	"*\xcf\x01\n" +
	"\tThemeType\x12\x1a\n" +
	"\x16THEME_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17THEME_TYPE_CLOSINGTHEME\x10\x01\x12\x18\n" +
	"\x14THEME_TYPE_MAINTHEME\x10\x02\x12\x1b\n" +
	"\x17THEME_TYPE_OPENINGTHEME\x10\x03\x12\x1b\n" +
	"\x17THEME_TYPE_SEGMENTTHEME\x10\x04\x12\x19\n" +
	"\x15THEME_TYPE_TITLETHEME\x10\x05\x12\x1a\n" +
	"\x16THEME_TYPE_USERDEFINED\x10\x06*\x8d\x01\n" +
	"\fTimecodeType\x12\x1d\n" +
	"\x19TIMECODE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TIMECODE_TYPE_FSK\x10\x01\x12\x16\n" +
	"\x12TIMECODE_TYPE_MIDI\x10\x02\x12\x17\n" +
	"\x13TIMECODE_TYPE_SMPTE\x10\x03\x12\x16\n" +
	"\x12TIMECODE_TYPE_VITC\x10\x04*\xaa;\n" +
	"\x10TisTerritoryCode\x12\"\n" +
	"\x1eTIS_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16TIS_TERRITORY_CODE_E_4\x10\x01\x12\x1a\n" +
	"\x16TIS_TERRITORY_CODE_E_8\x10\x02\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_12\x10\x03\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_20\x10\x04\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_24\x10\x05\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_28\x10\x06\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_31\x10\a\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_32\x10\b\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_36\x10\t\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_40\x10\n" +
	"\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_44\x10\v\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_48\x10\f\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_50\x10\r\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_51\x10\x0e\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_52\x10\x0f\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_56\x10\x10\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_64\x10\x11\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_68\x10\x12\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_70\x10\x13\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_72\x10\x14\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_76\x10\x15\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_84\x10\x16\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_90\x10\x17\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_96\x10\x18\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_100\x10\x19\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_104\x10\x1a\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_108\x10\x1b\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_112\x10\x1c\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_116\x10\x1d\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_120\x10\x1e\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_124\x10\x1f\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_132\x10 \x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_140\x10!\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_144\x10\"\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_148\x10#\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_152\x10$\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_156\x10%\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_158\x10&\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_170\x10'\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_174\x10(\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_178\x10)\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_180\x10*\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_188\x10+\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_191\x10,\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_192\x10-\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_196\x10.\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_200\x10/\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_203\x100\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_204\x101\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_208\x102\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_212\x103\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_214\x104\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_218\x105\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_222\x106\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_226\x107\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_230\x108\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_231\x109\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_232\x10:\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_233\x10;\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_242\x10<\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_246\x10=\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_250\x10>\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_258\x10?\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_262\x10@\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_266\x10A\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_268\x10B\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_270\x10C\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_276\x10D\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_278\x10E\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_280\x10F\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_288\x10G\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_296\x10H\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_300\x10I\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_308\x10J\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_320\x10K\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_324\x10L\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_328\x10M\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_332\x10N\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_336\x10O\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_340\x10P\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_344\x10Q\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_348\x10R\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_352\x10S\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_356\x10T\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_360\x10U\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_364\x10V\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_368\x10W\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_372\x10X\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_376\x10Y\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_380\x10Z\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_384\x10[\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_388\x10\\\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_392\x10]\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_398\x10^\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_400\x10_\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_404\x10`\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_408\x10a\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_410\x10b\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_414\x10c\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_417\x10d\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_418\x10e\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_422\x10f\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_426\x10g\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_428\x10h\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_430\x10i\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_434\x10j\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_438\x10k\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_440\x10l\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_442\x10m\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_450\x10n\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_454\x10o\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_458\x10p\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_462\x10q\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_466\x10r\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_470\x10s\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_478\x10t\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_480\x10u\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_484\x10v\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_492\x10w\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_496\x10x\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_498\x10y\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_499\x10z\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_504\x10{\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_508\x10|\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_512\x10}\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_516\x10~\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_520\x10\x7f\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_524\x10\x80\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_528\x10\x81\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_540\x10\x82\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_548\x10\x83\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_554\x10\x84\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_558\x10\x85\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_562\x10\x86\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_566\x10\x87\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_578\x10\x88\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_583\x10\x89\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_584\x10\x8a\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_585\x10\x8b\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_586\x10\x8c\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_591\x10\x8d\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_598\x10\x8e\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_600\x10\x8f\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_604\x10\x90\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_608\x10\x91\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_616\x10\x92\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_620\x10\x93\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_624\x10\x94\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_626\x10\x95\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_630\x10\x96\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_634\x10\x97\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_642\x10\x98\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_643\x10\x99\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_646\x10\x9a\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_659\x10\x9b\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_662\x10\x9c\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_670\x10\x9d\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_674\x10\x9e\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_678\x10\x9f\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_682\x10\xa0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_686\x10\xa1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_688\x10\xa2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_690\x10\xa3\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_694\x10\xa4\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_702\x10\xa5\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_703\x10\xa6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_704\x10\xa7\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_705\x10\xa8\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_706\x10\xa9\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_710\x10\xaa\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_716\x10\xab\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_720\x10\xac\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_724\x10\xad\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_728\x10\xae\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_729\x10\xaf\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_732\x10\xb0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_736\x10\xb1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_740\x10\xb2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_748\x10\xb3\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_752\x10\xb4\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_756\x10\xb5\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_760\x10\xb6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_762\x10\xb7\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_764\x10\xb8\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_768\x10\xb9\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_776\x10\xba\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_780\x10\xbb\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_784\x10\xbc\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_788\x10\xbd\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_792\x10\xbe\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_795\x10\xbf\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_798\x10\xc0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_800\x10\xc1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_804\x10\xc2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_807\x10\xc3\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_810\x10\xc4\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_818\x10\xc5\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_826\x10\xc6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_834\x10\xc7\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_840\x10\xc8\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_854\x10\xc9\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_858\x10\xca\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_860\x10\xcb\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_862\x10\xcc\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_882\x10\xcd\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_886\x10\xce\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_887\x10\xcf\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_890\x10\xd0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_891\x10\xd1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_894\x10\xd2\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2100\x10\xd3\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2101\x10\xd4\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2102\x10\xd5\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2103\x10\xd6\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2104\x10\xd7\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2105\x10\xd8\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2106\x10\xd9\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2107\x10\xda\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2108\x10\xdb\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2109\x10\xdc\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2110\x10\xdd\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2111\x10\xde\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2112\x10\xdf\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2113\x10\xe0\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2114\x10\xe1\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2115\x10\xe2\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2116\x10\xe3\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2117\x10\xe4\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2118\x10\xe5\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2119\x10\xe6\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2120\x10\xe7\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2121\x10\xe8\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2122\x10\xe9\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2123\x10\xea\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2124\x10\xeb\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2125\x10\xec\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2126\x10\xed\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2127\x10\xee\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2128\x10\xef\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2129\x10\xf0\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2130\x10\xf1\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2131\x10\xf2\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2132\x10\xf3\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2133\x10\xf4\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2134\x10\xf5\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2136\x10\xf6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_446\x10\xf7\x01*\xb6\x04\n" +
	"\tTitleType\x12\x1a\n" +
	"\x16TITLE_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"TITLE_TYPE_ABBREVIATEDDISPLAYTITLE\x10\x01\x12\x1f\n" +
	"\x1bTITLE_TYPE_ALTERNATIVETITLE\x10\x02\x12\x1b\n" +
	"\x17TITLE_TYPE_DISPLAYTITLE\x10\x03\x12\x1e\n" +
	"\x1aTITLE_TYPE_FIRSTLINEOFTEXT\x10\x04\x12\x1a\n" +
	"\x16TITLE_TYPE_FORMALTITLE\x10\x05\x12\x1c\n" +
	"\x18TITLE_TYPE_GROUPINGTITLE\x10\x06\x12\x1d\n" +
	"\x19TITLE_TYPE_INCORRECTTITLE\x10\a\x12\x1e\n" +
	"\x1aTITLE_TYPE_MISSPELLEDTITLE\x10\b\x12\x1c\n" +
	"\x18TITLE_TYPE_ORIGINALTITLE\x10\t\x12\x1a\n" +
	"\x16TITLE_TYPE_SEARCHTITLE\x10\n" +
	"\x12\x1b\n" +
	"\x17TITLE_TYPE_SORTINGTITLE\x10\v\x12\x1a\n" +
	"\x16TITLE_TYPE_TITLEASPART\x10\f\x12&\n" +
	"\"TITLE_TYPE_TITLEWITHOUTPUNCTUATION\x10\r\x12\x1e\n" +
	"\x1aTITLE_TYPE_TRANSLATEDTITLE\x10\x0e\x12\x16\n" +
	"\x12TITLE_TYPE_UNKNOWN\x10\x0f\x12\x1a\n" +
	"\x16TITLE_TYPE_USERDEFINED\x10\x10\x12\x1f\n" +
	"\x1bTITLE_TYPE_MUSICALWORKTITLE\x10\x11*\xff\t\n" +
	"\x10TransferCategory\x12!\n" +
	"\x1dTRANSFER_CATEGORY_UNSPECIFIED\x10\x00\x12$\n" +
	" TRANSFER_CATEGORY_ALIGNMENTTONES\x10\x01\x12.\n" +
	"*TRANSFER_CATEGORY_ANALOGTODIGITALCONVERTER\x10\x02\x12\x1e\n" +
	"\x1aTRANSFER_CATEGORY_BITDEPTH\x10\x03\x12\x1f\n" +
	"\x1bTRANSFER_CATEGORY_CARTRIDGE\x10\x04\x12&\n" +
	"\"TRANSFER_CATEGORY_NUMBEROFCHANNELS\x10\x05\x12!\n" +
	"\x1dTRANSFER_CATEGORY_CLOCKSOURCE\x10\x06\x12'\n" +
	"#TRANSFER_CATEGORY_MATERIALCONDITION\x10\a\x12.\n" +
	"*TRANSFER_CATEGORY_CONVERSIONREFERENCELEVEL\x10\b\x12\x1e\n" +
	"\x1aTRANSFER_CATEGORY_EMPHASIS\x10\t\x12\x1f\n" +
	"\x1bTRANSFER_CATEGORY_MICPREAMP\x10\n" +
	"\x12$\n" +
	" TRANSFER_CATEGORY_NOISEREDUCTION\x10\v\x12!\n" +
	"\x1dTRANSFER_CATEGORY_PHONOPREAMP\x10\f\x12$\n" +
	" TRANSFER_CATEGORY_REFERENCECLOCK\x10\r\x12$\n" +
	" TRANSFER_CATEGORY_REFERENCETONES\x10\x0e\x12\"\n" +
	"\x1eTRANSFER_CATEGORY_SAMPLINGRATE\x10\x0f\x12$\n" +
	" TRANSFER_CATEGORY_SIDE1CONDITION\x10\x10\x12$\n" +
	" TRANSFER_CATEGORY_SIDE2CONDITION\x10\x11\x12#\n" +
	"\x1fTRANSFER_CATEGORY_NUMBEROFSIDES\x10\x12\x12$\n" +
	" TRANSFER_CATEGORY_SMPTEFRAMERATE\x10\x13\x12#\n" +
	"\x1fTRANSFER_CATEGORY_SOURCEMACHINE\x10\x14\x12\x1b\n" +
	"\x17TRANSFER_CATEGORY_SPEED\x10\x15\x12\x1d\n" +
	"\x19TRANSFER_CATEGORY_STORAGE\x10\x16\x12\x1c\n" +
	"\x18TRANSFER_CATEGORY_STYLUS\x10\x17\x12 \n" +
	"\x1cTRANSFER_CATEGORY_STYLUSSIZE\x10\x18\x12#\n" +
	"\x1fTRANSFER_CATEGORY_TAPEBAKEDDATE\x10\x19\x12(\n" +
	"$TRANSFER_CATEGORY_TAPEBAKEDEQUIPMENT\x10\x1a\x12$\n" +
	" TRANSFER_CATEGORY_TAPEBAKEDHOURS\x10\x1b\x12*\n" +
	"&TRANSFER_CATEGORY_TAPEBAKEDTEMPERATURE\x10\x1c\x12#\n" +
	"\x1fTRANSFER_CATEGORY_TAPECOOLHOURS\x10\x1d\x12\x1d\n" +
	"\x19TRANSFER_CATEGORY_TONEARM\x10\x1e\x12(\n" +
	"$TRANSFER_CATEGORY_TRACKCONFIGURATION\x10\x1f\x12$\n" +
	" TRANSFER_CATEGORY_NUMBEROFTRACKS\x10 \x12&\n" +
	"\"TRANSFER_CATEGORY_TRANSFERSOFTWARE\x10!*\xd8\x01\n" +
	"\fTransferType\x12\x1d\n" +
	"\x19TRANSFER_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cTRANSFER_TYPE_ANALOGTOANALOG\x10\x01\x12!\n" +
	"\x1dTRANSFER_TYPE_ANALOGTODIGITAL\x10\x02\x12\x1d\n" +
	"\x19TRANSFER_TYPE_DIGITALCOPY\x10\x03\x12!\n" +
	"\x1dTRANSFER_TYPE_DIGITALTOANALOG\x10\x04\x12\"\n" +
	"\x1eTRANSFER_TYPE_DIGITALTODIGITAL\x10\x05*\x9c\x01\n" +
	"\rUnitOfBitRate\x12 \n" +
	"\x1cUNIT_OF_BIT_RATE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14UNIT_OF_BIT_RATE_BPS\x10\x01\x12\x19\n" +
	"\x15UNIT_OF_BIT_RATE_GBPS\x10\x02\x12\x19\n" +
	"\x15UNIT_OF_BIT_RATE_KBPS\x10\x03\x12\x19\n" +
	"\x15UNIT_OF_BIT_RATE_MBPS\x10\x04*\xf8\x01\n" +
	"\x14UnitOfConditionValue\x12'\n" +
	"#UNIT_OF_CONDITION_VALUE_UNSPECIFIED\x10\x00\x12'\n" +
	"#UNIT_OF_CONDITION_VALUE_MILLISECOND\x10\x01\x12\"\n" +
	"\x1eUNIT_OF_CONDITION_VALUE_MINUTE\x10\x02\x12#\n" +
	"\x1fUNIT_OF_CONDITION_VALUE_PERCENT\x10\x03\x12!\n" +
	"\x1dUNIT_OF_CONDITION_VALUE_PIXEL\x10\x04\x12\"\n" +
	"\x1eUNIT_OF_CONDITION_VALUE_SECOND\x10\x05*x\n" +
	"\x0fUnitOfCuePoints\x12\"\n" +
	"\x1eUNIT_OF_CUE_POINTS_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eUNIT_OF_CUE_POINTS_MILLISECOND\x10\x01\x12\x1d\n" +
	"\x19UNIT_OF_CUE_POINTS_SECOND\x10\x02*\xa5\x01\n" +
	"\x0eUnitOfDuration\x12 \n" +
	"\x1cUNIT_OF_DURATION_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14UNIT_OF_DURATION_DAY\x10\x01\x12\x1a\n" +
	"\x16UNIT_OF_DURATION_MONTH\x10\x02\x12 \n" +
	"\x1cUNIT_OF_DURATION_USERDEFINED\x10\x03\x12\x19\n" +
	"\x15UNIT_OF_DURATION_WEEK\x10\x04*\xb3\x01\n" +
	"\fUnitOfExtent\x12\x1e\n" +
	"\x1aUNIT_OF_EXTENT_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11UNIT_OF_EXTENT_CM\x10\x01\x12\x17\n" +
	"\x13UNIT_OF_EXTENT_INCH\x10\x02\x12\x15\n" +
	"\x11UNIT_OF_EXTENT_MM\x10\x03\x12\"\n" +
	"\x1eUNIT_OF_EXTENT_PERCENTOFSCREEN\x10\x04\x12\x18\n" +
	"\x14UNIT_OF_EXTENT_PIXEL\x10\x05*\x85\x01\n" +
	"\x0fUnitOfFrameRate\x12\"\n" +
	"\x1eUNIT_OF_FRAME_RATE_UNSPECIFIED\x10\x00\x12$\n" +
	" UNIT_OF_FRAME_RATE_HZ_INTERLACED\x10\x01\x12(\n" +
	"$UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED\x10\x02*\x9f\x01\n" +
	"\x0fUnitOfFrequency\x12!\n" +
	"\x1dUNIT_OF_FREQUENCY_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15UNIT_OF_FREQUENCY_GHZ\x10\x01\x12\x18\n" +
	"\x14UNIT_OF_FREQUENCY_HZ\x10\x02\x12\x19\n" +
	"\x15UNIT_OF_FREQUENCY_KHZ\x10\x03\x12\x19\n" +
	"\x15UNIT_OF_FREQUENCY_MHZ\x10\x04*\xd5\x03\n" +
	"\x1cUnitTypeForRevenueAllocation\x120\n" +
	",UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNSPECIFIED\x10\x00\x120\n" +
	",UNIT_TYPE_FOR_REVENUE_ALLOCATION_PERFORMANCE\x10\x01\x12)\n" +
	"%UNIT_TYPE_FOR_REVENUE_ALLOCATION_PLAY\x10\x02\x12+\n" +
	"'UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECOND\x10\x03\x125\n" +
	"1UNIT_TYPE_FOR_REVENUE_ALLOCATION_INDIVIDUALUSAGES\x10\x04\x12,\n" +
	"(UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECONDS\x10\x05\x125\n" +
	"1UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNITOFACCOUNTING\x10\x06\x12+\n" +
	"'UNIT_TYPE_FOR_REVENUE_ALLOCATION_USAGES\x10\a\x120\n" +
	",UNIT_TYPE_FOR_REVENUE_ALLOCATION_USERDEFINED\x10\b*\x85\r\n" +
	"\aUseType\x12\x18\n" +
	"\x14USE_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16USE_TYPE_ASPERCONTRACT\x10\x01\x12\x16\n" +
	"\x12USE_TYPE_BROADCAST\x10\x02\x12\x12\n" +
	"\x0eUSE_TYPE_CABLE\x10\x03\x12 \n" +
	"\x1cUSE_TYPE_CONDITIONALDOWNLOAD\x10\x04\x12$\n" +
	" USE_TYPE_CONTENTINFLUENCEDSTREAM\x10\x05\x12\x14\n" +
	"\x10USE_TYPE_DISPLAY\x10\x06\x12\x15\n" +
	"\x11USE_TYPE_DOWNLOAD\x10\a\x12\x10\n" +
	"\fUSE_TYPE_DUB\x10\b\x12 \n" +
	"\x1cUSE_TYPE_DUBFORADVERTISEMENT\x10\t\x12\"\n" +
	"\x1eUSE_TYPE_DUBFORLIVEPERFORMANCE\x10\n" +
	"\x12\x19\n" +
	"\x15USE_TYPE_DUBFORMOVIES\x10\v\x12\x1e\n" +
	"\x1aUSE_TYPE_DUBFORMUSICONHOLD\x10\f\x12$\n" +
	" USE_TYPE_DUBFORPUBLICPERFORMANCE\x10\r\x12\x18\n" +
	"\x14USE_TYPE_DUBFORRADIO\x10\x0e\x12\x15\n" +
	"\x11USE_TYPE_DUBFORTV\x10\x0f\x12\x1f\n" +
	"\x1bUSE_TYPE_EXTRACTFORINTERNET\x10\x10\x12\x1a\n" +
	"\x16USE_TYPE_KIOSKDOWNLOAD\x10\x11\x12\x17\n" +
	"\x13USE_TYPE_NARROWCAST\x10\x12\x12!\n" +
	"\x1dUSE_TYPE_NONINTERACTIVESTREAM\x10\x13\x12\x1b\n" +
	"\x17USE_TYPE_ONDEMANDSTREAM\x10\x14\x12\x14\n" +
	"\x10USE_TYPE_PERFORM\x10\x15\x12!\n" +
	"\x1dUSE_TYPE_PERFORMASMUSICONHOLD\x10\x16\x12%\n" +
	"!USE_TYPE_PERFORMINLIVEPERFORMANCE\x10\x17\x12\x1c\n" +
	"\x18USE_TYPE_PERFORMINPUBLIC\x10\x18\x12\x1e\n" +
	"\x1aUSE_TYPE_PERMANENTDOWNLOAD\x10\x19\x12\x15\n" +
	"\x11USE_TYPE_PLAYBACK\x10\x1a\x12\x19\n" +
	"\x15USE_TYPE_PLAYINPUBLIC\x10\x1b\x12\x14\n" +
	"\x10USE_TYPE_PODCAST\x10\x1c\x12\x12\n" +
	"\x0eUSE_TYPE_PRINT\x10\x1d\x12\x18\n" +
	"\x14USE_TYPE_PRIVATECOPY\x10\x1e\x12&\n" +
	"\"USE_TYPE_PURCHASEASPHYSICALPRODUCT\x10\x1f\x12\x11\n" +
	"\rUSE_TYPE_RENT\x10 \x12\x16\n" +
	"\x12USE_TYPE_SIMULCAST\x10!\x12\x13\n" +
	"\x0fUSE_TYPE_STREAM\x10\"\x12\x1d\n" +
	"\x19USE_TYPE_TETHEREDDOWNLOAD\x10#\x12!\n" +
	"\x1dUSE_TYPE_TIMEINFLUENCEDSTREAM\x10$\x12\x14\n" +
	"\x10USE_TYPE_UNKNOWN\x10%\x12\x10\n" +
	"\fUSE_TYPE_USE\x10&\x12\x1b\n" +
	"\x17USE_TYPE_USEASALERTTONE\x10'\x12\x18\n" +
	"\x14USE_TYPE_USEASDEVICE\x10(\x12\x19\n" +
	"\x15USE_TYPE_USEASKARAOKE\x10)\x12\x1e\n" +
	"\x1aUSE_TYPE_USEASRINGBACKTONE\x10*\x12\x1e\n" +
	"\x1aUSE_TYPE_USEASRINGBACKTUNE\x10+\x12\x1a\n" +
	"\x16USE_TYPE_USEASRINGTONE\x10,\x12\x1a\n" +
	"\x16USE_TYPE_USEASRINGTUNE\x10-\x12\x1d\n" +
	"\x19USE_TYPE_USEASSCREENSAVER\x10.\x12\x1b\n" +
	"\x17USE_TYPE_USEASVOICEMAIL\x10/\x12\x1b\n" +
	"\x17USE_TYPE_USEASWALLPAPER\x100\x12!\n" +
	"\x1dUSE_TYPE_USEFORIDENTIFICATION\x101\x12&\n" +
	"\"USE_TYPE_USEINMOBILEPHONEMESSAGING\x102\x12 \n" +
	"\x1cUSE_TYPE_USEINPHONELISTENING\x103\x12\x18\n" +
	"\x14USE_TYPE_USERDEFINED\x104\x12+\n" +
	"'USE_TYPE_USERMAKEAVAILABLELABELPROVIDED\x105\x12*\n" +
	"&USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED\x106\x12\x14\n" +
	"\x10USE_TYPE_WEBCAST\x107\x12$\n" +
	" USE_TYPE_DUBFORONDEMANDSTREAMING\x108*\xa0\x0f\n" +
	"\n" +
	"UseTypeERN\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18USE_TYPE_E_R_N_BROADCAST\x10\x01\x12\x18\n" +
	"\x14USE_TYPE_E_R_N_CABLE\x10\x02\x12&\n" +
	"\"USE_TYPE_E_R_N_CONDITIONALDOWNLOAD\x10\x03\x12*\n" +
	"&USE_TYPE_E_R_N_CONTENTINFLUENCEDSTREAM\x10\x04\x12\x1a\n" +
	"\x16USE_TYPE_E_R_N_DISPLAY\x10\x05\x12\x1b\n" +
	"\x17USE_TYPE_E_R_N_DOWNLOAD\x10\x06\x12\x16\n" +
	"\x12USE_TYPE_E_R_N_DUB\x10\a\x12&\n" +
	"\"USE_TYPE_E_R_N_DUBFORADVERTISEMENT\x10\b\x12(\n" +
	"$USE_TYPE_E_R_N_DUBFORLIVEPERFORMANCE\x10\t\x12\x1f\n" +
	"\x1bUSE_TYPE_E_R_N_DUBFORMOVIES\x10\n" +
	"\x12$\n" +
	" USE_TYPE_E_R_N_DUBFORMUSICONHOLD\x10\v\x12*\n" +
	"&USE_TYPE_E_R_N_DUBFORPUBLICPERFORMANCE\x10\f\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_DUBFORRADIO\x10\r\x12\x1b\n" +
	"\x17USE_TYPE_E_R_N_DUBFORTV\x10\x0e\x12%\n" +
	"!USE_TYPE_E_R_N_EXTRACTFORINTERNET\x10\x0f\x12 \n" +
	"\x1cUSE_TYPE_E_R_N_KIOSKDOWNLOAD\x10\x10\x12\x1d\n" +
	"\x19USE_TYPE_E_R_N_NARROWCAST\x10\x11\x12'\n" +
	"#USE_TYPE_E_R_N_NONINTERACTIVESTREAM\x10\x12\x12!\n" +
	"\x1dUSE_TYPE_E_R_N_ONDEMANDSTREAM\x10\x13\x12\x1a\n" +
	"\x16USE_TYPE_E_R_N_PERFORM\x10\x14\x12'\n" +
	"#USE_TYPE_E_R_N_PERFORMASMUSICONHOLD\x10\x15\x12+\n" +
	"'USE_TYPE_E_R_N_PERFORMINLIVEPERFORMANCE\x10\x16\x12\"\n" +
	"\x1eUSE_TYPE_E_R_N_PERFORMINPUBLIC\x10\x17\x12$\n" +
	" USE_TYPE_E_R_N_PERMANENTDOWNLOAD\x10\x18\x12\x1b\n" +
	"\x17USE_TYPE_E_R_N_PLAYBACK\x10\x19\x12\x1f\n" +
	"\x1bUSE_TYPE_E_R_N_PLAYINPUBLIC\x10\x1a\x12\x1a\n" +
	"\x16USE_TYPE_E_R_N_PODCAST\x10\x1b\x12\x18\n" +
	"\x14USE_TYPE_E_R_N_PRINT\x10\x1c\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_PRIVATECOPY\x10\x1d\x12,\n" +
	"(USE_TYPE_E_R_N_PURCHASEASPHYSICALPRODUCT\x10\x1e\x12\x17\n" +
	"\x13USE_TYPE_E_R_N_RENT\x10\x1f\x12\x1c\n" +
	"\x18USE_TYPE_E_R_N_SIMULCAST\x10 \x12\x19\n" +
	"\x15USE_TYPE_E_R_N_STREAM\x10!\x12#\n" +
	"\x1fUSE_TYPE_E_R_N_TETHEREDDOWNLOAD\x10\"\x12'\n" +
	"#USE_TYPE_E_R_N_TIMEINFLUENCEDSTREAM\x10#\x12\x16\n" +
	"\x12USE_TYPE_E_R_N_USE\x10$\x12!\n" +
	"\x1dUSE_TYPE_E_R_N_USEASALERTTONE\x10%\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_USEASDEVICE\x10&\x12\x1f\n" +
	"\x1bUSE_TYPE_E_R_N_USEASKARAOKE\x10'\x12$\n" +
	" USE_TYPE_E_R_N_USEASRINGBACKTONE\x10(\x12$\n" +
	" USE_TYPE_E_R_N_USEASRINGBACKTUNE\x10)\x12 \n" +
	"\x1cUSE_TYPE_E_R_N_USEASRINGTONE\x10*\x12 \n" +
	"\x1cUSE_TYPE_E_R_N_USEASRINGTUNE\x10+\x12#\n" +
	"\x1fUSE_TYPE_E_R_N_USEASSCREENSAVER\x10,\x12!\n" +
	"\x1dUSE_TYPE_E_R_N_USEASVOICEMAIL\x10-\x12!\n" +
	"\x1dUSE_TYPE_E_R_N_USEASWALLPAPER\x10.\x12'\n" +
	"#USE_TYPE_E_R_N_USEFORIDENTIFICATION\x10/\x12,\n" +
	"(USE_TYPE_E_R_N_USEINMOBILEPHONEMESSAGING\x100\x12&\n" +
	"\"USE_TYPE_E_R_N_USEINPHONELISTENING\x101\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_USERDEFINED\x102\x121\n" +
	"-USE_TYPE_E_R_N_USERMAKEAVAILABLELABELPROVIDED\x103\x120\n" +
	",USE_TYPE_E_R_N_USERMAKEAVAILABLEUSERPROVIDED\x104\x12\x1a\n" +
	"\x16USE_TYPE_E_R_N_WEBCAST\x105\x12*\n" +
	"&USE_TYPE_E_R_N_DUBFORONDEMANDSTREAMING\x106*\xd0\x01\n" +
	"\vUseTypeMWNL\x12 \n" +
	"\x1cUSE_TYPE_M_W_N_L_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fUSE_TYPE_M_W_N_L_ONDEMANDSTREAM\x10\x01\x12&\n" +
	"\"USE_TYPE_M_W_N_L_PERMANENTDOWNLOAD\x10\x02\x12.\n" +
	"*USE_TYPE_M_W_N_L_PURCHASEASPHYSICALPRODUCT\x10\x03\x12\"\n" +
	"\x1eUSE_TYPE_M_W_N_L_USEASRINGTONE\x10\x04*\xb4\x14\n" +
	"\n" +
	"UseTypeRDR\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12USE_TYPE_R_D_R_ALL\x10\x01\x12 \n" +
	"\x1cUSE_TYPE_R_D_R_ASPERCONTRACT\x10\x02\x12\x1c\n" +
	"\x18USE_TYPE_R_D_R_BROADCAST\x10\x03\x12\x18\n" +
	"\x14USE_TYPE_R_D_R_CABLE\x10\x04\x12&\n" +
	"\"USE_TYPE_R_D_R_CONDITIONALDOWNLOAD\x10\x05\x12*\n" +
	"&USE_TYPE_R_D_R_CONTENTINFLUENCEDSTREAM\x10\x06\x12\x1a\n" +
	"\x16USE_TYPE_R_D_R_DISPLAY\x10\a\x12\x1b\n" +
	"\x17USE_TYPE_R_D_R_DOWNLOAD\x10\b\x12\x16\n" +
	"\x12USE_TYPE_R_D_R_DUB\x10\t\x12&\n" +
	"\"USE_TYPE_R_D_R_DUBFORADVERTISEMENT\x10\n" +
	"\x12(\n" +
	"$USE_TYPE_R_D_R_DUBFORLIVEPERFORMANCE\x10\v\x12\x1f\n" +
	"\x1bUSE_TYPE_R_D_R_DUBFORMOVIES\x10\f\x12$\n" +
	" USE_TYPE_R_D_R_DUBFORMUSICONHOLD\x10\r\x12*\n" +
	"&USE_TYPE_R_D_R_DUBFORPUBLICPERFORMANCE\x10\x0e\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_DUBFORRADIO\x10\x0f\x12\x1b\n" +
	"\x17USE_TYPE_R_D_R_DUBFORTV\x10\x10\x12%\n" +
	"!USE_TYPE_R_D_R_EXTRACTFORINTERNET\x10\x11\x12 \n" +
	"\x1cUSE_TYPE_R_D_R_KIOSKDOWNLOAD\x10\x12\x12\x1d\n" +
	"\x19USE_TYPE_R_D_R_NARROWCAST\x10\x13\x12'\n" +
	"#USE_TYPE_R_D_R_NONINTERACTIVESTREAM\x10\x14\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_ONDEMANDSTREAM\x10\x15\x12\x1a\n" +
	"\x16USE_TYPE_R_D_R_PERFORM\x10\x16\x12'\n" +
	"#USE_TYPE_R_D_R_PERFORMASMUSICONHOLD\x10\x17\x12+\n" +
	"'USE_TYPE_R_D_R_PERFORMINLIVEPERFORMANCE\x10\x18\x12\"\n" +
	"\x1eUSE_TYPE_R_D_R_PERFORMINPUBLIC\x10\x19\x12$\n" +
	" USE_TYPE_R_D_R_PERMANENTDOWNLOAD\x10\x1a\x12\x1b\n" +
	"\x17USE_TYPE_R_D_R_PLAYBACK\x10\x1b\x12\x1f\n" +
	"\x1bUSE_TYPE_R_D_R_PLAYINPUBLIC\x10\x1c\x12\x1a\n" +
	"\x16USE_TYPE_R_D_R_PODCAST\x10\x1d\x12\x18\n" +
	"\x14USE_TYPE_R_D_R_PRINT\x10\x1e\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_PRIVATECOPY\x10\x1f\x12,\n" +
	"(USE_TYPE_R_D_R_PURCHASEASPHYSICALPRODUCT\x10 \x12\x17\n" +
	"\x13USE_TYPE_R_D_R_RENT\x10!\x12\x1c\n" +
	"\x18USE_TYPE_R_D_R_SIMULCAST\x10\"\x12\x19\n" +
	"\x15USE_TYPE_R_D_R_STREAM\x10#\x12#\n" +
	"\x1fUSE_TYPE_R_D_R_TETHEREDDOWNLOAD\x10$\x12'\n" +
	"#USE_TYPE_R_D_R_TIMEINFLUENCEDSTREAM\x10%\x12\x1a\n" +
	"\x16USE_TYPE_R_D_R_UNKNOWN\x10&\x12\x16\n" +
	"\x12USE_TYPE_R_D_R_USE\x10'\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_USEASALERTTONE\x10(\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_USEASDEVICE\x10)\x12\x1f\n" +
	"\x1bUSE_TYPE_R_D_R_USEASKARAOKE\x10*\x12$\n" +
	" USE_TYPE_R_D_R_USEASRINGBACKTONE\x10+\x12$\n" +
	" USE_TYPE_R_D_R_USEASRINGBACKTUNE\x10,\x12 \n" +
	"\x1cUSE_TYPE_R_D_R_USEASRINGTONE\x10-\x12 \n" +
	"\x1cUSE_TYPE_R_D_R_USEASRINGTUNE\x10.\x12#\n" +
	"\x1fUSE_TYPE_R_D_R_USEASSCREENSAVER\x10/\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_USEASVOICEMAIL\x100\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_USEASWALLPAPER\x101\x12'\n" +
	"#USE_TYPE_R_D_R_USEFORIDENTIFICATION\x102\x12,\n" +
	"(USE_TYPE_R_D_R_USEINMOBILEPHONEMESSAGING\x103\x12&\n" +
	"\"USE_TYPE_R_D_R_USEINPHONELISTENING\x104\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_USERDEFINED\x105\x121\n" +
	"-USE_TYPE_R_D_R_USERMAKEAVAILABLELABELPROVIDED\x106\x120\n" +
	",USE_TYPE_R_D_R_USERMAKEAVAILABLEUSERPROVIDED\x107\x12\x1a\n" +
	"\x16USE_TYPE_R_D_R_WEBCAST\x108\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_BROADCASTRADIO\x109\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_BROADCASTTV\x10:\x12&\n" +
	"\"USE_TYPE_R_D_R_CABLERETRANSMISSION\x10;\x12+\n" +
	"'USE_TYPE_R_D_R_CABLERETRANSMISSIONRADIO\x10<\x12(\n" +
	"$USE_TYPE_R_D_R_CABLERETRANSMISSIONTV\x10=\x12\x1a\n" +
	"\x16USE_TYPE_R_D_R_CATCHUP\x10>\x12\x1f\n" +
	"\x1bUSE_TYPE_R_D_R_CATCHUPRADIO\x10?\x12\x1c\n" +
	"\x18USE_TYPE_R_D_R_CATCHUPTV\x10@\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_COMMERCIALRENT\x10A\x12%\n" +
	"!USE_TYPE_R_D_R_DUBFORDISTRIBUTION\x10B\x12*\n" +
	"&USE_TYPE_R_D_R_DUBFORONDEMANDSTREAMING\x10C\x12\x17\n" +
	"\x13USE_TYPE_R_D_R_LEND\x10D\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_RETRANSMISSION\x10E\x12\x1f\n" +
	"\x1bUSE_TYPE_R_D_R_RINGBACKTONE\x10F\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_SIMULCASTRADIO\x10G\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_SIMULCASTTV\x10H\x125\n" +
	"1USE_TYPE_R_D_R_USEFOREDUCATIONANDORSOCIALPURPOSES\x10I*\xdc\x04\n" +
	"\x11UserInterfaceType\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!USER_INTERFACE_TYPE_ASPERCONTRACT\x10\x01\x12'\n" +
	"#USER_INTERFACE_TYPE_CONNECTEDDEVICE\x10\x02\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_GAMECONSOLE\x10\x03\x12\x1f\n" +
	"\x1bUSER_INTERFACE_TYPE_JUKEBOX\x10\x04\x12&\n" +
	"\"USER_INTERFACE_TYPE_KARAOKEMACHINE\x10\x05\x12\x1d\n" +
	"\x19USER_INTERFACE_TYPE_KIOSK\x10\x06\x12+\n" +
	"'USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX\x10\a\x12(\n" +
	"$USER_INTERFACE_TYPE_PERSONALCOMPUTER\x10\b\x12+\n" +
	"'USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER\x10\t\x12&\n" +
	"\"USER_INTERFACE_TYPE_PORTABLEDEVICE\x10\n" +
	"\x12,\n" +
	"(USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX\x10\v\x12%\n" +
	"!USER_INTERFACE_TYPE_SMARTSPEAKERS\x10\f\x12\x1f\n" +
	"\x1bUSER_INTERFACE_TYPE_UNKNOWN\x10\r\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_USERDEFINED\x10\x0e*\xe5\x04\n" +
	"\x14UserInterfaceTypeERN\x12)\n" +
	"%USER_INTERFACE_TYPE_E_R_N_UNSPECIFIED\x10\x00\x12-\n" +
	")USER_INTERFACE_TYPE_E_R_N_CONNECTEDDEVICE\x10\x01\x12)\n" +
	"%USER_INTERFACE_TYPE_E_R_N_GAMECONSOLE\x10\x02\x12%\n" +
	"!USER_INTERFACE_TYPE_E_R_N_JUKEBOX\x10\x03\x12,\n" +
	"(USER_INTERFACE_TYPE_E_R_N_KARAOKEMACHINE\x10\x04\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_E_R_N_KIOSK\x10\x05\x121\n" +
	"-USER_INTERFACE_TYPE_E_R_N_LOCALSTORAGEJUKEBOX\x10\x06\x12.\n" +
	"*USER_INTERFACE_TYPE_E_R_N_PERSONALCOMPUTER\x10\a\x121\n" +
	"-USER_INTERFACE_TYPE_E_R_N_PHYSICALMEDIAWRITER\x10\b\x12,\n" +
	"(USER_INTERFACE_TYPE_E_R_N_PORTABLEDEVICE\x10\t\x122\n" +
	".USER_INTERFACE_TYPE_E_R_N_REMOTESTORAGEJUKEBOX\x10\n" +
	"\x12+\n" +
	"'USER_INTERFACE_TYPE_E_R_N_SMARTSPEAKERS\x10\v\x12)\n" +
	"%USER_INTERFACE_TYPE_E_R_N_USERDEFINED\x10\f*\xcc\x04\n" +
	"\vVersionType\x12\x1c\n" +
	"\x18VERSION_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dVERSION_TYPE_ACAPPELLAVERSION\x10\x01\x12\x1d\n" +
	"\x19VERSION_TYPE_ALBUMVERSION\x10\x02\x12#\n" +
	"\x1fVERSION_TYPE_ALTERNATIVEVERSION\x10\x03\x12\x1d\n" +
	"\x19VERSION_TYPE_CLEANVERSION\x10\x04\x12\x1c\n" +
	"\x18VERSION_TYPE_DEMOVERSION\x10\x05\x12\x1e\n" +
	"\x1aVERSION_TYPE_EDITEDVERSION\x10\x06\x12$\n" +
	" VERSION_TYPE_INSTRUMENTALVERSION\x10\a\x12\x1f\n" +
	"\x1bVERSION_TYPE_KARAOKEVERSION\x10\b\x12\x1c\n" +
	"\x18VERSION_TYPE_LIVEVERSION\x10\t\x12\x1b\n" +
	"\x17VERSION_TYPE_MIXVERSION\x10\n" +
	"\x12\x1c\n" +
	"\x18VERSION_TYPE_MONOVERSION\x10\v\x12\x1d\n" +
	"\x19VERSION_TYPE_RADIOVERSION\x10\f\x12\x1d\n" +
	"\x19VERSION_TYPE_REMIXVERSION\x10\r\x12\x1f\n" +
	"\x1bVERSION_TYPE_SESSIONVERSION\x10\x0e\x12\x1e\n" +
	"\x1aVERSION_TYPE_SINGLEVERSION\x10\x0f\x12\x1e\n" +
	"\x1aVERSION_TYPE_STEREOVERSION\x10\x10\x12\x1c\n" +
	"\x18VERSION_TYPE_USERDEFINED\x10\x11*\x95\x03\n" +
	"\x0eVideoCodecType\x12 \n" +
	"\x1cVIDEO_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14VIDEO_CODEC_TYPE_AVC\x10\x01\x12\x1a\n" +
	"\x16VIDEO_CODEC_TYPE_H_261\x10\x02\x12\x1a\n" +
	"\x16VIDEO_CODEC_TYPE_H_263\x10\x03\x12\x1b\n" +
	"\x17VIDEO_CODEC_TYPE_MPEG_1\x10\x04\x12\x1b\n" +
	"\x17VIDEO_CODEC_TYPE_MPEG_2\x10\x05\x12\x1b\n" +
	"\x17VIDEO_CODEC_TYPE_MPEG_4\x10\x06\x12\x1e\n" +
	"\x1aVIDEO_CODEC_TYPE_QUICKTIME\x10\a\x12\x1e\n" +
	"\x1aVIDEO_CODEC_TYPE_REALVIDEO\x10\b\x12\x1e\n" +
	"\x1aVIDEO_CODEC_TYPE_SHOCKWAVE\x10\t\x12\x1c\n" +
	"\x18VIDEO_CODEC_TYPE_UNKNOWN\x10\n" +
	"\x12 \n" +
	"\x1cVIDEO_CODEC_TYPE_USERDEFINED\x10\v\x12\x18\n" +
	"\x14VIDEO_CODEC_TYPE_WMV\x10\f*\xbb\x01\n" +
	"\x13VideoDefinitionType\x12%\n" +
	"!VIDEO_DEFINITION_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$VIDEO_DEFINITION_TYPE_HIGHDEFINITION\x10\x01\x12,\n" +
	"(VIDEO_DEFINITION_TYPE_STANDARDDEFINITION\x10\x02\x12%\n" +
	"!VIDEO_DEFINITION_TYPE_USERDEFINED\x10\x03*\xed\x10\n" +
	"\tVideoType\x12\x1a\n" +
	"\x16VIDEO_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dVIDEO_TYPE_ADVERTISEMENTVIDEO\x10\x01\x12\x1b\n" +
	"\x17VIDEO_TYPE_ADULTCONTENT\x10\x02\x12\x1d\n" +
	"\x19VIDEO_TYPE_ADVICEMAGAZINE\x10\x03\x12\x18\n" +
	"\x14VIDEO_TYPE_ANIMATION\x10\x04\x12\x1a\n" +
	"\x16VIDEO_TYPE_BALLETVIDEO\x10\x05\x12\x1e\n" +
	"\x1aVIDEO_TYPE_BEHINDTHESCENES\x10\x06\x12!\n" +
	"\x1dVIDEO_TYPE_BLACKANDWHITEVIDEO\x10\a\x12\x1c\n" +
	"\x18VIDEO_TYPE_CHILDRENSFILM\x10\b\x12\x1d\n" +
	"\x19VIDEO_TYPE_COLORIZEDVIDEO\x10\t\x12\x1a\n" +
	"\x16VIDEO_TYPE_COLUMNVIDEO\x10\n" +
	"\x12\x1a\n" +
	"\x16VIDEO_TYPE_CONCERTCLIP\x10\v\x12\x1b\n" +
	"\x17VIDEO_TYPE_CONCERTVIDEO\x10\f\x12\x1c\n" +
	"\x18VIDEO_TYPE_CORPORATEFILM\x10\r\x12\x16\n" +
	"\x12VIDEO_TYPE_CREDITS\x10\x0e\x12\x1a\n" +
	"\x16VIDEO_TYPE_DOCUMENTARY\x10\x0f\x12\x1f\n" +
	"\x1bVIDEO_TYPE_EDUCATIONALVIDEO\x10\x10\x12\x16\n" +
	"\x12VIDEO_TYPE_EPISODE\x10\x11\x12\x1a\n" +
	"\x16VIDEO_TYPE_FEATUREFILM\x10\x12\x12\x16\n" +
	"\x12VIDEO_TYPE_FICTION\x10\x13\x12\x1f\n" +
	"\x1bVIDEO_TYPE_INFOMERCIALVIDEO\x10\x14\x12\x18\n" +
	"\x14VIDEO_TYPE_INTERVIEW\x10\x15\x12\x16\n" +
	"\x12VIDEO_TYPE_KARAOKE\x10\x16\x12\x1d\n" +
	"\x19VIDEO_TYPE_LIVEEVENTVIDEO\x10\x17\x12'\n" +
	"#VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO\x10\x18\x12*\n" +
	"&VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO\x10\x19\x12\x19\n" +
	"\x15VIDEO_TYPE_LYRICVIDEO\x10\x1a\x12\x17\n" +
	"\x13VIDEO_TYPE_MAGAZINE\x10\x1b\x12\x13\n" +
	"\x0fVIDEO_TYPE_MENU\x10\x1c\x12\x1e\n" +
	"\x1aVIDEO_TYPE_MULTIMEDIAVIDEO\x10\x1d\x12\x1e\n" +
	"\x1aVIDEO_TYPE_MUSICALWORKCLIP\x10\x1e\x12(\n" +
	"$VIDEO_TYPE_MUSICALWORKREADALONGVIDEO\x10\x1f\x12!\n" +
	"\x1dVIDEO_TYPE_MUSICALWORKTRAILER\x10 \x12&\n" +
	"\"VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER\x10!\x12\x13\n" +
	"\x0fVIDEO_TYPE_NEWS\x10\"\x12!\n" +
	"\x1dVIDEO_TYPE_NONMUSICALWORKCLIP\x10#\x12+\n" +
	"'VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO\x10$\x12$\n" +
	" VIDEO_TYPE_NONMUSICALWORKTRAILER\x10%\x12)\n" +
	"%VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER\x10&\x12,\n" +
	"(VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING\x10'\x12\x19\n" +
	"\x15VIDEO_TYPE_OPERAVIDEO\x10(\x12\x1a\n" +
	"\x16VIDEO_TYPE_PERFORMANCE\x10)\x12\x1d\n" +
	"\x19VIDEO_TYPE_READALONGVIDEO\x10*\x12!\n" +
	"\x1dVIDEO_TYPE_REALITYTVSHOWVIDEO\x10+\x12\x15\n" +
	"\x11VIDEO_TYPE_SEASON\x10,\x12)\n" +
	"%VIDEO_TYPE_SERIALAUDIOVISUALRECORDING\x10-\x12\x15\n" +
	"\x11VIDEO_TYPE_SERIES\x10.\x12\x18\n" +
	"\x14VIDEO_TYPE_SHORTFILM\x10/\x12\x1a\n" +
	"\x16VIDEO_TYPE_SILENTVIDEO\x100\x12\x1a\n" +
	"\x16VIDEO_TYPE_SKETCHVIDEO\x101\x12\x19\n" +
	"\x15VIDEO_TYPE_SOAPSITCOM\x102\x12\x1b\n" +
	"\x17VIDEO_TYPE_SPECIALEVENT\x103\x12\x14\n" +
	"\x10VIDEO_TYPE_SPORT\x104\x12\"\n" +
	"\x1eVIDEO_TYPE_THEATRICALWORKVIDEO\x105\x12\x1b\n" +
	"\x17VIDEO_TYPE_TRAILERVIDEO\x106\x12\x15\n" +
	"\x11VIDEO_TYPE_TVFILM\x107\x12\x18\n" +
	"\x14VIDEO_TYPE_TVPROGRAM\x108\x12\x1a\n" +
	"\x16VIDEO_TYPE_TVSHOWVIDEO\x109\x12\x16\n" +
	"\x12VIDEO_TYPE_UNKNOWN\x10:\x12\x1b\n" +
	"\x17VIDEO_TYPE_VIDEOCHAPTER\x10;\x12\x18\n" +
	"\x14VIDEO_TYPE_VIDEOCLIP\x10<\x12\x1a\n" +
	"\x16VIDEO_TYPE_VIDEOREPORT\x10=\x12\x18\n" +
	"\x14VIDEO_TYPE_VIDEOSTEM\x10>\x12\x14\n" +
	"\x10VIDEO_TYPE_DRAMA\x10?\x12$\n" +
	" VIDEO_TYPE_DRAMATICOMUSICALVIDEO\x10@\x12\"\n" +
	"\x1eVIDEO_TYPE_INTERACTIVERESOURCE\x10A\x12(\n" +
	"$VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO\x10B\x12+\n" +
	"'VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO\x10C\x12\x1a\n" +
	"\x16VIDEO_TYPE_USERDEFINED\x10D\x12\x1a\n" +
	"\x16VIDEO_TYPE_WEBRESOURCE\x10E*\xfa\x12\n" +
	"\rVideoTypeDSRF\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_UNSPECIFIED\x10\x00\x12)\n" +
	"%VIDEO_TYPE_D_S_R_F_ADVERTISEMENTVIDEO\x10\x01\x12#\n" +
	"\x1fVIDEO_TYPE_D_S_R_F_ADULTCONTENT\x10\x02\x12%\n" +
	"!VIDEO_TYPE_D_S_R_F_ADVICEMAGAZINE\x10\x03\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_F_ANIMATION\x10\x04\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_BALLETVIDEO\x10\x05\x12&\n" +
	"\"VIDEO_TYPE_D_S_R_F_BEHINDTHESCENES\x10\x06\x12)\n" +
	"%VIDEO_TYPE_D_S_R_F_BLACKANDWHITEVIDEO\x10\a\x12$\n" +
	" VIDEO_TYPE_D_S_R_F_CHILDRENSFILM\x10\b\x12%\n" +
	"!VIDEO_TYPE_D_S_R_F_COLORIZEDVIDEO\x10\t\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_COLUMNVIDEO\x10\n" +
	"\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_CONCERTCLIP\x10\v\x12#\n" +
	"\x1fVIDEO_TYPE_D_S_R_F_CONCERTVIDEO\x10\f\x12$\n" +
	" VIDEO_TYPE_D_S_R_F_CORPORATEFILM\x10\r\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_F_CREDITS\x10\x0e\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_DOCUMENTARY\x10\x0f\x12'\n" +
	"#VIDEO_TYPE_D_S_R_F_EDUCATIONALVIDEO\x10\x10\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_F_EPISODE\x10\x11\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_FEATUREFILM\x10\x12\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_F_FICTION\x10\x13\x12'\n" +
	"#VIDEO_TYPE_D_S_R_F_INFOMERCIALVIDEO\x10\x14\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_F_INTERVIEW\x10\x15\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_F_KARAOKE\x10\x16\x12%\n" +
	"!VIDEO_TYPE_D_S_R_F_LIVEEVENTVIDEO\x10\x17\x12/\n" +
	"+VIDEO_TYPE_D_S_R_F_LONGFORMMUSICALWORKVIDEO\x10\x18\x122\n" +
	".VIDEO_TYPE_D_S_R_F_LONGFORMNONMUSICALWORKVIDEO\x10\x19\x12!\n" +
	"\x1dVIDEO_TYPE_D_S_R_F_LYRICVIDEO\x10\x1a\x12\x1f\n" +
	"\x1bVIDEO_TYPE_D_S_R_F_MAGAZINE\x10\x1b\x12\x1b\n" +
	"\x17VIDEO_TYPE_D_S_R_F_MENU\x10\x1c\x12&\n" +
	"\"VIDEO_TYPE_D_S_R_F_MULTIMEDIAVIDEO\x10\x1d\x12&\n" +
	"\"VIDEO_TYPE_D_S_R_F_MUSICALWORKCLIP\x10\x1e\x120\n" +
	",VIDEO_TYPE_D_S_R_F_MUSICALWORKREADALONGVIDEO\x10\x1f\x12)\n" +
	"%VIDEO_TYPE_D_S_R_F_MUSICALWORKTRAILER\x10 \x12.\n" +
	"*VIDEO_TYPE_D_S_R_F_MUSICALWORKVIDEOCHAPTER\x10!\x12\x1b\n" +
	"\x17VIDEO_TYPE_D_S_R_F_NEWS\x10\"\x12)\n" +
	"%VIDEO_TYPE_D_S_R_F_NONMUSICALWORKCLIP\x10#\x123\n" +
	"/VIDEO_TYPE_D_S_R_F_NONMUSICALWORKREADALONGVIDEO\x10$\x12,\n" +
	"(VIDEO_TYPE_D_S_R_F_NONMUSICALWORKTRAILER\x10%\x121\n" +
	"-VIDEO_TYPE_D_S_R_F_NONMUSICALWORKVIDEOCHAPTER\x10&\x124\n" +
	"0VIDEO_TYPE_D_S_R_F_NONSERIALAUDIOVISUALRECORDING\x10'\x12!\n" +
	"\x1dVIDEO_TYPE_D_S_R_F_OPERAVIDEO\x10(\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_PERFORMANCE\x10)\x12%\n" +
	"!VIDEO_TYPE_D_S_R_F_READALONGVIDEO\x10*\x12)\n" +
	"%VIDEO_TYPE_D_S_R_F_REALITYTVSHOWVIDEO\x10+\x12\x1d\n" +
	"\x19VIDEO_TYPE_D_S_R_F_SEASON\x10,\x121\n" +
	"-VIDEO_TYPE_D_S_R_F_SERIALAUDIOVISUALRECORDING\x10-\x12\x1d\n" +
	"\x19VIDEO_TYPE_D_S_R_F_SERIES\x10.\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_F_SHORTFILM\x10/\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_SILENTVIDEO\x100\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_SKETCHVIDEO\x101\x12!\n" +
	"\x1dVIDEO_TYPE_D_S_R_F_SOAPSITCOM\x102\x12#\n" +
	"\x1fVIDEO_TYPE_D_S_R_F_SPECIALEVENT\x103\x12\x1c\n" +
	"\x18VIDEO_TYPE_D_S_R_F_SPORT\x104\x12*\n" +
	"&VIDEO_TYPE_D_S_R_F_THEATRICALWORKVIDEO\x105\x12#\n" +
	"\x1fVIDEO_TYPE_D_S_R_F_TRAILERVIDEO\x106\x12\x1d\n" +
	"\x19VIDEO_TYPE_D_S_R_F_TVFILM\x107\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_F_TVPROGRAM\x108\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_TVSHOWVIDEO\x109\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_F_UNKNOWN\x10:\x12#\n" +
	"\x1fVIDEO_TYPE_D_S_R_F_VIDEOCHAPTER\x10;\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_F_VIDEOCLIP\x10<\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_F_VIDEOREPORT\x10=\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_F_VIDEOSTEM\x10>*\xb0\x01\n" +
	"\x14VisualPerceptionType\x12&\n" +
	"\"VISUAL_PERCEPTION_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!VISUAL_PERCEPTION_TYPE_BACKGROUND\x10\x01\x12&\n" +
	"\"VISUAL_PERCEPTION_TYPE_USERDEFINED\x10\x02\x12!\n" +
	"\x1dVISUAL_PERCEPTION_TYPE_VISUAL\x10\x03*\xc0\x04\n" +
	"\rVocalRegister\x12\x1e\n" +
	"\x1aVOCAL_REGISTER_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13VOCAL_REGISTER_ALTO\x10\x01\x12\x1b\n" +
	"\x17VOCAL_REGISTER_BARITONE\x10\x02\x12\x1f\n" +
	"\x1bVOCAL_REGISTER_BASSBARITONE\x10\x03\x12\x17\n" +
	"\x13VOCAL_REGISTER_BASS\x10\x04\x12\x1b\n" +
	"\x17VOCAL_REGISTER_CASTRATI\x10\x05\x12\x1d\n" +
	"\x19VOCAL_REGISTER_CONTRABASS\x10\x06\x12\x1c\n" +
	"\x18VOCAL_REGISTER_CONTRALTO\x10\a\x12\x1f\n" +
	"\x1bVOCAL_REGISTER_COUNTERTENOR\x10\b\x12\x1b\n" +
	"\x17VOCAL_REGISTER_FALSETTO\x10\t\x12\x1f\n" +
	"\x1bVOCAL_REGISTER_MEZZOSOPRANO\x10\n" +
	"\x12\x1a\n" +
	"\x16VOCAL_REGISTER_PARADON\x10\v\x12\x1a\n" +
	"\x16VOCAL_REGISTER_PICCOLO\x10\f\x12\x1c\n" +
	"\x18VOCAL_REGISTER_SOPRANINO\x10\r\x12\x1a\n" +
	"\x16VOCAL_REGISTER_SOPRANO\x10\x0e\x12\x18\n" +
	"\x14VOCAL_REGISTER_TENOR\x10\x0f\x12\x19\n" +
	"\x15VOCAL_REGISTER_TREBLE\x10\x10\x12\x1f\n" +
	"\x1bVOCAL_REGISTER_VIOLAPARADON\x10\x11\x12\x1e\n" +
	"\x1aVOCAL_REGISTER_USERDEFINED\x10\x12*v\n" +
	"\tVocalType\x12\x1a\n" +
	"\x16VOCAL_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17VOCAL_TYPE_INSTRUMENTAL\x10\x01\x12\x1a\n" +
	"\x16VOCAL_TYPE_USERDEFINED\x10\x02\x12\x14\n" +
	"\x10VOCAL_TYPE_VOCAL\x10\x03*\xbf\x02\n" +
	"\x14WorkRelationshipType\x12&\n" +
	"\"WORK_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$WORK_RELATIONSHIP_TYPE_ARRANGEMENTOF\x10\x01\x12.\n" +
	"*WORK_RELATIONSHIP_TYPE_BASISFORARRANGEMENT\x10\x02\x12-\n" +
	")WORK_RELATIONSHIP_TYPE_MELODYBORROWEDFROM\x10\x03\x12(\n" +
	"$WORK_RELATIONSHIP_TYPE_REIMAGININGOF\x10\x04\x12$\n" +
	" WORK_RELATIONSHIP_TYPE_TAKENFROM\x10\x05\x12&\n" +
	"\"WORK_RELATIONSHIP_TYPE_USERDEFINED\x10\x06B\xd7\x01\n" +
	"\x16com.ddex.avs.v20200518B\x0eV20200518ProtoP\x01ZCgithub.com/OpenAudio/ddex-proto/gen/ddex/avs/v20200518;avsv20200518\xa2\x02\x03DAX\xaa\x02\x12Ddex.Avs.V20200518\xca\x02\x12Ddex\\Avs\\V20200518\xe2\x02\x1eDdex\\Avs\\V20200518\\GPBMetadata\xea\x02\x14Ddex::Avs::V20200518b\x06proto3"

var (
	file_ddex_avs_v20200518_v20200518_proto_rawDescOnce sync.Once
	file_ddex_avs_v20200518_v20200518_proto_rawDescData []byte
)

func file_ddex_avs_v20200518_v20200518_proto_rawDescGZIP() []byte {
	file_ddex_avs_v20200518_v20200518_proto_rawDescOnce.Do(func() {
		file_ddex_avs_v20200518_v20200518_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ddex_avs_v20200518_v20200518_proto_rawDesc), len(file_ddex_avs_v20200518_v20200518_proto_rawDesc)))
	})
	return file_ddex_avs_v20200518_v20200518_proto_rawDescData
}

var file_ddex_avs_v20200518_v20200518_proto_enumTypes = make([]protoimpl.EnumInfo, 206)
var file_ddex_avs_v20200518_v20200518_proto_goTypes = []any{
	(AdditionalRightsClaimStatus)(0),               // 0: ddex.avs.v20200518.AdditionalRightsClaimStatus
	(AdditionalTitleType)(0),                       // 1: ddex.avs.v20200518.AdditionalTitleType
	(AdditionalUseType)(0),                         // 2: ddex.avs.v20200518.AdditionalUseType
	(AdditionalVideoType)(0),                       // 3: ddex.avs.v20200518.AdditionalVideoType
	(AdministratingRecordCompanyRole)(0),           // 4: ddex.avs.v20200518.AdministratingRecordCompanyRole
	(AffiliationType)(0),                           // 5: ddex.avs.v20200518.AffiliationType
	(AllTerritoryCode)(0),                          // 6: ddex.avs.v20200518.AllTerritoryCode
	(ArtistRole)(0),                                // 7: ddex.avs.v20200518.ArtistRole
	(ArtistType)(0),                                // 8: ddex.avs.v20200518.ArtistType
	(AspectRatioType)(0),                           // 9: ddex.avs.v20200518.AspectRatioType
	(AsserterType)(0),                              // 10: ddex.avs.v20200518.AsserterType
	(AssertionStatus)(0),                           // 11: ddex.avs.v20200518.AssertionStatus
	(AudioCodecType)(0),                            // 12: ddex.avs.v20200518.AudioCodecType
	(BasisForRevenueAllocation)(0),                 // 13: ddex.avs.v20200518.BasisForRevenueAllocation
	(BinaryDataType)(0),                            // 14: ddex.avs.v20200518.BinaryDataType
	(BusinessMusicalWorkContributorRole)(0),        // 15: ddex.avs.v20200518.BusinessMusicalWorkContributorRole
	(CarrierType)(0),                               // 16: ddex.avs.v20200518.CarrierType
	(CatalogTransferType)(0),                       // 17: ddex.avs.v20200518.CatalogTransferType
	(CdProtectionType)(0),                          // 18: ddex.avs.v20200518.CdProtectionType
	(CharacterType)(0),                             // 19: ddex.avs.v20200518.CharacterType
	(ClaimStatus)(0),                               // 20: ddex.avs.v20200518.ClaimStatus
	(ClassifiedGenre)(0),                           // 21: ddex.avs.v20200518.ClassifiedGenre
	(CodingType)(0),                                // 22: ddex.avs.v20200518.CodingType
	(CollectionMandateType)(0),                     // 23: ddex.avs.v20200518.CollectionMandateType
	(CommentaryNoteType)(0),                        // 24: ddex.avs.v20200518.CommentaryNoteType
	(CommercialModelType)(0),                       // 25: ddex.avs.v20200518.CommercialModelType
	(CommercialModelTypeERN)(0),                    // 26: ddex.avs.v20200518.CommercialModelTypeERN
	(CommercialModelTypeMWNL)(0),                   // 27: ddex.avs.v20200518.CommercialModelTypeMWNL
	(CompilationType)(0),                           // 28: ddex.avs.v20200518.CompilationType
	(CompositeMusicalWorkType)(0),                  // 29: ddex.avs.v20200518.CompositeMusicalWorkType
	(ContainerFormat)(0),                           // 30: ddex.avs.v20200518.ContainerFormat
	(ContributorClaimStatus)(0),                    // 31: ddex.avs.v20200518.ContributorClaimStatus
	(ContributorRole)(0),                           // 32: ddex.avs.v20200518.ContributorRole
	(CreativeMusicalWorkContributorRole)(0),        // 33: ddex.avs.v20200518.CreativeMusicalWorkContributorRole
	(CueOrigin)(0),                                 // 34: ddex.avs.v20200518.CueOrigin
	(CueSheetType)(0),                              // 35: ddex.avs.v20200518.CueSheetType
	(CueUseType)(0),                                // 36: ddex.avs.v20200518.CueUseType
	(CurrencyCode)(0),                              // 37: ddex.avs.v20200518.CurrencyCode
	(CurrentTerritoryCode)(0),                      // 38: ddex.avs.v20200518.CurrentTerritoryCode
	(DanceStyle)(0),                                // 39: ddex.avs.v20200518.DanceStyle
	(DataCarrierFormat)(0),                         // 40: ddex.avs.v20200518.DataCarrierFormat
	(DataCarrierType)(0),                           // 41: ddex.avs.v20200518.DataCarrierType
	(DdexTerritoryCode)(0),                         // 42: ddex.avs.v20200518.DdexTerritoryCode
	(DeprecatedCurrencyCode)(0),                    // 43: ddex.avs.v20200518.DeprecatedCurrencyCode
	(DeprecatedIsoTerritoryCode)(0),                // 44: ddex.avs.v20200518.DeprecatedIsoTerritoryCode
	(DeprecatedReleaseType)(0),                     // 45: ddex.avs.v20200518.DeprecatedReleaseType
	(DigitizationMode)(0),                          // 46: ddex.avs.v20200518.DigitizationMode
	(DisplayArtistRole)(0),                         // 47: ddex.avs.v20200518.DisplayArtistRole
	(DistributionChannelType)(0),                   // 48: ddex.avs.v20200518.DistributionChannelType
	(DocumentTypeLoD)(0),                           // 49: ddex.avs.v20200518.DocumentTypeLoD
	(DocumentTypeMWL)(0),                           // 50: ddex.avs.v20200518.DocumentTypeMWL
	(DpidStatus)(0),                                // 51: ddex.avs.v20200518.DpidStatus
	(DrmEnforcementType)(0),                        // 52: ddex.avs.v20200518.DrmEnforcementType
	(ElementConfiguration)(0),                      // 53: ddex.avs.v20200518.ElementConfiguration
	(ElementDesignation)(0),                        // 54: ddex.avs.v20200518.ElementDesignation
	(EncodingType)(0),                              // 55: ddex.avs.v20200518.EncodingType
	(EquipmentType)(0),                             // 56: ddex.avs.v20200518.EquipmentType
	(ErnMessageType)(0),                            // 57: ddex.avs.v20200518.ErnMessageType
	(ErnTestMessageType)(0),                        // 58: ddex.avs.v20200518.ErnTestMessageType
	(ErncFileStatus)(0),                            // 59: ddex.avs.v20200518.ErncFileStatus
	(ErncProposedActionType)(0),                    // 60: ddex.avs.v20200518.ErncProposedActionType
	(ErrorSeverity)(0),                             // 61: ddex.avs.v20200518.ErrorSeverity
	(ErrorType)(0),                                 // 62: ddex.avs.v20200518.ErrorType
	(ExceptionReason)(0),                           // 63: ddex.avs.v20200518.ExceptionReason
	(ExpressionType)(0),                            // 64: ddex.avs.v20200518.ExpressionType
	(ExternallyLinkedResourceType)(0),              // 65: ddex.avs.v20200518.ExternallyLinkedResourceType
	(FileType)(0),                                  // 66: ddex.avs.v20200518.FileType
	(FingerprintAlgorithmType)(0),                  // 67: ddex.avs.v20200518.FingerprintAlgorithmType
	(Form)(0),                                      // 68: ddex.avs.v20200518.Form
	(FrameRate)(0),                                 // 69: ddex.avs.v20200518.FrameRate
	(Gender)(0),                                    // 70: ddex.avs.v20200518.Gender
	(GoverningAgreementType)(0),                    // 71: ddex.avs.v20200518.GoverningAgreementType
	(HashSumAlgorithmType)(0),                      // 72: ddex.avs.v20200518.HashSumAlgorithmType
	(ImageCodecType)(0),                            // 73: ddex.avs.v20200518.ImageCodecType
	(ImageType)(0),                                 // 74: ddex.avs.v20200518.ImageType
	(InstrumentType)(0),                            // 75: ddex.avs.v20200518.InstrumentType
	(Iso639Part12LanguageCode)(0),                  // 76: ddex.avs.v20200518.Iso639Part12LanguageCode
	(Iso639Part3LanguageCode)(0),                   // 77: ddex.avs.v20200518.Iso639Part3LanguageCode
	(IsoCurrencyCode)(0),                           // 78: ddex.avs.v20200518.IsoCurrencyCode
	(IsoLanguageCode)(0),                           // 79: ddex.avs.v20200518.IsoLanguageCode
	(IsoTerritoryCode)(0),                          // 80: ddex.avs.v20200518.IsoTerritoryCode
	(LabelNameType)(0),                             // 81: ddex.avs.v20200518.LabelNameType
	(LabelType)(0),                                 // 82: ddex.avs.v20200518.LabelType
	(LanguageLocalizationType)(0),                  // 83: ddex.avs.v20200518.LanguageLocalizationType
	(LicenseRecord)(0),                             // 84: ddex.avs.v20200518.LicenseRecord
	(LicenseRefusalReason)(0),                      // 85: ddex.avs.v20200518.LicenseRefusalReason
	(LicenseRejectionReason)(0),                    // 86: ddex.avs.v20200518.LicenseRejectionReason
	(LinkAcknowledgementStatus)(0),                 // 87: ddex.avs.v20200518.LinkAcknowledgementStatus
	(LinkDescription)(0),                           // 88: ddex.avs.v20200518.LinkDescription
	(LyricsType)(0),                                // 89: ddex.avs.v20200518.LyricsType
	(MeasurementType)(0),                           // 90: ddex.avs.v20200518.MeasurementType
	(MembershipType)(0),                            // 91: ddex.avs.v20200518.MembershipType
	(MessageActionType)(0),                         // 92: ddex.avs.v20200518.MessageActionType
	(MessageControlType)(0),                        // 93: ddex.avs.v20200518.MessageControlType
	(MessagePurpose)(0),                            // 94: ddex.avs.v20200518.MessagePurpose
	(MessageType)(0),                               // 95: ddex.avs.v20200518.MessageType
	(MetadataSourceType)(0),                        // 96: ddex.avs.v20200518.MetadataSourceType
	(MissingLinkReason)(0),                         // 97: ddex.avs.v20200518.MissingLinkReason
	(Mode)(0),                                      // 98: ddex.avs.v20200518.Mode
	(Mood)(0),                                      // 99: ddex.avs.v20200518.Mood
	(MoodOrThemeType)(0),                           // 100: ddex.avs.v20200518.MoodOrThemeType
	(MusicalWorkContributorRole)(0),                // 101: ddex.avs.v20200518.MusicalWorkContributorRole
	(MusicalWorkType)(0),                           // 102: ddex.avs.v20200518.MusicalWorkType
	(MwnlFileStatus)(0),                            // 103: ddex.avs.v20200518.MwnlFileStatus
	(MwnlProposedActionType)(0),                    // 104: ddex.avs.v20200518.MwnlProposedActionType
	(NewStudioRole)(0),                             // 105: ddex.avs.v20200518.NewStudioRole
	(OperatingSystemType)(0),                       // 106: ddex.avs.v20200518.OperatingSystemType
	(PLineType)(0),                                 // 107: ddex.avs.v20200518.PLineType
	(ParentalWarningType)(0),                       // 108: ddex.avs.v20200518.ParentalWarningType
	(PartyRelationshipType)(0),                     // 109: ddex.avs.v20200518.PartyRelationshipType
	(PercentageType)(0),                            // 110: ddex.avs.v20200518.PercentageType
	(Period)(0),                                    // 111: ddex.avs.v20200518.Period
	(PhysicalCarrierType)(0),                       // 112: ddex.avs.v20200518.PhysicalCarrierType
	(PriceInformationType)(0),                      // 113: ddex.avs.v20200518.PriceInformationType
	(ProductType)(0),                               // 114: ddex.avs.v20200518.ProductType
	(ProfileId)(0),                                 // 115: ddex.avs.v20200518.ProfileId
	(Purpose)(0),                                   // 116: ddex.avs.v20200518.Purpose
	(RatingAgency)(0),                              // 117: ddex.avs.v20200518.RatingAgency
	(RatingReason)(0),                              // 118: ddex.avs.v20200518.RatingReason
	(RdrMessageType)(0),                            // 119: ddex.avs.v20200518.RdrMessageType
	(RdrcFileStatus)(0),                            // 120: ddex.avs.v20200518.RdrcFileStatus
	(RecipientRevenueType)(0),                      // 121: ddex.avs.v20200518.RecipientRevenueType
	(RecordingMode)(0),                             // 122: ddex.avs.v20200518.RecordingMode
	(RecordingPartType)(0),                         // 123: ddex.avs.v20200518.RecordingPartType
	(ReferenceCreation)(0),                         // 124: ddex.avs.v20200518.ReferenceCreation
	(ReferenceUnit)(0),                             // 125: ddex.avs.v20200518.ReferenceUnit
	(RegistrationStatus)(0),                        // 126: ddex.avs.v20200518.RegistrationStatus
	(RelatedResourceType)(0),                       // 127: ddex.avs.v20200518.RelatedResourceType
	(RelationalRelator)(0),                         // 128: ddex.avs.v20200518.RelationalRelator
	(ReleaseProfileVariantVersionId)(0),            // 129: ddex.avs.v20200518.ReleaseProfileVariantVersionId
	(ReleaseProfileVersionId)(0),                   // 130: ddex.avs.v20200518.ReleaseProfileVersionId
	(ReleaseRelationshipType)(0),                   // 131: ddex.avs.v20200518.ReleaseRelationshipType
	(ReleaseResourceType)(0),                       // 132: ddex.avs.v20200518.ReleaseResourceType
	(ReleaseType)(0),                               // 133: ddex.avs.v20200518.ReleaseType
	(ReleaseTypeERN4)(0),                           // 134: ddex.avs.v20200518.ReleaseTypeERN4
	(ReleaseTypeMCNOTIF)(0),                        // 135: ddex.avs.v20200518.ReleaseTypeMCNOTIF
	(RequestMessagePurpose)(0),                     // 136: ddex.avs.v20200518.RequestMessagePurpose
	(RequestReason)(0),                             // 137: ddex.avs.v20200518.RequestReason
	(ResourceContributorRole)(0),                   // 138: ddex.avs.v20200518.ResourceContributorRole
	(ResourceGroupType)(0),                         // 139: ddex.avs.v20200518.ResourceGroupType
	(ResourceRelationshipType)(0),                  // 140: ddex.avs.v20200518.ResourceRelationshipType
	(ResourceType)(0),                              // 141: ddex.avs.v20200518.ResourceType
	(ResourceTypeMCNOTIF)(0),                       // 142: ddex.avs.v20200518.ResourceTypeMCNOTIF
	(ResourceTypeRDRR)(0),                          // 143: ddex.avs.v20200518.ResourceTypeRDRR
	(ResourceWorkRelationshipType)(0),              // 144: ddex.avs.v20200518.ResourceWorkRelationshipType
	(RevenueSourceType)(0),                         // 145: ddex.avs.v20200518.RevenueSourceType
	(RhythmStyle)(0),                               // 146: ddex.avs.v20200518.RhythmStyle
	(RightShareType)(0),                            // 147: ddex.avs.v20200518.RightShareType
	(RightsClaimPolicyType)(0),                     // 148: ddex.avs.v20200518.RightsClaimPolicyType
	(RightsClaimStatus)(0),                         // 149: ddex.avs.v20200518.RightsClaimStatus
	(RightsControlType)(0),                         // 150: ddex.avs.v20200518.RightsControlType
	(RightsControllerRole)(0),                      // 151: ddex.avs.v20200518.RightsControllerRole
	(RightsControllerType)(0),                      // 152: ddex.avs.v20200518.RightsControllerType
	(RightsCoverage)(0),                            // 153: ddex.avs.v20200518.RightsCoverage
	(RightsCoverageMWNL)(0),                        // 154: ddex.avs.v20200518.RightsCoverageMWNL
	(RightsStatementProfile)(0),                    // 155: ddex.avs.v20200518.RightsStatementProfile
	(RootChordNote)(0),                             // 156: ddex.avs.v20200518.RootChordNote
	(RootChordQuality)(0),                          // 157: ddex.avs.v20200518.RootChordQuality
	(RoyaltyRateCalculationType)(0),                // 158: ddex.avs.v20200518.RoyaltyRateCalculationType
	(RoyaltyRateType)(0),                           // 159: ddex.avs.v20200518.RoyaltyRateType
	(SessionType)(0),                               // 160: ddex.avs.v20200518.SessionType
	(SheetMusicCodecType)(0),                       // 161: ddex.avs.v20200518.SheetMusicCodecType
	(SheetMusicType)(0),                            // 162: ddex.avs.v20200518.SheetMusicType
	(SoftwareType)(0),                              // 163: ddex.avs.v20200518.SoftwareType
	(SoundRecordingType)(0),                        // 164: ddex.avs.v20200518.SoundRecordingType
	(Status)(0),                                    // 165: ddex.avs.v20200518.Status
	(SubGenre)(0),                                  // 166: ddex.avs.v20200518.SubGenre
	(SubTitleType)(0),                              // 167: ddex.avs.v20200518.SubTitleType
	(SummaryType)(0),                               // 168: ddex.avs.v20200518.SummaryType
	(SupplyChainStatus)(0),                         // 169: ddex.avs.v20200518.SupplyChainStatus
	(Tempo)(0),                                     // 170: ddex.avs.v20200518.Tempo
	(TerritoryCodeType)(0),                         // 171: ddex.avs.v20200518.TerritoryCodeType
	(TerritoryCodeTypeIncludingDeprecatedCodes)(0), // 172: ddex.avs.v20200518.TerritoryCodeTypeIncludingDeprecatedCodes
	(TextCodecType)(0),                             // 173: ddex.avs.v20200518.TextCodecType
	(TextType)(0),                                  // 174: ddex.avs.v20200518.TextType
	(TextTypeATOM)(0),                              // 175: ddex.avs.v20200518.TextTypeATOM
	(Theme)(0),                                     // 176: ddex.avs.v20200518.Theme
	(ThemeType)(0),                                 // 177: ddex.avs.v20200518.ThemeType
	(TimecodeType)(0),                              // 178: ddex.avs.v20200518.TimecodeType
	(TisTerritoryCode)(0),                          // 179: ddex.avs.v20200518.TisTerritoryCode
	(TitleType)(0),                                 // 180: ddex.avs.v20200518.TitleType
	(TransferCategory)(0),                          // 181: ddex.avs.v20200518.TransferCategory
	(TransferType)(0),                              // 182: ddex.avs.v20200518.TransferType
	(UnitOfBitRate)(0),                             // 183: ddex.avs.v20200518.UnitOfBitRate
	(UnitOfConditionValue)(0),                      // 184: ddex.avs.v20200518.UnitOfConditionValue
	(UnitOfCuePoints)(0),                           // 185: ddex.avs.v20200518.UnitOfCuePoints
	(UnitOfDuration)(0),                            // 186: ddex.avs.v20200518.UnitOfDuration
	(UnitOfExtent)(0),                              // 187: ddex.avs.v20200518.UnitOfExtent
	(UnitOfFrameRate)(0),                           // 188: ddex.avs.v20200518.UnitOfFrameRate
	(UnitOfFrequency)(0),                           // 189: ddex.avs.v20200518.UnitOfFrequency
	(UnitTypeForRevenueAllocation)(0),              // 190: ddex.avs.v20200518.UnitTypeForRevenueAllocation
	(UseType)(0),                                   // 191: ddex.avs.v20200518.UseType
	(UseTypeERN)(0),                                // 192: ddex.avs.v20200518.UseTypeERN
	(UseTypeMWNL)(0),                               // 193: ddex.avs.v20200518.UseTypeMWNL
	(UseTypeRDR)(0),                                // 194: ddex.avs.v20200518.UseTypeRDR
	(UserInterfaceType)(0),                         // 195: ddex.avs.v20200518.UserInterfaceType
	(UserInterfaceTypeERN)(0),                      // 196: ddex.avs.v20200518.UserInterfaceTypeERN
	(VersionType)(0),                               // 197: ddex.avs.v20200518.VersionType
	(VideoCodecType)(0),                            // 198: ddex.avs.v20200518.VideoCodecType
	(VideoDefinitionType)(0),                       // 199: ddex.avs.v20200518.VideoDefinitionType
	(VideoType)(0),                                 // 200: ddex.avs.v20200518.VideoType
	(VideoTypeDSRF)(0),                             // 201: ddex.avs.v20200518.VideoTypeDSRF
	(VisualPerceptionType)(0),                      // 202: ddex.avs.v20200518.VisualPerceptionType
	(VocalRegister)(0),                             // 203: ddex.avs.v20200518.VocalRegister
	(VocalType)(0),                                 // 204: ddex.avs.v20200518.VocalType
	(WorkRelationshipType)(0),                      // 205: ddex.avs.v20200518.WorkRelationshipType
}
var file_ddex_avs_v20200518_v20200518_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ddex_avs_v20200518_v20200518_proto_init() }
func file_ddex_avs_v20200518_v20200518_proto_init() {
	if File_ddex_avs_v20200518_v20200518_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ddex_avs_v20200518_v20200518_proto_rawDesc), len(file_ddex_avs_v20200518_v20200518_proto_rawDesc)),
			NumEnums:      206,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ddex_avs_v20200518_v20200518_proto_goTypes,
		DependencyIndexes: file_ddex_avs_v20200518_v20200518_proto_depIdxs,
		EnumInfos:         file_ddex_avs_v20200518_v20200518_proto_enumTypes,
	}.Build()
	File_ddex_avs_v20200518_v20200518_proto = out.File
	file_ddex_avs_v20200518_v20200518_proto_goTypes = nil
	file_ddex_avs_v20200518_v20200518_proto_depIdxs = nil
}
