// Code generated by generate-go-extensions. DO NOT EDIT.

package v20161006

import "strings"

// XMLString returns the XML string representation of AccessLimitation
func (e AccessLimitation) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAccessLimitationString parses a string value to AccessLimitation enum (case-insensitive)
func ParseAccessLimitationString(s string) (AccessLimitation, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AccessLimitation(0), false
	}
}

// XMLString returns the XML string representation of AdministratingRecordCompanyRole
func (e AdministratingRecordCompanyRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAdministratingRecordCompanyRoleString parses a string value to AdministratingRecordCompanyRole enum (case-insensitive)
func ParseAdministratingRecordCompanyRoleString(s string) (AdministratingRecordCompanyRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AdministratingRecordCompanyRole(0), false
	}
}

// XMLString returns the XML string representation of AllTerritoryCode
func (e AllTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAllTerritoryCodeString parses a string value to AllTerritoryCode enum (case-insensitive)
func ParseAllTerritoryCodeString(s string) (AllTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AllTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of ArtistRole
func (e ArtistRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseArtistRoleString parses a string value to ArtistRole enum (case-insensitive)
func ParseArtistRoleString(s string) (ArtistRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ArtistRole(0), false
	}
}

// XMLString returns the XML string representation of AudioCodecType
func (e AudioCodecType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAudioCodecTypeString parses a string value to AudioCodecType enum (case-insensitive)
func ParseAudioCodecTypeString(s string) (AudioCodecType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AudioCodecType(0), false
	}
}

// XMLString returns the XML string representation of BinaryDataType
func (e BinaryDataType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseBinaryDataTypeString parses a string value to BinaryDataType enum (case-insensitive)
func ParseBinaryDataTypeString(s string) (BinaryDataType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return BinaryDataType(0), false
	}
}

// XMLString returns the XML string representation of BusinessContributorRole
func (e BusinessContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseBusinessContributorRoleString parses a string value to BusinessContributorRole enum (case-insensitive)
func ParseBusinessContributorRoleString(s string) (BusinessContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return BusinessContributorRole(0), false
	}
}

// XMLString returns the XML string representation of CarrierType
func (e CarrierType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCarrierTypeString parses a string value to CarrierType enum (case-insensitive)
func ParseCarrierTypeString(s string) (CarrierType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CarrierType(0), false
	}
}

// XMLString returns the XML string representation of CdProtectionType
func (e CdProtectionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCdProtectionTypeString parses a string value to CdProtectionType enum (case-insensitive)
func ParseCdProtectionTypeString(s string) (CdProtectionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CdProtectionType(0), false
	}
}

// XMLString returns the XML string representation of CharacterType
func (e CharacterType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCharacterTypeString parses a string value to CharacterType enum (case-insensitive)
func ParseCharacterTypeString(s string) (CharacterType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CharacterType(0), false
	}
}

// XMLString returns the XML string representation of CodingType
func (e CodingType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCodingTypeString parses a string value to CodingType enum (case-insensitive)
func ParseCodingTypeString(s string) (CodingType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CodingType(0), false
	}
}

// XMLString returns the XML string representation of CollectionType
func (e CollectionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCollectionTypeString parses a string value to CollectionType enum (case-insensitive)
func ParseCollectionTypeString(s string) (CollectionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CollectionType(0), false
	}
}

// XMLString returns the XML string representation of CommercialModelType
func (e CommercialModelType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCommercialModelTypeString parses a string value to CommercialModelType enum (case-insensitive)
func ParseCommercialModelTypeString(s string) (CommercialModelType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CommercialModelType(0), false
	}
}

// XMLString returns the XML string representation of CompilationType
func (e CompilationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCompilationTypeString parses a string value to CompilationType enum (case-insensitive)
func ParseCompilationTypeString(s string) (CompilationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CompilationType(0), false
	}
}

// XMLString returns the XML string representation of ContainerFormat
func (e ContainerFormat) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseContainerFormatString parses a string value to ContainerFormat enum (case-insensitive)
func ParseContainerFormatString(s string) (ContainerFormat, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ContainerFormat(0), false
	}
}

// XMLString returns the XML string representation of CreationType
func (e CreationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCreationTypeString parses a string value to CreationType enum (case-insensitive)
func ParseCreationTypeString(s string) (CreationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CreationType(0), false
	}
}

// XMLString returns the XML string representation of CreativeContributorRole
func (e CreativeContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCreativeContributorRoleString parses a string value to CreativeContributorRole enum (case-insensitive)
func ParseCreativeContributorRoleString(s string) (CreativeContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CreativeContributorRole(0), false
	}
}

// XMLString returns the XML string representation of CueOrigin
func (e CueOrigin) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCueOriginString parses a string value to CueOrigin enum (case-insensitive)
func ParseCueOriginString(s string) (CueOrigin, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CueOrigin(0), false
	}
}

// XMLString returns the XML string representation of CueSheetType
func (e CueSheetType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCueSheetTypeString parses a string value to CueSheetType enum (case-insensitive)
func ParseCueSheetTypeString(s string) (CueSheetType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CueSheetType(0), false
	}
}

// XMLString returns the XML string representation of CueUseType
func (e CueUseType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCueUseTypeString parses a string value to CueUseType enum (case-insensitive)
func ParseCueUseTypeString(s string) (CueUseType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CueUseType(0), false
	}
}

// XMLString returns the XML string representation of CurrencyCode
func (e CurrencyCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCurrencyCodeString parses a string value to CurrencyCode enum (case-insensitive)
func ParseCurrencyCodeString(s string) (CurrencyCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CurrencyCode(0), false
	}
}

// XMLString returns the XML string representation of CurrentTerritoryCode
func (e CurrentTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCurrentTerritoryCodeString parses a string value to CurrentTerritoryCode enum (case-insensitive)
func ParseCurrentTerritoryCodeString(s string) (CurrentTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CurrentTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of DataMismatchResponseType
func (e DataMismatchResponseType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDataMismatchResponseTypeString parses a string value to DataMismatchResponseType enum (case-insensitive)
func ParseDataMismatchResponseTypeString(s string) (DataMismatchResponseType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DataMismatchResponseType(0), false
	}
}

// XMLString returns the XML string representation of DataMismatchStatus
func (e DataMismatchStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDataMismatchStatusString parses a string value to DataMismatchStatus enum (case-insensitive)
func ParseDataMismatchStatusString(s string) (DataMismatchStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DataMismatchStatus(0), false
	}
}

// XMLString returns the XML string representation of DataMismatchType
func (e DataMismatchType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDataMismatchTypeString parses a string value to DataMismatchType enum (case-insensitive)
func ParseDataMismatchTypeString(s string) (DataMismatchType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DataMismatchType(0), false
	}
}

// XMLString returns the XML string representation of DdexTerritoryCode
func (e DdexTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDdexTerritoryCodeString parses a string value to DdexTerritoryCode enum (case-insensitive)
func ParseDdexTerritoryCodeString(s string) (DdexTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DdexTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of DeductionRateType
func (e DeductionRateType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDeductionRateTypeString parses a string value to DeductionRateType enum (case-insensitive)
func ParseDeductionRateTypeString(s string) (DeductionRateType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DeductionRateType(0), false
	}
}

// XMLString returns the XML string representation of DeliveryActionType
func (e DeliveryActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDeliveryActionTypeString parses a string value to DeliveryActionType enum (case-insensitive)
func ParseDeliveryActionTypeString(s string) (DeliveryActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DeliveryActionType(0), false
	}
}

// XMLString returns the XML string representation of DeliveryMessageType
func (e DeliveryMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDeliveryMessageTypeString parses a string value to DeliveryMessageType enum (case-insensitive)
func ParseDeliveryMessageTypeString(s string) (DeliveryMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DeliveryMessageType(0), false
	}
}

// XMLString returns the XML string representation of DeprecatedCurrencyCode
func (e DeprecatedCurrencyCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDeprecatedCurrencyCodeString parses a string value to DeprecatedCurrencyCode enum (case-insensitive)
func ParseDeprecatedCurrencyCodeString(s string) (DeprecatedCurrencyCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DeprecatedCurrencyCode(0), false
	}
}

// XMLString returns the XML string representation of DeprecatedIsoTerritoryCode
func (e DeprecatedIsoTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDeprecatedIsoTerritoryCodeString parses a string value to DeprecatedIsoTerritoryCode enum (case-insensitive)
func ParseDeprecatedIsoTerritoryCodeString(s string) (DeprecatedIsoTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DeprecatedIsoTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of DigitizationMode
func (e DigitizationMode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDigitizationModeString parses a string value to DigitizationMode enum (case-insensitive)
func ParseDigitizationModeString(s string) (DigitizationMode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DigitizationMode(0), false
	}
}

// XMLString returns the XML string representation of DisputeReason
func (e DisputeReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDisputeReasonString parses a string value to DisputeReason enum (case-insensitive)
func ParseDisputeReasonString(s string) (DisputeReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DisputeReason(0), false
	}
}

// XMLString returns the XML string representation of DistributionChannelType
func (e DistributionChannelType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDistributionChannelTypeString parses a string value to DistributionChannelType enum (case-insensitive)
func ParseDistributionChannelTypeString(s string) (DistributionChannelType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DistributionChannelType(0), false
	}
}

// XMLString returns the XML string representation of DpidStatus
func (e DpidStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDpidStatusString parses a string value to DpidStatus enum (case-insensitive)
func ParseDpidStatusString(s string) (DpidStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DpidStatus(0), false
	}
}

// XMLString returns the XML string representation of DrmEnforcementType
func (e DrmEnforcementType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDrmEnforcementTypeString parses a string value to DrmEnforcementType enum (case-insensitive)
func ParseDrmEnforcementTypeString(s string) (DrmEnforcementType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DrmEnforcementType(0), false
	}
}

// XMLString returns the XML string representation of DrmPlatformType
func (e DrmPlatformType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDrmPlatformTypeString parses a string value to DrmPlatformType enum (case-insensitive)
func ParseDrmPlatformTypeString(s string) (DrmPlatformType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DrmPlatformType(0), false
	}
}

// XMLString returns the XML string representation of DsrMessageType
func (e DsrMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDsrMessageTypeString parses a string value to DsrMessageType enum (case-insensitive)
func ParseDsrMessageTypeString(s string) (DsrMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DsrMessageType(0), false
	}
}

// XMLString returns the XML string representation of EquipmentType
func (e EquipmentType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseEquipmentTypeString parses a string value to EquipmentType enum (case-insensitive)
func ParseEquipmentTypeString(s string) (EquipmentType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return EquipmentType(0), false
	}
}

// XMLString returns the XML string representation of ErnMessageType
func (e ErnMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseErnMessageTypeString parses a string value to ErnMessageType enum (case-insensitive)
func ParseErnMessageTypeString(s string) (ErnMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ErnMessageType(0), false
	}
}

// XMLString returns the XML string representation of ErncFileStatus
func (e ErncFileStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseErncFileStatusString parses a string value to ErncFileStatus enum (case-insensitive)
func ParseErncFileStatusString(s string) (ErncFileStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ErncFileStatus(0), false
	}
}

// XMLString returns the XML string representation of ErncProposedActionType
func (e ErncProposedActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseErncProposedActionTypeString parses a string value to ErncProposedActionType enum (case-insensitive)
func ParseErncProposedActionTypeString(s string) (ErncProposedActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ErncProposedActionType(0), false
	}
}

// XMLString returns the XML string representation of ExpressionType
func (e ExpressionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseExpressionTypeString parses a string value to ExpressionType enum (case-insensitive)
func ParseExpressionTypeString(s string) (ExpressionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ExpressionType(0), false
	}
}

// XMLString returns the XML string representation of ExternallyLinkedResourceType
func (e ExternallyLinkedResourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseExternallyLinkedResourceTypeString parses a string value to ExternallyLinkedResourceType enum (case-insensitive)
func ParseExternallyLinkedResourceTypeString(s string) (ExternallyLinkedResourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ExternallyLinkedResourceType(0), false
	}
}

// XMLString returns the XML string representation of FileStatus
func (e FileStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseFileStatusString parses a string value to FileStatus enum (case-insensitive)
func ParseFileStatusString(s string) (FileStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return FileStatus(0), false
	}
}

// XMLString returns the XML string representation of FingerprintAlgorithmType
func (e FingerprintAlgorithmType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseFingerprintAlgorithmTypeString parses a string value to FingerprintAlgorithmType enum (case-insensitive)
func ParseFingerprintAlgorithmTypeString(s string) (FingerprintAlgorithmType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return FingerprintAlgorithmType(0), false
	}
}

// XMLString returns the XML string representation of GoverningAgreementType
func (e GoverningAgreementType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseGoverningAgreementTypeString parses a string value to GoverningAgreementType enum (case-insensitive)
func ParseGoverningAgreementTypeString(s string) (GoverningAgreementType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return GoverningAgreementType(0), false
	}
}

// XMLString returns the XML string representation of HashSumAlgorithmType
func (e HashSumAlgorithmType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseHashSumAlgorithmTypeString parses a string value to HashSumAlgorithmType enum (case-insensitive)
func ParseHashSumAlgorithmTypeString(s string) (HashSumAlgorithmType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return HashSumAlgorithmType(0), false
	}
}

// XMLString returns the XML string representation of ImageCodecType
func (e ImageCodecType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseImageCodecTypeString parses a string value to ImageCodecType enum (case-insensitive)
func ParseImageCodecTypeString(s string) (ImageCodecType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ImageCodecType(0), false
	}
}

// XMLString returns the XML string representation of ImageType
func (e ImageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseImageTypeString parses a string value to ImageType enum (case-insensitive)
func ParseImageTypeString(s string) (ImageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ImageType(0), false
	}
}

// XMLString returns the XML string representation of InvoiceAvailabilityStatus
func (e InvoiceAvailabilityStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseInvoiceAvailabilityStatusString parses a string value to InvoiceAvailabilityStatus enum (case-insensitive)
func ParseInvoiceAvailabilityStatusString(s string) (InvoiceAvailabilityStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return InvoiceAvailabilityStatus(0), false
	}
}

// XMLString returns the XML string representation of IsoCurrencyCode
func (e IsoCurrencyCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIsoCurrencyCodeString parses a string value to IsoCurrencyCode enum (case-insensitive)
func ParseIsoCurrencyCodeString(s string) (IsoCurrencyCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return IsoCurrencyCode(0), false
	}
}

// XMLString returns the XML string representation of IsoLanguageCode
func (e IsoLanguageCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIsoLanguageCodeString parses a string value to IsoLanguageCode enum (case-insensitive)
func ParseIsoLanguageCodeString(s string) (IsoLanguageCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return IsoLanguageCode(0), false
	}
}

// XMLString returns the XML string representation of IsoTerritoryCode
func (e IsoTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIsoTerritoryCodeString parses a string value to IsoTerritoryCode enum (case-insensitive)
func ParseIsoTerritoryCodeString(s string) (IsoTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return IsoTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of LabelNameType
func (e LabelNameType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLabelNameTypeString parses a string value to LabelNameType enum (case-insensitive)
func ParseLabelNameTypeString(s string) (LabelNameType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LabelNameType(0), false
	}
}

// XMLString returns the XML string representation of LicenseOrClaimRefusalReason
func (e LicenseOrClaimRefusalReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLicenseOrClaimRefusalReasonString parses a string value to LicenseOrClaimRefusalReason enum (case-insensitive)
func ParseLicenseOrClaimRefusalReasonString(s string) (LicenseOrClaimRefusalReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LicenseOrClaimRefusalReason(0), false
	}
}

// XMLString returns the XML string representation of LicenseOrClaimRequestUpdateReason
func (e LicenseOrClaimRequestUpdateReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLicenseOrClaimRequestUpdateReasonString parses a string value to LicenseOrClaimRequestUpdateReason enum (case-insensitive)
func ParseLicenseOrClaimRequestUpdateReasonString(s string) (LicenseOrClaimRequestUpdateReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LicenseOrClaimRequestUpdateReason(0), false
	}
}

// XMLString returns the XML string representation of LicenseOrClaimUpdateReason
func (e LicenseOrClaimUpdateReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLicenseOrClaimUpdateReasonString parses a string value to LicenseOrClaimUpdateReason enum (case-insensitive)
func ParseLicenseOrClaimUpdateReasonString(s string) (LicenseOrClaimUpdateReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LicenseOrClaimUpdateReason(0), false
	}
}

// XMLString returns the XML string representation of LicenseRejectionReason
func (e LicenseRejectionReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLicenseRejectionReasonString parses a string value to LicenseRejectionReason enum (case-insensitive)
func ParseLicenseRejectionReasonString(s string) (LicenseRejectionReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LicenseRejectionReason(0), false
	}
}

// XMLString returns the XML string representation of LicenseStatus
func (e LicenseStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLicenseStatusString parses a string value to LicenseStatus enum (case-insensitive)
func ParseLicenseStatusString(s string) (LicenseStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LicenseStatus(0), false
	}
}

// XMLString returns the XML string representation of LicensingProcessStatus
func (e LicensingProcessStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLicensingProcessStatusString parses a string value to LicensingProcessStatus enum (case-insensitive)
func ParseLicensingProcessStatusString(s string) (LicensingProcessStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LicensingProcessStatus(0), false
	}
}

// XMLString returns the XML string representation of LodFileStatus
func (e LodFileStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLodFileStatusString parses a string value to LodFileStatus enum (case-insensitive)
func ParseLodFileStatusString(s string) (LodFileStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LodFileStatus(0), false
	}
}

// XMLString returns the XML string representation of LodProposedActionType
func (e LodProposedActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLodProposedActionTypeString parses a string value to LodProposedActionType enum (case-insensitive)
func ParseLodProposedActionTypeString(s string) (LodProposedActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LodProposedActionType(0), false
	}
}

// XMLString returns the XML string representation of MembershipType
func (e MembershipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMembershipTypeString parses a string value to MembershipType enum (case-insensitive)
func ParseMembershipTypeString(s string) (MembershipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MembershipType(0), false
	}
}

// XMLString returns the XML string representation of MessageActionType
func (e MessageActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMessageActionTypeString parses a string value to MessageActionType enum (case-insensitive)
func ParseMessageActionTypeString(s string) (MessageActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MessageActionType(0), false
	}
}

// XMLString returns the XML string representation of MessageContentRevenueType
func (e MessageContentRevenueType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMessageContentRevenueTypeString parses a string value to MessageContentRevenueType enum (case-insensitive)
func ParseMessageContentRevenueTypeString(s string) (MessageContentRevenueType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MessageContentRevenueType(0), false
	}
}

// XMLString returns the XML string representation of MessageContextType
func (e MessageContextType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMessageContextTypeString parses a string value to MessageContextType enum (case-insensitive)
func ParseMessageContextTypeString(s string) (MessageContextType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MessageContextType(0), false
	}
}

// XMLString returns the XML string representation of MessageControlType
func (e MessageControlType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMessageControlTypeString parses a string value to MessageControlType enum (case-insensitive)
func ParseMessageControlTypeString(s string) (MessageControlType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MessageControlType(0), false
	}
}

// XMLString returns the XML string representation of MidiType
func (e MidiType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMidiTypeString parses a string value to MidiType enum (case-insensitive)
func ParseMidiTypeString(s string) (MidiType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MidiType(0), false
	}
}

// XMLString returns the XML string representation of MlcMessageType
func (e MlcMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMlcMessageTypeString parses a string value to MlcMessageType enum (case-insensitive)
func ParseMlcMessageTypeString(s string) (MlcMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MlcMessageType(0), false
	}
}

// XMLString returns the XML string representation of MusicalWorkContributorRole
func (e MusicalWorkContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMusicalWorkContributorRoleString parses a string value to MusicalWorkContributorRole enum (case-insensitive)
func ParseMusicalWorkContributorRoleString(s string) (MusicalWorkContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MusicalWorkContributorRole(0), false
	}
}

// XMLString returns the XML string representation of MusicalWorkRightsClaimType
func (e MusicalWorkRightsClaimType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMusicalWorkRightsClaimTypeString parses a string value to MusicalWorkRightsClaimType enum (case-insensitive)
func ParseMusicalWorkRightsClaimTypeString(s string) (MusicalWorkRightsClaimType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MusicalWorkRightsClaimType(0), false
	}
}

// XMLString returns the XML string representation of MusicalWorkType
func (e MusicalWorkType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMusicalWorkTypeString parses a string value to MusicalWorkType enum (case-insensitive)
func ParseMusicalWorkTypeString(s string) (MusicalWorkType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MusicalWorkType(0), false
	}
}

// XMLString returns the XML string representation of MwlCaCMessageInBatchType
func (e MwlCaCMessageInBatchType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMwlCaCMessageInBatchTypeString parses a string value to MwlCaCMessageInBatchType enum (case-insensitive)
func ParseMwlCaCMessageInBatchTypeString(s string) (MwlCaCMessageInBatchType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MwlCaCMessageInBatchType(0), false
	}
}

// XMLString returns the XML string representation of MwnMessageType
func (e MwnMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMwnMessageTypeString parses a string value to MwnMessageType enum (case-insensitive)
func ParseMwnMessageTypeString(s string) (MwnMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MwnMessageType(0), false
	}
}

// XMLString returns the XML string representation of NewReleaseMessageStatus
func (e NewReleaseMessageStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseNewReleaseMessageStatusString parses a string value to NewReleaseMessageStatus enum (case-insensitive)
func ParseNewReleaseMessageStatusString(s string) (NewReleaseMessageStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return NewReleaseMessageStatus(0), false
	}
}

// XMLString returns the XML string representation of OperatingSystemType
func (e OperatingSystemType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseOperatingSystemTypeString parses a string value to OperatingSystemType enum (case-insensitive)
func ParseOperatingSystemTypeString(s string) (OperatingSystemType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return OperatingSystemType(0), false
	}
}

// XMLString returns the XML string representation of OrderType
func (e OrderType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseOrderTypeString parses a string value to OrderType enum (case-insensitive)
func ParseOrderTypeString(s string) (OrderType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return OrderType(0), false
	}
}

// XMLString returns the XML string representation of PLineType
func (e PLineType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePLineTypeString parses a string value to PLineType enum (case-insensitive)
func ParsePLineTypeString(s string) (PLineType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PLineType(0), false
	}
}

// XMLString returns the XML string representation of ParentalWarningType
func (e ParentalWarningType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseParentalWarningTypeString parses a string value to ParentalWarningType enum (case-insensitive)
func ParseParentalWarningTypeString(s string) (ParentalWarningType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ParentalWarningType(0), false
	}
}

// XMLString returns the XML string representation of PercentageType
func (e PercentageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePercentageTypeString parses a string value to PercentageType enum (case-insensitive)
func ParsePercentageTypeString(s string) (PercentageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PercentageType(0), false
	}
}

// XMLString returns the XML string representation of PriceInformationType
func (e PriceInformationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePriceInformationTypeString parses a string value to PriceInformationType enum (case-insensitive)
func ParsePriceInformationTypeString(s string) (PriceInformationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PriceInformationType(0), false
	}
}

// XMLString returns the XML string representation of Priority
func (e Priority) XMLString() string {
	switch e {
	case Priority_PRIORITY_HIGH:
		return "HIGH"
	case Priority_PRIORITY_LOW:
		return "LOW"
	case Priority_PRIORITY_NORMAL:
		return "NORMAL"
	default:
		return ""
	}
}

// ParsePriorityString parses a string value to Priority enum (case-insensitive)
func ParsePriorityString(s string) (Priority, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "HIGH":
		return Priority_PRIORITY_HIGH, true
	case "LOW":
		return Priority_PRIORITY_LOW, true
	case "NORMAL":
		return Priority_PRIORITY_NORMAL, true
	default:
		return Priority(0), false
	}
}

// XMLString returns the XML string representation of ProductType
func (e ProductType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseProductTypeString parses a string value to ProductType enum (case-insensitive)
func ParseProductTypeString(s string) (ProductType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ProductType(0), false
	}
}

// XMLString returns the XML string representation of Purpose
func (e Purpose) XMLString() string {
	switch e {
	case Purpose_PURPOSE_BACKGROUNDMUSIC:
		return "BACKGROUNDMUSIC"
	case Purpose_PURPOSE_CHANNELTRAILERMUSIC:
		return "CHANNELTRAILERMUSIC"
	case Purpose_PURPOSE_EXTRACT:
		return "EXTRACT"
	case Purpose_PURPOSE_FILMTRAILERMUSIC:
		return "FILMTRAILERMUSIC"
	case Purpose_PURPOSE_FOREGROUNDMUSIC:
		return "FOREGROUNDMUSIC"
	case Purpose_PURPOSE_TRAILERMUSIC:
		return "TRAILERMUSIC"
	case Purpose_PURPOSE_USERDEFINED:
		return "USERDEFINED"
	default:
		return ""
	}
}

// ParsePurposeString parses a string value to Purpose enum (case-insensitive)
func ParsePurposeString(s string) (Purpose, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "BACKGROUNDMUSIC":
		return Purpose_PURPOSE_BACKGROUNDMUSIC, true
	case "CHANNELTRAILERMUSIC":
		return Purpose_PURPOSE_CHANNELTRAILERMUSIC, true
	case "EXTRACT":
		return Purpose_PURPOSE_EXTRACT, true
	case "FILMTRAILERMUSIC":
		return Purpose_PURPOSE_FILMTRAILERMUSIC, true
	case "FOREGROUNDMUSIC":
		return Purpose_PURPOSE_FOREGROUNDMUSIC, true
	case "TRAILERMUSIC":
		return Purpose_PURPOSE_TRAILERMUSIC, true
	case "USERDEFINED":
		return Purpose_PURPOSE_USERDEFINED, true
	default:
		return Purpose(0), false
	}
}

// XMLString returns the XML string representation of RateModificationType
func (e RateModificationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRateModificationTypeString parses a string value to RateModificationType enum (case-insensitive)
func ParseRateModificationTypeString(s string) (RateModificationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RateModificationType(0), false
	}
}

// XMLString returns the XML string representation of RatingAgency
func (e RatingAgency) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRatingAgencyString parses a string value to RatingAgency enum (case-insensitive)
func ParseRatingAgencyString(s string) (RatingAgency, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RatingAgency(0), false
	}
}

// XMLString returns the XML string representation of ReasonType
func (e ReasonType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReasonTypeString parses a string value to ReasonType enum (case-insensitive)
func ParseReasonTypeString(s string) (ReasonType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReasonType(0), false
	}
}

// XMLString returns the XML string representation of RecipientRevenueType
func (e RecipientRevenueType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRecipientRevenueTypeString parses a string value to RecipientRevenueType enum (case-insensitive)
func ParseRecipientRevenueTypeString(s string) (RecipientRevenueType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RecipientRevenueType(0), false
	}
}

// XMLString returns the XML string representation of RecordingMode
func (e RecordingMode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRecordingModeString parses a string value to RecordingMode enum (case-insensitive)
func ParseRecordingModeString(s string) (RecordingMode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RecordingMode(0), false
	}
}

// XMLString returns the XML string representation of RedeliveryReasonType
func (e RedeliveryReasonType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRedeliveryReasonTypeString parses a string value to RedeliveryReasonType enum (case-insensitive)
func ParseRedeliveryReasonTypeString(s string) (RedeliveryReasonType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RedeliveryReasonType(0), false
	}
}

// XMLString returns the XML string representation of ReferenceUnit
func (e ReferenceUnit) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReferenceUnitString parses a string value to ReferenceUnit enum (case-insensitive)
func ParseReferenceUnitString(s string) (ReferenceUnit, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReferenceUnit(0), false
	}
}

// XMLString returns the XML string representation of RelationalRelator
func (e RelationalRelator) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRelationalRelatorString parses a string value to RelationalRelator enum (case-insensitive)
func ParseRelationalRelatorString(s string) (RelationalRelator, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RelationalRelator(0), false
	}
}

// XMLString returns the XML string representation of ReleaseAvailabilityStatus
func (e ReleaseAvailabilityStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseAvailabilityStatusString parses a string value to ReleaseAvailabilityStatus enum (case-insensitive)
func ParseReleaseAvailabilityStatusString(s string) (ReleaseAvailabilityStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseAvailabilityStatus(0), false
	}
}

// XMLString returns the XML string representation of ReleaseRelationshipType
func (e ReleaseRelationshipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseRelationshipTypeString parses a string value to ReleaseRelationshipType enum (case-insensitive)
func ParseReleaseRelationshipTypeString(s string) (ReleaseRelationshipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseRelationshipType(0), false
	}
}

// XMLString returns the XML string representation of ReleaseResourceType
func (e ReleaseResourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseResourceTypeString parses a string value to ReleaseResourceType enum (case-insensitive)
func ParseReleaseResourceTypeString(s string) (ReleaseResourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseResourceType(0), false
	}
}

// XMLString returns the XML string representation of ReleaseType
func (e ReleaseType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseTypeString parses a string value to ReleaseType enum (case-insensitive)
func ParseReleaseTypeString(s string) (ReleaseType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseType(0), false
	}
}

// XMLString returns the XML string representation of ReportFormat
func (e ReportFormat) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReportFormatString parses a string value to ReportFormat enum (case-insensitive)
func ParseReportFormatString(s string) (ReportFormat, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReportFormat(0), false
	}
}

// XMLString returns the XML string representation of ReportType
func (e ReportType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReportTypeString parses a string value to ReportType enum (case-insensitive)
func ParseReportTypeString(s string) (ReportType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReportType(0), false
	}
}

// XMLString returns the XML string representation of RequestReason
func (e RequestReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRequestReasonString parses a string value to RequestReason enum (case-insensitive)
func ParseRequestReasonString(s string) (RequestReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RequestReason(0), false
	}
}

// XMLString returns the XML string representation of RequestedActionType
func (e RequestedActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRequestedActionTypeString parses a string value to RequestedActionType enum (case-insensitive)
func ParseRequestedActionTypeString(s string) (RequestedActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RequestedActionType(0), false
	}
}

// XMLString returns the XML string representation of ResourceContributorRole
func (e ResourceContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceContributorRoleString parses a string value to ResourceContributorRole enum (case-insensitive)
func ParseResourceContributorRoleString(s string) (ResourceContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceContributorRole(0), false
	}
}

// XMLString returns the XML string representation of ResourceOmissionReason
func (e ResourceOmissionReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceOmissionReasonString parses a string value to ResourceOmissionReason enum (case-insensitive)
func ParseResourceOmissionReasonString(s string) (ResourceOmissionReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceOmissionReason(0), false
	}
}

// XMLString returns the XML string representation of ResourceType
func (e ResourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceTypeString parses a string value to ResourceType enum (case-insensitive)
func ParseResourceTypeString(s string) (ResourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceType(0), false
	}
}

// XMLString returns the XML string representation of RevenueSourceType
func (e RevenueSourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRevenueSourceTypeString parses a string value to RevenueSourceType enum (case-insensitive)
func ParseRevenueSourceTypeString(s string) (RevenueSourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RevenueSourceType(0), false
	}
}

// XMLString returns the XML string representation of RightShareType
func (e RightShareType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightShareTypeString parses a string value to RightShareType enum (case-insensitive)
func ParseRightShareTypeString(s string) (RightShareType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightShareType(0), false
	}
}

// XMLString returns the XML string representation of RightsClaimPolicyType
func (e RightsClaimPolicyType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsClaimPolicyTypeString parses a string value to RightsClaimPolicyType enum (case-insensitive)
func ParseRightsClaimPolicyTypeString(s string) (RightsClaimPolicyType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsClaimPolicyType(0), false
	}
}

// XMLString returns the XML string representation of RightsControllerRole
func (e RightsControllerRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsControllerRoleString parses a string value to RightsControllerRole enum (case-insensitive)
func ParseRightsControllerRoleString(s string) (RightsControllerRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsControllerRole(0), false
	}
}

// XMLString returns the XML string representation of RightsControllerType
func (e RightsControllerType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsControllerTypeString parses a string value to RightsControllerType enum (case-insensitive)
func ParseRightsControllerTypeString(s string) (RightsControllerType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsControllerType(0), false
	}
}

// XMLString returns the XML string representation of RightsCoverage
func (e RightsCoverage) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsCoverageString parses a string value to RightsCoverage enum (case-insensitive)
func ParseRightsCoverageString(s string) (RightsCoverage, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsCoverage(0), false
	}
}

// XMLString returns the XML string representation of RoyaltyRateCalculationType
func (e RoyaltyRateCalculationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRoyaltyRateCalculationTypeString parses a string value to RoyaltyRateCalculationType enum (case-insensitive)
func ParseRoyaltyRateCalculationTypeString(s string) (RoyaltyRateCalculationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RoyaltyRateCalculationType(0), false
	}
}

// XMLString returns the XML string representation of RoyaltyRateType
func (e RoyaltyRateType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRoyaltyRateTypeString parses a string value to RoyaltyRateType enum (case-insensitive)
func ParseRoyaltyRateTypeString(s string) (RoyaltyRateType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RoyaltyRateType(0), false
	}
}

// XMLString returns the XML string representation of SalesReportAvailabilityStatus
func (e SalesReportAvailabilityStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSalesReportAvailabilityStatusString parses a string value to SalesReportAvailabilityStatus enum (case-insensitive)
func ParseSalesReportAvailabilityStatusString(s string) (SalesReportAvailabilityStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SalesReportAvailabilityStatus(0), false
	}
}

// XMLString returns the XML string representation of Sex
func (e Sex) XMLString() string {
	switch e {
	case Sex_SEX_FEMALE:
		return "FEMALE"
	case Sex_SEX_MALE:
		return "MALE"
	case Sex_SEX_UNKNOWN:
		return "UNKNOWN"
	default:
		return ""
	}
}

// ParseSexString parses a string value to Sex enum (case-insensitive)
func ParseSexString(s string) (Sex, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "FEMALE":
		return Sex_SEX_FEMALE, true
	case "MALE":
		return Sex_SEX_MALE, true
	case "UNKNOWN":
		return Sex_SEX_UNKNOWN, true
	default:
		return Sex(0), false
	}
}

// XMLString returns the XML string representation of SoftwareType
func (e SoftwareType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSoftwareTypeString parses a string value to SoftwareType enum (case-insensitive)
func ParseSoftwareTypeString(s string) (SoftwareType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SoftwareType(0), false
	}
}

// XMLString returns the XML string representation of SoundProcessorType
func (e SoundProcessorType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSoundProcessorTypeString parses a string value to SoundProcessorType enum (case-insensitive)
func ParseSoundProcessorTypeString(s string) (SoundProcessorType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SoundProcessorType(0), false
	}
}

// XMLString returns the XML string representation of SoundRecordingType
func (e SoundRecordingType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSoundRecordingTypeString parses a string value to SoundRecordingType enum (case-insensitive)
func ParseSoundRecordingTypeString(s string) (SoundRecordingType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SoundRecordingType(0), false
	}
}

// XMLString returns the XML string representation of SupplyChainStatus
func (e SupplyChainStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSupplyChainStatusString parses a string value to SupplyChainStatus enum (case-insensitive)
func ParseSupplyChainStatusString(s string) (SupplyChainStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SupplyChainStatus(0), false
	}
}

// XMLString returns the XML string representation of TaxScope
func (e TaxScope) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTaxScopeString parses a string value to TaxScope enum (case-insensitive)
func ParseTaxScopeString(s string) (TaxScope, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TaxScope(0), false
	}
}

// XMLString returns the XML string representation of TaxType
func (e TaxType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTaxTypeString parses a string value to TaxType enum (case-insensitive)
func ParseTaxTypeString(s string) (TaxType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TaxType(0), false
	}
}

// XMLString returns the XML string representation of TerritoryCodeType
func (e TerritoryCodeType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTerritoryCodeTypeString parses a string value to TerritoryCodeType enum (case-insensitive)
func ParseTerritoryCodeTypeString(s string) (TerritoryCodeType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TerritoryCodeType(0), false
	}
}

// XMLString returns the XML string representation of TerritoryCodeTypeIncludingDeprecatedCodes
func (e TerritoryCodeTypeIncludingDeprecatedCodes) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTerritoryCodeTypeIncludingDeprecatedCodesString parses a string value to TerritoryCodeTypeIncludingDeprecatedCodes enum (case-insensitive)
func ParseTerritoryCodeTypeIncludingDeprecatedCodesString(s string) (TerritoryCodeTypeIncludingDeprecatedCodes, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TerritoryCodeTypeIncludingDeprecatedCodes(0), false
	}
}

// XMLString returns the XML string representation of TextCodecType
func (e TextCodecType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTextCodecTypeString parses a string value to TextCodecType enum (case-insensitive)
func ParseTextCodecTypeString(s string) (TextCodecType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TextCodecType(0), false
	}
}

// XMLString returns the XML string representation of TextType
func (e TextType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTextTypeString parses a string value to TextType enum (case-insensitive)
func ParseTextTypeString(s string) (TextType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TextType(0), false
	}
}

// XMLString returns the XML string representation of ThemeType
func (e ThemeType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseThemeTypeString parses a string value to ThemeType enum (case-insensitive)
func ParseThemeTypeString(s string) (ThemeType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ThemeType(0), false
	}
}

// XMLString returns the XML string representation of TisTerritoryCode
func (e TisTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTisTerritoryCodeString parses a string value to TisTerritoryCode enum (case-insensitive)
func ParseTisTerritoryCodeString(s string) (TisTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TisTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of TitleType
func (e TitleType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTitleTypeString parses a string value to TitleType enum (case-insensitive)
func ParseTitleTypeString(s string) (TitleType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TitleType(0), false
	}
}

// XMLString returns the XML string representation of UnitOfBitRate
func (e UnitOfBitRate) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfBitRateString parses a string value to UnitOfBitRate enum (case-insensitive)
func ParseUnitOfBitRateString(s string) (UnitOfBitRate, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfBitRate(0), false
	}
}

// XMLString returns the XML string representation of UnitOfConditionValue
func (e UnitOfConditionValue) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfConditionValueString parses a string value to UnitOfConditionValue enum (case-insensitive)
func ParseUnitOfConditionValueString(s string) (UnitOfConditionValue, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfConditionValue(0), false
	}
}

// XMLString returns the XML string representation of UnitOfExtent
func (e UnitOfExtent) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfExtentString parses a string value to UnitOfExtent enum (case-insensitive)
func ParseUnitOfExtentString(s string) (UnitOfExtent, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfExtent(0), false
	}
}

// XMLString returns the XML string representation of UnitOfFrameRate
func (e UnitOfFrameRate) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfFrameRateString parses a string value to UnitOfFrameRate enum (case-insensitive)
func ParseUnitOfFrameRateString(s string) (UnitOfFrameRate, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfFrameRate(0), false
	}
}

// XMLString returns the XML string representation of UnitOfFrequency
func (e UnitOfFrequency) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfFrequencyString parses a string value to UnitOfFrequency enum (case-insensitive)
func ParseUnitOfFrequencyString(s string) (UnitOfFrequency, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfFrequency(0), false
	}
}

// XMLString returns the XML string representation of UpdateIndicator
func (e UpdateIndicator) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUpdateIndicatorString parses a string value to UpdateIndicator enum (case-insensitive)
func ParseUpdateIndicatorString(s string) (UpdateIndicator, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UpdateIndicator(0), false
	}
}

// XMLString returns the XML string representation of UseType
func (e UseType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUseTypeString parses a string value to UseType enum (case-insensitive)
func ParseUseTypeString(s string) (UseType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UseType(0), false
	}
}

// XMLString returns the XML string representation of UserInterfaceType
func (e UserInterfaceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUserInterfaceTypeString parses a string value to UserInterfaceType enum (case-insensitive)
func ParseUserInterfaceTypeString(s string) (UserInterfaceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UserInterfaceType(0), false
	}
}

// XMLString returns the XML string representation of ValueType
func (e ValueType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseValueTypeString parses a string value to ValueType enum (case-insensitive)
func ParseValueTypeString(s string) (ValueType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ValueType(0), false
	}
}

// XMLString returns the XML string representation of VideoCodecType
func (e VideoCodecType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoCodecTypeString parses a string value to VideoCodecType enum (case-insensitive)
func ParseVideoCodecTypeString(s string) (VideoCodecType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoCodecType(0), false
	}
}

// XMLString returns the XML string representation of VideoContentType
func (e VideoContentType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoContentTypeString parses a string value to VideoContentType enum (case-insensitive)
func ParseVideoContentTypeString(s string) (VideoContentType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoContentType(0), false
	}
}

// XMLString returns the XML string representation of VideoDefinitionType
func (e VideoDefinitionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoDefinitionTypeString parses a string value to VideoDefinitionType enum (case-insensitive)
func ParseVideoDefinitionTypeString(s string) (VideoDefinitionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoDefinitionType(0), false
	}
}

// XMLString returns the XML string representation of VideoType
func (e VideoType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoTypeString parses a string value to VideoType enum (case-insensitive)
func ParseVideoTypeString(s string) (VideoType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoType(0), false
	}
}

// XMLString returns the XML string representation of VisualPerceptionType
func (e VisualPerceptionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVisualPerceptionTypeString parses a string value to VisualPerceptionType enum (case-insensitive)
func ParseVisualPerceptionTypeString(s string) (VisualPerceptionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VisualPerceptionType(0), false
	}
}

// XMLString returns the XML string representation of VocalType
func (e VocalType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVocalTypeString parses a string value to VocalType enum (case-insensitive)
func ParseVocalTypeString(s string) (VocalType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VocalType(0), false
	}
}

// XMLString returns the XML string representation of WsMessageStatus
func (e WsMessageStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseWsMessageStatusString parses a string value to WsMessageStatus enum (case-insensitive)
func ParseWsMessageStatusString(s string) (WsMessageStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return WsMessageStatus(0), false
	}
}

// XMLString returns the XML string representation of TerritoryCode
func (e TerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTerritoryCodeString parses a string value to TerritoryCode enum (case-insensitive)
func ParseTerritoryCodeString(s string) (TerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of ReferenceCreation
func (e ReferenceCreation) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReferenceCreationString parses a string value to ReferenceCreation enum (case-insensitive)
func ParseReferenceCreationString(s string) (ReferenceCreation, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReferenceCreation(0), false
	}
}
