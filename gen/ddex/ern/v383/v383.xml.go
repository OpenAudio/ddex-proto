// Code generated by generate-go-extensions. DO NOT EDIT.

package v383

import "encoding/xml"

// Package-level namespace constants
const (
	Namespace       = "http://ddex.net/xml/ern/383"
	NamespacePrefix = "ern"
	SchemaLocation  = "http://ddex.net/xml/ern/383 http://ddex.net/xml/ern/383/release-notification.xsd"
	NamespaceXSI    = "http://www.w3.org/2001/XMLSchema-instance"
	NamespaceAVS    = "http://ddex.net/xml/avs/avs"
)

// MarshalXML implements xml.Marshaler for NewReleaseMessage
func (m *NewReleaseMessage) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	// Set default namespace values if empty
	if m.XmlnsErn == "" {
		m.XmlnsErn = Namespace
	}
	if m.XmlnsXsi == "" {
		m.XmlnsXsi = NamespaceXSI
	}
	if m.XsiSchemaLocation == "" {
		m.XsiSchemaLocation = SchemaLocation
	}
	if m.XmlnsAvs == "" {
		m.XmlnsAvs = NamespaceAVS
	}

	// Set the namespace on the start element
	start.Name.Space = Namespace

	// Create an alias type to avoid infinite recursion
	type alias NewReleaseMessage
	return e.EncodeElement((*alias)(m), start)
}

// UnmarshalXML implements xml.Unmarshaler for NewReleaseMessage
func (m *NewReleaseMessage) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	// Create an alias type to avoid infinite recursion
	type alias NewReleaseMessage
	return d.DecodeElement((*alias)(m), &start)
}

// MarshalXML implements xml.Marshaler for CatalogListMessage
func (m *CatalogListMessage) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	// Set default namespace values if empty
	if m.XmlnsErn == "" {
		m.XmlnsErn = Namespace
	}
	if m.XmlnsXsi == "" {
		m.XmlnsXsi = NamespaceXSI
	}
	if m.XsiSchemaLocation == "" {
		m.XsiSchemaLocation = SchemaLocation
	}
	if m.XmlnsAvs == "" {
		m.XmlnsAvs = NamespaceAVS
	}

	// Set the namespace on the start element
	start.Name.Space = Namespace

	// Create an alias type to avoid infinite recursion
	type alias CatalogListMessage
	return e.EncodeElement((*alias)(m), start)
}

// UnmarshalXML implements xml.Unmarshaler for CatalogListMessage
func (m *CatalogListMessage) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	// Create an alias type to avoid infinite recursion
	type alias CatalogListMessage
	return d.DecodeElement((*alias)(m), &start)
}

// MarshalXML implements xml.Marshaler for PurgeReleaseMessage
func (m *PurgeReleaseMessage) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	// Set default namespace values if empty
	if m.XmlnsErn == "" {
		m.XmlnsErn = Namespace
	}
	if m.XmlnsXsi == "" {
		m.XmlnsXsi = NamespaceXSI
	}
	if m.XsiSchemaLocation == "" {
		m.XsiSchemaLocation = SchemaLocation
	}
	if m.XmlnsAvs == "" {
		m.XmlnsAvs = NamespaceAVS
	}

	// Set the namespace on the start element
	start.Name.Space = Namespace

	// Create an alias type to avoid infinite recursion
	type alias PurgeReleaseMessage
	return e.EncodeElement((*alias)(m), start)
}

// UnmarshalXML implements xml.Unmarshaler for PurgeReleaseMessage
func (m *PurgeReleaseMessage) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	// Create an alias type to avoid infinite recursion
	type alias PurgeReleaseMessage
	return d.DecodeElement((*alias)(m), &start)
}
