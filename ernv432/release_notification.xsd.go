// Code generated by xgen. DO NOT EDIT.

package ernv432

// NewReleaseMessage is A Composite containing details of one or more XML documents communicated with the Message.
type NewReleaseMessage struct {
	ReleaseProfileVersionIdAttr        string                    `xml:"ReleaseProfileVersionId,attr,omitempty"`
	ReleaseProfileVariantVersionIdAttr string                    `xml:"ReleaseProfileVariantVersionId,attr,omitempty"`
	AvsVersionIdAttr                   string                    `xml:"AvsVersionId,attr"`
	LanguageAndScriptCodeAttr          string                    `xml:"LanguageAndScriptCode,attr"`
	MessageHeader                      *MessageHeader            `xml:"MessageHeader"`
	ReleaseAdmin                       []*ReleaseAdmin           `xml:"ReleaseAdmin,omitempty"`
	PartyList                          *PartyList                `xml:"PartyList"`
	CueSheetList                       *CueSheetList             `xml:"CueSheetList,omitempty"`
	ResourceList                       *ResourceList             `xml:"ResourceList"`
	ChapterList                        *ChapterList              `xml:"ChapterList,omitempty"`
	ReleaseList                        *ReleaseList              `xml:"ReleaseList"`
	DealList                           *DealList                 `xml:"DealList,omitempty"`
	SupplementalDocumentList           *SupplementalDocumentList `xml:"SupplementalDocumentList,omitempty"`
}

// PurgeReleaseMessage is A Composite containing details of a DDEX Release to be purged.
type PurgeReleaseMessage struct {
	AvsVersionIdAttr          string         `xml:"AvsVersionId,attr"`
	LanguageAndScriptCodeAttr string         `xml:"LanguageAndScriptCode,attr"`
	MessageHeader             *MessageHeader `xml:"MessageHeader"`
	PurgedRelease             *PurgedRelease `xml:"PurgedRelease"`
}

// AdministratingRecordCompany is A Composite containing details of an AdministratingRecordCompany.
type AdministratingRecordCompany struct {
	RecordCompanyPartyReference interface{}                      `xml:"RecordCompanyPartyReference"`
	Role                        *AdministratingRecordCompanyRole `xml:"Role"`
}

// AudioDeliveryFile is A Composite containing details of one or more audio delivery Files.
type AudioDeliveryFile struct {
	Type                 interface{}      `xml:"Type"`
	ContainerFormat      *ContainerFormat `xml:"ContainerFormat,omitempty"`
	AudioCodecType       *AudioCodecType  `xml:"AudioCodecType,omitempty"`
	BitRate              *BitRate         `xml:"BitRate,omitempty"`
	OriginalBitRate      *BitRate         `xml:"OriginalBitRate,omitempty"`
	NumberOfChannels     string           `xml:"NumberOfChannels,omitempty"`
	NumberOfAudioObjects int              `xml:"NumberOfAudioObjects,omitempty"`
	SamplingRate         *SamplingRate    `xml:"SamplingRate,omitempty"`
	OriginalSamplingRate *SamplingRate    `xml:"OriginalSamplingRate,omitempty"`
	BitsPerSample        int              `xml:"BitsPerSample,omitempty"`
	Duration             string           `xml:"Duration,omitempty"`
	BitDepth             int              `xml:"BitDepth,omitempty"`
	File                 *File            `xml:"File,omitempty"`
	Fingerprint          []*Fingerprint   `xml:"Fingerprint,omitempty"`
	IsProvidedInDelivery bool             `xml:"IsProvidedInDelivery,omitempty"`
}

// AvRating is A Composite containing details of a Reason for a rating being applied.
type AvRating struct {
	ApplicableTerritoryCodeAttr string        `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool          `xml:"IsDefault,attr,omitempty"`
	Rating                      string        `xml:"Rating"`
	Agency                      *RatingAgency `xml:"Agency"`
	Reason                      *RatingReason `xml:"Reason,omitempty"`
}

// Brand is A Composite containing details of a Brand.
type Brand struct {
	BrandReference interface{}               `xml:"BrandReference"`
	BrandId        []*ProprietaryId          `xml:"BrandId"`
	BrandName      []*PartyNameWithTerritory `xml:"BrandName"`
}

// Channel is A URL for the channel.
type Channel struct {
	ProprietaryId []*ProprietaryId `xml:"ProprietaryId,omitempty"`
	URL           []string         `xml:"URL,omitempty"`
}

// Chapter is A Composite containing details of a Chapter. Chapters referenced from Video Resources are of ChapterType VideoChapter. Chapters referenced from a Release composite are of ChapterType Series, Season or Episode.
type Chapter struct {
	LanguageAndScriptCodeAttr    string              `xml:"LanguageAndScriptCode,attr,omitempty"`
	ChapterReference             interface{}         `xml:"ChapterReference"`
	ChapterId                    []*ChapterId        `xml:"ChapterId,omitempty"`
	DisplayTitleText             []*DisplayTitleText `xml:"DisplayTitleText,omitempty"`
	DisplayTitle                 []*DisplayTitle     `xml:"DisplayTitle,omitempty"`
	FormalTitle                  []*DisplayTitle     `xml:"FormalTitle,omitempty"`
	GroupingTitle                []*DisplayTitle     `xml:"GroupingTitle,omitempty"`
	SequenceNumber               int                 `xml:"SequenceNumber,omitempty"`
	Contributor                  []*Contributor      `xml:"Contributor,omitempty"`
	Character                    []*Character        `xml:"Character,omitempty"`
	RepresentativeImageReference interface{}         `xml:"RepresentativeImageReference,omitempty"`
	StartTime                    string              `xml:"StartTime,omitempty"`
	Duration                     string              `xml:"Duration,omitempty"`
	EndTime                      string              `xml:"EndTime,omitempty"`
}

// ChapterList is A Composite containing details of a Chapter contained in a Resource.
type ChapterList struct {
	LanguageAndScriptCodeAttr string     `xml:"LanguageAndScriptCode,attr,omitempty"`
	Chapter                   []*Chapter `xml:"Chapter"`
}

// Character is A Composite containing details of a Character. A Character may be described through Name, Identifier and Roles.
type Character struct {
	SequenceNumberAttr      int          `xml:"SequenceNumber,attr,omitempty"`
	CharacterPartyReference interface{}  `xml:"CharacterPartyReference"`
	Performer               *Contributor `xml:"Performer,omitempty"`
}

// ClipDetails is A Type of clip.
type ClipDetails struct {
	ClipType          *ClipType   `xml:"ClipType"`
	TopLeftCorner     interface{} `xml:"TopLeftCorner,omitempty"`
	BottomRightCorner interface{} `xml:"BottomRightCorner,omitempty"`
	ExpressionType    string      `xml:"ExpressionType"`
}

// ClipRelease is A Composite containing details of a DDEX clip Release.
type ClipRelease struct {
	ReleaseReference         interface{}                       `xml:"ReleaseReference"`
	ReleaseId                *ReleaseId                        `xml:"ReleaseId"`
	DisplayTitleText         []*DisplayTitleText               `xml:"DisplayTitleText,omitempty"`
	DisplayTitle             []*DisplayTitle                   `xml:"DisplayTitle,omitempty"`
	FormalTitle              []*DisplayTitle                   `xml:"FormalTitle,omitempty"`
	GroupingTitle            []*DisplayTitle                   `xml:"GroupingTitle,omitempty"`
	ReleaseResourceReference interface{}                       `xml:"ReleaseResourceReference"`
	ReleaseLabelReference    []*ReleaseLabelReferenceWithParty `xml:"ReleaseLabelReference"`
	DisplayGenre             []*GenreWithTerritory             `xml:"DisplayGenre"`
	RelatedRelease           []*RelatedRelease                 `xml:"RelatedRelease,omitempty"`
}

// CommercialModelType is A Composite containing details of a CommercialModelType.
type CommercialModelType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ConditionForRightsClaimPolicy is A Composite containing details of a Service that is an exception to the Condition. For these exceptions, usage does not need to be reported for fingerprinting and web monitoring services.
type ConditionForRightsClaimPolicy struct {
	Value             float64             `xml:"Value"`
	Unit              string              `xml:"Unit"`
	ReferenceCreation string              `xml:"ReferenceCreation,omitempty"`
	RelationalRelator string              `xml:"RelationalRelator"`
	MeasurementType   string              `xml:"MeasurementType,omitempty"`
	Segment           []*Segment          `xml:"Segment,omitempty"`
	ServiceException  []*ServiceException `xml:"ServiceException,omitempty"`
}

// CoreArea is A Composite containing details of the core part of a Video.
type CoreArea struct {
	TopLeftCorner     interface{} `xml:"TopLeftCorner"`
	BottomRightCorner interface{} `xml:"BottomRightCorner"`
}

// Cue is The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S).
type Cue struct {
	CueUseType              *CueUseType              `xml:"CueUseType,omitempty"`
	CueThemeType            *CueThemeType            `xml:"CueThemeType,omitempty"`
	CueVocalType            *CueVocalType            `xml:"CueVocalType,omitempty"`
	CueVisualPerceptionType *CueVisualPerceptionType `xml:"CueVisualPerceptionType,omitempty"`
	CueOrigin               *CueOrigin               `xml:"CueOrigin,omitempty"`
	ResourceId              *ResourceId              `xml:"ResourceId"`
	WorkId                  *MusicalWorkId           `xml:"WorkId"`
	DisplayTitleText        []*DisplayTitleText      `xml:"DisplayTitleText,omitempty"`
	DisplayTitle            []*DisplayTitle          `xml:"DisplayTitle,omitempty"`
	FormalTitle             []*DisplayTitle          `xml:"FormalTitle,omitempty"`
	GroupingTitle           []*DisplayTitle          `xml:"GroupingTitle,omitempty"`
	Contributor             []*Contributor           `xml:"Contributor,omitempty"`
	IsDance                 bool                     `xml:"IsDance,omitempty"`
	HasMusicalContent       bool                     `xml:"HasMusicalContent,omitempty"`
	PLine                   []*PLine                 `xml:"PLine,omitempty"`
	CLine                   []*CLine                 `xml:"CLine,omitempty"`
	StartTime               string                   `xml:"StartTime,omitempty"`
	Duration                string                   `xml:"Duration,omitempty"`
	EndTime                 string                   `xml:"EndTime,omitempty"`
}

// CueSheet is A Composite containing details of a CueSheetId of the CueSheet.
type CueSheet struct {
	CueSheetId        []*ProprietaryId `xml:"CueSheetId,omitempty"`
	CueSheetReference interface{}      `xml:"CueSheetReference"`
	CueSheetType      *CueSheetType    `xml:"CueSheetType"`
	Cue               []*Cue           `xml:"Cue"`
}

// CueSheetList is A Composite containing details of a CueSheet contained in a Resource.
type CueSheetList struct {
	CueSheet []*CueSheet `xml:"CueSheet"`
}

// Deal is A Composite containing details of a WebPage for the DistributionChannel.
type Deal struct {
	DealReference                             []string                                   `xml:"DealReference,omitempty"`
	IsCommunicatedOutOfBand                   bool                                       `xml:"IsCommunicatedOutOfBand,omitempty"`
	DealTerms                                 *DealTerms                                 `xml:"DealTerms,omitempty"`
	DealTechnicalResourceDetailsReferenceList *DealTechnicalResourceDetailsReferenceList `xml:"DealTechnicalResourceDetailsReferenceList,omitempty"`
	DistributionChannelPage                   []*DistributionChannelPage                 `xml:"DistributionChannelPage,omitempty"`
}

// DealList is A Composite containing details of a set of Dates specifying when a TrackRelease can be shown to Consumers.
type DealList struct {
	ReleaseDeal            []*ReleaseDeal            `xml:"ReleaseDeal"`
	ReleaseVisibility      []*ReleaseVisibility      `xml:"ReleaseVisibility,omitempty"`
	TrackReleaseVisibility []*TrackReleaseVisibility `xml:"TrackReleaseVisibility,omitempty"`
}

// DealResourceReferenceList is A Composite containing details of one or more Resources relating to a Deal.
type DealResourceReferenceList struct {
	DealResourceReference []interface{} `xml:"DealResourceReference"`
}

// DealTechnicalResourceDetailsReferenceList is A Composite containing a list of DealTechnicalResourceDetailsReferences.
type DealTechnicalResourceDetailsReferenceList struct {
	DealTechnicalResourceDetailsReference []interface{} `xml:"DealTechnicalResourceDetailsReference"`
}

// DealTerms is A number of Products per carton. This is the smallest number of Products that can be ordered.
type DealTerms struct {
	TerritoryCode                    []*CurrentTerritoryCode          `xml:"TerritoryCode"`
	ExcludedTerritoryCode            []*CurrentTerritoryCode          `xml:"ExcludedTerritoryCode"`
	ValidityPeriod                   []*PeriodWithStartDate           `xml:"ValidityPeriod"`
	CommercialModelType              []*CommercialModelType           `xml:"CommercialModelType,omitempty"`
	UseType                          []*DiscoverableUseType           `xml:"UseType,omitempty"`
	UserInterfaceType                []*UserInterfaceType             `xml:"UserInterfaceType,omitempty"`
	CarrierType                      []*CarrierType                   `xml:"CarrierType,omitempty"`
	TechnicalInstantiation           *DealTermsTechnicalInstantiation `xml:"TechnicalInstantiation,omitempty"`
	NumberOfUsages                   int                              `xml:"NumberOfUsages,omitempty"`
	DistributionChannel              []*DSP                           `xml:"DistributionChannel"`
	ExcludedDistributionChannel      []*DSP                           `xml:"ExcludedDistributionChannel"`
	RightsClaimPolicy                []*RightsClaimPolicy             `xml:"RightsClaimPolicy,omitempty"`
	PriceInformation                 []*PriceInformation              `xml:"PriceInformation,omitempty"`
	IsPromotional                    bool                             `xml:"IsPromotional"`
	PromotionalCode                  *PromotionalCode                 `xml:"PromotionalCode"`
	IsPreOrderDeal                   bool                             `xml:"IsPreOrderDeal,omitempty"`
	InstantGratificationResourceList *DealResourceReferenceList       `xml:"InstantGratificationResourceList,omitempty"`
	PhysicalReturns                  *PhysicalReturns                 `xml:"PhysicalReturns,omitempty"`
	NumberOfProductsPerCarton        int                              `xml:"NumberOfProductsPerCarton,omitempty"`
}

// DealTermsTechnicalInstantiation is A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps).
type DealTermsTechnicalInstantiation struct {
	VideoDefinitionType *VideoDefinitionType `xml:"VideoDefinitionType,omitempty"`
	CodingType          string               `xml:"CodingType,omitempty"`
	BitRate             *BitRate             `xml:"BitRate,omitempty"`
}

// Deity is A Composite containing details of a Deity.
type Deity struct {
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// DelegatedUsageRights is A Territory for which the delegation of usage rights applies.
type DelegatedUsageRights struct {
	UseType                     []*UseType          `xml:"UseType"`
	PeriodOfRightsDelegation    *Period             `xml:"PeriodOfRightsDelegation,omitempty"`
	TerritoryOfRightsDelegation []*AllTerritoryCode `xml:"TerritoryOfRightsDelegation,omitempty"`
}

// DescriptionWithTerritory is Explanatory Note: This Composite is named DescriptionWithTerritory to disambiguate it from the basic Description Composite.
type DescriptionWithTerritory struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// DetailedResourceContributor is A Role for which the Party is credited.
type DetailedResourceContributor struct {
	SequenceNumberAttr            int                `xml:"SequenceNumber,attr,omitempty"`
	PartyId                       []*DetailedPartyId `xml:"PartyId"`
	PartyName                     []*PartyName       `xml:"PartyName"`
	Role                          []*ContributorRole `xml:"Role,omitempty"`
	InstrumentType                []*InstrumentType  `xml:"InstrumentType,omitempty"`
	HasMadeFeaturedContribution   bool               `xml:"HasMadeFeaturedContribution,omitempty"`
	HasMadeContractedContribution bool               `xml:"HasMadeContractedContribution,omitempty"`
	DisplayCredits                []*DisplayCredits  `xml:"DisplayCredits,omitempty"`
}

// DiscoverableUseType is A Composite containing details of a UseType.
type DiscoverableUseType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	IsDiscoverableAttr   bool   `xml:"IsDiscoverable,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// DisplayArtist is A Composite containing details of the Name, Identifier and Role(s) of a DisplayArtist of a Resource.
type DisplayArtist struct {
	SequenceNumberAttr      int                        `xml:"SequenceNumber,attr,omitempty"`
	ArtistPartyReference    interface{}                `xml:"ArtistPartyReference"`
	DisplayArtistRole       *DisplayArtistRole         `xml:"DisplayArtistRole"`
	SpecialDisplayArtist    *SpecialContributorType    `xml:"SpecialDisplayArtist"`
	ArtisticRole            []*ContributorRole         `xml:"ArtisticRole,omitempty"`
	TitleDisplayInformation []*TitleDisplayInformation `xml:"TitleDisplayInformation,omitempty"`
	DisplayCredits          []*DisplayCredits          `xml:"DisplayCredits,omitempty"`
}

// DisplayTitleText is A Composite containing details of a Title as the MessageSender suggests it should be shown to the Consumer.
type DisplayTitleText struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	IsInOriginalLanguageAttr    bool   `xml:"IsInOriginalLanguage,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// DistributionChannelPage is An Identifier of a computer user who is granted maintenance access to the WebPage.
type DistributionChannelPage struct {
	PartyId  []*DetailedPartyId `xml:"PartyId,omitempty"`
	PageName string             `xml:"PageName,omitempty"`
	URL      string             `xml:"URL,omitempty"`
	UserName string             `xml:"UserName,omitempty"`
}

// EditionContributor is A Composite containing details of the Name, Identifier and Role(s) of a Contributor to a SoundRecordingEdition.
type EditionContributor struct {
	SequenceNumberAttr            int                     `xml:"SequenceNumber,attr,omitempty"`
	ContributorPartyReference     interface{}             `xml:"ContributorPartyReference"`
	SpecialContributor            *SpecialContributorType `xml:"SpecialContributor"`
	Role                          []*ContributorRole      `xml:"Role,omitempty"`
	AiContribution                string                  `xml:"AiContribution,omitempty"`
	HasMadeFeaturedContribution   bool                    `xml:"HasMadeFeaturedContribution,omitempty"`
	HasMadeContractedContribution bool                    `xml:"HasMadeContractedContribution,omitempty"`
	IsCredited                    *IsCredited             `xml:"IsCredited,omitempty"`
	DisplayCredits                []*DisplayCredits       `xml:"DisplayCredits,omitempty"`
}

// EventDateTimeWithoutFlags is Explanatory Note: This Composite is named EventDateTimeWithoutFlags to disambiguate it from the basic EventDateTime Composite.
type EventDateTimeWithoutFlags struct {
	IsApproximateAttr           bool   `xml:"IsApproximate,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	LocationDescriptionAttr     string `xml:"LocationDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// EventDateWithCurrentTerritory is Explanatory Note: This Composite is named EventDateWithCurrentTerritory to disambiguate it from the basic EventDate Composite.
type EventDateWithCurrentTerritory struct {
	IsApproximateAttr           bool   `xml:"IsApproximate,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	LocationDescriptionAttr     string `xml:"LocationDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	*DdexIsoDate
}

// EventDateWithDefault is Explanatory Note: This Composite is named EventDateWithDefault to disambiguate it from the basic EventDate Composite.
type EventDateWithDefault struct {
	IsApproximateAttr           bool   `xml:"IsApproximate,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	*DdexIsoDate
}

// EventDateWithoutFlags is Explanatory Note: This Composite is named EventDateWithoutFlags to disambiguate it from the basic EventDate Composite.
type EventDateWithoutFlags struct {
	IsApproximateAttr           bool   `xml:"IsApproximate,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	LocationDescriptionAttr     string `xml:"LocationDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	*DdexIsoDate
}

// ExternalResourceLink is The FileFormat of the external Resource.
type ExternalResourceLink struct {
	URL                          []string                        `xml:"URL"`
	ValidityPeriod               *PeriodWithoutFlags             `xml:"ValidityPeriod,omitempty"`
	ExternalLink                 string                          `xml:"ExternalLink,omitempty"`
	ExternallyLinkedResourceType []*ExternallyLinkedResourceType `xml:"ExternallyLinkedResourceType,omitempty"`
	FileFormat                   string                          `xml:"FileFormat,omitempty"`
}

// HdrVideoDynamicMetadataType is A Composite containing details of HDR video dynamic metadata.
type HdrVideoDynamicMetadataType struct {
	VersionAttr                string `xml:"Version,attr,omitempty"`
	SdrDerivationPermittedAttr bool   `xml:"SdrDerivationPermitted,attr,omitempty"`
	Value                      string `xml:",chardata"`
}

// Image is A Composite containing details of an Image.
type Image struct {
	LanguageAndScriptCodeAttr string                                   `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsSupplementalAttr        bool                                     `xml:"IsSupplemental,attr,omitempty"`
	ResourceReference         interface{}                              `xml:"ResourceReference"`
	Type                      *ImageType                               `xml:"Type"`
	ResourceId                []*ResourceProprietaryId                 `xml:"ResourceId"`
	DisplayTitleText          []*DisplayTitleText                      `xml:"DisplayTitleText,omitempty"`
	DisplayTitle              []*DisplayTitle                          `xml:"DisplayTitle,omitempty"`
	FormalTitle               []*DisplayTitle                          `xml:"FormalTitle,omitempty"`
	GroupingTitle             []*DisplayTitle                          `xml:"GroupingTitle,omitempty"`
	VersionType               []*VersionType                           `xml:"VersionType,omitempty"`
	DisplayArtistName         []*DisplayArtistNameWithOriginalLanguage `xml:"DisplayArtistName,omitempty"`
	DisplayArtist             []*DisplayArtist                         `xml:"DisplayArtist,omitempty"`
	Contributor               []*Contributor                           `xml:"Contributor,omitempty"`
	ResourceRightsController  []*ResourceRightsController              `xml:"ResourceRightsController,omitempty"`
	WorkRightsController      []*WorkRightsController                  `xml:"WorkRightsController,omitempty"`
	CLine                     []*CLine                                 `xml:"CLine,omitempty"`
	CourtesyLine              []*CourtesyLine                          `xml:"CourtesyLine,omitempty"`
	CreationDate              *EventDateWithoutFlags                   `xml:"CreationDate,omitempty"`
	FirstPublicationDate      []*FulfillmentDate                       `xml:"FirstPublicationDate,omitempty"`
	ParentalWarningType       []*ParentalWarningTypeWithStandard       `xml:"ParentalWarningType,omitempty"`
	RelatedRelease            []*RelatedRelease                        `xml:"RelatedRelease,omitempty"`
	RelatedResource           []*RelatedResource                       `xml:"RelatedResource,omitempty"`
	ContainsAI                string                                   `xml:"ContainsAI,omitempty"`
	ContainsHiddenContent     bool                                     `xml:"ContainsHiddenContent,omitempty"`
	Description               []*DescriptionWithTerritory              `xml:"Description,omitempty"`
	TechnicalDetails          []*TechnicalImageDetails                 `xml:"TechnicalDetails,omitempty"`
}

// LinkedReleaseResourceReference is A Composite containing details of a LinkedReleaseResourceReference for a Resource which is linked to a ContentItem.
type LinkedReleaseResourceReference struct {
	LinkDescriptionAttr       string `xml:"LinkDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	NamespaceAttr             string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr      string `xml:"UserDefinedValue,attr,omitempty"`
	SequenceNumberAttr        int    `xml:"SequenceNumber,attr,omitempty"`
	IsMultiFileAttr           bool   `xml:"IsMultiFile,attr,omitempty"`
	*DdexLocalResourceAnchorReference
}

// LocationAndDateOfSession is A Composite containing details of a Contributor.
type LocationAndDateOfSession struct {
	SessionType []*SessionType   `xml:"SessionType,omitempty"`
	Period      *Period          `xml:"Period,omitempty"`
	Venue       []*Venue         `xml:"Venue,omitempty"`
	Comment     *TextWithFormat  `xml:"Comment,omitempty"`
	Contributor []*PartyWithRole `xml:"Contributor,omitempty"`
}

// Party is A Composite containing details of a Party.
type Party struct {
	PartyReference    interface{}               `xml:"PartyReference"`
	PartyId           []*DetailedPartyId        `xml:"PartyId"`
	PartyName         []*PartyNameWithTerritory `xml:"PartyName"`
	Affiliation       []*Affiliation            `xml:"Affiliation,omitempty"`
	RelatedParty      []*RelatedParty           `xml:"RelatedParty,omitempty"`
	ArtistProfilePage []string                  `xml:"ArtistProfilePage,omitempty"`
}

// PartyList is A Composite containing details of a Brand.
type PartyList struct {
	Party []*Party `xml:"Party"`
	Brand []*Brand `xml:"Brand,omitempty"`
}

// PartyNameWithTerritory is A Composite containing a short version of the PartyName (e.g. for use on devices with a small display).
type PartyNameWithTerritory struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsNicknameAttr              bool   `xml:"IsNickname,attr,omitempty"`
	IsStageNameAttr             bool   `xml:"IsStageName,attr,omitempty"`
	IsLegalNameAttr             bool   `xml:"IsLegalName,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	IsInOriginalLanguageAttr    bool   `xml:"IsInOriginalLanguage,attr,omitempty"`
	FullName                    string `xml:"FullName"`
	FullNameAsciiTranscribed    string `xml:"FullNameAsciiTranscribed,omitempty"`
	FullNameIndexed             string `xml:"FullNameIndexed,omitempty"`
	NamesBeforeKeyName          string `xml:"NamesBeforeKeyName,omitempty"`
	KeyName                     string `xml:"KeyName,omitempty"`
	NamesAfterKeyName           string `xml:"NamesAfterKeyName,omitempty"`
	AbbreviatedName             string `xml:"AbbreviatedName,omitempty"`
}

// PartyWithRole is An International Standard Name Identifier, the ISO 27729 Standard Identifier for names, of the Party for which information is provided. DDEX will enforce the syntax [0-9]{15}[X0-9] in the future.
type PartyWithRole struct {
	ISNI          string                   `xml:"ISNI,omitempty"`
	DPID          interface{}              `xml:"DPID,omitempty"`
	IpiNameNumber interface{}              `xml:"IpiNameNumber,omitempty"`
	IPN           string                   `xml:"IPN,omitempty"`
	ProprietaryId []*ProprietaryId         `xml:"ProprietaryId,omitempty"`
	PartyName     *PartyNameWithTerritory  `xml:"PartyName,omitempty"`
	Role          *ResourceContributorRole `xml:"Role,omitempty"`
}

// PeriodWithStartDate is A Composite containing details of the DateTime and Place of an Event that marks the end of the Period (in ISO 8601 format: YYYY-MM-DDThh:mm:ss). The EndDateTime must not be earlier than the StartDateTime if both are provided.
type PeriodWithStartDate struct {
	StartDate     *EventDateWithCurrentTerritory `xml:"StartDate"`
	EndDate       *EventDateWithCurrentTerritory `xml:"EndDate,omitempty"`
	StartDateTime *EventDateTimeWithoutFlags     `xml:"StartDateTime"`
	EndDateTime   *EventDateTimeWithoutFlags     `xml:"EndDateTime,omitempty"`
}

// PeriodWithoutFlags is A Composite containing details of the DateTime and Place of an Event that marks the end of the Period (in ISO 8601 format: YYYY-MM-DDThh:mm:ss). The EndDateTime must not be earlier than the StartDateTime if both are provided.
type PeriodWithoutFlags struct {
	StartDate     *EventDateWithCurrentTerritory `xml:"StartDate,omitempty"`
	EndDate       *EventDateWithCurrentTerritory `xml:"EndDate,omitempty"`
	StartDateTime *EventDateTimeWithoutFlags     `xml:"StartDateTime,omitempty"`
	EndDateTime   *EventDateTimeWithoutFlags     `xml:"EndDateTime,omitempty"`
}

// PhysicalReturns is A Date which is the latest one for physical returns (in ISO 8601 format: YYYY-MM-DD).
type PhysicalReturns struct {
	PhysicalReturnsAllowed       bool   `xml:"PhysicalReturnsAllowed"`
	LatestDateForPhysicalReturns string `xml:"LatestDateForPhysicalReturns,omitempty"`
}

// PriceInformation is A Composite containing details of a suggested retail Price.
type PriceInformation struct {
	PriceTypeAttr                  string     `xml:"PriceType,attr,omitempty"`
	NamespaceAttr                  string     `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr           string     `xml:"UserDefinedValue,attr,omitempty"`
	PriceCode                      *PriceType `xml:"PriceCode,omitempty"`
	WholesalePricePerUnit          *Price     `xml:"WholesalePricePerUnit,omitempty"`
	BulkOrderWholesalePricePerUnit *Price     `xml:"BulkOrderWholesalePricePerUnit,omitempty"`
	SuggestedRetailPrice           *Price     `xml:"SuggestedRetailPrice,omitempty"`
}

// PurgedRelease is Further Reading: https://kb.ddex.net/implementing-each-standard/best-practices-for-all-ddex-standards/guidance-on-contributors%2C-artists-and-writers/information-on-displayartists%2C-displayartistnames%2C-contributors-and-indirectcontributors
type PurgedRelease struct {
	ReleaseId   *ReleaseId                     `xml:"ReleaseId,omitempty"`
	Title       []*Title                       `xml:"Title,omitempty"`
	Contributor []*DetailedResourceContributor `xml:"Contributor,omitempty"`
}

// Raga is A Composite containing details of a Raga.
type Raga struct {
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// RecordingFormat is A Composite containing details of a Type of Resource based on its content, intended audience, format or technical characteristics.
type RecordingFormat struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// RelatedRelease is A Composite containing details of the Date and Place of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601 format: YYYY-MM-DD).
type RelatedRelease struct {
	ReleaseRelationshipType *ReleaseRelationshipType                 `xml:"ReleaseRelationshipType"`
	ReleaseId               *ReleaseId                               `xml:"ReleaseId"`
	DisplayTitleText        []*DisplayTitleText                      `xml:"DisplayTitleText,omitempty"`
	DisplayTitle            []*DisplayTitle                          `xml:"DisplayTitle,omitempty"`
	FormalTitle             []*DisplayTitle                          `xml:"FormalTitle,omitempty"`
	GroupingTitle           []*DisplayTitle                          `xml:"GroupingTitle,omitempty"`
	DisplayArtistName       []*DisplayArtistNameWithOriginalLanguage `xml:"DisplayArtistName,omitempty"`
	ReleaseLabelReference   []*ReleaseLabelReference                 `xml:"ReleaseLabelReference,omitempty"`
	ReleaseDate             *EventDateWithoutFlags                   `xml:"ReleaseDate,omitempty"`
	OriginalReleaseDate     *EventDateWithoutFlags                   `xml:"OriginalReleaseDate,omitempty"`
}

// RelatedResource is A Type of relationship between two Resources.
type RelatedResource struct {
	ResourceRelationshipType         string      `xml:"ResourceRelationshipType"`
	ResourceRelatedResourceReference interface{} `xml:"ResourceRelatedResourceReference"`
	ResourceId                       *ResourceId `xml:"ResourceId"`
	Timing                           []*Timing   `xml:"Timing,omitempty"`
}

// Release is A Composite containing details of a DDEX Release.
type Release struct {
	LanguageAndScriptCodeAttr   string                                   `xml:"LanguageAndScriptCode,attr,omitempty"`
	ReleaseReference            interface{}                              `xml:"ReleaseReference"`
	ReleaseType                 []*ReleaseTypeForReleaseNotification     `xml:"ReleaseType"`
	ReleaseId                   *ReleaseId                               `xml:"ReleaseId"`
	DisplayTitleText            []*DisplayTitleText                      `xml:"DisplayTitleText"`
	DisplayTitle                []*DisplayTitle                          `xml:"DisplayTitle"`
	FormalTitle                 []*DisplayTitle                          `xml:"FormalTitle,omitempty"`
	GroupingTitle               []*DisplayTitle                          `xml:"GroupingTitle,omitempty"`
	VersionType                 []*VersionType                           `xml:"VersionType,omitempty"`
	DisplayArtistName           []*DisplayArtistNameWithOriginalLanguage `xml:"DisplayArtistName"`
	DisplayArtist               []*DisplayArtist                         `xml:"DisplayArtist"`
	ReleaseLabelReference       []*ReleaseLabelReferenceWithParty        `xml:"ReleaseLabelReference"`
	AdministratingRecordCompany []*AdministratingRecordCompany           `xml:"AdministratingRecordCompany,omitempty"`
	PLine                       []*PLine                                 `xml:"PLine,omitempty"`
	CLine                       []*CLine                                 `xml:"CLine,omitempty"`
	CourtesyLine                []*CourtesyLine                          `xml:"CourtesyLine,omitempty"`
	Duration                    string                                   `xml:"Duration,omitempty"`
	DisplayGenre                []*GenreWithTerritory                    `xml:"DisplayGenre"`
	ReleaseDate                 []*EventDateWithDefault                  `xml:"ReleaseDate,omitempty"`
	OriginalReleaseDate         []*EventDateWithDefault                  `xml:"OriginalReleaseDate,omitempty"`
	ReleaseVisibilityReference  []interface{}                            `xml:"ReleaseVisibilityReference,omitempty"`
	ParentalWarningType         []*ParentalWarningTypeWithStandard       `xml:"ParentalWarningType,omitempty"`
	AvRating                    []*AvRating                              `xml:"AvRating,omitempty"`
	RelatedRelease              []*RelatedRelease                        `xml:"RelatedRelease,omitempty"`
	RelatedResource             []*RelatedResource                       `xml:"RelatedResource,omitempty"`
	IsSingleArtistCompilation   bool                                     `xml:"IsSingleArtistCompilation"`
	IsMultiArtistCompilation    bool                                     `xml:"IsMultiArtistCompilation"`
	ResourceGroup               *ResourceGroup                           `xml:"ResourceGroup"`
	ExternalResourceLink        []*ExternalResourceLink                  `xml:"ExternalResourceLink,omitempty"`
	TargetURL                   string                                   `xml:"TargetURL,omitempty"`
	Keywords                    []*KeywordsWithTerritory                 `xml:"Keywords,omitempty"`
	Synopsis                    []*SynopsisWithTerritory                 `xml:"Synopsis,omitempty"`
	Raga                        []*Raga                                  `xml:"Raga,omitempty"`
	Tala                        []*Tala                                  `xml:"Tala,omitempty"`
	Deity                       []*Deity                                 `xml:"Deity,omitempty"`
	HiResMusicDescription       string                                   `xml:"HiResMusicDescription,omitempty"`
	ContainsAI                  string                                   `xml:"ContainsAI,omitempty"`
	IsSoundtrack                bool                                     `xml:"IsSoundtrack,omitempty"`
	IsHiResMusic                bool                                     `xml:"IsHiResMusic,omitempty"`
	MarketingComment            []*MarketingComment                      `xml:"MarketingComment,omitempty"`
}

// ReleaseAdmin is A textual Description indicating which system a person in the group identified by the Release is allowed to access.
type ReleaseAdmin struct {
	ReleaseAdminId       string   `xml:"ReleaseAdminId"`
	PersonnelDescription string   `xml:"PersonnelDescription,omitempty"`
	SystemDescription    []string `xml:"SystemDescription,omitempty"`
}

// ReleaseDeal is A Composite containing details of one or more Deals pertaining to one or more Releases.
type ReleaseDeal struct {
	DealReleaseReference []interface{} `xml:"DealReleaseReference"`
	Deal                 []*Deal       `xml:"Deal"`
}

// ReleaseId is A Composite containing details of a ProprietaryIdentifier of the Release.
type ReleaseId struct {
	GRid          string           `xml:"GRid,omitempty"`
	ICPN          string           `xml:"ICPN,omitempty"`
	CatalogNumber *CatalogNumber   `xml:"CatalogNumber,omitempty"`
	ProprietaryId []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// ReleaseLabelReference is A Composite containing details of a Reference to a label of a specific Release.
type ReleaseLabelReference struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	LabelTypeAttr               string `xml:"LabelType,attr,omitempty"`
	NamespaceAttr               string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr        string `xml:"UserDefinedValue,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	*DdexLocalPartyAnchorReference
}

// ReleaseLabelReferenceWithParty is Explanatory Note: This Composite is named ReleaseLabelReferenceWithParty to disambiguate it from the basic ReleaseLabelReference Composite.
type ReleaseLabelReferenceWithParty struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	LabelTypeAttr               string `xml:"LabelType,attr,omitempty"`
	AccessControlPartyAttr      string `xml:"AccessControlParty,attr,omitempty"`
	NamespaceAttr               string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr        string `xml:"UserDefinedValue,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	*DdexLocalPartyAnchorReference
}

// ReleaseList is A Composite containing details of a DDEX clip Release.
type ReleaseList struct {
	Release      *Release        `xml:"Release,omitempty"`
	TrackRelease []*TrackRelease `xml:"TrackRelease,omitempty"`
	ClipRelease  []*ClipRelease  `xml:"ClipRelease,omitempty"`
}

// ReleaseVisibility is A Composite containing details of Dates specifying when a Release can be shown to Consumers.
type ReleaseVisibility struct {
	DoNotDisplayDatesAttr                bool                    `xml:"DoNotDisplayDates,attr,omitempty"`
	VisibilityReference                  interface{}             `xml:"VisibilityReference"`
	TerritoryCode                        []*CurrentTerritoryCode `xml:"TerritoryCode"`
	ExcludedTerritoryCode                []*CurrentTerritoryCode `xml:"ExcludedTerritoryCode"`
	ReleaseDisplayStartDateTime          string                  `xml:"ReleaseDisplayStartDateTime,omitempty"`
	CoverArtPreviewStartDateTime         string                  `xml:"CoverArtPreviewStartDateTime,omitempty"`
	FullTrackListingPreviewStartDateTime string                  `xml:"FullTrackListingPreviewStartDateTime,omitempty"`
	ClipPreviewStartDateTime             string                  `xml:"ClipPreviewStartDateTime,omitempty"`
}

// ResourceGroup is The Duration of the ResourceGroup, if it is a SoundRecording or Video (using the ISO 8601 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S).
type ResourceGroup struct {
	DisplayTitleText               []*DisplayTitleText               `xml:"DisplayTitleText,omitempty"`
	DisplayTitle                   []*DisplayTitle                   `xml:"DisplayTitle,omitempty"`
	FormalTitle                    []*DisplayTitle                   `xml:"FormalTitle,omitempty"`
	GroupingTitle                  []*DisplayTitle                   `xml:"GroupingTitle,omitempty"`
	SequenceNumber                 int                               `xml:"SequenceNumber,omitempty"`
	NoDisplaySequence              bool                              `xml:"NoDisplaySequence"`
	DisplaySequence                string                            `xml:"DisplaySequence"`
	DisplayArtist                  []*DisplayArtist                  `xml:"DisplayArtist,omitempty"`
	CarrierType                    []*CarrierType                    `xml:"CarrierType,omitempty"`
	Duration                       string                            `xml:"Duration,omitempty"`
	ResourceGroupReleaseReference  interface{}                       `xml:"ResourceGroupReleaseReference"`
	ReleaseId                      *ReleaseId                        `xml:"ReleaseId"`
	ResourceGroup                  []*ResourceSubGroup               `xml:"ResourceGroup,omitempty"`
	ResourceGroupContentItem       []*ResourceGroupContentItem       `xml:"ResourceGroupContentItem,omitempty"`
	LinkedReleaseResourceReference []*LinkedReleaseResourceReference `xml:"LinkedReleaseResourceReference,omitempty"`
}

// ResourceGroupContentItem is A sequence Identifier used for display purposes, consisting of a string that corresponds to the SequenceNumber, e.g. 'Side B' corresponding to '2'.
type ResourceGroupContentItem struct {
	SequenceNumber                 int                               `xml:"SequenceNumber,omitempty"`
	NoDisplaySequence              bool                              `xml:"NoDisplaySequence"`
	DisplaySequence                string                            `xml:"DisplaySequence"`
	ReleaseResourceReference       interface{}                       `xml:"ReleaseResourceReference"`
	LinkedReleaseResourceReference []*LinkedReleaseResourceReference `xml:"LinkedReleaseResourceReference,omitempty"`
	IsBonusResource                bool                              `xml:"IsBonusResource,omitempty"`
	IsInstantGratificationResource bool                              `xml:"IsInstantGratificationResource,omitempty"`
	IsPreOrderIncentiveResource    bool                              `xml:"IsPreOrderIncentiveResource,omitempty"`
}

// ResourceList is A Composite containing details of an item of Software.
type ResourceList struct {
	SoundRecording []*SoundRecording `xml:"SoundRecording,omitempty"`
	Video          []*Video          `xml:"Video,omitempty"`
	Image          []*Image          `xml:"Image,omitempty"`
	Text           []*Text           `xml:"Text,omitempty"`
	SheetMusic     []*SheetMusic     `xml:"SheetMusic,omitempty"`
	Software       []*Software       `xml:"Software,omitempty"`
}

// ResourceRightsController is A Composite containing details of a RightsController for a Resource. RightsControllers are typically described by Name, Identifier and Role(s).
type ResourceRightsController struct {
	SequenceNumberAttr             int                     `xml:"SequenceNumber,attr,omitempty"`
	RightsControllerPartyReference interface{}             `xml:"RightsControllerPartyReference"`
	RightsControlType              []string                `xml:"RightsControlType,omitempty"`
	RightShareUnknown              bool                    `xml:"RightShareUnknown"`
	RightSharePercentage           *Percentage             `xml:"RightSharePercentage"`
	DelegatedUsageRights           []*DelegatedUsageRights `xml:"DelegatedUsageRights,omitempty"`
}

// ResourceSubGroup is The Duration of the ResourceGroup, if it is a SoundRecording or Video (using the ISO 8601 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S).
type ResourceSubGroup struct {
	ResourceGroupTypeAttr          string                            `xml:"ResourceGroupType,attr"`
	DisplayTitleText               []*DisplayTitleText               `xml:"DisplayTitleText,omitempty"`
	DisplayTitle                   []*DisplayTitle                   `xml:"DisplayTitle,omitempty"`
	FormalTitle                    []*DisplayTitle                   `xml:"FormalTitle,omitempty"`
	GroupingTitle                  []*DisplayTitle                   `xml:"GroupingTitle,omitempty"`
	SequenceNumber                 int                               `xml:"SequenceNumber,omitempty"`
	NoDisplaySequence              bool                              `xml:"NoDisplaySequence"`
	DisplaySequence                string                            `xml:"DisplaySequence"`
	DisplayArtist                  []*DisplayArtist                  `xml:"DisplayArtist,omitempty"`
	CarrierType                    []*CarrierType                    `xml:"CarrierType,omitempty"`
	Duration                       string                            `xml:"Duration,omitempty"`
	ResourceGroupReleaseReference  interface{}                       `xml:"ResourceGroupReleaseReference"`
	ReleaseId                      *ReleaseId                        `xml:"ReleaseId"`
	ResourceGroup                  []*ResourceSubGroup               `xml:"ResourceGroup,omitempty"`
	ResourceGroupContentItem       []*ResourceGroupContentItem       `xml:"ResourceGroupContentItem,omitempty"`
	LinkedReleaseResourceReference []*LinkedReleaseResourceReference `xml:"LinkedReleaseResourceReference,omitempty"`
}

// RightsClaimPolicy is A Reason why a rights claim policy has been set.
type RightsClaimPolicy struct {
	Condition               []*ConditionForRightsClaimPolicy `xml:"Condition,omitempty"`
	RightsClaimPolicyType   string                           `xml:"RightsClaimPolicyType"`
	RightsClaimPolicyReason *RightsClaimPolicyReason         `xml:"RightsClaimPolicyReason,omitempty"`
}

// Segment is The end time of the segment, measured from the start of the Resource (using the ISO 8601 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S).
type Segment struct {
	StartTime string `xml:"StartTime"`
	Duration  string `xml:"Duration"`
	EndTime   string `xml:"EndTime"`
}

// ServiceException is A Composite containing details of an excluded channel provided by the Service. This channel may be specific to an Artist.
type ServiceException struct {
	PartyId     []*DetailedPartyId `xml:"PartyId"`
	PartyName   []*PartyName       `xml:"PartyName"`
	TradingName string             `xml:"TradingName,omitempty"`
	URL         []string           `xml:"URL,omitempty"`
	Channel     []*Channel         `xml:"Channel,omitempty"`
}

// SheetMusic is A Composite containing details of a SheetMusic.
type SheetMusic struct {
	LanguageAndScriptCodeAttr              string                                   `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsSupplementalAttr                     bool                                     `xml:"IsSupplemental,attr,omitempty"`
	ResourceReference                      interface{}                              `xml:"ResourceReference"`
	Type                                   *SheetMusicType                          `xml:"Type"`
	ResourceId                             []*SheetMusicId                          `xml:"ResourceId"`
	WorkId                                 []*MusicalWorkId                         `xml:"WorkId,omitempty"`
	DisplayTitleText                       []*DisplayTitleText                      `xml:"DisplayTitleText,omitempty"`
	DisplayTitle                           []*DisplayTitle                          `xml:"DisplayTitle,omitempty"`
	FormalTitle                            []*DisplayTitle                          `xml:"FormalTitle,omitempty"`
	GroupingTitle                          []*DisplayTitle                          `xml:"GroupingTitle,omitempty"`
	VersionType                            []*VersionType                           `xml:"VersionType,omitempty"`
	DisplayArtistName                      []*DisplayArtistNameWithOriginalLanguage `xml:"DisplayArtistName"`
	DisplayArtist                          []*DisplayArtist                         `xml:"DisplayArtist,omitempty"`
	Contributor                            []*Contributor                           `xml:"Contributor,omitempty"`
	ResourceRightsController               []*ResourceRightsController              `xml:"ResourceRightsController,omitempty"`
	WorkRightsController                   []*WorkRightsController                  `xml:"WorkRightsController,omitempty"`
	CLine                                  []*CLine                                 `xml:"CLine,omitempty"`
	CourtesyLine                           []*CourtesyLine                          `xml:"CourtesyLine,omitempty"`
	CreationDate                           *EventDateWithoutFlags                   `xml:"CreationDate,omitempty"`
	FirstPublicationDate                   []*FulfillmentDate                       `xml:"FirstPublicationDate,omitempty"`
	ParentalWarningType                    []*ParentalWarningTypeWithStandard       `xml:"ParentalWarningType,omitempty"`
	RelatedRelease                         []*RelatedRelease                        `xml:"RelatedRelease,omitempty"`
	RelatedResource                        []*RelatedResource                       `xml:"RelatedResource,omitempty"`
	ContainsHiddenContent                  bool                                     `xml:"ContainsHiddenContent,omitempty"`
	LanguageOfLyrics                       interface{}                              `xml:"LanguageOfLyrics,omitempty"`
	ResourceContainedResourceReferenceList *ResourceContainedResourceReferenceList  `xml:"ResourceContainedResourceReferenceList,omitempty"`
	TechnicalDetails                       []*TechnicalSheetMusicDetails            `xml:"TechnicalDetails,omitempty"`
}

// Software is A Composite containing details of an item of Software.
type Software struct {
	LanguageAndScriptCodeAttr              string                                   `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsSupplementalAttr                     bool                                     `xml:"IsSupplemental,attr,omitempty"`
	ResourceReference                      interface{}                              `xml:"ResourceReference"`
	Type                                   *SoftwareType                            `xml:"Type"`
	ResourceId                             []*ResourceProprietaryId                 `xml:"ResourceId"`
	WorkId                                 []*MusicalWorkId                         `xml:"WorkId,omitempty"`
	DisplayTitleText                       []*DisplayTitleText                      `xml:"DisplayTitleText,omitempty"`
	DisplayTitle                           []*DisplayTitle                          `xml:"DisplayTitle,omitempty"`
	FormalTitle                            []*DisplayTitle                          `xml:"FormalTitle,omitempty"`
	GroupingTitle                          []*DisplayTitle                          `xml:"GroupingTitle,omitempty"`
	VersionType                            []*VersionType                           `xml:"VersionType,omitempty"`
	DisplayArtistName                      []*DisplayArtistNameWithOriginalLanguage `xml:"DisplayArtistName,omitempty"`
	DisplayArtist                          []*DisplayArtist                         `xml:"DisplayArtist,omitempty"`
	Contributor                            []*Contributor                           `xml:"Contributor,omitempty"`
	ResourceRightsController               []*ResourceRightsController              `xml:"ResourceRightsController,omitempty"`
	WorkRightsController                   []*WorkRightsController                  `xml:"WorkRightsController,omitempty"`
	PLine                                  []*PLine                                 `xml:"PLine,omitempty"`
	CLine                                  []*CLine                                 `xml:"CLine,omitempty"`
	CourtesyLine                           []*CourtesyLine                          `xml:"CourtesyLine,omitempty"`
	CreationDate                           *EventDateWithoutFlags                   `xml:"CreationDate,omitempty"`
	FirstPublicationDate                   []*FulfillmentDate                       `xml:"FirstPublicationDate,omitempty"`
	ParentalWarningType                    []*ParentalWarningTypeWithStandard       `xml:"ParentalWarningType,omitempty"`
	RelatedRelease                         []*RelatedRelease                        `xml:"RelatedRelease,omitempty"`
	RelatedResource                        []*RelatedResource                       `xml:"RelatedResource,omitempty"`
	ContainsHiddenContent                  bool                                     `xml:"ContainsHiddenContent,omitempty"`
	ResourceContainedResourceReferenceList *ResourceContainedResourceReferenceList  `xml:"ResourceContainedResourceReferenceList,omitempty"`
	TechnicalDetails                       []*TechnicalSoftwareDetails              `xml:"TechnicalDetails,omitempty"`
}

// SoundRecording is A Composite containing details of a SoundRecording.
type SoundRecording struct {
	LanguageAndScriptCodeAttr        string                                   `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsSupplementalAttr               bool                                     `xml:"IsSupplemental,attr,omitempty"`
	ApplyClassicalProfileVariantAttr bool                                     `xml:"ApplyClassicalProfileVariant,attr,omitempty"`
	ResourceReference                interface{}                              `xml:"ResourceReference"`
	Type                             *SoundRecordingType                      `xml:"Type"`
	SoundRecordingEdition            []*SoundRecordingEdition                 `xml:"SoundRecordingEdition"`
	RecordingFormat                  []*RecordingFormat                       `xml:"RecordingFormat,omitempty"`
	WorkId                           []*MusicalWorkId                         `xml:"WorkId,omitempty"`
	DisplayTitleText                 []*DisplayTitleText                      `xml:"DisplayTitleText"`
	DisplayTitle                     []*DisplayTitle                          `xml:"DisplayTitle"`
	FormalTitle                      []*DisplayTitle                          `xml:"FormalTitle,omitempty"`
	GroupingTitle                    []*DisplayTitle                          `xml:"GroupingTitle,omitempty"`
	VersionType                      []*VersionType                           `xml:"VersionType,omitempty"`
	DisplayArtistName                []*DisplayArtistNameWithOriginalLanguage `xml:"DisplayArtistName"`
	DisplayArtist                    []*DisplayArtist                         `xml:"DisplayArtist"`
	Contributor                      []*Contributor                           `xml:"Contributor,omitempty"`
	Character                        []*Character                             `xml:"Character,omitempty"`
	ResourceRightsController         []*ResourceRightsController              `xml:"ResourceRightsController,omitempty"`
	WorkRightsController             []*WorkRightsController                  `xml:"WorkRightsController,omitempty"`
	CourtesyLine                     []*CourtesyLine                          `xml:"CourtesyLine,omitempty"`
	Duration                         string                                   `xml:"Duration"`
	CreationDate                     *EventDateWithoutFlags                   `xml:"CreationDate,omitempty"`
	MasteredDate                     *EventDateWithoutFlags                   `xml:"MasteredDate,omitempty"`
	RemasteredDate                   *EventDateWithoutFlags                   `xml:"RemasteredDate,omitempty"`
	FirstPublicationDate             []*FirstPublicationDate                  `xml:"FirstPublicationDate,omitempty"`
	LocationAndDateOfSession         []*LocationAndDateOfSession              `xml:"LocationAndDateOfSession,omitempty"`
	ParentalWarningType              []*ParentalWarningTypeWithStandard       `xml:"ParentalWarningType,omitempty"`
	RelatedRelease                   []*RelatedRelease                        `xml:"RelatedRelease,omitempty"`
	RelatedResource                  []*RelatedResource                       `xml:"RelatedResource,omitempty"`
	CompositeMusicalWorkType         string                                   `xml:"CompositeMusicalWorkType,omitempty"`
	ContainsAI                       string                                   `xml:"ContainsAI,omitempty"`
	IsCover                          bool                                     `xml:"IsCover,omitempty"`
	HasVocalPerformance              bool                                     `xml:"HasVocalPerformance,omitempty"`
	HasForegroundVocalPerformance    bool                                     `xml:"HasForegroundVocalPerformance,omitempty"`
	IsInstrumental                   bool                                     `xml:"IsInstrumental,omitempty"`
	ContainsHiddenContent            bool                                     `xml:"ContainsHiddenContent,omitempty"`
	IsRemastered                     bool                                     `xml:"IsRemastered,omitempty"`
	IsHiResMusic                     bool                                     `xml:"IsHiResMusic,omitempty"`
	DisableCrossfade                 bool                                     `xml:"DisableCrossfade,omitempty"`
	DisableSearch                    bool                                     `xml:"DisableSearch,omitempty"`
	DisplayCredits                   []*DisplayCredits                        `xml:"DisplayCredits,omitempty"`
	LanguageOfPerformance            []*Language                              `xml:"LanguageOfPerformance,omitempty"`
	Raga                             []*Raga                                  `xml:"Raga,omitempty"`
	Tala                             []*Tala                                  `xml:"Tala,omitempty"`
	Deity                            []*Deity                                 `xml:"Deity,omitempty"`
	AudioChapterReference            []interface{}                            `xml:"AudioChapterReference,omitempty"`
}

// SoundRecordingClipDetails is A Composite containing details of a clip.
type SoundRecordingClipDetails struct {
	TechnicalResourceDetailsReference interface{}          `xml:"TechnicalResourceDetailsReference"`
	ClipType                          *ClipType            `xml:"ClipType"`
	Timing                            []*Timing            `xml:"Timing,omitempty"`
	ExpressionType                    string               `xml:"ExpressionType"`
	DeliveryFile                      []*AudioDeliveryFile `xml:"DeliveryFile,omitempty"`
}

// SoundRecordingEdition is Further Reading: https://kb.ddex.net/implementing-each-standard/best-practices-for-all-ddex-standards/guidance-on-binaries/communicating-binaries
type SoundRecordingEdition struct {
	Type               string                            `xml:"Type,omitempty"`
	ResourceId         []*SoundRecordingId               `xml:"ResourceId"`
	EditionContributor []*EditionContributor             `xml:"EditionContributor,omitempty"`
	PLine              []*PLine                          `xml:"PLine,omitempty"`
	RecordingMode      string                            `xml:"RecordingMode,omitempty"`
	TechnicalDetails   []*TechnicalSoundRecordingDetails `xml:"TechnicalDetails,omitempty"`
}

// SupplementalDocumentList is A Composite containing details of a supplemental document.
type SupplementalDocumentList struct {
	SupplementalDocument []*File `xml:"SupplementalDocument"`
}

// SynopsisWithTerritory is Explanatory Note: This Composite is named SynopsisWithTerritory to disambiguate it from the basic Synopsis Composite.
type SynopsisWithTerritory struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	IsShortSynopsisAttr         bool   `xml:"IsShortSynopsis,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// Tala is A Composite containing details of a Tala.
type Tala struct {
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// TechnicalImageDetails is A Composite containing technical details of an Image.
type TechnicalImageDetails struct {
	LanguageAndScriptCodeAttr         string          `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr       string          `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr                     bool            `xml:"IsDefault,attr,omitempty"`
	TechnicalResourceDetailsReference interface{}     `xml:"TechnicalResourceDetailsReference"`
	ImageCodecType                    *ImageCodecType `xml:"ImageCodecType,omitempty"`
	ImageHeight                       *Extent         `xml:"ImageHeight,omitempty"`
	ImageWidth                        *Extent         `xml:"ImageWidth,omitempty"`
	AspectRatio                       []*AspectRatio  `xml:"AspectRatio,omitempty"`
	ColorDepth                        int             `xml:"ColorDepth,omitempty"`
	ImageResolution                   int             `xml:"ImageResolution,omitempty"`
	BitDepth                          int             `xml:"BitDepth,omitempty"`
	IsClip                            bool            `xml:"IsClip,omitempty"`
	ClipDetails                       []*ClipDetails  `xml:"ClipDetails,omitempty"`
	File                              *File           `xml:"File,omitempty"`
	IsProvidedInDelivery              bool            `xml:"IsProvidedInDelivery,omitempty"`
	Fingerprint                       []*Fingerprint  `xml:"Fingerprint,omitempty"`
}

// TechnicalSheetMusicDetails is A Composite containing technical details of a SheetMusic.
type TechnicalSheetMusicDetails struct {
	LanguageAndScriptCodeAttr         string               `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr       string               `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr                     bool                 `xml:"IsDefault,attr,omitempty"`
	TechnicalResourceDetailsReference interface{}          `xml:"TechnicalResourceDetailsReference"`
	SheetMusicCodecType               *SheetMusicCodecType `xml:"SheetMusicCodecType,omitempty"`
	BitDepth                          int                  `xml:"BitDepth,omitempty"`
	IsClip                            bool                 `xml:"IsClip,omitempty"`
	ClipDetails                       []*ClipDetails       `xml:"ClipDetails,omitempty"`
	File                              *File                `xml:"File,omitempty"`
	IsProvidedInDelivery              bool                 `xml:"IsProvidedInDelivery,omitempty"`
	Fingerprint                       []*Fingerprint       `xml:"Fingerprint,omitempty"`
}

// TechnicalSoftwareDetails is A Composite containing technical details of a Software.
type TechnicalSoftwareDetails struct {
	LanguageAndScriptCodeAttr         string               `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr       string               `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr                     bool                 `xml:"IsDefault,attr,omitempty"`
	TechnicalResourceDetailsReference interface{}          `xml:"TechnicalResourceDetailsReference"`
	OperatingSystemType               *OperatingSystemType `xml:"OperatingSystemType,omitempty"`
	BitDepth                          int                  `xml:"BitDepth,omitempty"`
	IsClip                            bool                 `xml:"IsClip,omitempty"`
	ClipDetails                       []*ClipDetails       `xml:"ClipDetails,omitempty"`
	File                              *File                `xml:"File,omitempty"`
	IsProvidedInDelivery              bool                 `xml:"IsProvidedInDelivery,omitempty"`
	Fingerprint                       []*Fingerprint       `xml:"Fingerprint,omitempty"`
}

// TechnicalSoundRecordingDetails is A Composite containing technical details of a SoundRecording.
type TechnicalSoundRecordingDetails struct {
	LanguageAndScriptCodeAttr         string                       `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr       string                       `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr                     bool                         `xml:"IsDefault,attr,omitempty"`
	TechnicalResourceDetailsReference interface{}                  `xml:"TechnicalResourceDetailsReference"`
	DeliveryFile                      []*AudioDeliveryFile         `xml:"DeliveryFile,omitempty"`
	HasImmersiveAudioMetadata         bool                         `xml:"HasImmersiveAudioMetadata,omitempty"`
	IsClip                            bool                         `xml:"IsClip,omitempty"`
	ClipDetails                       []*SoundRecordingClipDetails `xml:"ClipDetails,omitempty"`
}

// TechnicalTextDetails is A Composite containing technical details of a Text.
type TechnicalTextDetails struct {
	LanguageAndScriptCodeAttr         string         `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr       string         `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr                     bool           `xml:"IsDefault,attr,omitempty"`
	TechnicalResourceDetailsReference interface{}    `xml:"TechnicalResourceDetailsReference"`
	TextCodecType                     *TextCodecType `xml:"TextCodecType,omitempty"`
	BitDepth                          int            `xml:"BitDepth,omitempty"`
	IsClip                            bool           `xml:"IsClip,omitempty"`
	ClipDetails                       []*ClipDetails `xml:"ClipDetails,omitempty"`
	File                              *File          `xml:"File,omitempty"`
	IsProvidedInDelivery              bool           `xml:"IsProvidedInDelivery,omitempty"`
	Fingerprint                       []*Fingerprint `xml:"Fingerprint,omitempty"`
}

// TechnicalVideoDetails is A Composite containing technical details of a Video.
type TechnicalVideoDetails struct {
	LanguageAndScriptCodeAttr         string               `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr       string               `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr                     bool                 `xml:"IsDefault,attr,omitempty"`
	TechnicalResourceDetailsReference interface{}          `xml:"TechnicalResourceDetailsReference"`
	OverallBitRate                    *BitRate             `xml:"OverallBitRate,omitempty"`
	DeliveryFile                      []*VideoDeliveryFile `xml:"DeliveryFile,omitempty"`
	IsClip                            bool                 `xml:"IsClip,omitempty"`
	ClipDetails                       []*VideoClipDetails  `xml:"ClipDetails,omitempty"`
}

// Text is A Composite containing details of a Text.
type Text struct {
	LanguageAndScriptCodeAttr              string                                   `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsSupplementalAttr                     bool                                     `xml:"IsSupplemental,attr,omitempty"`
	ResourceReference                      interface{}                              `xml:"ResourceReference"`
	Type                                   *TextType                                `xml:"Type"`
	ResourceId                             []*TextId                                `xml:"ResourceId,omitempty"`
	WorkId                                 []*MusicalWorkId                         `xml:"WorkId,omitempty"`
	DisplayTitleText                       []*DisplayTitleText                      `xml:"DisplayTitleText,omitempty"`
	DisplayTitle                           []*DisplayTitle                          `xml:"DisplayTitle,omitempty"`
	FormalTitle                            []*DisplayTitle                          `xml:"FormalTitle,omitempty"`
	GroupingTitle                          []*DisplayTitle                          `xml:"GroupingTitle,omitempty"`
	VersionType                            []*VersionType                           `xml:"VersionType,omitempty"`
	DisplayArtistName                      []*DisplayArtistNameWithOriginalLanguage `xml:"DisplayArtistName,omitempty"`
	DisplayArtist                          []*DisplayArtist                         `xml:"DisplayArtist,omitempty"`
	Contributor                            []*Contributor                           `xml:"Contributor,omitempty"`
	ResourceRightsController               []*ResourceRightsController              `xml:"ResourceRightsController,omitempty"`
	WorkRightsController                   []*WorkRightsController                  `xml:"WorkRightsController,omitempty"`
	CLine                                  []*CLine                                 `xml:"CLine,omitempty"`
	CourtesyLine                           []*CourtesyLine                          `xml:"CourtesyLine,omitempty"`
	CreationDate                           *EventDateWithoutFlags                   `xml:"CreationDate,omitempty"`
	FirstPublicationDate                   []*FulfillmentDate                       `xml:"FirstPublicationDate,omitempty"`
	ParentalWarningType                    []*ParentalWarningTypeWithStandard       `xml:"ParentalWarningType,omitempty"`
	RelatedRelease                         []*RelatedRelease                        `xml:"RelatedRelease,omitempty"`
	RelatedResource                        []*RelatedResource                       `xml:"RelatedResource,omitempty"`
	ContainsAI                             string                                   `xml:"ContainsAI,omitempty"`
	ContainsHiddenContent                  bool                                     `xml:"ContainsHiddenContent,omitempty"`
	ResourceContainedResourceReferenceList *ResourceContainedResourceReferenceList  `xml:"ResourceContainedResourceReferenceList,omitempty"`
	TechnicalDetails                       []*TechnicalTextDetails                  `xml:"TechnicalDetails,omitempty"`
	LanguageOfText                         []*Language                              `xml:"LanguageOfText,omitempty"`
}

// Timing is The Duration of the related Resource (or of an interval of that Resource) that has been used (this may be less than the total Duration of the Resource) (using the ISO 8601 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). If the Resource consists of several intervals of the referencing Resource, the Duration of each interval used shall be given. The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S).
type Timing struct {
	StartPoint   float64  `xml:"StartPoint"`
	EndPoint     float64  `xml:"EndPoint,omitempty"`
	DurationUsed []string `xml:"DurationUsed,omitempty"`
}

// Title is A SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.
type Title struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	TitleTypeAttr             string `xml:"TitleType,attr,omitempty"`
	TitleText                 string `xml:"TitleText"`
	SubTitle                  string `xml:"SubTitle,omitempty"`
}

// TrackRelease is A Composite containing details of a DDEX TrackRelease.
type TrackRelease struct {
	IsMainReleaseAttr              bool                              `xml:"IsMainRelease,attr,omitempty"`
	ReleaseReference               interface{}                       `xml:"ReleaseReference"`
	ReleaseId                      *ReleaseId                        `xml:"ReleaseId"`
	DisplayTitleText               []*DisplayTitleText               `xml:"DisplayTitleText,omitempty"`
	DisplayTitle                   []*DisplayTitle                   `xml:"DisplayTitle,omitempty"`
	FormalTitle                    []*DisplayTitle                   `xml:"FormalTitle,omitempty"`
	GroupingTitle                  []*DisplayTitle                   `xml:"GroupingTitle,omitempty"`
	ReleaseResourceReference       interface{}                       `xml:"ReleaseResourceReference"`
	LinkedReleaseResourceReference []*LinkedReleaseResourceReference `xml:"LinkedReleaseResourceReference,omitempty"`
	ReleaseLabelReference          []*ReleaseLabelReferenceWithParty `xml:"ReleaseLabelReference"`
	DisplayGenre                   []*GenreWithTerritory             `xml:"DisplayGenre"`
	ReleaseVisibilityReference     []interface{}                     `xml:"ReleaseVisibilityReference,omitempty"`
	RelatedRelease                 []*RelatedRelease                 `xml:"RelatedRelease,omitempty"`
	RelatedResource                []*RelatedResource                `xml:"RelatedResource,omitempty"`
	TargetURL                      string                            `xml:"TargetURL,omitempty"`
	Keywords                       []*KeywordsWithTerritory          `xml:"Keywords,omitempty"`
	Synopsis                       []*SynopsisWithTerritory          `xml:"Synopsis,omitempty"`
	MarketingComment               []*MarketingComment               `xml:"MarketingComment,omitempty"`
}

// TrackReleaseVisibility is A Composite containing details of a Date specifying when a TrackRelease can be shown to Consumers.
type TrackReleaseVisibility struct {
	DoNotDisplayDatesAttr            bool                    `xml:"DoNotDisplayDates,attr,omitempty"`
	VisibilityReference              interface{}             `xml:"VisibilityReference"`
	TerritoryCode                    []*CurrentTerritoryCode `xml:"TerritoryCode"`
	ExcludedTerritoryCode            []*CurrentTerritoryCode `xml:"ExcludedTerritoryCode"`
	TrackListingPreviewStartDateTime string                  `xml:"TrackListingPreviewStartDateTime"`
	ClipPreviewStartDateTime         string                  `xml:"ClipPreviewStartDateTime,omitempty"`
}

// UseType is A Composite containing details of a UseType.
type UseType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// UserInterfaceType is A Composite containing details of a UserInterfaceType.
type UserInterfaceType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Video is A Composite containing details of a Video.
type Video struct {
	LanguageAndScriptCodeAttr              string                                   `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsSupplementalAttr                     bool                                     `xml:"IsSupplemental,attr,omitempty"`
	ApplyClassicalProfileVariantAttr       bool                                     `xml:"ApplyClassicalProfileVariant,attr,omitempty"`
	ResourceReference                      interface{}                              `xml:"ResourceReference"`
	Type                                   *VideoType                               `xml:"Type"`
	VideoEdition                           []*VideoEdition                          `xml:"VideoEdition"`
	RecordingFormat                        []*RecordingFormat                       `xml:"RecordingFormat,omitempty"`
	WorkId                                 []*MusicalWorkId                         `xml:"WorkId,omitempty"`
	DisplayTitleText                       []*DisplayTitleText                      `xml:"DisplayTitleText"`
	DisplayTitle                           []*DisplayTitle                          `xml:"DisplayTitle"`
	FormalTitle                            []*DisplayTitle                          `xml:"FormalTitle,omitempty"`
	GroupingTitle                          []*DisplayTitle                          `xml:"GroupingTitle,omitempty"`
	VersionType                            []*VersionType                           `xml:"VersionType,omitempty"`
	DisplayArtistName                      []*DisplayArtistNameWithOriginalLanguage `xml:"DisplayArtistName"`
	DisplayArtist                          []*DisplayArtist                         `xml:"DisplayArtist"`
	Contributor                            []*Contributor                           `xml:"Contributor,omitempty"`
	Character                              []*Character                             `xml:"Character,omitempty"`
	ResourceRightsController               []*ResourceRightsController              `xml:"ResourceRightsController,omitempty"`
	WorkRightsController                   []*WorkRightsController                  `xml:"WorkRightsController,omitempty"`
	CourtesyLine                           []*CourtesyLine                          `xml:"CourtesyLine,omitempty"`
	Duration                               string                                   `xml:"Duration"`
	CreationDate                           *EventDateWithoutFlags                   `xml:"CreationDate,omitempty"`
	MasteredDate                           *EventDateWithoutFlags                   `xml:"MasteredDate,omitempty"`
	RemasteredDate                         []*EventDateWithoutFlags                 `xml:"RemasteredDate,omitempty"`
	FirstPublicationDate                   []*FulfillmentDate                       `xml:"FirstPublicationDate,omitempty"`
	ParentalWarningType                    []*ParentalWarningTypeWithStandard       `xml:"ParentalWarningType,omitempty"`
	AvRating                               []*AvRating                              `xml:"AvRating,omitempty"`
	RelatedRelease                         []*RelatedRelease                        `xml:"RelatedRelease,omitempty"`
	RelatedResource                        []*RelatedResource                       `xml:"RelatedResource,omitempty"`
	CompositeMusicalWorkType               string                                   `xml:"CompositeMusicalWorkType,omitempty"`
	VideoCueSheetReference                 []interface{}                            `xml:"VideoCueSheetReference"`
	ReasonForCueSheetAbsence               *Reason                                  `xml:"ReasonForCueSheetAbsence"`
	ContainsAI                             string                                   `xml:"ContainsAI,omitempty"`
	IsCover                                bool                                     `xml:"IsCover,omitempty"`
	HasVocalPerformance                    bool                                     `xml:"HasVocalPerformance,omitempty"`
	HasForegroundVocalPerformance          bool                                     `xml:"HasForegroundVocalPerformance,omitempty"`
	IsInstrumental                         bool                                     `xml:"IsInstrumental,omitempty"`
	ContainsHiddenContent                  bool                                     `xml:"ContainsHiddenContent,omitempty"`
	IsRemastered                           bool                                     `xml:"IsRemastered,omitempty"`
	DisplayCredits                         []*DisplayCredits                        `xml:"DisplayCredits,omitempty"`
	LanguageOfPerformance                  []*Language                              `xml:"LanguageOfPerformance,omitempty"`
	LanguageOfDubbing                      []interface{}                            `xml:"LanguageOfDubbing,omitempty"`
	SubTitleLanguage                       []interface{}                            `xml:"SubTitleLanguage,omitempty"`
	ResourceContainedResourceReferenceList *ResourceContainedResourceReferenceList  `xml:"ResourceContainedResourceReferenceList,omitempty"`
	Raga                                   []string                                 `xml:"Raga,omitempty"`
	Tala                                   []string                                 `xml:"Tala,omitempty"`
	Deity                                  []string                                 `xml:"Deity,omitempty"`
	VideoChapterReference                  []interface{}                            `xml:"VideoChapterReference,omitempty"`
}

// VideoClipDetails is A Composite containing details of a clip.
type VideoClipDetails struct {
	TechnicalResourceDetailsReference interface{}          `xml:"TechnicalResourceDetailsReference"`
	ClipType                          *ClipType            `xml:"ClipType"`
	Timing                            []*Timing            `xml:"Timing,omitempty"`
	TopLeftCorner                     interface{}          `xml:"TopLeftCorner,omitempty"`
	BottomRightCorner                 interface{}          `xml:"BottomRightCorner,omitempty"`
	ExpressionType                    string               `xml:"ExpressionType"`
	DeliveryFile                      []*VideoDeliveryFile `xml:"DeliveryFile,omitempty"`
}

// VideoDeliveryFile is A Flag indicating whether the File containing the Video is a provided in a delivery (=true) or not (=false).
type VideoDeliveryFile struct {
	Type                               string                       `xml:"Type"`
	ContainerFormat                    *ContainerFormat             `xml:"ContainerFormat,omitempty"`
	VideoCodecType                     *VideoCodecType              `xml:"VideoCodecType,omitempty"`
	VideoBitRate                       *BitRate                     `xml:"VideoBitRate,omitempty"`
	FrameRate                          *FrameRate                   `xml:"FrameRate,omitempty"`
	ImageHeight                        *Extent                      `xml:"ImageHeight,omitempty"`
	ImageWidth                         *Extent                      `xml:"ImageWidth,omitempty"`
	AspectRatio                        []*AspectRatio               `xml:"AspectRatio,omitempty"`
	CoreArea                           *CoreArea                    `xml:"CoreArea,omitempty"`
	ColorDepth                         int                          `xml:"ColorDepth,omitempty"`
	VideoDefinitionType                *VideoDefinitionType         `xml:"VideoDefinitionType,omitempty"`
	AudioCodecType                     *AudioCodecType              `xml:"AudioCodecType,omitempty"`
	HasImmersiveAudioMetadata          bool                         `xml:"HasImmersiveAudioMetadata,omitempty"`
	ElectroOpticalTransferFunctionType string                       `xml:"ElectroOpticalTransferFunctionType,omitempty"`
	PrimaryColorType                   string                       `xml:"PrimaryColorType,omitempty"`
	HdrVideoDynamicMetadataType        *HdrVideoDynamicMetadataType `xml:"HdrVideoDynamicMetadataType,omitempty"`
	HdrVideoStaticMetadataType         string                       `xml:"HdrVideoStaticMetadataType,omitempty"`
	AudioBitRate                       *BitRate                     `xml:"AudioBitRate,omitempty"`
	NumberOfAudioChannels              int                          `xml:"NumberOfAudioChannels,omitempty"`
	NumberOfAudioObjects               int                          `xml:"NumberOfAudioObjects,omitempty"`
	AudioSamplingRate                  *SamplingRate                `xml:"AudioSamplingRate,omitempty"`
	AudioBitsPerSample                 int                          `xml:"AudioBitsPerSample,omitempty"`
	Duration                           string                       `xml:"Duration,omitempty"`
	BitDepth                           int                          `xml:"BitDepth,omitempty"`
	File                               *File                        `xml:"File,omitempty"`
	Fingerprint                        []*Fingerprint               `xml:"Fingerprint,omitempty"`
	IsProvidedInDelivery               bool                         `xml:"IsProvidedInDelivery,omitempty"`
}

// VideoEdition is Further Reading: https://kb.ddex.net/implementing-each-standard/best-practices-for-all-ddex-standards/guidance-on-binaries/communicating-binaries
type VideoEdition struct {
	Type               string                   `xml:"Type,omitempty"`
	ResourceId         []*VideoId               `xml:"ResourceId"`
	EditionContributor []*EditionContributor    `xml:"EditionContributor,omitempty"`
	PLine              []*PLine                 `xml:"PLine,omitempty"`
	CLine              []*CLine                 `xml:"CLine,omitempty"`
	RecordingMode      string                   `xml:"RecordingMode,omitempty"`
	TechnicalDetails   []*TechnicalVideoDetails `xml:"TechnicalDetails,omitempty"`
}

// VideoType is A Composite containing details of a VideoType.
type VideoType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// WorkRightsController is A Composite containing details of a RightsController for a Work. RightsControllers are typically described by Name, Identifier and Role(s).
type WorkRightsController struct {
	RightsControllerPartyReference interface{}         `xml:"RightsControllerPartyReference"`
	RightsControlType              []string            `xml:"RightsControlType,omitempty"`
	RightsControllerType           string              `xml:"RightsControllerType,omitempty"`
	RightShareUnknown              bool                `xml:"RightShareUnknown"`
	RightSharePercentage           float64             `xml:"RightSharePercentage"`
	Territory                      []*AllTerritoryCode `xml:"Territory,omitempty"`
	StartDate                      string              `xml:"StartDate,omitempty"`
	EndDate                        string              `xml:"EndDate,omitempty"`
}

// AdministratingRecordCompanyRole is A Composite containing details of an AdministratingRecordCompanyRole.
type AdministratingRecordCompanyRole struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Affiliation is The Name of the company.
type Affiliation struct {
	CompanyName                  string                  `xml:"CompanyName"`
	PartyAffiliateReference      interface{}             `xml:"PartyAffiliateReference"`
	Type                         string                  `xml:"Type"`
	TerritoryCode                []*CurrentTerritoryCode `xml:"TerritoryCode"`
	ExcludedTerritoryCode        []*CurrentTerritoryCode `xml:"ExcludedTerritoryCode"`
	ValidityPeriod               *ValidityPeriod         `xml:"ValidityPeriod,omitempty"`
	RightsType                   []*RightsType           `xml:"RightsType,omitempty"`
	PercentageOfRightsAssignment float64                 `xml:"PercentageOfRightsAssignment,omitempty"`
}

// AllTerritoryCode is A Composite containing details of a TerritoryCode.
type AllTerritoryCode struct {
	IdentifierTypeAttr string `xml:"IdentifierType,attr,omitempty"`
	Value              string `xml:",chardata"`
}

// AspectRatio is A Composite containing an AspectRatio and an AspectRatioType.
type AspectRatio struct {
	AspectRatioTypeAttr          string  `xml:"AspectRatioType,attr,omitempty"`
	AppliesToCroppedResourceAttr bool    `xml:"AppliesToCroppedResource,attr,omitempty"`
	Value                        float64 `xml:",chardata"`
}

// AudioCodecType is A Composite containing details of an AudioCodecType.
type AudioCodecType struct {
	VersionAttr          string `xml:"Version,attr,omitempty"`
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// BitRate is A Composite containing a BitRate and a UnitOfMeasure.
type BitRate struct {
	UnitOfMeasureAttr string  `xml:"UnitOfMeasure,attr,omitempty"`
	Value             float64 `xml:",chardata"`
}

// CLine is The text of the CLine.
type CLine struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Year                        string `xml:"Year,omitempty"`
	CLineCompany                string `xml:"CLineCompany,omitempty"`
	CLineText                   string `xml:"CLineText"`
}

// CarrierType is A Composite containing details of a CarrierType.
type CarrierType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// CatalogNumber is A Composite containing details of a CatalogNumber.
type CatalogNumber struct {
	NamespaceAttr string `xml:"Namespace,attr"`
	Value         string `xml:",chardata"`
}

// ChapterId is A Composite containing details of a ProprietaryIdentifier of the Chapter.
type ChapterId struct {
	ISRC          string           `xml:"ISRC,omitempty"`
	ISAN          string           `xml:"ISAN,omitempty"`
	VISAN         string           `xml:"VISAN,omitempty"`
	EIDR          []string         `xml:"EIDR,omitempty"`
	ISWC          string           `xml:"ISWC,omitempty"`
	CatalogNumber *CatalogNumber   `xml:"CatalogNumber,omitempty"`
	ProprietaryId []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// ClipType is A Composite containing details of a ClipType.
type ClipType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ContainerFormat is A Composite containing details of a ContainerFormat.
type ContainerFormat struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Contributor is A Composite containing details of the Name, Identifier and Role(s) of a Contributor to a Resource.
type Contributor struct {
	SequenceNumberAttr            int                     `xml:"SequenceNumber,attr,omitempty"`
	ContributorPartyReference     interface{}             `xml:"ContributorPartyReference"`
	SpecialContributor            *SpecialContributorType `xml:"SpecialContributor"`
	Role                          []*ContributorRole      `xml:"Role,omitempty"`
	InstrumentType                []*InstrumentType       `xml:"InstrumentType,omitempty"`
	AiContribution                string                  `xml:"AiContribution,omitempty"`
	HasMadeFeaturedContribution   bool                    `xml:"HasMadeFeaturedContribution,omitempty"`
	HasMadeContractedContribution bool                    `xml:"HasMadeContractedContribution,omitempty"`
	IsCredited                    *IsCredited             `xml:"IsCredited,omitempty"`
	DisplayCredits                []*DisplayCredits       `xml:"DisplayCredits,omitempty"`
}

// ContributorRole is A Type of musical Instrument played by the Contributor.
type ContributorRole struct {
	Value          *ContributorRoleValue `xml:"Value"`
	InstrumentType []*InstrumentType     `xml:"InstrumentType,omitempty"`
}

// ContributorRoleValue is A Composite containing details of a ContributorRole value.
type ContributorRoleValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// CourtesyLine is A Composite containing details of a CourtesyLine.
type CourtesyLine struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// CueOrigin is A Composite containing details of a CueOrigin.
type CueOrigin struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// CueSheetType is A Composite containing details of a CueSheetType.
type CueSheetType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// CueThemeType is A Composite containing details of a ThemeType for a Creation referenced in a Cue.
type CueThemeType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// CueUseType is A Composite containing details of a CueUseType.
type CueUseType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// CueVisualPerceptionType is A Composite containing details of a VisualPerceptionType for a Creation referenced in a Cue.
type CueVisualPerceptionType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// CueVocalType is A Composite containing details of a VocalType for a Creation referenced in a Cue.
type CueVocalType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// CurrentTerritoryCode is A Composite containing details of a TerritoryCode.
type CurrentTerritoryCode struct {
	IdentifierTypeAttr string `xml:"IdentifierType,attr,omitempty"`
	Value              string `xml:",chardata"`
}

// DSP is A URL for the DSP's web site.
type DSP struct {
	PartyId     []*DetailedPartyId `xml:"PartyId"`
	PartyName   []*PartyName       `xml:"PartyName"`
	TradingName string             `xml:"TradingName,omitempty"`
	URL         []string           `xml:"URL,omitempty"`
}

// DetailedHashSum is The value of the hash sum.
type DetailedHashSum struct {
	Algorithm    *HashSumAlgorithmType `xml:"Algorithm"`
	Version      string                `xml:"Version,omitempty"`
	Parameter    string                `xml:"Parameter,omitempty"`
	DataType     string                `xml:"DataType,omitempty"`
	HashSumValue string                `xml:"HashSumValue"`
}

// DetailedPartyId is An International Standard Name Identifier, the ISO 27729 Standard Identifier for names. DDEX will enforce the syntax [0-9]{15}[X0-9] in the future.
type DetailedPartyId struct {
	ISNI           string           `xml:"ISNI,omitempty"`
	DPID           interface{}      `xml:"DPID,omitempty"`
	IpiNameNumber  interface{}      `xml:"IpiNameNumber,omitempty"`
	IPN            string           `xml:"IPN,omitempty"`
	CisacSocietyId string           `xml:"CisacSocietyId,omitempty"`
	ProprietaryId  []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// DisplayArtistNameWithOriginalLanguage is Explanatory Note: This Composite is named DisplayArtistNameWithOriginalLanguage to disambiguate it from the basic DisplayArtistName Composite.
type DisplayArtistNameWithOriginalLanguage struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	IsInOriginalLanguageAttr    bool   `xml:"IsInOriginalLanguage,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// DisplayArtistRole is A Composite containing details of a DisplayArtistRole.
type DisplayArtistRole struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// DisplayCredits is The textual portion of the display credit.
type DisplayCredits struct {
	LanguageAndScriptCodeAttr   string        `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string        `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool          `xml:"IsDefault,attr,omitempty"`
	DisplayCreditText           string        `xml:"DisplayCreditText"`
	DisplayCreditParty          []interface{} `xml:"DisplayCreditParty"`
	NameUsedInDisplayCredit     []string      `xml:"NameUsedInDisplayCredit,omitempty"`
}

// DisplaySubTitle is Explanatory Note: This Composite is named DisplaySubTitle to disambiguate it from the basic SubTitle Composite.
type DisplaySubTitle struct {
	SequenceNumberAttr     int    `xml:"SequenceNumber,attr,omitempty"`
	IsDisplayedInTitleAttr bool   `xml:"IsDisplayedInTitle,attr,omitempty"`
	SubTitleTypeAttr       string `xml:"SubTitleType,attr,omitempty"`
	Value                  string `xml:",chardata"`
}

// DisplayTitle is A Composite containing details of a SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.
type DisplayTitle struct {
	LanguageAndScriptCodeAttr   string             `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string             `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool               `xml:"IsDefault,attr,omitempty"`
	IsInOriginalLanguageAttr    bool               `xml:"IsInOriginalLanguage,attr,omitempty"`
	TitleText                   string             `xml:"TitleText"`
	SubTitle                    []*DisplaySubTitle `xml:"SubTitle,omitempty"`
}

// EventDate is A Composite containing details of the Date and Place of an Event.
type EventDate struct {
	IsApproximateAttr           bool   `xml:"IsApproximate,attr,omitempty"`
	IsBeforeAttr                bool   `xml:"IsBefore,attr,omitempty"`
	IsAfterAttr                 bool   `xml:"IsAfter,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	LocationDescriptionAttr     string `xml:"LocationDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	*DdexIsoDate
}

// EventDateTime is A Composite containing details of the DateTime and Place of an Event.
type EventDateTime struct {
	IsApproximateAttr         bool   `xml:"IsApproximate,attr,omitempty"`
	IsBeforeAttr              bool   `xml:"IsBefore,attr,omitempty"`
	IsAfterAttr               bool   `xml:"IsAfter,attr,omitempty"`
	TerritoryCodeAttr         string `xml:"TerritoryCode,attr,omitempty"`
	LocationDescriptionAttr   string `xml:"LocationDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// Extent is A Composite containing an Extent and a UnitOfMeasure.
type Extent struct {
	UnitOfMeasureAttr string  `xml:"UnitOfMeasure,attr,omitempty"`
	Value             float64 `xml:",chardata"`
}

// ExternallyLinkedResourceType is A Composite containing details of an ExternallyLinkedResourceType.
type ExternallyLinkedResourceType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// File is The size of the File in kilobytes.
type File struct {
	URI      string           `xml:"URI"`
	HashSum  *DetailedHashSum `xml:"HashSum,omitempty"`
	FileSize float64          `xml:"FileSize,omitempty"`
}

// Fingerprint is The value of the Fingerprint.
type Fingerprint struct {
	Algorithm        *FingerprintAlgorithmType `xml:"Algorithm"`
	Version          string                    `xml:"Version,omitempty"`
	Parameter        string                    `xml:"Parameter,omitempty"`
	File             *File                     `xml:"File"`
	DataType         string                    `xml:"DataType"`
	FingerprintValue string                    `xml:"FingerprintValue"`
}

// FingerprintAlgorithmType is A Composite containing details of a FingerprintAlgorithmType.
type FingerprintAlgorithmType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// FirstPublicationDate is A Composite containing details of a FirstPublicationDate.
type FirstPublicationDate struct {
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	*DdexIsoDate
}

// FrameRate is A Composite containing a FrameRate and a UnitOfMeasure.
type FrameRate struct {
	UnitOfMeasureAttr string  `xml:"UnitOfMeasure,attr,omitempty"`
	Value             float64 `xml:",chardata"`
}

// FulfillmentDate is A Date after which an end user can receive the Resource (in ISO 8601 format: YYYY-MM-DD). If no FulfillmentDate is provided the FulfillmentDate is the StartDate of the respective Deal.
type FulfillmentDate struct {
	ApplicableTerritoryCodeAttr string        `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool          `xml:"IsDefault,attr,omitempty"`
	FulfillmentDate             string        `xml:"FulfillmentDate"`
	ResourceReleaseReference    []interface{} `xml:"ResourceReleaseReference,omitempty"`
}

// GenreCategory is A Composite containing a Description of the Genre Category.
type GenreCategory struct {
	ApplicableTerritoryCodeAttr string                  `xml:"ApplicableTerritoryCode,attr,omitempty"`
	Value                       *GenreCategoryValue     `xml:"Value"`
	Description                 []*TextWithoutTerritory `xml:"Description,omitempty"`
}

// GenreCategoryValue is A Composite containing details of a Genre Category value.
type GenreCategoryValue struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	NamespaceAttr             string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr      string `xml:"UserDefinedValue,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// GenreWithTerritory is A Composite containing details of a sub-genre of the Release. The sub-genre is a specialization of the genre and therefore the GenreCategory needs to be provided if this element is provided.
type GenreWithTerritory struct {
	LanguageAndScriptCodeAttr   string              `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string              `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool                `xml:"IsDefault,attr,omitempty"`
	GenreText                   string              `xml:"GenreText"`
	SubGenre                    string              `xml:"SubGenre,omitempty"`
	GenreCategory               []*GenreCategory    `xml:"GenreCategory,omitempty"`
	SubGenreCategory            []*SubGenreCategory `xml:"SubGenreCategory,omitempty"`
}

// HashSumAlgorithmType is A Composite containing details of a HashSumAlgorithmType.
type HashSumAlgorithmType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ImageCodecType is A Composite containing details of an ImageCodecType.
type ImageCodecType struct {
	VersionAttr          string `xml:"Version,attr,omitempty"`
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ImageType is A Composite containing details of an ImageType.
type ImageType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// InstrumentType is A Composite containing details of an InstrumentType.
type InstrumentType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// IsCredited is A Composite containing details of a Flag indicating whether the Contributor is credited as having played a role in creating the Recording.
type IsCredited struct {
	MayBeSharedAttr bool `xml:"MayBeShared,attr,omitempty"`
	Value           bool `xml:",chardata"`
}

// KeywordsWithTerritory is Explanatory Note: This Composite is named KeywordsWithTerritory to disambiguate it from the basic Keywords Composite.
type KeywordsWithTerritory struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// Language is A Composite containing details of a Language value.
type Language struct {
	IsMainLanguageAttr bool `xml:"IsMainLanguage,attr,omitempty"`
	*DdexLanguageAndScriptCodeWithRestriction
}

// MarketingComment is A Composite containing details of a MarketingComment.
type MarketingComment struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// MessageAuditTrail is A Composite containing details of a Party handling the Message and the Time at which the handling took place.
type MessageAuditTrail struct {
	MessageAuditTrailEvent []*MessageAuditTrailEvent `xml:"MessageAuditTrailEvent"`
}

// MessageAuditTrailEvent is The DateTime at which the Message was handled by the MessagingParty (the only allowed format is ISO 8601: YYYY-MM-DDThh:mm:ssTZD).
type MessageAuditTrailEvent struct {
	MessagingPartyDescriptor *MessagingPartyWithoutCode `xml:"MessagingPartyDescriptor"`
	DateTime                 string                     `xml:"DateTime"`
}

// MessageHeader is The indicator used to distinguish a live Message from a test Message.
type MessageHeader struct {
	MessageThreadId        string                       `xml:"MessageThreadId,omitempty"`
	MessageId              string                       `xml:"MessageId"`
	MessageFileName        string                       `xml:"MessageFileName,omitempty"`
	MessageSender          *MessagingPartyWithoutCode   `xml:"MessageSender"`
	SentOnBehalfOf         *MessagingPartyWithoutCode   `xml:"SentOnBehalfOf,omitempty"`
	MessageRecipient       []*MessagingPartyWithoutCode `xml:"MessageRecipient"`
	SentAsRequestedBy      *MessagingPartyWithoutCode   `xml:"SentAsRequestedBy,omitempty"`
	MessageCreatedDateTime string                       `xml:"MessageCreatedDateTime"`
	MessageAuditTrail      *MessageAuditTrail           `xml:"MessageAuditTrail,omitempty"`
	MessageControlType     string                       `xml:"MessageControlType,omitempty"`
}

// MessagingPartyWithoutCode is Explanatory Note: This Composite is named MessagingPartyWithoutCode to disambiguate it from the basic MessagingParty Composite.
type MessagingPartyWithoutCode struct {
	PartyId     interface{}           `xml:"PartyId"`
	PartyName   *PartyNameWithoutCode `xml:"PartyName,omitempty"`
	TradingName string                `xml:"TradingName,omitempty"`
}

// MusicalWorkId is A Composite containing details of a ProprietaryIdentifier of the MusicalWork.
type MusicalWorkId struct {
	IsReplacedAttr        bool             `xml:"IsReplaced,attr,omitempty"`
	ISWC                  string           `xml:"ISWC,omitempty"`
	OpusNumber            string           `xml:"OpusNumber,omitempty"`
	ComposerCatalogNumber []string         `xml:"ComposerCatalogNumber,omitempty"`
	ProprietaryId         []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// Name is A Composite containing details of a Name.
type Name struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// OperatingSystemType is A Composite containing details of an OperatingSystemType.
type OperatingSystemType struct {
	VersionAttr          string `xml:"Version,attr,omitempty"`
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// PLine is The text of the PLine.
type PLine struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Year                        string `xml:"Year,omitempty"`
	PLineCompany                string `xml:"PLineCompany,omitempty"`
	PLineText                   string `xml:"PLineText"`
}

// ParentalWarningTypeWithStandard is Explanatory Note: This Composite is named ParentalWarningTypeWithStandard to disambiguate it from the basic ParentalWarningType Composite.
type ParentalWarningTypeWithStandard struct {
	ApplicableTerritoryCodeAttr  string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr                bool   `xml:"IsDefault,attr,omitempty"`
	TypeNamespaceAttr            string `xml:"TypeNamespace,attr,omitempty"`
	TypeUserDefinedValueAttr     string `xml:"TypeUserDefinedValue,attr,omitempty"`
	ParentalWarningStandardAttr  string `xml:"ParentalWarningStandard,attr,omitempty"`
	StandardNamespaceAttr        string `xml:"StandardNamespace,attr,omitempty"`
	StandardUserDefinedValueAttr string `xml:"StandardUserDefinedValue,attr,omitempty"`
	Value                        string `xml:",chardata"`
}

// PartyName is A Composite containing a short version of the PartyName (e.g. for use on devices with a small display).
type PartyName struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	FullName                  string `xml:"FullName"`
	FullNameAsciiTranscribed  string `xml:"FullNameAsciiTranscribed,omitempty"`
	FullNameIndexed           string `xml:"FullNameIndexed,omitempty"`
	NamesBeforeKeyName        string `xml:"NamesBeforeKeyName,omitempty"`
	KeyName                   string `xml:"KeyName,omitempty"`
	NamesAfterKeyName         string `xml:"NamesAfterKeyName,omitempty"`
	AbbreviatedName           string `xml:"AbbreviatedName,omitempty"`
}

// PartyNameWithoutCode is A short version of the PartyName (e.g. for use on devices with a small display).
type PartyNameWithoutCode struct {
	FullName                 string `xml:"FullName"`
	FullNameAsciiTranscribed string `xml:"FullNameAsciiTranscribed,omitempty"`
	FullNameIndexed          string `xml:"FullNameIndexed,omitempty"`
	NamesBeforeKeyName       string `xml:"NamesBeforeKeyName,omitempty"`
	KeyName                  string `xml:"KeyName,omitempty"`
	NamesAfterKeyName        string `xml:"NamesAfterKeyName,omitempty"`
	AbbreviatedName          string `xml:"AbbreviatedName,omitempty"`
}

// PartyRelationshipType is A Composite containing details of a PartyRelationshipType.
type PartyRelationshipType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	MayBeSharedAttr      bool   `xml:"MayBeShared,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Percentage is A Composite containing details of a PercentageRate.
type Percentage struct {
	HasMaxValueOfOneAttr bool    `xml:"HasMaxValueOfOne,attr,omitempty"`
	Value                float64 `xml:",chardata"`
}

// Period is A Composite containing details of the DateTime and Place of an Event that marks the end of the Period (in ISO 8601 format: YYYY-MM-DDThh:mm:ss). The EndDateTime must not be earlier than the StartDateTime if both are provided.
type Period struct {
	StartDate     *EventDate     `xml:"StartDate,omitempty"`
	EndDate       *EventDate     `xml:"EndDate,omitempty"`
	StartDateTime *EventDateTime `xml:"StartDateTime,omitempty"`
	EndDateTime   *EventDateTime `xml:"EndDateTime,omitempty"`
}

// Prefix is A Composite containing details of a Descriptor that precedes the display artist name when multiple display artist names are given.
type Prefix struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// Price is A Composite containing details of a Price.
type Price struct {
	CurrencyCodeAttr string  `xml:"CurrencyCode,attr"`
	Value            float64 `xml:",chardata"`
}

// PriceType is A Composite containing details of a PriceType.
type PriceType struct {
	NamespaceAttr string `xml:"Namespace,attr"`
	Value         string `xml:",chardata"`
}

// PromotionalCode is A Composite containing details of a PromotionalCode.
type PromotionalCode struct {
	NamespaceAttr string `xml:"Namespace,attr,omitempty"`
	Value         string `xml:",chardata"`
}

// ProprietaryId is A Composite containing details of a ProprietaryIdentifier.
type ProprietaryId struct {
	NamespaceAttr string `xml:"Namespace,attr"`
	Value         string `xml:",chardata"`
}

// Purpose is A Composite containing details of a Purpose.
type Purpose struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// RatingAgency is A Composite containing details of a RatingAgency.
type RatingAgency struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// RatingReason is A Composite containing details of a RatingReason.
type RatingReason struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Reason is A Composite containing details of a Reason.
type Reason struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// RelatedParty is A Composite containing details of a PartyRelatedPartyReference for the case where one Party is related to another one.
type RelatedParty struct {
	PartyRelatedPartyReference interface{}            `xml:"PartyRelatedPartyReference"`
	PartyRelationshipType      *PartyRelationshipType `xml:"PartyRelationshipType"`
}

// ReleaseRelationshipType is A Composite containing details of a ReleaseRelationshipType, e.g. between an AudioClipRelease and a VideoClipRelease.
type ReleaseRelationshipType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ReleaseTypeForReleaseNotification is Explanatory Note: This Composite is named ReleaseTypeForReleaseNotification to disambiguate it from the basic ReleaseType Composite. The name indicates that it is ERN specific.
type ReleaseTypeForReleaseNotification struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ResourceContainedResourceReference is A Composite containing details of a ResourceContainedResourceReference for the case where one Resource contains another one.
type ResourceContainedResourceReference struct {
	ResourceContainedResourceReference interface{} `xml:"ResourceContainedResourceReference"`
	DurationUsed                       string      `xml:"DurationUsed,omitempty"`
	StartPoint                         float64     `xml:"StartPoint,omitempty"`
	Purpose                            *Purpose    `xml:"Purpose,omitempty"`
}

// ResourceContainedResourceReferenceList is A Composite containing details of a ResourceContainedResourceReference.
type ResourceContainedResourceReferenceList struct {
	ResourceContainedResourceReference []*ResourceContainedResourceReference `xml:"ResourceContainedResourceReference"`
}

// ResourceContributorRole is A Composite containing details of a StudioRole.
type ResourceContributorRole struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ResourceId is A Composite containing details of a ProprietaryIdentifier of the Resource.
type ResourceId struct {
	IsReplacedAttr bool             `xml:"IsReplaced,attr,omitempty"`
	ISRC           string           `xml:"ISRC,omitempty"`
	ISMN           string           `xml:"ISMN,omitempty"`
	ISAN           string           `xml:"ISAN,omitempty"`
	VISAN          string           `xml:"VISAN,omitempty"`
	ISBN           string           `xml:"ISBN,omitempty"`
	ISSN           string           `xml:"ISSN,omitempty"`
	SICI           string           `xml:"SICI,omitempty"`
	CatalogNumber  *CatalogNumber   `xml:"CatalogNumber,omitempty"`
	ProprietaryId  []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// ResourceProprietaryId is A Composite containing details of a ProprietaryIdentifier of the Resource.
type ResourceProprietaryId struct {
	IsReplacedAttr bool             `xml:"IsReplaced,attr,omitempty"`
	ProprietaryId  []*ProprietaryId `xml:"ProprietaryId"`
}

// RightsClaimPolicyReason is A Composite containing details of a Reason for a rights claim Policy.
type RightsClaimPolicyReason struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// RightsType is A Composite containing details of a RightsType.
type RightsType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// SamplingRate is A Composite containing a SamplingRate and a UnitOfMeasure.
type SamplingRate struct {
	UnitOfMeasureAttr string  `xml:"UnitOfMeasure,attr,omitempty"`
	Value             float64 `xml:",chardata"`
}

// SessionType is A Composite containing details of a SessionType.
type SessionType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// SheetMusicCodecType is A Composite containing details of a SheetMusicCodecType.
type SheetMusicCodecType struct {
	VersionAttr          string `xml:"Version,attr,omitempty"`
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// SheetMusicId is A Composite containing details of a ProprietaryIdentifier of the SheetMusic.
type SheetMusicId struct {
	IsReplacedAttr bool             `xml:"IsReplaced,attr,omitempty"`
	ISMN           string           `xml:"ISMN,omitempty"`
	ProprietaryId  []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// SheetMusicType is A Composite containing details of a SheetMusicType.
type SheetMusicType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// SoftwareType is A Composite containing details of a SoftwareType.
type SoftwareType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// SoundRecordingId is A Composite containing details of a ProprietaryIdentifier of the SoundRecording (usually one per society involved in the messaging).
type SoundRecordingId struct {
	IsReplacedAttr bool             `xml:"IsReplaced,attr,omitempty"`
	ISRC           string           `xml:"ISRC,omitempty"`
	CatalogNumber  *CatalogNumber   `xml:"CatalogNumber,omitempty"`
	ProprietaryId  []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// SoundRecordingType is A Composite containing details of a SoundRecordingType.
type SoundRecordingType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// SpecialContributorType is A Composite containing details of a special Contributor or Artist type.
type SpecialContributorType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// SubGenreCategory is A Composite containing a Description of the SubGenre Category.
type SubGenreCategory struct {
	Value       []*SubGenreCategoryValue `xml:"Value"`
	Description []*TextWithoutTerritory  `xml:"Description,omitempty"`
}

// SubGenreCategoryValue is A Composite containing details of a SubGenre within the classical genre.
type SubGenreCategoryValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// TextCodecType is A Composite containing details of a TextCodecType.
type TextCodecType struct {
	VersionAttr          string `xml:"Version,attr,omitempty"`
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// TextId is A Composite containing details of a ProprietaryIdentifier of the Text (usually one per society involved in the messaging).
type TextId struct {
	IsReplacedAttr bool             `xml:"IsReplaced,attr,omitempty"`
	ISBN           string           `xml:"ISBN,omitempty"`
	ISSN           string           `xml:"ISSN,omitempty"`
	SICI           string           `xml:"SICI,omitempty"`
	ProprietaryId  []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// TextType is A Composite containing details of a TextType.
type TextType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// TextWithFormat is A Composite containing details of an Annotation, e.g. a Description or a Comment.
type TextWithFormat struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	FormatAttr                  string `xml:"Format,attr,omitempty"`
	NamespaceAttr               string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr        string `xml:"UserDefinedValue,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// TextWithoutTerritory is Explanatory Note: This Composite is named TextWithoutTerritory to disambiguate it from the basic TextWithFormat Composite.
type TextWithoutTerritory struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	FormatAttr                  string `xml:"Format,attr,omitempty"`
	NamespaceAttr               string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr        string `xml:"UserDefinedValue,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// TitleDisplayInformation is A Descriptor that precedes the display artist name when multiple display artist names are given.
type TitleDisplayInformation struct {
	LanguageAndScriptCodeAttr string    `xml:"LanguageAndScriptCode,attr,omitempty"`
	SequenceNumberAttr        int       `xml:"SequenceNumber,attr,omitempty"`
	IsDisplayedInTitle        bool      `xml:"IsDisplayedInTitle"`
	Prefix                    []*Prefix `xml:"Prefix,omitempty"`
}

// ValidityPeriod is A Composite containing details of the Date and Place of an Event that marks the end of the Period (in ISO 8601 format: YYYY-MM-DD). The EndDate must not be earlier than the StartDate if both are provided.
type ValidityPeriod struct {
	StartDate *EventDate `xml:"StartDate,omitempty"`
	EndDate   *EventDate `xml:"EndDate,omitempty"`
}

// Venue is A specific studio of the venue where a Session took place.
type Venue struct {
	VenueName     string            `xml:"VenueName,omitempty"`
	VenueAddress  string            `xml:"VenueAddress,omitempty"`
	TerritoryCode *AllTerritoryCode `xml:"TerritoryCode,omitempty"`
	LocationCode  string            `xml:"LocationCode,omitempty"`
	VenueRoom     string            `xml:"VenueRoom,omitempty"`
}

// VersionType is A Composite containing details of a VersionType.
type VersionType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// VideoCodecType is A Composite containing details of a VideoCodecType.
type VideoCodecType struct {
	VersionAttr          string `xml:"Version,attr,omitempty"`
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// VideoDefinitionType is A Composite containing details of a VideoDefinitionType.
type VideoDefinitionType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// VideoId is An Identifier of the Video assigned by the Entertainment Identifier Registry Association (EIDR).
type VideoId struct {
	IsReplacedAttr bool             `xml:"IsReplaced,attr,omitempty"`
	ISRC           string           `xml:"ISRC,omitempty"`
	ISAN           string           `xml:"ISAN,omitempty"`
	VISAN          string           `xml:"VISAN,omitempty"`
	CatalogNumber  *CatalogNumber   `xml:"CatalogNumber,omitempty"`
	ProprietaryId  []*ProprietaryId `xml:"ProprietaryId,omitempty"`
	EIDR           []string         `xml:"EIDR,omitempty"`
}

// DdexIsoDate is Format: A Date represented as a calendar Year, Month or Day (in ISO 8601 format: YYYY, YYYY-MM or YYYY-MM-DD).
type DdexIsoDate string

// DdexLanguageAndScriptCodeWithRestriction is An Identifier identifying a Language and a Script, enforced by a restriction.
type DdexLanguageAndScriptCodeWithRestriction string

// DdexLocalPartyAnchorReference is A LocalAnchorReference which acts as a reference to a local Identifier of a Party. This LocalAnchorReference is a xs:string starting with the letter P.
type DdexLocalPartyAnchorReference string

// DdexLocalResourceAnchorReference is A LocalAnchorReference which acts as a reference to a local Identifier of a Resource. This LocalAnchorReference is a xs:string starting with the letter A.
type DdexLocalResourceAnchorReference string
