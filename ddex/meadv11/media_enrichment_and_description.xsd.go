// Code generated by xgen. DO NOT EDIT.

package meadv11

// MeadMessage is A Composite containing detailed information about one or more Releases.
type MeadMessage struct {
	AvsVersionIdAttr          string                   `xml:"AvsVersionId,attr"`
	LanguageAndScriptCodeAttr string                   `xml:"LanguageAndScriptCode,attr,omitempty"`
	MessageHeader             *MessageHeader           `xml:"MessageHeader"`
	SubscriptionId            string                   `xml:"SubscriptionId,omitempty"`
	MetadataSourceList        *MetadataSourceList      `xml:"MetadataSourceList,omitempty"`
	WorkInformationList       *WorkInformationList     `xml:"WorkInformationList,omitempty"`
	ResourceInformationList   *ResourceInformationList `xml:"ResourceInformationList,omitempty"`
	ReleaseInformationList    *ReleaseInformationList  `xml:"ReleaseInformationList,omitempty"`
}

// Feed is A Composite containing details of an entry.
type Feed struct {
	Author      []*Person    `xml:"author,omitempty"`
	Category    []*Category  `xml:"category,omitempty"`
	Contributor []*Person    `xml:"contributor,omitempty"`
	Generator   []*Generator `xml:"generator,omitempty"`
	Icon        []*Icon      `xml:"icon,omitempty"`
	Id          []*Id        `xml:"id"`
	Link        []*Link      `xml:"link,omitempty"`
	Logo        []*Logo      `xml:"logo,omitempty"`
	Rights      []*Text      `xml:"rights,omitempty"`
	Subtitle    []*Text      `xml:"subtitle,omitempty"`
	Title       []*Text      `xml:"title"`
	Updated     []*DateTime  `xml:"updated"`
	Entry       []*Entry     `xml:"entry,omitempty"`
}

// AbsolutePitch is A Composite containing details of a modulation.
type AbsolutePitch struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   float64                    `xml:"Value"`
	Modulation              []*Modulation              `xml:"Modulation,omitempty"`
}

// Activity is A Territory to which the activity applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type Activity struct {
	MetadataSourceReference        []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                          *ActivityValue             `xml:"Value"`
	Description                    []*TextWithoutTerritory    `xml:"Description,omitempty"`
	LanguageAndScriptOfActivity    []string                   `xml:"LanguageAndScriptOfActivity,omitempty"`
	TerritoryOfActivityDescription []string                   `xml:"TerritoryOfActivityDescription,omitempty"`
}

// ActivityValue is A Composite containing details of an activity value.
type ActivityValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// AlternativeTitle is A Language and script of the Title as defined in IETF RfC 5646, provided as lang[-script][-region][-variant].
type AlternativeTitle struct {
	TitleTypeAttr            string                     `xml:"TitleType,attr,omitempty"`
	NamespaceAttr            string                     `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr     string                     `xml:"UserDefinedValue,attr,omitempty"`
	MetadataSourceReference  []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	TitleText                *TitleText                 `xml:"TitleText"`
	SubTitle                 *TitleText                 `xml:"SubTitle,omitempty"`
	LanguageAndScriptOfTitle []string                   `xml:"LanguageAndScriptOfTitle,omitempty"`
}

// Annotation is The text of the Annotation.
type Annotation struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Text                    *TextWithFormat            `xml:"Text"`
}

// ArtisticStyle is A Territory to which the artistic style applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type ArtisticStyle struct {
	MetadataSourceReference             []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                               *ArtistTypeValue           `xml:"Value"`
	TerritoryOfArtisticStyleDescription []string                   `xml:"TerritoryOfArtisticStyleDescription,omitempty"`
}

// BeatsPerMinute is A Composite containing details of a modulation.
type BeatsPerMinute struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   float64                    `xml:"Value"`
	Modulation              []*Modulation              `xml:"Modulation,omitempty"`
}

// ChildWorkHierarchy is A Composite containing details of a form of the Work (e.g. Concerto, Aria, 12 bar blues, etc.).
type ChildWorkHierarchy struct {
	IsDescribedElement bool                      `xml:"IsDescribedElement"`
	IsComplete         bool                      `xml:"IsComplete,omitempty"`
	SequenceNumber     int                       `xml:"SequenceNumber,omitempty"`
	WorkId             *MusicalWorkIdWithoutFlag `xml:"WorkId"`
	WorkTitle          []*WorkTitle              `xml:"WorkTitle,omitempty"`
	Child              []*ChildWorkHierarchy     `xml:"Child,omitempty"`
	Form               *Form                     `xml:"Form,omitempty"`
}

// Contributor is A Role played by the Contributor.
type Contributor struct {
	Identifier *DetailedPartyId            `xml:"Identifier,omitempty"`
	Name       *PartyNameWithPronunciation `xml:"Name,omitempty"`
	Role       []*ResourceContributorRole  `xml:"Role,omitempty"`
}

// DanceStyle is A Territory to which the dance style applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type DanceStyle struct {
	MetadataSourceReference          []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                            *DanceStyleValue           `xml:"Value"`
	Description                      []*TextWithoutTerritory    `xml:"Description,omitempty"`
	LanguageAndScriptOfDanceStyle    []string                   `xml:"LanguageAndScriptOfDanceStyle,omitempty"`
	TerritoryOfDanceStyleDescription []string                   `xml:"TerritoryOfDanceStyleDescription,omitempty"`
}

// DanceStyleValue is A Composite containing details of a dance style value.
type DanceStyleValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// DerivedRecording is A Composite containing details of a DisplayArtist.
type DerivedRecording struct {
	MetadataSourceReference []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	ResourceId              *ResourceIdWithoutFlag              `xml:"ResourceId"`
	RelatedResourceType     *RelatedResourceType                `xml:"RelatedResourceType,omitempty"`
	Title                   []*TitleWithPronunciation           `xml:"Title"`
	DisplayArtistName       *DisplayArtistNameWithPronunciation `xml:"DisplayArtistName"`
	DisplayArtist           []*PartyDescriptorWithPronunciation `xml:"DisplayArtist,omitempty"`
}

// DisplaySubTitle is The string describing the pronunciation.
type DisplaySubTitle struct {
	SequenceNumberAttr     int              `xml:"SequenceNumber,attr,omitempty"`
	IsDisplayedInTitleAttr bool             `xml:"IsDisplayedInTitle,attr,omitempty"`
	NamespaceAttr          string           `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr   string           `xml:"UserDefinedValue,attr,omitempty"`
	SubTitleTypeAttr       interface{}      `xml:"SubTitleType,attr,omitempty"`
	Title                  string           `xml:"Title"`
	Pronunciation          []*Pronunciation `xml:"Pronunciation,omitempty"`
}

// DisplayTitle is A Composite containing details of a SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.
type DisplayTitle struct {
	LanguageAndScriptCodeAttr   string             `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string             `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool               `xml:"IsDefault,attr,omitempty"`
	TitleText                   *TitleText         `xml:"TitleText"`
	SubTitle                    []*DisplaySubTitle `xml:"SubTitle,omitempty"`
}

// Entry is A Composite containing details of a Party. This is either the only entity about which the relevant MeadMessage talks or the main one.
type Entry struct {
	AvsVersionIdAttr string      `xml:"AvsVersionId,attr"`
	Author           []*Person   `xml:"author,omitempty"`
	Category         []*Category `xml:"category,omitempty"`
	Content          []*Content  `xml:"content,omitempty"`
	Contributor      []*Person   `xml:"contributor,omitempty"`
	Id               []*Id       `xml:"id"`
	Link             []*Link     `xml:"link,omitempty"`
	Published        []*DateTime `xml:"published,omitempty"`
	Rights           []*Text     `xml:"rights,omitempty"`
	Source           []*Source   `xml:"source,omitempty"`
	Summary          []*Text     `xml:"summary,omitempty"`
	Title            []*Text     `xml:"title"`
	Updated          []*DateTime `xml:"updated"`
	SubscriptionId   []string    `xml:"SubscriptionId"`
	Work             []*Work     `xml:"Work"`
	Resource         []*Resource `xml:"Resource"`
	Release          []*Release  `xml:"Release"`
	Party            []*Party    `xml:"Party"`
}

// Flag is The value of the Flag
type Flag struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   bool                       `xml:"Value"`
}

// Form is A Composite containing details of a form value.
type Form struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *FormValue                 `xml:"Value"`
}

// FormValue is A Composite containing details of a form of a Work.
type FormValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// GenreCategory is A Composite containing a Description of the Genre Category.
type GenreCategory struct {
	MetadataSourceReference             []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	TerritoryOfGenreCategoryDescription []string                   `xml:"TerritoryOfGenreCategoryDescription,omitempty"`
	Value                               *GenreCategoryValue        `xml:"Value"`
	Description                         []*TextWithoutTerritory    `xml:"Description,omitempty"`
}

// Harmony is A Composite containing details of a harmony modulation.
type Harmony struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	RootChordNote           *RootChordNote             `xml:"RootChordNote"`
	RootChordQuality        *RootChordQuality          `xml:"RootChordQuality,omitempty"`
	Mode                    *Mode                      `xml:"Mode,omitempty"`
	Modulation              []*HarmonyModulation       `xml:"Modulation,omitempty"`
}

// HarmonyModulation is A mode of the modulation, i.e. a type of musical scale coupled with a set of characteristic melodic behaviours.
type HarmonyModulation struct {
	StartPoint       float64           `xml:"StartPoint"`
	EndPoint         float64           `xml:"EndPoint,omitempty"`
	StartBar         int               `xml:"StartBar"`
	EndBar           int               `xml:"EndBar,omitempty"`
	RootChordNote    *RootChordNote    `xml:"RootChordNote,omitempty"`
	RootChordQuality *RootChordQuality `xml:"RootChordQuality,omitempty"`
	Mode             *Mode             `xml:"Mode,omitempty"`
}

// ImpactDate is A Territory in which the impact Date applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type ImpactDate struct {
	Date          string                  `xml:"Date"`
	TerritoryCode []*CurrentTerritoryCode `xml:"TerritoryCode,omitempty"`
}

// Instrument is The value of the instrument.
type Instrument struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *InstrumentValue           `xml:"Value"`
}

// InstrumentUsed is The value of the instrument.
type InstrumentUsed struct {
	IsFeaturedAttr          bool                       `xml:"IsFeatured,attr,omitempty"`
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *InstrumentValue           `xml:"Value"`
}

// InstrumentValue is A Composite containing details of an Instrument.
type InstrumentValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Intensity is The value of the intensity.
type Intensity struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *IntensityValue            `xml:"Value"`
}

// IntensityValue is A Composite containing details of an intensity.
type IntensityValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// LocationAndDateOfSession is A Composite containing details of a Contributor.
type LocationAndDateOfSession struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	SessionType             []*SessionType             `xml:"SessionType,omitempty"`
	Period                  *Period                    `xml:"Period,omitempty"`
	Venue                   []*Venue                   `xml:"Venue,omitempty"`
	Comment                 *TextWithFormat            `xml:"Comment,omitempty"`
	Contributor             []*Contributor             `xml:"Contributor,omitempty"`
}

// Lyrics is The string describing the pronunciation.
type Lyrics struct {
	SequenceNumberAttr             int                        `xml:"SequenceNumber,attr,omitempty"`
	LyricsTypeAttr                 string                     `xml:"LyricsType,attr,omitempty"`
	LyricsTypeNamespaceAttr        string                     `xml:"LyricsTypeNamespace,attr,omitempty"`
	LyricsTypeUserDefinedValueAttr string                     `xml:"LyricsTypeUserDefinedValue,attr,omitempty"`
	IsMisquotedAttr                bool                       `xml:"IsMisquoted,attr,omitempty"`
	MetadataSourceReference        []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Text                           *LyricsText                `xml:"Text"`
	LanguageAndScriptOfLyrics      []string                   `xml:"LanguageAndScriptOfLyrics,omitempty"`
	TerritoryOfLyricsDescription   []string                   `xml:"TerritoryOfLyricsDescription,omitempty"`
	Pronunciation                  []*Pronunciation           `xml:"Pronunciation,omitempty"`
}

// LyricsText is A Composite containing details of Lyrics.
type LyricsText struct {
	FormatAttr                 string `xml:"Format,attr"`
	FormatNamespaceAttr        string `xml:"FormatNamespace,attr,omitempty"`
	FormatUserDefinedValueAttr string `xml:"FormatUserDefinedValue,attr,omitempty"`
	IsCompleteAttr             bool   `xml:"IsComplete,attr,omitempty"`
	Value                      string `xml:",chardata"`
}

// Meter is The note that is equivalent to one beat.
type Meter struct {
	NumberOfBeatsInBar   int `xml:"NumberOfBeatsInBar"`
	NoteEquivalentToBeat int `xml:"NoteEquivalentToBeat"`
}

// Mode is A Composite containing details of a mode.
type Mode struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Modulation is The value of the beats per minute.
type Modulation struct {
	StartPoint float64 `xml:"StartPoint"`
	EndPoint   float64 `xml:"EndPoint,omitempty"`
	StartBar   int     `xml:"StartBar"`
	EndBar     int     `xml:"EndBar,omitempty"`
	Value      float64 `xml:"Value"`
}

// Mood is A Territory to which the Mood applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type Mood struct {
	MoodTypeAttr               string                     `xml:"MoodType,attr,omitempty"`
	MetadataSourceReference    []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                      *MoodValue                 `xml:"Value"`
	Description                []*TextWithoutTerritory    `xml:"Description,omitempty"`
	LanguageAndScriptOfMood    []string                   `xml:"LanguageAndScriptOfMood,omitempty"`
	TerritoryOfMoodDescription []string                   `xml:"TerritoryOfMoodDescription,omitempty"`
}

// MoodValue is A Composite containing details of a Mood value.
type MoodValue struct {
	NamespaceAttr            string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr     string `xml:"UserDefinedValue,attr,omitempty"`
	AppliesToCompositionAttr bool   `xml:"AppliesToComposition,attr,omitempty"`
	AppliesToLyricsAttr      bool   `xml:"AppliesToLyrics,attr,omitempty"`
	Value                    string `xml:",chardata"`
}

// Party is An International Standard Name Identifier, the ISO 27729 Standard Identifier for names, of the Party for which information is provided. DDEX will enforce the syntax [0-9]{15}[X0-9] using XML Schema in the future.
type Party struct {
	ISNI          string           `xml:"ISNI,omitempty"`
	DPID          interface{}      `xml:"DPID,omitempty"`
	IpiNameNumber interface{}      `xml:"IpiNameNumber,omitempty"`
	IPN           string           `xml:"IPN,omitempty"`
	ProprietaryId []*ProprietaryId `xml:"ProprietaryId,omitempty"`
	PartyName     string           `xml:"PartyName,omitempty"`
}

// RecordingPart is An Annotation providing information on the usage of the Recording.
type RecordingPart struct {
	SequenceNumberAttr      int                        `xml:"SequenceNumber,attr,omitempty"`
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Unit                    string                     `xml:"Unit"`
	StartPoint              float64                    `xml:"StartPoint,omitempty"`
	EndPoint                float64                    `xml:"EndPoint,omitempty"`
	RecordingPartType       *RecordingPartType         `xml:"RecordingPartType,omitempty"`
	Comment                 []*Annotation              `xml:"Comment,omitempty"`
	UsageInformation        []*TextWithFormat          `xml:"UsageInformation,omitempty"`
}

// RelatedWork is A Composite containing details of a writer of the Work for which information is provided.
type RelatedWork struct {
	MetadataSourceReference []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	WorkId                  *MusicalWorkIdWithoutFlag           `xml:"WorkId"`
	WorkTitle               []*WorkTitle                        `xml:"WorkTitle,omitempty"`
	WorkRelationshipType    *WorkRelationshipType               `xml:"WorkRelationshipType"`
	Writer                  []*PartyDescriptorWithPronunciation `xml:"Writer,omitempty"`
}

// ReleaseInformation is A Composite containing details of an Image relating to the Release.
type ReleaseInformation struct {
	PriorityPeriodStartDateAttr string                         `xml:"PriorityPeriodStartDate,attr,omitempty"`
	PriorityPeriodEndDateAttr   string                         `xml:"PriorityPeriodEndDate,attr,omitempty"`
	ApplicableTerritoryCodeAttr string                         `xml:"ApplicableTerritoryCode,attr,omitempty"`
	ReleaseSummary              *ReleaseSummary                `xml:"ReleaseSummary"`
	GenreCategory               []*GenreCategory               `xml:"GenreCategory,omitempty"`
	SubGenreCategory            []*SubGenreCategory            `xml:"SubGenreCategory,omitempty"`
	Focus                       []*Focus                       `xml:"Focus,omitempty"`
	Mood                        []*Mood                        `xml:"Mood,omitempty"`
	ArtisticStyle               []*ArtisticStyle               `xml:"ArtisticStyle,omitempty"`
	Theme                       []*Theme                       `xml:"Theme,omitempty"`
	Activity                    []*Activity                    `xml:"Activity,omitempty"`
	CommentaryNote              []*CommentaryNote              `xml:"CommentaryNote,omitempty"`
	Epoch                       []*Epoch                       `xml:"Epoch,omitempty"`
	ArtisticInfluence           []*ArtisticInfluence           `xml:"ArtisticInfluence,omitempty"`
	IsSimilar                   []*SimilarRelease              `xml:"IsSimilar,omitempty"`
	HistoricChartingInformation []*HistoricChartingInformation `xml:"HistoricChartingInformation,omitempty"`
	Award                       []*Award                       `xml:"Award,omitempty"`
	AlternativeTitle            []*AlternativeTitle            `xml:"AlternativeTitle,omitempty"`
	Image                       []*Image                       `xml:"Image,omitempty"`
}

// ReleaseInformationList is A Composite containing detailed information about a Release.
type ReleaseInformationList struct {
	ReleaseInformation []*ReleaseInformation `xml:"ReleaseInformation"`
}

// ReleaseSummary is A Composite containing details of a DisplayArtist of the Release for which information is provided.
type ReleaseSummary struct {
	ReleaseId         *ReleaseId                            `xml:"ReleaseId"`
	DisplayTitle      []*DisplayTitle                       `xml:"DisplayTitle,omitempty"`
	DisplayArtistName []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist     []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
}

// RelevantResource is A Type of relationship between two Resources.
type RelevantResource struct {
	ResourceId               *ResourceIdWithoutFlag    `xml:"ResourceId"`
	ResourceRelationshipType *ResourceRelationshipType `xml:"ResourceRelationshipType"`
}

// ResourceInformation is A Composite containing details of an Image relating to the Resource.
type ResourceInformation struct {
	PriorityPeriodStartDateAttr string                         `xml:"PriorityPeriodStartDate,attr,omitempty"`
	PriorityPeriodEndDateAttr   string                         `xml:"PriorityPeriodEndDate,attr,omitempty"`
	ApplicableTerritoryCodeAttr string                         `xml:"ApplicableTerritoryCode,attr,omitempty"`
	ResourceSummary             *ResourceSummary               `xml:"ResourceSummary"`
	GenreCategory               []*GenreCategory               `xml:"GenreCategory,omitempty"`
	SubGenreCategory            []*SubGenreCategory            `xml:"SubGenreCategory,omitempty"`
	Form                        *Form                          `xml:"Form,omitempty"`
	VocalRegister               []*VocalRegister               `xml:"VocalRegister,omitempty"`
	Focus                       []*Focus                       `xml:"Focus,omitempty"`
	AbsolutePitch               []*AbsolutePitch               `xml:"AbsolutePitch,omitempty"`
	TimeSignature               []*TimeSignature               `xml:"TimeSignature,omitempty"`
	Tempo                       []*TempoValue                  `xml:"Tempo,omitempty"`
	BeatsPerMinute              []*BeatsPerMinute              `xml:"BeatsPerMinute,omitempty"`
	Intensity                   []*Intensity                   `xml:"Intensity,omitempty"`
	InstrumentUsed              []*InstrumentUsed              `xml:"InstrumentUsed,omitempty"`
	Harmony                     []*Harmony                     `xml:"Harmony,omitempty"`
	IsOriginal                  *Flag                          `xml:"IsOriginal"`
	IsCover                     *Flag                          `xml:"IsCover"`
	Mood                        []*Mood                        `xml:"Mood,omitempty"`
	DanceStyle                  []*DanceStyle                  `xml:"DanceStyle,omitempty"`
	RhythmStyle                 []*RhythmStyle                 `xml:"RhythmStyle,omitempty"`
	ArtisticStyle               []*ArtisticStyle               `xml:"ArtisticStyle,omitempty"`
	Theme                       []*Theme                       `xml:"Theme,omitempty"`
	Activity                    []*Activity                    `xml:"Activity,omitempty"`
	UsedMusicalWork             []*UsedMusicalWork             `xml:"UsedMusicalWork,omitempty"`
	RelatedResource             []*ResourceRelationship        `xml:"RelatedResource,omitempty"`
	Lyrics                      []*Lyrics                      `xml:"Lyrics,omitempty"`
	CommentaryNote              []*CommentaryNote              `xml:"CommentaryNote,omitempty"`
	Sample                      []*Sample                      `xml:"Sample,omitempty"`
	RecordingPart               []*RecordingPart               `xml:"RecordingPart,omitempty"`
	Usage                       []*Usage                       `xml:"Usage,omitempty"`
	ImpactDate                  []*ImpactDate                  `xml:"ImpactDate,omitempty"`
	ClassicalPeriod             *ClassicalPeriod               `xml:"ClassicalPeriod,omitempty"`
	Epoch                       []*Epoch                       `xml:"Epoch,omitempty"`
	ArtisticInfluence           []*ArtisticInfluence           `xml:"ArtisticInfluence,omitempty"`
	IsSimilar                   []*SimilarResource             `xml:"IsSimilar,omitempty"`
	HistoricChartingInformation []*HistoricChartingInformation `xml:"HistoricChartingInformation,omitempty"`
	Award                       []*Award                       `xml:"Award,omitempty"`
	LocationAndDateOfSession    []*LocationAndDateOfSession    `xml:"LocationAndDateOfSession,omitempty"`
	AlternativeTitle            []*AlternativeTitle            `xml:"AlternativeTitle,omitempty"`
	Image                       []*Image                       `xml:"Image,omitempty"`
}

// ResourceInformationList is A Composite containing detailed information about a Resource.
type ResourceInformationList struct {
	ResourceInformation []*ResourceInformation `xml:"ResourceInformation"`
}

// ResourceRelationship is A Composite containing details of a DisplayArtist.
type ResourceRelationship struct {
	MetadataSourceReference []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	ResourceId              *ResourceIdWithoutFlag              `xml:"ResourceId"`
	RelatedResourceType     *RelatedResourceType                `xml:"RelatedResourceType"`
	Title                   []*TitleWithPronunciation           `xml:"Title"`
	DisplayArtistName       *DisplayArtistNameWithPronunciation `xml:"DisplayArtistName"`
	DisplayArtist           []*PartyDescriptorWithPronunciation `xml:"DisplayArtist,omitempty"`
}

// ResourceSummary is A Composite containing details of a DisplayArtist of the Resource for which information is provided.
type ResourceSummary struct {
	ResourceId        *ResourceIdWithoutFlag                `xml:"ResourceId"`
	DisplayTitle      []*DisplayTitle                       `xml:"DisplayTitle,omitempty"`
	DisplayArtistName []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist     []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
}

// RhythmStyle is A Territory to which the rhythm style applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type RhythmStyle struct {
	MetadataSourceReference           []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                             *RhythmStyleValue          `xml:"Value"`
	Description                       []*TextWithoutTerritory    `xml:"Description,omitempty"`
	LanguageAndScriptOfRhythmStyle    []string                   `xml:"LanguageAndScriptOfRhythmStyle,omitempty"`
	TerritoryOfRhythmStyleDescription []string                   `xml:"TerritoryOfRhythmStyleDescription,omitempty"`
}

// RhythmStyleValue is A Composite containing details of a rhythm style value.
type RhythmStyleValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// RootChordNote is A Composite containing details of a root chord note.
type RootChordNote struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// RootChordQuality is A Composite containing details of a root chord quality.
type RootChordQuality struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Sample is A Composite containing a Description of the sample.
type Sample struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	RelatedResource         *ResourceSummary           `xml:"RelatedResource,omitempty"`
	SampleFeature           []*SampleFeature           `xml:"SampleFeature,omitempty"`
	ContainsSamples         bool                       `xml:"ContainsSamples"`
	IsContainedInSample     bool                       `xml:"IsContainedInSample"`
	HostTiming              []*Timing                  `xml:"HostTiming"`
	SampleTiming            []*Timing                  `xml:"SampleTiming"`
	Description             []*TextWithFormat          `xml:"Description,omitempty"`
}

// SampleFeature is A Composite containing details of a sample feature.
type SampleFeature struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// SimilarRelease is A Composite containing a Description of the similarity.
type SimilarRelease struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Release                 *Release                   `xml:"Release"`
	Description             []*Annotation              `xml:"Description"`
}

// SimilarResource is A Composite containing a Description of the similarity.
type SimilarResource struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Resource                *Resource                  `xml:"Resource"`
	Description             []*Annotation              `xml:"Description"`
}

// SimilarWork is A Composite containing a Description of the similarity.
type SimilarWork struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Work                    *Work                      `xml:"Work"`
	Description             []*Annotation              `xml:"Description"`
}

// SubGenreCategory is The text of the sub-genre.
type SubGenreCategory struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   []*SubGenreCategoryValue   `xml:"Value"`
}

// TempoValue is A Composite containing details of a tempo.
type TempoValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Theme is A Territory to which the Theme applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type Theme struct {
	ThemeTypeAttr               string                     `xml:"ThemeType,attr,omitempty"`
	MetadataSourceReference     []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                       *ThemeValue                `xml:"Value"`
	Description                 []*TextWithoutTerritory    `xml:"Description,omitempty"`
	LanguageAndScriptOfTheme    []string                   `xml:"LanguageAndScriptOfTheme,omitempty"`
	TerritoryOfThemeDescription []string                   `xml:"TerritoryOfThemeDescription,omitempty"`
}

// ThemeValue is A Composite containing details of a Theme value.
type ThemeValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// TimeSignature is A Composite containing details of a time signature modulation.
type TimeSignature struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Meter                   *Meter                     `xml:"Meter"`
	NoMeterAvailable        bool                       `xml:"NoMeterAvailable"`
	TooManyTempi            bool                       `xml:"TooManyTempi"`
	Modulation              []*TimeSignatureModulation `xml:"Modulation,omitempty"`
}

// TimeSignatureModulation is The value of the beats per minute.
type TimeSignatureModulation struct {
	StartPoint       float64 `xml:"StartPoint"`
	EndPoint         float64 `xml:"EndPoint,omitempty"`
	StartBar         int     `xml:"StartBar"`
	EndBar           int     `xml:"EndBar,omitempty"`
	Meter            *Meter  `xml:"Meter"`
	NoMeterAvailable bool    `xml:"NoMeterAvailable"`
	Value            float64 `xml:"Value"`
}

// Usage is A Composite containing details of a relevant Resource.
type Usage struct {
	MetadataSourceReference     []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	UsageDate                   []*EventDate               `xml:"UsageDate"`
	UsagePeriod                 []*UsagePeriod             `xml:"UsagePeriod"`
	Description                 []*TextWithFormat          `xml:"Description,omitempty"`
	TerritoryOfUsageDescription []string                   `xml:"TerritoryOfUsageDescription,omitempty"`
	SequenceNumber              int                        `xml:"SequenceNumber,omitempty"`
	RelevantResource            []*RelevantResource        `xml:"RelevantResource,omitempty"`
}

// UsagePeriod is A Composite containing details of the Date and Place of an Event that marks the end of the Period (in ISO 8601 format: YYYY-MM-DD). The EndDate must not be earlier than the StartDate if both are provided.
type UsagePeriod struct {
	StartDate *EventDateWithoutFlags `xml:"StartDate,omitempty"`
	EndDate   *EventDateWithoutFlags `xml:"EndDate,omitempty"`
}

// UsedMusicalWork is A Reference for a Party (specific to this Message) that is the author of this metadata. This is a LocalMetadataSourceAnchorReference starting with the letter U.
type UsedMusicalWork struct {
	MetadataSourceReference      []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	ResourceMusicalWorkReference []interface{}              `xml:"ResourceMusicalWorkReference"`
}

// WorkHierarchy is A Composite containing details of a form of the Work (e.g. Concerto, Aria, 12 bar blues, etc.).
type WorkHierarchy struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	IsDescribedElement      bool                       `xml:"IsDescribedElement"`
	IsComplete              bool                       `xml:"IsComplete,omitempty"`
	SequenceNumber          int                        `xml:"SequenceNumber,omitempty"`
	WorkId                  *MusicalWorkIdWithoutFlag  `xml:"WorkId"`
	WorkTitle               []*WorkTitle               `xml:"WorkTitle,omitempty"`
	Child                   []*ChildWorkHierarchy      `xml:"Child,omitempty"`
	Form                    *Form                      `xml:"Form,omitempty"`
}

// WorkInformation is A Composite containing details of a Work.
type WorkInformation struct {
	MusicalWorkReference interface{}          `xml:"MusicalWorkReference,omitempty"`
	WorkSummary          *WorkSummary         `xml:"WorkSummary"`
	GenreCategory        []*GenreCategory     `xml:"GenreCategory,omitempty"`
	SubGenreCategory     []*SubGenreCategory  `xml:"SubGenreCategory,omitempty"`
	Form                 *Form                `xml:"Form,omitempty"`
	VocalRegister        []*VocalRegister     `xml:"VocalRegister,omitempty"`
	Focus                []*Focus             `xml:"Focus,omitempty"`
	TimeSignature        []*TimeSignature     `xml:"TimeSignature,omitempty"`
	Tempo                []*TempoValue        `xml:"Tempo,omitempty"`
	TargetInstrument     []*Instrument        `xml:"TargetInstrument,omitempty"`
	Harmony              []*Harmony           `xml:"Harmony,omitempty"`
	Mood                 []*Mood              `xml:"Mood,omitempty"`
	DanceStyle           []*DanceStyle        `xml:"DanceStyle,omitempty"`
	RhythmStyle          []*RhythmStyle       `xml:"RhythmStyle,omitempty"`
	Theme                []*Theme             `xml:"Theme,omitempty"`
	Activity             []*Activity          `xml:"Activity,omitempty"`
	WorkHierarchy        []*WorkHierarchy     `xml:"WorkHierarchy,omitempty"`
	RelatedWork          []*RelatedWork       `xml:"RelatedWork,omitempty"`
	DerivedRecording     []*DerivedRecording  `xml:"DerivedRecording,omitempty"`
	Lyrics               []*Lyrics            `xml:"Lyrics,omitempty"`
	CommentaryNote       []*CommentaryNote    `xml:"CommentaryNote,omitempty"`
	ClassicalPeriod      *ClassicalPeriod     `xml:"ClassicalPeriod,omitempty"`
	Epoch                []*Epoch             `xml:"Epoch,omitempty"`
	ArtisticInfluence    []*ArtisticInfluence `xml:"ArtisticInfluence,omitempty"`
	IsSimilar            []*SimilarWork       `xml:"IsSimilar,omitempty"`
	Award                []*Award             `xml:"Award,omitempty"`
	AlternativeTitle     []*AlternativeTitle  `xml:"AlternativeTitle,omitempty"`
}

// WorkInformationList is A Composite containing detailed information about a Work.
type WorkInformationList struct {
	WorkInformation []*WorkInformation `xml:"WorkInformation"`
}

// WorkSummary is Further Reading: https://kb.ddex.net/implementing-each-standard/best-practices-for-all-ddex-standards/guidance-on-contributors%2C-artists-and-writers
type WorkSummary struct {
	MusicalWorkId *MusicalWorkIdWithoutFlag           `xml:"MusicalWorkId"`
	WorkTitle     []*TitleWithPronunciation           `xml:"WorkTitle,omitempty"`
	Writer        []*PartyDescriptorWithPronunciation `xml:"Writer"`
}

// Category is A Composite containing details of a category. The Atom cagegory construct is defined in section 4.2.2 of the format spec.
type Category struct {
	TermAttr   string `xml:"term,attr"`
	SchemeAttr string `xml:"scheme,attr,omitempty"`
	LabelAttr  string `xml:"label,attr,omitempty"`
}

// Content is A Composite containing details of a content. The Atom content construct is defined in section 4.1.3 of the format spec.
type Content struct {
	TypeAttr string `xml:"type,attr,omitempty"`
	SrcAttr  string `xml:"src,attr,omitempty"`
}

// DateTime is A Composite containing details of a published.
type DateTime struct {
	Value string `xml:",chardata"`
}

// Generator is A Composite containing details of a generator. The Atom generator element is defined in section 4.2.4 of the format spec.
type Generator struct {
	UriAttr     string `xml:"uri,attr,omitempty"`
	VersionAttr string `xml:"version,attr,omitempty"`
	Value       string `xml:",chardata"`
}

// Icon is A Composite containing details of an icon. The Atom icon construct is defined in section 4.2.5 of the format spec.
type Icon struct {
	Value string `xml:",chardata"`
}

// Id is A Composite containing details of an ID. The Atom id construct is defined in section 4.2.6 of the format spec.
type Id struct {
	Value string `xml:",chardata"`
}

// Link is A Composite containing details of a link. The Atom link construct is defined in section 3.4 of the format spec.
type Link struct {
	HrefAttr     string `xml:"href,attr"`
	RelAttr      string `xml:"rel,attr,omitempty"`
	TypeAttr     string `xml:"type,attr,omitempty"`
	HreflangAttr string `xml:"hreflang,attr,omitempty"`
	TitleAttr    string `xml:"title,attr,omitempty"`
	LengthAttr   int    `xml:"length,attr,omitempty"`
}

// Logo is A Composite containing details of a logo. The Atom logo construct is defined in section 4.2.8 of the format spec.
type Logo struct {
	Value string `xml:",chardata"`
}

// Person is A Composite containing details of a URI.
type Person struct {
	Name  []string      `xml:"name"`
	Uri   []*URI        `xml:"uri,omitempty"`
	Email []interface{} `xml:"email,omitempty"`
}

// Source is A Composite containing details of an update.
type Source struct {
	Author      []*Person    `xml:"author,omitempty"`
	Category    []*Category  `xml:"category,omitempty"`
	Contributor []*Person    `xml:"contributor,omitempty"`
	Generator   []*Generator `xml:"generator,omitempty"`
	Icon        []*Icon      `xml:"icon,omitempty"`
	Id          []*Id        `xml:"id,omitempty"`
	Link        []*Link      `xml:"link,omitempty"`
	Logo        []*Logo      `xml:"logo,omitempty"`
	Rights      []*Text      `xml:"rights,omitempty"`
	Subtitle    []*Text      `xml:"subtitle,omitempty"`
	Title       []*Text      `xml:"title,omitempty"`
	Updated     []*DateTime  `xml:"updated,omitempty"`
}

// Text is A Composite containing details of a text. The Atom text construct is defined in section 3.1 of the format spec.
type Text struct {
	TypeAttr string `xml:"type,attr,omitempty"`
}

// URI is A Composite containing details of a URI.
type URI struct {
	Value string `xml:",chardata"`
}

// AllTerritoryCode is A Composite containing details of a TerritoryCode.
type AllTerritoryCode struct {
	IdentifierTypeAttr string `xml:"IdentifierType,attr,omitempty"`
	Value              string `xml:",chardata"`
}

// ArtistTypeValue is A Composite containing details of an artist type value.
type ArtistTypeValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ArtisticInfluence is A Flag indicating whether the related Party has influenced the current Party (=true) or not (=false).
type ArtisticInfluence struct {
	MetadataSourceReference []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	Party                   []*PartyDescriptorWithPronunciation `xml:"Party,omitempty"`
	Work                    []*Work                             `xml:"Work,omitempty"`
	Resource                []*Resource                         `xml:"Resource,omitempty"`
	Release                 []*Release                          `xml:"Release,omitempty"`
	Description             []*TextWithFormat                   `xml:"Description,omitempty"`
	IsInfluenced            bool                                `xml:"IsInfluenced,omitempty"`
	IsInfluencer            bool                                `xml:"IsInfluencer,omitempty"`
}

// Award is A Comment on the award.
type Award struct {
	MetadataSourceReference []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	AwardingBody            *PartyDescriptorWithPronunciation   `xml:"AwardingBody"`
	AwardedParty            *PartyDescriptorWithPronunciation   `xml:"AwardedParty"`
	AwardName               *NameWithPronunciationAndScriptCode `xml:"AwardName"`
	Date                    *EventDate                          `xml:"Date"`
	IsWinner                bool                                `xml:"IsWinner"`
	Comment                 []*TextWithFormat                   `xml:"Comment,omitempty"`
}

// CatalogNumber is A Composite containing details of a CatalogNumber.
type CatalogNumber struct {
	NamespaceAttr string `xml:"Namespace,attr"`
	Value         string `xml:",chardata"`
}

// ChartEntry is A Comment regarding the charts.
type ChartEntry struct {
	Position int               `xml:"Position,omitempty"`
	Date     string            `xml:"Date,omitempty"`
	Duration *Duration         `xml:"Duration,omitempty"`
	Comment  []*TextWithFormat `xml:"Comment,omitempty"`
}

// ClassicalPeriod is A Territory to which the classical musical period applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type ClassicalPeriod struct {
	MetadataSourceReference               []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Name                                  *PeriodValue               `xml:"Name"`
	LanguageAndScriptOfClassicalPeriod    []string                   `xml:"LanguageAndScriptOfClassicalPeriod,omitempty"`
	TerritoryOfClassicalPeriodDescription []string                   `xml:"TerritoryOfClassicalPeriodDescription,omitempty"`
}

// CommentaryNote is An author of the commentary note.
type CommentaryNote struct {
	MetadataSourceReference              []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	Text                                 []*TextWithoutTerritory             `xml:"Text"`
	CommentaryNoteType                   []*CommentaryNoteType               `xml:"CommentaryNoteType"`
	LanguageAndScriptOfCommentaryNote    []string                            `xml:"LanguageAndScriptOfCommentaryNote,omitempty"`
	TerritoryOfCommentaryNoteDescription []string                            `xml:"TerritoryOfCommentaryNoteDescription,omitempty"`
	Author                               []*PartyDescriptorWithPronunciation `xml:"Author,omitempty"`
}

// CommentaryNoteType is A Composite containing details of a commentary note type.
type CommentaryNoteType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// CurrentTerritoryCode is A Composite containing details of a TerritoryCode.
type CurrentTerritoryCode struct {
	IdentifierTypeAttr string `xml:"IdentifierType,attr,omitempty"`
	Value              string `xml:",chardata"`
}

// Date is A Composite containing details of a Date.
type Date struct {
	IsApproximateAttr bool `xml:"IsApproximate,attr,omitempty"`
	*DdexIsoDate
}

// DetailedHashSum is The value of the HashSum.
type DetailedHashSum struct {
	Algorithm    *HashSumAlgorithmType `xml:"Algorithm"`
	Version      string                `xml:"Version,omitempty"`
	Parameter    string                `xml:"Parameter,omitempty"`
	DataType     string                `xml:"DataType,omitempty"`
	HashSumValue string                `xml:"HashSumValue"`
}

// DetailedPartyId is An International Standard Name Identifier, the ISO 27729 Standard Identifier for names. DDEX will enforce the syntax [0-9]{15}[X0-9] using XML Schema in the future.
type DetailedPartyId struct {
	ISNI           string           `xml:"ISNI,omitempty"`
	DPID           interface{}      `xml:"DPID,omitempty"`
	IpiNameNumber  interface{}      `xml:"IpiNameNumber,omitempty"`
	IPN            string           `xml:"IPN,omitempty"`
	CisacSocietyId string           `xml:"CisacSocietyId,omitempty"`
	ProprietaryId  []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// DisplayArtistNameWithDefault is Explanatory Note: This Composite is named DisplayArtistNameWithDefault to disambiguate it from the basic DisplayArtistName Composite.
type DisplayArtistNameWithDefault struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// DisplayArtistNameWithPronunciation is The string describing the pronunciation.
type DisplayArtistNameWithPronunciation struct {
	Name          *DisplayArtistNameWithDefault `xml:"Name"`
	Pronunciation []*Pronunciation              `xml:"Pronunciation,omitempty"`
}

// Duration is A Composite containing details of an entry in the charts.
type Duration struct {
	UnitOfDurationAttr   string `xml:"UnitOfDuration,attr"`
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Epoch is A Territory to which the epoch applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type Epoch struct {
	MetadataSourceReference     []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	Value                       []string                            `xml:"Value,omitempty"`
	RelatedArtist               []*PartyDescriptorWithPronunciation `xml:"RelatedArtist,omitempty"`
	RelatedCreation             []*RelatedCreation                  `xml:"RelatedCreation,omitempty"`
	StartDate                   *Date                               `xml:"StartDate,omitempty"`
	EndDate                     *Date                               `xml:"EndDate,omitempty"`
	LanguageAndScriptOfEpoch    []string                            `xml:"LanguageAndScriptOfEpoch,omitempty"`
	TerritoryOfEpochDescription []string                            `xml:"TerritoryOfEpochDescription,omitempty"`
}

// EventDate is A Composite containing details of the Date and Place of an Event.
type EventDate struct {
	IsApproximateAttr           bool   `xml:"IsApproximate,attr,omitempty"`
	IsBeforeAttr                bool   `xml:"IsBefore,attr,omitempty"`
	IsAfterAttr                 bool   `xml:"IsAfter,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	LocationDescriptionAttr     string `xml:"LocationDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	*DdexIsoDate
}

// EventDateTime is A Composite containing details of the DateTime and Place of an Event.
type EventDateTime struct {
	IsApproximateAttr         bool   `xml:"IsApproximate,attr,omitempty"`
	IsBeforeAttr              bool   `xml:"IsBefore,attr,omitempty"`
	IsAfterAttr               bool   `xml:"IsAfter,attr,omitempty"`
	TerritoryCodeAttr         string `xml:"TerritoryCode,attr,omitempty"`
	LocationDescriptionAttr   string `xml:"LocationDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// File is The size of the File in kilobytes.
type File struct {
	URI      string           `xml:"URI"`
	HashSum  *DetailedHashSum `xml:"HashSum,omitempty"`
	FileSize float64          `xml:"FileSize,omitempty"`
}

// Focus is A Comment regarding the focus track.
type Focus struct {
	IsDefaultAttr                         bool                                  `xml:"IsDefault,attr,omitempty"`
	MetadataSourceReference               []*MetadataSourceReference            `xml:"MetadataSourceReference,omitempty"`
	Party                                 []*PartyDescriptorWithPronunciation   `xml:"Party,omitempty"`
	DisplayArtistName                     []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist                         []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
	Writer                                []*PartyDescriptorWithPronunciation   `xml:"Writer,omitempty"`
	SequenceNumber                        int                                   `xml:"SequenceNumber,omitempty"`
	PeriodOfBeingFocus                    []*PeriodWithTime                     `xml:"PeriodOfBeingFocus,omitempty"`
	TerritoryOfBeingFocusTrackDescription []string                              `xml:"TerritoryOfBeingFocusTrackDescription,omitempty"`
	Comment                               []*TextWithoutTerritory               `xml:"Comment,omitempty"`
}

// GenreCategoryValue is A Composite containing details of a Genre Category value.
type GenreCategoryValue struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	NamespaceAttr             string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr      string `xml:"UserDefinedValue,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// HashSumAlgorithmType is A Composite containing details of a HashSumAlgorithmType.
type HashSumAlgorithmType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// HistoricChartingInformation is A Comment regarding the charts.
type HistoricChartingInformation struct {
	MetadataSourceReference []*MetadataSourceReference            `xml:"MetadataSourceReference,omitempty"`
	TerritoryCode           *CurrentTerritoryCode                 `xml:"TerritoryCode"`
	ChartName               []*NameWithPronunciationAndScriptCode `xml:"ChartName"`
	DurationInCharts        *Duration                             `xml:"DurationInCharts,omitempty"`
	TopPosition             int                                   `xml:"TopPosition,omitempty"`
	ChartEntry              []*ChartEntry                         `xml:"ChartEntry,omitempty"`
	Comment                 []*TextWithFormat                     `xml:"Comment,omitempty"`
}

// Image is A Composite containing details of the Type of the Image.
type Image struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	File                    *File                      `xml:"File"`
	ImageType               []*ImageType               `xml:"ImageType,omitempty"`
}

// ImageType is A Composite containing details of an ImageType.
type ImageType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// MessageAuditTrail is A Composite containing details of a Party handling the Message and the Time at which the handling took place.
type MessageAuditTrail struct {
	MessageAuditTrailEvent []*MessageAuditTrailEvent `xml:"MessageAuditTrailEvent"`
}

// MessageAuditTrailEvent is The DateTime at which the Message was handled by the MessagingParty (the only allowed format is ISO 8601: YYYY-MM-DDThh:mm:ssTZD).
type MessageAuditTrailEvent struct {
	MessagingPartyDescriptor *MessagingPartyWithoutCode `xml:"MessagingPartyDescriptor"`
	DateTime                 string                     `xml:"DateTime"`
}

// MessageHeader is The indicator used to distinguish a live Message from a test Message.
type MessageHeader struct {
	MessageThreadId        string                       `xml:"MessageThreadId,omitempty"`
	MessageId              string                       `xml:"MessageId"`
	MessageFileName        string                       `xml:"MessageFileName,omitempty"`
	MessageSender          *MessagingPartyWithoutCode   `xml:"MessageSender"`
	SentOnBehalfOf         *MessagingPartyWithoutCode   `xml:"SentOnBehalfOf,omitempty"`
	MessageRecipient       []*MessagingPartyWithoutCode `xml:"MessageRecipient"`
	MessageCreatedDateTime string                       `xml:"MessageCreatedDateTime"`
	MessageAuditTrail      *MessageAuditTrail           `xml:"MessageAuditTrail,omitempty"`
	MessageControlType     string                       `xml:"MessageControlType,omitempty"`
}

// MessagingPartyWithoutCode is Explanatory Note: This Composite is named MessagingPartyWithoutCode to disambiguate it from the basic MessagingParty Composite.
type MessagingPartyWithoutCode struct {
	PartyId     interface{}           `xml:"PartyId"`
	PartyName   *PartyNameWithoutCode `xml:"PartyName,omitempty"`
	TradingName string                `xml:"TradingName,omitempty"`
}

// MetadataSource is A Composite containing details of a Party that created metadata.
type MetadataSource struct {
	SourceReference    interface{}                   `xml:"SourceReference"`
	PartyId            []*DetailedPartyId            `xml:"PartyId"`
	PartyName          []*PartyNameWithPronunciation `xml:"PartyName"`
	MetadataSourceType *MetadataSourceType           `xml:"MetadataSourceType"`
}

// MetadataSourceList is A Composite containing details of a metadata source.
type MetadataSourceList struct {
	MetadataSource []*MetadataSource `xml:"MetadataSource"`
}

// MetadataSourceReference is A Composite containing details of a claim made by a metadata provider.
type MetadataSourceReference struct {
	AssertionDateTimeAttr string  `xml:"AssertionDateTime,attr,omitempty"`
	StatusAttr            string  `xml:"Status,attr,omitempty"`
	WeightAttr            float64 `xml:"Weight,attr,omitempty"`
	*DdexLocalMetadataSourceAnchorReference
}

// MetadataSourceType is A Composite containing details of a MetadataSourceType.
type MetadataSourceType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// MusicalWorkIdWithoutFlag is A Composite containing details of a ProprietaryIdentifier of the MusicalWork.
type MusicalWorkIdWithoutFlag struct {
	ISWC                  string           `xml:"ISWC,omitempty"`
	OpusNumber            string           `xml:"OpusNumber,omitempty"`
	ComposerCatalogNumber []string         `xml:"ComposerCatalogNumber,omitempty"`
	ProprietaryId         []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// Name is A Composite containing details of a Name.
type Name struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// NameWithPronunciationAndScriptCode is The string describing the pronunciation.
type NameWithPronunciationAndScriptCode struct {
	Name          string           `xml:"Name"`
	Pronunciation []*Pronunciation `xml:"Pronunciation,omitempty"`
}

// PartyDescriptorWithPronunciation is A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, producers or other Creators.
type PartyDescriptorWithPronunciation struct {
	PartyId   []*DetailedPartyId            `xml:"PartyId"`
	PartyName []*PartyNameWithPronunciation `xml:"PartyName"`
}

// PartyNameWithPronunciation is A Composite containing a short version of the PartyName (e.g. for use on devices with a small display).
type PartyNameWithPronunciation struct {
	LanguageAndScriptCodeAttr   string                              `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string                              `xml:"ApplicableTerritoryCode,attr,omitempty"`
	FullName                    *NameWithPronunciationAndScriptCode `xml:"FullName"`
	FullNameAsciiTranscribed    *NameWithPronunciationAndScriptCode `xml:"FullNameAsciiTranscribed,omitempty"`
	FullNameIndexed             *NameWithPronunciationAndScriptCode `xml:"FullNameIndexed,omitempty"`
	NamesBeforeKeyName          *NameWithPronunciationAndScriptCode `xml:"NamesBeforeKeyName,omitempty"`
	KeyName                     *NameWithPronunciationAndScriptCode `xml:"KeyName,omitempty"`
	NamesAfterKeyName           *NameWithPronunciationAndScriptCode `xml:"NamesAfterKeyName,omitempty"`
	AbbreviatedName             *NameWithPronunciationAndScriptCode `xml:"AbbreviatedName,omitempty"`
}

// PartyNameWithoutCode is A short version of the PartyName (e.g. for use on devices with a small display).
type PartyNameWithoutCode struct {
	FullName                 string `xml:"FullName"`
	FullNameAsciiTranscribed string `xml:"FullNameAsciiTranscribed,omitempty"`
	FullNameIndexed          string `xml:"FullNameIndexed,omitempty"`
	NamesBeforeKeyName       string `xml:"NamesBeforeKeyName,omitempty"`
	KeyName                  string `xml:"KeyName,omitempty"`
	NamesAfterKeyName        string `xml:"NamesAfterKeyName,omitempty"`
	AbbreviatedName          string `xml:"AbbreviatedName,omitempty"`
}

// Period is A Composite containing details of the DateTime and Place of an Event that marks the end of the Period (in ISO 8601 format: YYYY-MM-DDThh:mm:ss). The EndDateTime must not be earlier than the StartDateTime if both are provided.
type Period struct {
	StartDate     *EventDate     `xml:"StartDate,omitempty"`
	EndDate       *EventDate     `xml:"EndDate,omitempty"`
	StartDateTime *EventDateTime `xml:"StartDateTime,omitempty"`
	EndDateTime   *EventDateTime `xml:"EndDateTime,omitempty"`
}

// PeriodValue is A Composite containing details of a musical period.
type PeriodValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// PeriodWithTime is The DateTime of an Event that marks the end of the Period (in ISO 8601 format: YYYY-MM-DDThh:mm:ss). The EndDateTime must not be earlier than the StartDateTime if both are provided.
type PeriodWithTime struct {
	StartDateTime string `xml:"StartDateTime,omitempty"`
	EndDateTime   string `xml:"EndDateTime,omitempty"`
}

// Pronunciation is A Composite containing details of a pronunciation of a Name.
type Pronunciation struct {
	IsCanonicalAttr              bool   `xml:"IsCanonical,attr,omitempty"`
	LanguageCodeAttr             string `xml:"LanguageCode,attr,omitempty"`
	EncodingTypeAttr             string `xml:"EncodingType,attr,omitempty"`
	EncodingNamespaceAttr        string `xml:"EncodingNamespace,attr,omitempty"`
	EncodingUserDefinedValueAttr string `xml:"EncodingUserDefinedValue,attr,omitempty"`
	Value                        string `xml:",chardata"`
}

// ProprietaryId is A Composite containing details of a ProprietaryIdentifier.
type ProprietaryId struct {
	NamespaceAttr string `xml:"Namespace,attr"`
	Value         string `xml:",chardata"`
}

// RecordingPartType is A Composite containing details of a RecordingPartType.
type RecordingPartType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	*RecordingPartType
}

// RelatedCreation is A Composite containing details of a Title of the Creation.
type RelatedCreation struct {
	ReleaseId     *ReleaseId                `xml:"ReleaseId"`
	ResourceId    *ResourceIdWithoutFlag    `xml:"ResourceId"`
	MusicalWorkId *MusicalWorkIdWithoutFlag `xml:"MusicalWorkId"`
	Title         *TitleWithPronunciation   `xml:"Title,omitempty"`
}

// RelatedResourceType is A Composite containing details of a RelatedResourceType.
type RelatedResourceType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Release is A Composite containing details of a DisplayArtist of the Release for which information is provided.
type Release struct {
	GRid                 string                                `xml:"GRid,omitempty"`
	ICPN                 string                                `xml:"ICPN,omitempty"`
	ProprietaryReleaseId string                                `xml:"ProprietaryReleaseId,omitempty"`
	ReleaseTitle         []*ReleaseTitle                       `xml:"ReleaseTitle"`
	DisplayArtistName    []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist        []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
}

// ReleaseId is A Composite containing details of a ProprietaryIdentifier of the Release.
type ReleaseId struct {
	GRid          string           `xml:"GRid,omitempty"`
	ISRC          string           `xml:"ISRC,omitempty"`
	ICPN          string           `xml:"ICPN,omitempty"`
	CatalogNumber *CatalogNumber   `xml:"CatalogNumber,omitempty"`
	ProprietaryId []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// ReleaseTitle is A Composite containing details of a ReleaseTitle.
type ReleaseTitle struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// Resource is A Composite containing details of a DisplayArtist of the Resource for which information is provided.
type Resource struct {
	ISRC                  string                                `xml:"ISRC,omitempty"`
	CatalogNumber         string                                `xml:"CatalogNumber,omitempty"`
	ProprietaryResourceId string                                `xml:"ProprietaryResourceId,omitempty"`
	ResourceTitle         []*ResourceTitle                      `xml:"ResourceTitle"`
	DisplayArtistName     []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist         []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
}

// ResourceContributorRole is A Composite containing details of a StudioRole.
type ResourceContributorRole struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ResourceIdWithoutFlag is A Composite containing details of a ProprietaryIdentifier of the Resource.
type ResourceIdWithoutFlag struct {
	ISRC          string           `xml:"ISRC,omitempty"`
	ISMN          string           `xml:"ISMN,omitempty"`
	ISAN          string           `xml:"ISAN,omitempty"`
	VISAN         string           `xml:"VISAN,omitempty"`
	ISBN          string           `xml:"ISBN,omitempty"`
	ISSN          string           `xml:"ISSN,omitempty"`
	SICI          string           `xml:"SICI,omitempty"`
	CatalogNumber *CatalogNumber   `xml:"CatalogNumber,omitempty"`
	ProprietaryId []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// ResourceRelationshipType is A Composite containing details of a ResourceRelationshipType.
type ResourceRelationshipType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ResourceTitle is A Composite containing details of a ResourceTitle.
type ResourceTitle struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// SessionType is A Composite containing details of a SessionType.
type SessionType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// SubGenreCategoryValue is A Composite containing details of a sub-genre within the classical genre.
type SubGenreCategoryValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// TextWithFormat is A Composite containing details of an Annotation, e.g. a Description or a Comment.
type TextWithFormat struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	FormatAttr                  string `xml:"Format,attr,omitempty"`
	NamespaceAttr               string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr        string `xml:"UserDefinedValue,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// TextWithoutTerritory is Explanatory Note: This Composite is named TextWithoutTerritory to disambiguate it from the basic TextWithFormat Composite.
type TextWithoutTerritory struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	FormatAttr                  string `xml:"Format,attr,omitempty"`
	NamespaceAttr               string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr        string `xml:"UserDefinedValue,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// TitleText is The string describing the pronunciation.
type TitleText struct {
	Title         string           `xml:"Title"`
	Pronunciation []*Pronunciation `xml:"Pronunciation,omitempty"`
}

// TitleWithPronunciation is A SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.
type TitleWithPronunciation struct {
	LanguageAndScriptCodeAttr string     `xml:"LanguageAndScriptCode,attr,omitempty"`
	TitleTypeAttr             string     `xml:"TitleType,attr,omitempty"`
	NamespaceAttr             string     `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr      string     `xml:"UserDefinedValue,attr,omitempty"`
	TitleText                 *TitleText `xml:"TitleText"`
	SubTitle                  *TitleText `xml:"SubTitle,omitempty"`
}

// Venue is A specific studio of the venue where a Session took place.
type Venue struct {
	VenueName     string            `xml:"VenueName,omitempty"`
	VenueAddress  string            `xml:"VenueAddress,omitempty"`
	TerritoryCode *AllTerritoryCode `xml:"TerritoryCode,omitempty"`
	LocationCode  string            `xml:"LocationCode,omitempty"`
	VenueRoom     string            `xml:"VenueRoom,omitempty"`
}

// VocalRegister is The value of the vocal register.
type VocalRegister struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *VocalRegisterValue        `xml:"Value"`
}

// VocalRegisterValue is A Composite containing details of a vocal register.
type VocalRegisterValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Work is A Composite containing details of a writer of the Work for which information is provided.
type Work struct {
	ISWC              string                              `xml:"ISWC,omitempty"`
	ProprietaryWorkId string                              `xml:"ProprietaryWorkId,omitempty"`
	WorkTitle         []*WorkTitle                        `xml:"WorkTitle"`
	Writer            []*PartyDescriptorWithPronunciation `xml:"Writer,omitempty"`
}

// WorkRelationshipType is A Composite containing details of a WorkRelationshipType.
type WorkRelationshipType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// WorkTitle is A Composite containing details of a WorkTitle.
type WorkTitle struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// EventDateWithoutFlags is Explanatory Note: This Composite is named EventDateWithoutFlags to disambiguate it from the basic EventDate Composite.
type EventDateWithoutFlags struct {
	IsApproximateAttr           bool   `xml:"IsApproximate,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	LocationDescriptionAttr     string `xml:"LocationDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	*DdexIsoDate
}

// Timing is The total Duration of the related Resource that has been used (this may be less than the total Duration of the Resource) (using the ISO 8601 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). The seconds section ss may include fractions (e.g. one minute and 30.5 seconds would be PT1M30.5S).
type Timing struct {
	StartPoint   string `xml:"StartPoint,omitempty"`
	DurationUsed string `xml:"DurationUsed,omitempty"`
}

// DdexLocalMetadataSourceAnchorReference is A LocalAnchorReference which acts as a reference to a local Identifier of a Party that is a source for metadata. This LocalAnchorReference is a xs:string starting with the letter U.
type DdexLocalMetadataSourceAnchorReference string

// DdexIsoDate is Format: A Date represented as a calendar Year, Month or Day (in ISO 8601 format: YYYY, YYYY-MM or YYYY-MM-DD).
type DdexIsoDate string
