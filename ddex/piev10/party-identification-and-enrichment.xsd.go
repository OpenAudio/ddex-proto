// Code generated by xgen. DO NOT EDIT.

package piev10

// PieMessage is A Composite containing detailed information about one or more Parties.
type PieMessage struct {
	AvsVersionIdAttr          string              `xml:"AvsVersionId,attr"`
	LanguageAndScriptCodeAttr string              `xml:"LanguageAndScriptCode,attr"`
	MessageHeader             *MessageHeader      `xml:"MessageHeader"`
	MetadataSourceList        *MetadataSourceList `xml:"MetadataSourceList,omitempty"`
	PartyList                 *PartyList          `xml:"PartyList"`
}

// PieRequestMessage is A Composite containing details of a Party for which information is requested.
type PieRequestMessage struct {
	AvsVersionIdAttr          string            `xml:"AvsVersionId,attr"`
	LanguageAndScriptCodeAttr string            `xml:"LanguageAndScriptCode,attr"`
	MessageHeader             *MessageHeader    `xml:"MessageHeader"`
	RequestedParty            []*RequestedParty `xml:"RequestedParty"`
}

// Feed is A Composite containing details of an entry.
type Feed struct {
	Author      []*Person    `xml:"author,omitempty"`
	Category    []*Category  `xml:"category,omitempty"`
	Contributor []*Person    `xml:"contributor,omitempty"`
	Generator   []*Generator `xml:"generator,omitempty"`
	Icon        []*Icon      `xml:"icon,omitempty"`
	Id          []*Id        `xml:"id"`
	Link        []*Link      `xml:"link,omitempty"`
	Logo        []*Logo      `xml:"logo,omitempty"`
	Rights      []*Text      `xml:"rights,omitempty"`
	Subtitle    []*Text      `xml:"subtitle,omitempty"`
	Title       []*Text      `xml:"title"`
	Updated     []*DateTime  `xml:"updated"`
	Entry       []*Entry     `xml:"entry,omitempty"`
}

// Contribution is A Composite containing details of the Date of the Event in which the contribution to the creation of the Resource was made. This is a string with the syntax YYYY[-MM[-DD]].
type Contribution struct {
	Role                          []*ContributorRole `xml:"Role"`
	IsPrimaryRole                 bool               `xml:"IsPrimaryRole,omitempty"`
	HasMadeFeaturedContribution   bool               `xml:"HasMadeFeaturedContribution,omitempty"`
	HasMadeContractedContribution bool               `xml:"HasMadeContractedContribution,omitempty"`
	Event                         *EventDate         `xml:"Event,omitempty"`
}

// CreationDescription is A Composite containing details of the Date and Place at which the Creation was published. This is a string with the syntax YYYY[-MM[-DD]].
type CreationDescription struct {
	Title             []*TitleWithUDV    `xml:"Title,omitempty"`
	DisplayArtistName *DisplayArtistName `xml:"DisplayArtistName,omitempty"`
	PublicationDate   *EventDate         `xml:"PublicationDate,omitempty"`
}

// DetailedPartyIdForParty is An International Standard Name Identifier, the ISO 27729 Standard Identifier for names. DDEX will enforce the syntax [0-9]{15}[X0-9] using XML Schema in the future.
type DetailedPartyIdForParty struct {
	IsDeprecatedAttr bool             `xml:"IsDeprecated,attr,omitempty"`
	ISNI             string           `xml:"ISNI,omitempty"`
	DPID             interface{}      `xml:"DPID,omitempty"`
	IpiNameNumber    interface{}      `xml:"IpiNameNumber,omitempty"`
	IPN              string           `xml:"IPN,omitempty"`
	CisacSocietyId   string           `xml:"CisacSocietyId,omitempty"`
	ProprietaryId    []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// Entry is A Composite containing details of a Party. This is either the only entity about which the relevant PieMessage talks or the main one.
type Entry struct {
	AvsVersionIdAttr string                     `xml:"AvsVersionId,attr"`
	Author           []*Person                  `xml:"author,omitempty"`
	Category         []*Category                `xml:"category,omitempty"`
	Content          []*Content                 `xml:"content,omitempty"`
	Contributor      []*Person                  `xml:"contributor,omitempty"`
	Id               []*Id                      `xml:"id"`
	Link             []*Link                    `xml:"link,omitempty"`
	Published        []*DateTime                `xml:"published,omitempty"`
	Rights           []*Text                    `xml:"rights,omitempty"`
	Source           []*Source                  `xml:"source,omitempty"`
	Summary          []*Text                    `xml:"summary,omitempty"`
	Title            []*Text                    `xml:"title"`
	Updated          []*DateTime                `xml:"updated"`
	SubscriptionId   []string                   `xml:"SubscriptionId"`
	Party            []*PartyDescriptorForEntry `xml:"Party"`
}

// Event is A Composite containing details of a Description of the Event.
type Event struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Date                    *EventDate                 `xml:"Date"`
	StartDate               *EventDate                 `xml:"StartDate,omitempty"`
	EndDate                 *EventDate                 `xml:"EndDate,omitempty"`
	EventType               *EventType                 `xml:"EventType"`
	EventDescription        []*Description             `xml:"EventDescription,omitempty"`
}

// EventType is A Composite containing details of an EventType.
type EventType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Focus is A Comment regarding the focus track.
type Focus struct {
	IsDefaultAttr                         bool                                  `xml:"IsDefault,attr,omitempty"`
	MetadataSourceReference               []*MetadataSourceReference            `xml:"MetadataSourceReference,omitempty"`
	FocusTrack                            *ResourceSummary                      `xml:"FocusTrack,omitempty"`
	FocusRelease                          *ReleaseSummary                       `xml:"FocusRelease,omitempty"`
	FocusWork                             *WorkSummary                          `xml:"FocusWork,omitempty"`
	DisplayArtistName                     []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist                         []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
	Writer                                []*PartyDescriptorWithPronunciation   `xml:"Writer,omitempty"`
	SequenceNumber                        int                                   `xml:"SequenceNumber,omitempty"`
	PeriodOfBeingFocus                    []*PeriodWithTime                     `xml:"PeriodOfBeingFocus,omitempty"`
	TerritoryOfBeingFocusTrackDescription []string                              `xml:"TerritoryOfBeingFocusTrackDescription,omitempty"`
	Comment                               []*TextWithoutTerritory               `xml:"Comment,omitempty"`
}

// Gender is The value of the Gender, based on self-identification.
type Gender struct {
	DoNotDisplayAttr        bool                       `xml:"DoNotDisplay,attr,omitempty"`
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *GenderValue               `xml:"Value"`
}

// GenderValue is A Composite containing details of a Gender Category value.
type GenderValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// NameWithPronunciation is The string describing the pronunciation.
type NameWithPronunciation struct {
	Name          string                   `xml:"Name"`
	Pronunciation []*PronunciationForParty `xml:"Pronunciation,omitempty"`
}

// NameWithScriptCode is The string describing the pronunciation.
type NameWithScriptCode struct {
	Name          string                   `xml:"Name"`
	Pronunciation []*PronunciationForParty `xml:"Pronunciation,omitempty"`
}

// Nationality is The value of the Nationality.
type Nationality struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *AllTerritoryCode          `xml:"Value"`
}

// Party is A Composite containing details of a Party.
type Party struct {
	LanguageAndScriptCodeAttr string                     `xml:"LanguageAndScriptCode,attr,omitempty"`
	PartyReference            interface{}                `xml:"PartyReference"`
	PartyId                   []*DetailedPartyIdForParty `xml:"PartyId"`
	PartyName                 []*PartyName               `xml:"PartyName"`
	PartyType                 *PartyType                 `xml:"PartyType"`
	Event                     []*Event                   `xml:"Event,omitempty"`
	RelatedParty              []*RelatedParty            `xml:"RelatedParty,omitempty"`
	RelatedCreation           []*RelatedCreationForParty `xml:"RelatedCreation,omitempty"`
	Gender                    *Gender                    `xml:"Gender,omitempty"`
	Nationality               []*Nationality             `xml:"Nationality,omitempty"`
	PrimaryRole               *PrimaryRole               `xml:"PrimaryRole,omitempty"`
	VocalRegister             *VocalRegister             `xml:"VocalRegister,omitempty"`
	Focus                     []*Focus                   `xml:"Focus,omitempty"`
	ArtistType                []*ArtistType              `xml:"ArtistType,omitempty"`
	ClassicalPeriod           *ClassicalPeriod           `xml:"ClassicalPeriod,omitempty"`
	Epoch                     []*Epoch                   `xml:"Epoch,omitempty"`
	ArtisticInfluence         []*ArtisticInfluence       `xml:"ArtisticInfluence,omitempty"`
	Award                     []*Award                   `xml:"Award,omitempty"`
	Biography                 []*Biography               `xml:"Biography,omitempty"`
	Image                     []*Image                   `xml:"Image,omitempty"`
	SocialMediaURL            *SocialMediaURL            `xml:"SocialMediaURL,omitempty"`
	CommentaryNote            []*CommentaryNote          `xml:"CommentaryNote,omitempty"`
}

// PartyDescriptorForEntry is The Name of the Party for which information is provided.
type PartyDescriptorForEntry struct {
	PartyId   *DetailedPartyId `xml:"PartyId,omitempty"`
	PartyName string           `xml:"PartyName,omitempty"`
}

// PartyList is A Composite containing details of a Party.
type PartyList struct {
	Party []*Party `xml:"Party"`
}

// PartyName is A Composite containing details of a Creation (a Work, a Release or a Resource) where the relationship is valid.
type PartyName struct {
	LanguageAndScriptCodeAttr   string                     `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string                     `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool                       `xml:"IsDefault,attr,omitempty"`
	IsCanonicalAttr             bool                       `xml:"IsCanonical,attr,omitempty"`
	MetadataSourceReference     []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	NameId                      []*NameId                  `xml:"NameId,omitempty"`
	PartyNameType               []*PartyNameType           `xml:"PartyNameType"`
	ReasonForNameChange         *ReasonForNameChange       `xml:"ReasonForNameChange,omitempty"`
	PartyNamePurpose            []*PartyNamePurpose        `xml:"PartyNamePurpose,omitempty"`
	PartyNameFormat             []*PartyNameFormat         `xml:"PartyNameFormat,omitempty"`
	FullName                    *NameWithScriptCode        `xml:"FullName,omitempty"`
	FullNameAsciiTranscribed    *NameWithPronunciation     `xml:"FullNameAsciiTranscribed,omitempty"`
	FullNameIndexed             *NameWithScriptCode        `xml:"FullNameIndexed,omitempty"`
	TitlesBeforeNames           string                     `xml:"TitlesBeforeNames,omitempty"`
	NamesBeforeKeyName          *NameWithScriptCode        `xml:"NamesBeforeKeyName,omitempty"`
	KeyName                     *NameWithScriptCode        `xml:"KeyName,omitempty"`
	NamesAfterKeyName           *NameWithScriptCode        `xml:"NamesAfterKeyName,omitempty"`
	TitlesAfterNames            string                     `xml:"TitlesAfterNames,omitempty"`
	ShortName                   []*NameWithScriptCode      `xml:"ShortName,omitempty"`
	AbbreviatedName             []*NameWithScriptCode      `xml:"AbbreviatedName,omitempty"`
	ValidityPeriod              []*ValidityPeriod          `xml:"ValidityPeriod,omitempty"`
	RelatedCreation             []*RelatedCreationForParty `xml:"RelatedCreation,omitempty"`
}

// PartyNameForRequest is A Composite containing a short version of the PartyName (e.g. for use on devices with a small display).
type PartyNameForRequest struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	FullName                  string `xml:"FullName,omitempty"`
	FullNameAsciiTranscribed  string `xml:"FullNameAsciiTranscribed,omitempty"`
	FullNameIndexed           string `xml:"FullNameIndexed,omitempty"`
	NamesBeforeKeyName        string `xml:"NamesBeforeKeyName,omitempty"`
	KeyName                   string `xml:"KeyName,omitempty"`
	NamesAfterKeyName         string `xml:"NamesAfterKeyName,omitempty"`
	AbbreviatedName           string `xml:"AbbreviatedName,omitempty"`
}

// PartyNameFormat is A Composite containing details of a PartyNameFormat.
type PartyNameFormat struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// PartyNamePurpose is A Composite containing details of a PartyNamePurpose.
type PartyNamePurpose struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// PartyNameType is A Composite containing details of a PartyNameType.
type PartyNameType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// PartyRelationshipType is A Composite containing details of a PartyRelationshipType.
type PartyRelationshipType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// PartyType is The value of the PartyType.
type PartyType struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *PartyTypeValue            `xml:"Value"`
}

// PartyTypeValue is A Composite containing details of a PartyType.
type PartyTypeValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// PrimaryRole is The value of the PrimaryRole.
type PrimaryRole struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *ContributorRole           `xml:"Value"`
}

// PronunciationForParty is Explanatory Note: This Composite is named PronunciationForParty to disambiguate it from the basic Pronunciation Composite.
type PronunciationForParty struct {
	IsCanonicalAttr              bool   `xml:"IsCanonical,attr,omitempty"`
	IsMispronouncedAttr          bool   `xml:"IsMispronounced,attr,omitempty"`
	LanguageCodeAttr             string `xml:"LanguageCode,attr,omitempty"`
	EncodingTypeAttr             string `xml:"EncodingType,attr,omitempty"`
	EncodingNamespaceAttr        string `xml:"EncodingNamespace,attr,omitempty"`
	EncodingUserDefinedValueAttr string `xml:"EncodingUserDefinedValue,attr,omitempty"`
	Value                        string `xml:",chardata"`
}

// ReasonForNameChange is A Composite containing details of a ReasonForNameChange.
type ReasonForNameChange struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// RelatedCreationForParty is A Contract in which the Party and the related Creation are involved.
type RelatedCreationForParty struct {
	IsFalseAttr             bool                       `xml:"IsFalse,attr,omitempty"`
	IsConfidentialAttr      bool                       `xml:"IsConfidential,attr,omitempty"`
	IsFirstCreationAttr     bool                       `xml:"IsFirstCreation,attr,omitempty"`
	IsLastCreationAttr      bool                       `xml:"IsLastCreation,attr,omitempty"`
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	CreationType            string                     `xml:"CreationType"`
	Contribution            *Contribution              `xml:"Contribution"`
	ReleaseId               *ReleaseId                 `xml:"ReleaseId"`
	ResourceId              *ResourceIdWithoutFlag     `xml:"ResourceId"`
	MusicalWorkId           *MusicalWorkIdWithoutFlag  `xml:"MusicalWorkId"`
	CreationDescription     *CreationDescription       `xml:"CreationDescription"`
	RelationshipDescription []*Description             `xml:"RelationshipDescription,omitempty"`
	Contract                string                     `xml:"Contract,omitempty"`
}

// RelatedParty is A business Purpose for which the two Parties can be treated as the same.
type RelatedParty struct {
	IsFalseAttr                bool                       `xml:"IsFalse,attr,omitempty"`
	IsConfidentialAttr         bool                       `xml:"IsConfidential,attr,omitempty"`
	MetadataSourceReference    []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	PartyRelationshipType      *PartyRelationshipType     `xml:"PartyRelationshipType"`
	BusinessPurpose            string                     `xml:"BusinessPurpose,omitempty"`
	PartyRelatedPartyReference interface{}                `xml:"PartyRelatedPartyReference"`
	PartyId                    *DetailedPartyIdForParty   `xml:"PartyId,omitempty"`
	PartyName                  *PartyName                 `xml:"PartyName,omitempty"`
	Description                []*Description             `xml:"Description,omitempty"`
	Contract                   string                     `xml:"Contract,omitempty"`
	ValidityPeriod             []*ValidityPeriod          `xml:"ValidityPeriod,omitempty"`
	RelatedCreation            []*RelatedCreationForParty `xml:"RelatedCreation,omitempty"`
}

// ReleaseForRequest is A Composite containing details of a Title of the Release.
type ReleaseForRequest struct {
	ReleaseId    *ReleaseId    `xml:"ReleaseId,omitempty"`
	ReleaseTitle *ReleaseTitle `xml:"ReleaseTitle,omitempty"`
}

// RequestedParty is A Composite containing details of a Work to which the Party contributed.
type RequestedParty struct {
	PartyId   *DetailedPartyId      `xml:"PartyId"`
	PartyName *PartyNameForRequest  `xml:"PartyName"`
	Role      []*ContributorRole    `xml:"Role,omitempty"`
	Release   []*ReleaseForRequest  `xml:"Release,omitempty"`
	Resource  []*ResourceForRequest `xml:"Resource,omitempty"`
	Work      []*WorkForRequest     `xml:"Work,omitempty"`
}

// ResourceForRequest is Further Reading: https://kb.ddex.net/implementing-each-standard/best-practices-for-all-ddex-standards/guidance-on-releaseresourcework-metadata/resourcegroups-and-trackreleases
type ResourceForRequest struct {
	ResourceId    *ResourceIdWithoutFlag `xml:"ResourceId,omitempty"`
	ResourceTitle *ResourceTitle         `xml:"ResourceTitle,omitempty"`
	ResourceType  string                 `xml:"ResourceType,omitempty"`
}

// SocialMediaURL is A Composite containing details of social media Identifiers used by a Party.
type SocialMediaURL struct {
	LanguageCodeAttr            string `xml:"LanguageCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// WorkForRequest is A Composite containing details of a Title of the Work.
type WorkForRequest struct {
	WorkId    *MusicalWorkIdWithoutFlag `xml:"WorkId,omitempty"`
	WorkTitle *WorkTitle                `xml:"WorkTitle,omitempty"`
}

// Category is A Composite containing details of a category. The Atom cagegory construct is defined in section 4.2.2 of the format spec.
type Category struct {
	TermAttr   string `xml:"term,attr"`
	SchemeAttr string `xml:"scheme,attr,omitempty"`
	LabelAttr  string `xml:"label,attr,omitempty"`
}

// Content is A Composite containing details of a content. The Atom content construct is defined in section 4.1.3 of the format spec.
type Content struct {
	TypeAttr string `xml:"type,attr,omitempty"`
	SrcAttr  string `xml:"src,attr,omitempty"`
}

// DateTime is A Composite containing details of a published.
type DateTime struct {
	Value string `xml:",chardata"`
}

// Generator is A Composite containing details of a generator. The Atom generator element is defined in section 4.2.4 of the format spec.
type Generator struct {
	UriAttr     string `xml:"uri,attr,omitempty"`
	VersionAttr string `xml:"version,attr,omitempty"`
	Value       string `xml:",chardata"`
}

// Icon is A Composite containing details of an icon. The Atom icon construct is defined in section 4.2.5 of the format spec.
type Icon struct {
	Value string `xml:",chardata"`
}

// Id is A Composite containing details of an ID. The Atom id construct is defined in section 4.2.6 of the format spec.
type Id struct {
	Value string `xml:",chardata"`
}

// Link is A Composite containing details of a link. The Atom link construct is defined in section 3.4 of the format spec.
type Link struct {
	HrefAttr     string `xml:"href,attr"`
	RelAttr      string `xml:"rel,attr,omitempty"`
	TypeAttr     string `xml:"type,attr,omitempty"`
	HreflangAttr string `xml:"hreflang,attr,omitempty"`
	TitleAttr    string `xml:"title,attr,omitempty"`
	LengthAttr   int    `xml:"length,attr,omitempty"`
}

// Logo is A Composite containing details of a logo. The Atom logo construct is defined in section 4.2.8 of the format spec.
type Logo struct {
	Value string `xml:",chardata"`
}

// Person is A Composite containing details of a URI.
type Person struct {
	Name  []string      `xml:"name"`
	Uri   []*URI        `xml:"uri,omitempty"`
	Email []interface{} `xml:"email,omitempty"`
}

// Source is A Composite containing details of an update.
type Source struct {
	Author      []*Person    `xml:"author,omitempty"`
	Category    []*Category  `xml:"category,omitempty"`
	Contributor []*Person    `xml:"contributor,omitempty"`
	Generator   []*Generator `xml:"generator,omitempty"`
	Icon        []*Icon      `xml:"icon,omitempty"`
	Id          []*Id        `xml:"id,omitempty"`
	Link        []*Link      `xml:"link,omitempty"`
	Logo        []*Logo      `xml:"logo,omitempty"`
	Rights      []*Text      `xml:"rights,omitempty"`
	Subtitle    []*Text      `xml:"subtitle,omitempty"`
	Title       []*Text      `xml:"title,omitempty"`
	Updated     []*DateTime  `xml:"updated,omitempty"`
}

// Text is A Composite containing details of a text. The Atom text construct is defined in section 3.1 of the format spec.
type Text struct {
	TypeAttr string `xml:"type,attr,omitempty"`
}

// URI is A Composite containing details of a URI.
type URI struct {
	Value string `xml:",chardata"`
}

// AllTerritoryCode is A Composite containing details of a TerritoryCode.
type AllTerritoryCode struct {
	IdentifierTypeAttr string `xml:"IdentifierType,attr,omitempty"`
	Value              string `xml:",chardata"`
}

// ArtistType is A Territory to which the artist type applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type ArtistType struct {
	MetadataSourceReference          []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                            *ArtistTypeValue           `xml:"Value"`
	TerritoryOfArtistTypeDescription []string                   `xml:"TerritoryOfArtistTypeDescription,omitempty"`
}

// ArtistTypeValue is A Composite containing details of an artist type value.
type ArtistTypeValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ArtisticInfluence is A Flag indicating whether the related Party has influenced the current Party (=true) or not (=false).
type ArtisticInfluence struct {
	MetadataSourceReference []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	Party                   []*PartyDescriptorWithPronunciation `xml:"Party,omitempty"`
	Work                    []*Work                             `xml:"Work,omitempty"`
	Resource                []*Resource                         `xml:"Resource,omitempty"`
	Release                 []*Release                          `xml:"Release,omitempty"`
	Description             []*TextWithFormat                   `xml:"Description,omitempty"`
	IsInfluenced            bool                                `xml:"IsInfluenced,omitempty"`
	IsInfluencer            bool                                `xml:"IsInfluencer,omitempty"`
}

// Award is A Comment on the award.
type Award struct {
	MetadataSourceReference []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	AwardingBody            *PartyDescriptorWithPronunciation   `xml:"AwardingBody"`
	AwardedParty            *PartyDescriptorWithPronunciation   `xml:"AwardedParty"`
	AwardName               *NameWithPronunciationAndScriptCode `xml:"AwardName"`
	Date                    *EventDate                          `xml:"Date"`
	IsWinner                bool                                `xml:"IsWinner"`
	Comment                 []*TextWithFormat                   `xml:"Comment,omitempty"`
}

// Biography is A Composite containing details of an Author of the biography.
type Biography struct {
	MetadataSourceReference []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	Text                    []*BiographyText                    `xml:"Text"`
	Author                  []*PartyDescriptorWithPronunciation `xml:"Author,omitempty"`
}

// BiographyText is A Composite containing details of the biography text.
type BiographyText struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	FormatAttr                  string `xml:"Format,attr,omitempty"`
	NamespaceAttr               string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr        string `xml:"UserDefinedValue,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// CatalogNumber is A Composite containing details of a CatalogNumber.
type CatalogNumber struct {
	NamespaceAttr string `xml:"Namespace,attr"`
	Value         string `xml:",chardata"`
}

// ClassicalPeriod is A Territory to which the classical musical period applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type ClassicalPeriod struct {
	MetadataSourceReference               []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Name                                  *PeriodValue               `xml:"Name"`
	LanguageAndScriptOfClassicalPeriod    []string                   `xml:"LanguageAndScriptOfClassicalPeriod,omitempty"`
	TerritoryOfClassicalPeriodDescription []string                   `xml:"TerritoryOfClassicalPeriodDescription,omitempty"`
}

// CommentaryNote is An author of the commentary note.
type CommentaryNote struct {
	MetadataSourceReference              []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	Text                                 []*TextWithoutTerritory             `xml:"Text"`
	CommentaryNoteType                   []*CommentaryNoteType               `xml:"CommentaryNoteType"`
	LanguageAndScriptOfCommentaryNote    []string                            `xml:"LanguageAndScriptOfCommentaryNote,omitempty"`
	TerritoryOfCommentaryNoteDescription []string                            `xml:"TerritoryOfCommentaryNoteDescription,omitempty"`
	Author                               []*PartyDescriptorWithPronunciation `xml:"Author,omitempty"`
}

// CommentaryNoteType is A Composite containing details of a commentary note type.
type CommentaryNoteType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// ContributorRole is A Composite containing details of a ContributorRole. Note: this can be used in a DdexMessage in relation to any Work, Performance or Fixation any of which may form the whole or part of the Resource itself.
type ContributorRole struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Date is A Composite containing details of a Date.
type Date struct {
	IsApproximateAttr bool `xml:"IsApproximate,attr,omitempty"`
	*DdexIsoDate
}

// Description is A Composite containing details of a Description.
type Description struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// DetailedHashSum is The value of the HashSum.
type DetailedHashSum struct {
	Algorithm    *HashSumAlgorithmType `xml:"Algorithm"`
	Version      string                `xml:"Version,omitempty"`
	Parameter    string                `xml:"Parameter,omitempty"`
	DataType     string                `xml:"DataType,omitempty"`
	HashSumValue string                `xml:"HashSumValue"`
}

// DetailedPartyId is An International Standard Name Identifier, the ISO 27729 Standard Identifier for names. DDEX will enforce the syntax [0-9]{15}[X0-9] using XML Schema in the future.
type DetailedPartyId struct {
	ISNI           string           `xml:"ISNI,omitempty"`
	DPID           interface{}      `xml:"DPID,omitempty"`
	IpiNameNumber  interface{}      `xml:"IpiNameNumber,omitempty"`
	IPN            string           `xml:"IPN,omitempty"`
	CisacSocietyId string           `xml:"CisacSocietyId,omitempty"`
	ProprietaryId  []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// DisplayArtistName is A Composite containing details of a DisplayArtistName.
type DisplayArtistName struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// DisplayArtistNameWithDefault is Explanatory Note: This Composite is named DisplayArtistNameWithDefault to disambiguate it from the basic DisplayArtistName Composite.
type DisplayArtistNameWithDefault struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// DisplayArtistNameWithPronunciation is The string describing the pronunciation.
type DisplayArtistNameWithPronunciation struct {
	Name          *DisplayArtistNameWithDefault `xml:"Name"`
	Pronunciation []*Pronunciation              `xml:"Pronunciation,omitempty"`
}

// DisplaySubTitle is The string describing the pronunciation.
type DisplaySubTitle struct {
	SequenceNumberAttr     int              `xml:"SequenceNumber,attr,omitempty"`
	IsDisplayedInTitleAttr bool             `xml:"IsDisplayedInTitle,attr,omitempty"`
	NamespaceAttr          string           `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr   string           `xml:"UserDefinedValue,attr,omitempty"`
	SubTitleTypeAttr       interface{}      `xml:"SubTitleType,attr,omitempty"`
	Title                  string           `xml:"Title"`
	Pronunciation          []*Pronunciation `xml:"Pronunciation,omitempty"`
}

// DisplayTitle is A Composite containing details of a SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.
type DisplayTitle struct {
	LanguageAndScriptCodeAttr   string             `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string             `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool               `xml:"IsDefault,attr,omitempty"`
	TitleText                   *TitleText         `xml:"TitleText"`
	SubTitle                    []*DisplaySubTitle `xml:"SubTitle,omitempty"`
}

// Epoch is A Territory to which the epoch applies. The use of ISO TerritoryCodes (or the term 'Worldwide') is strongly encouraged; TIS TerritoryCodes should only be used if both MessageSender and MessageRecipient are familiar with this standard.
type Epoch struct {
	MetadataSourceReference     []*MetadataSourceReference          `xml:"MetadataSourceReference,omitempty"`
	Value                       []string                            `xml:"Value,omitempty"`
	RelatedArtist               []*PartyDescriptorWithPronunciation `xml:"RelatedArtist,omitempty"`
	RelatedCreation             []*RelatedCreation                  `xml:"RelatedCreation,omitempty"`
	StartDate                   *Date                               `xml:"StartDate,omitempty"`
	EndDate                     *Date                               `xml:"EndDate,omitempty"`
	LanguageAndScriptOfEpoch    []string                            `xml:"LanguageAndScriptOfEpoch,omitempty"`
	TerritoryOfEpochDescription []string                            `xml:"TerritoryOfEpochDescription,omitempty"`
}

// EventDate is A Composite containing details of the Date and Place of an Event.
type EventDate struct {
	IsApproximateAttr           bool   `xml:"IsApproximate,attr,omitempty"`
	IsBeforeAttr                bool   `xml:"IsBefore,attr,omitempty"`
	IsAfterAttr                 bool   `xml:"IsAfter,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	LocationDescriptionAttr     string `xml:"LocationDescription,attr,omitempty"`
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	*DdexIsoDate
}

// File is The size of the File in kilobytes.
type File struct {
	URI      string           `xml:"URI"`
	HashSum  *DetailedHashSum `xml:"HashSum,omitempty"`
	FileSize float64          `xml:"FileSize,omitempty"`
}

// HashSumAlgorithmType is A Composite containing details of a HashSumAlgorithmType.
type HashSumAlgorithmType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Image is A Composite containing details of the Type of the Image.
type Image struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	File                    *File                      `xml:"File"`
	ImageType               []*ImageType               `xml:"ImageType,omitempty"`
}

// ImageType is A Composite containing details of an ImageType.
type ImageType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// MessageAuditTrail is A Composite containing details of a Party handling the Message and the Time at which the handling took place.
type MessageAuditTrail struct {
	MessageAuditTrailEvent []*MessageAuditTrailEvent `xml:"MessageAuditTrailEvent"`
}

// MessageAuditTrailEvent is The DateTime at which the Message was handled by the MessagingParty (the only allowed format is ISO 8601: YYYY-MM-DDThh:mm:ssTZD).
type MessageAuditTrailEvent struct {
	MessagingPartyDescriptor *MessagingPartyWithoutCode `xml:"MessagingPartyDescriptor"`
	DateTime                 string                     `xml:"DateTime"`
}

// MessageHeader is The indicator used to distinguish a live Message from a test Message.
type MessageHeader struct {
	MessageThreadId        string                       `xml:"MessageThreadId,omitempty"`
	MessageId              string                       `xml:"MessageId"`
	MessageFileName        string                       `xml:"MessageFileName,omitempty"`
	MessageSender          *MessagingPartyWithoutCode   `xml:"MessageSender"`
	SentOnBehalfOf         *MessagingPartyWithoutCode   `xml:"SentOnBehalfOf,omitempty"`
	MessageRecipient       []*MessagingPartyWithoutCode `xml:"MessageRecipient"`
	MessageCreatedDateTime string                       `xml:"MessageCreatedDateTime"`
	MessageAuditTrail      *MessageAuditTrail           `xml:"MessageAuditTrail,omitempty"`
	MessageControlType     string                       `xml:"MessageControlType,omitempty"`
}

// MessagingPartyWithoutCode is Explanatory Note: This Composite is named MessagingPartyWithoutCode to disambiguate it from the basic MessagingParty Composite.
type MessagingPartyWithoutCode struct {
	PartyId     interface{}           `xml:"PartyId"`
	PartyName   *PartyNameWithoutCode `xml:"PartyName,omitempty"`
	TradingName string                `xml:"TradingName,omitempty"`
}

// MetadataSource is A Composite containing details of a Party that created metadata.
type MetadataSource struct {
	SourceReference    interface{}                   `xml:"SourceReference"`
	PartyId            []*DetailedPartyId            `xml:"PartyId"`
	PartyName          []*PartyNameWithPronunciation `xml:"PartyName"`
	MetadataSourceType *MetadataSourceType           `xml:"MetadataSourceType"`
}

// MetadataSourceList is A Composite containing details of a metadata source.
type MetadataSourceList struct {
	MetadataSource []*MetadataSource `xml:"MetadataSource"`
}

// MetadataSourceReference is A Composite containing details of a claim made by a metadata provider.
type MetadataSourceReference struct {
	AssertionDateTimeAttr string  `xml:"AssertionDateTime,attr,omitempty"`
	StatusAttr            string  `xml:"Status,attr,omitempty"`
	WeightAttr            float64 `xml:"Weight,attr,omitempty"`
	*DdexLocalMetadataSourceAnchorReference
}

// MetadataSourceType is A Composite containing details of a MetadataSourceType.
type MetadataSourceType struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// MusicalWorkIdWithoutFlag is A Composite containing details of a ProprietaryIdentifier of the MusicalWork.
type MusicalWorkIdWithoutFlag struct {
	ISWC                  string           `xml:"ISWC,omitempty"`
	OpusNumber            string           `xml:"OpusNumber,omitempty"`
	ComposerCatalogNumber []string         `xml:"ComposerCatalogNumber,omitempty"`
	ProprietaryId         []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// Name is A Composite containing details of a Name.
type Name struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// NameId is An International Standard Name Identifier, the ISO 27729 Standard Identifier for names. DDEX will enforce the syntax [0-9]{15}[X0-9] using XML Schema in the future.
type NameId struct {
	IsDeprecatedAttr bool             `xml:"IsDeprecated,attr,omitempty"`
	ISNI             string           `xml:"ISNI,omitempty"`
	IpiNameNumber    interface{}      `xml:"IpiNameNumber,omitempty"`
	IPN              string           `xml:"IPN,omitempty"`
	ProprietaryId    []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// NameWithPronunciationAndScriptCode is The string describing the pronunciation.
type NameWithPronunciationAndScriptCode struct {
	Name          string           `xml:"Name"`
	Pronunciation []*Pronunciation `xml:"Pronunciation,omitempty"`
}

// PartyDescriptorWithPronunciation is A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, producers or other Creators.
type PartyDescriptorWithPronunciation struct {
	PartyId   []*DetailedPartyId            `xml:"PartyId"`
	PartyName []*PartyNameWithPronunciation `xml:"PartyName"`
}

// PartyNameWithPronunciation is A Composite containing a short version of the PartyName (e.g. for use on devices with a small display).
type PartyNameWithPronunciation struct {
	LanguageAndScriptCodeAttr   string                              `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string                              `xml:"ApplicableTerritoryCode,attr,omitempty"`
	FullName                    *NameWithPronunciationAndScriptCode `xml:"FullName"`
	FullNameAsciiTranscribed    *NameWithPronunciationAndScriptCode `xml:"FullNameAsciiTranscribed,omitempty"`
	FullNameIndexed             *NameWithPronunciationAndScriptCode `xml:"FullNameIndexed,omitempty"`
	NamesBeforeKeyName          *NameWithPronunciationAndScriptCode `xml:"NamesBeforeKeyName,omitempty"`
	KeyName                     *NameWithPronunciationAndScriptCode `xml:"KeyName,omitempty"`
	NamesAfterKeyName           *NameWithPronunciationAndScriptCode `xml:"NamesAfterKeyName,omitempty"`
	AbbreviatedName             *NameWithPronunciationAndScriptCode `xml:"AbbreviatedName,omitempty"`
}

// PartyNameWithoutCode is A short version of the PartyName (e.g. for use on devices with a small display).
type PartyNameWithoutCode struct {
	FullName                 string `xml:"FullName"`
	FullNameAsciiTranscribed string `xml:"FullNameAsciiTranscribed,omitempty"`
	FullNameIndexed          string `xml:"FullNameIndexed,omitempty"`
	NamesBeforeKeyName       string `xml:"NamesBeforeKeyName,omitempty"`
	KeyName                  string `xml:"KeyName,omitempty"`
	NamesAfterKeyName        string `xml:"NamesAfterKeyName,omitempty"`
	AbbreviatedName          string `xml:"AbbreviatedName,omitempty"`
}

// PeriodValue is A Composite containing details of a musical period.
type PeriodValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// PeriodWithTime is The DateTime of an Event that marks the end of the Period (in ISO 8601 format: YYYY-MM-DDThh:mm:ss). The EndDateTime must not be earlier than the StartDateTime if both are provided.
type PeriodWithTime struct {
	StartDateTime string `xml:"StartDateTime,omitempty"`
	EndDateTime   string `xml:"EndDateTime,omitempty"`
}

// Pronunciation is A Composite containing details of a pronunciation of a Name.
type Pronunciation struct {
	IsCanonicalAttr              bool   `xml:"IsCanonical,attr,omitempty"`
	LanguageCodeAttr             string `xml:"LanguageCode,attr,omitempty"`
	EncodingTypeAttr             string `xml:"EncodingType,attr,omitempty"`
	EncodingNamespaceAttr        string `xml:"EncodingNamespace,attr,omitempty"`
	EncodingUserDefinedValueAttr string `xml:"EncodingUserDefinedValue,attr,omitempty"`
	Value                        string `xml:",chardata"`
}

// ProprietaryId is A Composite containing details of a ProprietaryIdentifier.
type ProprietaryId struct {
	NamespaceAttr string `xml:"Namespace,attr"`
	Value         string `xml:",chardata"`
}

// RelatedCreation is A Composite containing details of a Title of the Creation.
type RelatedCreation struct {
	ReleaseId     *ReleaseId                `xml:"ReleaseId"`
	ResourceId    *ResourceIdWithoutFlag    `xml:"ResourceId"`
	MusicalWorkId *MusicalWorkIdWithoutFlag `xml:"MusicalWorkId"`
	Title         *TitleWithPronunciation   `xml:"Title,omitempty"`
}

// Release is A Composite containing details of a DisplayArtist of the Release for which information is provided.
type Release struct {
	GRid                 string                                `xml:"GRid,omitempty"`
	ICPN                 string                                `xml:"ICPN,omitempty"`
	ProprietaryReleaseId string                                `xml:"ProprietaryReleaseId,omitempty"`
	ReleaseTitle         []*ReleaseTitle                       `xml:"ReleaseTitle"`
	DisplayArtistName    []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist        []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
}

// ReleaseId is A Composite containing details of a ProprietaryIdentifier of the Release.
type ReleaseId struct {
	GRid          string           `xml:"GRid,omitempty"`
	ISRC          string           `xml:"ISRC,omitempty"`
	ICPN          string           `xml:"ICPN,omitempty"`
	CatalogNumber *CatalogNumber   `xml:"CatalogNumber,omitempty"`
	ProprietaryId []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// ReleaseSummary is A Composite containing details of a DisplayArtist of the Release for which information is provided.
type ReleaseSummary struct {
	ReleaseId         *ReleaseId                            `xml:"ReleaseId"`
	DisplayTitle      []*DisplayTitle                       `xml:"DisplayTitle,omitempty"`
	DisplayArtistName []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist     []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
}

// ReleaseTitle is A Composite containing details of a ReleaseTitle.
type ReleaseTitle struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// Resource is A Composite containing details of a DisplayArtist of the Resource for which information is provided.
type Resource struct {
	ISRC                  string                                `xml:"ISRC,omitempty"`
	CatalogNumber         string                                `xml:"CatalogNumber,omitempty"`
	ProprietaryResourceId string                                `xml:"ProprietaryResourceId,omitempty"`
	ResourceTitle         []*ResourceTitle                      `xml:"ResourceTitle"`
	DisplayArtistName     []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist         []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
}

// ResourceIdWithoutFlag is A Composite containing details of a ProprietaryIdentifier of the Resource.
type ResourceIdWithoutFlag struct {
	ISRC          string           `xml:"ISRC,omitempty"`
	ISMN          string           `xml:"ISMN,omitempty"`
	ISAN          string           `xml:"ISAN,omitempty"`
	VISAN         string           `xml:"VISAN,omitempty"`
	ISBN          string           `xml:"ISBN,omitempty"`
	ISSN          string           `xml:"ISSN,omitempty"`
	SICI          string           `xml:"SICI,omitempty"`
	CatalogNumber *CatalogNumber   `xml:"CatalogNumber,omitempty"`
	ProprietaryId []*ProprietaryId `xml:"ProprietaryId,omitempty"`
}

// ResourceSummary is A Composite containing details of a DisplayArtist of the Resource for which information is provided.
type ResourceSummary struct {
	ResourceId        *ResourceIdWithoutFlag                `xml:"ResourceId"`
	DisplayTitle      []*DisplayTitle                       `xml:"DisplayTitle,omitempty"`
	DisplayArtistName []*DisplayArtistNameWithPronunciation `xml:"DisplayArtistName,omitempty"`
	DisplayArtist     []*PartyDescriptorWithPronunciation   `xml:"DisplayArtist,omitempty"`
}

// ResourceTitle is A Composite containing details of a ResourceTitle.
type ResourceTitle struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// SubTitle is A Composite containing details of a SubTitle, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.
type SubTitle struct {
	SubTitleTypeAttr string `xml:"SubTitleType,attr,omitempty"`
	Value            string `xml:",chardata"`
}

// TextWithFormat is A Composite containing details of an Annotation, e.g. a Description or a Comment.
type TextWithFormat struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	FormatAttr                  string `xml:"Format,attr,omitempty"`
	NamespaceAttr               string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr        string `xml:"UserDefinedValue,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// TextWithoutTerritory is Explanatory Note: This Composite is named TextWithoutTerritory to disambiguate it from the basic TextWithFormat Composite.
type TextWithoutTerritory struct {
	LanguageAndScriptCodeAttr   string `xml:"LanguageAndScriptCode,attr,omitempty"`
	ApplicableTerritoryCodeAttr string `xml:"ApplicableTerritoryCode,attr,omitempty"`
	IsDefaultAttr               bool   `xml:"IsDefault,attr,omitempty"`
	FormatAttr                  string `xml:"Format,attr,omitempty"`
	NamespaceAttr               string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr        string `xml:"UserDefinedValue,attr,omitempty"`
	Value                       string `xml:",chardata"`
}

// TitleText is The string describing the pronunciation.
type TitleText struct {
	Title         string           `xml:"Title"`
	Pronunciation []*Pronunciation `xml:"Pronunciation,omitempty"`
}

// TitleWithPronunciation is A SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.
type TitleWithPronunciation struct {
	LanguageAndScriptCodeAttr string     `xml:"LanguageAndScriptCode,attr,omitempty"`
	TitleTypeAttr             string     `xml:"TitleType,attr,omitempty"`
	NamespaceAttr             string     `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr      string     `xml:"UserDefinedValue,attr,omitempty"`
	TitleText                 *TitleText `xml:"TitleText"`
	SubTitle                  *TitleText `xml:"SubTitle,omitempty"`
}

// TitleWithUDV is A Composite containing details of a SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.
type TitleWithUDV struct {
	LanguageAndScriptCodeAttr string      `xml:"LanguageAndScriptCode,attr,omitempty"`
	TitleTypeAttr             string      `xml:"TitleType,attr,omitempty"`
	NamespaceAttr             string      `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr      string      `xml:"UserDefinedValue,attr,omitempty"`
	TitleText                 string      `xml:"TitleText"`
	SubTitle                  []*SubTitle `xml:"SubTitle,omitempty"`
}

// ValidityPeriod is A Composite containing details of the Date and Place of an Event that marks the end of the Period (in ISO 8601 format: YYYY-MM-DD). The EndDate must not be earlier than the StartDate if both are provided.
type ValidityPeriod struct {
	StartDate *EventDate `xml:"StartDate,omitempty"`
	EndDate   *EventDate `xml:"EndDate,omitempty"`
}

// VocalRegister is The value of the vocal register.
type VocalRegister struct {
	MetadataSourceReference []*MetadataSourceReference `xml:"MetadataSourceReference,omitempty"`
	Value                   *VocalRegisterValue        `xml:"Value"`
}

// VocalRegisterValue is A Composite containing details of a vocal register.
type VocalRegisterValue struct {
	NamespaceAttr        string `xml:"Namespace,attr,omitempty"`
	UserDefinedValueAttr string `xml:"UserDefinedValue,attr,omitempty"`
	Value                string `xml:",chardata"`
}

// Work is A Composite containing details of a writer of the Work for which information is provided.
type Work struct {
	ISWC              string                              `xml:"ISWC,omitempty"`
	ProprietaryWorkId string                              `xml:"ProprietaryWorkId,omitempty"`
	WorkTitle         []*WorkTitle                        `xml:"WorkTitle"`
	Writer            []*PartyDescriptorWithPronunciation `xml:"Writer,omitempty"`
}

// WorkSummary is Further Reading: https://kb.ddex.net/implementing-each-standard/best-practices-for-all-ddex-standards/guidance-on-contributors%2C-artists-and-writers
type WorkSummary struct {
	MusicalWorkId *MusicalWorkIdWithoutFlag           `xml:"MusicalWorkId"`
	WorkTitle     []*TitleWithPronunciation           `xml:"WorkTitle,omitempty"`
	Writer        []*PartyDescriptorWithPronunciation `xml:"Writer"`
}

// WorkTitle is A Composite containing details of a WorkTitle.
type WorkTitle struct {
	LanguageAndScriptCodeAttr string `xml:"LanguageAndScriptCode,attr,omitempty"`
	Value                     string `xml:",chardata"`
}

// DdexIsoDate is Format: A Date represented as a calendar Year, Month or Day (in ISO 8601 format: YYYY, YYYY-MM or YYYY-MM-DD).
type DdexIsoDate string

// DdexLocalMetadataSourceAnchorReference is A LocalAnchorReference which acts as a reference to a local Identifier of a Party that is a source for metadata. This LocalAnchorReference is a xs:string starting with the letter U.
type DdexLocalMetadataSourceAnchorReference string
